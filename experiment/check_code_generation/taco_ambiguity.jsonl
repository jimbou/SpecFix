{"requirement": "def round_to_five(numbers):\n\"\"\"\nGiven an array of numbers, return an array, with each member of input array rounded to a nearest number, divisible by 5.\n\n```if:python\nRoundings have to be done like \"in real life\": `22.5 -> 25`\n```\n\"\"\"", "test_input": [[-25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25]], "program1": ["import math\n\ndef round_to_five(numbers):\n\n    def round_number(num):\n        return math.ceil(num / 5) * 5 if num % 5 >= 2.5 else math.floor(num / 5) * 5\n    return [round_number(num) for num in numbers]"], "program2": ["import math\n\ndef round_to_five(numbers):\n    return [round(num / 5) * 5 for num in numbers]", "def round_to_five(numbers):\n    return [round(num / 5) * 5 for num in numbers]", "def round_to_five(numbers):\n    return [round(num / 5) * 5 for num in numbers]", "def round_to_five(numbers):\n\n    def round_number(num):\n        return round(num / 5) * 5\n    return [round_number(num) for num in numbers]", "def round_to_five(numbers):\n\n    def round_nearest_five(n):\n        return 5 * round(n / 5)\n    return [round_nearest_five(num) for num in numbers]", "def round_to_five(numbers):\n\n    def round_nearest_five(n):\n        return round(n / 5) * 5\n    return [round_nearest_five(num) for num in numbers]", "def round_to_five(numbers):\n\n    def round_single(num):\n        return round(num / 5) * 5\n    return [round_single(num) for num in numbers]", "def round_to_five(numbers):\n\n    def round_number(n):\n        return round(n / 5) * 5\n    return [round_number(num) for num in numbers]"], "output1": [-25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25], "output2": [-25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25], "explanation": "math.ceil"}
{"requirement": "def firstdigit(arr, n):\n\"\"\"\nGiven an array arr[] of size N, find the first digit from the left of the product of these N integers.\n\nYour Task:\nYou don't need to read input or print anything. Your task is to complete the function firstdigit() which takes N and array arr[] as input parameters and returns the left digit of product.\nExpected Time Complexity: O(N)\nExpected Auxiliary Space: O(1)\nConstraints:\n1 ≤ N, arr[i] ≤ 10^{5}\nTest cases have been designed such that there is no precision ambiguity.\n\"\"\"", "test_input": [[100000, 100000, 100000], 1], "program1": ["def first_digit(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    while product >= 10:\n        product //= 10\n    return product", "def firstdigit(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    product_str = str(product)\n    return int(product_str[0])", "import math\n\ndef firstdigit(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    product_str = str(product)\n    return int(product_str[0])", "def firstdigit(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    product_str = str(product)\n    first_digit = int(product_str[0])\n    return first_digit", "import math\n\ndef firstdigit(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    while product >= 10:\n        product //= 10\n    return product"], "program2": ["def firstdigit(arr, n):\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    product_str = str(product)\n    return int(product_str[0])", "import math\n\ndef firstdigit(arr, n):\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    while prod >= 10:\n        prod //= 10\n    return prod"], "output1": 1, "output2": 1, "explanation": "arr[]"}
{"requirement": "def find_nth_occurrence(substring, string, occurrence=1):\n\"\"\"\n# Description\nYou are required to implement a function `find_nth_occurrence` that returns the index of the nth occurrence of a substring within a string (considering that those substring could overlap each others). If there are less than n occurrences of the substring, return -1.\n\nMultiple occurrences of a substring are allowed to overlap.\n\"\"\"", "test_input": ["test", "testtest", -1], "program1": ["def find_nth_occurrence(substring, string, occurrence=1):\n    index = -1\n    for _ in range(occurrence):\n        index = string.find(substring, index + 1)\n        if index == -1:\n            break\n    return index", "def find_nth_occurrence(substring, string, occurrence=1):\n    start = 0\n    for i in range(occurrence):\n        start = string.find(substring, start)\n        if start == -1:\n            return -1\n        start += 1\n    return start - 1", "def find_nth_occurrence(substring, string, occurrence=1):\n    start = 0\n    count = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            return -1\n        count += 1\n        if count == occurrence:\n            return start\n        start += 1", "def find_nth_occurrence(substring, string, occurrence=1):\n    start = 0\n    count = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos == -1:\n            return -1\n        count += 1\n        if count == occurrence:\n            return pos\n        start = pos + 1\n    return -1", "def find_nth_occurrence(substring, string, occurrence=1):\n    start = 0\n    count = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            return -1\n        count += 1\n        if count == occurrence:\n            return start\n        start += 1\n    return -1", "def find_nth_occurrence(substring, string, occurrence=1):\n    start = 0\n    for _ in range(occurrence):\n        start = string.find(substring, start)\n        if start == -1:\n            return -1\n        start += 1\n    return start - 1", "def find_nth_occurrence(substring, string, occurrence=1):\n    start = 0\n    count = 0\n    while count < occurrence:\n        start = string.find(substring, start)\n        if start == -1:\n            return -1\n        count += 1\n        start += 1\n    return start - 1", "def find_nth_occurrence(substring, string, occurrence=1):\n    start = 0\n    for _ in range(occurrence):\n        start = string.find(substring, start)\n        if start == -1:\n            return -1\n        start += 1\n    return start - 1", "def find_nth_occurrence(substring, string, occurrence=1):\n    start = 0\n    for _ in range(occurrence):\n        start = string.find(substring, start)\n        if start == -1:\n            return -1\n        start += 1\n    return start - 1"], "program2": ["def find_nth_occurrence(substring, string, occurrence=1):\n    start = 0\n    count = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            return -1\n        count += 1\n        if count == occurrence:\n            return start\n        start += 1"], "output1": -1, "output2": -1, "explanation": "find_nth_occurrence"}
{"requirement": "def calculate_1rm(w, r):\n\"\"\"\nYou just got done with your set at the gym, and you are wondering how much weight you could lift if you did a single repetition. Thankfully, a few scholars have devised formulas for this purpose (from [Wikipedia](https://en.wikipedia.org/wiki/One-repetition_maximum)). Your function will receive a weight `w` and a number of repetitions `r` and must return your projected one repetition maximum. Since you are not sure which formula to use and you are feeling confident, your function will return the largest value from the three formulas shown above, rounded to the nearest integer. However, if the number of repetitions passed in is `1` (i.e., it is already a one rep max), your function must return `w`. Also, if the number of repetitions passed in is `0` (i.e., no repetitions were completed), your function must return `0`.\n\"\"\"", "test_input": [250, 8], "program1": ["import math\n\ndef calculate_1rm(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    formula1 = w * (1 + r / 30)\n    formula2 = w * (1 + 2.7 * math.log10(r))\n    formula3 = w * (1 + 0.033 * r)\n    return round(max(formula1, formula2, formula3))"], "program2": ["def calculate_1rm(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    else:\n        epley = w * (1 + r / 30)\n        mcglothin = 100 * w / (101.3 - 2.67123 * r)\n        brzycki = w * (36 / (37 - r))\n        return round(max(epley, mcglothin, brzycki))", "import math\n\ndef calculate_1rm(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    formula1 = w * (1 + r / 30)\n    formula2 = w * (1 + 0.033 * r)\n    formula3 = w * (1 + r / 40)\n    return round(max(formula1, formula2, formula3))", "import math\n\ndef calculate_1rm(w, r):\n    if r == 1:\n        return w\n    elif r == 0:\n        return 0\n    epley = w * (1 + r / 30)\n    brzycki = w * (36 / (37 - r))\n    mcglothin = w * (1 + 0.033 * r)\n    return round(max(epley, brzycki, mcglothin))", "import math\n\ndef calculate_1rm(w, r):\n    if r == 0:\n        return 0\n    elif r == 1:\n        return w\n    epley = w * (1 + r / 30)\n    mcglothin = w * (1 + 0.033 * r)\n    brzycki = w * (36 / (37 - r))\n    return round(max(epley, mcglothin, brzycki))", "def calculate_1rm(w, r):\n    if r == 0:\n        return 0\n    elif r == 1:\n        return w\n    else:\n        epley = w * (1 + r / 30)\n        mcglothin = w * (1 + r / 40)\n        brzycki = w / (1.0278 - 0.0278 * r)\n        return round(max(epley, mcglothin, brzycki))", "import math\n\ndef calculate_1rm(w, r):\n    if r == 0:\n        return 0\n    elif r == 1:\n        return w\n    else:\n        epley = w * (1 + r / 30)\n        mcglothin = w * (1 + 0.0333 * r)\n        brzycki = w * (36 / (37 - r))\n        return round(max(epley, mcglothin, brzycki))", "import math\n\ndef calculate_1rm(w, r):\n    if r == 0:\n        return 0\n    elif r == 1:\n        return w\n    epley = w * (1 + r / 30)\n    mcglothin = 100 * w / (101.3 - 2.67123 * r)\n    brzycki = w * (36 / (37 - r))\n    return round(max(epley, mcglothin, brzycki))"], "output1": 860, "output2": 317, "explanation": "w * (1 + r / 30)"}
{"requirement": "def my_crib(n):\n\"\"\"\n## Task\n\nGiven `n` representing the number of floors build a beautiful multi-million dollar mansions.\n\n**Note:** whitespace should be preserved on both sides of the roof. Number of floors will go up to 30. There will be no tests with invalid input.\n\nIf you manage to complete it, you can try a harder version [here](https://www.codewars.com/kata/58360d112fb0ba255300008b).\n\nGood luck!\n\"\"\"", "test_input": [30], "program1": ["def my_crib(n):\n    if n <= 0:\n        return ''\n    roof = ' ' * n + '/' + '_' * (2 * n - 1) + '\\\\' + ' ' * n\n    walls = ['|' + ' ' * (2 * n - 1) + '|' for _ in range(n)]\n    crib = roof + '\\n' + '\\n'.join(walls)\n    return crib"], "program2": ["def my_crib(n):\n    roof = ' ' + '/' * (2 * n - 1) + ' '\n    floors = '\\n'.join((' ' * (n - i) + '|' + ' ' * (2 * i - 1) + '|' for i in range(1, n + 1)))\n    return roof + '\\n' + floors"], "output1": "                              /___________________________________________________________\\                              \n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |\n|                                                           |", "output2": " /////////////////////////////////////////////////////////// \n                             | |\n                            |   |\n                           |     |\n                          |       |\n                         |         |\n                        |           |\n                       |             |\n                      |               |\n                     |                 |\n                    |                   |\n                   |                     |\n                  |                       |\n                 |                         |\n                |                           |\n               |                             |\n              |                               |\n             |                                 |\n            |                                   |\n           |                                     |\n          |                                       |\n         |                                         |\n        |                                           |\n       |                                             |\n      |                                               |\n     |                                                 |\n    |                                                   |\n   |                                                     |\n  |                                                       |\n |                                                         |\n|                                                           |", "explanation": "The two programs produce different outputs because the requirement is ambiguous regarding the structure of the mansion. Specifically:\n\n1. **Roof Construction**:\n   - **Program 0** uses a roof composed of a single '/' followed by underscores and a '\\\\', preserving whitespace on both sides.\n   - **Program 1** creates a roof with multiple '/' characters and spaces, leading to a different roof design.\n\n2. **Wall Construction**:\n   - **Program 0** generates vertical walls with consistent spacing between the '|' characters.\n   - **Program 1** creates expanding floors with increasing spaces between the '|' characters, resulting in a triangular shape.\n\nSince the requirement does not clearly specify the exact design of the roof and walls (such as whether the walls should be straight or expanding), the discrepancy in outputs arises from different interpretations of how to \"build a beautiful multi-million dollar mansion.\" This lack of specificity makes the requirement ambiguous."}
{"requirement": "def penaltyscore(S):\n\"\"\"\nGiven a string S contains 0's, 1's, and 2's, the task is to find the number of goals on the penalty.\n- '1' stands for \"goal\".\n- '0' stands for \"no goal\".\n- '2' stands for a foul which gives a penalty.\n\nYour Task:\nYou don't need to read input or print anything. Your task is to complete the function penaltyscore() which takes a string S as input and returns the goals count on the penalty.  \nExpected Time Complexity: O(|S|).  \nExpected Auxiliary Space: O(1).  \n\nConstraints:\n1 <= |N| <= 10^{5}\n\"\"\"", "test_input": ["2101010101"], "program1": ["def penaltyscore(S):\n    score = 0\n    for char in S:\n        if char == '1':\n            score += 1\n    return score", "def penaltyscore(S):\n    penalty_goals = 0\n    for char in S:\n        if char == '1':\n            penalty_goals += 1\n    return penalty_goals"], "program2": ["def penaltyscore(S):\n    goals = 0\n    penalties = 0\n    for char in S:\n        if char == '1':\n            goals += 1\n        elif char == '2':\n            penalties += 1\n    return goals - penalties"], "output1": 5, "output2": 4, "explanation": "The requirement specifies that the function should return the \"number of goals on the penalty.\" However, it does not clearly define whether this means:\n\n1. **Total Goals**: Counting only the instances of '1' in the string, representing each goal scored during penalty shots. This interpretation aligns with Program 0, which returns the total number of '1's.\n\n2. **Net Goals**: Calculating the difference between goals ('1') and penalties ('2'), effectively computing goals minus penalties. This is how Program 1 operates.\n\nSince the requirement does not explicitly state whether to simply count the goals or to adjust the count based on penalties, it allows for multiple valid interpretations. This ambiguity leads to differing implementations and, consequently, different outputs for the same input."}
{"requirement": "def kontti(s):\n\"\"\"\nKontti language is a finnish word play game.\n\nYou add `-kontti` to the end of each word and then swap their characters until and including the first vowel (\"aeiouy\"); \n\nIf no vowel is present, the word stays the same.\n\nWrite a string method that turns a sentence into kontti language!\n\"\"\"", "test_input": ["bcd - fgh"], "program1": ["def kontti(s):\n\n    def transform_word(word):\n        vowels = 'aeiouy'\n        for (i, char) in enumerate(word):\n            if char.lower() in vowels:\n                return word[:i + 1][::-1] + '-kontti' + word[i + 1:]\n        return word + '-kontti'\n    return ' '.join((transform_word(word) for word in s.split()))"], "program2": ["def kontti(s):\n\n    def transform(word):\n        vowels = 'aeiouy'\n        for (i, char) in enumerate(word):\n            if char in vowels:\n                return word[i:] + '-kontti' + word[:i]\n        return word + '-kontti'\n    words = s.split()\n    transformed_words = [transform(word) for word in words]\n    return ' '.join(transformed_words)", "import re\n\ndef kontti(s):\n\n    def transform_word(word):\n        vowels = 'aeiouy'\n        for (i, char) in enumerate(word):\n            if char.lower() in vowels:\n                return word[i:] + '-kontti' + word[:i]\n        return word + '-kontti'\n    words = s.split()\n    transformed_words = [transform_word(word) for word in words]\n    return ' '.join(transformed_words)\nsentence = 'this is a test sentence'\nkontti_sentence = kontti(sentence)"], "output1": "bcd-kontti --kontti fgh-kontti", "output2": "bcd-kontti --kontti fgh-kontti", "explanation": "'A-konttiEIOU'"}
{"requirement": "def tribonacci(n: int) -> int:\n\"\"\"\nThe Tribonacci sequence \\( T_n \\) is defined as follows:  \n\\( T_0 = 0 \\), \\( T_1 = 1 \\), \\( T_2 = 1 \\), and \\( T_{n+3} = T_n + T_{n+1} + T_{n+2} \\) for \\( n \\geq 0 \\).  \nGiven \\( n \\), return the value of \\( T_n \\).\n\n**Constraints:**\n\n- \\( 0 \\leq n \\leq 37 \\)\n- The answer is guaranteed to fit within a 32-bit integer, i.e., answer \\( \\leq 2^{31} - 1 \\).\n\"\"\"", "test_input": [38], "program1": ["from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef tribonacci(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return tribonacci(n - 1) + tribonacci(n - 2) + tribonacci(n - 3)"], "program2": ["def tribonacci(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    (t0, t1, t2) = (0, 1, 1)\n    for i in range(3, n + 1):\n        t_next = t0 + t1 + t2\n        (t0, t1, t2) = (t1, t2, t_next)\n    return t2", "def tribonacci(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    (t0, t1, t2) = (0, 1, 1)\n    for i in range(3, n + 1):\n        tn = t0 + t1 + t2\n        (t0, t1, t2) = (t1, t2, tn)\n    return t2", "def tribonacci(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    (t0, t1, t2) = (0, 1, 1)\n    for i in range(3, n + 1):\n        t_next = t0 + t1 + t2\n        (t0, t1, t2) = (t1, t2, t_next)\n    return t2", "def tribonacci(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    (t0, t1, t2) = (0, 1, 1)\n    for i in range(3, n + 1):\n        tn = t0 + t1 + t2\n        (t0, t1, t2) = (t1, t2, tn)\n    return t2", "def tribonacci(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    (t0, t1, t2) = (0, 1, 1)\n    for i in range(3, n + 1):\n        tn = t0 + t1 + t2\n        (t0, t1, t2) = (t1, t2, tn)\n    return t2", "def tribonacci(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    (t0, t1, t2) = (0, 1, 1)\n    for i in range(3, n + 1):\n        t_next = t0 + t1 + t2\n        (t0, t1, t2) = (t1, t2, t_next)\n    return t2", "def tribonacci(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    (t0, t1, t2) = (0, 1, 1)\n    for i in range(3, n + 1):\n        tn = t0 + t1 + t2\n        (t0, t1, t2) = (t1, t2, tn)\n    return t2", "def tribonacci(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    (t0, t1, t2) = (0, 1, 1)\n    for i in range(3, n + 1):\n        t_next = t0 + t1 + t2\n        (t0, t1, t2) = (t1, t2, t_next)\n    return t2", "def tribonacci(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    (t0, t1, t2) = (0, 1, 1)\n    for i in range(3, n + 1):\n        tn = t0 + t1 + t2\n        (t0, t1, t2) = (t1, t2, tn)\n    return t2"], "output1": 3831006429, "output2": 3831006429, "explanation": "-1"}
{"requirement": "def missing_angle(h, a, o):\n\"\"\"\nYour challenge is to write a function (`missingAngle` in C/C#, `missing_angle` in Ruby), that calculates the angle θ in degrees to the nearest integer. You will be given three arguments representing each side: o, h and a. One of the arguments equals zero. Use the length of the two other sides to calculate θ. You will not be expected to handle any erronous data in your solution.\n\"\"\"", "test_input": [15, 0, 20], "program1": ["import math\n\ndef missing_angle(h, a, o):\n    if h == 0:\n        θ = math.asin(o / a) * (180 / math.pi)\n    elif a == 0:\n        θ = math.acos(o / h) * (180 / math.pi)\n    elif o == 0:\n        θ = math.atan(h / a) * (180 / math.pi)\n    else:\n        raise ValueError('One of the arguments must be zero')\n    return round(θ)"], "program2": ["import math\n\ndef missing_angle(o, a, h):\n    if o == 0:\n        o = math.sqrt(h ** 2 - a ** 2)\n    elif a == 0:\n        a = math.sqrt(h ** 2 - o ** 2)\n    elif h == 0:\n        h = math.sqrt(o ** 2 + a ** 2)\n    theta = math.degrees(math.atan(o / a))\n    return round(theta)"], "output1": "ValueError('math domain error')", "output2": 49, "explanation": "o"}
{"requirement": "def englishwords(S):\n\"\"\"\nAn English word is given as input and it is modified using some format. Identify the format and print the modified word as output.\n\n**Note:**  \nInput contains uppercase English words.\n\n**Your Task:**  \nYou don't need to read input or print anything. Your task is to complete the function `englishwords()` which takes a string `S` as input and returns the modified string.\n\n**Expected Time Complexity:** O(|S|)  \n**Expected Auxiliary Space:** O(|S|)\n\n**Constraints:**  \n1 <= |S| <= 10<sup>5</sup>\n\"\"\"", "test_input": ["LEARNING"], "program1": ["def englishwords(S):\n    if S.isupper():\n        return S.title()\n    else:\n        return S"], "program2": ["def englishwords(S):\n    if S.islower():\n        return S.upper()\n    if S.isupper():\n        return S.lower()\n    return S.title()", "def englishwords(S):\n    if S[0].isupper() and S[1:].islower():\n        return S.lower()\n    elif S.islower():\n        return S.upper()\n    elif S.isupper():\n        return S.lower()\n    else:\n        return S", "def englishwords(S):\n    if any((char.isdigit() for char in S)):\n        return ''.join((char for char in S if not char.isdigit()))\n    if any((not char.isalnum() for char in S)):\n        return ''.join((char for char in S if char.isalnum()))\n    if any((char.isupper() for char in S)):\n        return S.lower()\n    return S", "def englishwords(S):\n    if all((S[i].isupper() for i in range(0, len(S), 2))) and all((S[i].islower() for i in range(1, len(S), 2))):\n        return S.title()\n    elif S.isupper():\n        return S.lower()\n    elif S.islower():\n        return S.upper()\n    else:\n        return S", "def englishwords(S):\n    if S.islower():\n        return S.upper()\n    elif S.isupper():\n        return S.lower()\n    elif S.istitle():\n        return S.swapcase()\n    else:\n        return S.title()", "def englishwords(S):\n    if S.isupper():\n        return S.lower()\n    else:\n        return S"], "output1": "Learning", "output2": "learning", "explanation": "S"}
