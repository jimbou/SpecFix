{"requirement": "def kooka_counter(laughing: str) -> int:\n\"\"\"A family of kookaburras are in my backyard.\n\nI can't see them all, but I can hear them!\n\n# How many kookaburras are there?\n\n## Hint \n\nThe trick to counting kookaburras is to listen carefully\n\n* The males go ```HaHaHa```...\n\n* The females go ```hahaha```...\n\n* And they always alternate male/female\n\n^ Kata Note : No validation is necessary; only valid input will be passed :-)\n\"\"\"", "inputs": [[""], ["hahahahaha"], ["hahahahahaHaHaHa"], ["HaHaHahahaHaHa"], ["hahahahahahahaHaHa"]], "outputs": [[0], [1], [2], [3], [2]], "starter_code": "def kooka_counter(laughing: str) -> int:", "canonical_solution": "import re\n\ndef kooka_counter(laughing):\n    return len(re.findall('(ha)+|(Ha)+', laughing))", "entry_point": "kooka_counter", "task_id": "TACO_lite/54", "input_output_examples": "[[], []]", "llm_generated_inputs": "[['HaHaHa'], ['hahaha'], ['HaHaHahaha'], ['hahahaHaHaHa'], ['HaHaHaHaHaHahaha'], ['hahahaHaHaHaHaHaHa'], [''], ['Ha'], ['ha']]", "clusters": {"cluster_list": [{"programs_str": ["def kooka_counter(laughing: str) -> int:\n    if not laughing:\n        return 0\n    count = 1\n    for i in range(2, len(laughing), 2):\n        if laughing[i] != laughing[0]:\n            count += 1\n    return count", "def kooka_counter(laughing: str) -> int:\n    if not laughing:\n        return 0\n    count = 1\n    for i in range(2, len(laughing), 2):\n        if laughing[i] != laughing[0]:\n            count += 1\n    return count", "def kooka_counter(laughing: str) -> int:\n    if not laughing:\n        return 0\n    count = 1\n    for i in range(2, len(laughing), 2):\n        if laughing[i] != laughing[0]:\n            count += 1\n    return count", "def kooka_counter(laughing: str) -> int:\n    if not laughing:\n        return 0\n    count = 1\n    for i in range(2, len(laughing), 2):\n        if laughing[i] != laughing[0]:\n            count += 1\n    return count", "def kooka_counter(laughing: str) -> int:\n    if not laughing:\n        return 0\n    count = 1\n    for i in range(2, len(laughing), 2):\n        if laughing[i] != laughing[0]:\n            count += 1\n    return count", "def kooka_counter(laughing: str) -> int:\n    if not laughing:\n        return 0\n    count = 1\n    for i in range(2, len(laughing), 2):\n        if laughing[i] != laughing[0]:\n            count += 1\n    return count", "def kooka_counter(laughing: str) -> int:\n    if not laughing:\n        return 0\n    count = 1\n    for i in range(2, len(laughing), 2):\n        if laughing[i] != laughing[0]:\n            count += 1\n    return count"], "outputs": "[[1], [1], [3], [4], [3], [7], [0], [1], [1]]", "probability": 0.35, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def kooka_counter(laughing: str) -> int:\n    if not laughing:\n        return 0\n    count = 1\n    current_sound = laughing[:2]\n    for i in range(2, len(laughing), 2):\n        if laughing[i:i + 2] != current_sound:\n            count += 1\n            current_sound = laughing[i:i + 2]\n    return count", "def kooka_counter(laughing: str) -> int:\n    if not laughing:\n        return 0\n    count = 1\n    current_laugh = laughing[:2]\n    for i in range(2, len(laughing), 2):\n        if laughing[i:i + 2] != current_laugh:\n            count += 1\n            current_laugh = laughing[i:i + 2]\n    return count", "def kooka_counter(laughing: str) -> int:\n    if not laughing:\n        return 0\n    count = 1\n    last_laugh = laughing[:2]\n    for i in range(2, len(laughing), 2):\n        current_laugh = laughing[i:i + 2]\n        if current_laugh != last_laugh:\n            count += 1\n            last_laugh = current_laugh\n    return count", "def kooka_counter(laughing: str) -> int:\n    if not laughing:\n        return 0\n    count = 1\n    previous = laughing[:2]\n    for i in range(2, len(laughing), 2):\n        current = laughing[i:i + 2]\n        if current != previous:\n            count += 1\n            previous = current\n    return count", "def kooka_counter(laughing: str) -> int:\n    if not laughing:\n        return 0\n    count = 1\n    current_sound = laughing[:2]\n    for i in range(2, len(laughing), 2):\n        if laughing[i:i + 2] != current_sound:\n            count += 1\n            current_sound = laughing[i:i + 2]\n    return count", "def kooka_counter(laughing: str) -> int:\n    if not laughing:\n        return 0\n    count = 1\n    current_laugh = laughing[:2]\n    for i in range(2, len(laughing), 2):\n        if laughing[i:i + 2] != current_laugh:\n            count += 1\n            current_laugh = laughing[i:i + 2]\n    return count", "def kooka_counter(laughing: str) -> int:\n    if not laughing:\n        return 0\n    count = 1\n    current_laugh = laughing[:2]\n    for i in range(2, len(laughing), 2):\n        if laughing[i:i + 2] != current_laugh:\n            count += 1\n            current_laugh = laughing[i:i + 2]\n    return count"], "outputs": "[[1], [1], [2], [2], [2], [2], [0], [1], [1]]", "probability": 0.35, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def kooka_counter(laughing: str) -> int:\n    count = 0\n    i = 0\n    while i < len(laughing):\n        if laughing[i:i + 2] == 'Ha':\n            count += 1\n            i += 4\n        elif laughing[i:i + 2] == 'ha':\n            count += 1\n            i += 4\n        else:\n            i += 1\n    return count"], "outputs": "[[2], [2], [3], [3], [4], [5], [0], [1], [1]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def kooka_counter(laughing: str) -> int:\n    count = 0\n    i = 0\n    while i < len(laughing):\n        if laughing[i:i + 2] == 'Ha':\n            count += 1\n            i += 2\n        elif laughing[i:i + 2] == 'ha':\n            count += 1\n            i += 2\n        else:\n            i += 1\n    return count", "def kooka_counter(laughing: str) -> int:\n    count = 0\n    i = 0\n    while i < len(laughing):\n        if laughing[i:i + 2] == 'Ha':\n            count += 1\n            i += 2\n        elif laughing[i:i + 2] == 'ha':\n            count += 1\n            i += 2\n        else:\n            i += 1\n    return count", "def kooka_counter(laughing: str) -> int:\n    count = 0\n    i = 0\n    while i < len(laughing):\n        if laughing[i:i + 2] == 'Ha':\n            count += 1\n            i += 2\n        elif laughing[i:i + 2] == 'ha':\n            count += 1\n            i += 2\n        else:\n            i += 1\n    return count", "def kooka_counter(laughing: str) -> int:\n    count = 0\n    i = 0\n    while i < len(laughing):\n        if laughing[i:i + 2] == 'Ha':\n            count += 1\n            i += 2\n        elif laughing[i:i + 2] == 'ha':\n            count += 1\n            i += 2\n        else:\n            i += 1\n    return count"], "outputs": "[[3], [3], [5], [6], [8], [9], [0], [1], [1]]", "probability": 0.2, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def kooka_counter(laughing: str) -> int:\n    count = 0\n    i = 0\n    while i < len(laughing):\n        if laughing[i:i + 4] == 'HaHa':\n            count += 1\n            i += 4\n        elif laughing[i:i + 4] == 'haha':\n            count += 1\n            i += 4\n        else:\n            i += 1\n    return count"], "outputs": "[[1], [1], [2], [2], [4], [4], [0], [0], [0]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8427391243319117, "llm_generated_inputs": "[['HaHaHa'], ['hahaha'], ['HaHaHahaha'], ['hahahaHaHaHa'], ['HaHaHaHaHaHahaha'], ['hahahaHaHaHaHaHaHa'], [''], ['Ha'], ['ha']]", "input_output_examples": "[[], []]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.42136956216595584}}
{"requirement": "from typing import List\n\n\ndef sorter(textbooks: List[str]) -> List[str]:\n\"\"\"HELP! Jason can't find his textbook! It is two days before the test date, and Jason's textbooks are all out of order! Help him sort a list (ArrayList in java) full of textbooks by subject, so he can study before the test.\n\nThe sorting should **NOT** be case sensitive\n\"\"\"", "inputs": [[["Algebra", "History", "Geometry", "English"]], [["Algebra", "history", "Geometry", "english"]], [["Alg#bra", "$istory", "Geom^try", "**english"]]], "outputs": [[["Algebra", "English", "Geometry", "History"]], [["Algebra", "english", "Geometry", "history"]], [["$istory", "**english", "Alg#bra", "Geom^try"]]], "starter_code": "from typing import List\ndef sorter(textbooks: List[str]) -> List[str]:", "canonical_solution": "def sorter(textbooks):\n    return sorted(textbooks, key=str.lower)", "entry_point": "sorter", "task_id": "TACO_lite/60", "input_output_examples": "[[], []]", "llm_generated_inputs": "[[['Math', 'science', 'History', 'english']], [['Biology', 'chemistry', 'Physics', 'Geology']], [['art', 'Art', 'aRT', 'ArT']], [['Zoology', 'botany', 'Microbiology', 'Ecology']], [['', 'Astronomy', 'planetary science', 'Cosmology']], [['123', '456', '789', '0']], [[]], [['SingleSubject']]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    return sorted(textbooks, key=lambda x: x.lower())", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    return sorted(textbooks, key=lambda x: x.lower())", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    return sorted(textbooks, key=lambda x: x.lower())", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    return sorted(textbooks, key=lambda x: x.lower())", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    return sorted(textbooks, key=lambda x: x.lower())", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    return sorted(textbooks, key=lambda x: x.lower())", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    return sorted(textbooks, key=lambda x: x.lower())", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    return sorted(textbooks, key=lambda x: x.lower())", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    return sorted(textbooks, key=lambda x: x.lower())", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    return sorted(textbooks, key=lambda x: x.lower())", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    return sorted(textbooks, key=lambda x: x.lower())", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    return sorted(textbooks, key=lambda x: x.lower())", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    return sorted(textbooks, key=lambda x: x.lower())", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    return sorted(textbooks, key=lambda x: x.lower())", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    return sorted(textbooks, key=lambda x: x.lower())", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    return sorted(textbooks, key=lambda x: x.lower())", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    return sorted(textbooks, key=lambda x: x.lower())", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    return sorted(textbooks, key=lambda x: x.lower())", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    return sorted(textbooks, key=lambda x: x.lower())", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    return sorted(textbooks, key=lambda x: x.lower())"], "outputs": "[[['english', 'History', 'Math', 'science']], [['Biology', 'chemistry', 'Geology', 'Physics']], [['art', 'Art', 'aRT', 'ArT']], [['botany', 'Ecology', 'Microbiology', 'Zoology']], [['', 'Astronomy', 'Cosmology', 'planetary science']], [['0', '123', '456', '789']], [[]], [['SingleSubject']]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['Math', 'science', 'History', 'english']], [['Biology', 'chemistry', 'Physics', 'Geology']], [['art', 'Art', 'aRT', 'ArT']], [['Zoology', 'botany', 'Microbiology', 'Ecology']], [['', 'Astronomy', 'planetary science', 'Cosmology']], [['123', '456', '789', '0']], [[]], [['SingleSubject']]]", "input_output_examples": "[[], []]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "def beeramid(bonus: int, price: int) -> int:\n\"\"\"Let's pretend your company just hired your friend from college and paid you a referral bonus. Awesome! To celebrate, you're taking your team out to the terrible dive bar next door and using the referral bonus to buy, and build, the largest three-dimensional beer can pyramid you can. And then probably drink those beers, because let's pretend it's Friday too. \n\nA beer can pyramid will square the number of cans in each level - 1 can in the top level, 4 in the second, 9 in the next, 16, 25... \n\nComplete the beeramid function to return the number of **complete** levels of a beer can pyramid you can make, given the parameters of: \n\n1) your referral bonus, and\n\n2) the price of a beer can\n\"\"\"", "inputs": [[9, 2], [10, 2], [11, 2], [21, 1.5], [454, 5], [455, 5], [4, 4], [3, 4], [0, 4], [-1, 4]], "outputs": [[1], [2], [2], [3], [5], [6], [1], [0], [0], [0]], "starter_code": "def beeramid(bonus: int, price: int) -> int:", "canonical_solution": "def beeramid(bonus, price):\n    beers = bonus // price\n    levels = 0\n    while beers >= (levels + 1) ** 2:\n        levels += 1\n        beers -= levels ** 2\n    return levels", "entry_point": "beeramid", "task_id": "TACO_lite/66", "input_output_examples": "[[[1500, 2], [5000, 3]], [[12], [16]]]", "llm_generated_inputs": "[[100, 2], [1500, 2], [0, 2], [1, 1], [10, 10], [50, 5], [36, 1], [1000, 1], [9999, 9999], [100, 0]]", "clusters": {"cluster_list": [{"programs_str": ["def beeramid(bonus: int, price: int) -> int:\n    total_cans = bonus // price\n    level = 0\n    while (level + 1) ** 2 <= total_cans:\n        total_cans -= (level + 1) ** 2\n        level += 1\n    return level", "def beeramid(bonus: int, price: int) -> int:\n    total_cans = bonus // price\n    levels = 0\n    while (levels + 1) ** 2 <= total_cans:\n        levels += 1\n        total_cans -= levels ** 2\n    return levels", "def beeramid(bonus: int, price: int) -> int:\n    total_cans = bonus // price\n    levels = 0\n    while (levels + 1) ** 2 <= total_cans:\n        levels += 1\n        total_cans -= levels ** 2\n    return levels", "def beeramid(bonus: int, price: int) -> int:\n    total_cans = bonus // price\n    level = 0\n    while (level + 1) ** 2 <= total_cans:\n        total_cans -= (level + 1) ** 2\n        level += 1\n    return level", "def beeramid(bonus: int, price: int) -> int:\n    total_cans = bonus // price\n    level = 0\n    while (level + 1) ** 2 <= total_cans:\n        total_cans -= (level + 1) ** 2\n        level += 1\n    return level", "def beeramid(bonus: int, price: int) -> int:\n    total_cans = bonus // price\n    level = 0\n    while (level + 1) ** 2 <= total_cans:\n        total_cans -= (level + 1) ** 2\n        level += 1\n    return level", "def beeramid(bonus: int, price: int) -> int:\n    total_cans = bonus // price\n    level = 0\n    while (level + 1) ** 2 <= total_cans:\n        total_cans -= (level + 1) ** 2\n        level += 1\n    return level", "def beeramid(bonus: int, price: int) -> int:\n    total_cans = bonus // price\n    level = 0\n    while (level + 1) ** 2 <= total_cans:\n        level += 1\n        total_cans -= level ** 2\n    return level", "def beeramid(bonus: int, price: int) -> int:\n    total_cans = bonus // price\n    level = 0\n    while (level + 1) ** 2 <= total_cans:\n        level += 1\n        total_cans -= level ** 2\n    return level", "def beeramid(bonus: int, price: int) -> int:\n    total_cans = bonus // price\n    level = 0\n    while (level + 1) ** 2 <= total_cans:\n        total_cans -= (level + 1) ** 2\n        level += 1\n    return level", "def beeramid(bonus: int, price: int) -> int:\n    total_cans = bonus // price\n    levels = 0\n    while (levels + 1) ** 2 <= total_cans:\n        levels += 1\n        total_cans -= levels ** 2\n    return levels", "def beeramid(bonus: int, price: int) -> int:\n    total_cans = bonus // price\n    levels = 0\n    while (levels + 1) ** 2 <= total_cans:\n        levels += 1\n        total_cans -= levels ** 2\n    return levels", "def beeramid(bonus: int, price: int) -> int:\n    total_cans = bonus // price\n    level = 0\n    while (level + 1) ** 2 <= total_cans:\n        total_cans -= (level + 1) ** 2\n        level += 1\n    return level", "def beeramid(bonus: int, price: int) -> int:\n    total_cans = bonus // price\n    levels = 0\n    while (levels + 1) ** 2 <= total_cans:\n        levels += 1\n        total_cans -= levels ** 2\n    return levels", "def beeramid(bonus: int, price: int) -> int:\n    total_cans = bonus // price\n    level = 0\n    while (level + 1) ** 2 <= total_cans:\n        level += 1\n        total_cans -= level ** 2\n    return level", "def beeramid(bonus: int, price: int) -> int:\n    total_cans = bonus // price\n    levels = 0\n    while (levels + 1) ** 2 <= total_cans:\n        levels += 1\n        total_cans -= levels ** 2\n    return levels", "def beeramid(bonus: int, price: int) -> int:\n    total_cans = bonus // price\n    level = 0\n    while (level + 1) ** 2 <= total_cans:\n        level += 1\n        total_cans -= level ** 2\n    return level", "def beeramid(bonus: int, price: int) -> int:\n    total_cans = bonus // price\n    level = 0\n    while (level + 1) ** 2 <= total_cans:\n        total_cans -= (level + 1) ** 2\n        level += 1\n    return level", "def beeramid(bonus: int, price: int) -> int:\n    total_cans = bonus // price\n    levels = 0\n    while (levels + 1) ** 2 <= total_cans:\n        levels += 1\n        total_cans -= levels ** 2\n    return levels", "def beeramid(bonus: int, price: int) -> int:\n    total_cans = bonus // price\n    level = 0\n    while (level + 1) ** 2 <= total_cans:\n        total_cans -= (level + 1) ** 2\n        level += 1\n    return level"], "outputs": "[[4], [12], [0], [1], [1], [2], [4], [13], [1], ['ZeroDivisionError']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[100, 2], [1500, 2], [0, 2], [1, 1], [10, 10], [50, 5], [36, 1], [1000, 1], [9999, 9999], [100, 0]]", "input_output_examples": "[[[1500, 2], [5000, 3]], [[12], [16]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "def valid_mersenne(n: int) -> bool:\n\"\"\"A [Mersenne prime](https://en.wikipedia.org/wiki/Mersenne_prime) is a prime number that can be represented as:\nMn = 2^(n) - 1. Therefore, every Mersenne prime is one less than a power of two. \n\nWrite a function that will return whether the given integer `n` will produce a Mersenne prime or not.\n\nThe tests will check random integers up to 2000.\n\"\"\"", "inputs": [[2], [3], [5], [7], [11], [13], [17], [19], [21], [23], [31], [49], [61], [89], [107], [127], [221], [521], [607], [1279]], "outputs": [[true], [true], [true], [true], [false], [true], [true], [true], [false], [false], [true], [false], [true], [true], [true], [true], [false], [true], [true], [true]], "starter_code": "def valid_mersenne(n: int) -> bool:", "canonical_solution": "def valid_mersenne(n):\n    return n in {2, 3, 5, 7, 13, 17, 19, 31, 61, 89, 107, 127, 521, 607, 1279}", "entry_point": "valid_mersenne", "task_id": "TACO_lite/69", "input_output_examples": "[[[2], [3], [5], [11], [13]], [[True], [True], [True], [False], [True]]]", "llm_generated_inputs": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [127], [128], [2000], [0], [-1], [-10]]", "clusters": {"cluster_list": [{"programs_str": ["def valid_mersenne(n: int) -> bool:\n\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    mersenne_number = (1 << n) - 1\n    return is_prime(mersenne_number)", "def valid_mersenne(n: int) -> bool:\n\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    mersenne_number = (1 << n) - 1\n    return is_prime(mersenne_number)", "def valid_mersenne(n: int) -> bool:\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    mersenne_number = (1 << n) - 1\n    return is_prime(mersenne_number)", "def valid_mersenne(n: int) -> bool:\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    mersenne_number = (1 << n) - 1\n    return is_prime(mersenne_number)", "def valid_mersenne(n: int) -> bool:\n\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    mersenne_number = (1 << n) - 1\n    return is_prime(mersenne_number)", "def valid_mersenne(n: int) -> bool:\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    mersenne_number = (1 << n) - 1\n    return is_prime(mersenne_number)", "def valid_mersenne(n: int) -> bool:\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    mersenne_number = (1 << n) - 1\n    return is_prime(mersenne_number)", "def valid_mersenne(n: int) -> bool:\n\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    mersenne_number = (1 << n) - 1\n    return is_prime(mersenne_number)", "def valid_mersenne(n: int) -> bool:\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    mersenne_number = (1 << n) - 1\n    return is_prime(mersenne_number)", "def valid_mersenne(n: int) -> bool:\n\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    mersenne_number = (1 << n) - 1\n    return is_prime(mersenne_number)", "def valid_mersenne(n: int) -> bool:\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    mersenne_number = (1 << n) - 1\n    return is_prime(mersenne_number)", "def valid_mersenne(n: int) -> bool:\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    mersenne_number = (1 << n) - 1\n    return is_prime(mersenne_number)", "def valid_mersenne(n: int) -> bool:\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    mersenne_number = (1 << n) - 1\n    return is_prime(mersenne_number)", "def valid_mersenne(n: int) -> bool:\n\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    mersenne_number = (1 << n) - 1\n    return is_prime(mersenne_number)", "def valid_mersenne(n: int) -> bool:\n\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    mersenne_number = (1 << n) - 1\n    return is_prime(mersenne_number)", "def valid_mersenne(n: int) -> bool:\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    mersenne_number = (1 << n) - 1\n    return is_prime(mersenne_number)", "def valid_mersenne(n: int) -> bool:\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    mersenne_number = (1 << n) - 1\n    return is_prime(mersenne_number)", "def valid_mersenne(n: int) -> bool:\n\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    mersenne_number = (1 << n) - 1\n    return is_prime(mersenne_number)", "def valid_mersenne(n: int) -> bool:\n\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    mersenne_number = (1 << n) - 1\n    return is_prime(mersenne_number)", "def valid_mersenne(n: int) -> bool:\n\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    mersenne_number = (1 << n) - 1\n    return is_prime(mersenne_number)"], "outputs": "[[False], [True], [True], [False], [True], [False], [True], [False], [False], [False], [False], [False], [True], [False], [False], [False], [True], [False], [True], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [True], [False], 'Timeout', [False], [False], [False], ['ValueError'], ['ValueError']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [127], [128], [2000], [0], [-1], [-10]]", "input_output_examples": "[[[2], [3], [5], [11], [13]], [[True], [True], [True], [False], [True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "from typing import List\n\n\ndef mean_vs_median(numbers: List[float]) -> str:\n\"\"\"Your goal is to implement the method **meanVsMedian** which accepts an *odd-length* array of integers and returns one of the following:\n\n* 'mean' - in case **mean** value is **larger than** median value\n* 'median' - in case **median** value is **larger than** mean value\n* 'same' - in case both mean and median share the **same value**\n\nReminder: [Median](https://en.wikipedia.org/wiki/Median)\n\nArray will always be valid (odd-length >= 3)\n\"\"\"", "inputs": [[[1, 1, 1]], [[1, 2, 37]], [[7, 14, -70]], [[-10, 20, 5]]], "outputs": [["same"], ["mean"], ["median"], ["same"]], "starter_code": "from typing import List\ndef mean_vs_median(numbers: List[float]) -> str:", "canonical_solution": "from numpy import mean, median\n\ndef mean_vs_median(numbers):\n    if mean(numbers) > median(numbers):\n        return 'mean'\n    elif mean(numbers) < median(numbers):\n        return 'median'\n    else:\n        return 'same'", "entry_point": "mean_vs_median", "task_id": "TACO_lite/74", "input_output_examples": "[[[[1, 2, 3]], [[3, 4, 5]], [[1, 3, 7]], [[1, 6, 8]]], [['same'], ['same'], ['median'], ['mean']]]", "llm_generated_inputs": "[[[1, 2, 3]], [[3, 1, 2]], [[5, 5, 5]], [[1, 100, 2]], [[10, 20, 30, 40, 50]], [[1, 3, 3, 6, 7, 8, 9]], [[100, 200, 300, 400, 500, 600, 700]], [[1, 2, 3, 4, 5, 6, 7]], [[7, 7, 7, 7, 7, 7, 7]], [[1, 2, 3, 4, 100]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef mean_vs_median(numbers: List[float]) -> str:\n    numbers.sort()\n    n = len(numbers)\n    mean = sum(numbers) / n\n    median = numbers[n // 2]\n    if mean > median:\n        return 'mean'\n    elif median > mean:\n        return 'median'\n    else:\n        return 'same'", "from typing import List\n\ndef mean_vs_median(numbers: List[float]) -> str:\n    numbers.sort()\n    n = len(numbers)\n    median = numbers[n // 2]\n    mean = sum(numbers) / n\n    if mean > median:\n        return 'mean'\n    elif median > mean:\n        return 'median'\n    else:\n        return 'same'", "from typing import List\n\ndef mean_vs_median(numbers: List[float]) -> str:\n    numbers.sort()\n    n = len(numbers)\n    median = numbers[n // 2]\n    mean = sum(numbers) / n\n    if mean > median:\n        return 'mean'\n    elif median > mean:\n        return 'median'\n    else:\n        return 'same'", "from typing import List\n\ndef mean_vs_median(numbers: List[float]) -> str:\n    numbers.sort()\n    n = len(numbers)\n    mean = sum(numbers) / n\n    median = numbers[n // 2]\n    if mean > median:\n        return 'mean'\n    elif median > mean:\n        return 'median'\n    else:\n        return 'same'", "from typing import List\n\ndef mean_vs_median(numbers: List[float]) -> str:\n    numbers.sort()\n    n = len(numbers)\n    median = numbers[n // 2]\n    mean = sum(numbers) / n\n    if mean > median:\n        return 'mean'\n    elif median > mean:\n        return 'median'\n    else:\n        return 'same'", "from typing import List\n\ndef mean_vs_median(numbers: List[float]) -> str:\n    numbers.sort()\n    n = len(numbers)\n    mean = sum(numbers) / n\n    median = numbers[n // 2]\n    if mean > median:\n        return 'mean'\n    elif median > mean:\n        return 'median'\n    else:\n        return 'same'", "from typing import List\n\ndef mean_vs_median(numbers: List[float]) -> str:\n    numbers.sort()\n    n = len(numbers)\n    median = numbers[n // 2]\n    mean = sum(numbers) / n\n    if mean > median:\n        return 'mean'\n    elif median > mean:\n        return 'median'\n    else:\n        return 'same'", "from typing import List\n\ndef mean_vs_median(numbers: List[float]) -> str:\n    numbers.sort()\n    n = len(numbers)\n    median = numbers[n // 2]\n    mean = sum(numbers) / n\n    if mean > median:\n        return 'mean'\n    elif median > mean:\n        return 'median'\n    else:\n        return 'same'", "from typing import List\n\ndef mean_vs_median(numbers: List[float]) -> str:\n    numbers.sort()\n    n = len(numbers)\n    median = numbers[n // 2]\n    mean = sum(numbers) / n\n    if mean > median:\n        return 'mean'\n    elif median > mean:\n        return 'median'\n    else:\n        return 'same'", "from typing import List\n\ndef mean_vs_median(numbers: List[float]) -> str:\n    numbers.sort()\n    n = len(numbers)\n    median = numbers[n // 2]\n    mean = sum(numbers) / n\n    if mean > median:\n        return 'mean'\n    elif median > mean:\n        return 'median'\n    else:\n        return 'same'", "from typing import List\n\ndef mean_vs_median(numbers: List[float]) -> str:\n    numbers.sort()\n    n = len(numbers)\n    median = numbers[n // 2]\n    mean = sum(numbers) / n\n    if mean > median:\n        return 'mean'\n    elif median > mean:\n        return 'median'\n    else:\n        return 'same'", "from typing import List\n\ndef mean_vs_median(numbers: List[float]) -> str:\n    numbers.sort()\n    n = len(numbers)\n    median = numbers[n // 2]\n    mean = sum(numbers) / n\n    if mean > median:\n        return 'mean'\n    elif median > mean:\n        return 'median'\n    else:\n        return 'same'", "from typing import List\n\ndef mean_vs_median(numbers: List[float]) -> str:\n    numbers.sort()\n    n = len(numbers)\n    median = numbers[n // 2]\n    mean = sum(numbers) / n\n    if mean > median:\n        return 'mean'\n    elif median > mean:\n        return 'median'\n    else:\n        return 'same'", "from typing import List\n\ndef mean_vs_median(numbers: List[float]) -> str:\n    numbers.sort()\n    n = len(numbers)\n    median = numbers[n // 2]\n    mean = sum(numbers) / n\n    if mean > median:\n        return 'mean'\n    elif median > mean:\n        return 'median'\n    else:\n        return 'same'", "from typing import List\n\ndef mean_vs_median(numbers: List[float]) -> str:\n    numbers.sort()\n    n = len(numbers)\n    mean = sum(numbers) / n\n    median = numbers[n // 2]\n    if mean > median:\n        return 'mean'\n    elif median > mean:\n        return 'median'\n    else:\n        return 'same'", "from typing import List\n\ndef mean_vs_median(numbers: List[float]) -> str:\n    numbers.sort()\n    n = len(numbers)\n    median = numbers[n // 2]\n    mean = sum(numbers) / n\n    if mean > median:\n        return 'mean'\n    elif median > mean:\n        return 'median'\n    else:\n        return 'same'", "from typing import List\n\ndef mean_vs_median(numbers: List[float]) -> str:\n    numbers.sort()\n    n = len(numbers)\n    median = numbers[n // 2]\n    mean = sum(numbers) / n\n    if mean > median:\n        return 'mean'\n    elif median > mean:\n        return 'median'\n    else:\n        return 'same'", "from typing import List\n\ndef mean_vs_median(numbers: List[float]) -> str:\n    numbers.sort()\n    n = len(numbers)\n    mean = sum(numbers) / n\n    median = numbers[n // 2]\n    if mean > median:\n        return 'mean'\n    elif median > mean:\n        return 'median'\n    else:\n        return 'same'", "from typing import List\n\ndef mean_vs_median(numbers: List[float]) -> str:\n    numbers.sort()\n    n = len(numbers)\n    median = numbers[n // 2]\n    mean = sum(numbers) / n\n    if mean > median:\n        return 'mean'\n    elif median > mean:\n        return 'median'\n    else:\n        return 'same'", "from typing import List\n\ndef mean_vs_median(numbers: List[float]) -> str:\n    numbers.sort()\n    n = len(numbers)\n    median = numbers[n // 2]\n    mean = sum(numbers) / n\n    if mean > median:\n        return 'mean'\n    elif median > mean:\n        return 'median'\n    else:\n        return 'same'"], "outputs": "[['same'], ['same'], ['same'], ['mean'], ['same'], ['median'], ['same'], ['same'], ['same'], ['mean']]", "probability": 1.0, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[[[1, 3, 7]], ['mean'], ['median']], [[[1, 6, 8]], ['median'], ['mean']]]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[1, 2, 3]], [[5, 5, 5]], [[1, 2, 100]], [[10, 20, 30, 40, 50]], [[1, 3, 3, 6, 7, 8, 9]], [[100, 200, 300, 400, 500, 600, 700]], [[1, 2, 3, 4, 5, 6, 7]], [[7, 7, 7, 7, 7, 7, 7]], [[1, 2, 3, 4, 100]]]", "input_output_examples": "[[[[1, 2, 3]], [[3, 4, 5]], [[1, 3, 7]], [[1, 6, 8]]], [['same'], ['same'], ['median'], ['mean']]]", "weighted_test_consistency": 0.5, "at_least_one_align": false, "ambiguity": 0.25}}
{"requirement": "def tops(msg: str) -> str:\n\"\"\"# Task\n\nWrite a function that accepts `msg` string and returns local tops of string from the highest to the lowest.  \nThe string's tops are from displaying the string in the below way:\n\nThe next top is always 1 character higher than the previous one.\n\n- When the `msg` string is empty, return an empty string.\n- The input strings may be very long. Make sure your solution has good performance.\n- The (.)dots on the sample display of string are only there to help you to understand the pattern  \n\n# Series\n\n- [String tops](https://www.codewars.com/kata/59b7571bbf10a48c75000070)\n- [Square string tops](https://www.codewars.com/kata/5aa3e2b0373c2e4b420009af)\n\"\"\"", "inputs": [[""], ["abcde"], ["123456789abcdefghijklmnopqrstuwyxvzABCDEFGHIJKLMNOPQRSTU"], ["123456789abcdefghijklmnopqrstuwyxvzABCDEFGHIJKLMNOPQRSTUWvXYZ123456789012345678910123"]], "outputs": [[""], ["cd"], ["TUABCDElmnoabc34"], ["7891012TUWvXYABCDElmnoabc34"]], "starter_code": "def tops(msg: str) -> str:", "canonical_solution": "def tops(msg):\n    n = len(msg)\n    res, i, j, k = ('', 2, 2, 7)\n    while i < n:\n        res = msg[i:i + j] + res\n        i, j, k = (i + k, j + 1, k + 4)\n    return res", "entry_point": "tops", "task_id": "TACO_lite/81", "input_output_examples": "[[['123456789abcdefghijklmnopqrstuwyxvzABCDEFGHIJKLMNOPQRSTUWvXYZ123456789012345678910123'], ['']], [['7891012TUWvXYABCDElmnoabc34'], ['']]]", "llm_generated_inputs": "[[''], ['a'], ['ab'], ['abc'], ['abcd'], ['abcde'], ['abcdef'], ['abcdefg'], ['abcdefgh'], ['abcdefghi'], ['abcdefghij'], ['thisisaverylongstringthatweneedtotestthefunctionalityofthetopsfunction'], ['aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz']]", "clusters": {"cluster_list": [{"programs_str": ["def tops(msg: str) -> str:\n    return msg[::2]", "def tops(msg: str) -> str:\n    return msg[::2]", "def tops(msg: str) -> str:\n    return msg[::2]", "def tops(msg: str) -> str:\n    return msg[::2]", "def tops(msg: str) -> str:\n    return msg[::2]", "def tops(msg: str) -> str:\n    return msg[::2]"], "outputs": "[[''], ['a'], ['a'], ['ac'], ['ac'], ['ace'], ['ace'], ['aceg'], ['aceg'], ['acegi'], ['acegi'], ['tiiaeyogtighteedoethfntoaiyfhtpfnto'], ['abcdefghijklmnopqrstuvwxyz']]", "probability": 0.3, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[['123456789abcdefghijklmnopqrstuwyxvzABCDEFGHIJKLMNOPQRSTUWvXYZ123456789012345678910123'], ['13579bdfhjlnprtwxzBDFHJLNPRTWXZ246802468113'], ['7891012TUWvXYABCDElmnoabc34']]]"}, {"programs_str": ["def tops(msg: str) -> str:\n    n = len(msg)\n    result = []\n    for i in range(n):\n        if i * (i + 1) // 2 >= n:\n            break\n        result.append(msg[i * (i + 1) // 2])\n    return ''.join(result)", "def tops(msg: str) -> str:\n    n = len(msg)\n    result = []\n    for i in range(n):\n        if i * (i + 1) // 2 >= n:\n            break\n        result.append(msg[i * (i + 1) // 2])\n    return ''.join(result)", "def tops(msg: str) -> str:\n    if not msg:\n        return ''\n    result = []\n    n = len(msg)\n    for i in range(n):\n        if i * (i + 1) // 2 >= n:\n            break\n        result.append(msg[i * (i + 1) // 2])\n    return ''.join(result)", "def tops(msg: str) -> str:\n    if not msg:\n        return ''\n    result = []\n    n = len(msg)\n    for i in range(n):\n        if i * (i + 1) // 2 >= n:\n            break\n        result.append(msg[i * (i + 1) // 2])\n    return ''.join(result)", "def tops(msg: str) -> str:\n    n = len(msg)\n    result = []\n    for i in range(n):\n        if i * (i + 1) // 2 >= n:\n            break\n        result.append(msg[i * (i + 1) // 2])\n    return ''.join(result)", "def tops(msg: str) -> str:\n    n = len(msg)\n    result = []\n    for i in range(n):\n        if i * (i + 1) // 2 >= n:\n            break\n        result.append(msg[i * (i + 1) // 2])\n    return ''.join(result)", "def tops(msg: str) -> str:\n    n = len(msg)\n    result = []\n    for i in range(n):\n        if i * (i + 1) // 2 >= n:\n            break\n        result.append(msg[i * (i + 1) // 2])\n    return ''.join(result)", "def tops(msg: str) -> str:\n    if not msg:\n        return ''\n    result = []\n    length = len(msg)\n    for i in range(length):\n        if i * (i + 1) // 2 >= length:\n            break\n        result.append(msg[i * (i + 1) // 2])\n    return ''.join(result)", "def tops(msg: str) -> str:\n    n = len(msg)\n    result = []\n    for i in range(n):\n        if i * (i + 1) // 2 >= n:\n            break\n        result.append(msg[i * (i + 1) // 2])\n    return ''.join(result)", "def tops(msg: str) -> str:\n    n = len(msg)\n    result = []\n    for i in range(n):\n        if i * (i + 1) // 2 >= n:\n            break\n        result.append(msg[i * (i + 1) // 2])\n    return ''.join(result)", "def tops(msg: str) -> str:\n    n = len(msg)\n    result = []\n    for i in range(n):\n        if i * (i + 1) // 2 >= n:\n            break\n        result.append(msg[i * (i + 1) // 2])\n    return ''.join(result)"], "outputs": "[[''], ['a'], ['ab'], ['ab'], ['abd'], ['abd'], ['abd'], ['abdg'], ['abdg'], ['abdg'], ['abdg'], ['thsaystetitt'], ['aabdfhkosw']]", "probability": 0.55, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[['123456789abcdefghijklmnopqrstuwyxvzABCDEFGHIJKLMNOPQRSTUWvXYZ123456789012345678910123'], ['1247bgmtBKU68'], ['7891012TUWvXYABCDElmnoabc34']]]"}, {"programs_str": ["def tops(msg: str) -> str:\n    if not msg:\n        return ''\n    result = []\n    i = 0\n    while i < len(msg):\n        result.append(msg[i])\n        i += i + 2\n    return ''.join(result)", "def tops(msg: str) -> str:\n    if not msg:\n        return ''\n    result = []\n    i = 0\n    while i < len(msg):\n        result.append(msg[i])\n        i += i + 2\n    return ''.join(result)"], "outputs": "[[''], ['a'], ['a'], ['ac'], ['ac'], ['ac'], ['ac'], ['acg'], ['acg'], ['acg'], ['acg'], ['tiagdf'], ['abdhp']]", "probability": 0.1, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[['123456789abcdefghijklmnopqrstuwyxvzABCDEFGHIJKLMNOPQRSTUWvXYZ123456789012345678910123'], ['137fw2'], ['7891012TUWvXYABCDElmnoabc34']]]"}, {"programs_str": ["def tops(msg: str) -> str:\n    if not msg:\n        return ''\n    result = []\n    n = len(msg)\n    for i in range(n):\n        if i == 0 or i == n - 1 or (i % 2 == 0 and i // 2 < n - i // 2 - 1):\n            result.append(msg[i])\n    return ''.join(result)"], "outputs": "[[''], ['a'], ['ab'], ['ac'], ['acd'], ['ace'], ['acef'], ['aceg'], ['acegh'], ['acegi'], ['acegij'], ['tiiaeyogtighteedoethfntoaiyfhtpfnton'], ['abcdefghijklmnopqrstuvwxyzz']]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[['123456789abcdefghijklmnopqrstuwyxvzABCDEFGHIJKLMNOPQRSTUWvXYZ123456789012345678910123'], ['13579bdfhjlnprtwxzBDFHJLNPRTWXZ246802468113'], ['7891012TUWvXYABCDElmnoabc34']]]"}], "entropy": 0.771875977210251, "llm_generated_inputs": "[[''], ['a'], ['ab'], ['abc'], ['abcd'], ['abcde'], ['abcdef'], ['abcdefg'], ['abcdefgh'], ['abcdefghi'], ['abcdefghij'], ['thisisaverylongstringthatweneedtotestthefunctionalityofthetopsfunction'], ['aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz']]", "input_output_examples": "[[['123456789abcdefghijklmnopqrstuwyxvzABCDEFGHIJKLMNOPQRSTUWvXYZ123456789012345678910123'], ['']], [['7891012TUWvXYABCDElmnoabc34'], ['']]]", "weighted_test_consistency": 0.5, "at_least_one_align": false, "ambiguity": 0.6359379886051255}}
{"requirement": "def sort_string(s: str) -> str:\n\"\"\"# Task\n\nYour task is to sort the characters in a string according to the following rules:\n```\n- Rule1: English alphabets are arranged from A to Z, case insensitive.\n- Rule2: If the uppercase and lowercase of an English alphabet exist\n  at the same time, they are arranged in the order of original input.\n- Rule3: non English alphabet remains in their original position.\n```\n\n# Input/Output\n\n\n`[input]` string `s`\n\nA non-empty string contains any characters (English alphabets or non-English alphabets).\n\n`[output]` a string\n\nA sorted string according to the rules above.\n\"\"\"", "inputs": [["a"], ["cba"], ["Cba"], ["cCBbAa"], ["!"], ["c b a"], ["-c--b--a-"], ["cbaCcC"], ["Codewars"], [" MkWD{RB=//k-^ J@,xH Vfi uAz+$ kV _[ }a!}%pSBwn !kKB (b  q PQF +}wS  .kfU r wFNEs#NsR UVMdG"]], "outputs": [["a"], ["abc"], ["abC"], ["AaBbcC"], ["!"], ["a b c"], ["-a--b--c-"], ["abcCcC"], ["aCdeorsw"], [" AaBB{Bb=//D-^ d@,Ef FfF GHi+$ Jk _[ }k!}%kkKkM !MnN (N  p PqQ +}Rr  .RSS s suUUV#VVW wwwxz"]], "starter_code": "def sort_string(s: str) -> str:", "canonical_solution": "def sort_string(s):\n    a = iter(sorted((c for c in s if c.isalpha()), key=str.lower))\n    return ''.join((next(a) if c.isalpha() else c for c in s))", "entry_point": "sort_string", "task_id": "TACO_lite/82", "input_output_examples": "[[['cba'], ['Cba'], ['cCBbAa'], ['c b a'], ['-c--b--a-'], ['Codewars']], [['abc'], ['abC'], ['AaBbcC'], ['a b c'], ['-a--b--c-'], ['aCdeorsw']]]", "llm_generated_inputs": "[['aBcDeFgHiJkLmNoPqRsTuVwXyZ'], ['Zebra-123!@#'], ['apple'], ['Apple'], ['banana'], ['Banana'], ['Hello, World!'], ['HELLO, world!'], ['1234567890'], ['!@#$%^&*()'], ['aAaAaAaA'], ['AaBbCcDdEeFfGg'], ['zZyYxXwWvVuUtTsSrRqQpPoOnNmMlLkKjJiIhHgGfFeEdDcCbBaA'], ['mIxEdCaSe'], ['UPPERlower'], ['lowerUPPER'], ['MixedCASE123'], ['123MixedCASE']]", "clusters": {"cluster_list": [{"programs_str": ["def sort_string(s: str) -> str:\n    import re\n    letters = re.findall('[a-zA-Z]', s)\n    letters_sorted = sorted(letters, key=lambda x: x.lower())\n    result = []\n    letter_index = 0\n    for char in s:\n        if char.isalpha():\n            result.append(letters_sorted[letter_index])\n            letter_index += 1\n        else:\n            result.append(char)\n    return ''.join(result)", "def sort_string(s: str) -> str:\n    from collections import OrderedDict\n    letters = [char for char in s if char.isalpha()]\n    seen = OrderedDict()\n    for letter in letters:\n        seen[letter.lower()] = seen.get(letter.lower(), []) + [letter]\n    sorted_letters = []\n    for key in sorted(seen.keys()):\n        sorted_letters.extend(seen[key])\n    result = []\n    letter_index = 0\n    for char in s:\n        if char.isalpha():\n            result.append(sorted_letters[letter_index])\n            letter_index += 1\n        else:\n            result.append(char)\n    return ''.join(result)", "def sort_string(s: str) -> str:\n    from collections import defaultdict\n    alphabets = [(i, c) for i, c in enumerate(s) if c.isalpha()]\n    non_alphabets = [(i, c) for i, c in enumerate(s) if not c.isalpha()]\n    sorted_alphabets = []\n    seen = defaultdict(list)\n    for _, c in alphabets:\n        seen[c.lower()].append(c)\n    for c in sorted(seen.keys()):\n        sorted_alphabets.extend(seen[c])\n    result = list(s)\n    alpha_iter = iter(sorted_alphabets)\n    for i, _ in alphabets:\n        result[i] = next(alpha_iter)\n    return ''.join(result)"], "outputs": "[['aBcDeFgHiJkLmNoPqRsTuVwXyZ'], ['aberZ-123!@#'], ['aelpp'], ['Aelpp'], ['aaabnn'], ['aaaBnn'], ['deHll, loorW!'], ['dEHLL, lOorw!'], ['1234567890'], ['!@#$%^&*()'], ['aAaAaAaA'], ['AaBbCcDdEeFfGg'], ['aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ'], ['aCdEeImSx'], ['EeloPPRrUw'], ['eEloPPrRUw'], ['ACdeEiMSx123'], ['123ACdeEiMSx']]", "probability": 0.15, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def sort_string(s: str) -> str:\n    import re\n    letters = re.findall('[a-zA-Z]', s)\n    letters_sorted = sorted(letters, key=lambda x: (x.lower(), letters.index(x)))\n    result = list(s)\n    letter_index = 0\n    for i, char in enumerate(result):\n        if char.isalpha():\n            result[i] = letters_sorted[letter_index]\n            letter_index += 1\n    return ''.join(result)", "def sort_string(s: str) -> str:\n    import re\n    letters = re.findall('[a-zA-Z]', s)\n    sorted_letters = sorted(letters, key=lambda x: (x.lower(), letters.index(x)))\n    result = list(s)\n    letter_index = 0\n    for i, char in enumerate(result):\n        if char.isalpha():\n            result[i] = sorted_letters[letter_index]\n            letter_index += 1\n    return ''.join(result)", "def sort_string(s: str) -> str:\n    import re\n    letters = re.findall('[a-zA-Z]', s)\n    sorted_letters = sorted(letters, key=lambda x: (x.lower(), letters.index(x)))\n    result = list(s)\n    letter_index = 0\n    for i, char in enumerate(result):\n        if char.isalpha():\n            result[i] = sorted_letters[letter_index]\n            letter_index += 1\n    return ''.join(result)"], "outputs": "[['aBcDeFgHiJkLmNoPqRsTuVwXyZ'], ['aberZ-123!@#'], ['aelpp'], ['Aelpp'], ['aaabnn'], ['aaaBnn'], ['deHll, loorW!'], ['dEHLL, lOorw!'], ['1234567890'], ['!@#$%^&*()'], ['aaaaAAAA'], ['AaBbCcDdEeFfGg'], ['aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ'], ['aCdEeImSx'], ['EeloPPRrUw'], ['eEloPPrRUw'], ['ACdeEiMSx123'], ['123ACdeEiMSx']]", "probability": 0.15, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def sort_string(s: str) -> str:\n    from collections import defaultdict\n    alphabets = [(i, c) for i, c in enumerate(s) if c.isalpha()]\n    non_alphabets = [(i, c) for i, c in enumerate(s) if not c.isalpha()]\n    sorted_alphabets = sorted(alphabets, key=lambda x: x[1].lower())\n    result = [''] * len(s)\n    for (i, _), (_, c) in zip(sorted_alphabets, alphabets):\n        result[i] = c\n    for i, c in non_alphabets:\n        result[i] = c\n    return ''.join(result)"], "outputs": "[['aBcDeFgHiJkLmNoPqRsTuVwXyZ'], ['aberZ-123!@#'], ['alepp'], ['Alepp'], ['abnaan'], ['aBnaan'], ['leloo, drlWH!'], ['LELOo, drlwH!'], ['1234567890'], ['!@#$%^&*()'], ['aAaAaAaA'], ['AaBbCcDdEeFfGg'], ['aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ'], ['aCeExImSd'], ['eRlUoPErPw'], ['weRlPErUoP'], ['ACEexiMSd123'], ['123ACEexiMSd']]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.8333333333333334, "failed_input_output_examples": "[[['Codewars'], ['owdesCar'], ['aCdeorsw']]]"}, {"programs_str": ["def sort_string(s: str) -> str:\n    from collections import defaultdict\n    alphabets = [(i, c) for i, c in enumerate(s) if c.isalpha()]\n    non_alphabets = [(i, c) for i, c in enumerate(s) if not c.isalpha()]\n    sorted_alphabets = sorted(alphabets, key=lambda x: (x[1].lower(), s.index(x[1])))\n    result = list(s)\n    for index, char in sorted_alphabets:\n        result[index] = char\n    for index, char in non_alphabets:\n        result[index] = char\n    return ''.join(result)", "def sort_string(s: str) -> str:\n    from collections import defaultdict\n    alpha_chars = [c for c in s if c.isalpha()]\n    alpha_sorted = sorted(alpha_chars, key=lambda x: x.lower())\n    positions = defaultdict(list)\n    for i, c in enumerate(s):\n        if c.isalpha():\n            positions[c].append(i)\n    result = list(s)\n    alpha_index = 0\n    for c in alpha_sorted:\n        pos = positions[c][0]\n        positions[c].pop(0)\n        result[pos] = c\n        alpha_index += 1\n    return ''.join(result)", "def sort_string(s: str) -> str:\n    import re\n    letters = [(i, c) for i, c in enumerate(s) if c.isalpha()]\n    sorted_letters = sorted(letters, key=lambda x: (x[1].lower(), s.index(x[1].upper()) if x[1].upper() in s else float('inf')))\n    s_list = list(s)\n    for (i, _), (_, c) in zip(sorted_letters, sorted_letters):\n        s_list[i] = c\n    return ''.join(s_list)", "def sort_string(s: str) -> str:\n    import re\n    letters = [(i, c) for i, c in enumerate(s) if c.isalpha()]\n    sorted_letters = sorted(letters, key=lambda x: (x[1].lower(), s.index(x[1])))\n    sorted_string = list(s)\n    for (i, _), (_, c) in zip(sorted_letters, sorted_letters):\n        sorted_string[i] = c\n    return ''.join(sorted_string)", "def sort_string(s: str) -> str:\n    import re\n    letters = [(i, c) for i, c in enumerate(s) if c.isalpha()]\n    sorted_letters = sorted(letters, key=lambda x: (x[1].lower(), s.index(x[1].upper()) if x[1].upper() in s else float('inf')))\n    s_list = list(s)\n    for (index, _), (_, char) in zip(sorted_letters, sorted_letters):\n        s_list[index] = char\n    return ''.join(s_list)", "def sort_string(s: str) -> str:\n    import re\n    letters = [(i, c) for i, c in enumerate(s) if c.isalpha()]\n    sorted_letters = sorted(letters, key=lambda x: (x[1].lower(), s.index(x[1].upper()) if x[1].upper() in s else float('inf')))\n    result = list(s)\n    for (i, _), (_, c) in zip(sorted_letters, sorted_letters):\n        result[i] = c\n    return ''.join(result)", "def sort_string(s: str) -> str:\n    from collections import defaultdict\n    alpha_chars = [c for c in s if c.isalpha()]\n    alpha_sorted = sorted(alpha_chars, key=lambda x: x.lower())\n    positions = defaultdict(list)\n    for i, c in enumerate(s):\n        if c.isalpha():\n            positions[c.lower()].append(i)\n    result = list(s)\n    alpha_index = 0\n    for lower_char in sorted(positions.keys()):\n        for pos in positions[lower_char]:\n            result[pos] = alpha_sorted[alpha_index]\n            alpha_index += 1\n    return ''.join(result)", "def sort_string(s: str) -> str:\n    from collections import defaultdict\n    alpha_positions = defaultdict(list)\n    non_alpha_chars = []\n    for index, char in enumerate(s):\n        if char.isalpha():\n            alpha_positions[char.lower()].append((index, char))\n        else:\n            non_alpha_chars.append((index, char))\n    sorted_alpha_chars = []\n    for key in sorted(alpha_positions.keys()):\n        sorted_alpha_chars.extend(sorted(alpha_positions[key], key=lambda x: s.index(x[1])))\n    result = [''] * len(s)\n    for index, char in sorted_alpha_chars + non_alpha_chars:\n        result[index] = char\n    return ''.join(result)"], "outputs": "[['aBcDeFgHiJkLmNoPqRsTuVwXyZ'], ['Zebra-123!@#'], ['apple'], ['Apple'], ['banana'], ['Banana'], ['Hello, World!'], ['HELLO, world!'], ['1234567890'], ['!@#$%^&*()'], ['aAaAaAaA'], ['AaBbCcDdEeFfGg'], ['zZyYxXwWvVuUtTsSrRqQpPoOnNmMlLkKjJiIhHgGfFeEdDcCbBaA'], ['mIxEdCaSe'], ['UPPERlower'], ['lowerUPPER'], ['MixedCASE123'], ['123MixedCASE']]", "probability": 0.4, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['cba'], ['cba'], ['abc']], [['Cba'], ['Cba'], ['abC']], [['cCBbAa'], ['cCBbAa'], ['AaBbcC']], [['c b a'], ['c b a'], ['a b c']], [['-c--b--a-'], ['-c--b--a-'], ['-a--b--c-']], [['Codewars'], ['Codewars'], ['aCdeorsw']]]"}, {"programs_str": ["def sort_string(s: str) -> str:\n    import re\n    letters = [(i, c) for i, c in enumerate(s) if c.isalpha()]\n    sorted_letters = sorted(letters, key=lambda x: (x[1].lower(), s.index(x[1]), x[0]))\n    result = list(s)\n    for (i, _), (_, c) in zip(sorted_letters, letters):\n        result[i] = c\n    return ''.join(result)", "def sort_string(s: str) -> str:\n    from collections import defaultdict\n    alphabets = [(i, c) for i, c in enumerate(s) if c.isalpha()]\n    non_alphabets = [(i, c) for i, c in enumerate(s) if not c.isalpha()]\n    sorted_alphabets = sorted(alphabets, key=lambda x: (x[1].lower(), s.index(x[1])))\n    result = [''] * len(s)\n    for (i, _), (_, c) in zip(sorted_alphabets, alphabets):\n        result[i] = c\n    for i, c in non_alphabets:\n        result[i] = c\n    return ''.join(result)", "def sort_string(s: str) -> str:\n    import re\n    letters = [(i, c) for i, c in enumerate(s) if c.isalpha()]\n    sorted_letters = sorted(letters, key=lambda x: (x[1].lower(), s.index(x[1]), x[0]))\n    result = list(s)\n    for (i, _), (_, c) in zip(sorted_letters, letters):\n        result[i] = c\n    return ''.join(result)"], "outputs": "[['aBcDeFgHiJkLmNoPqRsTuVwXyZ'], ['aberZ-123!@#'], ['alepp'], ['Alepp'], ['abnaan'], ['aBnaan'], ['leloo, drlWH!'], ['LELOo, drlwH!'], ['1234567890'], ['!@#$%^&*()'], ['aaAAaaAA'], ['AaBbCcDdEeFfGg'], ['aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ'], ['aCeExImSd'], ['eRlUoPErPw'], ['weRlPErUoP'], ['ACEexiMSd123'], ['123ACEexiMSd']]", "probability": 0.15, "is_align_req": false, "test_consistency": 0.8333333333333334, "failed_input_output_examples": "[[['Codewars'], ['owdesCar'], ['aCdeorsw']]]"}, {"programs_str": ["def sort_string(s: str) -> str:\n    import re\n    letters = [(i, c) for i, c in enumerate(s) if c.isalpha()]\n    sorted_letters = sorted(letters, key=lambda x: (x[1].lower(), s.index(x[1].lower()), s.index(x[1].upper())))\n    result = list(s)\n    for (index, _), (_, char) in zip(letters, sorted_letters):\n        result[index] = char\n    return ''.join(result)"], "outputs": "[['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['1234567890'], ['!@#$%^&*()'], ['aAaAaAaA'], ['AaBbCcDdEeFfGg'], ['aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError']]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.16666666666666663, "failed_input_output_examples": "[[['cba'], ['ValueError'], ['abc']], [['Cba'], ['ValueError'], ['abC']], [['c b a'], ['ValueError'], ['a b c']], [['-c--b--a-'], ['ValueError'], ['-a--b--c-']], [['Codewars'], ['ValueError'], ['aCdeorsw']]]"}, {"programs_str": ["def sort_string(s: str) -> str:\n    import re\n    letters = [(i, c) for i, c in enumerate(s) if c.isalpha()]\n    sorted_letters = sorted(letters, key=lambda x: (x[1].lower(), s.index(x[1].lower()), s.index(x[1].upper())))\n    sorted_string = list(s)\n    for (i, _), (_, c) in zip(sorted_letters, sorted_letters):\n        sorted_string[i] = c\n    return ''.join(sorted_string)"], "outputs": "[['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['1234567890'], ['!@#$%^&*()'], ['aAaAaAaA'], ['AaBbCcDdEeFfGg'], ['zZyYxXwWvVuUtTsSrRqQpPoOnNmMlLkKjJiIhHgGfFeEdDcCbBaA'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError']]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['cba'], ['ValueError'], ['abc']], [['Cba'], ['ValueError'], ['abC']], [['cCBbAa'], ['cCBbAa'], ['AaBbcC']], [['c b a'], ['ValueError'], ['a b c']], [['-c--b--a-'], ['ValueError'], ['-a--b--c-']], [['Codewars'], ['ValueError'], ['aCdeorsw']]]"}], "entropy": 0.8579944597092231, "llm_generated_inputs": "[['aBcDeFgHiJkLmNoPqRsTuVwXyZ'], ['Zebra-123!@#'], ['apple'], ['Apple'], ['banana'], ['Banana'], ['Hello, World!'], ['HELLO, world!'], ['1234567890'], ['!@#$%^&*()'], ['aAaAaAaA'], ['AaBbCcDdEeFfGg'], ['zZyYxXwWvVuUtTsSrRqQpPoOnNmMlLkKjJiIhHgGfFeEdDcCbBaA'], ['mIxEdCaSe'], ['UPPERlower'], ['lowerUPPER'], ['MixedCASE123'], ['123MixedCASE']]", "input_output_examples": "[[['cba'], ['Cba'], ['cCBbAa'], ['c b a'], ['-c--b--a-'], ['Codewars']], [['abc'], ['abC'], ['AaBbcC'], ['a b c'], ['-a--b--c-'], ['aCdeorsw']]]", "weighted_test_consistency": 0.475, "at_least_one_align": true, "ambiguity": 0.6914972298546116}}
{"requirement": "def problem(a: int) -> int:\n\"\"\"Make a function that returns the value multiplied by 50 and increased by 6. If the value entered is a string it should return \"Error\".\n\nNote: in `C#`, you'll always get the input as a string, so the above applies if the string isn't representing a double value.\n\"\"\"", "inputs": [["hello"], [1], [5], [0], [1.2], [3], ["RyanIsCool"]], "outputs": [["Error"], [56], [256], [6], [66], [156], ["Error"]], "starter_code": "def problem(a: int) -> int:", "canonical_solution": "def problem(a):\n    try:\n        return a * 50 + 6\n    except TypeError:\n        return 'Error'", "entry_point": "problem", "task_id": "TACO_lite/87", "input_output_examples": "[[[4], ['test']], [[206], ['Error']]]", "llm_generated_inputs": "[[0], [1], [-1], [123], [-987], [456789], [-456789], [1000000], ['0'], ['1'], ['-1'], ['abc'], ['123abc'], ['abc123'], [' '], [''], ['123.45'], ['-123.45']]", "clusters": {"cluster_list": [{"programs_str": ["def problem(a: int) -> int:\n    if isinstance(a, str):\n        return 'Error'\n    return a * 50 + 6", "def problem(a: int) -> int:\n    if isinstance(a, str):\n        return 'Error'\n    return a * 50 + 6", "def problem(a: int) -> int:\n    if isinstance(a, str):\n        return 'Error'\n    return a * 50 + 6", "def problem(a: int) -> int:\n    if isinstance(a, str):\n        return 'Error'\n    return a * 50 + 6", "def problem(a: int) -> int:\n    if isinstance(a, str):\n        return 'Error'\n    return a * 50 + 6", "def problem(a: int) -> int:\n    if isinstance(a, str):\n        return 'Error'\n    return a * 50 + 6", "def problem(a: int) -> int:\n    if isinstance(a, str):\n        return 'Error'\n    return a * 50 + 6", "def problem(a: int) -> int:\n    if isinstance(a, str):\n        return 'Error'\n    return a * 50 + 6", "def problem(a: int) -> int:\n    if isinstance(a, str):\n        return 'Error'\n    return a * 50 + 6", "def problem(a: int) -> int:\n    if isinstance(a, str):\n        return 'Error'\n    return a * 50 + 6", "def problem(a: int) -> int:\n    if isinstance(a, str):\n        return 'Error'\n    return a * 50 + 6", "def problem(a: int) -> int:\n    if isinstance(a, str):\n        return 'Error'\n    return a * 50 + 6", "def problem(a: int) -> int:\n    if isinstance(a, str):\n        return 'Error'\n    return a * 50 + 6", "def problem(a: int) -> int:\n    if isinstance(a, str):\n        return 'Error'\n    return a * 50 + 6", "def problem(a: int) -> int:\n    if isinstance(a, str):\n        return 'Error'\n    return a * 50 + 6", "def problem(a: int) -> int:\n    if isinstance(a, str):\n        return 'Error'\n    return a * 50 + 6", "def problem(a: int) -> int:\n    if isinstance(a, str):\n        return 'Error'\n    return a * 50 + 6", "def problem(a: int) -> int:\n    if isinstance(a, str):\n        return 'Error'\n    return a * 50 + 6", "def problem(a: int) -> int:\n    if isinstance(a, str):\n        return 'Error'\n    return a * 50 + 6", "def problem(a: int) -> int:\n    if isinstance(a, str):\n        return 'Error'\n    return a * 50 + 6"], "outputs": "[[6], [56], [-44], [6156], [-49344], [22839456], [-22839444], [50000006], ['Error'], ['Error'], ['Error'], ['Error'], ['Error'], ['Error'], ['Error'], ['Error'], ['Error'], ['Error']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [-1], [123], [-987], [456789], [-456789], [1000000], ['0'], ['1'], ['-1'], ['abc'], ['123abc'], ['abc123'], [' '], [''], ['123.45'], ['-123.45']]", "input_output_examples": "[[[4], ['test']], [[206], ['Error']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "def shifted_diff(first: str, second: str) -> int:\n\"\"\"Write a function that receives two strings and returns n, where n is equal to the number of characters we should shift the first string forward to match the second.\n\nIf the second string isn't a valid rotation of the first string, the method returns -1. \n\nFor Swift, your function should return an Int?. So rather than returning -1 when the second string isn't a valid rotation of the first, return nil.\n\"\"\"", "inputs": [["fatigue", "tiguefa"], ["hoop", "pooh"], ["eecoff", "coffee"], ["Moose", "moose"], ["isn't", "'tisn"], ["Esham", "Esham"], [" ", " "], ["dog", "god"], ["  ", " "], ["doomhouse", "hoodmouse"], ["123456789!@#$%^&*( )qwerty", "9!@#$%^&*( )qwerty12345678"]], "outputs": [[5], [-1], [4], [-1], [2], [0], [0], [-1], [-1], [-1], [18]], "starter_code": "def shifted_diff(first: str, second: str) -> int:", "canonical_solution": "def shifted_diff(first, second):\n    return (second + second).find(first) if len(first) == len(second) else -1", "entry_point": "shifted_diff", "task_id": "TACO_lite/93", "input_output_examples": "[[['coffee', 'eecoff'], ['eecoff', 'coffee'], ['moose', 'Moose'], [\"isn't\", \"'tisn\"], ['Esham', 'Esham'], ['dog', 'god']], [[2], [4], [-1], [2], [0], [-1]]]", "llm_generated_inputs": "[['abcde', 'cdeab'], ['abcde', 'abced'], ['rotation', 'tationro'], ['rotation', 'rotation'], ['rotation', 'otatiorn'], ['', ''], ['a', 'a'], ['a', 'b'], ['abcdef', 'defabc'], ['abcdef', 'ghijkl']]", "clusters": {"cluster_list": [{"programs_str": ["def shifted_diff(first: str, second: str) -> int:\n    if len(first) != len(second):\n        return -1\n    combined = first + first\n    if second in combined:\n        return combined.index(second)\n    return -1", "def shifted_diff(first: str, second: str) -> int:\n    if len(first) != len(second):\n        return -1\n    if second in first + first:\n        return (first + first).index(second)\n    return -1", "def shifted_diff(first: str, second: str) -> int:\n    if len(first) != len(second):\n        return -1\n    doubled_first = first + first\n    if second in doubled_first:\n        return doubled_first.index(second)\n    return -1", "def shifted_diff(first: str, second: str) -> int:\n    if len(first) != len(second):\n        return -1\n    if second in first + first:\n        return (first + first).index(second)\n    return -1", "def shifted_diff(first: str, second: str) -> int:\n    if len(first) != len(second):\n        return -1\n    if second in first + first:\n        return (first + first).index(second)\n    return -1", "def shifted_diff(first: str, second: str) -> int:\n    if len(first) != len(second):\n        return -1\n    combined = first + first\n    if second in combined:\n        return combined.index(second)\n    return -1", "def shifted_diff(first: str, second: str) -> int:\n    if len(first) != len(second):\n        return -1\n    combined = first + first\n    if second in combined:\n        return combined.index(second)\n    return -1", "def shifted_diff(first: str, second: str) -> int:\n    if len(first) != len(second):\n        return -1\n    doubled_first = first + first\n    if second in doubled_first:\n        return doubled_first.index(second)\n    return -1", "def shifted_diff(first: str, second: str) -> int:\n    if len(first) != len(second):\n        return -1\n    combined = first + first\n    if second in combined:\n        return combined.index(second)\n    return -1", "def shifted_diff(first: str, second: str) -> int:\n    if len(first) != len(second):\n        return -1\n    combined = first + first\n    if second in combined:\n        return combined.index(second)\n    return -1", "def shifted_diff(first: str, second: str) -> int:\n    if len(first) != len(second):\n        return -1\n    if second in first + first:\n        return (first + first).index(second)\n    return -1", "def shifted_diff(first: str, second: str) -> int:\n    if len(first) != len(second):\n        return -1\n    combined = first + first\n    if second in combined:\n        return combined.index(second)\n    return -1", "def shifted_diff(first: str, second: str) -> int:\n    if len(first) != len(second):\n        return -1\n    combined = first + first\n    if second in combined:\n        return combined.index(second)\n    return -1", "def shifted_diff(first: str, second: str) -> int:\n    if len(first) != len(second):\n        return -1\n    if second in first + first:\n        return (first + first).index(second)\n    return -1", "def shifted_diff(first: str, second: str) -> int:\n    if len(first) != len(second):\n        return -1\n    if second in first + first:\n        return (first + first).index(second)\n    return -1", "def shifted_diff(first: str, second: str) -> int:\n    if len(first) != len(second):\n        return -1\n    doubled_first = first + first\n    if second in doubled_first:\n        return doubled_first.index(second)\n    return -1", "def shifted_diff(first: str, second: str) -> int:\n    if len(first) != len(second):\n        return -1\n    combined = first + first\n    if second in combined:\n        return combined.index(second)\n    return -1", "def shifted_diff(first: str, second: str) -> int:\n    if len(first) != len(second):\n        return -1\n    combined = first + first\n    if second in combined:\n        return combined.index(second)\n    return -1", "def shifted_diff(first: str, second: str) -> int:\n    if len(first) != len(second):\n        return -1\n    combined = first + first\n    if second in combined:\n        return combined.index(second)\n    return -1", "def shifted_diff(first: str, second: str) -> int:\n    if len(first) != len(second):\n        return -1\n    if second in first + first:\n        return (first + first).index(second)\n    return -1"], "outputs": "[[2], [-1], [2], [0], [-1], [0], [0], [-1], [3], [-1]]", "probability": 1.0, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[['coffee', 'eecoff'], [4], [2]], [['eecoff', 'coffee'], [2], [4]], [[\"isn't\", \"'tisn\"], [3], [2]]]"}], "entropy": 0, "llm_generated_inputs": "[['abcde', 'cdeab'], ['abcde', 'abced'], ['rotation', 'tationro'], ['rotation', 'rotation'], ['rotation', 'otatiorn'], ['', ''], ['a', 'a'], ['a', 'b'], ['abcdef', 'defabc'], ['abcdef', 'ghijkl']]", "input_output_examples": "[[['coffee', 'eecoff'], ['eecoff', 'coffee'], ['moose', 'Moose'], [\"isn't\", \"'tisn\"], ['Esham', 'Esham'], ['dog', 'god']], [[2], [4], [-1], [2], [0], [-1]]]", "weighted_test_consistency": 0.5, "at_least_one_align": false, "ambiguity": 0.25}}
{"requirement": "def func_or(a: bool, b: bool) -> bool:\n\"\"\"## Task\nYou need to implement two functions, `xor` and `or`, that replicate the behaviour of their respective operators:\n\n- `xor` = Takes 2 values and returns `true` if, and only if, one of them is truthy.\n- `or` = Takes 2 values and returns `true` if either one of them is truthy.\n\nWhen doing so, **you cannot use the or operator: `||`**.\n\n# Input\n- Not all input will be booleans - there will be truthy and falsey values [the latter including also empty strings and empty arrays]\n- There will always be 2 values provided\n\"\"\"", "inputs": [[true, true], [true, false], [false, false], [0, 11], [null, []]], "outputs": [[true], [true], [false], [true], [false]], "starter_code": "def func_or(a: bool, b: bool) -> bool:", "canonical_solution": "def func_or(a, b):\n    return not bool(a) == bool(b) == False\n\ndef func_xor(a, b):\n    return not bool(a) == bool(b)", "entry_point": "func_or", "task_id": "TACO_lite/94", "input_output_examples": "[[[True, True], [False, True], [True, False], [False, False]], [[False], [True], [True], [False]]]", "llm_generated_inputs": "[[True, True], [True, False], [False, True], [False, False], [1, 0], [0, 1], [0, 0], [1, 1], ['hello', ''], ['', 'world'], ['', ''], ['hello', 'world'], [[1, 2, 3], []], [[], [4, 5, 6]], [[], []], [[1, 2, 3], [4, 5, 6]]]", "clusters": {"cluster_list": [{"programs_str": ["def func_or(a: bool, b: bool) -> bool:\n    return not (not a and (not b))", "def func_or(a: bool, b: bool) -> bool:\n    return not (not a and (not b))", "def func_or(a: bool, b: bool) -> bool:\n    return not (not a and (not b))", "def func_or(a: bool, b: bool) -> bool:\n    return not (not a and (not b))", "def func_or(a: bool, b: bool) -> bool:\n    return not (not a and (not b))", "def func_or(a: bool, b: bool) -> bool:\n    return not (not a and (not b))", "def func_or(a: bool, b: bool) -> bool:\n    return not (not a and (not b))", "def func_or(a: bool, b: bool) -> bool:\n    return not (not a and (not b))", "def func_or(a: bool, b: bool) -> bool:\n    return not (not a and (not b))", "def func_or(a: bool, b: bool) -> bool:\n    return not (not a and (not b))", "def func_or(a: bool, b: bool) -> bool:\n    return not (not a and (not b))", "def func_or(a: bool, b: bool) -> bool:\n    return not (not a and (not b))", "def func_or(a: bool, b: bool) -> bool:\n    return not (not a and (not b))", "def func_or(a: bool, b: bool) -> bool:\n    return not (not a and (not b))", "def func_or(a: bool, b: bool) -> bool:\n    return not (not a and (not b))", "def func_or(a: bool, b: bool) -> bool:\n    return not (not a and (not b))", "def func_or(a: bool, b: bool) -> bool:\n    return not (not a and (not b))", "def func_or(a: bool, b: bool) -> bool:\n    return not (not a and (not b))", "def func_or(a: bool, b: bool) -> bool:\n    return not (not a and (not b))", "def func_or(a: bool, b: bool) -> bool:\n    return not (not a and (not b))"], "outputs": "[[True], [True], [True], [False], [True], [True], [False], [True], [True], [True], [False], [True], [True], [True], [False], [True]]", "probability": 1.0, "is_align_req": false, "test_consistency": 0.75, "failed_input_output_examples": "[[[True, True], [True], [False]]]"}], "entropy": 0, "llm_generated_inputs": "[[True, True], [True, False], [False, True], [False, False], [1, 0], [0, 1], [0, 0], [1, 1], ['hello', ''], ['', 'world'], ['', ''], ['hello', 'world'], [[1, 2, 3], []], [[], [4, 5, 6]], [[], []], [[1, 2, 3], [4, 5, 6]]]", "input_output_examples": "[[[True, True], [False, True], [True, False], [False, False]], [[False], [True], [True], [False]]]", "weighted_test_consistency": 0.75, "at_least_one_align": false, "ambiguity": 0.125}}
{"requirement": "def only_duplicates(string: str) -> str:\n\"\"\"Given a string, remove any characters that are unique from the string.\n\"\"\"", "inputs": [["abccdefee"], ["hello"], ["colloquial"], ["foundersandcoders"], ["12314256aaeff"]], "outputs": [["cceee"], ["ll"], ["ollol"], ["ondersndoders"], ["1212aaff"]], "starter_code": "def only_duplicates(string: str) -> str:", "canonical_solution": "from collections import Counter\n\ndef only_duplicates(string):\n    cs = Counter(string)\n    return ''.join((c for c in string if cs[c] > 1))", "entry_point": "only_duplicates", "task_id": "TACO_lite/108", "input_output_examples": "[[['abccdefee']], [['cceee']]]", "llm_generated_inputs": "[['aabbcc'], ['abc'], ['aabbccddee'], ['aabbccddeeff'], ['a'], [''], ['aabbcdeeffgghhii'], ['aabbbcccccdddddeeeee'], ['xyzzyx'], ['zzz']]", "clusters": {"cluster_list": [{"programs_str": ["def only_duplicates(string: str) -> str:\n    from collections import Counter\n    count = Counter(string)\n    return ''.join([char for char in string if count[char] > 1])", "def only_duplicates(string: str) -> str:\n    from collections import Counter\n    char_count = Counter(string)\n    return ''.join([char for char in string if char_count[char] > 1])", "def only_duplicates(string: str) -> str:\n    from collections import Counter\n    count = Counter(string)\n    return ''.join([char for char in string if count[char] > 1])", "def only_duplicates(string: str) -> str:\n    from collections import Counter\n    count = Counter(string)\n    return ''.join([char for char in string if count[char] > 1])", "def only_duplicates(string: str) -> str:\n    from collections import Counter\n    count = Counter(string)\n    return ''.join([char for char in string if count[char] > 1])", "def only_duplicates(string: str) -> str:\n    from collections import Counter\n    count = Counter(string)\n    return ''.join([char for char in string if count[char] > 1])", "def only_duplicates(string: str) -> str:\n    from collections import Counter\n    count = Counter(string)\n    return ''.join([char for char in string if count[char] > 1])", "def only_duplicates(string: str) -> str:\n    from collections import Counter\n    count = Counter(string)\n    return ''.join([char for char in string if count[char] > 1])", "def only_duplicates(string: str) -> str:\n    from collections import Counter\n    char_count = Counter(string)\n    return ''.join([char for char in string if char_count[char] > 1])", "def only_duplicates(string: str) -> str:\n    from collections import Counter\n    char_count = Counter(string)\n    return ''.join([char for char in string if char_count[char] > 1])", "def only_duplicates(string: str) -> str:\n    from collections import Counter\n    count = Counter(string)\n    return ''.join([char for char in string if count[char] > 1])", "def only_duplicates(string: str) -> str:\n    from collections import Counter\n    char_count = Counter(string)\n    return ''.join([char for char in string if char_count[char] > 1])", "def only_duplicates(string: str) -> str:\n    from collections import Counter\n    char_count = Counter(string)\n    return ''.join([char for char in string if char_count[char] > 1])", "def only_duplicates(string: str) -> str:\n    from collections import Counter\n    char_count = Counter(string)\n    return ''.join([char for char in string if char_count[char] > 1])", "def only_duplicates(string: str) -> str:\n    from collections import Counter\n    count = Counter(string)\n    return ''.join([char for char in string if count[char] > 1])", "def only_duplicates(string: str) -> str:\n    from collections import Counter\n    count = Counter(string)\n    return ''.join([char for char in string if count[char] > 1])", "def only_duplicates(string: str) -> str:\n    from collections import Counter\n    count = Counter(string)\n    return ''.join([char for char in string if count[char] > 1])", "def only_duplicates(string: str) -> str:\n    from collections import Counter\n    char_count = Counter(string)\n    return ''.join([char for char in string if char_count[char] > 1])", "def only_duplicates(string: str) -> str:\n    from collections import Counter\n    count = Counter(string)\n    return ''.join([char for char in string if count[char] > 1])", "def only_duplicates(string: str) -> str:\n    from collections import Counter\n    count = Counter(string)\n    return ''.join([char for char in string if count[char] > 1])"], "outputs": "[['aabbcc'], [''], ['aabbccddee'], ['aabbccddeeff'], [''], [''], ['aabbeeffgghhii'], ['aabbbcccccdddddeeeee'], ['xyzzyx'], ['zzz']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['aabbcc'], ['abc'], ['aabbccddee'], ['aabbccddeeff'], ['a'], [''], ['aabbcdeeffgghhii'], ['aabbbcccccdddddeeeee'], ['xyzzyx'], ['zzz']]", "input_output_examples": "[[['abccdefee']], [['cceee']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "def plant_doubling(n: int) -> int:\n\"\"\"# Task\n Lonerz got some crazy growing plants and he wants to grow them nice and well.\n \n Initially, the garden is completely barren. \n \n Each morning, Lonerz can put any number of plants into the garden to grow. \n \n And at night, each plant mutates into two plants. \n \n Lonerz really hopes to see `n` plants in his garden.\n\n Your task is to find the minimum number of plants Lonerz has to plant to get `n` plants one day.\n\n# Input/Output\n\n The number of plant lonerz hopes to see in his garden.\n \n \n - `[input]` integer `n`\n \n   `1 <= n <= 10^7`\n\n\n - `[output]` an integer\n\n The number of plants Lonerz needs to plant.\n\"\"\"", "inputs": [[5], [8], [536870911], [1]], "outputs": [[2], [1], [29], [1]], "starter_code": "def plant_doubling(n: int) -> int:", "canonical_solution": "def plant_doubling(n):\n    return bin(n).count('1')", "entry_point": "plant_doubling", "task_id": "TACO_lite/109", "input_output_examples": "[[[5], [8]], [[2], [1]]]", "llm_generated_inputs": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [15], [16], [17], [31], [32], [33], [1023], [1024], [1025], [10000000]]", "clusters": {"cluster_list": [{"programs_str": ["def plant_doubling(n: int) -> int:\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n            n -= 1\n        n //= 2\n    return count", "def plant_doubling(n: int) -> int:\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n            n -= 1\n        n //= 2\n    return count", "def plant_doubling(n: int) -> int:\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n            n -= 1\n        n //= 2\n    return count", "def plant_doubling(n: int) -> int:\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n            n -= 1\n        n //= 2\n    return count", "def plant_doubling(n: int) -> int:\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n            n -= 1\n        n //= 2\n    return count", "def plant_doubling(n: int) -> int:\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n            n -= 1\n        n //= 2\n    return count", "def plant_doubling(n: int) -> int:\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n            n -= 1\n        n //= 2\n    return count", "def plant_doubling(n: int) -> int:\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n            n -= 1\n        n //= 2\n    return count", "def plant_doubling(n: int) -> int:\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n            n -= 1\n        n //= 2\n    return count", "def plant_doubling(n: int) -> int:\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n            n -= 1\n        n //= 2\n    return count", "def plant_doubling(n: int) -> int:\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n            n -= 1\n        n //= 2\n    return count", "def plant_doubling(n: int) -> int:\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n            n -= 1\n        n //= 2\n    return count", "def plant_doubling(n: int) -> int:\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n            n -= 1\n        n //= 2\n    return count"], "outputs": "[[1], [1], [2], [1], [2], [2], [3], [1], [2], [2], [4], [1], [2], [5], [1], [2], [10], [1], [2], [8]]", "probability": 0.65, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def plant_doubling(n: int) -> int:\n    days = 0\n    while n > 0:\n        if n % 2 == 1:\n            days += 1\n            n -= 1\n        n //= 2\n        days += 1\n    return days // 2"], "outputs": "[[1], [1], [2], [2], [2], [2], [3], [2], [3], [3], [4], [3], [3], [5], [3], [4], [10], [6], [6], [16]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[[8], [2], [1]]]"}, {"programs_str": ["def plant_doubling(n: int) -> int:\n    if n == 1:\n        return 1\n    days = 0\n    while n > 1:\n        if n % 2 == 1:\n            n -= 1\n            days += 1\n        n //= 2\n        days += 1\n    return days", "def plant_doubling(n: int) -> int:\n    if n == 1:\n        return 1\n    days = 0\n    while n > 1:\n        if n % 2 == 1:\n            n -= 1\n            days += 1\n        n //= 2\n        days += 1\n    return days", "def plant_doubling(n: int) -> int:\n    if n == 1:\n        return 1\n    count = 0\n    while n > 1:\n        if n % 2 == 1:\n            n -= 1\n            count += 1\n        n //= 2\n        count += 1\n    return count"], "outputs": "[[1], [1], [2], [2], [3], [3], [4], [3], [4], [4], [6], [4], [5], [8], [5], [6], [18], [10], [11], [30]]", "probability": 0.15, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[5], [3], [2]], [[8], [3], [1]]]"}, {"programs_str": ["def plant_doubling(n: int) -> int:\n    days = 0\n    while n > 0:\n        if n % 2 == 1:\n            days += 1\n        n = (n + 1) // 2\n    return days", "def plant_doubling(n: int) -> int:\n    days = 0\n    while n > 0:\n        if n % 2 == 1:\n            days += 1\n        n = (n + 1) // 2\n    return days", "def plant_doubling(n: int) -> int:\n    days = 0\n    while n > 0:\n        if n % 2 == 1:\n            days += 1\n        n = (n + 1) // 2\n    return days"], "outputs": "['Timeout', 'Timeout', 'Timeout', 'Timeout', 'Timeout', 'Timeout', 'Timeout', 'Timeout', 'Timeout', 'Timeout', 'Timeout', 'Timeout', 'Timeout', 'Timeout', 'Timeout', 'Timeout', 'Timeout', 'Timeout', 'Timeout', 'Timeout']", "probability": 0.15, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[5], 'Timeout', [2]], [[8], 'Timeout', [1]]]"}], "entropy": 0.7205767639396528, "llm_generated_inputs": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [15], [16], [17], [31], [32], [33], [1023], [1024], [1025], [10000000]]", "input_output_examples": "[[[5], [8]], [[2], [1]]]", "weighted_test_consistency": 0.675, "at_least_one_align": true, "ambiguity": 0.5227883819698264}}
{"requirement": "def growing_plant(up: int, down: int, h: int) -> int:\n\"\"\"### Task\n Each day a plant is growing by `upSpeed` meters. Each night that plant's height decreases by `downSpeed` meters due to the lack of sun heat. Initially, plant is 0 meters tall. We plant the seed at the beginning of a day. We want to know when the height of the plant will reach a certain level.\n\n### Input/Output\n\n```if-not:sql\n - `[input]` integer `upSpeed`\n\n    A positive integer representing the daily growth.\n\n    Constraints: `5 ≤ upSpeed ≤ 100.`\n\n\n - `[input]` integer `downSpeed`\n\n    A positive integer representing the nightly decline.\n\n    Constraints: `2 ≤ downSpeed < upSpeed.`\n\n\n - `[input]` integer `desiredHeight`\n\n    A positive integer representing the threshold.\n\n    Constraints: `4 ≤ desiredHeight ≤ 1000.`\n\n - `[output]` an integer\n\n    The number of days that it will take for the plant to reach/pass desiredHeight (including the last day in the total count).\n```\n```if:sql\n## Input\n\n~~~\n-----------------------------------------\n|     Table     |    Column      | Type |\n|---------------+----------------+------|\n| growing_plant | down_speed     | int  |\n|               | up_speed       | int  |\n|               | desired_height | int  |\n-----------------------------------------\n~~~\n\n### Columns\n* `up_speed`: A positive integer representing the daily growth. Constraints: `5 ≤ up_speed ≤ 100.`\n* `down_speed`: A positive integer representing the nightly decline. Constraints: `2 ≤ down_speed < up_speed.`\n* `desired_height`: A positive integer representing the threshold. Constraints: `4 ≤ desired_height ≤ 1000.`\n\n## Output\n\n~~~\n-------------------\n|  Column  | Type |\n|----------+------|\n| id       | int  |\n| num_days | int  |\n-------------------\n~~~\n\n`num_days` is the number of days that it will take for the plant to reach/pass desiredHeight (including the last day in the total count).\n```\n\"\"\"", "inputs": [[100, 10, 910], [10, 9, 4], [5, 2, 5], [5, 2, 6]], "outputs": [[10], [1], [1], [2]], "starter_code": "def growing_plant(up: int, down: int, h: int) -> int:", "canonical_solution": "from math import ceil\n\ndef growing_plant(up, down, h):\n    return max(ceil((h - down) / (up - down)), 1)", "entry_point": "growing_plant", "task_id": "TACO_lite/115", "input_output_examples": "[[[100, 10, 910], [10, 9, 4]], [[10], [1]]]", "llm_generated_inputs": "[[5, 2, 4], [10, 9, 4], [100, 2, 1000], [6, 5, 12], [7, 3, 14], [8, 2, 15], [5, 2, 5], [10, 3, 10], [9, 1, 9], [50, 49, 100]]", "clusters": {"cluster_list": [{"programs_str": ["def growing_plant(up: int, down: int, h: int) -> int:\n    days = 0\n    current_height = 0\n    while current_height < h:\n        days += 1\n        current_height += up\n        if current_height >= h:\n            break\n        current_height -= down\n    return days", "def growing_plant(up: int, down: int, h: int) -> int:\n    current_height = 0\n    days = 0\n    while current_height < h:\n        days += 1\n        current_height += up\n        if current_height >= h:\n            break\n        current_height -= down\n    return days", "def growing_plant(up: int, down: int, h: int) -> int:\n    current_height = 0\n    days = 0\n    while current_height < h:\n        days += 1\n        current_height += up\n        if current_height >= h:\n            break\n        current_height -= down\n    return days", "def growing_plant(up: int, down: int, h: int) -> int:\n    current_height = 0\n    days = 0\n    while current_height < h:\n        days += 1\n        current_height += up\n        if current_height >= h:\n            break\n        current_height -= down\n    return days", "def growing_plant(up: int, down: int, h: int) -> int:\n    current_height = 0\n    days = 0\n    while current_height < h:\n        days += 1\n        current_height += up\n        if current_height >= h:\n            break\n        current_height -= down\n    return days", "def growing_plant(up: int, down: int, h: int) -> int:\n    current_height = 0\n    days = 0\n    while current_height < h:\n        days += 1\n        current_height += up\n        if current_height >= h:\n            break\n        current_height -= down\n    return days", "def growing_plant(up: int, down: int, h: int) -> int:\n    current_height = 0\n    days = 0\n    while current_height < h:\n        days += 1\n        current_height += up\n        if current_height >= h:\n            break\n        current_height -= down\n    return days", "def growing_plant(up: int, down: int, h: int) -> int:\n    current_height = 0\n    days = 0\n    while current_height < h:\n        days += 1\n        current_height += up\n        if current_height >= h:\n            break\n        current_height -= down\n    return days", "def growing_plant(up: int, down: int, h: int) -> int:\n    days = 0\n    current_height = 0\n    while current_height < h:\n        days += 1\n        current_height += up\n        if current_height >= h:\n            break\n        current_height -= down\n    return days", "def growing_plant(up: int, down: int, h: int) -> int:\n    current_height = 0\n    days = 0\n    while current_height < h:\n        days += 1\n        current_height += up\n        if current_height >= h:\n            break\n        current_height -= down\n    return days", "def growing_plant(up: int, down: int, h: int) -> int:\n    current_height = 0\n    days = 0\n    while current_height < h:\n        days += 1\n        current_height += up\n        if current_height >= h:\n            break\n        current_height -= down\n    return days", "def growing_plant(up: int, down: int, h: int) -> int:\n    current_height = 0\n    days = 0\n    while current_height < h:\n        days += 1\n        current_height += up\n        if current_height >= h:\n            break\n        current_height -= down\n    return days", "def growing_plant(up: int, down: int, h: int) -> int:\n    current_height = 0\n    days = 0\n    while current_height < h:\n        days += 1\n        current_height += up\n        if current_height >= h:\n            break\n        current_height -= down\n    return days", "def growing_plant(up: int, down: int, h: int) -> int:\n    current_height = 0\n    days = 0\n    while current_height < h:\n        days += 1\n        current_height += up\n        if current_height >= h:\n            break\n        current_height -= down\n    return days", "def growing_plant(up: int, down: int, h: int) -> int:\n    current_height = 0\n    days = 0\n    while current_height < h:\n        days += 1\n        current_height += up\n        if current_height >= h:\n            break\n        current_height -= down\n    return days", "def growing_plant(up: int, down: int, h: int) -> int:\n    current_height = 0\n    days = 0\n    while current_height < h:\n        days += 1\n        current_height += up\n        if current_height >= h:\n            break\n        current_height -= down\n    return days", "def growing_plant(up: int, down: int, h: int) -> int:\n    current_height = 0\n    days = 0\n    while current_height < h:\n        days += 1\n        current_height += up\n        if current_height >= h:\n            break\n        current_height -= down\n    return days", "def growing_plant(up: int, down: int, h: int) -> int:\n    current_height = 0\n    days = 0\n    while current_height < h:\n        days += 1\n        current_height += up\n        if current_height >= h:\n            break\n        current_height -= down\n    return days", "def growing_plant(up: int, down: int, h: int) -> int:\n    current_height = 0\n    days = 0\n    while current_height < h:\n        days += 1\n        current_height += up\n        if current_height >= h:\n            break\n        current_height -= down\n    return days", "def growing_plant(up: int, down: int, h: int) -> int:\n    current_height = 0\n    days = 0\n    while current_height < h:\n        days += 1\n        current_height += up\n        if current_height >= h:\n            break\n        current_height -= down\n    return days"], "outputs": "[[1], [1], [11], [7], [3], [3], [1], [1], [1], [51]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[5, 2, 4], [10, 9, 4], [100, 2, 1000], [6, 5, 12], [7, 3, 14], [8, 2, 15], [5, 2, 5], [10, 3, 10], [9, 1, 9], [50, 49, 100]]", "input_output_examples": "[[[100, 10, 910], [10, 9, 4]], [[10], [1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "def title_to_number(title: str) -> int:\n\"\"\"Write a function \n\n`titleToNumber(title) or title_to_number(title) or titleToNb title ...`\n\n(depending on the language)\n\nthat given a column title as it appears in an Excel sheet, returns its corresponding column number. All column titles will be uppercase.\n\"\"\"", "inputs": [["A"], ["Z"], ["AA"], ["AZ"], ["BA"], ["CODEWARS"], ["ZZZTOP"], ["OYAJI"], ["LONELINESS"], ["UNFORGIVABLE"]], "outputs": [[1], [26], [27], [52], [53], [28779382963], [321268054], [7294985], [68400586976949], [79089429845931757]], "starter_code": "def title_to_number(title: str) -> int:", "canonical_solution": "def title_to_number(title):\n    ret = 0\n    for i in title:\n        ret = ret * 26 + ord(i) - 64\n    return ret", "entry_point": "title_to_number", "task_id": "TACO_lite/117", "input_output_examples": "[[['A'], ['Z'], ['AA']], [[1], [26], [27]]]", "llm_generated_inputs": "[['A'], ['Z'], ['AA'], ['AB'], ['AZ'], ['BA'], ['ZZ'], ['AAA'], ['ABC'], ['XYZ'], ['ZYX'], ['ZZZ'], ['AAAA']]", "clusters": {"cluster_list": [{"programs_str": ["def title_to_number(title: str) -> int:\n    result = 0\n    for char in title:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result", "def title_to_number(title: str) -> int:\n    result = 0\n    for char in title:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result", "def title_to_number(title: str) -> int:\n    result = 0\n    for char in title:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result", "def title_to_number(title: str) -> int:\n    result = 0\n    for char in title:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result", "def title_to_number(title: str) -> int:\n    result = 0\n    for char in title:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result", "def title_to_number(title: str) -> int:\n    result = 0\n    for char in title:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result", "def title_to_number(title: str) -> int:\n    result = 0\n    for char in title:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result", "def title_to_number(title: str) -> int:\n    result = 0\n    for char in title:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result", "def title_to_number(title: str) -> int:\n    result = 0\n    for char in title:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result", "def title_to_number(title: str) -> int:\n    result = 0\n    for char in title:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result", "def title_to_number(title: str) -> int:\n    result = 0\n    for char in title:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result", "def title_to_number(title: str) -> int:\n    result = 0\n    for char in title:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result", "def title_to_number(title: str) -> int:\n    result = 0\n    for char in title:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result", "def title_to_number(title: str) -> int:\n    result = 0\n    for char in title:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result", "def title_to_number(title: str) -> int:\n    result = 0\n    for char in title:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result", "def title_to_number(title: str) -> int:\n    result = 0\n    for char in title:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result", "def title_to_number(title: str) -> int:\n    result = 0\n    for char in title:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result", "def title_to_number(title: str) -> int:\n    result = 0\n    for char in title:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result", "def title_to_number(title: str) -> int:\n    result = 0\n    for char in title:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result", "def title_to_number(title: str) -> int:\n    result = 0\n    for char in title:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result"], "outputs": "[[1], [26], [27], [28], [52], [53], [702], [703], [731], [16900], [18250], [18278], [18279]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['A'], ['Z'], ['AA'], ['AB'], ['AZ'], ['BA'], ['ZZ'], ['AAA'], ['ABC'], ['XYZ'], ['ZYX'], ['ZZZ'], ['AAAA']]", "input_output_examples": "[[['A'], ['Z'], ['AA']], [[1], [26], [27]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "def sum_circles(*args: float) -> str:\n\"\"\"Write a function that takes as its parameters *one or more numbers which are the diameters of circles.* \n\nThe function should return the *total area of all the circles*, rounded to the nearest integer in a string that says \"We have this much circle: xyz\". \n\nYou don't know how many circles you will be given, but you can assume it will be at least one.\n\nTranslations and comments (and upvotes!) welcome!\n\"\"\"", "inputs": [[48, 7, 8, 9, 10], [1], [1, 1, 1, 2, 3, 4, 5], [894, 5778, 4839, 476], [4.5456, 746.5, 98.34, 344.543], [1, 1, 1], [13.58, 14.9, 56.99, 107.321], [56894.04839, 843975.4839, 4.08437403489], [5, 6, 7, 8, 9, 10, 105083, 48839, 4853, 28, 483]], "outputs": [["We have this much circle: 2040"], ["We have this much circle: 1"], ["We have this much circle: 45"], ["We have this much circle: 45417233"], ["We have this much circle: 538519"], ["We have this much circle: 2"], ["We have this much circle: 11916"], ["We have this much circle: 561977165367"], ["We have this much circle: 10564760498"]], "starter_code": "def sum_circles(*args: float) -> str:", "canonical_solution": "import math\n\ndef sum_circles(*args):\n    t = round(sum([math.pi * d ** 2 / 4 for d in args]))\n    return 'We have this much circle: {}'.format(int(t))", "entry_point": "sum_circles", "task_id": "TACO_lite/122", "input_output_examples": "[[[2], [[2, 3, 4]]], [['We have this much circle: 3'], ['We have this much circle: 23']]]", "llm_generated_inputs": "[[1], [2.5], [0], [1000]]", "clusters": {"cluster_list": [{"programs_str": ["import math\n\ndef sum_circles(*args: float) -> str:\n    total_area = sum((math.pi * (diameter / 2) ** 2 for diameter in args))\n    return f'We have this much circle: {round(total_area)}'", "import math\n\ndef sum_circles(*args: float) -> str:\n    total_area = sum((math.pi * (diameter / 2) ** 2 for diameter in args))\n    return f'We have this much circle: {round(total_area)}'", "import math\n\ndef sum_circles(*args: float) -> str:\n    total_area = sum((math.pi * (diameter / 2) ** 2 for diameter in args))\n    return f'We have this much circle: {round(total_area)}'", "import math\n\ndef sum_circles(*args: float) -> str:\n    total_area = sum((math.pi * (diameter / 2) ** 2 for diameter in args))\n    return f'We have this much circle: {round(total_area)}'", "def sum_circles(*args: float) -> str:\n    import math\n    total_area = sum((math.pi * (diameter / 2) ** 2 for diameter in args))\n    return f'We have this much circle: {round(total_area)}'", "def sum_circles(*args: float) -> str:\n    import math\n    total_area = sum((math.pi * (diameter / 2) ** 2 for diameter in args))\n    return f'We have this much circle: {round(total_area)}'", "def sum_circles(*args: float) -> str:\n    import math\n    total_area = sum((math.pi * (diameter / 2) ** 2 for diameter in args))\n    return f'We have this much circle: {round(total_area)}'", "def sum_circles(*args: float) -> str:\n    import math\n    total_area = sum((math.pi * (diameter / 2) ** 2 for diameter in args))\n    return f'We have this much circle: {round(total_area)}'", "def sum_circles(*args: float) -> str:\n    import math\n    total_area = sum((math.pi * (diameter / 2) ** 2 for diameter in args))\n    return f'We have this much circle: {round(total_area)}'", "import math\n\ndef sum_circles(*args: float) -> str:\n    total_area = sum((math.pi * (diameter / 2) ** 2 for diameter in args))\n    return f'We have this much circle: {round(total_area)}'", "def sum_circles(*args: float) -> str:\n    import math\n    total_area = sum((math.pi * (diameter / 2) ** 2 for diameter in args))\n    return f'We have this much circle: {round(total_area)}'", "def sum_circles(*args: float) -> str:\n    import math\n    total_area = sum((math.pi * (diameter / 2) ** 2 for diameter in args))\n    return f'We have this much circle: {round(total_area)}'", "import math\n\ndef sum_circles(*args: float) -> str:\n    total_area = sum((math.pi * (diameter / 2) ** 2 for diameter in args))\n    return f'We have this much circle: {round(total_area)}'", "import math\n\ndef sum_circles(*args: float) -> str:\n    total_area = sum((math.pi * (diameter / 2) ** 2 for diameter in args))\n    return f'We have this much circle: {round(total_area)}'", "def sum_circles(*args: float) -> str:\n    import math\n    total_area = sum((math.pi * (diameter / 2) ** 2 for diameter in args))\n    return f'We have this much circle: {round(total_area)}'", "def sum_circles(*args: float) -> str:\n    import math\n    total_area = sum((math.pi * (diameter / 2) ** 2 for diameter in args))\n    return f'We have this much circle: {round(total_area)}'", "def sum_circles(*args: float) -> str:\n    import math\n    total_area = sum((math.pi * (diameter / 2) ** 2 for diameter in args))\n    return f'We have this much circle: {round(total_area)}'", "def sum_circles(*args: float) -> str:\n    import math\n    total_area = sum((math.pi * (diameter / 2) ** 2 for diameter in args))\n    return f'We have this much circle: {round(total_area)}'", "import math\n\ndef sum_circles(*args: float) -> str:\n    total_area = sum((math.pi * (diameter / 2) ** 2 for diameter in args))\n    return f'We have this much circle: {round(total_area)}'", "def sum_circles(*args: float) -> str:\n    import math\n    total_area = sum((math.pi * (diameter / 2) ** 2 for diameter in args))\n    return f'We have this much circle: {round(total_area)}'"], "outputs": "[['We have this much circle: 1'], ['We have this much circle: 5'], ['We have this much circle: 0'], ['We have this much circle: 785398']]", "probability": 1.0, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[[[2, 3, 4]], ['TypeError'], ['We have this much circle: 23']]]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2.5], [0], [1000]]", "input_output_examples": "[[[2], [[2, 3, 4]]], [['We have this much circle: 3'], ['We have this much circle: 23']]]", "weighted_test_consistency": 0.5, "at_least_one_align": false, "ambiguity": 0.25}}
{"requirement": "from typing import List\n\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n\"\"\"Your website is divided vertically in sections, and each can be of different size (height).  \nYou need to establish the section index (starting at `0`) you are at, given the `scrollY` and `sizes` of all sections.  \nSections start with `0`, so if first section is `200` high, it takes `0-199` \"pixels\" and second starts at `200`.\n\nGiven the `scrollY` integer (always non-negative) and an array of non-negative integers (with at least one element), calculate the index (starting at `0`) or `-1` if `scrollY` falls beyond last section (indication of an error).\n\"\"\"", "inputs": [[1, [300, 200, 400, 600, 100]], [299, [300, 200, 400, 600, 100]], [300, [300, 200, 400, 600, 100]], [1599, [300, 200, 400, 600, 100]], [1600, [300, 200, 400, 600, 100]]], "outputs": [[0], [0], [1], [4], [-1]], "starter_code": "from typing import List\ndef get_section_id(scroll: int, sizes: List[int]) -> int:", "canonical_solution": "def get_section_id(scroll, sizes):\n    c = 0\n    for idx, s in enumerate(sizes):\n        c += s\n        if scroll < c:\n            return idx\n    return -1", "entry_point": "get_section_id", "task_id": "TACO_lite/124", "input_output_examples": "[[[300, [300, 200, 400, 600, 100]], [1600, [300, 200, 400, 600, 100]]], [[1], [-1]]]", "llm_generated_inputs": "[[0, [100, 200, 300]], [150, [100, 200, 300]], [300, [100, 200, 300]], [400, [100, 200, 300]], [600, [100, 200, 300]], [599, [100, 200, 300]], [1, [1]], [0, [0, 100]], [100, [0, 100]], [0, [0]], [100, [50, 50, 50]], [150, [50, 50, 50]], [200, [50, 50, 50]], [250, [50, 50, 50]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n    current_position = 0\n    for index, size in enumerate(sizes):\n        if current_position <= scroll < current_position + size:\n            return index\n        current_position += size\n    return -1", "from typing import List\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n    current_position = 0\n    for index, size in enumerate(sizes):\n        if current_position <= scroll < current_position + size:\n            return index\n        current_position += size\n    return -1", "from typing import List\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n    current_position = 0\n    for index, size in enumerate(sizes):\n        if current_position <= scroll < current_position + size:\n            return index\n        current_position += size\n    return -1", "from typing import List\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n    current_position = 0\n    for index, size in enumerate(sizes):\n        if current_position <= scroll < current_position + size:\n            return index\n        current_position += size\n    return -1", "from typing import List\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n    current_position = 0\n    for index, size in enumerate(sizes):\n        if current_position <= scroll < current_position + size:\n            return index\n        current_position += size\n    return -1", "from typing import List\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n    current_position = 0\n    for index, size in enumerate(sizes):\n        if current_position <= scroll < current_position + size:\n            return index\n        current_position += size\n    return -1", "from typing import List\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n    current_position = 0\n    for index, size in enumerate(sizes):\n        if current_position <= scroll < current_position + size:\n            return index\n        current_position += size\n    return -1", "from typing import List\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n    current_position = 0\n    for index, size in enumerate(sizes):\n        if current_position <= scroll < current_position + size:\n            return index\n        current_position += size\n    return -1", "from typing import List\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n    current_position = 0\n    for index, size in enumerate(sizes):\n        if current_position <= scroll < current_position + size:\n            return index\n        current_position += size\n    return -1", "from typing import List\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n    current_position = 0\n    for index, size in enumerate(sizes):\n        if current_position <= scroll < current_position + size:\n            return index\n        current_position += size\n    return -1", "from typing import List\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n    current_position = 0\n    for index, size in enumerate(sizes):\n        if current_position <= scroll < current_position + size:\n            return index\n        current_position += size\n    return -1", "from typing import List\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n    current_position = 0\n    for index, size in enumerate(sizes):\n        if current_position <= scroll < current_position + size:\n            return index\n        current_position += size\n    return -1", "from typing import List\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n    current_position = 0\n    for index, size in enumerate(sizes):\n        if current_position <= scroll < current_position + size:\n            return index\n        current_position += size\n    return -1", "from typing import List\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n    current_position = 0\n    for index, size in enumerate(sizes):\n        if current_position <= scroll < current_position + size:\n            return index\n        current_position += size\n    return -1", "from typing import List\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n    current_position = 0\n    for index, size in enumerate(sizes):\n        if current_position <= scroll < current_position + size:\n            return index\n        current_position += size\n    return -1", "from typing import List\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n    current_position = 0\n    for index, size in enumerate(sizes):\n        if current_position <= scroll < current_position + size:\n            return index\n        current_position += size\n    return -1", "from typing import List\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n    current_position = 0\n    for index, size in enumerate(sizes):\n        if current_position <= scroll < current_position + size:\n            return index\n        current_position += size\n    return -1", "from typing import List\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n    current_position = 0\n    for index, size in enumerate(sizes):\n        if current_position <= scroll < current_position + size:\n            return index\n        current_position += size\n    return -1", "from typing import List\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n    current_position = 0\n    for index, size in enumerate(sizes):\n        if current_position <= scroll < current_position + size:\n            return index\n        current_position += size\n    return -1", "from typing import List\n\ndef get_section_id(scroll: int, sizes: List[int]) -> int:\n    current_position = 0\n    for index, size in enumerate(sizes):\n        if current_position <= scroll < current_position + size:\n            return index\n        current_position += size\n    return -1"], "outputs": "[[0], [1], [2], [2], [-1], [2], [-1], [1], [-1], [-1], [2], [-1], [-1], [-1]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0, [100, 200, 300]], [150, [100, 200, 300]], [300, [100, 200, 300]], [400, [100, 200, 300]], [600, [100, 200, 300]], [599, [100, 200, 300]], [1, [1]], [0, [0, 100]], [100, [0, 100]], [0, [0]], [100, [50, 50, 50]], [150, [50, 50, 50]], [200, [50, 50, 50]], [250, [50, 50, 50]]]", "input_output_examples": "[[[300, [300, 200, 400, 600, 100]], [1600, [300, 200, 400, 600, 100]]], [[1], [-1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "def sum_nested_numbers(a: list, depth: int = 1) -> int:\n\"\"\"Build a function `sumNestedNumbers`/`sum_nested_numbers` that finds the sum of all numbers in a series of nested arrays raised to the power of their respective nesting levels.  Numbers in the outer most array should be raised to the power of 1.\n\n\"\"\"", "inputs": [[[0]], [[1, 2, 3, 4, 5]], [[1, [2], 3, [4, [5]]]], [[6, [5], [[4]], [[[3]]], [[[[2]]]], [[[[[1]]]]]]], [[1, [-1], [[1]], [[[-1]]], [[[[1]]]]]]], "outputs": [[0], [15], [149], [209], [5]], "starter_code": "def sum_nested_numbers(a: list, depth: int = 1) -> int:", "canonical_solution": "def sum_nested_numbers(a, depth=1):\n    return sum((sum_nested_numbers(e, depth + 1) if type(e) == list else e ** depth for e in a))", "entry_point": "sum_nested_numbers", "task_id": "TACO_lite/128", "input_output_examples": "[[[[1, 2, [3, 4], [[5]]]]], [[57]]]", "llm_generated_inputs": "[[[1, 2, [3, 4], [5, [6]]], 1], [[1, [2, [3, [4, [5]]]]], 1], [[1, 2, 3, 4, 5], 1], [[[[1]], [[2]], [[3]]], 1], [[[], [], []], 1], [[1, [2, [3, [4, [5]]]]], 2], [[0, [0, [0, [0, [0]]]]], 1], [[10, [20, [30]]], 1], [[1, [2, [3, [4, [5]]]]], 3], [[[-1, -2, [-3, -4]], [-5, [-6]]], 1]]", "clusters": {"cluster_list": [{"programs_str": ["def sum_nested_numbers(a: list, depth: int=1) -> int:\n    total = 0\n    for element in a:\n        if isinstance(element, list):\n            total += sum_nested_numbers(element, depth + 1)\n        else:\n            total += element ** depth\n    return total", "def sum_nested_numbers(a: list, depth: int=1) -> int:\n    total = 0\n    for element in a:\n        if isinstance(element, list):\n            total += sum_nested_numbers(element, depth + 1)\n        elif isinstance(element, (int, float)):\n            total += element ** depth\n    return total", "def sum_nested_numbers(a: list, depth: int=1) -> int:\n    total = 0\n    for element in a:\n        if isinstance(element, list):\n            total += sum_nested_numbers(element, depth + 1)\n        elif isinstance(element, (int, float)):\n            total += element ** depth\n    return total", "def sum_nested_numbers(a: list, depth: int=1) -> int:\n    total = 0\n    for element in a:\n        if isinstance(element, list):\n            total += sum_nested_numbers(element, depth + 1)\n        elif isinstance(element, (int, float)):\n            total += element ** depth\n    return total", "def sum_nested_numbers(a: list, depth: int=1) -> int:\n    total = 0\n    for element in a:\n        if isinstance(element, list):\n            total += sum_nested_numbers(element, depth + 1)\n        else:\n            total += element ** depth\n    return total", "def sum_nested_numbers(a: list, depth: int=1) -> int:\n    total = 0\n    for element in a:\n        if isinstance(element, list):\n            total += sum_nested_numbers(element, depth + 1)\n        elif isinstance(element, (int, float)):\n            total += element ** depth\n    return total", "def sum_nested_numbers(a: list, depth: int=1) -> int:\n    total = 0\n    for element in a:\n        if isinstance(element, list):\n            total += sum_nested_numbers(element, depth + 1)\n        else:\n            total += element ** depth\n    return total", "def sum_nested_numbers(a: list, depth: int=1) -> int:\n    total = 0\n    for element in a:\n        if isinstance(element, list):\n            total += sum_nested_numbers(element, depth + 1)\n        else:\n            total += element ** depth\n    return total", "def sum_nested_numbers(a: list, depth: int=1) -> int:\n    total = 0\n    for element in a:\n        if isinstance(element, list):\n            total += sum_nested_numbers(element, depth + 1)\n        elif isinstance(element, (int, float)):\n            total += element ** depth\n    return total", "def sum_nested_numbers(a: list, depth: int=1) -> int:\n    total = 0\n    for element in a:\n        if isinstance(element, list):\n            total += sum_nested_numbers(element, depth + 1)\n        else:\n            total += element ** depth\n    return total", "def sum_nested_numbers(a: list, depth: int=1) -> int:\n    total = 0\n    for element in a:\n        if isinstance(element, list):\n            total += sum_nested_numbers(element, depth + 1)\n        else:\n            total += element ** depth\n    return total", "def sum_nested_numbers(a: list, depth: int=1) -> int:\n    total = 0\n    for element in a:\n        if isinstance(element, list):\n            total += sum_nested_numbers(element, depth + 1)\n        elif isinstance(element, (int, float)):\n            total += element ** depth\n    return total", "def sum_nested_numbers(a: list, depth: int=1) -> int:\n    total = 0\n    for element in a:\n        if isinstance(element, list):\n            total += sum_nested_numbers(element, depth + 1)\n        elif isinstance(element, (int, float)):\n            total += element ** depth\n    return total", "def sum_nested_numbers(a: list, depth: int=1) -> int:\n    total = 0\n    for element in a:\n        if isinstance(element, list):\n            total += sum_nested_numbers(element, depth + 1)\n        else:\n            total += element ** depth\n    return total", "def sum_nested_numbers(a: list, depth: int=1) -> int:\n    total = 0\n    for element in a:\n        if isinstance(element, list):\n            total += sum_nested_numbers(element, depth + 1)\n        elif isinstance(element, (int, float)):\n            total += element ** depth\n    return total", "def sum_nested_numbers(a: list, depth: int=1) -> int:\n    total = 0\n    for element in a:\n        if isinstance(element, list):\n            total += sum_nested_numbers(element, depth + 1)\n        elif isinstance(element, (int, float)):\n            total += element ** depth\n    return total", "def sum_nested_numbers(a: list, depth: int=1) -> int:\n    total = 0\n    for element in a:\n        if isinstance(element, list):\n            total += sum_nested_numbers(element, depth + 1)\n        else:\n            total += element ** depth\n    return total", "def sum_nested_numbers(a: list, depth: int=1) -> int:\n    total = 0\n    for element in a:\n        if isinstance(element, list):\n            total += sum_nested_numbers(element, depth + 1)\n        elif isinstance(element, (int, float)):\n            total += element ** depth\n    return total", "def sum_nested_numbers(a: list, depth: int=1) -> int:\n    total = 0\n    for element in a:\n        if isinstance(element, list):\n            total += sum_nested_numbers(element, depth + 1)\n        else:\n            total += element ** depth\n    return total", "def sum_nested_numbers(a: list, depth: int=1) -> int:\n    total = 0\n    for element in a:\n        if isinstance(element, list):\n            total += sum_nested_numbers(element, depth + 1)\n        else:\n            total += element ** depth\n    return total"], "outputs": "[[269], [3413], [15], [36], [0], [16739], [0], [27410], [82481], [-277]]", "probability": 1.0, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 2, [3, 4], [[5]]]], [153], [57]]]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, [3, 4], [5, [6]]], 1], [[1, [2, [3, [4, [5]]]]], 1], [[1, 2, 3, 4, 5], 1], [[[[1]], [[2]], [[3]]], 1], [[[], [], []], 1], [[1, [2, [3, [4, [5]]]]], 2], [[0, [0, [0, [0, [0]]]]], 1], [[10, [20, [30]]], 1], [[1, [2, [3, [4, [5]]]]], 3], [[[-1, -2, [-3, -4]], [-5, [-6]]], 1]]", "input_output_examples": "[[[[1, 2, [3, 4], [[5]]]]], [[57]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false, "ambiguity": 0.5}}
{"requirement": "def make_negative(number: int) -> int:\n\"\"\"In this simple assignment you are given a number and have to make it negative. But maybe the number is already negative?\n\n**Notes:**\n\n- The number can be negative already, in which case no change is required.\n- Zero (0) is not checked for any specific sign. Negative zeros make no mathematical sense.\n\"\"\"", "inputs": [[42], [-9], [0], [1], [-1]], "outputs": [[-42], [-9], [0], [-1], [-1]], "starter_code": "def make_negative(number: int) -> int:", "canonical_solution": "def make_negative(number):\n    return -abs(number)", "entry_point": "make_negative", "task_id": "TACO_lite/131", "input_output_examples": "[[[1], [-5], [0], [0.12]], [[-1], [-5], [0], [-0.12]]]", "llm_generated_inputs": "[[10], [-5], [0], [1000], [-1000], [1], [-1]]", "clusters": {"cluster_list": [{"programs_str": ["def make_negative(number: int) -> int:\n    return -abs(number)", "def make_negative(number: int) -> int:\n    return -number if number > 0 else number", "def make_negative(number: int) -> int:\n    return -abs(number)", "def make_negative(number: int) -> int:\n    return -number if number > 0 else number", "def make_negative(number: int) -> int:\n    return -abs(number)", "def make_negative(number: int) -> int:\n    return -abs(number)", "def make_negative(number: int) -> int:\n    return -abs(number)", "def make_negative(number: int) -> int:\n    return -abs(number)", "def make_negative(number: int) -> int:\n    return -abs(number)", "def make_negative(number: int) -> int:\n    return -number if number > 0 else number", "def make_negative(number: int) -> int:\n    return -abs(number)", "def make_negative(number: int) -> int:\n    return -abs(number)", "def make_negative(number: int) -> int:\n    return -abs(number)", "def make_negative(number: int) -> int:\n    return -number if number > 0 else number", "def make_negative(number: int) -> int:\n    return -abs(number)", "def make_negative(number: int) -> int:\n    return -abs(number)", "def make_negative(number: int) -> int:\n    return -number if number > 0 else number", "def make_negative(number: int) -> int:\n    return -number if number > 0 else number", "def make_negative(number: int) -> int:\n    return -number if number > 0 else number", "def make_negative(number: int) -> int:\n    return -abs(number)"], "outputs": "[[-10], [-5], [0], [-1000], [-1000], [-1], [-1]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[10], [-5], [0], [1000], [-1000], [1], [-1]]", "input_output_examples": "[[[1], [-5], [0], [0.12]], [[-1], [-5], [0], [-0.12]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "def cup_volume(d1: float, d2: float, h: float) -> float:\n\"\"\"Your job is to return the volume of a cup when given the diameter of the top, the diameter of the bottom and the height.\n\nYou know that there is a steady gradient from the top to the bottom.\n\n\n\nYou want to return the volume rounded to 2 decimal places.\n\nYou will only be passed positive numbers.\n\"\"\"", "inputs": [[1, 1, 1], [10, 8, 10], [1000, 1000, 1000], [13.123, 123.12, 1], [5, 12, 31]], "outputs": [[0.79], [638.79], [785398163.4], [4436.57], [1858.51]], "starter_code": "def cup_volume(d1: float, d2: float, h: float) -> float:", "canonical_solution": "from math import pi\n\ndef cup_volume(d1, d2, h):\n    return round(h / 12.0 * pi * (d1 ** 2 + d1 * d2 + d2 ** 2), 2)", "entry_point": "cup_volume", "task_id": "TACO_lite/132", "input_output_examples": "[[[1, 1, 1], [10, 8, 10], [1000, 1000, 1000], [13.123, 123.12, 1], [5, 12, 31]], [[0.79], [638.79], [785398163.4], [4436.57], [1858.51]]]", "llm_generated_inputs": "[[3.0, 3.0, 5.0], [4.0, 2.0, 6.0], [1.0, 1.0, 1.0], [0.1, 0.1, 0.1], [10.0, 5.0, 15.0], [100.0, 100.0, 100.0], [5.5, 2.5, 7.5], [3.0, 5.0, 4.0], [10.0, 10.0, 0.001]]", "clusters": {"cluster_list": [{"programs_str": ["from math import pi\n\ndef cup_volume(d1: float, d2: float, h: float) -> float:\n    r1 = d1 / 2\n    r2 = d2 / 2\n    volume = h / 3 * pi * (r1 ** 2 + r1 * r2 + r2 ** 2)\n    return round(volume, 2)", "from math import pi\n\ndef cup_volume(d1: float, d2: float, h: float) -> float:\n    r1 = d1 / 2\n    r2 = d2 / 2\n    volume = h / 3 * pi * (r1 ** 2 + r1 * r2 + r2 ** 2)\n    return round(volume, 2)", "from math import pi\n\ndef cup_volume(d1: float, d2: float, h: float) -> float:\n    r1 = d1 / 2\n    r2 = d2 / 2\n    volume = h / 3 * pi * (r1 ** 2 + r2 ** 2 + r1 * r2)\n    return round(volume, 2)", "from math import pi\n\ndef cup_volume(d1: float, d2: float, h: float) -> float:\n    r1 = d1 / 2\n    r2 = d2 / 2\n    volume = pi * h / 3 * (r1 ** 2 + r1 * r2 + r2 ** 2)\n    return round(volume, 2)", "from math import pi\n\ndef cup_volume(d1: float, d2: float, h: float) -> float:\n    r1 = d1 / 2\n    r2 = d2 / 2\n    volume = h / 3 * pi * (r1 ** 2 + r1 * r2 + r2 ** 2)\n    return round(volume, 2)", "from math import pi\n\ndef cup_volume(d1: float, d2: float, h: float) -> float:\n    r1 = d1 / 2\n    r2 = d2 / 2\n    volume = pi * h / 3 * (r1 ** 2 + r1 * r2 + r2 ** 2)\n    return round(volume, 2)", "from math import pi\n\ndef cup_volume(d1: float, d2: float, h: float) -> float:\n    r1 = d1 / 2\n    r2 = d2 / 2\n    volume = pi * h / 3 * (r1 ** 2 + r1 * r2 + r2 ** 2)\n    return round(volume, 2)", "from math import pi\n\ndef cup_volume(d1: float, d2: float, h: float) -> float:\n    r1 = d1 / 2\n    r2 = d2 / 2\n    volume = h / 3 * pi * (r1 ** 2 + r1 * r2 + r2 ** 2)\n    return round(volume, 2)", "from math import pi\n\ndef cup_volume(d1: float, d2: float, h: float) -> float:\n    r1 = d1 / 2\n    r2 = d2 / 2\n    volume = pi * h / 3 * (r1 ** 2 + r1 * r2 + r2 ** 2)\n    return round(volume, 2)", "from math import pi\n\ndef cup_volume(d1: float, d2: float, h: float) -> float:\n    r1 = d1 / 2\n    r2 = d2 / 2\n    volume = pi * h / 3 * (r1 ** 2 + r1 * r2 + r2 ** 2)\n    return round(volume, 2)", "from math import pi\n\ndef cup_volume(d1: float, d2: float, h: float) -> float:\n    r1 = d1 / 2\n    r2 = d2 / 2\n    volume = pi * h / 3 * (r1 ** 2 + r1 * r2 + r2 ** 2)\n    return round(volume, 2)", "from math import pi\n\ndef cup_volume(d1: float, d2: float, h: float) -> float:\n    r1 = d1 / 2\n    r2 = d2 / 2\n    volume = pi * h / 3 * (r1 ** 2 + r1 * r2 + r2 ** 2)\n    return round(volume, 2)", "from math import pi\n\ndef cup_volume(d1: float, d2: float, h: float) -> float:\n    r1 = d1 / 2\n    r2 = d2 / 2\n    volume = h / 3 * pi * (r1 ** 2 + r1 * r2 + r2 ** 2)\n    return round(volume, 2)", "from math import pi\n\ndef cup_volume(d1: float, d2: float, h: float) -> float:\n    r1 = d1 / 2\n    r2 = d2 / 2\n    volume = h / 3 * pi * (r1 ** 2 + r1 * r2 + r2 ** 2)\n    return round(volume, 2)", "from math import pi\n\ndef cup_volume(d1: float, d2: float, h: float) -> float:\n    r1 = d1 / 2\n    r2 = d2 / 2\n    volume = pi * h / 3 * (r1 ** 2 + r1 * r2 + r2 ** 2)\n    return round(volume, 2)", "from math import pi\n\ndef cup_volume(d1: float, d2: float, h: float) -> float:\n    r1 = d1 / 2\n    r2 = d2 / 2\n    volume = h / 3 * pi * (r1 ** 2 + r1 * r2 + r2 ** 2)\n    return round(volume, 2)", "from math import pi\n\ndef cup_volume(d1: float, d2: float, h: float) -> float:\n    r1 = d1 / 2\n    r2 = d2 / 2\n    volume = pi * h / 3 * (r1 ** 2 + r1 * r2 + r2 ** 2)\n    return round(volume, 2)", "from math import pi\n\ndef cup_volume(d1: float, d2: float, h: float) -> float:\n    r1 = d1 / 2\n    r2 = d2 / 2\n    volume = pi * h / 3 * (r1 ** 2 + r1 * r2 + r2 ** 2)\n    return round(volume, 2)", "from math import pi\n\ndef cup_volume(d1: float, d2: float, h: float) -> float:\n    r1 = d1 / 2\n    r2 = d2 / 2\n    volume = pi * h / 3 * (r1 ** 2 + r1 * r2 + r2 ** 2)\n    return round(volume, 2)", "from math import pi\n\ndef cup_volume(d1: float, d2: float, h: float) -> float:\n    r1 = d1 / 2\n    r2 = d2 / 2\n    volume = h / 3 * pi * (r1 ** 2 + r1 * r2 + r2 ** 2)\n    return round(volume, 2)"], "outputs": "[[35.34], [43.98], [0.79], [0.0], [687.22], [785398.16], [98.67], [51.31], [0.08]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[3.0, 3.0, 5.0], [4.0, 2.0, 6.0], [1.0, 1.0, 1.0], [0.1, 0.1, 0.1], [10.0, 5.0, 15.0], [100.0, 100.0, 100.0], [5.5, 2.5, 7.5], [3.0, 5.0, 4.0], [10.0, 10.0, 0.001]]", "input_output_examples": "[[[1, 1, 1], [10, 8, 10], [1000, 1000, 1000], [13.123, 123.12, 1], [5, 12, 31]], [[0.79], [638.79], [785398163.4], [4436.57], [1858.51]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "def thirt(n: int) -> int:\n\"\"\"When you divide the successive powers of `10` by `13` you get the following remainders of the integer divisions:  \n\n`1, 10, 9, 12, 3, 4`. \n\nThen the whole pattern repeats.\n\nHence the following method:\nMultiply the right most digit of the number with the left most number \nin the sequence shown above, the second right most digit to the second \nleft most digit of the number in the sequence. The cycle goes on and you sum all these products. Repeat this process until the sequence of sums is stationary.\n\nFrom now on the sequence is stationary and the remainder of a number by `13` is the same as the stationary number.\n\nCall `thirt` the function which processes this sequence of operations on an integer `n (>=0)`. `thirt` will return the stationary number.\n\"\"\"", "inputs": [[8529], [85299258], [5634], [1111111111], [987654321]], "outputs": [[79], [31], [57], [71], [30]], "starter_code": "def thirt(n: int) -> int:", "canonical_solution": "array = [1, 10, 9, 12, 3, 4]\n\ndef thirt(n):\n    total = sum([int(c) * array[i % 6] for i, c in enumerate(reversed(str(n)))])\n    if n == total:\n        return total\n    return thirt(total)", "entry_point": "thirt", "task_id": "TACO_lite/134", "input_output_examples": "[[[1234567], [321]], [[87], [48]]]", "llm_generated_inputs": "[[8529], [123456789], [0], [13], [987654321], [111111111], [1000000000]]", "clusters": {"cluster_list": [{"programs_str": ["def thirt(n: int) -> int:\n    pattern = [1, 10, 9, 12, 3, 4]\n    while True:\n        new_n = sum((int(digit) * pattern[i % 6] for i, digit in enumerate(reversed(str(n)))))\n        if new_n == n:\n            return n\n        n = new_n", "def thirt(n: int) -> int:\n    pattern = [1, 10, 9, 12, 3, 4]\n    while True:\n        new_n = sum((int(digit) * pattern[i % 6] for i, digit in enumerate(reversed(str(n)))))\n        if new_n == n:\n            return n\n        n = new_n", "def thirt(n: int) -> int:\n    pattern = [1, 10, 9, 12, 3, 4]\n    while True:\n        new_n = sum((int(digit) * pattern[i % 6] for i, digit in enumerate(reversed(str(n)))))\n        if new_n == n:\n            break\n        n = new_n\n    return n", "def thirt(n: int) -> int:\n    pattern = [1, 10, 9, 12, 3, 4]\n    while True:\n        total = 0\n        for i, digit in enumerate(reversed(str(n))):\n            total += int(digit) * pattern[i % len(pattern)]\n        if total == n:\n            break\n        n = total\n    return n", "def thirt(n: int) -> int:\n    pattern = [1, 10, 9, 12, 3, 4]\n    while True:\n        current_sum = sum((int(digit) * pattern[i % len(pattern)] for i, digit in enumerate(reversed(str(n)))))\n        if current_sum == n:\n            break\n        n = current_sum\n    return n", "def thirt(n: int) -> int:\n    pattern = [1, 10, 9, 12, 3, 4]\n    while True:\n        new_n = sum((int(digit) * pattern[i % 6] for i, digit in enumerate(reversed(str(n)))))\n        if new_n == n:\n            break\n        n = new_n\n    return n", "def thirt(n: int) -> int:\n    pattern = [1, 10, 9, 12, 3, 4]\n    while True:\n        current_sum = sum((int(digit) * pattern[i % 6] for i, digit in enumerate(reversed(str(n)))))\n        if current_sum == n:\n            break\n        n = current_sum\n    return n", "def thirt(n: int) -> int:\n    sequence = [1, 10, 9, 12, 3, 4]\n    while True:\n        current_sum = sum((int(digit) * sequence[i % 6] for i, digit in enumerate(reversed(str(n)))))\n        if current_sum == n:\n            break\n        n = current_sum\n    return n", "def thirt(n: int) -> int:\n    pattern = [1, 10, 9, 12, 3, 4]\n    while True:\n        total = sum((int(digit) * pattern[i % 6] for i, digit in enumerate(reversed(str(n)))))\n        if total == n:\n            break\n        n = total\n    return n", "def thirt(n: int) -> int:\n    pattern = [1, 10, 9, 12, 3, 4]\n    while True:\n        current_sum = sum((int(digit) * pattern[i % len(pattern)] for i, digit in enumerate(reversed(str(n)))))\n        if current_sum == n:\n            break\n        n = current_sum\n    return n", "def thirt(n: int) -> int:\n    pattern = [1, 10, 9, 12, 3, 4]\n    while True:\n        total = sum((int(digit) * pattern[i % 6] for i, digit in enumerate(reversed(str(n)))))\n        if total == n:\n            break\n        n = total\n    return n", "def thirt(n: int) -> int:\n    sequence = [1, 10, 9, 12, 3, 4]\n    while True:\n        new_n = sum((int(digit) * sequence[i % 6] for i, digit in enumerate(reversed(str(n)))))\n        if new_n == n:\n            return n\n        n = new_n", "def thirt(n: int) -> int:\n    pattern = [1, 10, 9, 12, 3, 4]\n    while True:\n        new_n = sum((int(digit) * pattern[i % 6] for i, digit in enumerate(reversed(str(n)))))\n        if new_n == n:\n            return n\n        n = new_n", "def thirt(n: int) -> int:\n    sequence = [1, 10, 9, 12, 3, 4]\n    while True:\n        current_sum = sum((int(digit) * sequence[i % 6] for i, digit in enumerate(reversed(str(n)))))\n        if current_sum == n:\n            break\n        n = current_sum\n    return n", "def thirt(n: int) -> int:\n    pattern = [1, 10, 9, 12, 3, 4]\n    while True:\n        new_n = sum((int(digit) * pattern[i % 6] for i, digit in enumerate(reversed(str(n)))))\n        if new_n == n:\n            return n\n        n = new_n", "def thirt(n: int) -> int:\n    sequence = [1, 10, 9, 12, 3, 4]\n    while True:\n        current_sum = sum((int(digit) * sequence[i % 6] for i, digit in enumerate(reversed(str(n)))))\n        if current_sum == n:\n            break\n        n = current_sum\n    return n", "def thirt(n: int) -> int:\n    pattern = [1, 10, 9, 12, 3, 4]\n    while True:\n        current_sum = sum((int(digit) * pattern[i % len(pattern)] for i, digit in enumerate(reversed(str(n)))))\n        if current_sum == n:\n            break\n        n = current_sum\n    return n", "def thirt(n: int) -> int:\n    pattern = [1, 10, 9, 12, 3, 4]\n    while True:\n        new_n = sum((int(digit) * pattern[i % 6] for i, digit in enumerate(reversed(str(n)))))\n        if new_n == n:\n            break\n        n = new_n\n    return n", "def thirt(n: int) -> int:\n    sequence = [1, 10, 9, 12, 3, 4]\n    while True:\n        n_str = str(n)\n        new_n = sum((int(digit) * sequence[i % len(sequence)] for i, digit in enumerate(reversed(n_str))))\n        if new_n == n:\n            break\n        n = new_n\n    return n", "def thirt(n: int) -> int:\n    pattern = [1, 10, 9, 12, 3, 4]\n    while True:\n        new_n = sum((int(digit) * pattern[i % 6] for i, digit in enumerate(reversed(str(n)))))\n        if new_n == n:\n            break\n        n = new_n\n    return n"], "outputs": "[[79], [14], [0], [13], [30], [59], [12]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[8529], [123456789], [0], [13], [987654321], [111111111], [1000000000]]", "input_output_examples": "[[[1234567], [321]], [[87], [48]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "def find_2nd_largest(arr: list) -> int:\n\"\"\"Find the 2nd largest integer in array\nIf the array has no 2nd largest integer then return nil.\nReject all non integers elements and then find the 2nd largest integer in array.\n\nReturn nil if there is no 2nd largest integer.\nTake care of big numbers as well.\n\"\"\"", "inputs": [[[1, 2, 3]], [[1, 1, 1, 1, 1, 1, 1]], [[1, "a", "2", 3, 3, 4, 5, "b"]], [[1, "a", "2", 3, 3, 3333333333333333333334, 544444444444444444444444444444, "b"]]], "outputs": [[2], [null], [4], [3333333333333333333334]], "starter_code": "def find_2nd_largest(arr: list) -> int:", "canonical_solution": "def find_2nd_largest(arr):\n    arr = sorted((i for i in set(arr) if type(i) == int))\n    return arr[-2] if len(arr) > 1 else None", "entry_point": "find_2nd_largest", "task_id": "TACO_lite/138", "input_output_examples": "[[[[1, 2, 3]], [[1, 1, 1, 1, 1]], [[1, 'a', '2', 3, 3, 4, 5, 'b']]], [[2], ['nil'], [4]]]", "llm_generated_inputs": "[[[3, 1, 4, 4, 5]], [[10, 10, 10]], [[1, 2, 3, 4, 5]], [[5, 5, 4, 4, 3, 3, 2, 2, 1, 1]], [[1]], [[]], [[1, 'a', 3.5, 2, 'b', 4]], [[9223372036854775807, 9223372036854775806, 9223372036854775805]], [[0, -1, -2, -3, -4]], [[1000000000, 2000000000, 3000000000]]]", "clusters": {"cluster_list": [{"programs_str": ["def find_2nd_largest(arr: list) -> int:\n    filtered_arr = [x for x in arr if isinstance(x, int)]\n    unique_sorted_arr = sorted(set(filtered_arr), reverse=True)\n    return unique_sorted_arr[1] if len(unique_sorted_arr) > 1 else None", "def find_2nd_largest(arr: list) -> int:\n    filtered_arr = [x for x in arr if isinstance(x, int)]\n    unique_sorted_arr = sorted(set(filtered_arr), reverse=True)\n    return unique_sorted_arr[1] if len(unique_sorted_arr) > 1 else None", "def find_2nd_largest(arr: list) -> int:\n    filtered = [x for x in arr if isinstance(x, int)]\n    unique_sorted = sorted(set(filtered), reverse=True)\n    return unique_sorted[1] if len(unique_sorted) > 1 else None", "def find_2nd_largest(arr: list) -> int:\n    filtered = [x for x in arr if isinstance(x, int)]\n    unique_sorted = sorted(set(filtered), reverse=True)\n    return unique_sorted[1] if len(unique_sorted) > 1 else None", "def find_2nd_largest(arr: list) -> int:\n    filtered_arr = [x for x in arr if isinstance(x, int)]\n    unique_sorted_arr = sorted(set(filtered_arr), reverse=True)\n    return unique_sorted_arr[1] if len(unique_sorted_arr) > 1 else None", "def find_2nd_largest(arr: list) -> int:\n    filtered = [x for x in arr if isinstance(x, int)]\n    unique_sorted = sorted(set(filtered), reverse=True)\n    return unique_sorted[1] if len(unique_sorted) > 1 else None", "def find_2nd_largest(arr: list) -> int:\n    filtered = [x for x in arr if isinstance(x, int)]\n    unique_sorted = sorted(set(filtered), reverse=True)\n    return unique_sorted[1] if len(unique_sorted) > 1 else None", "def find_2nd_largest(arr: list) -> int:\n    filtered_arr = [x for x in arr if isinstance(x, int)]\n    unique_sorted_arr = sorted(set(filtered_arr), reverse=True)\n    return unique_sorted_arr[1] if len(unique_sorted_arr) > 1 else None", "def find_2nd_largest(arr: list) -> int:\n    filtered_arr = [x for x in arr if isinstance(x, int)]\n    unique_sorted_arr = sorted(set(filtered_arr), reverse=True)\n    return unique_sorted_arr[1] if len(unique_sorted_arr) > 1 else None", "def find_2nd_largest(arr: list) -> int:\n    filtered_arr = [x for x in arr if isinstance(x, int)]\n    unique_sorted_arr = sorted(set(filtered_arr), reverse=True)\n    return unique_sorted_arr[1] if len(unique_sorted_arr) > 1 else None", "def find_2nd_largest(arr: list) -> int:\n    filtered_arr = [x for x in arr if isinstance(x, int)]\n    unique_sorted_arr = sorted(set(filtered_arr), reverse=True)\n    return unique_sorted_arr[1] if len(unique_sorted_arr) > 1 else None", "def find_2nd_largest(arr: list) -> int:\n    filtered = [x for x in arr if isinstance(x, int)]\n    unique_sorted = sorted(set(filtered), reverse=True)\n    return unique_sorted[1] if len(unique_sorted) > 1 else None", "def find_2nd_largest(arr: list) -> int:\n    filtered = [x for x in arr if isinstance(x, int)]\n    unique_sorted = sorted(set(filtered), reverse=True)\n    return unique_sorted[1] if len(unique_sorted) > 1 else None", "def find_2nd_largest(arr: list) -> int:\n    filtered_arr = [x for x in arr if isinstance(x, int)]\n    unique_sorted_arr = sorted(set(filtered_arr), reverse=True)\n    return unique_sorted_arr[1] if len(unique_sorted_arr) > 1 else None", "def find_2nd_largest(arr: list) -> int:\n    filtered = [x for x in arr if isinstance(x, int)]\n    unique_sorted = sorted(set(filtered), reverse=True)\n    return unique_sorted[1] if len(unique_sorted) > 1 else None", "def find_2nd_largest(arr: list) -> int:\n    filtered_arr = [x for x in arr if isinstance(x, int)]\n    unique_sorted_arr = sorted(set(filtered_arr), reverse=True)\n    return unique_sorted_arr[1] if len(unique_sorted_arr) > 1 else None", "def find_2nd_largest(arr: list) -> int:\n    filtered_arr = [x for x in arr if isinstance(x, int)]\n    unique_sorted_arr = sorted(set(filtered_arr), reverse=True)\n    return unique_sorted_arr[1] if len(unique_sorted_arr) > 1 else None", "def find_2nd_largest(arr: list) -> int:\n    filtered = [x for x in arr if isinstance(x, int)]\n    unique_sorted = sorted(set(filtered), reverse=True)\n    return unique_sorted[1] if len(unique_sorted) > 1 else None", "def find_2nd_largest(arr: list) -> int:\n    filtered_arr = [x for x in arr if isinstance(x, int)]\n    unique_sorted_arr = sorted(set(filtered_arr), reverse=True)\n    return unique_sorted_arr[1] if len(unique_sorted_arr) > 1 else None", "def find_2nd_largest(arr: list) -> int:\n    filtered_arr = [x for x in arr if isinstance(x, int)]\n    unique_sorted_arr = sorted(set(filtered_arr), reverse=True)\n    return unique_sorted_arr[1] if len(unique_sorted_arr) > 1 else None"], "outputs": "[[4], [None], [4], [4], [None], [None], [2], [9223372036854775806], [-1], [2000000000]]", "probability": 1.0, "is_align_req": false, "test_consistency": 0.6666666666666667, "failed_input_output_examples": "[[[[1, 1, 1, 1, 1]], [None], ['nil']]]"}], "entropy": 0, "llm_generated_inputs": "[[[3, 1, 4, 4, 5]], [[10, 10, 10]], [[1, 2, 3, 4, 5]], [[5, 5, 4, 4, 3, 3, 2, 2, 1, 1]], [[1]], [[]], [[1, 'a', 3.5, 2, 'b', 4]], [[9223372036854775807, 9223372036854775806, 9223372036854775805]], [[0, -1, -2, -3, -4]], [[1000000000, 2000000000, 3000000000]]]", "input_output_examples": "[[[[1, 2, 3]], [[1, 1, 1, 1, 1]], [[1, 'a', '2', 3, 3, 4, 5, 'b']]], [[2], ['nil'], [4]]]", "weighted_test_consistency": 0.6666666666666667, "at_least_one_align": false, "ambiguity": 0.16666666666666663}}
{"requirement": "def tv_remote(words: str) -> int:\n\"\"\"# Background\n\nMy TV remote control has arrow buttons and an `OK` button.\n\nI can use these to move a \"cursor\" on a logical screen keyboard to type words...\n\n# Keyboard\n\nThe screen \"keyboard\" layout looks like this\n\n\n  #tvkb {\n    width : 400px;\n    border: 5px solid gray; border-collapse: collapse;\n  }\n  #tvkb td {\n    color : orange;\n    background-color : black;\n    text-align : center;\n    border: 3px solid gray; border-collapse: collapse;\n  }\n\n\nabcde123\nfghij456\nklmno789\npqrst.@0\nuvwxyz_/\naASP\n\n\n\n* `aA` is the SHIFT key. Pressing this key toggles alpha characters between UPPERCASE and lowercase\n* `SP` is the space character\n* The other blank keys in the bottom row have no function\n\n# Kata task\n\nHow many button presses on my remote are required to type the given `words`?\n\n## Notes\n\n* The cursor always starts on the letter `a` (top left)\n* The alpha characters are initially lowercase (as shown above)\n* Remember to also press `OK` to \"accept\" each letter\n* Take a direct route from one letter to the next\n\n\n* The cursor does not wrap (e.g. you cannot leave one edge and reappear on the opposite edge)\n* Although the blank keys have no function, you may navigate through them if you want to\n* Spaces may occur anywhere in the `words` string.\n* Do not press the SHIFT key until you need to.\n \n*Good Luck!\nDM.*\n\n\n\nSeries\n* TV Remote\n* TV Remote (shift and space)\n* TV Remote (wrap)\n* TV Remote (symbols)\n\"\"\"", "inputs": [["Code Wars"], ["does"], ["your"], ["solution"], ["work"], ["for"], ["these"], ["words"], ["DOES"], ["YOUR"], ["SOLUTION"], ["WORK"], ["FOR"], ["THESE"], ["WORDS"], ["Does"], ["Your"], ["Solution"], ["Work"], ["For"], ["These"], ["Words"], ["A"], ["AADVARKS"], ["A/A/A/A/"], ["1234567890"], ["MISSISSIPPI"], ["a"], ["aadvarks"], ["a/a/a/a/"], ["mississippi"], ["Xoo ooo ooo"], ["oXo ooo ooo"], ["ooX ooo ooo"], ["ooo Xoo ooo"], ["ooo oXo ooo"], ["ooo ooX ooo"], ["ooo ooo Xoo"], ["ooo ooo oXo"], ["ooo ooo ooX"], ["The Quick Brown Fox Jumps Over A Lazy Dog."], ["Pack My Box With Five Dozen Liquor Jugs."], [""], [" "], ["   "], ["    x   X    "]], "outputs": [[69], [16], [23], [33], [20], [12], [27], [25], [27], [26], [38], [23], [21], [32], [28], [40], [37], [49], [30], [28], [41], [35], [12], [45], [96], [28], [42], [1], [34], [85], [35], [57], [65], [53], [53], [65], [53], [53], [65], [53], [306], [290], [0], [7], [9], [34]], "starter_code": "def tv_remote(words: str) -> int:", "canonical_solution": "import re\nKEYBOARD = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/* '\nMAP = {c: (i // 8, i % 8) for i, c in enumerate(KEYBOARD)}\n\ndef manhattan(*pts):\n    return 1 + sum((abs(z2 - z1) for z1, z2 in zip(*pts)))\n\ndef toggle(m):\n    ups, end = (m.group(1), m.group(2))\n    off = '*' * bool(end)\n    return f'*{ups.lower()}{off}{end}'\n\ndef tv_remote(words):\n    reWords = re.sub('([A-Z][^a-z]*)([a-z]?)', toggle, words)\n    return sum((manhattan(MAP[was], MAP[curr]) for was, curr in zip('a' + reWords, reWords)))", "entry_point": "tv_remote", "task_id": "TACO_lite/145", "input_output_examples": "[[['Code Wars']], [[69]]]", "llm_generated_inputs": "[['a'], ['b'], ['z'], ['A'], [' '], ['abc'], ['ABC'], ['aBc'], ['hello world'], ['HELLO WORLD'], ['Shift'], ['123'], ['@.'], ['_/'], ['abcdefghijklmnopqrstuvwxyz'], ['ABCDEFGHIJKLMNOPQRSTUVWXYZ'], ['1234567890'], ['!@#$%^&*()'], ['aAaAaA'], ['____________________']]", "clusters": {"cluster_list": [{"programs_str": ["def tv_remote(words: str) -> int:\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/', 'aASP']\n\n    def find_position(char):\n        for i, row in enumerate(keyboard):\n            if char in row:\n                return (i, row.index(char))\n        return None\n    current_pos = (0, 0)\n    total_presses = 0\n    shift_pressed = False\n    for char in words:\n        target_char = char.upper() if shift_pressed else char.lower()\n        if target_char not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.@_ /':\n            continue\n        if char.isupper() != shift_pressed:\n            shift_pos = find_position('A')\n            total_presses += abs(shift_pos[0] - current_pos[0]) + abs(shift_pos[1] - current_pos[1]) + 1\n            current_pos = shift_pos\n            shift_pressed = not shift_pressed\n            target_char = char.lower() if shift_pressed else char.upper()\n        target_pos = find_position(target_char)\n        total_presses += abs(target_pos[0] - current_pos[0]) + abs(target_pos[1] - current_pos[1]) + 1\n        current_pos = target_pos\n    return total_presses"], "outputs": "[[1], [2], [10], [14], ['TypeError'], [5], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], [10], [12], [13], [67], ['TypeError'], [28], [10], [47], [30]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['Code Wars'], ['TypeError'], [69]]]"}, {"programs_str": ["def tv_remote(words: str) -> int:\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/', 'aASP']\n\n    def find_position(char):\n        for i, row in enumerate(keyboard):\n            if char in row:\n                return (i, row.index(char))\n        return None\n    current_pos = (0, 0)\n    total_presses = 0\n    shift_pressed = False\n    for char in words:\n        if char == ' ':\n            target_pos = find_position('SP')\n        elif char.isupper():\n            if not shift_pressed:\n                shift_pos = find_position('A')\n                total_presses += abs(shift_pos[0] - current_pos[0]) + abs(shift_pos[1] - current_pos[1]) + 1\n                current_pos = shift_pos\n                shift_pressed = True\n            target_pos = find_position(char.lower())\n        else:\n            if shift_pressed:\n                shift_pos = find_position('A')\n                total_presses += abs(shift_pos[0] - current_pos[0]) + abs(shift_pos[1] - current_pos[1]) + 1\n                current_pos = shift_pos\n                shift_pressed = False\n            target_pos = find_position(char)\n        total_presses += abs(target_pos[0] - current_pos[0]) + abs(target_pos[1] - current_pos[1]) + 1\n        current_pos = target_pos\n    return total_presses", "def tv_remote(words: str) -> int:\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/', 'aASP']\n    pos = (0, 0)\n    total_presses = 0\n    shift_pressed = False\n\n    def get_position(char):\n        for i, row in enumerate(keyboard):\n            if char in row:\n                return (i, row.index(char))\n        return None\n    for char in words:\n        if char == ' ':\n            target_pos = get_position('SP')\n        else:\n            target_pos = get_position(char.lower())\n            if char.isupper() and (not shift_pressed):\n                shift_pos = get_position('A')\n                total_presses += abs(shift_pos[0] - pos[0]) + abs(shift_pos[1] - pos[1]) + 1\n                pos = shift_pos\n                shift_pressed = True\n            elif char.islower() and shift_pressed:\n                shift_pos = get_position('A')\n                total_presses += abs(shift_pos[0] - pos[0]) + abs(shift_pos[1] - pos[1]) + 1\n                pos = shift_pos\n                shift_pressed = False\n        total_presses += abs(target_pos[0] - pos[0]) + abs(target_pos[1] - pos[1]) + 1\n        pos = target_pos\n    return total_presses"], "outputs": "[[1], [2], [10], [14], [8], [5], [18], [27], [44], [53], [36], [10], [12], [13], [67], [80], [28], ['TypeError'], [71], [30]]", "probability": 0.1, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['Code Wars'], [65], [69]]]"}, {"programs_str": ["def tv_remote(words: str) -> int:\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/', 'aASP']\n\n    def find_position(char):\n        for i, row in enumerate(keyboard):\n            if char in row:\n                return (i, row.index(char))\n        return None\n    current_pos = (0, 0)\n    total_presses = 0\n    shift_pressed = False\n    for char in words:\n        target_char = char.lower()\n        if char.isupper():\n            if not shift_pressed:\n                shift_pos = find_position('A')\n                total_presses += abs(shift_pos[0] - current_pos[0]) + abs(shift_pos[1] - current_pos[1]) + 1\n                current_pos = shift_pos\n                shift_pressed = True\n        elif shift_pressed:\n            shift_pos = find_position('A')\n            total_presses += abs(shift_pos[0] - current_pos[0]) + abs(shift_pos[1] - current_pos[1]) + 1\n            current_pos = shift_pos\n            shift_pressed = False\n        target_pos = find_position(target_char)\n        total_presses += abs(target_pos[0] - current_pos[0]) + abs(target_pos[1] - current_pos[1]) + 1\n        current_pos = target_pos\n    return total_presses", "def tv_remote(words: str) -> int:\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/', 'aASP']\n\n    def find_position(char):\n        for i, row in enumerate(keyboard):\n            if char in row:\n                return (i, row.index(char))\n        return None\n    current_pos = (0, 0)\n    total_presses = 0\n    shift_pressed = False\n    for char in words:\n        target_char = char.lower()\n        if char.isupper():\n            if not shift_pressed:\n                shift_pos = find_position('A')\n                total_presses += abs(shift_pos[0] - current_pos[0]) + abs(shift_pos[1] - current_pos[1]) + 1\n                current_pos = shift_pos\n                shift_pressed = True\n        elif shift_pressed:\n            shift_pos = find_position('A')\n            total_presses += abs(shift_pos[0] - current_pos[0]) + abs(shift_pos[1] - current_pos[1]) + 1\n            current_pos = shift_pos\n            shift_pressed = False\n        target_pos = find_position(target_char)\n        total_presses += abs(target_pos[0] - current_pos[0]) + abs(target_pos[1] - current_pos[1]) + 1\n        current_pos = target_pos\n    return total_presses"], "outputs": "[[1], [2], [10], [14], ['TypeError'], [5], [18], [27], ['TypeError'], ['TypeError'], [36], [10], [12], [13], [67], [80], [28], ['TypeError'], [71], [30]]", "probability": 0.1, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['Code Wars'], ['TypeError'], [69]]]"}, {"programs_str": ["def tv_remote(words: str) -> int:\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/']\n    shift_key = 'aA'\n    current_position = (0, 0)\n    total_presses = 0\n    is_upper = False\n\n    def find_char_position(char):\n        for i, row in enumerate(keyboard):\n            if char in row:\n                return (i, row.index(char))\n        return None\n    for char in words:\n        if char == ' ':\n            target_position = find_char_position('SP')\n        else:\n            target_char = char.upper() if is_upper else char.lower()\n            target_position = find_char_position(target_char)\n        if target_position is None:\n            continue\n        row_diff = abs(target_position[0] - current_position[0])\n        col_diff = abs(target_position[1] - current_position[1])\n        total_presses += row_diff + col_diff + 1\n        if char.isalpha() and char.isupper() != is_upper:\n            total_presses += 1\n            is_upper = not is_upper\n        current_position = target_position\n    return total_presses"], "outputs": "[[1], [2], [10], [2], [0], [5], [2], [4], [41], [5], [8], [10], [12], [13], [67], [2], [28], [10], [3], [30]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['Code Wars'], [4], [69]]]"}, {"programs_str": ["def tv_remote(words: str) -> int:\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/', 'aASP']\n    pos = (0, 0)\n    total_presses = 0\n    shift_on = False\n\n    def find_char(c):\n        for i, row in enumerate(keyboard):\n            for j, char in enumerate(row):\n                if char == c:\n                    return (i, j)\n        return None\n    for char in words:\n        if char.isupper() != shift_on:\n            shift_pos = find_char('A' if shift_on else 'a')\n            total_presses += abs(shift_pos[0] - pos[0]) + abs(shift_pos[1] - pos[1]) + 1\n            pos = shift_pos\n            shift_on = not shift_on\n        target_pos = find_char(char.lower())\n        total_presses += abs(target_pos[0] - pos[0]) + abs(target_pos[1] - pos[1]) + 1\n        pos = target_pos\n    return total_presses", "def tv_remote(words: str) -> int:\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/', 'aASP']\n    pos = (0, 0)\n    shift_pressed = False\n    total_presses = 0\n\n    def find_char(c):\n        for i, row in enumerate(keyboard):\n            if c in row:\n                return (i, row.index(c))\n        return None\n    for char in words:\n        if char.isalpha():\n            target_shift = char.isupper()\n            if target_shift != shift_pressed:\n                shift_pos = find_char('A' if shift_pressed else 'a')\n                total_presses += abs(pos[0] - shift_pos[0]) + abs(pos[1] - shift_pos[1]) + 1\n                pos = shift_pos\n                shift_pressed = not shift_pressed\n        target_pos = find_char(char.lower())\n        total_presses += abs(pos[0] - target_pos[0]) + abs(pos[1] - target_pos[1]) + 1\n        pos = target_pos\n    return total_presses"], "outputs": "[[1], [2], [10], [2], ['TypeError'], [5], [6], [17], ['TypeError'], ['TypeError'], [32], [10], [12], [13], [67], [68], [28], ['TypeError'], [35], [30]]", "probability": 0.1, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['Code Wars'], ['TypeError'], [69]]]"}, {"programs_str": ["def tv_remote(words: str) -> int:\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/', 'aASP']\n    pos = (0, 0)\n    total_presses = 0\n    shift_on = False\n\n    def find_char(c):\n        for i, row in enumerate(keyboard):\n            for j, char in enumerate(row):\n                if char == c:\n                    return (i, j)\n        return None\n    for char in words:\n        if char == ' ':\n            target_pos = find_char('SP')\n        else:\n            target_pos = find_char(char.lower())\n            if char.isupper() and (not shift_on):\n                shift_pos = find_char('aA')\n                total_presses += abs(shift_pos[0] - pos[0]) + abs(shift_pos[1] - pos[1]) + 1\n                pos = shift_pos\n                shift_on = True\n            elif char.islower() and shift_on:\n                shift_pos = find_char('aA')\n                total_presses += abs(shift_pos[0] - pos[0]) + abs(shift_pos[1] - pos[1]) + 1\n                pos = shift_pos\n                shift_on = False\n        total_presses += abs(target_pos[0] - pos[0]) + abs(target_pos[1] - pos[1]) + 1\n        pos = target_pos\n    return total_presses", "def tv_remote(words: str) -> int:\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/']\n    position = (0, 0)\n    shift_pressed = False\n    total_presses = 0\n\n    def get_position(char):\n        for i, row in enumerate(keyboard):\n            for j, c in enumerate(row):\n                if c == char:\n                    return (i, j)\n        return None\n\n    def calculate_moves(from_pos, to_pos):\n        return abs(from_pos[0] - to_pos[0]) + abs(from_pos[1] - to_pos[1])\n    for char in words:\n        if char.isalpha():\n            if char.isupper() != shift_pressed:\n                shift_pos = get_position('aA')\n                total_presses += calculate_moves(position, shift_pos) + 1\n                position = shift_pos\n                shift_pressed = not shift_pressed\n            target_pos = get_position(char.lower())\n        elif char == ' ':\n            target_pos = get_position('SP')\n        else:\n            target_pos = get_position(char)\n        total_presses += calculate_moves(position, target_pos) + 1\n        position = target_pos\n    return total_presses", "def tv_remote(words: str) -> int:\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/']\n    position = (0, 0)\n    shift_pressed = False\n    total_presses = 0\n\n    def find_char(char):\n        for i, row in enumerate(keyboard):\n            if char in row:\n                return (i, row.index(char))\n        return None\n    for char in words:\n        target = find_char(char.lower())\n        if char.isupper() and (not shift_pressed):\n            shift_pos = find_char('aA')\n            total_presses += abs(shift_pos[0] - position[0]) + abs(shift_pos[1] - position[1]) + 1\n            position = shift_pos\n            shift_pressed = True\n        elif char.islower() and shift_pressed:\n            shift_pos = find_char('aA')\n            total_presses += abs(shift_pos[0] - position[0]) + abs(shift_pos[1] - position[1]) + 1\n            position = shift_pos\n            shift_pressed = False\n        total_presses += abs(target[0] - position[0]) + abs(target[1] - position[1]) + 1\n        position = target\n    return total_presses"], "outputs": "[[1], [2], [10], ['TypeError'], ['TypeError'], [5], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], [10], [12], [13], [67], ['TypeError'], [28], ['TypeError'], ['TypeError'], [30]]", "probability": 0.15, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['Code Wars'], ['TypeError'], [69]]]"}, {"programs_str": ["def tv_remote(words: str) -> int:\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/', 'aASP']\n\n    def find_position(char):\n        for i, row in enumerate(keyboard):\n            if char in row:\n                return (i, row.index(char))\n        return None\n    current_pos = (0, 0)\n    total_presses = 0\n    shift_on = False\n    for char in words:\n        if char == ' ':\n            target_pos = find_position('SP')\n        else:\n            target_pos = find_position(char.lower())\n        if char.isupper() and (not shift_on):\n            shift_pos = find_position('aA')\n            total_presses += abs(shift_pos[0] - current_pos[0]) + abs(shift_pos[1] - current_pos[1]) + 1\n            current_pos = shift_pos\n            shift_on = True\n        total_presses += abs(target_pos[0] - current_pos[0]) + abs(target_pos[1] - current_pos[1]) + 1\n        current_pos = target_pos\n        if char.islower() and shift_on:\n            shift_on = False\n    return total_presses"], "outputs": "[[1], [2], [10], [12], [8], [5], [16], [16], [44], [53], [29], [10], [12], [13], [67], [78], [28], ['TypeError'], [39], [30]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['Code Wars'], [55], [69]]]"}, {"programs_str": ["def tv_remote(words: str) -> int:\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/', 'aASP']\n    pos = (0, 0)\n    shift_pressed = False\n    total_presses = 0\n\n    def get_position(char):\n        for i, row in enumerate(keyboard):\n            if char in row:\n                return (i, row.index(char))\n        return None\n    for char in words:\n        target_pos = get_position(char.lower())\n        if not target_pos:\n            continue\n        if char.isupper() and (not shift_pressed):\n            shift_pos = get_position('a')\n            total_presses += abs(shift_pos[0] - pos[0]) + abs(shift_pos[1] - pos[1]) + 1\n            pos = shift_pos\n            shift_pressed = True\n        elif char.islower() and shift_pressed:\n            shift_pos = get_position('a')\n            total_presses += abs(shift_pos[0] - pos[0]) + abs(shift_pos[1] - pos[1]) + 1\n            pos = shift_pos\n            shift_pressed = False\n        total_presses += abs(target_pos[0] - pos[0]) + abs(target_pos[1] - pos[1]) + 1\n        pos = target_pos\n    return total_presses"], "outputs": "[[1], [2], [10], [2], [0], [5], [6], [9], [41], [42], [32], [10], [12], [13], [67], [68], [28], [10], [11], [30]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['Code Wars'], [48], [69]]]"}, {"programs_str": ["def tv_remote(words: str) -> int:\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/', 'aASP']\n    pos = (0, 0)\n    shift_pressed = False\n    total_presses = 0\n\n    def find_char(c):\n        for i, row in enumerate(keyboard):\n            for j, char in enumerate(row):\n                if char == c:\n                    return (i, j)\n        return None\n    for char in words:\n        target_pos = find_char(char.lower() if shift_pressed else char.upper() if char.isalpha() else char)\n        if not target_pos:\n            target_pos = find_char(char.upper() if shift_pressed else char.lower())\n            total_presses += 1\n            shift_pressed = not shift_pressed\n        dx = abs(target_pos[1] - pos[1])\n        dy = abs(target_pos[0] - pos[0])\n        total_presses += dx + dy + 1\n        pos = target_pos\n    return total_presses"], "outputs": "[[7], [3], [11], [7], ['TypeError'], [16], [16], [16], ['TypeError'], ['TypeError'], [27], [10], [12], [13], [78], [78], [28], ['TypeError'], [12], [30]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['Code Wars'], ['TypeError'], [69]]]"}, {"programs_str": ["def tv_remote(words: str) -> int:\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/', 'aASP']\n    pos = (0, 0)\n    shift_pressed = False\n    total_presses = 0\n\n    def find_char(c):\n        for i, row in enumerate(keyboard):\n            if c in row:\n                return (i, row.index(c))\n        return None\n    for char in words:\n        target_pos = find_char(char.lower())\n        if not target_pos:\n            continue\n        if char.isupper() and (not shift_pressed):\n            shift_pos = find_char('A')\n            total_presses += abs(shift_pos[0] - pos[0]) + abs(shift_pos[1] - pos[1]) + 1\n            pos = shift_pos\n            shift_pressed = True\n        total_presses += abs(target_pos[0] - pos[0]) + abs(target_pos[1] - pos[1]) + 1\n        pos = target_pos\n        if char.islower() and shift_pressed:\n            shift_pressed = False\n    return total_presses", "def tv_remote(words: str) -> int:\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/', 'aASP']\n\n    def find_char_position(char):\n        for i, row in enumerate(keyboard):\n            if char in row:\n                return (i, row.index(char))\n        return None\n    current_pos = (0, 0)\n    total_presses = 0\n    shift_pressed = False\n    for char in words:\n        target_pos = find_char_position(char.lower())\n        if not target_pos:\n            continue\n        if char.isupper() and (not shift_pressed):\n            shift_pos = find_char_position('A')\n            total_presses += abs(shift_pos[0] - current_pos[0]) + abs(shift_pos[1] - current_pos[1]) + 1\n            current_pos = shift_pos\n            shift_pressed = True\n        total_presses += abs(target_pos[0] - current_pos[0]) + abs(target_pos[1] - current_pos[1]) + 1\n        current_pos = target_pos\n        if char.islower() and shift_pressed:\n            shift_pressed = False\n    return total_presses"], "outputs": "[[1], [2], [10], [14], [0], [5], [18], [16], [41], [50], [29], [10], [12], [13], [67], [80], [28], [10], [45], [30]]", "probability": 0.1, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['Code Wars'], [52], [69]]]"}, {"programs_str": ["def tv_remote(words: str) -> int:\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/', 'aASP']\n\n    def find_position(char):\n        for i, row in enumerate(keyboard):\n            if char in row:\n                return (i, row.index(char))\n        return None\n    current_pos = (0, 0)\n    total_presses = 0\n    shift_pressed = False\n    for char in words:\n        if char.isalpha():\n            target_char = char.lower() if not shift_pressed else char.upper()\n        else:\n            target_char = char\n        target_pos = find_position(target_char)\n        if target_char != char and (not shift_pressed):\n            shift_pos = find_position('A')\n            total_presses += abs(shift_pos[0] - current_pos[0]) + abs(shift_pos[1] - current_pos[1]) + 1\n            current_pos = shift_pos\n            shift_pressed = True\n        total_presses += abs(target_pos[0] - current_pos[0]) + abs(target_pos[1] - current_pos[1]) + 1\n        current_pos = target_pos\n        if char.isalpha() and shift_pressed:\n            shift_pos = find_position('A')\n            total_presses += abs(shift_pos[0] - current_pos[0]) + abs(shift_pos[1] - current_pos[1]) + 1\n            current_pos = shift_pos\n            shift_pressed = False\n    return total_presses"], "outputs": "[[1], [2], [10], [21], ['TypeError'], [5], [49], [27], ['TypeError'], ['TypeError'], [36], [10], [12], [13], [67], [314], [28], ['TypeError'], [78], [30]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['Code Wars'], ['TypeError'], [69]]]"}, {"programs_str": ["def tv_remote(words: str) -> int:\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/', 'aASP']\n\n    def find_char_position(char):\n        for i, row in enumerate(keyboard):\n            if char in row:\n                return (i, row.index(char))\n        return None\n    current_position = (0, 0)\n    total_presses = 0\n    shift_pressed = False\n    for char in words:\n        target_char = char.lower() if not shift_pressed else char.upper()\n        if target_char == char and shift_pressed:\n            shift_pressed = False\n            total_presses += 1\n        if target_char != char and (not shift_pressed):\n            shift_pressed = True\n            total_presses += 1\n        target_position = find_char_position(target_char)\n        if target_position:\n            row_diff = abs(target_position[0] - current_position[0])\n            col_diff = abs(target_position[1] - current_position[1])\n            total_presses += row_diff + col_diff + 1\n            current_position = target_position\n    return total_presses"], "outputs": "[[1], [2], [10], [2], [0], [5], [7], [4], [41], [34], [8], [10], [12], [13], [67], [76], [28], [10], [21], [30]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['Code Wars'], [16], [69]]]"}, {"programs_str": ["def tv_remote(words: str) -> int:\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/', 'aASP']\n    pos = (0, 0)\n    total_presses = 0\n    shift_pressed = False\n\n    def find_char(c):\n        for i, row in enumerate(keyboard):\n            for j, char in enumerate(row):\n                if char == c:\n                    return (i, j)\n        return None\n    for char in words:\n        target_pos = find_char(char.lower())\n        if not target_pos:\n            continue\n        if char.isupper() and (not shift_pressed):\n            shift_pos = find_char('a')\n            total_presses += abs(shift_pos[0] - pos[0]) + abs(shift_pos[1] - pos[1]) + 1\n            pos = shift_pos\n            shift_pressed = True\n        total_presses += abs(target_pos[0] - pos[0]) + abs(target_pos[1] - pos[1]) + 1\n        pos = target_pos\n        if char.islower() and shift_pressed:\n            shift_pressed = False\n    return total_presses"], "outputs": "[[1], [2], [10], [2], [0], [5], [6], [6], [41], [42], [25], [10], [12], [13], [67], [68], [28], [10], [9], [30]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['Code Wars'], [42], [69]]]"}, {"programs_str": ["def tv_remote(words: str) -> int:\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/', 'aASP']\n    pos = (0, 0)\n    total_presses = 0\n    shift_on = False\n\n    def find_char_position(char):\n        for i, row in enumerate(keyboard):\n            if char in row:\n                return (i, row.index(char))\n        return None\n    for char in words:\n        if char == ' ':\n            target_pos = find_char_position('SP')\n        else:\n            target_pos = find_char_position(char.lower())\n        if not target_pos:\n            continue\n        dx = target_pos[1] - pos[1]\n        dy = target_pos[0] - pos[0]\n        if char.isupper() and (not shift_on):\n            total_presses += 1\n            shift_on = True\n        if char.islower() and shift_on:\n            total_presses += 1\n            shift_on = False\n        total_presses += abs(dx) + abs(dy) + 1\n        pos = target_pos\n    return total_presses"], "outputs": "[[1], [2], [10], [2], [8], [5], [6], [7], [44], [45], [26], [10], [12], [13], [67], [68], [28], [10], [11], [30]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['Code Wars'], [43], [69]]]"}], "entropy": 0.9676491409916022, "llm_generated_inputs": "[['a'], ['b'], ['z'], ['A'], [' '], ['abc'], ['ABC'], ['aBc'], ['hello world'], ['HELLO WORLD'], ['Shift'], ['123'], ['@.'], ['_/'], ['abcdefghijklmnopqrstuvwxyz'], ['ABCDEFGHIJKLMNOPQRSTUVWXYZ'], ['1234567890'], ['!@#$%^&*()'], ['aAaAaA'], ['____________________']]", "input_output_examples": "[[['Code Wars']], [[69]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false, "ambiguity": 0.9838245704958011}}
{"requirement": "def which_note(count: int) -> str:\n\"\"\"You're continuing to enjoy your new piano, as described in Piano Kata, Part 1. You're also continuing the exercise where you start on the very first (leftmost, lowest in pitch) key on the 88-key keyboard, which (as shown below) is the note A, with the little finger on your left hand, then the second key, which is the black key A# (\"A sharp\"), with your left ring finger, then the third key, B, with your left middle finger, then the fourth key, C, with your left index finger, and then the fifth key, C#, with your left thumb. Then you play the sixth key, D, with your right thumb, and continue on playing the seventh, eighth, ninth, and tenth keys with the other four fingers of your right hand. Then for the eleventh key you go back to your left little finger, and so on. Once you get to the rightmost/highest, 88th, key, C, you start all over again with your left little finger on the first key. \n\n(If the Codewars Instructions pane resizes the above piano keyboard image to be too small to read the note labels of the black/sharp keys on your screen, click here to open a copy of the image in a new tab or window.)\n\nThis time, in addition to counting each key press out loud (not starting again at 1 after 88, but continuing on to 89 and so forth) to try to keep a steady rhythm going and to see how far you can get before messing up, you're also saying the name of each note. You wonder whether this may help you develop perfect pitch in addition to learning to just *know* which note is which, and -- as in Piano Kata, Part 1 -- helping you to learn to move smoothly and with uniform pressure on the keys from each finger to the next and back and forth between hands.\n\nThe function you are going to write will explore one of the patterns you're experiencing in your practice: Given the number you stopped on, which note was it?\n\nYour function will receive an integer between 1 and 10000 (maybe you think that in principle it would be cool to count up to, say, a billion, but considering how many years it would take it is just not possible) and return one of the strings \"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", or \"G#\" indicating which note you stopped on.\nHave fun!\n\"\"\"", "inputs": [[1], [5], [12], [42], [88], [89], [92], [100], [111], [200], [2017]], "outputs": [["A"], ["C#"], ["G#"], ["D"], ["C"], ["A"], ["C"], ["G#"], ["G"], ["G#"], ["F"]], "starter_code": "def which_note(count: int) -> str:", "canonical_solution": "def which_note(count):\n    return 'A A# B C C# D D# E F F# G G#'.split()[(count - 1) % 88 % 12]", "entry_point": "which_note", "task_id": "TACO_lite/148", "input_output_examples": "[[[1], [12], [42], [100], [2017]], [['A'], ['G#'], ['D'], ['G#'], ['F']]]", "llm_generated_inputs": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [88], [89], [100], [1000], [10000], [54], [72]]", "clusters": {"cluster_list": [{"programs_str": ["def which_note(count: int) -> str:\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return notes[(count - 1) % 88 % 12]", "def which_note(count: int) -> str:\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return notes[(count - 1) % 88 % 12]", "def which_note(count: int) -> str:\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return notes[(count - 1) % 88 % 12]", "def which_note(count: int) -> str:\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return notes[(count - 1) % 88 % 12]", "def which_note(count: int) -> str:\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return notes[(count - 1) % 88 % 12]", "def which_note(count: int) -> str:\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return notes[(count - 1) % 88 % 12]", "def which_note(count: int) -> str:\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return notes[(count - 1) % 88 % 12]", "def which_note(count: int) -> str:\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return notes[(count - 1) % 88 % 12]", "def which_note(count: int) -> str:\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return notes[(count - 1) % 88 % 12]", "def which_note(count: int) -> str:\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return notes[(count - 1) % 88 % 12]", "def which_note(count: int) -> str:\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return notes[(count - 1) % 88 % 12]", "def which_note(count: int) -> str:\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return notes[(count - 1) % 88 % 12]", "def which_note(count: int) -> str:\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return notes[(count - 1) % 88 % 12]", "def which_note(count: int) -> str:\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return notes[(count - 1) % 88 % 12]", "def which_note(count: int) -> str:\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return notes[(count - 1) % 88 % 12]", "def which_note(count: int) -> str:\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return notes[(count - 1) % 88 % 12]", "def which_note(count: int) -> str:\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return notes[(count - 1) % 88 % 12]", "def which_note(count: int) -> str:\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return notes[(count - 1) % 88 % 12]", "def which_note(count: int) -> str:\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return notes[(count - 1) % 88 % 12]", "def which_note(count: int) -> str:\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return notes[(count - 1) % 88 % 12]"], "outputs": "[['A'], ['A#'], ['B'], ['C'], ['C#'], ['D'], ['D#'], ['E'], ['F'], ['F#'], ['G'], ['C'], ['A'], ['G#'], ['E'], ['E'], ['D'], ['G#']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [88], [89], [100], [1000], [10000], [54], [72]]", "input_output_examples": "[[[1], [12], [42], [100], [2017]], [['A'], ['G#'], ['D'], ['G#'], ['F']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "def solve(count: int, ball_number: int) -> int:\n\"\"\"Jack and Jill are playing a game. They have balls numbered from `0` to `n - 1`. Jack looks the other way and asks Jill to reverse the position of the balls. He further asks Jill to reverse the position of the balls `n` times, each time starting from one position further to the right, till she reaches the last ball. At the end of the game, Jill will ask Jack to guess the final position of any ball numbered `k`. \n\nYou will be given `2` integers, the first will be `n`(balls numbered from `0` to `n-1`) and the second will be `k`. You will return the position of the ball numbered `k` after the rearrangement.\n\nMore examples in the test cases. Good luck!\n\"\"\"", "inputs": [[4, 1], [4, 2], [4, 3], [20, 8], [20, 9], [20, 10]], "outputs": [[3], [2], [0], [17], [19], [18]], "starter_code": "def solve(count: int, ball_number: int) -> int:", "canonical_solution": "def solve(count, ball_number):\n    assert isinstance(count, int)\n    assert isinstance(ball_number, int)\n    balls = list(range(count))\n    for idx in range(count):\n        balls = balls[:idx] + balls[idx:][::-1]\n    return balls.index(ball_number)", "entry_point": "solve", "task_id": "TACO_lite/149", "input_output_examples": "[[[4, 1]], [[3]]]", "llm_generated_inputs": "[[3, 0], [4, 2], [5, 3], [6, 5], [1, 0], [2, 1], [10, 9], [10, 0], [7, 3], [8, 4]]", "clusters": {"cluster_list": [{"programs_str": ["def solve(count: int, ball_number: int) -> int:\n    balls = list(range(count))\n    for i in range(count):\n        balls[i:] = reversed(balls[i:])\n    return balls.index(ball_number)", "def solve(count: int, ball_number: int) -> int:\n    for i in range(count):\n        if ball_number >= i:\n            ball_number = count - 1 - (ball_number - i)\n    return ball_number", "def solve(count: int, ball_number: int) -> int:\n    balls = list(range(count))\n    for start in range(count):\n        end = count - 1\n        while start < end:\n            balls[start], balls[end] = (balls[end], balls[start])\n            start += 1\n            end -= 1\n    return balls.index(ball_number)", "def solve(count: int, ball_number: int) -> int:\n    balls = list(range(count))\n    for start in range(count):\n        end = count - 1\n        while start < end:\n            balls[start], balls[end] = (balls[end], balls[start])\n            start += 1\n            end -= 1\n    return balls.index(ball_number)", "def solve(count: int, ball_number: int) -> int:\n    balls = list(range(count))\n    for start in range(count):\n        end = count - 1\n        while start < end:\n            balls[start], balls[end] = (balls[end], balls[start])\n            start += 1\n            end -= 1\n    return balls.index(ball_number)", "def solve(count: int, ball_number: int) -> int:\n    balls = list(range(count))\n    for start in range(count):\n        balls[start:] = reversed(balls[start:])\n    return balls.index(ball_number)", "def solve(count: int, ball_number: int) -> int:\n    balls = list(range(count))\n    for i in range(count):\n        balls[i:] = reversed(balls[i:])\n    return balls.index(ball_number)", "def solve(count: int, ball_number: int) -> int:\n    balls = list(range(count))\n    for start in range(count):\n        end = count - 1\n        while start < end:\n            balls[start], balls[end] = (balls[end], balls[start])\n            start += 1\n            end -= 1\n    return balls.index(ball_number)", "def solve(count: int, ball_number: int) -> int:\n    balls = list(range(count))\n    for start in range(count):\n        end = count - 1\n        while start < end:\n            balls[start], balls[end] = (balls[end], balls[start])\n            start += 1\n            end -= 1\n    return balls.index(ball_number)", "def solve(count: int, ball_number: int) -> int:\n    balls = list(range(count))\n    for start in range(count):\n        end = count - 1\n        while start < end:\n            balls[start], balls[end] = (balls[end], balls[start])\n            start += 1\n            end -= 1\n    return balls.index(ball_number)", "def solve(count: int, ball_number: int) -> int:\n    balls = list(range(count))\n    for i in range(count):\n        balls[i:] = reversed(balls[i:])\n    return balls.index(ball_number)", "def solve(count: int, ball_number: int) -> int:\n    for i in range(count):\n        if ball_number >= i:\n            ball_number = count - 1 - (ball_number - i)\n    return ball_number", "def solve(count: int, ball_number: int) -> int:\n    balls = list(range(count))\n    for start in range(count):\n        end = count - 1\n        while start < end:\n            balls[start], balls[end] = (balls[end], balls[start])\n            start += 1\n            end -= 1\n    return balls.index(ball_number)", "def solve(count: int, ball_number: int) -> int:\n    balls = list(range(count))\n    for start in range(count):\n        balls[start:] = reversed(balls[start:])\n    return balls.index(ball_number)", "def solve(count: int, ball_number: int) -> int:\n    balls = list(range(count))\n    for start in range(count):\n        balls[start:] = reversed(balls[start:])\n    return balls.index(ball_number)", "def solve(count: int, ball_number: int) -> int:\n    for i in range(count):\n        if ball_number >= i:\n            ball_number = count - 1 - (ball_number - i)\n    return ball_number", "def solve(count: int, ball_number: int) -> int:\n    for i in range(count):\n        if ball_number >= i:\n            ball_number = count - 1 - (ball_number - i)\n    return ball_number"], "outputs": "[[1], [2], [2], [0], [0], [0], [0], [1], [6], [6]]", "probability": 0.85, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def solve(count: int, ball_number: int) -> int:\n    for i in range(count):\n        if i <= ball_number <= count - i - 1:\n            ball_number = count - i - 1 - (ball_number - i)\n    return ball_number", "def solve(count: int, ball_number: int) -> int:\n    for i in range(count):\n        if i <= ball_number <= count - i - 1:\n            ball_number = count - i - 1 - (ball_number - i)\n    return ball_number", "def solve(count: int, ball_number: int) -> int:\n    for i in range(count):\n        if i <= ball_number <= count - i - 1:\n            ball_number = count - i - 1 - (ball_number - i)\n    return ball_number"], "outputs": "[[2], [2], [3], [0], [0], [0], [0], [9], [3], [4]]", "probability": 0.15, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[4, 1], [1], [3]]]"}], "entropy": 0.6098403047164005, "llm_generated_inputs": "[[3, 0], [4, 2], [5, 3], [6, 5], [1, 0], [2, 1], [10, 9], [10, 0], [7, 3], [8, 4]]", "input_output_examples": "[[[4, 1]], [[3]]]", "weighted_test_consistency": 0.85, "at_least_one_align": true, "ambiguity": 0.37992015235820026}}
{"requirement": "def reindeer(presents: int) -> int:\n\"\"\"Santa puts all the presents into the huge sack. In order to let his reindeers rest a bit, he only takes as many reindeers with him as he is required to do. The others may take a nap.\n\nTwo reindeers are always required for the sleigh and Santa himself. Additionally he needs 1 reindeer per 30 presents. As you know, Santa has 8 reindeers in total, so he can deliver up to 180 presents at once (2 reindeers for Santa and the sleigh + 6 reindeers with 30 presents each).\n\nComplete the function `reindeers()`, which takes a number of presents and returns the minimum numbers of required reindeers. If the number of presents is too high, throw an error.\n\"\"\"", "inputs": [[0], [1], [5], [30], [31], [60], [61], [90], [91], [120], [121], [150], [151], [180]], "outputs": [[2], [3], [3], [3], [4], [4], [5], [5], [6], [6], [7], [7], [8], [8]], "starter_code": "def reindeer(presents: int) -> int:", "canonical_solution": "from math import ceil\n\ndef reindeer(presents):\n    if presents > 180:\n        raise ValueError('Too many presents')\n    return ceil(presents / 30.0) + 2", "entry_point": "reindeer", "task_id": "TACO_lite/154", "input_output_examples": "[[[0], [1], [30], [200]], [[2], [3], [3], ['Error']]]", "llm_generated_inputs": "[[0], [1], [29], [30], [59], [60], [179], [180], [181]]", "clusters": {"cluster_list": [{"programs_str": ["def reindeer(presents: int) -> int:\n    if presents > 180:\n        raise ValueError('Too many presents')\n    base_reindeers = 2\n    additional_reindeers = (presents + 29) // 30\n    total_reindeers = base_reindeers + additional_reindeers\n    return min(total_reindeers, 8)", "def reindeer(presents: int) -> int:\n    if presents > 180:\n        raise ValueError('Too many presents')\n    base_reindeers = 2\n    additional_reindeers = (presents + 29) // 30\n    total_reindeers = base_reindeers + additional_reindeers\n    return min(total_reindeers, 8)", "def reindeer(presents: int) -> int:\n    if presents > 180:\n        raise ValueError('Number of presents is too high')\n    base_reindeers = 2\n    additional_reindeers = (presents + 29) // 30\n    total_reindeers = base_reindeers + additional_reindeers\n    return min(total_reindeers, 8)", "def reindeer(presents: int) -> int:\n    if presents > 180:\n        raise ValueError('Number of presents is too high')\n    base_reindeers = 2\n    additional_reindeers = (presents + 29) // 30\n    return min(base_reindeers + additional_reindeers, 8)", "def reindeer(presents: int) -> int:\n    if presents > 180:\n        raise ValueError('Too many presents')\n    base_reindeers = 2\n    additional_reindeers = (presents + 29) // 30\n    return min(base_reindeers + additional_reindeers, 8)", "def reindeer(presents: int) -> int:\n    if presents > 180:\n        raise ValueError('Number of presents is too high')\n    base_reindeers = 2\n    additional_reindeers = (presents + 29) // 30\n    total_reindeers = base_reindeers + additional_reindeers\n    return min(total_reindeers, 8)", "def reindeer(presents: int) -> int:\n    if presents > 180:\n        raise ValueError('Number of presents is too high')\n    base_reindeers = 2\n    additional_reindeers = (presents + 29) // 30\n    total_reindeers = base_reindeers + additional_reindeers\n    return min(total_reindeers, 8)", "def reindeer(presents: int) -> int:\n    if presents > 180:\n        raise ValueError('Too many presents')\n    base_reindeers = 2\n    additional_reindeers = (presents + 29) // 30\n    total_reindeers = base_reindeers + additional_reindeers\n    return min(total_reindeers, 8)", "def reindeer(presents: int) -> int:\n    if presents > 180:\n        raise ValueError('Too many presents')\n    base_reindeers = 2\n    additional_reindeers = (presents + 29) // 30\n    return base_reindeers + additional_reindeers", "def reindeer(presents: int) -> int:\n    if presents > 180:\n        raise ValueError('Number of presents is too high')\n    base_reindeers = 2\n    additional_reindeers = (presents + 29) // 30\n    total_reindeers = base_reindeers + additional_reindeers\n    return min(total_reindeers, 8)", "def reindeer(presents: int) -> int:\n    if presents > 180:\n        raise ValueError('Too many presents')\n    base_reindeers = 2\n    additional_reindeers = (presents + 29) // 30\n    total_reindeers = base_reindeers + additional_reindeers\n    return min(total_reindeers, 8)", "def reindeer(presents: int) -> int:\n    if presents > 180:\n        raise ValueError('Number of presents is too high')\n    base_reindeers = 2\n    additional_reindeers = (presents + 29) // 30\n    total_reindeers = base_reindeers + additional_reindeers\n    return min(total_reindeers, 8)", "def reindeer(presents: int) -> int:\n    if presents > 180:\n        raise ValueError('Number of presents is too high')\n    base_reindeers = 2\n    additional_reindeers = (presents + 29) // 30\n    total_reindeers = base_reindeers + additional_reindeers\n    return min(total_reindeers, 8)", "def reindeer(presents: int) -> int:\n    if presents > 180:\n        raise ValueError('Too many presents')\n    base_reindeers = 2\n    additional_reindeers = (presents + 29) // 30\n    return min(base_reindeers + additional_reindeers, 8)", "def reindeer(presents: int) -> int:\n    if presents > 180:\n        raise ValueError('Number of presents is too high')\n    base_reindeers = 2\n    additional_reindeers = (presents + 29) // 30\n    total_reindeers = base_reindeers + additional_reindeers\n    return min(total_reindeers, 8)", "def reindeer(presents: int) -> int:\n    if presents > 180:\n        raise ValueError('Number of presents is too high')\n    base_reindeers = 2\n    additional_reindeers = (presents + 29) // 30\n    return min(base_reindeers + additional_reindeers, 8)", "def reindeer(presents: int) -> int:\n    if presents > 180:\n        raise ValueError('Number of presents is too high')\n    base_reindeers = 2\n    additional_reindeers = (presents + 29) // 30\n    return min(base_reindeers + additional_reindeers, 8)", "def reindeer(presents: int) -> int:\n    if presents > 180:\n        raise ValueError('Too many presents')\n    base_reindeers = 2\n    additional_reindeers = (presents + 29) // 30\n    return base_reindeers + additional_reindeers", "def reindeer(presents: int) -> int:\n    if presents > 180:\n        raise ValueError('Number of presents is too high')\n    base_reindeers = 2\n    additional_reindeers = (presents + 29) // 30\n    total_reindeers = base_reindeers + additional_reindeers\n    return min(total_reindeers, 8)", "def reindeer(presents: int) -> int:\n    if presents > 180:\n        raise ValueError('Number of presents is too high')\n    base_reindeers = 2\n    additional_reindeers = (presents + 29) // 30\n    return min(base_reindeers + additional_reindeers, 8)"], "outputs": "[[2], [3], [3], [3], [4], [4], [8], [8], ['ValueError']]", "probability": 1.0, "is_align_req": false, "test_consistency": 0.75, "failed_input_output_examples": "[[[200], ['ValueError'], ['Error']]]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [29], [30], [59], [60], [179], [180], [181]]", "input_output_examples": "[[[0], [1], [30], [200]], [[2], [3], [3], ['Error']]]", "weighted_test_consistency": 0.75, "at_least_one_align": false, "ambiguity": 0.125}}
{"requirement": "def solve(a: int, b: int) -> bool:\n\"\"\"In this Kata, you will be given two numbers, `a` and `b`, and your task is to determine if the first number `a` is divisible by `all` the prime factors of the second number `b`.\n\nSee test cases for more examples. \n\nGood luck!\n\nIf you like this Kata, please try:\n\n[Sub-array division](https://www.codewars.com/kata/59eb64cba954273cd4000099)\n\n[Divisor harmony](https://www.codewars.com/kata/59bf97cd4f98a8b1cd00007e)\n\"\"\"", "inputs": [[2, 256], [2, 253], [9, 243], [15, 12], [21, 2893401], [21, 2893406], [54, 2834352], [54, 2834359], [1000013, 7187761], [1000013, 7187762]], "outputs": [[true], [false], [true], [false], [true], [false], [true], [false], [true], [false]], "starter_code": "def solve(a: int, b: int) -> bool:", "canonical_solution": "from math import gcd\n\ndef solve(a, b):\n    while 1 < gcd(a, b):\n        b = b // gcd(a, b)\n    return b == 1", "entry_point": "solve", "task_id": "TACO_lite/159", "input_output_examples": "[[[15, 12]], [[False]]]", "llm_generated_inputs": "[[10, 2], [15, 5], [21, 7], [28, 14], [30, 6], [49, 7], [50, 10], [60, 12], [77, 11], [81, 9], [98, 14], [100, 10], [121, 11], [144, 12], [169, 13], [196, 14], [225, 15], [243, 9], [289, 17], [324, 12], [361, 19], [441, 21], [484, 22], [529, 23], [576, 24], [625, 25], [676, 26], [729, 27], [784, 28], [841, 29], [900, 30], [961, 31], [1024, 32], [1089, 33], [1156, 34], [1225, 35], [1296, 36], [1369, 37], [1444, 38], [1521, 39], [1600, 40], [1681, 41], [1764, 42], [1849, 43], [1936, 44], [2025, 45], [2116, 46], [2209, 47], [2304, 48], [2401, 49], [2500, 50]]", "clusters": {"cluster_list": [{"programs_str": ["def solve(a: int, b: int) -> bool:\n\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    b_factors = prime_factors(b)\n    return all((a % factor == 0 for factor in b_factors))", "def solve(a: int, b: int) -> bool:\n\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    factors_b = prime_factors(b)\n    for factor in factors_b:\n        if a % factor != 0:\n            return False\n    return True", "def solve(a: int, b: int) -> bool:\n\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    factors_b = prime_factors(b)\n    return all((a % factor == 0 for factor in factors_b))", "def solve(a: int, b: int) -> bool:\n\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    factors_b = prime_factors(b)\n    return all((a % factor == 0 for factor in factors_b))", "def solve(a: int, b: int) -> bool:\n\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    factors_b = prime_factors(b)\n    for factor in factors_b:\n        if a % factor != 0:\n            return False\n    return True", "def solve(a: int, b: int) -> bool:\n\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    factors_b = prime_factors(b)\n    for factor in factors_b:\n        if a % factor != 0:\n            return False\n    return True", "def solve(a: int, b: int) -> bool:\n\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    factors_of_b = prime_factors(b)\n    for factor in factors_of_b:\n        if a % factor != 0:\n            return False\n    return True", "def solve(a: int, b: int) -> bool:\n\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    factors_b = prime_factors(b)\n    for factor in factors_b:\n        if a % factor != 0:\n            return False\n    return True", "def solve(a: int, b: int) -> bool:\n\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    factors_b = prime_factors(b)\n    for factor in factors_b:\n        if a % factor != 0:\n            return False\n    return True", "def solve(a: int, b: int) -> bool:\n\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    factors_b = prime_factors(b)\n    for factor in factors_b:\n        if a % factor != 0:\n            return False\n    return True", "def solve(a: int, b: int) -> bool:\n\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    factors_b = prime_factors(b)\n    for factor in factors_b:\n        if a % factor != 0:\n            return False\n    return True", "def solve(a: int, b: int) -> bool:\n\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    b_factors = prime_factors(b)\n    return all((a % factor == 0 for factor in b_factors))", "def solve(a: int, b: int) -> bool:\n\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    b_factors = prime_factors(b)\n    for factor in b_factors:\n        if a % factor != 0:\n            return False\n    return True", "def solve(a: int, b: int) -> bool:\n\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    factors_b = prime_factors(b)\n    for factor in factors_b:\n        if a % factor != 0:\n            return False\n    return True", "def solve(a: int, b: int) -> bool:\n\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    b_factors = prime_factors(b)\n    for factor in b_factors:\n        if a % factor != 0:\n            return False\n    return True", "def solve(a: int, b: int) -> bool:\n\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    factors_b = prime_factors(b)\n    for factor in factors_b:\n        if a % factor != 0:\n            return False\n    return True", "def solve(a: int, b: int) -> bool:\n\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    factors_b = prime_factors(b)\n    return all((a % factor == 0 for factor in factors_b))", "def solve(a: int, b: int) -> bool:\n\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    factors_b = prime_factors(b)\n    return all((a % factor == 0 for factor in factors_b))", "def solve(a: int, b: int) -> bool:\n\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    factors_b = prime_factors(b)\n    for factor in factors_b:\n        if a % factor != 0:\n            return False\n    return True", "def solve(a: int, b: int) -> bool:\n\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    b_factors = prime_factors(b)\n    for factor in b_factors:\n        if a % factor != 0:\n            return False\n    return True"], "outputs": "[[True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[10, 2], [15, 5], [21, 7], [28, 14], [30, 6], [49, 7], [50, 10], [60, 12], [77, 11], [81, 9], [98, 14], [100, 10], [121, 11], [144, 12], [169, 13], [196, 14], [225, 15], [243, 9], [289, 17], [324, 12], [361, 19], [441, 21], [484, 22], [529, 23], [576, 24], [625, 25], [676, 26], [729, 27], [784, 28], [841, 29], [900, 30], [961, 31], [1024, 32], [1089, 33], [1156, 34], [1225, 35], [1296, 36], [1369, 37], [1444, 38], [1521, 39], [1600, 40], [1681, 41], [1764, 42], [1849, 43], [1936, 44], [2025, 45], [2116, 46], [2209, 47], [2304, 48], [2401, 49], [2500, 50]]", "input_output_examples": "[[[15, 12]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "def ackermann(m: int, n: int) -> int:\n\"\"\"The ackermann function is a famous function that played a big role in computability theory as the first example of a total computable function that is not primitive recursive.\n\nSince then the function has been a bit simplified but is still of good use. Due to its definition in terms of extremely deep recursion it can be used as a benchmark of a compiler's ability to optimize recursion. \n\nThe goal of this kata is to code a function which will be given two inputs, m and n, and will return the ackermann number A(m,n) defined by:\n\n```\nA(m,n) = n+1                          if m=0  \nA(m,n) = A(m-1,1)                     if m>0 , n=0\nA(m,n) = A(m-1,A(m,n-1))              if m,n > 0\n```\n\nm,n should be non-negative integers, the function should return null (Javascript), None (Python), or nil (Ruby) for other type, non-integer and negative numbers. In C, input is restricted to integer type.\n\"\"\"", "inputs": [[1, 1], [4, 0], [3, 3]], "outputs": [[3], [13], [61]], "starter_code": "def ackermann(m: int, n: int) -> int:", "canonical_solution": "from numbers import Number\n\ndef ackermann(m, n):\n    if isinstance(n, Number) and isinstance(m, Number):\n        if m >= 0 and n >= 0:\n            return ackermann_Aux(m, n)\n    return None\n\ndef ackermann_Aux(m, n):\n    if m == 0:\n        return n + 1\n    if m > 0:\n        if n == 0:\n            return ackermann_Aux(m - 1, 1)\n        if n > 0:\n            return ackermann_Aux(m - 1, ackermann_Aux(m, n - 1))", "entry_point": "ackermann", "task_id": "TACO_lite/162", "input_output_examples": "[[[0, 0], [0, 1], [1, 0], [1, 1], [2, 2], [3, 3]], [[1], [2], [2], [3], [7], [61]]]", "llm_generated_inputs": "[[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [-1, 0], [0, -1], [-1, -1], [1.5, 2], [2, 1.5], [1.5, 1.5], ['a', 2], [2, 'b'], ['a', 'b']]", "clusters": {"cluster_list": [{"programs_str": ["def ackermann(m: int, n: int) -> int:\n    if not isinstance(m, int) or not isinstance(n, int) or m < 0 or (n < 0):\n        return None\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return ackermann(m - 1, ackermann(m, n - 1))", "def ackermann(m: int, n: int) -> int:\n    if not isinstance(m, int) or not isinstance(n, int) or m < 0 or (n < 0):\n        return None\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return ackermann(m - 1, ackermann(m, n - 1))", "def ackermann(m: int, n: int) -> int:\n    if not isinstance(m, int) or not isinstance(n, int) or m < 0 or (n < 0):\n        return None\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return ackermann(m - 1, ackermann(m, n - 1))", "def ackermann(m: int, n: int) -> int:\n    if not isinstance(m, int) or not isinstance(n, int) or m < 0 or (n < 0):\n        return None\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return ackermann(m - 1, ackermann(m, n - 1))", "def ackermann(m: int, n: int) -> int:\n    if not isinstance(m, int) or not isinstance(n, int) or m < 0 or (n < 0):\n        return None\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return ackermann(m - 1, ackermann(m, n - 1))", "def ackermann(m: int, n: int) -> int:\n    if not isinstance(m, int) or not isinstance(n, int) or m < 0 or (n < 0):\n        return None\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return ackermann(m - 1, ackermann(m, n - 1))", "def ackermann(m: int, n: int) -> int:\n    if not isinstance(m, int) or not isinstance(n, int) or m < 0 or (n < 0):\n        return None\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return ackermann(m - 1, ackermann(m, n - 1))", "def ackermann(m: int, n: int) -> int:\n    if not isinstance(m, int) or not isinstance(n, int) or m < 0 or (n < 0):\n        return None\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return ackermann(m - 1, ackermann(m, n - 1))", "def ackermann(m: int, n: int) -> int:\n    if not isinstance(m, int) or not isinstance(n, int) or m < 0 or (n < 0):\n        return None\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return ackermann(m - 1, ackermann(m, n - 1))", "def ackermann(m: int, n: int) -> int:\n    if not isinstance(m, int) or not isinstance(n, int) or m < 0 or (n < 0):\n        return None\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return ackermann(m - 1, ackermann(m, n - 1))", "def ackermann(m: int, n: int) -> int:\n    if not isinstance(m, int) or not isinstance(n, int) or m < 0 or (n < 0):\n        return None\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return ackermann(m - 1, ackermann(m, n - 1))", "def ackermann(m: int, n: int) -> int:\n    if not isinstance(m, int) or not isinstance(n, int) or m < 0 or (n < 0):\n        return None\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return ackermann(m - 1, ackermann(m, n - 1))", "def ackermann(m: int, n: int) -> int:\n    if not isinstance(m, int) or not isinstance(n, int) or m < 0 or (n < 0):\n        return None\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return ackermann(m - 1, ackermann(m, n - 1))", "def ackermann(m: int, n: int) -> int:\n    if not isinstance(m, int) or not isinstance(n, int) or m < 0 or (n < 0):\n        return None\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return ackermann(m - 1, ackermann(m, n - 1))", "def ackermann(m: int, n: int) -> int:\n    if not isinstance(m, int) or not isinstance(n, int) or m < 0 or (n < 0):\n        return None\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return ackermann(m - 1, ackermann(m, n - 1))", "def ackermann(m: int, n: int) -> int:\n    if not isinstance(m, int) or not isinstance(n, int) or m < 0 or (n < 0):\n        return None\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return ackermann(m - 1, ackermann(m, n - 1))", "def ackermann(m: int, n: int) -> int:\n    if not isinstance(m, int) or not isinstance(n, int) or m < 0 or (n < 0):\n        return None\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return ackermann(m - 1, ackermann(m, n - 1))", "def ackermann(m: int, n: int) -> int:\n    if not isinstance(m, int) or not isinstance(n, int) or m < 0 or (n < 0):\n        return None\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return ackermann(m - 1, ackermann(m, n - 1))", "def ackermann(m: int, n: int) -> int:\n    if not isinstance(m, int) or not isinstance(n, int) or m < 0 or (n < 0):\n        return None\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return ackermann(m - 1, ackermann(m, n - 1))", "def ackermann(m: int, n: int) -> int:\n    if not isinstance(m, int) or not isinstance(n, int) or m < 0 or (n < 0):\n        return None\n    if m == 0:\n        return n + 1\n    elif m > 0 and n == 0:\n        return ackermann(m - 1, 1)\n    elif m > 0 and n > 0:\n        return ackermann(m - 1, ackermann(m, n - 1))"], "outputs": "[[1], [2], [3], [2], [3], [4], [3], [5], [7], [5], [13], [29], [13], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [-1, 0], [0, -1], [-1, -1], [1.5, 2], [2, 1.5], [1.5, 1.5], ['a', 2], [2, 'b'], ['a', 'b']]", "input_output_examples": "[[[0, 0], [0, 1], [1, 0], [1, 1], [2, 2], [3, 3]], [[1], [2], [2], [3], [7], [61]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "from typing import List\n\n\ndef dup(arry: List[str]) -> List[str]:\n\"\"\"In this Kata, you will be given an array of strings and your task is to remove all consecutive duplicate letters from each string in the array.\n\nStrings will be lowercase only, no spaces. \n\n~~~if:rust\nFor the sake of simplicity you can use the macro 'vec_of_string' to create a Vec with an array of string literals.\n~~~\n\nGood luck!\n\nIf you like this Kata, please try:\n\n[Alternate capitalization](https://www.codewars.com/kata/59cfc000aeb2844d16000075)\n\n[Vowel consonant lexicon](https://www.codewars.com/kata/59cf8bed1a68b75ffb000026)\n\"\"\"", "inputs": [[["ccooddddddewwwaaaaarrrrsssss", "piccaninny", "hubbubbubboo"]], [["abracadabra", "allottee", "assessee"]], [["kelless", "keenness"]], [["Woolloomooloo", "flooddoorroommoonlighters", "chuchchi"]], [["adanac", "soonness", "toolless", "ppellee"]], [["callalloo", "feelless", "heelless"]], [["putteellinen", "keenness"]], [["kelless", "voorraaddoosspullen", "achcha"]]], "outputs": [[["codewars", "picaniny", "hubububo"]], [["abracadabra", "alote", "asese"]], [["keles", "kenes"]], [["Wolomolo", "flodoromonlighters", "chuchchi"]], [["adanac", "sones", "toles", "pele"]], [["calalo", "feles", "heles"]], [["putelinen", "kenes"]], [["keles", "voradospulen", "achcha"]]], "starter_code": "from typing import List\ndef dup(arry: List[str]) -> List[str]:", "canonical_solution": "from itertools import groupby\n\ndef dup(arry):\n    return [''.join((c for c, grouper in groupby(i))) for i in arry]", "entry_point": "dup", "task_id": "TACO_lite/165", "input_output_examples": "[[[['abracadabra', 'allottee', 'assessee']], [['kelless', 'keenness']]], [[['abracadabra', 'alote', 'asese']], [['keles', 'kenes']]]]", "llm_generated_inputs": "[[['aabbcc']], [['abc']], [['a']], [['aaabbbccc']], [['aabbaa']], [['']], [['abacabadabacaba']], [['zzzzzz']], [['abcdefg']], [['aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz']]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef dup(arry: List[str]) -> List[str]:\n    result = []\n    for s in arry:\n        new_s = s[0] if s else ''\n        for char in s[1:]:\n            if char != new_s[-1]:\n                new_s += char\n        result.append(new_s)\n    return result", "from typing import List\n\ndef dup(arry: List[str]) -> List[str]:\n    result = []\n    for s in arry:\n        new_s = s[0] if s else ''\n        for char in s[1:]:\n            if char != new_s[-1]:\n                new_s += char\n        result.append(new_s)\n    return result", "from typing import List\n\ndef dup(arry: List[str]) -> List[str]:\n    result = []\n    for s in arry:\n        new_s = s[0] if s else ''\n        for char in s[1:]:\n            if char != new_s[-1]:\n                new_s += char\n        result.append(new_s)\n    return result", "from typing import List\n\ndef dup(arry: List[str]) -> List[str]:\n    result = []\n    for s in arry:\n        new_s = s[0] if s else ''\n        for char in s[1:]:\n            if char != new_s[-1]:\n                new_s += char\n        result.append(new_s)\n    return result", "from typing import List\n\ndef dup(arry: List[str]) -> List[str]:\n    result = []\n    for s in arry:\n        new_s = s[0] if s else ''\n        for char in s[1:]:\n            if char != new_s[-1]:\n                new_s += char\n        result.append(new_s)\n    return result", "from typing import List\n\ndef dup(arry: List[str]) -> List[str]:\n    result = []\n    for s in arry:\n        new_s = s[0] if s else ''\n        for char in s[1:]:\n            if char != new_s[-1]:\n                new_s += char\n        result.append(new_s)\n    return result", "from typing import List\n\ndef dup(arry: List[str]) -> List[str]:\n    result = []\n    for s in arry:\n        new_s = s[0] if s else ''\n        for char in s[1:]:\n            if char != new_s[-1]:\n                new_s += char\n        result.append(new_s)\n    return result", "from typing import List\n\ndef dup(arry: List[str]) -> List[str]:\n    result = []\n    for s in arry:\n        new_str = s[0] if s else ''\n        for char in s[1:]:\n            if char != new_str[-1]:\n                new_str += char\n        result.append(new_str)\n    return result", "from typing import List\n\ndef dup(arry: List[str]) -> List[str]:\n    result = []\n    for s in arry:\n        new_s = s[0] if s else ''\n        for char in s[1:]:\n            if char != new_s[-1]:\n                new_s += char\n        result.append(new_s)\n    return result", "from typing import List\n\ndef dup(arry: List[str]) -> List[str]:\n    result = []\n    for s in arry:\n        new_s = s[0] if s else ''\n        for char in s[1:]:\n            if char != new_s[-1]:\n                new_s += char\n        result.append(new_s)\n    return result", "from typing import List\n\ndef dup(arry: List[str]) -> List[str]:\n    result = []\n    for s in arry:\n        new_s = s[0] if s else ''\n        for char in s[1:]:\n            if char != new_s[-1]:\n                new_s += char\n        result.append(new_s)\n    return result", "from typing import List\n\ndef dup(arry: List[str]) -> List[str]:\n    result = []\n    for s in arry:\n        new_s = s[0] if s else ''\n        for char in s[1:]:\n            if char != new_s[-1]:\n                new_s += char\n        result.append(new_s)\n    return result", "from typing import List\n\ndef dup(arry: List[str]) -> List[str]:\n    result = []\n    for s in arry:\n        new_s = s[0] if s else ''\n        for char in s[1:]:\n            if char != new_s[-1]:\n                new_s += char\n        result.append(new_s)\n    return result", "from typing import List\n\ndef dup(arry: List[str]) -> List[str]:\n    result = []\n    for s in arry:\n        new_s = s[0] if s else ''\n        for char in s[1:]:\n            if char != new_s[-1]:\n                new_s += char\n        result.append(new_s)\n    return result", "from typing import List\n\ndef dup(arry: List[str]) -> List[str]:\n    result = []\n    for s in arry:\n        new_s = s[0] if s else ''\n        for char in s[1:]:\n            if char != new_s[-1]:\n                new_s += char\n        result.append(new_s)\n    return result", "from typing import List\n\ndef dup(arry: List[str]) -> List[str]:\n    result = []\n    for s in arry:\n        new_s = s[0] if s else ''\n        for char in s[1:]:\n            if char != new_s[-1]:\n                new_s += char\n        result.append(new_s)\n    return result", "from typing import List\n\ndef dup(arry: List[str]) -> List[str]:\n    result = []\n    for s in arry:\n        new_s = s[0] if s else ''\n        for char in s[1:]:\n            if char != new_s[-1]:\n                new_s += char\n        result.append(new_s)\n    return result", "from typing import List\n\ndef dup(arry: List[str]) -> List[str]:\n    result = []\n    for s in arry:\n        new_s = s[0] if s else ''\n        for char in s[1:]:\n            if char != new_s[-1]:\n                new_s += char\n        result.append(new_s)\n    return result", "from typing import List\n\ndef dup(arry: List[str]) -> List[str]:\n    result = []\n    for s in arry:\n        new_s = s[0] if s else ''\n        for char in s[1:]:\n            if char != new_s[-1]:\n                new_s += char\n        result.append(new_s)\n    return result", "from typing import List\n\ndef dup(arry: List[str]) -> List[str]:\n    result = []\n    for s in arry:\n        new_s = s[0] if s else ''\n        for char in s[1:]:\n            if char != new_s[-1]:\n                new_s += char\n        result.append(new_s)\n    return result"], "outputs": "[[['abc']], [['abc']], [['a']], [['abc']], [['aba']], [['']], [['abacabadabacaba']], [['z']], [['abcdefg']], [['abcdefghijklmnopqrstuvwxyz']]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['aabbcc']], [['abc']], [['a']], [['aaabbbccc']], [['aabbaa']], [['']], [['abacabadabacaba']], [['zzzzzz']], [['abcdefg']], [['aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz']]]", "input_output_examples": "[[[['abracadabra', 'allottee', 'assessee']], [['kelless', 'keenness']]], [[['abracadabra', 'alote', 'asese']], [['keles', 'kenes']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "def is_triangle(a: int, b: int, c: int) -> bool:\n\"\"\"Implement a method that accepts 3 integer values a, b, c. The method should return true if a triangle can be built with the sides of given length and false in any other case.\n\n(In this case, all triangles must have surface greater than 0 to be accepted).\n\"\"\"", "inputs": [[1, 2, 2], [7, 2, 2], [1, 2, 3], [1, 3, 2], [3, 1, 2], [5, 1, 2], [1, 2, 5], [2, 5, 1], [4, 2, 3], [5, 1, 5], [2, 2, 2], [-1, 2, 3], [1, -2, 3], [1, 2, -3], [0, 2, 3]], "outputs": [[true], [false], [false], [false], [false], [false], [false], [false], [true], [true], [true], [false], [false], [false], [false]], "starter_code": "def is_triangle(a: int, b: int, c: int) -> bool:", "canonical_solution": "def is_triangle(a, b, c):\n    return a < b + c and b < a + c and (c < a + b)", "entry_point": "is_triangle", "task_id": "TACO_lite/166", "input_output_examples": "[[], []]", "llm_generated_inputs": "[[3, 4, 5], [1, 2, 3], [5, 5, 5], [0, 0, 0], [-1, -1, -1], [10, 1, 1], [7, 10, 5], [1, 1, 2], [2, 2, 3], [1000, 1000, 1000]]", "clusters": {"cluster_list": [{"programs_str": ["def is_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and (b + c > a)", "def is_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and (b + c > a)", "def is_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and (b + c > a)", "def is_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and (b + c > a)", "def is_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and (b + c > a)", "def is_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and (b + c > a)", "def is_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and (b + c > a)", "def is_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and (b + c > a)", "def is_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and (b + c > a)", "def is_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and (b + c > a)", "def is_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and (b + c > a)", "def is_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and (b + c > a)", "def is_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and (b + c > a)", "def is_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and (b + c > a)", "def is_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and (b + c > a)", "def is_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and (b + c > a)", "def is_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and (b + c > a)", "def is_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and (b + c > a)", "def is_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and (b + c > a)", "def is_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and (b + c > a)"], "outputs": "[[True], [False], [True], [False], [False], [False], [True], [False], [True], [True]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[3, 4, 5], [1, 2, 3], [5, 5, 5], [0, 0, 0], [-1, -1, -1], [10, 1, 1], [7, 10, 5], [1, 1, 2], [2, 2, 3], [1000, 1000, 1000]]", "input_output_examples": "[[], []]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "def graceful_tipping(bill: float) -> float:\n\"\"\"Adding tip to a restaurant bill in a graceful way can be tricky, thats why you need make a function for it.\n\nThe function will receive the restaurant bill (always a positive number) as an argument. You need to 1) **add at least 15%** in tip, 2) round that number up to an *elegant* value and 3) return it.\n\nWhat is an *elegant* number? It depends on the magnitude of the number to be rounded. Numbers below 10 should simply be rounded to whole numbers. Numbers 10 and above should be rounded like this:\n\n10 - 99.99... ---> Round to number divisible by 5\n\n100 - 999.99... ---> Round to number divisible by 50\n\n1000 - 9999.99... ---> Round to number divisible by 500\n\nAnd so on...\n\nGood luck!\n\"\"\"", "inputs": [[1], [7], [12], [86], [99], [1149], [983212]], "outputs": [[2], [9], [15], [100], [150], [1500], [1500000]], "starter_code": "def graceful_tipping(bill: float) -> float:", "canonical_solution": "from math import ceil, log10\n\ndef graceful_tipping(bill):\n    bill *= 1.15\n    if bill < 10:\n        return ceil(bill)\n    e = int(log10(bill))\n    unit = 10 ** e / 2\n    return ceil(bill / unit) * unit", "entry_point": "graceful_tipping", "task_id": "TACO_lite/169", "input_output_examples": "[[[1.0], [7.0], [12.0], [86.0]], [[2.0], [9.0], [15.0], [100.0]]]", "llm_generated_inputs": "[[7.25], [12.34], [15.0], [23.67], [49.99], [50.0], [55.0], [99.99], [100.0], [123.45], [149.99], [150.0], [151.0], [499.99], [500.0], [501.0], [999.99], [1000.0], [1001.0], [1234.56], [4999.99], [5000.0], [5001.0], [9999.99], [10000.0], [10001.0], [12345.67]]", "clusters": {"cluster_list": [{"programs_str": ["import math\n\ndef graceful_tipping(bill: float) -> float:\n    tip = bill * 0.15\n    total = bill + tip\n    if total < 10:\n        return math.ceil(total)\n    else:\n        magnitude = 10 ** (len(str(int(total))) - 1)\n        return math.ceil(total / (5 * magnitude)) * (5 * magnitude)", "import math\n\ndef graceful_tipping(bill: float) -> float:\n    tip = bill * 0.15\n    total = bill + tip\n    if total < 10:\n        return math.ceil(total)\n    else:\n        magnitude = 10 ** (len(str(int(total))) - 1)\n        return math.ceil(total / (5 * magnitude)) * (5 * magnitude)", "import math\n\ndef graceful_tipping(bill: float) -> float:\n    tip = bill * 0.15\n    total = bill + tip\n    if total < 10:\n        return math.ceil(total)\n    else:\n        magnitude = 10 ** (len(str(int(total))) - 1)\n        return math.ceil(total / (5 * magnitude)) * (5 * magnitude)", "import math\n\ndef graceful_tipping(bill: float) -> float:\n    tip = bill * 0.15\n    total = bill + tip\n    if total < 10:\n        return math.ceil(total)\n    else:\n        magnitude = 10 ** (len(str(int(total))) - 1)\n        return math.ceil(total / (5 * magnitude)) * (5 * magnitude)", "def graceful_tipping(bill: float) -> float:\n    import math\n    tip = bill * 0.15\n    total = bill + tip\n    if total < 10:\n        return math.ceil(total)\n    else:\n        magnitude = 10 ** (len(str(int(total))) - 1)\n        return math.ceil(total / (5 * magnitude)) * (5 * magnitude)", "import math\n\ndef graceful_tipping(bill: float) -> float:\n    tip = bill * 0.15\n    total = bill + tip\n    if total < 10:\n        return math.ceil(total)\n    else:\n        magnitude = 10 ** (len(str(int(total))) - 1)\n        return math.ceil(total / (5 * magnitude)) * (5 * magnitude)", "def graceful_tipping(bill: float) -> float:\n    import math\n    tip = bill * 0.15\n    total = bill + tip\n    if total < 10:\n        return math.ceil(total)\n    else:\n        magnitude = 10 ** (len(str(int(total))) - 1)\n        return math.ceil(total / (5 * magnitude)) * (5 * magnitude)", "def graceful_tipping(bill: float) -> float:\n    import math\n    tip = bill * 0.15\n    total = bill + tip\n    if total < 10:\n        return math.ceil(total)\n    else:\n        magnitude = 10 ** (len(str(int(total))) - 1)\n        return math.ceil(total / (5 * magnitude)) * (5 * magnitude)", "def graceful_tipping(bill: float) -> float:\n    import math\n    tip = bill * 0.15\n    total = bill + tip\n    if total < 10:\n        return math.ceil(total)\n    else:\n        magnitude = 10 ** (len(str(int(total))) - 1)\n        return math.ceil(total / (5 * magnitude)) * (5 * magnitude)", "def graceful_tipping(bill: float) -> float:\n    import math\n    tip = bill * 0.15\n    total = bill + tip\n    if total < 10:\n        return math.ceil(total)\n    else:\n        magnitude = 10 ** (len(str(int(total))) - 1)\n        return math.ceil(total / (5 * magnitude)) * (5 * magnitude)", "import math\n\ndef graceful_tipping(bill: float) -> float:\n    tip = bill * 0.15\n    total = bill + tip\n    if total < 10:\n        return math.ceil(total)\n    else:\n        magnitude = 10 ** (len(str(int(total))) - 1)\n        return math.ceil(total / (5 * magnitude)) * (5 * magnitude)", "import math\n\ndef graceful_tipping(bill: float) -> float:\n    tip = bill * 0.15\n    total = bill + tip\n    if total < 10:\n        return math.ceil(total)\n    else:\n        magnitude = 10 ** (len(str(int(total))) - 1)\n        return math.ceil(total / (5 * magnitude)) * (5 * magnitude)", "import math\n\ndef graceful_tipping(bill: float) -> float:\n    tip = bill * 0.15\n    total = bill + tip\n    if total < 10:\n        return math.ceil(total)\n    else:\n        magnitude = 10 ** (len(str(int(total))) - 1)\n        return math.ceil(total / (5 * magnitude)) * (5 * magnitude)", "def graceful_tipping(bill: float) -> float:\n    import math\n    tip = bill * 0.15\n    total = bill + tip\n    if total < 10:\n        return math.ceil(total)\n    else:\n        magnitude = 10 ** (len(str(int(total))) - 1)\n        return math.ceil(total / (5 * magnitude)) * (5 * magnitude)", "import math\n\ndef graceful_tipping(bill: float) -> float:\n    tip = bill * 0.15\n    total = bill + tip\n    if total < 10:\n        return math.ceil(total)\n    else:\n        magnitude = 10 ** (len(str(int(total))) - 1)\n        return math.ceil(total / (5 * magnitude)) * (5 * magnitude)", "def graceful_tipping(bill: float) -> float:\n    import math\n    tip = bill * 0.15\n    total = bill + tip\n    if total < 10:\n        return math.ceil(total)\n    else:\n        magnitude = 10 ** (len(str(int(total))) - 1)\n        return math.ceil(total / (5 * magnitude)) * (5 * magnitude)", "import math\n\ndef graceful_tipping(bill: float) -> float:\n    tip = bill * 0.15\n    total = bill + tip\n    if total < 10:\n        return math.ceil(total)\n    else:\n        magnitude = 10 ** (len(str(int(total))) - 1)\n        return math.ceil(total / (5 * magnitude)) * (5 * magnitude)", "import math\n\ndef graceful_tipping(bill: float) -> float:\n    tip = bill * 0.15\n    total = bill + tip\n    if total < 10:\n        return math.ceil(total)\n    else:\n        magnitude = 10 ** (len(str(int(total))) - 1)\n        return math.ceil(total / (5 * magnitude)) * (5 * magnitude)"], "outputs": "[[9], [50], [50], [50], [100], [100], [100], [500], [500], [500], [500], [500], [500], [1000], [1000], [1000], [5000], [5000], [5000], [5000], [10000], [10000], [10000], [50000], [50000], [50000], [50000]]", "probability": 0.9, "is_align_req": false, "test_consistency": 0.75, "failed_input_output_examples": "[[[12.0], [50], [15.0]]]"}, {"programs_str": ["def graceful_tipping(bill: float) -> float:\n    tip = bill * 0.15\n    total = bill + tip\n    if total < 10:\n        return round(total)\n    else:\n        magnitude = 10 ** (len(str(int(total))) - 1)\n        return (total + magnitude // 2) // (magnitude // 5) * (magnitude // 5)"], "outputs": "[[8], [18.0], [22.0], [32.0], [62.0], [62.0], [68.0], [160.0], [160.0], [180.0], [220.0], [220.0], [220.0], [620.0], [620.0], [620.0], [1600.0], [1600.0], [1600.0], [1800.0], [6200.0], [6200.0], [6200.0], [16000.0], [16000.0], [16000.0], [18000.0]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[1.0], [1], [2.0]], [[7.0], [8], [9.0]], [[12.0], [18.0], [15.0]], [[86.0], [102.0], [100.0]]]"}, {"programs_str": ["def graceful_tipping(bill: float) -> float:\n    tip = bill * 0.15\n    total = bill + tip\n    if total < 10:\n        return round(total)\n    else:\n        magnitude = 10 ** (len(str(int(total))) - 1)\n        return (total + magnitude // 2) // magnitude * magnitude"], "outputs": "[[8], [10.0], [20.0], [30.0], [60.0], [60.0], [60.0], [100.0], [100.0], [100.0], [200.0], [200.0], [200.0], [600.0], [600.0], [600.0], [1000.0], [1000.0], [1000.0], [1000.0], [6000.0], [6000.0], [6000.0], [10000.0], [10000.0], [10000.0], [10000.0]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.25, "failed_input_output_examples": "[[[1.0], [1], [2.0]], [[7.0], [8], [9.0]], [[12.0], [10.0], [15.0]]]"}], "entropy": 0.3589962496465303, "llm_generated_inputs": "[[7.25], [12.34], [15.0], [23.67], [49.99], [50.0], [55.0], [99.99], [100.0], [123.45], [149.99], [150.0], [151.0], [499.99], [500.0], [501.0], [999.99], [1000.0], [1001.0], [1234.56], [4999.99], [5000.0], [5001.0], [9999.99], [10000.0], [10001.0], [12345.67]]", "input_output_examples": "[[[1.0], [7.0], [12.0], [86.0]], [[2.0], [9.0], [15.0], [100.0]]]", "weighted_test_consistency": 0.6875, "at_least_one_align": false, "ambiguity": 0.33574812482326516}}
{"requirement": "def decrypt(text: str, n: int) -> str:\n\"\"\"For building the encrypted string:Take every 2nd char from the string, then the other chars, that are not every 2nd char, and concat them as new String.\n\nDo this n times!\n\nWrite two methods:\n```python\ndef encrypt(text, n)\ndef decrypt(encrypted_text, n)\n```\n\n```Fsharp\nlet encrypt (str:string) (n:int) -> string\nlet decrypt (str:string) (n:int) -> string\n```\n\nFor both methods:\nIf the input-string is null or empty return exactly this value!\nIf n is <= 0 then return the input text.\n\nThis kata is part of the Simple Encryption Series:\nSimple Encryption #1 - Alternating Split\nSimple Encryption #2 - Index-Difference\nSimple Encryption #3 - Turn The Bits Around\nSimple Encryption #4 - Qwerty\n\nHave fun coding it and please don't forget to vote and rank this kata! :-)\n\"\"\"", "inputs": [["This is a test!", 0], ["hsi  etTi sats!", 1], ["s eT ashi tist!", 2], [" Tah itse sits!", 3], ["This is a test!", 4], ["This is a test!", -1], ["hskt svr neetn!Ti aai eyitrsig", 1], ["", 0], [null, 0]], "outputs": [["This is a test!"], ["This is a test!"], ["This is a test!"], ["This is a test!"], ["This is a test!"], ["This is a test!"], ["This kata is very interesting!"], [""], [null]], "starter_code": "def decrypt(text: str, n: int) -> str:", "canonical_solution": "def decrypt(text, n):\n    if text in ('', None):\n        return text\n    ndx = len(text) // 2\n    for i in range(n):\n        a = text[:ndx]\n        b = text[ndx:]\n        text = ''.join((b[i:i + 1] + a[i:i + 1] for i in range(ndx + 1)))\n    return text\n\ndef encrypt(text, n):\n    for i in range(n):\n        text = text[1::2] + text[::2]\n    return text", "entry_point": "decrypt", "task_id": "TACO_lite/171", "input_output_examples": "[[['This is a test!', 1], ['This is a test!', 2]], [['hsi  etTi sats!'], ['s eT ashi tist!']]]", "llm_generated_inputs": "[['', 5], ['a', 1], ['ab', 1], ['abc', 1], ['abcd', 1], ['abcde', 1], ['abcdef', 1], ['abcdefg', 1], ['abcdefgh', 1], ['thisisatest', 1], ['thisisatest', 2], ['thisisatest', 3], ['thisisatest', 0], ['thisisatest', -1], ['thisisatest', -5], ['hsktietlae', 1], [' Tah itse sits!', 3]]", "clusters": {"cluster_list": [{"programs_str": ["def decrypt(text: str, n: int) -> str:\n    if not text or n <= 0:\n        return text\n    half = len(text) // 2\n    for _ in range(n):\n        left = text[:half]\n        right = text[half:]\n        result = []\n        for i in range(len(right)):\n            result.append(right[i])\n            if i < len(left):\n                result.append(left[i])\n        text = ''.join(result)\n    return text", "def decrypt(text: str, n: int) -> str:\n    if not text or n <= 0:\n        return text\n    half = len(text) // 2\n    for _ in range(n):\n        left = text[:half]\n        right = text[half:]\n        result = []\n        for l, r in zip(left, right):\n            result.append(r)\n            result.append(l)\n        if len(right) > len(left):\n            result.append(right[-1])\n        text = ''.join(result)\n    return text", "def decrypt(text: str, n: int) -> str:\n    if not text or n <= 0:\n        return text\n    half = len(text) // 2\n    for _ in range(n):\n        left = text[:half]\n        right = text[half:]\n        result = []\n        for i in range(len(right)):\n            result.append(right[i])\n            if i < len(left):\n                result.append(left[i])\n        text = ''.join(result)\n    return text", "def decrypt(text: str, n: int) -> str:\n    if not text or n <= 0:\n        return text\n    half = len(text) // 2\n    for _ in range(n):\n        left = text[:half]\n        right = text[half:]\n        result = []\n        for l, r in zip(left, right):\n            result.append(r)\n            result.append(l)\n        if len(right) > len(left):\n            result.append(right[-1])\n        text = ''.join(result)\n    return text", "def decrypt(text: str, n: int) -> str:\n    if not text or n <= 0:\n        return text\n    half = len(text) // 2\n    for _ in range(n):\n        left = text[:half]\n        right = text[half:]\n        result = []\n        for i in range(len(right)):\n            result.append(right[i])\n            if i < len(left):\n                result.append(left[i])\n        text = ''.join(result)\n    return text", "def decrypt(text: str, n: int) -> str:\n    if not text or n <= 0:\n        return text\n    half = len(text) // 2\n    for _ in range(n):\n        left = text[:half]\n        right = text[half:]\n        result = []\n        for l, r in zip(left, right):\n            result.append(r)\n            result.append(l)\n        if len(right) > len(left):\n            result.append(right[-1])\n        text = ''.join(result)\n    return text", "def decrypt(text: str, n: int) -> str:\n    if not text or n <= 0:\n        return text\n    half = len(text) // 2\n    for _ in range(n):\n        left = text[:half]\n        right = text[half:]\n        result = []\n        for i in range(len(right)):\n            result.append(right[i])\n            if i < len(left):\n                result.append(left[i])\n        text = ''.join(result)\n    return text", "def decrypt(text: str, n: int) -> str:\n    if not text or n <= 0:\n        return text\n    half = len(text) // 2\n    for _ in range(n):\n        first_half = text[:half]\n        second_half = text[half:]\n        decrypted = []\n        for i in range(half):\n            decrypted.append(second_half[i])\n            if i < len(first_half):\n                decrypted.append(first_half[i])\n        if len(text) % 2 != 0:\n            decrypted.append(second_half[-1])\n        text = ''.join(decrypted)\n    return text", "def decrypt(text: str, n: int) -> str:\n    if not text or n <= 0:\n        return text\n    half = len(text) // 2\n    for _ in range(n):\n        left = text[:half]\n        right = text[half:]\n        result = []\n        for i in range(len(right)):\n            result.append(right[i])\n            if i < len(left):\n                result.append(left[i])\n        text = ''.join(result)\n    return text", "def decrypt(text: str, n: int) -> str:\n    if not text or n <= 0:\n        return text\n    half = len(text) // 2\n    for _ in range(n):\n        first_half = text[:half]\n        second_half = text[half:]\n        decrypted_text = []\n        for i in range(len(second_half)):\n            decrypted_text.append(second_half[i])\n            if i < len(first_half):\n                decrypted_text.append(first_half[i])\n        text = ''.join(decrypted_text)\n    return text", "def decrypt(text: str, n: int) -> str:\n    if not text or n <= 0:\n        return text\n    half = len(text) // 2\n    for _ in range(n):\n        left = text[:half]\n        right = text[half:]\n        result = []\n        for i in range(len(right)):\n            result.append(right[i])\n            if i < len(left):\n                result.append(left[i])\n        text = ''.join(result)\n    return text", "def decrypt(text: str, n: int) -> str:\n    if not text or n <= 0:\n        return text\n    half = len(text) // 2\n    for _ in range(n):\n        left = text[:half]\n        right = text[half:]\n        result = []\n        for l, r in zip(left, right):\n            result.append(r)\n            result.append(l)\n        if len(right) > len(left):\n            result.append(right[-1])\n        text = ''.join(result)\n    return text", "def decrypt(text: str, n: int) -> str:\n    if not text or n <= 0:\n        return text\n    half = len(text) // 2\n    for _ in range(n):\n        first_half = text[:half]\n        second_half = text[half:]\n        decrypted = []\n        for i in range(len(second_half)):\n            decrypted.append(second_half[i])\n            if i < len(first_half):\n                decrypted.append(first_half[i])\n        text = ''.join(decrypted)\n    return text", "def decrypt(text: str, n: int) -> str:\n    if not text or n <= 0:\n        return text\n    half = len(text) // 2\n    for _ in range(n):\n        left = text[:half]\n        right = text[half:]\n        result = []\n        for i in range(len(right)):\n            result.append(right[i])\n            if i < len(left):\n                result.append(left[i])\n        text = ''.join(result)\n    return text", "def decrypt(text: str, n: int) -> str:\n    if not text or n <= 0:\n        return text\n    half = len(text) // 2\n    for _ in range(n):\n        first_half = text[:half]\n        second_half = text[half:]\n        decrypted_text = []\n        for i in range(len(second_half)):\n            decrypted_text.append(second_half[i])\n            if i < len(first_half):\n                decrypted_text.append(first_half[i])\n        text = ''.join(decrypted_text)\n    return text"], "outputs": "[[''], ['a'], ['ba'], ['bac'], ['cadb'], ['cadbe'], ['daebfc'], ['daebfcg'], ['eafbgchd'], ['stahtiessit'], ['isetsashitt'], ['aissheittst'], ['thisisatest'], ['thisisatest'], ['thisisatest'], ['ehtslkatei'], ['This is a test!']]", "probability": 0.75, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[['This is a test!', 1], [' Tah itse sits!'], ['hsi  etTi sats!']]]"}, {"programs_str": ["def decrypt(text: str, n: int) -> str:\n    if not text or n <= 0:\n        return text\n    half = len(text) // 2\n    for _ in range(n):\n        left = text[:half]\n        right = text[half:]\n        result = []\n        for i in range(half):\n            result.append(right[i])\n            if i + half < len(text):\n                result.append(left[i])\n        if len(text) % 2 != 0:\n            result.append(left[-1])\n        text = ''.join(result)\n    return text"], "outputs": "[[''], ['IndexError'], ['ba'], ['baa'], ['cadb'], ['cadbb'], ['daebfc'], ['daebfcc'], ['eafbgchd'], ['stahtiessii'], ['isetsashitt'], ['aissheittss'], ['thisisatest'], ['thisisatest'], ['thisisatest'], ['ehtslkatei'], ['This is a testt']]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['This is a test!', 1], [' Tah itse sitss'], ['hsi  etTi sats!']], [['This is a test!', 2], ['s eT ashi tistt'], ['s eT ashi tist!']]]"}, {"programs_str": ["def decrypt(text: str, n: int) -> str:\n    if not text or n <= 0:\n        return text\n    half = len(text) // 2\n    for _ in range(n):\n        first_half = text[:half]\n        second_half = text[half:]\n        decrypted = []\n        for i in range(half):\n            decrypted.append(second_half[i])\n            if i + half < len(text):\n                decrypted.append(first_half[i])\n        text = ''.join(decrypted)\n    return text", "def decrypt(text: str, n: int) -> str:\n    if not text or n <= 0:\n        return text\n    half = len(text) // 2\n    for _ in range(n):\n        left = text[:half]\n        right = text[half:]\n        result = []\n        for i in range(half):\n            result.append(right[i])\n            if i + half < len(text):\n                result.append(left[i])\n        text = ''.join(result)\n    return text"], "outputs": "[[''], [''], ['ba'], ['ba'], ['cadb'], ['cadb'], ['daebfc'], ['daebfc'], ['eafbgchd'], ['stahtiessi'], ['isetsashit'], ['aissheitts'], ['thisisatest'], ['thisisatest'], ['thisisatest'], ['ehtslkatei'], ['This is a test']]", "probability": 0.1, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['This is a test!', 1], [' Tah itse sits'], ['hsi  etTi sats!']], [['This is a test!', 2], ['s eT ashi tist'], ['s eT ashi tist!']]]"}, {"programs_str": ["def decrypt(text: str, n: int) -> str:\n    if not text or n <= 0:\n        return text\n    half = len(text) // 2\n    for _ in range(n):\n        left = text[:half]\n        right = text[half:]\n        result = []\n        for l, r in zip(right, left):\n            result.append(r)\n            result.append(l)\n        if len(right) > len(left):\n            result.append(right[-1])\n        text = ''.join(result)\n    return text", "def decrypt(text: str, n: int) -> str:\n    if not text or n <= 0:\n        return text\n    half = len(text) // 2\n    for _ in range(n):\n        left = text[:half]\n        right = text[half:]\n        result = []\n        for l, r in zip(right, left):\n            result.append(r)\n            result.append(l)\n        if len(right) > len(left):\n            result.append(right[-1])\n        text = ''.join(result)\n    return text"], "outputs": "[[''], ['a'], ['ab'], ['abc'], ['acbd'], ['acbde'], ['adbecf'], ['adbecfg'], ['aebfcgdh'], ['tshaitseist'], ['ttssheaiist'], ['tetasisihst'], ['thisisatest'], ['thisisatest'], ['thisisatest'], ['hestkltaie'], [' isast  Ttihes!']]", "probability": 0.1, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['This is a test!', 1], ['T hai st eisst!'], ['hsi  etTi sats!']], [['This is a test!', 2], ['Tt  heaiis sst!'], ['s eT ashi tist!']]]"}], "entropy": 0.5958800740904867, "llm_generated_inputs": "[['', 5], ['a', 1], ['ab', 1], ['abc', 1], ['abcd', 1], ['abcde', 1], ['abcdef', 1], ['abcdefg', 1], ['abcdefgh', 1], ['thisisatest', 1], ['thisisatest', 2], ['thisisatest', 3], ['thisisatest', 0], ['thisisatest', -1], ['thisisatest', -5], ['hsktietlae', 1], [' Tah itse sits!', 3]]", "input_output_examples": "[[['This is a test!', 1], ['This is a test!', 2]], [['hsi  etTi sats!'], ['s eT ashi tist!']]]", "weighted_test_consistency": 0.375, "at_least_one_align": false, "ambiguity": 0.6104400370452434}}
{"requirement": "from typing import List\n\n\ndef find(seq: List[int]) -> float:\n\"\"\"If you have not ever heard the term **Arithmetic Progrossion**, refer to: \nhttp://www.codewars.com/kata/find-the-missing-term-in-an-arithmetic-progression/python\n\nAnd here is an unordered version. Try if you can survive lists of **MASSIVE** numbers (which means time limit should be considered). :D\n\nNote: Don't be afraid that the minimum or the maximum element in the list is missing, e.g. [4, 6, 3, 5, 2] is missing 1 or 7, but this case is excluded from the kata.\n\"\"\"", "inputs": [[[3, 9, 1, 11, 13, 5]], [[5, -1, 0, 3, 4, -3, 2, -2]], [[2, -2, 8, -8, 4, -4, 6, -6]]], "outputs": [[7], [1], [0]], "starter_code": "from typing import List\ndef find(seq: List[int]) -> float:", "canonical_solution": "def find(seq):\n    return (min(seq) + max(seq)) * (len(seq) + 1) / 2 - sum(seq)", "entry_point": "find", "task_id": "TACO_lite/172", "input_output_examples": "[[[[3, 9, 1, 11, 13, 5]]], [[7]]]", "llm_generated_inputs": "[[[3, 7, 1, 5]], [[10, 20, 30, 50, 40]], [[5, 2, 8, 6, 4]], [[100, 98, 96, 94, 90]], [[1, 3, 5, 9, 7]], [[0, -2, -4, -6, -10]], [[1000, 1002, 1004, 1008, 1006]], [[1, 2, 3, 5, 4]], [[2, 4, 6, 10, 8]], [[15, 12, 9, 3, 6]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef find(seq: List[int]) -> float:\n    seq.sort()\n    diff = (seq[-1] - seq[0]) / len(seq)\n    for i in range(1, len(seq)):\n        if seq[i] != seq[i - 1] + diff:\n            return seq[i - 1] + diff", "from typing import List\n\ndef find(seq: List[int]) -> float:\n    seq.sort()\n    d = (seq[-1] - seq[0]) / len(seq)\n    for i in range(1, len(seq)):\n        if seq[i] != seq[i - 1] + d:\n            return seq[i - 1] + d", "from typing import List\n\ndef find(seq: List[int]) -> float:\n    seq.sort()\n    diff = (seq[-1] - seq[0]) / len(seq)\n    for i in range(1, len(seq)):\n        if seq[i] - seq[i - 1] != diff:\n            return seq[i - 1] + diff", "from typing import List\n\ndef find(seq: List[int]) -> float:\n    seq.sort()\n    d = (seq[-1] - seq[0]) / len(seq)\n    for i in range(1, len(seq)):\n        if seq[i] != seq[i - 1] + d:\n            return seq[i - 1] + d", "from typing import List\n\ndef find(seq: List[int]) -> float:\n    seq.sort()\n    diff = (seq[-1] - seq[0]) / len(seq)\n    for i in range(1, len(seq)):\n        if seq[i] - seq[i - 1] != diff:\n            return seq[i - 1] + diff", "from typing import List\n\ndef find(seq: List[int]) -> float:\n    seq.sort()\n    diff = (seq[-1] - seq[0]) / len(seq)\n    for i in range(1, len(seq)):\n        if seq[i] - seq[i - 1] != diff:\n            return seq[i - 1] + diff", "from typing import List\n\ndef find(seq: List[int]) -> float:\n    seq.sort()\n    diff = (seq[-1] - seq[0]) / len(seq)\n    for i in range(1, len(seq)):\n        if seq[i] - seq[i - 1] != diff:\n            return seq[i - 1] + diff", "from typing import List\n\ndef find(seq: List[int]) -> float:\n    seq.sort()\n    diff = (seq[-1] - seq[0]) / len(seq)\n    for i in range(1, len(seq)):\n        if seq[i] != seq[i - 1] + diff:\n            return seq[i - 1] + diff", "from typing import List\n\ndef find(seq: List[int]) -> float:\n    seq.sort()\n    diff = (seq[-1] - seq[0]) / len(seq)\n    for i in range(1, len(seq)):\n        if seq[i] != seq[i - 1] + diff:\n            return seq[i - 1] + diff", "from typing import List\n\ndef find(seq: List[int]) -> float:\n    seq.sort()\n    diff = (seq[-1] - seq[0]) / len(seq)\n    for i in range(1, len(seq)):\n        if seq[i] != seq[i - 1] + diff:\n            return seq[i - 1] + diff", "from typing import List\n\ndef find(seq: List[int]) -> float:\n    seq.sort()\n    diff = (seq[-1] - seq[0]) / len(seq)\n    for i in range(1, len(seq)):\n        if seq[i] - seq[i - 1] != diff:\n            return seq[i - 1] + diff", "from typing import List\n\ndef find(seq: List[int]) -> float:\n    seq.sort()\n    diff = (seq[-1] - seq[0]) / len(seq)\n    for i in range(1, len(seq)):\n        if seq[i] - seq[i - 1] != diff:\n            return seq[i - 1] + diff", "from typing import List\n\ndef find(seq: List[int]) -> float:\n    seq.sort()\n    diff = (seq[-1] - seq[0]) / len(seq)\n    for i in range(1, len(seq)):\n        if seq[i] != seq[i - 1] + diff:\n            return seq[i - 1] + diff", "from typing import List\n\ndef find(seq: List[int]) -> float:\n    seq.sort()\n    d = (seq[-1] - seq[0]) / len(seq)\n    for i in range(1, len(seq)):\n        if seq[i] - seq[i - 1] != d:\n            return seq[i - 1] + d", "from typing import List\n\ndef find(seq: List[int]) -> float:\n    seq.sort()\n    d = (seq[-1] - seq[0]) / len(seq)\n    for i in range(1, len(seq)):\n        if seq[i] - seq[i - 1] != d:\n            return seq[i - 1] + d", "from typing import List\n\ndef find(seq: List[int]) -> float:\n    seq.sort()\n    diff = (seq[-1] - seq[0]) / len(seq)\n    for i in range(1, len(seq)):\n        if seq[i] - seq[i - 1] != diff:\n            return seq[i - 1] + diff", "from typing import List\n\ndef find(seq: List[int]) -> float:\n    seq.sort()\n    diff = (seq[-1] - seq[0]) / len(seq)\n    for i in range(1, len(seq)):\n        if seq[i] - seq[i - 1] != diff:\n            return seq[i - 1] + diff", "from typing import List\n\ndef find(seq: List[int]) -> float:\n    seq.sort()\n    d = (seq[-1] - seq[0]) / len(seq)\n    for i in range(1, len(seq)):\n        if seq[i] - seq[i - 1] != d:\n            return seq[i - 1] + d", "from typing import List\n\ndef find(seq: List[int]) -> float:\n    seq.sort()\n    diff = (seq[-1] - seq[0]) / len(seq)\n    for i in range(1, len(seq)):\n        if seq[i] - seq[i - 1] != diff:\n            return seq[i - 1] + diff"], "outputs": "[[2.5], [18.0], [3.2], [92.0], [2.6], [-8.0], [1001.6], [1.8], [3.6], [5.4]]", "probability": 0.95, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef find(seq: List[int]) -> float:\n    seq.sort()\n    diff = (seq[-1] - seq[0]) // len(seq)\n    for i in range(1, len(seq)):\n        if seq[i] != seq[i - 1] + diff:\n            return seq[i - 1] + diff"], "outputs": "[[2], [18], [3], [92], [2], [-8], [1001], [1], [3], [5]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[[1, 3, 5, 7]], [[10, 20, 30, 40, 50]], [[2, 4, 5, 6, 8]], [[90, 94, 96, 98, 100]], [[1, 3, 5, 7, 9]], [[-10, -6, -4, -2, 0]], [[1000, 1002, 1004, 1006, 1008]], [[1, 2, 3, 4, 5]], [[2, 4, 6, 8, 10]], [[3, 6, 9, 12, 15]]]", "input_output_examples": "[[[[1, 3, 5, 9, 11, 13]]], [[7]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.1431984785579781}}
{"requirement": "def num_blocks(w: int, l: int, h: int) -> float:\n\"\"\"Consider a pyramid made up of blocks. Each layer of the pyramid is a rectangle of blocks, and the dimensions of these rectangles increment as you descend the pyramid. So, if a layer is a `3x6` rectangle of blocks, then the next layer will be a `4x7` rectangle of blocks. A `1x10` layer will be on top of a `2x11` layer on top of a `3x12` layer, and so on.\n\n## Task\n\nGiven the dimensions of a pyramid's topmost layer `w,l`, and its height `h` (aka the number of layers), return the total number of blocks in the pyramid.\n\n## Notes\n\nAll parameters will always be postive nonzero integers.\n\nEfficiency is important. There will be:\n\n* 100 'small' cases with `w`, `l`, and `h` below `20`.\n* 100 'big' cases with `w`, `l`, and `h` between `1e9` and `1e10`.\n\"\"\"", "inputs": [[1, 1, 2], [2, 4, 3], [1, 10, 10], [20, 30, 40]], "outputs": [[5], [47], [880], [83540]], "starter_code": "def num_blocks(w: int, l: int, h: int) -> float:", "canonical_solution": "def num_blocks(w, l, h):\n    return w * l * h + (w + l) * h * (h - 1) / 2 + h * (h - 1) * (2 * h - 1) / 6", "entry_point": "num_blocks", "task_id": "TACO_lite/176", "input_output_examples": "[[[1, 1, 2], [2, 4, 3]], [[5], [47]]]", "llm_generated_inputs": "[[1, 1, 1], [2, 2, 2], [3, 6, 5], [10, 10, 10], [19, 19, 19], [1, 10, 1], [10, 1, 1], [1, 1, 10], [10, 10, 1], [10, 1, 10], [1, 10, 10], [1000000000, 1000000000, 1000000000], [1000000000, 1, 1000000000], [1, 1000000000, 1000000000], [1000000000, 1000000000, 1], [1, 1000000000, 1], [1000000000, 1, 1], [1, 1, 1000000000], [1000000000, 1000000000, 1000000000], [999999999, 999999999, 999999999]]", "clusters": {"cluster_list": [{"programs_str": ["def num_blocks(w: int, l: int, h: int) -> float:\n    return sum(((w + i) * (l + i) for i in range(h)))", "def num_blocks(w: int, l: int, h: int) -> float:\n    return sum(((w + i) * (l + i) for i in range(h)))", "def num_blocks(w: int, l: int, h: int) -> float:\n    return sum(((w + i) * (l + i) for i in range(h)))", "def num_blocks(w: int, l: int, h: int) -> float:\n    return sum(((w + i) * (l + i) for i in range(h)))", "def num_blocks(w: int, l: int, h: int) -> float:\n    return sum(((w + i) * (l + i) for i in range(h)))", "def num_blocks(w: int, l: int, h: int) -> float:\n    return sum(((w + i) * (l + i) for i in range(h)))", "def num_blocks(w: int, l: int, h: int) -> float:\n    return sum(((w + i) * (l + i) for i in range(h)))", "def num_blocks(w: int, l: int, h: int) -> float:\n    return sum(((w + i) * (l + i) for i in range(h)))", "def num_blocks(w: int, l: int, h: int) -> float:\n    return sum(((w + i) * (l + i) for i in range(h)))", "def num_blocks(w: int, l: int, h: int) -> float:\n    return sum(((w + i) * (l + i) for i in range(h)))", "def num_blocks(w: int, l: int, h: int) -> float:\n    return sum(((w + i) * (l + i) for i in range(h)))", "def num_blocks(w: int, l: int, h: int) -> float:\n    return sum(((w + i) * (l + i) for i in range(h)))", "def num_blocks(w: int, l: int, h: int) -> float:\n    return sum(((w + i) * (l + i) for i in range(h)))", "def num_blocks(w: int, l: int, h: int) -> float:\n    return sum(((w + i) * (l + i) for i in range(h)))", "def num_blocks(w: int, l: int, h: int) -> float:\n    return sum(((w + i) * (l + i) for i in range(h)))", "def num_blocks(w: int, l: int, h: int) -> float:\n    return sum(((w + i) * (l + i) for i in range(h)))", "def num_blocks(w: int, l: int, h: int) -> float:\n    return sum(((w + i) * (l + i) for i in range(h)))", "def num_blocks(w: int, l: int, h: int) -> float:\n    return sum(((w + i) * (l + i) for i in range(h)))", "def num_blocks(w: int, l: int, h: int) -> float:\n    return sum(((w + i) * (l + i) for i in range(h)))", "def num_blocks(w: int, l: int, h: int) -> float:\n    return sum(((w + i) * (l + i) for i in range(h)))"], "outputs": "[[1], [13], [210], [2185], [15466], [10], [10], [385], [100], [880], [880], 'Timeout', 'Timeout', 'Timeout', [1000000000000000000], [1000000000], [1000000000], 'Timeout', 'Timeout', 'Timeout']", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1, 1, 1], [2, 2, 2], [3, 6, 5], [10, 10, 10], [19, 19, 19], [1, 10, 1], [10, 1, 1], [1, 1, 10], [10, 10, 1], [10, 1, 10], [1, 10, 10], [1000000000, 1000000000, 1000000000], [1000000000, 1, 1000000000], [1, 1000000000, 1000000000], [1000000000, 1000000000, 1], [1, 1000000000, 1], [1000000000, 1, 1], [1, 1, 1000000000], [1000000000, 1000000000, 1000000000], [999999999, 999999999, 999999999]]", "input_output_examples": "[[[1, 1, 2], [2, 4, 3]], [[5], [47]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "from typing import List\n\n\ndef calc(a: List[int]) -> int:\n\"\"\"# Task\n\nJohn won the championship of a TV show. He can get some bonuses.\n\nHe needs to play a game to determine the amount of his bonus.\n\nHere are some cards in a row. A number is written on each card.\n\nIn each turn, John can take a card, but only from the beginning or the end of the row. Then multiply the number on the card by an coefficient 2^(i)(i means the ith turn). The product is John's bonus of current turn.\n\nAfter all the cards are taken away, the game is over. John's final bonus is the sum of all rounds of bonuses.\n\nObviously, the order in which John takes the cards will affect the amount of John's final bonus.\n\nYour task is to help John calculate the maximum amount of bonuses he can get.\n\n# Input\n\n- `cards`: An integer array. Each element represents the number on the card.\n  - `1 <= cards.length <= 30`\n  - `1 <= cards[i] <= 100`\n\n\n- All inputs are valid.\n\n# Output\n\nAn integer. the maximum amount of bonuses John can get.\n\"\"\"", "inputs": [[[1, 2, 5]], [[1]], [[1, 1]], [[1, 2, 1]], [[4, 10, 2, 3, 1, 3, 1, 6, 9]]], "outputs": [[50], [2], [6], [22], [6722]], "starter_code": "from typing import List\ndef calc(a: List[int]) -> int:", "canonical_solution": "def calc(a):\n    res = [0] * (len(a) + 1)\n    for k in range(len(a)):\n        res = [2 * max(a[i] + res[i + 1], a[i + k] + res[i]) for i in range(len(a) - k)]\n    return res[0]", "entry_point": "calc", "task_id": "TACO_lite/182", "input_output_examples": "[[[[1, 2, 5]]], [[50]]]", "llm_generated_inputs": "[[[1]], [[1, 2]], [[3, 1, 5, 4]], [[10, 20, 30, 40, 50]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]], [[30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef calc(cards: List[int]) -> int:\n\n    def dp(l: int, r: int, turn: int) -> int:\n        if l > r:\n            return 0\n        pick_left = cards[l] * 2 ** turn + dp(l + 1, r, turn + 1)\n        pick_right = cards[r] * 2 ** turn + dp(l, r - 1, turn + 1)\n        return max(pick_left, pick_right)\n    return dp(0, len(cards) - 1, 0)", "from typing import List\n\ndef calc(cards: List[int]) -> int:\n\n    def dp(i: int, j: int, turn: int) -> int:\n        if i > j:\n            return 0\n        pick_left = 2 ** turn * cards[i] + dp(i + 1, j, turn + 1)\n        pick_right = 2 ** turn * cards[j] + dp(i, j - 1, turn + 1)\n        return max(pick_left, pick_right)\n    return dp(0, len(cards) - 1, 0)", "from typing import List\n\ndef calc(cards: List[int]) -> int:\n\n    def dfs(left: int, right: int, turn: int) -> int:\n        if left > right:\n            return 0\n        take_left = 2 ** turn * cards[left] + dfs(left + 1, right, turn + 1)\n        take_right = 2 ** turn * cards[right] + dfs(left, right - 1, turn + 1)\n        return max(take_left, take_right)\n    return dfs(0, len(cards) - 1, 0)", "from typing import List\n\ndef calc(cards: List[int]) -> int:\n\n    def dp(left: int, right: int, turn: int) -> int:\n        if left > right:\n            return 0\n        take_left = cards[left] * 2 ** turn + dp(left + 1, right, turn + 1)\n        take_right = cards[right] * 2 ** turn + dp(left, right - 1, turn + 1)\n        return max(take_left, take_right)\n    return dp(0, len(cards) - 1, 0)", "from typing import List\n\ndef calc(cards: List[int]) -> int:\n\n    def dp(i: int, j: int, turn: int) -> int:\n        if i > j:\n            return 0\n        pick_left = 2 ** turn * cards[i] + dp(i + 1, j, turn + 1)\n        pick_right = 2 ** turn * cards[j] + dp(i, j - 1, turn + 1)\n        return max(pick_left, pick_right)\n    return dp(0, len(cards) - 1, 0)", "from typing import List\n\ndef calc(cards: List[int]) -> int:\n\n    def dp(left: int, right: int, turn: int) -> int:\n        if left > right:\n            return 0\n        take_left = cards[left] * 2 ** turn + dp(left + 1, right, turn + 1)\n        take_right = cards[right] * 2 ** turn + dp(left, right - 1, turn + 1)\n        return max(take_left, take_right)\n    return dp(0, len(cards) - 1, 0)", "from typing import List\n\ndef calc(cards: List[int]) -> int:\n\n    def dp(left: int, right: int, turn: int) -> int:\n        if left > right:\n            return 0\n        take_left = 2 ** turn * cards[left] + dp(left + 1, right, turn + 1)\n        take_right = 2 ** turn * cards[right] + dp(left, right - 1, turn + 1)\n        return max(take_left, take_right)\n    return dp(0, len(cards) - 1, 0)", "from typing import List\n\ndef calc(cards: List[int]) -> int:\n\n    def dfs(left, right, turn):\n        if left > right:\n            return 0\n        pick_left = 2 ** turn * cards[left] + dfs(left + 1, right, turn + 1)\n        pick_right = 2 ** turn * cards[right] + dfs(left, right - 1, turn + 1)\n        return max(pick_left, pick_right)\n    return dfs(0, len(cards) - 1, 0)", "from typing import List\n\ndef calc(cards: List[int]) -> int:\n\n    def dp(left: int, right: int, turn: int) -> int:\n        if left > right:\n            return 0\n        take_left = cards[left] * 2 ** turn + dp(left + 1, right, turn + 1)\n        take_right = cards[right] * 2 ** turn + dp(left, right - 1, turn + 1)\n        return max(take_left, take_right)\n    return dp(0, len(cards) - 1, 0)", "from typing import List\n\ndef calc(cards: List[int]) -> int:\n\n    def dp(left, right, turn):\n        if left > right:\n            return 0\n        take_left = cards[left] * 2 ** turn + dp(left + 1, right, turn + 1)\n        take_right = cards[right] * 2 ** turn + dp(left, right - 1, turn + 1)\n        return max(take_left, take_right)\n    return dp(0, len(cards) - 1, 0)", "from typing import List\n\ndef calc(cards: List[int]) -> int:\n\n    def dfs(left, right, turn):\n        if left > right:\n            return 0\n        pick_left = cards[left] * 2 ** turn + dfs(left + 1, right, turn + 1)\n        pick_right = cards[right] * 2 ** turn + dfs(left, right - 1, turn + 1)\n        return max(pick_left, pick_right)\n    return dfs(0, len(cards) - 1, 0)", "from typing import List\n\ndef calc(cards: List[int]) -> int:\n\n    def dp(i, j, turn):\n        if i > j:\n            return 0\n        take_left = 2 ** turn * cards[i] + dp(i + 1, j, turn + 1)\n        take_right = 2 ** turn * cards[j] + dp(i, j - 1, turn + 1)\n        return max(take_left, take_right)\n    return dp(0, len(cards) - 1, 0)", "from typing import List\n\ndef calc(cards: List[int]) -> int:\n\n    def dfs(left, right, turn):\n        if left > right:\n            return 0\n        pick_left = 2 ** turn * cards[left] + dfs(left + 1, right, turn + 1)\n        pick_right = 2 ** turn * cards[right] + dfs(left, right - 1, turn + 1)\n        return max(pick_left, pick_right)\n    return dfs(0, len(cards) - 1, 0)", "from typing import List\n\ndef calc(cards: List[int]) -> int:\n\n    def dp(left: int, right: int, turn: int) -> int:\n        if left > right:\n            return 0\n        take_left = 2 ** turn * cards[left] + dp(left + 1, right, turn + 1)\n        take_right = 2 ** turn * cards[right] + dp(left, right - 1, turn + 1)\n        return max(take_left, take_right)\n    return dp(0, len(cards) - 1, 0)", "from typing import List\n\ndef calc(cards: List[int]) -> int:\n\n    def dfs(left, right, turn):\n        if left > right:\n            return 0\n        take_left = cards[left] * 2 ** turn + dfs(left + 1, right, turn + 1)\n        take_right = cards[right] * 2 ** turn + dfs(left, right - 1, turn + 1)\n        return max(take_left, take_right)\n    return dfs(0, len(cards) - 1, 0)", "from typing import List\n\ndef calc(cards: List[int]) -> int:\n\n    def dp(i, j, turn):\n        if i > j:\n            return 0\n        take_left = cards[i] * 2 ** turn + dp(i + 1, j, turn + 1)\n        take_right = cards[j] * 2 ** turn + dp(i, j - 1, turn + 1)\n        return max(take_left, take_right)\n    return dp(0, len(cards) - 1, 0)", "from typing import List\n\ndef calc(cards: List[int]) -> int:\n\n    def dfs(left: int, right: int, turn: int) -> int:\n        if left > right:\n            return 0\n        take_left = 2 ** turn * cards[left] + dfs(left + 1, right, turn + 1)\n        take_right = 2 ** turn * cards[right] + dfs(left, right - 1, turn + 1)\n        return max(take_left, take_right)\n    return dfs(0, len(cards) - 1, 0)", "from typing import List\n\ndef calc(cards: List[int]) -> int:\n\n    def dp(l, r, turn):\n        if l > r:\n            return 0\n        return max(2 ** turn * cards[l] + dp(l + 1, r, turn + 1), 2 ** turn * cards[r] + dp(l, r - 1, turn + 1))\n    return dp(0, len(cards) - 1, 0)", "from typing import List\n\ndef calc(cards: List[int]) -> int:\n\n    def dfs(left: int, right: int, turn: int) -> int:\n        if left > right:\n            return 0\n        take_left = 2 ** turn * cards[left] + dfs(left + 1, right, turn + 1)\n        take_right = 2 ** turn * cards[right] + dfs(left, right - 1, turn + 1)\n        return max(take_left, take_right)\n    return dfs(0, len(cards) - 1, 0)", "from typing import List\n\ndef calc(cards: List[int]) -> int:\n\n    def dp(left: int, right: int, turn: int) -> int:\n        if left > right:\n            return 0\n        take_left = 2 ** turn * cards[left] + dp(left + 1, right, turn + 1)\n        take_right = 2 ** turn * cards[right] + dp(left, right - 1, turn + 1)\n        return max(take_left, take_right)\n    return dp(0, len(cards) - 1, 0)"], "outputs": "[[1], [5], [61], [1290], 'Timeout', 'Timeout', 'Timeout', 'Timeout']", "probability": 1.0, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 2, 5]], [25], [50]]]"}], "entropy": 0, "llm_generated_inputs": "[[[1]], [[1, 2]], [[3, 1, 5, 4]], [[10, 20, 30, 40, 50]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]], [[30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]]", "input_output_examples": "[[[[1, 2, 5]]], [[50]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false, "ambiguity": 0.5}}
{"requirement": "def finance(n: int) -> float:\n\"\"\"I need to save some money to buy a gift. I think I can do something like that:\n\nFirst week (W0) I save nothing on Sunday, 1 on Monday, 2 on Tuesday... 6 on Saturday,\nsecond week (W1) 2 on Monday... 7 on Saturday and so on according to the table below where the days are numbered from 0 to 6.\n\nImagine now that we live on planet XY140Z-n where the days of the week are numbered from 0 to n (integer n > 0) and where\nI save from week number 0 to week number n included (in the table below n = 6).\n\nHow much money would I have at the end of my financing plan on planet XY140Z-n?\n\n\"\"\"", "inputs": [[5], [6], [8], [15], [100], [365], [730], [999], [2000], [4000], [5000]], "outputs": [[105], [168], [360], [2040], [515100], [24513765], [195308580], [499999500], [4006002000], [32024004000], [62537505000]], "starter_code": "def finance(n: int) -> float:", "canonical_solution": "def finance(n):\n    return n * (n + 1) * (n + 2) / 2", "entry_point": "finance", "task_id": "TACO_lite/185", "input_output_examples": "[[[5], [6], [7], [5000]], [[105], [168], [252], [62537505000]]]", "llm_generated_inputs": "[[1], [2], [3], [6], [10], [0], [-5]]", "clusters": {"cluster_list": [{"programs_str": ["def finance(n: int) -> float:\n    total_savings = 0\n    for week in range(n + 1):\n        for day in range(n + 1):\n            total_savings += week + day + 1\n    return total_savings", "def finance(n: int) -> float:\n    total_savings = 0\n    for week in range(n + 1):\n        for day in range(n + 1):\n            total_savings += week + day + 1\n    return total_savings", "def finance(n: int) -> float:\n    total_savings = 0\n    for week in range(n + 1):\n        for day in range(n + 1):\n            total_savings += week + day + 1\n    return total_savings", "def finance(n: int) -> float:\n    total_savings = 0\n    for week in range(n + 1):\n        for day in range(n + 1):\n            total_savings += week + day + 1\n    return total_savings", "def finance(n: int) -> float:\n    total_savings = 0\n    for week in range(n + 1):\n        for day in range(n + 1):\n            total_savings += day + 1 + week\n    return total_savings", "def finance(n: int) -> float:\n    total_savings = 0\n    for week in range(n + 1):\n        for day in range(n + 1):\n            total_savings += week + day + 1\n    return total_savings"], "outputs": "[[8], [27], [64], [343], [1331], [1], [0]]", "probability": 0.3, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[5], [216], [105]], [[6], [343], [168]], [[7], [512], [252]], [[5000], 'Timeout', [62537505000]]]"}, {"programs_str": ["def finance(n: int) -> float:\n    total_savings = 0\n    for week in range(n + 1):\n        for day in range(n + 1):\n            total_savings += day + week\n    return total_savings", "def finance(n: int) -> float:\n    total_savings = 0\n    for week in range(n + 1):\n        for day in range(n + 1):\n            total_savings += day + week\n    return total_savings", "def finance(n: int) -> float:\n    total_savings = 0\n    for week in range(n + 1):\n        for day in range(n + 1):\n            total_savings += day + week\n    return total_savings", "def finance(n: int) -> float:\n    total_savings = 0\n    for week in range(n + 1):\n        for day in range(n + 1):\n            total_savings += day + week\n    return total_savings", "def finance(n: int) -> float:\n    total_savings = 0\n    for week in range(n + 1):\n        for day in range(n + 1):\n            total_savings += day + week\n    return total_savings", "def finance(n: int) -> float:\n    total_savings = 0\n    for week in range(n + 1):\n        for day in range(n + 1):\n            total_savings += day + week\n    return total_savings", "def finance(n: int) -> float:\n    total_savings = 0\n    for week in range(n + 1):\n        for day in range(n + 1):\n            total_savings += day + week\n    return total_savings", "def finance(n: int) -> float:\n    total_savings = 0\n    for week in range(n + 1):\n        for day in range(n + 1):\n            total_savings += day + week\n    return total_savings", "def finance(n: int) -> float:\n    total_savings = 0\n    for week in range(n + 1):\n        for day in range(n + 1):\n            total_savings += day + week\n    return total_savings", "def finance(n: int) -> float:\n    total_savings = 0\n    for week in range(n + 1):\n        for day in range(n + 1):\n            total_savings += week + day\n    return total_savings", "def finance(n: int) -> float:\n    total_savings = 0\n    for week in range(n + 1):\n        for day in range(n + 1):\n            total_savings += week + day\n    return total_savings", "def finance(n: int) -> float:\n    total_savings = 0\n    for week in range(n + 1):\n        for day in range(n + 1):\n            total_savings += day + week\n    return total_savings", "def finance(n: int) -> float:\n    total_savings = 0\n    for week in range(n + 1):\n        for day in range(n + 1):\n            total_savings += day + week\n    return total_savings", "def finance(n: int) -> float:\n    total_savings = 0\n    for week in range(n + 1):\n        for day in range(n + 1):\n            total_savings += week + day\n    return total_savings"], "outputs": "[[4], [18], [48], [294], [1210], [0], [0]]", "probability": 0.7, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[5], [180], [105]], [[6], [294], [168]], [[7], [448], [252]], [[5000], [125050005000], [62537505000]]]"}], "entropy": 0.8812908992306927, "llm_generated_inputs": "[[1], [2], [3], [6], [10], [0], [-5]]", "input_output_examples": "[[[5], [6], [7], [5000]], [[105], [168], [252], [62537505000]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false, "ambiguity": 0.9406454496153464}}
{"requirement": "def womens_age(n: int) -> str:\n\"\"\"As you may know, once some people pass their teens, they jokingly only celebrate their 20th or 21st birthday, forever. With some maths skills, that's totally possible - you only need to select the correct number base!\n\nYour task is to translate the given age to the much desired 20 (or 21) years, and indicate the number base, in the format specified below.\n\n**Note:** input will be always > 21\n\n*Hint: if you don't know (enough) about [numeral systems](https://en.wikipedia.org/wiki/Numeral_system) and [radix](https://en.wikipedia.org/wiki/Radix), just observe the pattern!*\n\n---\n\n## My other katas\n\nIf you enjoyed this kata then please try [my other katas](https://www.codewars.com/collections/katas-created-by-anter69)! :-)\n\n---\n\n### *Translations are welcome!*\n\"\"\"", "inputs": [[32], [39], [22], [65], [83]], "outputs": [["32? That's just 20, in base 16!"], ["39? That's just 21, in base 19!"], ["22? That's just 20, in base 11!"], ["65? That's just 21, in base 32!"], ["83? That's just 21, in base 41!"]], "starter_code": "def womens_age(n: int) -> str:", "canonical_solution": "def womens_age(n):\n    return f\"{n}? That's just {20 + n % 2}, in base {n // 2}!\"", "entry_point": "womens_age", "task_id": "TACO_lite/186", "input_output_examples": "[[[32], [39]], [[\"32? That's just 20, in base 16!\"], [\"39? That's just 21, in base 19!\"]]]", "llm_generated_inputs": "[[22], [23], [40], [81], [100], [255], [1000], [2047], [2048], [4095]]", "clusters": {"cluster_list": [{"programs_str": ["def womens_age(n: int) -> str:\n    for base in range(22, n):\n        if n % base == 20 or n % base == 21:\n            return f'{n} in base {base} = {n % base}'", "def womens_age(n: int) -> str:\n    for base in range(22, n):\n        if n % base == 20 or n % base == 21:\n            return f'{n} in base {base} = {(20 if n % base == 20 else 21)}'", "def womens_age(n: int) -> str:\n    for base in range(22, n):\n        if n % base == 20 or n % base == 21:\n            return f'{n} in base {base} = {(20 if n % base == 20 else 21)}'", "def womens_age(n: int) -> str:\n    for base in range(22, n):\n        if n % base == 20 or n % base == 21:\n            return f'{n} in base {base} = {(20 if n % base == 20 else 21)}'", "def womens_age(n: int) -> str:\n    for base in range(22, n):\n        if n % base == 20 or n % base == 21:\n            return f'{n} in base {base} = {(20 if n % base == 20 else 21)}'", "def womens_age(n: int) -> str:\n    for base in range(22, n):\n        if n % base == 20 or n % base == 21:\n            return f'{n} in base {base} = {n % base}'", "def womens_age(n: int) -> str:\n    for base in range(22, n):\n        if n % base == 20 or n % base == 21:\n            return f'{n} in base {base} = {(20 if n % base == 20 else 21)}'", "def womens_age(n: int) -> str:\n    for base in range(22, n):\n        if n % base == 20 or n % base == 21:\n            return f'{n} in base {base} = {(20 if n % base == 20 else 21)}'", "def womens_age(n: int) -> str:\n    for base in range(22, n):\n        if n % base == 20 or n % base == 21:\n            return f'{n} in base {base} = {(20 if n % base == 20 else 21)}'", "def womens_age(n: int) -> str:\n    for base in range(22, n):\n        if n % base == 20 or n % base == 21:\n            return f'{n} in base {base} = {(20 if n % base == 20 else 21)}'", "def womens_age(n: int) -> str:\n    for base in range(22, n):\n        if n % base == 20 or n % base == 21:\n            return f'{n} in base {base} = {n % base}'", "def womens_age(n: int) -> str:\n    for base in range(22, n):\n        if n % base == 20 or n % base == 21:\n            return f'{n} in base {base} = {(20 if n % base == 20 else 21)}'", "def womens_age(n: int) -> str:\n    for base in range(22, n):\n        if n % base == 20 or n % base == 21:\n            return f'{n} in base {base} = {n % base}'"], "outputs": "[[None], [None], [None], ['81 in base 30 = 21'], ['100 in base 40 = 20'], ['255 in base 26 = 21'], ['1000 in base 28 = 20'], ['2047 in base 1013 = 21'], ['2048 in base 26 = 20'], ['4095 in base 25 = 20']]", "probability": 0.65, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[32], [None], [\"32? That's just 20, in base 16!\"]], [[39], [None], [\"39? That's just 21, in base 19!\"]]]"}, {"programs_str": ["def womens_age(n: int) -> str:\n    for base in range(22, n):\n        if n == base + 1:\n            return f'{n} in base {base} = 21'\n        elif n == base:\n            return f'{n} in base {base} = 20'", "def womens_age(n: int) -> str:\n    for base in range(22, n):\n        if n == base + 1:\n            return f'{n} in base {base} = 21'\n        elif n == base:\n            return f'{n} in base {base} = 20'", "def womens_age(n: int) -> str:\n    for base in range(22, n):\n        if n == base + 1:\n            return f'{n} in base {base} = 21'\n        elif n == base:\n            return f'{n} in base {base} = 20'", "def womens_age(n: int) -> str:\n    for base in range(22, n):\n        if n == base + 1:\n            return f'{n} in base {base} = 21'\n        elif n == base:\n            return f'{n} in base {base} = 20'"], "outputs": "[[None], ['23 in base 22 = 21'], ['40 in base 39 = 21'], ['81 in base 80 = 21'], ['100 in base 99 = 21'], ['255 in base 254 = 21'], ['1000 in base 999 = 21'], ['2047 in base 2046 = 21'], ['2048 in base 2047 = 21'], ['4095 in base 4094 = 21']]", "probability": 0.2, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[32], ['32 in base 31 = 21'], [\"32? That's just 20, in base 16!\"]], [[39], ['39 in base 38 = 21'], [\"39? That's just 21, in base 19!\"]]]"}, {"programs_str": ["def womens_age(n: int) -> str:\n    for base in range(22, n):\n        if n == 20 * base + 1:\n            return f'{n} in base {base} = 21'\n        elif n == 20 * base:\n            return f'{n} in base {base} = 20'"], "outputs": "[[None], [None], [None], [None], [None], [None], ['1000 in base 50 = 20'], [None], [None], [None]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[32], [None], [\"32? That's just 20, in base 16!\"]], [[39], [None], [\"39? That's just 21, in base 19!\"]]]"}, {"programs_str": ["def womens_age(n: int) -> str:\n    for base in range(22, n):\n        if n == int('20', base):\n            return f'{n} in base {base} = 20'\n        elif n == int('21', base):\n            return f'{n} in base {base} = 21'", "def womens_age(n: int) -> str:\n    for base in range(22, n):\n        if n == int('20', base):\n            return f'{n} in base {base} = 20'\n        elif n == int('21', base):\n            return f'{n} in base {base} = 21'"], "outputs": "[[None], [None], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError']]", "probability": 0.1, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[32], [None], [\"32? That's just 20, in base 16!\"]], [[39], ['ValueError'], [\"39? That's just 21, in base 19!\"]]]"}], "entropy": 0.7083211390478262, "llm_generated_inputs": "[[22], [23], [40], [81], [100], [255], [1000], [2047], [2048], [4095]]", "input_output_examples": "[[[32], [39]], [[\"32? That's just 20, in base 16!\"], [\"39? That's just 21, in base 19!\"]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false, "ambiguity": 0.8541605695239132}}
{"requirement": "from typing import List\n\n\ndef istree(matrix: List[List[int]]) -> bool:\n\"\"\"In graph theory, a graph is a collection of nodes with connections between them.\nAny node can be connected to any other node exactly once, and can be connected to no nodes, to some nodes, or to every other node.\nNodes cannot be connected to themselves\nA path through a graph is a sequence of nodes, with every node connected to the node following and preceding it.\nA closed path is a path which starts and ends at the same node.\n\nA graph is connected if there is a path from every node to every other node.\nA graph is a tree if it is connected and there are no closed paths.\n\nYour job is to write a function 'istree', which returns true if a graph is a tree, and false if it is not a tree.\n\nGraphs will be given as an array with each item being an array of integers which are the nodes that node is connected to.\n\nA node with no connections is an empty array\nNote that if node 0 is connected to node 1, node 1 is also connected to node 0. This will always be true.\nThe order in which each connection is listed for each node also does not matter.\n\nGood luck!\n\"\"\"", "inputs": [[[[], []]], [[[1], [0]]], [[[1, 2], [0, 2], [0, 1]]], [[[1, 2, 3], [0, 2], [1, 2], [0]]], [[[1, 2, 3], [0], [0], [0, 4], [3]]], [[[1, 2, 3], [0], [0], [0, 4], [3], []]], [[[1], [0, 2], [1, 3, 5], [2, 4], [3, 5], [4, 2]]], [[[1], [0, 2, 3, 4], [1], [1], [1]]], [[[1], [0, 2, 3], [1], [1], [5], [4, 6, 7], [5], [5]]], [[[1, 2], [0, 3], [0, 3], [1, 2, 4], [3]]], [[[1, 2], [0, 2], [0, 1], []]], [[[1, 2], [0, 2], [0, 1], [4], [3]]]], "outputs": [[false], [true], [false], [false], [true], [false], [false], [true], [false], [false], [false], [false]], "starter_code": "from typing import List\ndef istree(matrix: List[List[int]]) -> bool:", "canonical_solution": "def istree(matrix):\n    visited_nodes = set([0])\n    crossed_edges = set()\n    agenda = [0]\n    while agenda:\n        node = agenda.pop()\n        for i in matrix[node]:\n            if (node, i) in crossed_edges:\n                continue\n            if i in visited_nodes:\n                return False\n            agenda.append(i)\n            crossed_edges.add((i, node))\n            visited_nodes.add(i)\n    return len(visited_nodes) == len(matrix)", "entry_point": "istree", "task_id": "TACO_lite/188", "input_output_examples": "[[[[[1, 2], [0, 3], [0, 3], [1, 2, 4], [3]]]], [[False]]]", "llm_generated_inputs": "[[[[], [2], [1]]], [[[1, 2], [0, 3], [0], [1]]], [[[1], [0, 2], [1]]], [[[1, 2], [0, 3], [0, 4], [1], [2]]], [[[1, 2], [0, 3], [0], [1, 4], [3]]], [[[1, 2], [0], [0]]], [[[], [], []]], [[[1, 2, 3], [0, 3], [0, 3], [0, 1, 2]]], [[[1], [0, 2, 3], [1], [1]]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef istree(matrix: List[List[int]]) -> bool:\n\n    def dfs(node: int, visited: set, parent: int) -> bool:\n        visited.add(node)\n        for neighbor in matrix[node]:\n            if neighbor == parent:\n                continue\n            if neighbor in visited or not dfs(neighbor, visited, node):\n                return False\n        return True\n    visited = set()\n    if not dfs(0, visited, -1):\n        return False\n    return len(visited) == len(matrix)", "from typing import List, Set\nfrom collections import deque\n\ndef istree(matrix: List[List[int]]) -> bool:\n\n    def bfs(start: int) -> bool:\n        visited = set()\n        queue = deque([start])\n        while queue:\n            node = queue.popleft()\n            if node in visited:\n                return False\n            visited.add(node)\n            for neighbor in matrix[node]:\n                if neighbor not in visited:\n                    queue.append(neighbor)\n        return len(visited) == len(matrix)\n    if not matrix:\n        return True\n    return bfs(0)", "from typing import List\n\ndef istree(matrix: List[List[int]]) -> bool:\n    n = len(matrix)\n    visited = [False] * n\n\n    def dfs(node: int, parent: int) -> bool:\n        visited[node] = True\n        for neighbor in matrix[node]:\n            if neighbor == parent:\n                continue\n            if visited[neighbor] or not dfs(neighbor, node):\n                return False\n        return True\n    if not dfs(0, -1):\n        return False\n    return all(visited)", "from typing import List, Set\n\ndef istree(matrix: List[List[int]]) -> bool:\n\n    def dfs(node: int, visited: Set[int], parent: int) -> bool:\n        visited.add(node)\n        for neighbor in matrix[node]:\n            if neighbor == parent:\n                continue\n            if neighbor in visited or not dfs(neighbor, visited, node):\n                return False\n        return True\n    if not matrix:\n        return True\n    visited = set()\n    if not dfs(0, visited, -1):\n        return False\n    return len(visited) == len(matrix)", "from typing import List\nfrom collections import deque\n\ndef istree(matrix: List[List[int]]) -> bool:\n    if not matrix:\n        return True\n    n = len(matrix)\n    visited = [False] * n\n    queue = deque([0])\n    visited[0] = True\n    parent = [-1] * n\n    while queue:\n        current = queue.popleft()\n        for neighbor in matrix[current]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                queue.append(neighbor)\n                parent[neighbor] = current\n            elif parent[current] != neighbor:\n                return False\n    return all(visited)", "from typing import List\n\ndef istree(matrix: List[List[int]]) -> bool:\n\n    def dfs(node, visited, parent):\n        visited[node] = True\n        for neighbor in matrix[node]:\n            if not visited[neighbor]:\n                if not dfs(neighbor, visited, node):\n                    return False\n            elif neighbor != parent:\n                return False\n        return True\n    n = len(matrix)\n    visited = [False] * n\n    if not dfs(0, visited, -1):\n        return False\n    return all(visited)", "from typing import List, Set\nfrom collections import deque\n\ndef istree(matrix: List[List[int]]) -> bool:\n    if not matrix:\n        return True\n    n = len(matrix)\n    visited: Set[int] = set()\n    queue = deque([0])\n    while queue:\n        node = queue.popleft()\n        if node in visited:\n            return False\n        visited.add(node)\n        for neighbor in matrix[node]:\n            if neighbor not in visited:\n                queue.append(neighbor)\n    return len(visited) == n and sum((len(neighbors) for neighbors in matrix)) // 2 == n - 1", "from typing import List\n\ndef istree(matrix: List[List[int]]) -> bool:\n\n    def dfs(node, visited, parent):\n        visited[node] = True\n        for neighbor in matrix[node]:\n            if not visited[neighbor]:\n                if not dfs(neighbor, visited, node):\n                    return False\n            elif neighbor != parent:\n                return False\n        return True\n    n = len(matrix)\n    visited = [False] * n\n    if not dfs(0, visited, -1):\n        return False\n    return all(visited)", "from typing import List\nfrom collections import deque\n\ndef istree(matrix: List[List[int]]) -> bool:\n    if not matrix:\n        return False\n    n = len(matrix)\n    visited = [False] * n\n    queue = deque([0])\n    visited[0] = True\n    parent = [-1] * n\n    while queue:\n        current = queue.popleft()\n        for neighbor in matrix[current]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                parent[neighbor] = current\n                queue.append(neighbor)\n            elif parent[current] != neighbor:\n                return False\n    return all(visited)", "from typing import List, Set\n\ndef istree(matrix: List[List[int]]) -> bool:\n\n    def dfs(node: int, visited: Set[int], parent: int) -> bool:\n        visited.add(node)\n        for neighbor in matrix[node]:\n            if neighbor == parent:\n                continue\n            if neighbor in visited or not dfs(neighbor, visited, node):\n                return False\n        return True\n    n = len(matrix)\n    visited = set()\n    if not dfs(0, visited, -1):\n        return False\n    return len(visited) == n", "from typing import List\nfrom collections import deque\n\ndef istree(matrix: List[List[int]]) -> bool:\n    if not matrix:\n        return True\n    n = len(matrix)\n    visited = [False] * n\n    queue = deque([0])\n    visited[0] = True\n    parent = [-1] * n\n    while queue:\n        current = queue.popleft()\n        for neighbor in matrix[current]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                queue.append(neighbor)\n                parent[neighbor] = current\n            elif parent[current] != neighbor:\n                return False\n    return all(visited)", "from typing import List\n\ndef istree(matrix: List[List[int]]) -> bool:\n\n    def dfs(node: int, parent: int) -> bool:\n        visited[node] = True\n        for neighbor in matrix[node]:\n            if not visited[neighbor]:\n                if not dfs(neighbor, node):\n                    return False\n            elif neighbor != parent:\n                return False\n        return True\n    n = len(matrix)\n    visited = [False] * n\n    if not dfs(0, -1):\n        return False\n    return all(visited)", "from typing import List\n\ndef istree(matrix: List[List[int]]) -> bool:\n\n    def dfs(node: int, visited: set, parent: int) -> bool:\n        visited.add(node)\n        for neighbor in matrix[node]:\n            if neighbor == parent:\n                continue\n            if neighbor in visited or not dfs(neighbor, visited, node):\n                return False\n        return True\n    visited = set()\n    if not dfs(0, visited, -1):\n        return False\n    return len(visited) == len(matrix)", "from typing import List, Set\n\ndef istree(matrix: List[List[int]]) -> bool:\n\n    def dfs(node: int, visited: Set[int], parent: int) -> bool:\n        if node in visited:\n            return False\n        visited.add(node)\n        for neighbor in matrix[node]:\n            if neighbor != parent and (not dfs(neighbor, visited, node)):\n                return False\n        return True\n    visited = set()\n    if not dfs(0, visited, -1):\n        return False\n    return len(visited) == len(matrix)", "from typing import List, Set\n\ndef istree(matrix: List[List[int]]) -> bool:\n\n    def dfs(node: int, visited: Set[int], parent: int) -> bool:\n        if node in visited:\n            return False\n        visited.add(node)\n        for neighbor in matrix[node]:\n            if neighbor != parent and (not dfs(neighbor, visited, node)):\n                return False\n        return True\n    visited = set()\n    if not dfs(0, visited, -1):\n        return False\n    return len(visited) == len(matrix)", "from typing import List, Set\n\ndef istree(matrix: List[List[int]]) -> bool:\n\n    def dfs(node: int, visited: Set[int], parent: int) -> bool:\n        visited.add(node)\n        for neighbor in matrix[node]:\n            if neighbor == parent:\n                continue\n            if neighbor in visited or not dfs(neighbor, visited, node):\n                return False\n        return True\n    visited = set()\n    if not dfs(0, visited, -1):\n        return False\n    return len(visited) == len(matrix)", "from typing import List\nfrom collections import deque\n\ndef istree(matrix: List[List[int]]) -> bool:\n    if not matrix:\n        return True\n    n = len(matrix)\n    visited = [False] * n\n    queue = deque([0])\n    visited[0] = True\n    parent = [-1] * n\n    while queue:\n        current = queue.popleft()\n        for neighbor in matrix[current]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                parent[neighbor] = current\n                queue.append(neighbor)\n            elif parent[current] != neighbor:\n                return False\n    return all(visited)", "from typing import List\nfrom collections import deque\n\ndef istree(matrix: List[List[int]]) -> bool:\n    if not matrix:\n        return True\n    n = len(matrix)\n    visited = [False] * n\n    queue = deque([0])\n    visited[0] = True\n    parent = [-1] * n\n    while queue:\n        current = queue.popleft()\n        for neighbor in matrix[current]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                parent[neighbor] = current\n                queue.append(neighbor)\n            elif parent[current] != neighbor:\n                return False\n    return all(visited)", "from typing import List\nfrom collections import deque\n\ndef istree(matrix: List[List[int]]) -> bool:\n    n = len(matrix)\n    if n == 0:\n        return True\n    visited = [False] * n\n    queue = deque([0])\n    visited[0] = True\n    parent = [-1] * n\n    while queue:\n        node = queue.popleft()\n        for neighbor in matrix[node]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                parent[neighbor] = node\n                queue.append(neighbor)\n            elif parent[node] != neighbor:\n                return False\n    return all(visited)", "from typing import List\nfrom collections import deque\n\ndef istree(matrix: List[List[int]]) -> bool:\n    if not matrix:\n        return True\n    n = len(matrix)\n    visited = [False] * n\n    queue = deque([0])\n    visited[0] = True\n    parent = [-1] * n\n    while queue:\n        current = queue.popleft()\n        for neighbor in matrix[current]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                queue.append(neighbor)\n                parent[neighbor] = current\n            elif parent[current] != neighbor:\n                return False\n    return all(visited)"], "outputs": "[[False], [True], [True], [True], [True], [True], [False], [False], [True]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[], [2], [1]]], [[[1, 2], [0, 3], [0], [1]]], [[[1], [0, 2], [1]]], [[[1, 2], [0, 3], [0, 4], [1], [2]]], [[[1, 2], [0, 3], [0], [1, 4], [3]]], [[[1, 2], [0], [0]]], [[[], [], []]], [[[1, 2, 3], [0, 3], [0, 3], [0, 1, 2]]], [[[1], [0, 2, 3], [1], [1]]]]", "input_output_examples": "[[[[[1, 2], [0, 3], [0, 3], [1, 2, 4], [3]]]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "def graytobinary(n: int) -> int:\n\"\"\"Given N in Gray Code, find its binary equivalent. Return the decimal representation of the binary equivalent.\nYour Task: \nYou don't need to read input or print anything. Your task is to complete the function graytobinary() which accepts an integer n as an input parameter and returns decimal of the binary equivalent of the given gray code. \nExpected Time Complexity: O(log N)\nExpected Auxiliary Space: O(1)\nConstraints:\n0 <= N <= 10^{8}\n\"\"\"", "inputs": [[4], [15], [0]], "outputs": [[7], [10], [0]], "starter_code": "def graytobinary(n: int) -> int:", "canonical_solution": "def graytobinary(n: int) -> int:\n    binary = n\n    while n > 0:\n        n >>= 1\n        binary ^= n\n    return binary", "entry_point": "graytobinary", "task_id": "TACO_lite/189", "input_output_examples": "[[[4], [15], [0]], [[7], [10], [0]]]", "llm_generated_inputs": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [15], [16], [31], [32], [63], [64], [127], [128], [255], [256], [100000000]]", "clusters": {"cluster_list": [{"programs_str": ["def graytobinary(n: int) -> int:\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return n", "def graytobinary(n: int) -> int:\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return n", "def graytobinary(n: int) -> int:\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return n", "def graytobinary(n: int) -> int:\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return n", "def graytobinary(n: int) -> int:\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return n", "def graytobinary(n: int) -> int:\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return n", "def graytobinary(n: int) -> int:\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return n", "def graytobinary(n: int) -> int:\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return n", "def graytobinary(n: int) -> int:\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return n", "def graytobinary(n: int) -> int:\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return n", "def graytobinary(n: int) -> int:\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return n", "def graytobinary(n: int) -> int:\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return n", "def graytobinary(n: int) -> int:\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return n", "def graytobinary(n: int) -> int:\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return n", "def graytobinary(n: int) -> int:\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return n", "def graytobinary(n: int) -> int:\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return n", "def graytobinary(n: int) -> int:\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return n", "def graytobinary(n: int) -> int:\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return n", "def graytobinary(n: int) -> int:\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return n", "def graytobinary(n: int) -> int:\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        n ^= mask\n    return n"], "outputs": "[[0], [1], [3], [2], [7], [6], [4], [5], [15], [10], [31], [21], [63], [42], [127], [85], [255], [170], [511], [111590912]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [15], [16], [31], [32], [63], [64], [127], [128], [255], [256], [100000000]]", "input_output_examples": "[[[4], [15], [0]], [[7], [10], [0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "from typing import List\n\n\ndef switcher(arr: List[str]) -> str:\n\"\"\"Given an array of numbers (in string format), you must return a string. The numbers correspond to the letters of the alphabet in reverse order: a=26, z=1 etc. You should also account for `'!'`, `'?'` and `' '` that are represented by '27', '28' and '29' respectively.\n\nAll inputs will be valid.\n\"\"\"", "inputs": [[["24", "12", "23", "22", "4", "26", "9", "8"]], [["25", "7", "8", "4", "14", "23", "8", "25", "23", "29", "16", "16", "4"]], [["4", "24"]], [["12"]], [["12", "28", "25", "21", "25", "7", "11", "22", "15"]]], "outputs": [["codewars"], ["btswmdsbd kkw"], ["wc"], ["o"], ["o?bfbtpel"]], "starter_code": "from typing import List\ndef switcher(arr: List[str]) -> str:", "canonical_solution": "def switcher(arr):\n    d = {str(i): chr(123 - i) for i in range(1, 27)}\n    d.update({'27': '!'})\n    d.update({'28': '?'})\n    d.update({'29': ' '})\n    d.update({'0': ''})\n    return ''.join([d[str(i)] for i in arr])", "entry_point": "switcher", "task_id": "TACO_lite/190", "input_output_examples": "[[], []]", "llm_generated_inputs": "[[['26']], [['1']], [['27']], [['28']], [['29']], [['15', '12', '15', '22', '11']], [['29', '28', '27']], [['26', '25', '24', '23', '22', '21', '20', '19', '18', '17', '16', '15', '14', '13', '12', '11', '10', '9', '8', '7', '6', '5', '4', '3', '2', '1']], [['26', '27', '28', '29', '1', '2', '3', '4', '5']]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef switcher(arr: List[str]) -> str:\n    mapping = {'26': 'a', '25': 'b', '24': 'c', '23': 'd', '22': 'e', '21': 'f', '20': 'g', '19': 'h', '18': 'i', '17': 'j', '16': 'k', '15': 'l', '14': 'm', '13': 'n', '12': 'o', '11': 'p', '10': 'q', '9': 'r', '8': 's', '7': 't', '6': 'u', '5': 'v', '4': 'w', '3': 'x', '2': 'y', '1': 'z', '27': '!', '28': '?', '29': ' '}\n    return ''.join((mapping[num] for num in arr))", "from typing import List\n\ndef switcher(arr: List[str]) -> str:\n    mapping = {'26': 'a', '25': 'b', '24': 'c', '23': 'd', '22': 'e', '21': 'f', '20': 'g', '19': 'h', '18': 'i', '17': 'j', '16': 'k', '15': 'l', '14': 'm', '13': 'n', '12': 'o', '11': 'p', '10': 'q', '9': 'r', '8': 's', '7': 't', '6': 'u', '5': 'v', '4': 'w', '3': 'x', '2': 'y', '1': 'z', '27': '!', '28': '?', '29': ' '}\n    return ''.join((mapping[num] for num in arr))", "from typing import List\n\ndef switcher(arr: List[str]) -> str:\n    mapping = {'26': 'a', '25': 'b', '24': 'c', '23': 'd', '22': 'e', '21': 'f', '20': 'g', '19': 'h', '18': 'i', '17': 'j', '16': 'k', '15': 'l', '14': 'm', '13': 'n', '12': 'o', '11': 'p', '10': 'q', '9': 'r', '8': 's', '7': 't', '6': 'u', '5': 'v', '4': 'w', '3': 'x', '2': 'y', '1': 'z', '27': '!', '28': '?', '29': ' '}\n    return ''.join((mapping[num] for num in arr))", "from typing import List\n\ndef switcher(arr: List[str]) -> str:\n    mapping = {'26': 'a', '25': 'b', '24': 'c', '23': 'd', '22': 'e', '21': 'f', '20': 'g', '19': 'h', '18': 'i', '17': 'j', '16': 'k', '15': 'l', '14': 'm', '13': 'n', '12': 'o', '11': 'p', '10': 'q', '9': 'r', '8': 's', '7': 't', '6': 'u', '5': 'v', '4': 'w', '3': 'x', '2': 'y', '1': 'z', '27': '!', '28': '?', '29': ' '}\n    return ''.join((mapping[num] for num in arr))", "from typing import List\n\ndef switcher(arr: List[str]) -> str:\n    mapping = {'26': 'a', '25': 'b', '24': 'c', '23': 'd', '22': 'e', '21': 'f', '20': 'g', '19': 'h', '18': 'i', '17': 'j', '16': 'k', '15': 'l', '14': 'm', '13': 'n', '12': 'o', '11': 'p', '10': 'q', '9': 'r', '8': 's', '7': 't', '6': 'u', '5': 'v', '4': 'w', '3': 'x', '2': 'y', '1': 'z', '27': '!', '28': '?', '29': ' '}\n    return ''.join((mapping[num] for num in arr))", "from typing import List\n\ndef switcher(arr: List[str]) -> str:\n    mapping = {'26': 'a', '25': 'b', '24': 'c', '23': 'd', '22': 'e', '21': 'f', '20': 'g', '19': 'h', '18': 'i', '17': 'j', '16': 'k', '15': 'l', '14': 'm', '13': 'n', '12': 'o', '11': 'p', '10': 'q', '9': 'r', '8': 's', '7': 't', '6': 'u', '5': 'v', '4': 'w', '3': 'x', '2': 'y', '1': 'z', '27': '!', '28': '?', '29': ' '}\n    return ''.join((mapping[num] for num in arr))", "from typing import List\n\ndef switcher(arr: List[str]) -> str:\n    mapping = {'26': 'a', '25': 'b', '24': 'c', '23': 'd', '22': 'e', '21': 'f', '20': 'g', '19': 'h', '18': 'i', '17': 'j', '16': 'k', '15': 'l', '14': 'm', '13': 'n', '12': 'o', '11': 'p', '10': 'q', '9': 'r', '8': 's', '7': 't', '6': 'u', '5': 'v', '4': 'w', '3': 'x', '2': 'y', '1': 'z', '27': '!', '28': '?', '29': ' '}\n    return ''.join((mapping[num] for num in arr))", "from typing import List\n\ndef switcher(arr: List[str]) -> str:\n    mapping = {'26': 'a', '25': 'b', '24': 'c', '23': 'd', '22': 'e', '21': 'f', '20': 'g', '19': 'h', '18': 'i', '17': 'j', '16': 'k', '15': 'l', '14': 'm', '13': 'n', '12': 'o', '11': 'p', '10': 'q', '9': 'r', '8': 's', '7': 't', '6': 'u', '5': 'v', '4': 'w', '3': 'x', '2': 'y', '1': 'z', '27': '!', '28': '?', '29': ' '}\n    return ''.join((mapping[num] for num in arr))", "from typing import List\n\ndef switcher(arr: List[str]) -> str:\n    mapping = {'26': 'a', '25': 'b', '24': 'c', '23': 'd', '22': 'e', '21': 'f', '20': 'g', '19': 'h', '18': 'i', '17': 'j', '16': 'k', '15': 'l', '14': 'm', '13': 'n', '12': 'o', '11': 'p', '10': 'q', '9': 'r', '8': 's', '7': 't', '6': 'u', '5': 'v', '4': 'w', '3': 'x', '2': 'y', '1': 'z', '27': '!', '28': '?', '29': ' '}\n    return ''.join((mapping[num] for num in arr))", "from typing import List\n\ndef switcher(arr: List[str]) -> str:\n    mapping = {'26': 'a', '25': 'b', '24': 'c', '23': 'd', '22': 'e', '21': 'f', '20': 'g', '19': 'h', '18': 'i', '17': 'j', '16': 'k', '15': 'l', '14': 'm', '13': 'n', '12': 'o', '11': 'p', '10': 'q', '9': 'r', '8': 's', '7': 't', '6': 'u', '5': 'v', '4': 'w', '3': 'x', '2': 'y', '1': 'z', '27': '!', '28': '?', '29': ' '}\n    return ''.join((mapping[num] for num in arr))", "from typing import List\n\ndef switcher(arr: List[str]) -> str:\n    mapping = {'26': 'a', '25': 'b', '24': 'c', '23': 'd', '22': 'e', '21': 'f', '20': 'g', '19': 'h', '18': 'i', '17': 'j', '16': 'k', '15': 'l', '14': 'm', '13': 'n', '12': 'o', '11': 'p', '10': 'q', '9': 'r', '8': 's', '7': 't', '6': 'u', '5': 'v', '4': 'w', '3': 'x', '2': 'y', '1': 'z', '27': '!', '28': '?', '29': ' '}\n    return ''.join((mapping[num] for num in arr))", "from typing import List\n\ndef switcher(arr: List[str]) -> str:\n    mapping = {'26': 'a', '25': 'b', '24': 'c', '23': 'd', '22': 'e', '21': 'f', '20': 'g', '19': 'h', '18': 'i', '17': 'j', '16': 'k', '15': 'l', '14': 'm', '13': 'n', '12': 'o', '11': 'p', '10': 'q', '9': 'r', '8': 's', '7': 't', '6': 'u', '5': 'v', '4': 'w', '3': 'x', '2': 'y', '1': 'z', '27': '!', '28': '?', '29': ' '}\n    return ''.join((mapping[num] for num in arr))", "from typing import List\n\ndef switcher(arr: List[str]) -> str:\n    mapping = {'26': 'a', '25': 'b', '24': 'c', '23': 'd', '22': 'e', '21': 'f', '20': 'g', '19': 'h', '18': 'i', '17': 'j', '16': 'k', '15': 'l', '14': 'm', '13': 'n', '12': 'o', '11': 'p', '10': 'q', '9': 'r', '8': 's', '7': 't', '6': 'u', '5': 'v', '4': 'w', '3': 'x', '2': 'y', '1': 'z', '27': '!', '28': '?', '29': ' '}\n    return ''.join((mapping[num] for num in arr))", "from typing import List\n\ndef switcher(arr: List[str]) -> str:\n    mapping = {'26': 'a', '25': 'b', '24': 'c', '23': 'd', '22': 'e', '21': 'f', '20': 'g', '19': 'h', '18': 'i', '17': 'j', '16': 'k', '15': 'l', '14': 'm', '13': 'n', '12': 'o', '11': 'p', '10': 'q', '9': 'r', '8': 's', '7': 't', '6': 'u', '5': 'v', '4': 'w', '3': 'x', '2': 'y', '1': 'z', '27': '!', '28': '?', '29': ' '}\n    return ''.join((mapping[num] for num in arr))", "from typing import List\n\ndef switcher(arr: List[str]) -> str:\n    mapping = {'26': 'a', '25': 'b', '24': 'c', '23': 'd', '22': 'e', '21': 'f', '20': 'g', '19': 'h', '18': 'i', '17': 'j', '16': 'k', '15': 'l', '14': 'm', '13': 'n', '12': 'o', '11': 'p', '10': 'q', '9': 'r', '8': 's', '7': 't', '6': 'u', '5': 'v', '4': 'w', '3': 'x', '2': 'y', '1': 'z', '27': '!', '28': '?', '29': ' '}\n    return ''.join((mapping[num] for num in arr))", "from typing import List\n\ndef switcher(arr: List[str]) -> str:\n    mapping = {'26': 'a', '25': 'b', '24': 'c', '23': 'd', '22': 'e', '21': 'f', '20': 'g', '19': 'h', '18': 'i', '17': 'j', '16': 'k', '15': 'l', '14': 'm', '13': 'n', '12': 'o', '11': 'p', '10': 'q', '9': 'r', '8': 's', '7': 't', '6': 'u', '5': 'v', '4': 'w', '3': 'x', '2': 'y', '1': 'z', '27': '!', '28': '?', '29': ' '}\n    return ''.join((mapping[num] for num in arr))", "from typing import List\n\ndef switcher(arr: List[str]) -> str:\n    mapping = {'26': 'a', '25': 'b', '24': 'c', '23': 'd', '22': 'e', '21': 'f', '20': 'g', '19': 'h', '18': 'i', '17': 'j', '16': 'k', '15': 'l', '14': 'm', '13': 'n', '12': 'o', '11': 'p', '10': 'q', '9': 'r', '8': 's', '7': 't', '6': 'u', '5': 'v', '4': 'w', '3': 'x', '2': 'y', '1': 'z', '27': '!', '28': '?', '29': ' '}\n    return ''.join((mapping[num] for num in arr))", "from typing import List\n\ndef switcher(arr: List[str]) -> str:\n    mapping = {'26': 'a', '25': 'b', '24': 'c', '23': 'd', '22': 'e', '21': 'f', '20': 'g', '19': 'h', '18': 'i', '17': 'j', '16': 'k', '15': 'l', '14': 'm', '13': 'n', '12': 'o', '11': 'p', '10': 'q', '9': 'r', '8': 's', '7': 't', '6': 'u', '5': 'v', '4': 'w', '3': 'x', '2': 'y', '1': 'z', '27': '!', '28': '?', '29': ' '}\n    return ''.join((mapping[num] for num in arr))", "from typing import List\n\ndef switcher(arr: List[str]) -> str:\n    mapping = {'26': 'a', '25': 'b', '24': 'c', '23': 'd', '22': 'e', '21': 'f', '20': 'g', '19': 'h', '18': 'i', '17': 'j', '16': 'k', '15': 'l', '14': 'm', '13': 'n', '12': 'o', '11': 'p', '10': 'q', '9': 'r', '8': 's', '7': 't', '6': 'u', '5': 'v', '4': 'w', '3': 'x', '2': 'y', '1': 'z', '27': '!', '28': '?', '29': ' '}\n    return ''.join((mapping[num] for num in arr))", "from typing import List\n\ndef switcher(arr: List[str]) -> str:\n    mapping = {'26': 'a', '25': 'b', '24': 'c', '23': 'd', '22': 'e', '21': 'f', '20': 'g', '19': 'h', '18': 'i', '17': 'j', '16': 'k', '15': 'l', '14': 'm', '13': 'n', '12': 'o', '11': 'p', '10': 'q', '9': 'r', '8': 's', '7': 't', '6': 'u', '5': 'v', '4': 'w', '3': 'x', '2': 'y', '1': 'z', '27': '!', '28': '?', '29': ' '}\n    return ''.join((mapping[num] for num in arr))"], "outputs": "[['a'], ['z'], ['!'], ['?'], [' '], ['lolep'], [' ?!'], ['abcdefghijklmnopqrstuvwxyz'], ['a!? zyxwv']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['26']], [['1']], [['27']], [['28']], [['29']], [['15', '12', '15', '22', '11']], [['29', '28', '27']], [['26', '25', '24', '23', '22', '21', '20', '19', '18', '17', '16', '15', '14', '13', '12', '11', '10', '9', '8', '7', '6', '5', '4', '3', '2', '1']], [['26', '27', '28', '29', '1', '2', '3', '4', '5']]]", "input_output_examples": "[[], []]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "def find_min_num(d: int, n: int = 1) -> int:\n\"\"\"The number ```12``` is the first number in having six divisors, they are: ```1, 2, 3, 4, 6 and 12.```\nYour challenge for this kata is to find the minimum number that has a certain number of divisors.\nFor this purpose we have to create the function \n\n```find_min_num() or findMinNum() or similar in the other languages```\n\nthat receives the wanted number of divisors ```num_div```, and outputs the smallest number having an amount of divisors equals to ```num_div```.\n\nIn this kata all the tests will be with ```numDiv < 80```\n\n(There will be a next kata with numDiv < 10000, Find the First Number Having a Certain Number of Divisors II, should have the help of number theory)\n\nEnjoy it and happy coding!\n(Memoization is advisable)\n\"\"\"", "inputs": [[6], [10], [12], [13]], "outputs": [[12], [48], [60], [4096]], "starter_code": "def find_min_num(d: int, n: int = 1) -> int:", "canonical_solution": "def find_min_num(d, n=1):\n    while div_num(n) != d:\n        n += 1\n    return n\n\ndef div_num(n):\n    s = n ** 0.5\n    return sum((2 for k in range(1, int(s) + 1) if n % k == 0)) - (s % 1 == 0)", "entry_point": "find_min_num", "task_id": "TACO_lite/192", "input_output_examples": "[[[10], [[12]]], [[48], [[60]]]]", "llm_generated_inputs": "[[1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [8, 1], [9, 1], [10, 1], [11, 1], [12, 1], [13, 1], [14, 1], [15, 1], [16, 1], [17, 1], [18, 1], [19, 1], [20, 1], [21, 1], [22, 1], [23, 1], [24, 1], [25, 1], [26, 1], [27, 1], [28, 1], [29, 1], [30, 1], [31, 1], [32, 1], [33, 1], [34, 1], [35, 1], [36, 1], [37, 1], [38, 1], [39, 1], [40, 1], [41, 1], [42, 1], [43, 1], [44, 1], [45, 1], [46, 1], [47, 1], [48, 1], [49, 1], [50, 1], [51, 1]]", "clusters": {"cluster_list": [{"programs_str": ["from math import sqrt\n\ndef find_min_num(d: int, n: int=1) -> int:\n\n    def count_divisors(num):\n        count = 0\n        for i in range(1, int(sqrt(num)) + 1):\n            if num % i == 0:\n                count += 1\n                if i != num // i:\n                    count += 1\n        return count\n    while True:\n        if count_divisors(n) == d:\n            return n\n        n += 1", "from math import sqrt\n\ndef find_min_num(d: int, n: int=1) -> int:\n\n    def count_divisors(num):\n        count = 0\n        for i in range(1, int(sqrt(num)) + 1):\n            if num % i == 0:\n                count += 1\n                if i != num // i:\n                    count += 1\n        return count\n    while True:\n        if count_divisors(n) == d:\n            return n\n        n += 1", "from math import sqrt\n\ndef find_min_num(d: int, n: int=1) -> int:\n\n    def count_divisors(num):\n        count = 0\n        for i in range(1, int(sqrt(num)) + 1):\n            if num % i == 0:\n                count += 1\n                if i != num // i:\n                    count += 1\n        return count\n    while True:\n        if count_divisors(n) == d:\n            return n\n        n += 1", "from math import sqrt\n\ndef find_min_num(d: int, n: int=1) -> int:\n\n    def count_divisors(num):\n        count = 0\n        for i in range(1, int(sqrt(num)) + 1):\n            if num % i == 0:\n                if i * i == num:\n                    count += 1\n                else:\n                    count += 2\n        return count\n    while True:\n        if count_divisors(n) == d:\n            return n\n        n += 1", "from math import sqrt\n\ndef find_min_num(d: int, n: int=1) -> int:\n\n    def count_divisors(num):\n        count = 0\n        for i in range(1, int(sqrt(num)) + 1):\n            if num % i == 0:\n                count += 1\n                if i != num // i:\n                    count += 1\n        return count\n    while True:\n        if count_divisors(n) == d:\n            return n\n        n += 1", "from math import sqrt\n\ndef find_min_num(d: int, n: int=1) -> int:\n\n    def count_divisors(x):\n        count = 0\n        for i in range(1, int(sqrt(x)) + 1):\n            if x % i == 0:\n                count += 1\n                if i != x // i:\n                    count += 1\n        return count\n    while True:\n        if count_divisors(n) == d:\n            return n\n        n += 1", "from math import sqrt\n\ndef find_min_num(d: int, n: int=1) -> int:\n\n    def count_divisors(num):\n        count = 0\n        for i in range(1, int(sqrt(num)) + 1):\n            if num % i == 0:\n                count += 1\n                if i != num // i:\n                    count += 1\n        return count\n    while True:\n        if count_divisors(n) == d:\n            return n\n        n += 1", "from math import sqrt\n\ndef find_min_num(d: int, n: int=1) -> int:\n\n    def count_divisors(num):\n        count = 0\n        for i in range(1, int(sqrt(num)) + 1):\n            if num % i == 0:\n                count += 1\n                if i != num // i:\n                    count += 1\n        return count\n    while True:\n        if count_divisors(n) == d:\n            return n\n        n += 1", "from math import sqrt\n\ndef find_min_num(d: int, n: int=1) -> int:\n\n    def count_divisors(x):\n        count = 0\n        for i in range(1, int(sqrt(x)) + 1):\n            if x % i == 0:\n                count += 1\n                if i != x // i:\n                    count += 1\n        return count\n    while True:\n        if count_divisors(n) == d:\n            return n\n        n += 1", "from math import sqrt\n\ndef find_min_num(d: int, n: int=1) -> int:\n\n    def count_divisors(x):\n        count = 0\n        for i in range(1, int(sqrt(x)) + 1):\n            if x % i == 0:\n                count += 1\n                if i != x // i:\n                    count += 1\n        return count\n    while True:\n        if count_divisors(n) == d:\n            return n\n        n += 1", "from math import sqrt\n\ndef find_min_num(d: int, n: int=1) -> int:\n\n    def count_divisors(num):\n        count = 0\n        for i in range(1, int(sqrt(num)) + 1):\n            if num % i == 0:\n                count += 1\n                if i != num // i:\n                    count += 1\n        return count\n    while True:\n        if count_divisors(n) == d:\n            return n\n        n += 1", "from math import sqrt\n\ndef find_min_num(d: int, n: int=1) -> int:\n\n    def count_divisors(num):\n        count = 0\n        for i in range(1, int(sqrt(num)) + 1):\n            if num % i == 0:\n                count += 1\n                if i != num // i:\n                    count += 1\n        return count\n    while True:\n        if count_divisors(n) == d:\n            return n\n        n += 1", "from math import sqrt\n\ndef find_min_num(d: int, n: int=1) -> int:\n\n    def count_divisors(num):\n        count = 0\n        for i in range(1, int(sqrt(num)) + 1):\n            if num % i == 0:\n                if i * i == num:\n                    count += 1\n                else:\n                    count += 2\n        return count\n    while True:\n        if count_divisors(n) == d:\n            return n\n        n += 1", "from math import sqrt\n\ndef find_min_num(d: int, n: int=1) -> int:\n\n    def count_divisors(num):\n        count = 0\n        for i in range(1, int(sqrt(num)) + 1):\n            if num % i == 0:\n                if i * i == num:\n                    count += 1\n                else:\n                    count += 2\n        return count\n    while True:\n        if count_divisors(n) == d:\n            return n\n        n += 1", "from math import sqrt\n\ndef find_min_num(d: int, n: int=1) -> int:\n\n    def count_divisors(num):\n        count = 0\n        for i in range(1, int(sqrt(num)) + 1):\n            if num % i == 0:\n                count += 1\n                if i != num // i:\n                    count += 1\n        return count\n    while True:\n        if count_divisors(n) == d:\n            return n\n        n += 1", "from math import sqrt\n\ndef find_min_num(d: int, n: int=1) -> int:\n\n    def count_divisors(num):\n        count = 0\n        for i in range(1, int(sqrt(num)) + 1):\n            if num % i == 0:\n                if i * i == num:\n                    count += 1\n                else:\n                    count += 2\n        return count\n    while True:\n        if count_divisors(n) == d:\n            return n\n        n += 1", "from math import sqrt\n\ndef find_min_num(d: int, n: int=1) -> int:\n\n    def count_divisors(x):\n        count = 0\n        for i in range(1, int(sqrt(x)) + 1):\n            if x % i == 0:\n                if x // i == i:\n                    count += 1\n                else:\n                    count += 2\n        return count\n    while True:\n        if count_divisors(n) == d:\n            return n\n        n += 1", "from math import sqrt\n\ndef find_min_num(d: int, n: int=1) -> int:\n\n    def count_divisors(num):\n        count = 0\n        for i in range(1, int(sqrt(num)) + 1):\n            if num % i == 0:\n                if i * i == num:\n                    count += 1\n                else:\n                    count += 2\n        return count\n    while True:\n        if count_divisors(n) == d:\n            return n\n        n += 1", "from math import sqrt\n\ndef find_min_num(d: int, n: int=1) -> int:\n\n    def count_divisors(num):\n        count = 0\n        for i in range(1, int(sqrt(num)) + 1):\n            if num % i == 0:\n                count += 1\n                if i != num // i:\n                    count += 1\n        return count\n    while True:\n        if count_divisors(n) == d:\n            return n\n        n += 1", "from math import sqrt\n\ndef find_min_num(d: int, n: int=1) -> int:\n\n    def count_divisors(x):\n        count = 0\n        for i in range(1, int(sqrt(x)) + 1):\n            if x % i == 0:\n                count += 1\n                if i != x // i:\n                    count += 1\n        return count\n    while True:\n        if count_divisors(n) == d:\n            return n\n        n += 1"], "outputs": "[[1], [2], [4], [6], [16], [12], [64], [24], [36], [48], [1024], [60], [4096], [192], [144], [120], [65536], [180], 'Timeout', [240], [576], [3072], 'Timeout', [360], [1296], [12288], [900], [960], 'Timeout', [720], 'Timeout', [840], [9216], 'Timeout', [5184], [1260], 'Timeout', 'Timeout', [36864], [1680], 'Timeout', [2880], 'Timeout', [15360], [3600], 'Timeout', 'Timeout', [2520], [46656], [6480], 'Timeout']", "probability": 1.0, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[[[12]], 'Timeout', [[60]]]]"}], "entropy": 0, "llm_generated_inputs": "[[1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [8, 1], [9, 1], [10, 1], [11, 1], [12, 1], [13, 1], [14, 1], [15, 1], [16, 1], [17, 1], [18, 1], [19, 1], [20, 1], [21, 1], [22, 1], [23, 1], [24, 1], [25, 1], [26, 1], [27, 1], [28, 1], [29, 1], [30, 1], [31, 1], [32, 1], [33, 1], [34, 1], [35, 1], [36, 1], [37, 1], [38, 1], [39, 1], [40, 1], [41, 1], [42, 1], [43, 1], [44, 1], [45, 1], [46, 1], [47, 1], [48, 1], [49, 1], [50, 1], [51, 1]]", "input_output_examples": "[[[10], [[12]]], [[48], [[60]]]]", "weighted_test_consistency": 0.5, "at_least_one_align": false, "ambiguity": 0.25}}
{"requirement": "def house_of_cards(n: int) -> float:\n\"\"\"You want to build a standard house of cards, but you don't know how many cards you will need. Write a program which will count the minimal number of cards according to the number of floors you want to have. Here you can see which kind of house of cards I mean:\nhttp://www.wikihow.com/Build-a-Tower-of-Cards\n\n## Note about floors:\nThis kata uses the British numbering system for building floors. If you want your house of cards to have a first floor, it needs a ground floor and then a first floor above that.\n\n### Details (Ruby & JavaScript & Python & R)\nThe input must be an integer greater than 0, for other input raise an error.\n\n### Details (Haskell)\nThe input must be an integer greater than 0, for other input return `Nothing`.\n\"\"\"", "inputs": [[1], [2], [3]], "outputs": [[7], [15], [26]], "starter_code": "def house_of_cards(n: int) -> float:", "canonical_solution": "def house_of_cards(n):\n    if n >= 1:\n        return (n + 1) * n / 2 + (n + 2) * (n + 1)\n    raise ValueError", "entry_point": "house_of_cards", "task_id": "TACO_lite/195", "input_output_examples": "[[[1]], [[7]]]", "llm_generated_inputs": "[[1], [2], [3], [10], [100], [-1], [0], [1.5], ['a'], [[]], [{}]]", "clusters": {"cluster_list": [{"programs_str": ["def house_of_cards(n: int) -> float:\n    if n <= 0:\n        raise ValueError('Input must be an integer greater than 0')\n    return 2 * n + (n - 1) * n // 2", "def house_of_cards(n: int) -> float:\n    if n <= 0:\n        raise ValueError('Input must be an integer greater than 0')\n    return 2 * n + (n - 1) * n // 2", "def house_of_cards(n: int) -> float:\n    if n <= 0:\n        raise ValueError('Input must be an integer greater than 0')\n    return 2 * n + (n - 1) * n // 2", "def house_of_cards(n: int) -> float:\n    if n <= 0:\n        raise ValueError('Input must be an integer greater than 0')\n    return 2 * n + (n - 1) * n // 2", "def house_of_cards(n: int) -> float:\n    if n <= 0:\n        raise ValueError('Input must be an integer greater than 0')\n    return 2 * n + (n - 1) * n // 2", "def house_of_cards(n: int) -> float:\n    if n <= 0:\n        raise ValueError('Input must be an integer greater than 0')\n    return 2 * n + (n - 1) * n // 2", "def house_of_cards(n: int) -> float:\n    if n <= 0:\n        raise ValueError('Input must be an integer greater than 0')\n    return 2 * n + (n - 1) * n // 2", "def house_of_cards(n: int) -> float:\n    if n <= 0:\n        raise ValueError('Input must be an integer greater than 0')\n    return 2 * n + (n - 1) * n // 2", "def house_of_cards(n: int) -> float:\n    if n <= 0:\n        raise ValueError('Input must be an integer greater than 0')\n    return 2 * n + (n - 1) * n // 2", "def house_of_cards(n: int) -> float:\n    if n <= 0:\n        raise ValueError('Input must be an integer greater than 0')\n    return 2 * n + (n - 1) * n // 2", "def house_of_cards(n: int) -> float:\n    if n <= 0:\n        raise ValueError('Input must be an integer greater than 0')\n    return 2 * n + (n - 1) * n // 2", "def house_of_cards(n: int) -> float:\n    if n <= 0:\n        raise ValueError('Input must be an integer greater than 0')\n    return 2 * n + (n - 1) * n // 2", "def house_of_cards(n: int) -> float:\n    if n <= 0:\n        raise ValueError('Input must be an integer greater than 0')\n    return 2 * n + (n - 1) * n // 2", "def house_of_cards(n: int) -> float:\n    if n <= 0:\n        raise ValueError('Input must be an integer greater than 0')\n    return 2 * n + (n - 1) * n // 2", "def house_of_cards(n: int) -> float:\n    if n <= 0:\n        raise ValueError('Input must be an integer greater than 0')\n    return 2 * n + (n - 1) * n // 2"], "outputs": "[[2], [5], [9], [65], [5150], ['ValueError'], ['ValueError'], [3.0], ['TypeError'], ['TypeError'], ['TypeError']]", "probability": 0.75, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[1], [2], [7]]]"}, {"programs_str": ["def house_of_cards(n: int) -> float:\n    if n <= 0:\n        raise ValueError('Input must be an integer greater than 0')\n    return 2 * n + (n - 1) * 3", "def house_of_cards(n: int) -> float:\n    if n <= 0:\n        raise ValueError('Input must be an integer greater than 0')\n    return 2 * n + (n - 1) * 3", "def house_of_cards(n: int) -> float:\n    if n <= 0:\n        raise ValueError('Input must be an integer greater than 0')\n    return 2 * n + (n - 1) * 3", "def house_of_cards(n: int) -> float:\n    if n <= 0:\n        raise ValueError('Input must be an integer greater than 0')\n    return 2 * n + (n - 1) * 3", "def house_of_cards(n: int) -> float:\n    if n <= 0:\n        raise ValueError('Input must be an integer greater than 0')\n    return 2 * n + (n - 1) * 3"], "outputs": "[[2], [7], [12], [47], [497], ['ValueError'], ['ValueError'], [4.5], ['TypeError'], ['TypeError'], ['TypeError']]", "probability": 0.25, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[1], [2], [7]]]"}], "entropy": 0.8112781244591328, "llm_generated_inputs": "[[1], [2], [3], [10], [100], [-1], [0], [1.5], ['a'], [[]], [{}]]", "input_output_examples": "[[[1]], [[7]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false, "ambiguity": 0.9056390622295665}}
{"requirement": "def the_biggest_search_keys(*keys: str) -> str:\n\"\"\"You're a programmer in a SEO company. The SEO specialist of your company gets the list of all project keywords everyday, then he looks for the longest keys to analyze them.\n\nYou will get the list with keywords and must write a simple function that returns the biggest search keywords and sorts them in lexicographical order.\n\nDon't forget to rate this kata! Thanks :)\n\"\"\"", "inputs": [["key1", "key22", "key333"], ["coding", "sorting", "tryruby"], ["small keyword", "how to coding?", "very nice kata", "a lot of keys", "I like Ruby!!!"], ["pippi"]], "outputs": [["'key333'"], ["'sorting', 'tryruby'"], ["'I like Ruby!!!', 'how to coding?', 'very nice kata'"], ["'pippi'"]], "starter_code": "def the_biggest_search_keys(*keys: str) -> str:", "canonical_solution": "def the_biggest_search_keys(*keys):\n    L = sorted(keys, key=lambda key: (-len(key), key))\n    i = next((i for i, key in enumerate(L) if len(key) != len(L[0])), None)\n    return str(L[:i])[1:-1] or \"''\"", "entry_point": "the_biggest_search_keys", "task_id": "TACO_lite/197", "input_output_examples": "[[['key1', 'key2', 'key3', 'key n', 'bigkey2', 'bigkey1']], [['bigkey1', 'bigkey2']]]", "llm_generated_inputs": "[['single']]", "clusters": {"cluster_list": [{"programs_str": ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], "outputs": "[['EmptyCodeError']]", "probability": 1.0, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['key1', 'key2', 'key3', 'key n', 'bigkey2', 'bigkey1'], ['EmptyCodeError'], ['bigkey1', 'bigkey2']]]"}], "entropy": 0, "llm_generated_inputs": "[['single']]", "input_output_examples": "[[['key1', 'key2', 'key3', 'key n', 'bigkey2', 'bigkey1']], [['bigkey1', 'bigkey2']]]", "weighted_test_consistency": 0.0, "at_least_one_align": false, "ambiguity": 0.5}}
{"requirement": "from typing import List\n\n\ndef strange_coach(players: List[str]) -> str:\n    \"\"\"\n    # Task\n    Mirko has been moving up in the world of basketball. He started as a mere spectator, but has already reached the coveted position of the national team coach!\n\n    Mirco is now facing a difficult task: selecting five primary players for the upcoming match against Tajikistan. Since Mirko is incredibly lazy, he doesn't bother remembering players' names, let alone their actual skills. That's why he has settled on selecting five players who share the same first letter of their surnames, so that he can remember them easier. If there are no five players sharing the first letter of their surnames, Mirko will simply forfeit the game!\n\n    Your task is to find the first letters Mirko's players' surnames can begin with (in alphabetical order), or return `\"forfeit\"` if Mirko can't gather a team.\n\n    # Input/Output\n\n    - `[input]` string array `players`\n\n      Array of players' surnames, consisting only of lowercase English letters.\n\n    - `[output]` a string\n\n      A **sorted** string of possible first letters, or \"forfeit\" if it's impossible to gather a team.\n    \"\"\"", "inputs": [[["michael", "jordan", "lebron", "james", "kobe", "bryant"]], [["babic", "keksic", "boric", "bukic", "sarmic", "balic", "kruzic", "hrenovkic", "beslic", "boksic", "krafnic", "pecivic", "klavirkovic", "kukumaric", "sunkic", "kolacic", "kovacic", "prijestolonasljednikovic"]], [["jgztazpytubijfsmjz", "bokvgratzzdibku", "qineboilzoqdqivc", "bfctyltibtkbxq", "vioxcuhqhikxeqwekqkjo", "nrvsdhttr", "eiaoajuwxpwmyliqikzcchid", "bxrwawgor", "gbsqaxotzmblxttj", "kwchrcaconuwaivhvnyf", "neiemapiica", "bppao", "bxujiwivsjfbqrzygpdgkyz", "jnzrhhmcgcpffflpzwmqib", "jhozlevckrrwimdmyzc", "bomojotkqqditelsk", "ywmbheywzfyqjjs", "snwrclyjkbspysjftcmyak", "eelrsgkuhu", "dnyzsvqjjuqoc"]]], "outputs": [["forfeit"], ["bk"], ["b"]], "starter_code": "from typing import List\ndef strange_coach(players: List[str]) -> str:", "canonical_solution": "from collections import Counter\n\ndef strange_coach(players):\n    return ''.join(sorted((i for i, j in Counter(map(lambda x: x[0], players)).most_common() if j >= 5))) or 'forfeit'", "entry_point": "strange_coach", "task_id": "TACO_lite/198", "input_output_examples": "[[[['michael', 'jordan', 'lebron', 'james', 'kobe', 'bryant']], [['babic', 'keksic', 'boric', 'bukic', 'sarmic', 'balic', 'kruzic', 'hrenovkic', 'beslic', 'boksic', 'krafnic', 'pecivic', 'klavirkovic', 'kukumaric', 'sunkic', 'kolacic', 'kovacic', 'prijestolonasljednikovic']]], [['forfeit'], ['bk']]]", "llm_generated_inputs": "[[['ivanovic', 'ivanov', 'ignatov', 'ignatova', 'ignatovski', 'ivanovski']], [['petrov', 'petrova', 'petrovich', 'petrovski', 'petrova', 'petrov']], [['smith', 'smyth', 'smither', 'smithers', 'smithson', 'smith']], [['aaronson', 'anderson', 'adams', 'albright', 'alexander']], [['brown', 'brandon', 'bradley', 'bryant', 'bradford']], [['zhang', 'zhou', 'zhao', 'zhu', 'zhang']], [['unique', 'united', 'unity', 'unit', 'unity']], [['single']], [['one', 'ones', 'oneness', 'one']], [['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg']], [['different', 'differently', 'difference', 'differences', 'differential']], [['forfeit', 'forfeiture', 'forfeited', 'forfeiting', 'forfeits']], [['a', 'b', 'c', 'd', 'e']], [['aaaaa', 'bbbbb', 'ccccc', 'ddddd', 'eeeee']]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\nfrom collections import defaultdict\n\ndef strange_coach(players: List[str]) -> str:\n    surname_initials = defaultdict(int)\n    for player in players:\n        surname_initials[player[0]] += 1\n    possible_letters = [initial for initial, count in surname_initials.items() if count >= 5]\n    return ''.join(sorted(possible_letters)) if possible_letters else 'forfeit'", "from typing import List\n\ndef strange_coach(players: List[str]) -> str:\n    from collections import defaultdict\n    surname_initials = defaultdict(int)\n    for player in players:\n        surname_initials[player[0]] += 1\n    possible_initials = [initial for initial, count in surname_initials.items() if count >= 5]\n    return ''.join(sorted(possible_initials)) if possible_initials else 'forfeit'", "from typing import List\n\ndef strange_coach(players: List[str]) -> str:\n    from collections import defaultdict\n    surname_initials = defaultdict(int)\n    for player in players:\n        surname_initials[player[0]] += 1\n    possible_letters = [initial for initial, count in surname_initials.items() if count >= 5]\n    return ''.join(sorted(possible_letters)) if possible_letters else 'forfeit'", "from typing import List\nfrom collections import defaultdict\n\ndef strange_coach(players: List[str]) -> str:\n    surname_initials = defaultdict(int)\n    for player in players:\n        surname_initials[player[0]] += 1\n    possible_initials = [initial for initial, count in surname_initials.items() if count >= 5]\n    return ''.join(sorted(possible_initials)) if possible_initials else 'forfeit'", "from typing import List\nfrom collections import defaultdict\n\ndef strange_coach(players: List[str]) -> str:\n    surname_initials = defaultdict(int)\n    for player in players:\n        surname_initials[player[0]] += 1\n    possible_letters = [initial for initial, count in surname_initials.items() if count >= 5]\n    return ''.join(sorted(possible_letters)) if possible_letters else 'forfeit'", "from typing import List\nfrom collections import defaultdict\n\ndef strange_coach(players: List[str]) -> str:\n    surname_initials = defaultdict(int)\n    for player in players:\n        surname_initials[player[0]] += 1\n    possible_letters = [initial for initial, count in surname_initials.items() if count >= 5]\n    return ''.join(sorted(possible_letters)) if possible_letters else 'forfeit'", "from typing import List\n\ndef strange_coach(players: List[str]) -> str:\n    from collections import defaultdict\n    surname_initials = defaultdict(int)\n    for player in players:\n        surname_initials[player[0]] += 1\n    possible_letters = [initial for initial, count in surname_initials.items() if count >= 5]\n    return ''.join(sorted(possible_letters)) if possible_letters else 'forfeit'", "from typing import List\n\ndef strange_coach(players: List[str]) -> str:\n    from collections import defaultdict\n    surname_initials = defaultdict(int)\n    for player in players:\n        surname_initials[player[0]] += 1\n    possible_initials = [initial for initial, count in surname_initials.items() if count >= 5]\n    return ''.join(sorted(possible_initials)) if possible_initials else 'forfeit'", "from typing import List\nfrom collections import defaultdict\n\ndef strange_coach(players: List[str]) -> str:\n    surname_initials = defaultdict(int)\n    for player in players:\n        surname_initials[player[0]] += 1\n    possible_initials = [initial for initial, count in surname_initials.items() if count >= 5]\n    return ''.join(sorted(possible_initials)) if possible_initials else 'forfeit'", "from typing import List\n\ndef strange_coach(players: List[str]) -> str:\n    from collections import defaultdict\n    surname_initials = defaultdict(int)\n    for player in players:\n        surname_initials[player[0]] += 1\n    possible_letters = [initial for initial, count in surname_initials.items() if count >= 5]\n    return ''.join(sorted(possible_letters)) if possible_letters else 'forfeit'", "from typing import List\nfrom collections import defaultdict\n\ndef strange_coach(players: List[str]) -> str:\n    surname_initials = defaultdict(int)\n    for player in players:\n        surname_initials[player[0]] += 1\n    possible_letters = [letter for letter, count in surname_initials.items() if count >= 5]\n    return ''.join(sorted(possible_letters)) if possible_letters else 'forfeit'", "from typing import List\nfrom collections import defaultdict\n\ndef strange_coach(players: List[str]) -> str:\n    surname_initials = defaultdict(int)\n    for player in players:\n        surname_initials[player[0]] += 1\n    possible_letters = [initial for initial, count in surname_initials.items() if count >= 5]\n    return ''.join(sorted(possible_letters)) if possible_letters else 'forfeit'", "from typing import List\nfrom collections import defaultdict\n\ndef strange_coach(players: List[str]) -> str:\n    surname_initials = defaultdict(int)\n    for player in players:\n        surname_initials[player[0]] += 1\n    possible_letters = [initial for initial, count in surname_initials.items() if count >= 5]\n    return ''.join(sorted(possible_letters)) if possible_letters else 'forfeit'", "from typing import List\n\ndef strange_coach(players: List[str]) -> str:\n    from collections import defaultdict\n    surname_initials = defaultdict(int)\n    for player in players:\n        surname_initials[player[0]] += 1\n    possible_letters = [initial for initial, count in surname_initials.items() if count >= 5]\n    return ''.join(sorted(possible_letters)) if possible_letters else 'forfeit'", "from typing import List\nfrom collections import defaultdict\n\ndef strange_coach(players: List[str]) -> str:\n    surname_initials = defaultdict(int)\n    for player in players:\n        surname_initials[player[0]] += 1\n    possible_initials = [initial for initial, count in surname_initials.items() if count >= 5]\n    return ''.join(sorted(possible_initials)) if possible_initials else 'forfeit'", "from typing import List\n\ndef strange_coach(players: List[str]) -> str:\n    from collections import defaultdict\n    surname_initials = defaultdict(int)\n    for player in players:\n        surname_initials[player[0]] += 1\n    possible_letters = [initial for initial, count in surname_initials.items() if count >= 5]\n    return ''.join(sorted(possible_letters)) if possible_letters else 'forfeit'", "from typing import List\nfrom collections import defaultdict\n\ndef strange_coach(players: List[str]) -> str:\n    surname_initials = defaultdict(int)\n    for player in players:\n        surname_initials[player[0]] += 1\n    possible_letters = [letter for letter, count in surname_initials.items() if count >= 5]\n    return ''.join(sorted(possible_letters)) if possible_letters else 'forfeit'", "from typing import List\nfrom collections import defaultdict\n\ndef strange_coach(players: List[str]) -> str:\n    surname_initials = defaultdict(int)\n    for player in players:\n        surname_initials[player[0]] += 1\n    possible_letters = [initial for initial, count in surname_initials.items() if count >= 5]\n    return ''.join(sorted(possible_letters)) if possible_letters else 'forfeit'", "from typing import List\nfrom collections import defaultdict\n\ndef strange_coach(players: List[str]) -> str:\n    surname_initials = defaultdict(int)\n    for player in players:\n        surname_initials[player[0]] += 1\n    possible_initials = [initial for initial, count in surname_initials.items() if count >= 5]\n    return ''.join(sorted(possible_initials)) if possible_initials else 'forfeit'", "from typing import List\nfrom collections import defaultdict\n\ndef strange_coach(players: List[str]) -> str:\n    surname_initials = defaultdict(int)\n    for player in players:\n        surname_initials[player[0]] += 1\n    possible_initials = [initial for initial, count in surname_initials.items() if count >= 5]\n    return ''.join(sorted(possible_initials)) if possible_initials else 'forfeit'"], "outputs": "[['i'], ['p'], ['s'], ['a'], ['b'], ['z'], ['u'], ['forfeit'], ['forfeit'], ['a'], ['d'], ['f'], ['forfeit'], ['forfeit']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['ivanovic', 'ivanov', 'ignatov', 'ignatova', 'ignatovski', 'ivanovski']], [['petrov', 'petrova', 'petrovich', 'petrovski', 'petrova', 'petrov']], [['smith', 'smyth', 'smither', 'smithers', 'smithson', 'smith']], [['aaronson', 'anderson', 'adams', 'albright', 'alexander']], [['brown', 'brandon', 'bradley', 'bryant', 'bradford']], [['zhang', 'zhou', 'zhao', 'zhu', 'zhang']], [['unique', 'united', 'unity', 'unit', 'unity']], [['single']], [['one', 'ones', 'oneness', 'one']], [['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg']], [['different', 'differently', 'difference', 'differences', 'differential']], [['forfeit', 'forfeiture', 'forfeited', 'forfeiting', 'forfeits']], [['a', 'b', 'c', 'd', 'e']], [['aaaaa', 'bbbbb', 'ccccc', 'ddddd', 'eeeee']]]", "input_output_examples": "[[[['michael', 'jordan', 'lebron', 'james', 'kobe', 'bryant']], [['babic', 'keksic', 'boric', 'bukic', 'sarmic', 'balic', 'kruzic', 'hrenovkic', 'beslic', 'boksic', 'krafnic', 'pecivic', 'klavirkovic', 'kukumaric', 'sunkic', 'kolacic', 'kovacic', 'prijestolonasljednikovic']]], [['forfeit'], ['bk']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "def get_free_urinals(urinals: str) -> int:\n\"\"\"# How many urinals are free?\nIn men's public toilets with urinals, there is this unwritten rule that you leave at least one urinal free\nbetween you and the next person peeing. \n\n## Your task:\nYou need to write a function that returns the maximum of free urinals as an integer according to the unwritten rule.\n\n### Input\nA String containing 1s and 0s (1 <= Length <= 20)  \nA one stands for a taken urinal and a zero for a free one. \n\n### Note\nWhen there is already a mistake in the input string, then return `-1`\n\nHave fun and don't pee into the wrong urinal ;)\n\"\"\"", "inputs": [["10001"], ["1001"], ["00000"], ["0000"], ["01000"], ["00010"], ["10000"], ["1"], ["0"], ["10"], ["110"], ["1011000001"]], "outputs": [[1], [0], [3], [2], [1], [1], [2], [0], [1], [0], [-1], [-1]], "starter_code": "def get_free_urinals(urinals: str) -> int:", "canonical_solution": "def get_free_urinals(urinals):\n    return -1 if '11' in urinals else sum(((len(l) - 1) // 2 for l in f'0{urinals}0'.split('1')))", "entry_point": "get_free_urinals", "task_id": "TACO_lite/199", "input_output_examples": "[[['10001'], ['1001'], ['00000'], ['0000'], ['01000']], [[1], [0], [3], [2], [1]]]", "llm_generated_inputs": "[['10001'], ['00000'], ['11111'], ['10101'], ['10010'], ['0'], ['1'], ['10'], ['01'], ['101'], ['010'], ['110'], ['001'], ['111'], ['1000000000'], ['0000000001'], ['1111111111'], ['1000100010'], ['1010101010'], ['0101010101'], ['11101'], ['1011'], ['abcde'], ['10201']]", "clusters": {"cluster_list": [{"programs_str": ["def get_free_urinals(urinals: str) -> int:\n    if len(urinals) > 1 and '11' in urinals:\n        return -1\n    count = 0\n    i = 0\n    while i < len(urinals):\n        if urinals[i] == '0':\n            if (i == 0 or urinals[i - 1] == '0') and (i == len(urinals) - 1 or urinals[i + 1] == '0'):\n                count += 1\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return count", "def get_free_urinals(urinals: str) -> int:\n    if '11' in urinals:\n        return -1\n    count = 0\n    i = 0\n    while i < len(urinals):\n        if urinals[i] == '0':\n            if (i == 0 or urinals[i - 1] == '0') and (i == len(urinals) - 1 or urinals[i + 1] == '0'):\n                count += 1\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return count", "def get_free_urinals(urinals: str) -> int:\n    if '11' in urinals:\n        return -1\n    free_urinals = 0\n    i = 0\n    while i < len(urinals):\n        if urinals[i] == '0':\n            if (i == 0 or urinals[i - 1] == '0') and (i == len(urinals) - 1 or urinals[i + 1] == '0'):\n                free_urinals += 1\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return free_urinals", "def get_free_urinals(urinals: str) -> int:\n    if '11' in urinals:\n        return -1\n    free = 0\n    i = 0\n    while i < len(urinals):\n        if urinals[i] == '0':\n            if (i == 0 or urinals[i - 1] == '0') and (i == len(urinals) - 1 or urinals[i + 1] == '0'):\n                free += 1\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return free", "def get_free_urinals(urinals: str) -> int:\n    if '11' in urinals:\n        return -1\n    free_urinals = 0\n    i = 0\n    while i < len(urinals):\n        if urinals[i] == '0':\n            if (i == 0 or urinals[i - 1] == '0') and (i == len(urinals) - 1 or urinals[i + 1] == '0'):\n                free_urinals += 1\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return free_urinals", "def get_free_urinals(urinals: str) -> int:\n    if '11' in urinals:\n        return -1\n    count = 0\n    i = 0\n    while i < len(urinals):\n        if urinals[i] == '0':\n            if (i == 0 or urinals[i - 1] == '0') and (i == len(urinals) - 1 or urinals[i + 1] == '0'):\n                count += 1\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return count", "def get_free_urinals(urinals: str) -> int:\n    if len(urinals) > 1 and '11' in urinals:\n        return -1\n    free_urinals = 0\n    i = 0\n    while i < len(urinals):\n        if urinals[i] == '0':\n            if (i == 0 or urinals[i - 1] == '0') and (i == len(urinals) - 1 or urinals[i + 1] == '0'):\n                free_urinals += 1\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return free_urinals", "def get_free_urinals(urinals: str) -> int:\n    if len(urinals) > 1 and '11' in urinals:\n        return -1\n    free_urinals = 0\n    i = 0\n    while i < len(urinals):\n        if urinals[i] == '0':\n            if (i == 0 or urinals[i - 1] == '0') and (i == len(urinals) - 1 or urinals[i + 1] == '0'):\n                free_urinals += 1\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return free_urinals", "def get_free_urinals(urinals: str) -> int:\n    if '11' in urinals:\n        return -1\n    free_urinals = 0\n    i = 0\n    while i < len(urinals):\n        if urinals[i] == '0':\n            if (i == 0 or urinals[i - 1] == '0') and (i == len(urinals) - 1 or urinals[i + 1] == '0'):\n                free_urinals += 1\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return free_urinals", "def get_free_urinals(urinals: str) -> int:\n    if '11' in urinals:\n        return -1\n    free_urinals = 0\n    i = 0\n    while i < len(urinals):\n        if urinals[i] == '0':\n            if (i == 0 or urinals[i - 1] == '0') and (i == len(urinals) - 1 or urinals[i + 1] == '0'):\n                free_urinals += 1\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return free_urinals"], "outputs": "[[1], [3], [-1], [0], [0], [1], [0], [0], [0], [0], [0], [-1], [1], [-1], [4], [4], [-1], [2], [0], [0], [-1], [-1], [0], [0]]", "probability": 0.5, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def get_free_urinals(urinals: str) -> int:\n    if len(urinals) > 20 or not all((c in '01' for c in urinals)):\n        return -1\n    free = 0\n    i = 0\n    while i < len(urinals):\n        if urinals[i] == '0':\n            if (i == 0 or urinals[i - 1] == '0') and (i == len(urinals) - 1 or urinals[i + 1] == '0'):\n                free += 1\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return free", "def get_free_urinals(urinals: str) -> int:\n    if len(urinals) > 20 or not urinals.isdigit() or '2' in urinals or ('3' in urinals) or ('4' in urinals) or ('5' in urinals) or ('6' in urinals) or ('7' in urinals) or ('8' in urinals) or ('9' in urinals):\n        return -1\n    count = 0\n    i = 0\n    while i < len(urinals):\n        if urinals[i] == '0':\n            if (i == 0 or urinals[i - 1] == '0') and (i == len(urinals) - 1 or urinals[i + 1] == '0'):\n                count += 1\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return count", "def get_free_urinals(urinals: str) -> int:\n    if len(urinals) > 20 or not urinals.isdigit() or '2' in urinals or ('3' in urinals) or ('4' in urinals) or ('5' in urinals) or ('6' in urinals) or ('7' in urinals) or ('8' in urinals) or ('9' in urinals):\n        return -1\n    free_urinals = 0\n    i = 0\n    while i < len(urinals):\n        if urinals[i] == '0':\n            if (i == 0 or urinals[i - 1] == '0') and (i == len(urinals) - 1 or urinals[i + 1] == '0'):\n                free_urinals += 1\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return free_urinals", "def get_free_urinals(urinals: str) -> int:\n    if len(urinals) > 20 or not urinals.isdigit() or '2' in urinals or ('3' in urinals) or ('4' in urinals) or ('5' in urinals) or ('6' in urinals) or ('7' in urinals) or ('8' in urinals) or ('9' in urinals):\n        return -1\n    count = 0\n    i = 0\n    while i < len(urinals):\n        if urinals[i] == '0':\n            if (i == 0 or urinals[i - 1] == '0') and (i == len(urinals) - 1 or urinals[i + 1] == '0'):\n                count += 1\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return count", "def get_free_urinals(urinals: str) -> int:\n    if len(urinals) > 20 or not urinals.isdigit() or '2' in urinals or ('3' in urinals) or ('4' in urinals) or ('5' in urinals) or ('6' in urinals) or ('7' in urinals) or ('8' in urinals) or ('9' in urinals):\n        return -1\n    free_urinals = 0\n    i = 0\n    while i < len(urinals):\n        if urinals[i] == '0':\n            if (i == 0 or urinals[i - 1] == '0') and (i == len(urinals) - 1 or urinals[i + 1] == '0'):\n                free_urinals += 1\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return free_urinals"], "outputs": "[[1], [3], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [1], [0], [4], [4], [0], [2], [0], [0], [0], [0], [-1], [-1]]", "probability": 0.25, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def get_free_urinals(urinals: str) -> int:\n    if len(set(urinals)) > 2 or '11' in urinals:\n        return -1\n    free_urinals = 0\n    i = 0\n    while i < len(urinals):\n        if urinals[i] == '0':\n            if (i == 0 or urinals[i - 1] == '0') and (i == len(urinals) - 1 or urinals[i + 1] == '0'):\n                free_urinals += 1\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return free_urinals", "def get_free_urinals(urinals: str) -> int:\n    if len(set(urinals)) > 2 or '11' in urinals:\n        return -1\n    free = 0\n    i = 0\n    while i < len(urinals):\n        if urinals[i] == '0':\n            if (i == 0 or urinals[i - 1] == '0') and (i == len(urinals) - 1 or urinals[i + 1] == '0'):\n                free += 1\n                i += 1\n        i += 1\n    return free", "def get_free_urinals(urinals: str) -> int:\n    if len(urinals) > 20 or not urinals.isdigit() or '2' in urinals or ('11' in urinals and len(urinals) > 1):\n        return -1\n    free = 0\n    i = 0\n    while i < len(urinals):\n        if urinals[i] == '0':\n            if (i == 0 or urinals[i - 1] == '0') and (i == len(urinals) - 1 or urinals[i + 1] == '0'):\n                free += 1\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return free", "def get_free_urinals(urinals: str) -> int:\n    if len(set(urinals)) > 2 or '11' in urinals:\n        return -1\n    free_urinals = 0\n    i = 0\n    while i < len(urinals):\n        if urinals[i] == '0':\n            if (i == 0 or urinals[i - 1] == '0') and (i == len(urinals) - 1 or urinals[i + 1] == '0'):\n                free_urinals += 1\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return free_urinals", "def get_free_urinals(urinals: str) -> int:\n    if len(set(urinals)) > 2 or '11' in urinals:\n        return -1\n    free_urinals = 0\n    i = 0\n    while i < len(urinals):\n        if urinals[i] == '0':\n            if (i == 0 or urinals[i - 1] == '0') and (i == len(urinals) - 1 or urinals[i + 1] == '0'):\n                free_urinals += 1\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return free_urinals"], "outputs": "[[1], [3], [-1], [0], [0], [1], [0], [0], [0], [0], [0], [-1], [1], [-1], [4], [4], [-1], [2], [0], [0], [-1], [-1], [-1], [-1]]", "probability": 0.25, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.946394630357186, "llm_generated_inputs": "[['10001'], ['00000'], ['11111'], ['10101'], ['10010'], ['0'], ['1'], ['10'], ['01'], ['101'], ['010'], ['110'], ['001'], ['111'], ['1000000000'], ['0000000001'], ['1111111111'], ['1000100010'], ['1010101010'], ['0101010101'], ['11101'], ['1011'], ['abcde'], ['10201']]", "input_output_examples": "[[['10001'], ['1001'], ['00000'], ['0000'], ['01000']], [[1], [0], [3], [2], [1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.473197315178593}}
{"requirement": "def abundant_number(num: int) -> bool:\n\"\"\"An abundant number or excessive number is a number for which the sum of its proper divisors is greater than the number itself. \n\nDerive function `abundantNumber(num)/abundant_number(num)` which returns `true/True/.true.` if `num` is abundant, `false/False/.false.` if not.\n\"\"\"", "inputs": [[12], [18], [37], [120], [77], [118], [5830], [11410], [14771], [11690]], "outputs": [[true], [true], [false], [true], [false], [false], [true], [true], [false], [true]], "starter_code": "def abundant_number(num: int) -> bool:", "canonical_solution": "def abundant_number(num):\n    return sum([e for e in range(1, num) if num % e == 0]) > num", "entry_point": "abundant_number", "task_id": "TACO_lite/203", "input_output_examples": "[[[12]], [[True]]]", "llm_generated_inputs": "[[12], [18], [20], [24], [30], [6], [1], [0], [-5], [28]]", "clusters": {"cluster_list": [{"programs_str": ["def abundant_number(num: int) -> bool:\n    if num < 1:\n        return False\n    divisors_sum = sum((i for i in range(1, num) if num % i == 0))\n    return divisors_sum > num", "def abundant_number(num: int) -> bool:\n    if num < 1:\n        return False\n    divisors_sum = sum((i for i in range(1, num) if num % i == 0))\n    return divisors_sum > num", "def abundant_number(num: int) -> bool:\n    if num < 1:\n        return False\n    divisors_sum = sum((i for i in range(1, num) if num % i == 0))\n    return divisors_sum > num", "def abundant_number(num: int) -> bool:\n    if num < 1:\n        return False\n    divisors_sum = 0\n    for i in range(1, num // 2 + 1):\n        if num % i == 0:\n            divisors_sum += i\n    return divisors_sum > num", "def abundant_number(num: int) -> bool:\n    if num < 1:\n        return False\n    divisors_sum = 0\n    for i in range(1, num // 2 + 1):\n        if num % i == 0:\n            divisors_sum += i\n    return divisors_sum > num", "def abundant_number(num: int) -> bool:\n    if num < 1:\n        return False\n    divisors_sum = sum((i for i in range(1, num) if num % i == 0))\n    return divisors_sum > num", "def abundant_number(num: int) -> bool:\n    if num < 1:\n        return False\n    divisors_sum = sum((i for i in range(1, num // 2 + 1) if num % i == 0))\n    return divisors_sum > num", "def abundant_number(num: int) -> bool:\n    if num < 1:\n        return False\n    divisors_sum = sum((i for i in range(1, num) if num % i == 0))\n    return divisors_sum > num", "def abundant_number(num: int) -> bool:\n    if num < 1:\n        return False\n    divisors_sum = sum((i for i in range(1, num // 2 + 1) if num % i == 0))\n    return divisors_sum > num", "def abundant_number(num: int) -> bool:\n    if num < 1:\n        return False\n    divisors_sum = 0\n    for i in range(1, num // 2 + 1):\n        if num % i == 0:\n            divisors_sum += i\n    return divisors_sum > num", "def abundant_number(num: int) -> bool:\n    if num < 1:\n        return False\n    divisors_sum = sum((i for i in range(1, num) if num % i == 0))\n    return divisors_sum > num", "def abundant_number(num: int) -> bool:\n    if num < 1:\n        return False\n    divisors_sum = sum((i for i in range(1, num // 2 + 1) if num % i == 0))\n    return divisors_sum > num", "def abundant_number(num: int) -> bool:\n    if num < 1:\n        return False\n    divisors_sum = sum((i for i in range(1, num // 2 + 1) if num % i == 0))\n    return divisors_sum > num", "def abundant_number(num: int) -> bool:\n    if num < 1:\n        return False\n    divisors_sum = sum((i for i in range(1, num) if num % i == 0))\n    return divisors_sum > num", "def abundant_number(num: int) -> bool:\n    if num < 1:\n        return False\n    divisors_sum = sum((i for i in range(1, num // 2 + 1) if num % i == 0))\n    return divisors_sum > num", "def abundant_number(num: int) -> bool:\n    if num < 1:\n        return False\n    divisors_sum = 0\n    for i in range(1, num // 2 + 1):\n        if num % i == 0:\n            divisors_sum += i\n    return divisors_sum > num", "def abundant_number(num: int) -> bool:\n    if num < 1:\n        return False\n    divisors_sum = 0\n    for i in range(1, num // 2 + 1):\n        if num % i == 0:\n            divisors_sum += i\n    return divisors_sum > num", "def abundant_number(num: int) -> bool:\n    if num < 1:\n        return False\n    divisors_sum = sum((i for i in range(1, num) if num % i == 0))\n    return divisors_sum > num", "def abundant_number(num: int) -> bool:\n    if num < 1:\n        return False\n    divisors_sum = sum((i for i in range(1, num) if num % i == 0))\n    return divisors_sum > num", "def abundant_number(num: int) -> bool:\n    if num < 1:\n        return False\n    divisors_sum = 0\n    for i in range(1, num // 2 + 1):\n        if num % i == 0:\n            divisors_sum += i\n    return divisors_sum > num"], "outputs": "[[True], [True], [True], [True], [True], [False], [False], [False], [False], [False]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[12], [18], [20], [24], [30], [6], [1], [0], [-5], [28]]", "input_output_examples": "[[[12]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "def opposite(number: float) -> float:\n\"\"\"Very simple, given a number, find its opposite.\n\n~~~if:sql\nYou will be given a table: `opposite`, with a column: `number`. Return a table with a column: `res`.\n~~~\n\"\"\"", "inputs": [[1], [25.6], [0], [1425.2222], [-3.1458], [-95858588225]], "outputs": [[-1], [-25.6], [0], [-1425.2222], [3.1458], [95858588225]], "starter_code": "def opposite(number: float) -> float:", "canonical_solution": "def opposite(number):\n    return -number", "entry_point": "opposite", "task_id": "TACO_lite/204", "input_output_examples": "[[[1], [14], [-34]], [[-1], [-14], [34]]]", "llm_generated_inputs": "[[5.0], [-3.2], [0.0], [1000000.0], [-1e-05]]", "clusters": {"cluster_list": [{"programs_str": ["def opposite(number: float) -> float:\n    return -number", "def opposite(number: float) -> float:\n    return -number", "def opposite(number: float) -> float:\n    return -number", "def opposite(number: float) -> float:\n    return -number", "def opposite(number: float) -> float:\n    return -number", "def opposite(number: float) -> float:\n    return -number", "def opposite(number: float) -> float:\n    return -number", "def opposite(number: float) -> float:\n    return -number", "def opposite(number: float) -> float:\n    return -number", "def opposite(number: float) -> float:\n    return -number", "def opposite(number: float) -> float:\n    return -number", "def opposite(number: float) -> float:\n    return -number", "def opposite(number: float) -> float:\n    return -number", "def opposite(number: float) -> float:\n    return -number", "def opposite(number: float) -> float:\n    return -number", "def opposite(number: float) -> float:\n    return -number", "def opposite(number: float) -> float:\n    return -number", "def opposite(number: float) -> float:\n    return -number", "def opposite(number: float) -> float:\n    return -number", "def opposite(number: float) -> float:\n    return -number"], "outputs": "[[-5.0], [3.2], [-0.0], [-1000000.0], [1e-05]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[5.0], [-3.2], [0.0], [1000000.0], [-1e-05]]", "input_output_examples": "[[[1], [14], [-34]], [[-1], [-14], [34]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"requirement": "def all_permuted(n: int) -> int:\n\"\"\"We have an array of unique elements. A special kind of permutation is the one that has all of its elements in a different position than the original.\n\nThe task for this kata would be to create a code to count all these permutations for an array of certain length.\n\nFeatures of the random tests:\n```\nl = length of the array\n10 ≤ l ≤ 5000\n```\n\nEnjoy it!\n\"\"\"", "inputs": [[1], [4], [30]], "outputs": [[0], [9], [97581073836835777732377428235481]], "starter_code": "def all_permuted(n: int) -> int:", "canonical_solution": "def all_permuted(n):\n    a, b = (0, 1)\n    for i in range(1, n):\n        a, b = (b, (i + 1) * (a + b))\n    return a", "entry_point": "all_permuted", "task_id": "TACO_lite/206", "input_output_examples": "[[[4]], [[9]]]", "llm_generated_inputs": "[[10], [11], [20], [50], [100], [500], [1000], [5000], [12], [13]]", "clusters": {"cluster_list": [{"programs_str": ["def all_permuted(n: int) -> int:\n    import math\n\n    def derangement(x):\n        if x == 0:\n            return 1\n        if x == 1:\n            return 0\n        return (x - 1) * (derangement(x - 1) + derangement(x - 2))\n    return derangement(n)", "def all_permuted(n: int) -> int:\n    import math\n\n    def derangement(x):\n        if x == 0:\n            return 1\n        if x == 1:\n            return 0\n        return (x - 1) * (derangement(x - 1) + derangement(x - 2))\n    return derangement(n)", "from math import factorial\n\ndef all_permuted(n: int) -> int:\n\n    def derangement(x):\n        if x == 0:\n            return 1\n        if x == 1:\n            return 0\n        return (x - 1) * (derangement(x - 1) + derangement(x - 2))\n    return derangement(n)", "from math import factorial\n\ndef all_permuted(n: int) -> int:\n\n    def derangement(x):\n        if x == 0:\n            return 1\n        if x == 1:\n            return 0\n        return (x - 1) * (derangement(x - 1) + derangement(x - 2))\n    return derangement(n)", "def all_permuted(n: int) -> int:\n    import math\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 0\n        return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n    return derangement(n)", "def all_permuted(n: int) -> int:\n    import math\n\n    def derangement(x):\n        if x == 0:\n            return 1\n        if x == 1:\n            return 0\n        return (x - 1) * (derangement(x - 1) + derangement(x - 2))\n    return derangement(n)", "def all_permuted(n: int) -> int:\n    import math\n\n    def derangement(x):\n        if x == 0:\n            return 1\n        if x == 1:\n            return 0\n        return (x - 1) * (derangement(x - 1) + derangement(x - 2))\n    return derangement(n)", "def all_permuted(n: int) -> int:\n    import math\n\n    def derangement(x):\n        if x == 0:\n            return 1\n        if x == 1:\n            return 0\n        return (x - 1) * (derangement(x - 1) + derangement(x - 2))\n    return derangement(n)", "def all_permuted(n: int) -> int:\n    import math\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 0\n        return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n    return derangement(n)", "def all_permuted(n: int) -> int:\n    import math\n\n    def derangement(x):\n        if x == 0:\n            return 1\n        if x == 1:\n            return 0\n        return (x - 1) * (derangement(x - 1) + derangement(x - 2))\n    return derangement(n)", "def all_permuted(n: int) -> int:\n    import math\n\n    def derangement(x):\n        if x == 0:\n            return 1\n        if x == 1:\n            return 0\n        return (x - 1) * (derangement(x - 1) + derangement(x - 2))\n    return derangement(n)", "def all_permuted(n: int) -> int:\n    import math\n\n    def derangement(x):\n        if x == 0:\n            return 1\n        if x == 1:\n            return 0\n        return (x - 1) * (derangement(x - 1) + derangement(x - 2))\n    return derangement(n)", "def all_permuted(n: int) -> int:\n    import math\n\n    def derangement(x):\n        if x == 0:\n            return 1\n        if x == 1:\n            return 0\n        return (x - 1) * (derangement(x - 1) + derangement(x - 2))\n    return derangement(n)"], "outputs": "[[1334961], [14684570], [895014631192902121], 'Timeout', 'Timeout', 'Timeout', ['RecursionError'], ['RecursionError'], [176214841], [2290792932]]", "probability": 0.65, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def all_permuted(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    dp = [0] * (n + 1)\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = (i - 1) * (dp[i - 1] + dp[i - 2])\n    return dp[n]"], "outputs": "[[1334961], [14684570], [895014631192902121], [11188719610782480504630258070757734324011354208865721592720336801], [34332795984163804765195977526776142032365783805375784983543400282685180793327632432791396429850988990237345920155783984828001486412574060553756854137069878601], [448863253698306933155392838660623489620105354970103184793237857021621807416676464390017030536267279344498807534207773593237750703257100773105417420856998767842465982794040307485641222623707290721644193132767010852011842890472678530455997713637642214060867495814388544602807064046292780892687753135669282026785078037854339667051787567659918192096324873246532479095397693382107563764571139528357816634936795502653003834316187208012981575941793559164870137672010854222248355203881560228640519377022514813211498582903344702569207222786526522848235496513485019964832754564700103084772539809401878146896383140576947150266553552283970712712958256538227060191738925708563696565167159778956101294959883772201053576103725735608793398394399772030446848976645226447579814720557809937875169500613558802001010337444654264758621145581728129929098983823756593815934544183813429280798625503170479211181185825449905791135644917533614962930979197304283935233310367077215615091476836260678574128601173726453375010972987926614609221847377386886723952636045713547625310222795804289446833623079871020041797984467123235820975960801026731987338183637527593001], [148030000371669080363916614118966054237787246771683461554691846089888817122236071181318987391054867545959072618913067395256592673937835956772241168222528295595683596720980666220609427831904885242029599391814586746492963217722340317777195575260366010059010655172144738284878861758208131004735035818477569368786432061632016188446807685910940321832572996649981481772252325191040086154426554657538458444535765717871033946613771702350305625265004320388243386097879262683082846870385959781954488956389970392578944288660459295031234507478736716881824136783622584535138805982288145285315709292044924680549217929790115984545014441521755735726306195457199770572691754663617787391418043564291295463544232345623814234091075245481655240617768194600801613370454579550360990469214942505585371933295794820730182459765487139302567668926438713305035074950095908181875721870629028442704188817930628082595769711646309710902713389577813924985084195489687602046619502008960961979336971200011845832972766496820425232309014424160383352549432587175804599513224295387620793237492133106194854781675335264245443368406349778626577154153936165795176414280246708209684255021094823421966794931258601926237888502063061179908920389122437280096694180318756729540187743522955287693403344627192008193243150047926683116206789808737520329932175926689631039801333205271773068694119886681439408208634536616162125484968246433299086618972038726320143524530159155122816067209479359158975104676175689942972909538981915518610438058966813454552135810617643268326508884740007563057812557756872119827948177012498720002846584320083602883505675223930415710240943383142087697091237570482781352256162809593048997307636369071690373544475334727722226964401838105804104033698859046508072636221121284767256179261384695575800126777871914608799740333135169078085040301870738700721986026518324144597854534393940110548874771456733548819690014891150299883374569036144504075650284247154291122602262577738634502394468066637260601515590412677997656372138988479892629787344855469625993188902215341743976591335786134612426484416557074485085137922648888557127618980204107341206517456111787177656668620397156874752365541689736459115633909848251703534756902949331850082296669410306980175719986482188446333446450823956158029544268395051423740042819986368612454904255206373684842598857136228239326853906860111911390847498545181350875035398066868621959973870036473108206470890805125591766035651660263166256071859066523494404932873989243033885387310363168734739688132495065765084286985470381074859852651721482664917019227944750044815550686001], [], [176214841], [2290792932]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def all_permuted(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    dp = [0] * (n + 1)\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = (i - 1) * (dp[i - 1] + dp[i - 2])\n    return dp[n]"], "outputs": "[[1334961], [14684570], [895014631192902121], [11188719610782480504630258070757734324011354208865721592720336801], [34332795984163804765195977526776142032365783805375784983543400282685180793327632432791396429850988990237345920155783984828001486412574060553756854137069878601], [448863253698306933155392838660623489620105354970103184793237857021621807416676464390017030536267279344498807534207773593237750703257100773105417420856998767842465982794040307485641222623707290721644193132767010852011842890472678530455997713637642214060867495814388544602807064046292780892687753135669282026785078037854339667051787567659918192096324873246532479095397693382107563764571139528357816634936795502653003834316187208012981575941793559164870137672010854222248355203881560228640519377022514813211498582903344702569207222786526522848235496513485019964832754564700103084772539809401878146896383140576947150266553552283970712712958256538227060191738925708563696565167159778956101294959883772201053576103725735608793398394399772030446848976645226447579814720557809937875169500613558802001010337444654264758621145581728129929098983823756593815934544183813429280798625503170479211181185825449905791135644917533614962930979197304283935233310367077215615091476836260678574128601173726453375010972987926614609221847377386886723952636045713547625310222795804289446833623079871020041797984467123235820975960801026731987338183637527593001], [148030000371669080363916614118966054237787246771683461554691846089888817122236071181318987391054867545959072618913067395256592673937835956772241168222528295595683596720980666220609427831904885242029599391814586746492963217722340317777195575260366010059010655172144738284878861758208131004735035818477569368786432061632016188446807685910940321832572996649981481772252325191040086154426554657538458444535765717871033946613771702350305625265004320388243386097879262683082846870385959781954488956389970392578944288660459295031234507478736716881824136783622584535138805982288145285315709292044924680549217929790115984545014441521755735726306195457199770572691754663617787391418043564291295463544232345623814234091075245481655240617768194600801613370454579550360990469214942505585371933295794820730182459765487139302567668926438713305035074950095908181875721870629028442704188817930628082595769711646309710902713389577813924985084195489687602046619502008960961979336971200011845832972766496820425232309014424160383352549432587175804599513224295387620793237492133106194854781675335264245443368406349778626577154153936165795176414280246708209684255021094823421966794931258601926237888502063061179908920389122437280096694180318756729540187743522955287693403344627192008193243150047926683116206789808737520329932175926689631039801333205271773068694119886681439408208634536616162125484968246433299086618972038726320143524530159155122816067209479359158975104676175689942972909538981915518610438058966813454552135810617643268326508884740007563057812557756872119827948177012498720002846584320083602883505675223930415710240943383142087697091237570482781352256162809593048997307636369071690373544475334727722226964401838105804104033698859046508072636221121284767256179261384695575800126777871914608799740333135169078085040301870738700721986026518324144597854534393940110548874771456733548819690014891150299883374569036144504075650284247154291122602262577738634502394468066637260601515590412677997656372138988479892629787344855469625993188902215341743976591335786134612426484416557074485085137922648888557127618980204107341206517456111787177656668620397156874752365541689736459115633909848251703534756902949331850082296669410306980175719986482188446333446450823956158029544268395051423740042819986368612454904255206373684842598857136228239326853906860111911390847498545181350875035398066868621959973870036473108206470890805125591766035651660263166256071859066523494404932873989243033885387310363168734739688132495065765084286985470381074859852651721482664917019227944750044815550686001], [], [176214841], [2290792932]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def all_permuted(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    der = [0] * (n + 1)\n    der[1] = 0\n    der[2] = 1\n    for i in range(3, n + 1):\n        der[i] = (i - 1) * (der[i - 1] + der[i - 2])\n    return der[n]"], "outputs": "[[1334961], [14684570], [895014631192902121], [11188719610782480504630258070757734324011354208865721592720336801], [34332795984163804765195977526776142032365783805375784983543400282685180793327632432791396429850988990237345920155783984828001486412574060553756854137069878601], [448863253698306933155392838660623489620105354970103184793237857021621807416676464390017030536267279344498807534207773593237750703257100773105417420856998767842465982794040307485641222623707290721644193132767010852011842890472678530455997713637642214060867495814388544602807064046292780892687753135669282026785078037854339667051787567659918192096324873246532479095397693382107563764571139528357816634936795502653003834316187208012981575941793559164870137672010854222248355203881560228640519377022514813211498582903344702569207222786526522848235496513485019964832754564700103084772539809401878146896383140576947150266553552283970712712958256538227060191738925708563696565167159778956101294959883772201053576103725735608793398394399772030446848976645226447579814720557809937875169500613558802001010337444654264758621145581728129929098983823756593815934544183813429280798625503170479211181185825449905791135644917533614962930979197304283935233310367077215615091476836260678574128601173726453375010972987926614609221847377386886723952636045713547625310222795804289446833623079871020041797984467123235820975960801026731987338183637527593001], [148030000371669080363916614118966054237787246771683461554691846089888817122236071181318987391054867545959072618913067395256592673937835956772241168222528295595683596720980666220609427831904885242029599391814586746492963217722340317777195575260366010059010655172144738284878861758208131004735035818477569368786432061632016188446807685910940321832572996649981481772252325191040086154426554657538458444535765717871033946613771702350305625265004320388243386097879262683082846870385959781954488956389970392578944288660459295031234507478736716881824136783622584535138805982288145285315709292044924680549217929790115984545014441521755735726306195457199770572691754663617787391418043564291295463544232345623814234091075245481655240617768194600801613370454579550360990469214942505585371933295794820730182459765487139302567668926438713305035074950095908181875721870629028442704188817930628082595769711646309710902713389577813924985084195489687602046619502008960961979336971200011845832972766496820425232309014424160383352549432587175804599513224295387620793237492133106194854781675335264245443368406349778626577154153936165795176414280246708209684255021094823421966794931258601926237888502063061179908920389122437280096694180318756729540187743522955287693403344627192008193243150047926683116206789808737520329932175926689631039801333205271773068694119886681439408208634536616162125484968246433299086618972038726320143524530159155122816067209479359158975104676175689942972909538981915518610438058966813454552135810617643268326508884740007563057812557756872119827948177012498720002846584320083602883505675223930415710240943383142087697091237570482781352256162809593048997307636369071690373544475334727722226964401838105804104033698859046508072636221121284767256179261384695575800126777871914608799740333135169078085040301870738700721986026518324144597854534393940110548874771456733548819690014891150299883374569036144504075650284247154291122602262577738634502394468066637260601515590412677997656372138988479892629787344855469625993188902215341743976591335786134612426484416557074485085137922648888557127618980204107341206517456111787177656668620397156874752365541689736459115633909848251703534756902949331850082296669410306980175719986482188446333446450823956158029544268395051423740042819986368612454904255206373684842598857136228239326853906860111911390847498545181350875035398066868621959973870036473108206470890805125591766035651660263166256071859066523494404932873989243033885387310363168734739688132495065765084286985470381074859852651721482664917019227944750044815550686001], [], [176214841], [2290792932]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def all_permuted(n: int) -> int:\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    a, b = (1, 0)\n    for i in range(2, n + 1):\n        a, b = (b, (i - 1) * (a + b))\n    return b"], "outputs": "[[1334961], [14684570], [895014631192902121], [11188719610782480504630258070757734324011354208865721592720336801], [34332795984163804765195977526776142032365783805375784983543400282685180793327632432791396429850988990237345920155783984828001486412574060553756854137069878601], [448863253698306933155392838660623489620105354970103184793237857021621807416676464390017030536267279344498807534207773593237750703257100773105417420856998767842465982794040307485641222623707290721644193132767010852011842890472678530455997713637642214060867495814388544602807064046292780892687753135669282026785078037854339667051787567659918192096324873246532479095397693382107563764571139528357816634936795502653003834316187208012981575941793559164870137672010854222248355203881560228640519377022514813211498582903344702569207222786526522848235496513485019964832754564700103084772539809401878146896383140576947150266553552283970712712958256538227060191738925708563696565167159778956101294959883772201053576103725735608793398394399772030446848976645226447579814720557809937875169500613558802001010337444654264758621145581728129929098983823756593815934544183813429280798625503170479211181185825449905791135644917533614962930979197304283935233310367077215615091476836260678574128601173726453375010972987926614609221847377386886723952636045713547625310222795804289446833623079871020041797984467123235820975960801026731987338183637527593001], [148030000371669080363916614118966054237787246771683461554691846089888817122236071181318987391054867545959072618913067395256592673937835956772241168222528295595683596720980666220609427831904885242029599391814586746492963217722340317777195575260366010059010655172144738284878861758208131004735035818477569368786432061632016188446807685910940321832572996649981481772252325191040086154426554657538458444535765717871033946613771702350305625265004320388243386097879262683082846870385959781954488956389970392578944288660459295031234507478736716881824136783622584535138805982288145285315709292044924680549217929790115984545014441521755735726306195457199770572691754663617787391418043564291295463544232345623814234091075245481655240617768194600801613370454579550360990469214942505585371933295794820730182459765487139302567668926438713305035074950095908181875721870629028442704188817930628082595769711646309710902713389577813924985084195489687602046619502008960961979336971200011845832972766496820425232309014424160383352549432587175804599513224295387620793237492133106194854781675335264245443368406349778626577154153936165795176414280246708209684255021094823421966794931258601926237888502063061179908920389122437280096694180318756729540187743522955287693403344627192008193243150047926683116206789808737520329932175926689631039801333205271773068694119886681439408208634536616162125484968246433299086618972038726320143524530159155122816067209479359158975104676175689942972909538981915518610438058966813454552135810617643268326508884740007563057812557756872119827948177012498720002846584320083602883505675223930415710240943383142087697091237570482781352256162809593048997307636369071690373544475334727722226964401838105804104033698859046508072636221121284767256179261384695575800126777871914608799740333135169078085040301870738700721986026518324144597854534393940110548874771456733548819690014891150299883374569036144504075650284247154291122602262577738634502394468066637260601515590412677997656372138988479892629787344855469625993188902215341743976591335786134612426484416557074485085137922648888557127618980204107341206517456111787177656668620397156874752365541689736459115633909848251703534756902949331850082296669410306980175719986482188446333446450823956158029544268395051423740042819986368612454904255206373684842598857136228239326853906860111911390847498545181350875035398066868621959973870036473108206470890805125591766035651660263166256071859066523494404932873989243033885387310363168734739688132495065765084286985470381074859852651721482664917019227944750044815550686001], [], [176214841], [2290792932]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def all_permuted(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    der = [0] * (n + 1)\n    der[0] = 1\n    der[1] = 0\n    der[2] = 1\n    for i in range(3, n + 1):\n        der[i] = (i - 1) * (der[i - 1] + der[i - 2])\n    return der[n]"], "outputs": "[[1334961], [14684570], [895014631192902121], [11188719610782480504630258070757734324011354208865721592720336801], [34332795984163804765195977526776142032365783805375784983543400282685180793327632432791396429850988990237345920155783984828001486412574060553756854137069878601], [448863253698306933155392838660623489620105354970103184793237857021621807416676464390017030536267279344498807534207773593237750703257100773105417420856998767842465982794040307485641222623707290721644193132767010852011842890472678530455997713637642214060867495814388544602807064046292780892687753135669282026785078037854339667051787567659918192096324873246532479095397693382107563764571139528357816634936795502653003834316187208012981575941793559164870137672010854222248355203881560228640519377022514813211498582903344702569207222786526522848235496513485019964832754564700103084772539809401878146896383140576947150266553552283970712712958256538227060191738925708563696565167159778956101294959883772201053576103725735608793398394399772030446848976645226447579814720557809937875169500613558802001010337444654264758621145581728129929098983823756593815934544183813429280798625503170479211181185825449905791135644917533614962930979197304283935233310367077215615091476836260678574128601173726453375010972987926614609221847377386886723952636045713547625310222795804289446833623079871020041797984467123235820975960801026731987338183637527593001], [148030000371669080363916614118966054237787246771683461554691846089888817122236071181318987391054867545959072618913067395256592673937835956772241168222528295595683596720980666220609427831904885242029599391814586746492963217722340317777195575260366010059010655172144738284878861758208131004735035818477569368786432061632016188446807685910940321832572996649981481772252325191040086154426554657538458444535765717871033946613771702350305625265004320388243386097879262683082846870385959781954488956389970392578944288660459295031234507478736716881824136783622584535138805982288145285315709292044924680549217929790115984545014441521755735726306195457199770572691754663617787391418043564291295463544232345623814234091075245481655240617768194600801613370454579550360990469214942505585371933295794820730182459765487139302567668926438713305035074950095908181875721870629028442704188817930628082595769711646309710902713389577813924985084195489687602046619502008960961979336971200011845832972766496820425232309014424160383352549432587175804599513224295387620793237492133106194854781675335264245443368406349778626577154153936165795176414280246708209684255021094823421966794931258601926237888502063061179908920389122437280096694180318756729540187743522955287693403344627192008193243150047926683116206789808737520329932175926689631039801333205271773068694119886681439408208634536616162125484968246433299086618972038726320143524530159155122816067209479359158975104676175689942972909538981915518610438058966813454552135810617643268326508884740007563057812557756872119827948177012498720002846584320083602883505675223930415710240943383142087697091237570482781352256162809593048997307636369071690373544475334727722226964401838105804104033698859046508072636221121284767256179261384695575800126777871914608799740333135169078085040301870738700721986026518324144597854534393940110548874771456733548819690014891150299883374569036144504075650284247154291122602262577738634502394468066637260601515590412677997656372138988479892629787344855469625993188902215341743976591335786134612426484416557074485085137922648888557127618980204107341206517456111787177656668620397156874752365541689736459115633909848251703534756902949331850082296669410306980175719986482188446333446450823956158029544268395051423740042819986368612454904255206373684842598857136228239326853906860111911390847498545181350875035398066868621959973870036473108206470890805125591766035651660263166256071859066523494404932873989243033885387310363168734739688132495065765084286985470381074859852651721482664917019227944750044815550686001], [], [176214841], [2290792932]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def all_permuted(n: int) -> int:\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    a, b = (0, 1)\n    for i in range(2, n + 1):\n        a, b = (b, (i - 1) * (a + b))\n    return b"], "outputs": "[[2293839], [25232230], [1537887376983737879], [19225373590930897538982350095307034520366287360094790407279663199], [58993419459780347916503261329490558458350184459005836485049563612532419199902283176150067546305529296016352000671439773423183724504289939446243145862930121399], [771273572292803135545845946762423436633468987833089657399175731364223565737205533215479416965936002518514808942940429990925628018821076427375367784302330517635441589145290296287319636462563138452903689292145715492293827282798090930606804596815002004817921969940388605260687303734744863381346074229728189359692800457584149928485750422763322869175002111081213236450912283820673450796510048845351714381419528930334025729580441703645993193630294367764001144108059410952259413206838064161753803159400090421734351547015226798679499738781615102510821196910327988891416492326864023690881942077104715701055392220317058594972386783514505651231947056524096688874706123116101379381568702295681823889240575597491927446160246216988397546823423559726487732531907106373183005302844816970023172951098447405713630642011461862870524805655501783411070568540094349069657474543620365892215960854400349144598972909982863097544475482348769739220488408141123728302673807353264513846837060620960913341057643778053551354365187128863519418152622613113276047363954286452374689777204195710553166376920128979958202015532876764179024039198973268012661816362472406999], [254357259705424693179785819804037931481587617439031170989108064340049695276392949410725221095914537254520915991284128663375074199056972602129082661447416295401740907366093093698214199895283847277749906559180689374382012244774703283641082519386130280997383232265741749052240319287617652643114941193999063521049523673800496996877150777164617087281689420824367865781176321385571581642970114162752748934608088001717215861513096136024254106481131764991291138123707330518845244007911348649438355446891261166032092688140898009184934240130939154466487888694966736232030326466138090846096799488163075581133933097551711993159770194346414428638717958234198510692118458429143457504941885140823669511875676996597752598481005575851530876193785421235745370676254396052539960068401533342143049956383851424214978305587921059598817773561546246648284026773259648420263728529107252307433648797376499679331079322706315489113175145569517686717019772686233908861168517384217152215208286023853695628090125691139798606662461664345893510417714087521758311720858143820539360543397760858323408461996281497933725541373562125127454120468353822210019030134035303977677490971548133159779833371696968372786435651118556030556911647664468837163464603201994786744037796742215195610822799347094924868447747920555907009251537359488937736594594031963051233005742576120085110195532321482908936617358729427205534692031366398561701767178240739634987632021876938865364544929079241142460589851048516401658887921612767054493352025057618983913521434396759553558743586195183057871210578736401377737565781708060934225903189691329744079209747621931961677297287100723601279370689813332118788511147637047210902182585852694213966357410683838804258097397864250389792984161181765381657282089899886462589722380536373308586995077774210351998982575384127741287348340744100956660305096606700042051498609576197317983051878418603670121004266542968220274639554308683510975749410042999191955042306521334517930883820203227342188348730726405508560722863608909970924489851887352622764397863537002476230982294783364212661484511605679363778258987310937723828502470790764360037999005148591851652452268689785153758274640464662998041172032024497294559497839224250550981380735185434804985109243653169635506650545548568072531311635305572847503374089017785077651029728629404254568371170617243760673146093139888088609152501454818649124964601933131378040026129963526891793529109194874408233964348339736833743928140933476505595067126010756966114612689636831265260311867504934234915713014529618925140147348278517335082980772055249955184449313999], [], [302786759], [3936227868]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[4], [15], [9]]]"}, {"programs_str": ["def all_permuted(n: int) -> int:\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    a, b = (1, 0)\n    for i in range(2, n + 1):\n        a, b = (b, (i - 1) * (a + b))\n    return b"], "outputs": "[[1334961], [14684570], [895014631192902121], [11188719610782480504630258070757734324011354208865721592720336801], [34332795984163804765195977526776142032365783805375784983543400282685180793327632432791396429850988990237345920155783984828001486412574060553756854137069878601], [448863253698306933155392838660623489620105354970103184793237857021621807416676464390017030536267279344498807534207773593237750703257100773105417420856998767842465982794040307485641222623707290721644193132767010852011842890472678530455997713637642214060867495814388544602807064046292780892687753135669282026785078037854339667051787567659918192096324873246532479095397693382107563764571139528357816634936795502653003834316187208012981575941793559164870137672010854222248355203881560228640519377022514813211498582903344702569207222786526522848235496513485019964832754564700103084772539809401878146896383140576947150266553552283970712712958256538227060191738925708563696565167159778956101294959883772201053576103725735608793398394399772030446848976645226447579814720557809937875169500613558802001010337444654264758621145581728129929098983823756593815934544183813429280798625503170479211181185825449905791135644917533614962930979197304283935233310367077215615091476836260678574128601173726453375010972987926614609221847377386886723952636045713547625310222795804289446833623079871020041797984467123235820975960801026731987338183637527593001], [148030000371669080363916614118966054237787246771683461554691846089888817122236071181318987391054867545959072618913067395256592673937835956772241168222528295595683596720980666220609427831904885242029599391814586746492963217722340317777195575260366010059010655172144738284878861758208131004735035818477569368786432061632016188446807685910940321832572996649981481772252325191040086154426554657538458444535765717871033946613771702350305625265004320388243386097879262683082846870385959781954488956389970392578944288660459295031234507478736716881824136783622584535138805982288145285315709292044924680549217929790115984545014441521755735726306195457199770572691754663617787391418043564291295463544232345623814234091075245481655240617768194600801613370454579550360990469214942505585371933295794820730182459765487139302567668926438713305035074950095908181875721870629028442704188817930628082595769711646309710902713389577813924985084195489687602046619502008960961979336971200011845832972766496820425232309014424160383352549432587175804599513224295387620793237492133106194854781675335264245443368406349778626577154153936165795176414280246708209684255021094823421966794931258601926237888502063061179908920389122437280096694180318756729540187743522955287693403344627192008193243150047926683116206789808737520329932175926689631039801333205271773068694119886681439408208634536616162125484968246433299086618972038726320143524530159155122816067209479359158975104676175689942972909538981915518610438058966813454552135810617643268326508884740007563057812557756872119827948177012498720002846584320083602883505675223930415710240943383142087697091237570482781352256162809593048997307636369071690373544475334727722226964401838105804104033698859046508072636221121284767256179261384695575800126777871914608799740333135169078085040301870738700721986026518324144597854534393940110548874771456733548819690014891150299883374569036144504075650284247154291122602262577738634502394468066637260601515590412677997656372138988479892629787344855469625993188902215341743976591335786134612426484416557074485085137922648888557127618980204107341206517456111787177656668620397156874752365541689736459115633909848251703534756902949331850082296669410306980175719986482188446333446450823956158029544268395051423740042819986368612454904255206373684842598857136228239326853906860111911390847498545181350875035398066868621959973870036473108206470890805125591766035651660263166256071859066523494404932873989243033885387310363168734739688132495065765084286985470381074859852651721482664917019227944750044815550686001], [], [176214841], [2290792932]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.6388807593652175, "llm_generated_inputs": "[[10], [11], [20], [50], [100], [500], [1000], [5000], [12], [13]]", "input_output_examples": "[[[4]], [[9]]]", "weighted_test_consistency": 0.9500000000000001, "at_least_one_align": true, "ambiguity": 0.3444403796826087}}
{"requirement": "def convergents_of_e(n: int) -> int:\n\"\"\"# Convergents of e\nThe square root of 2 can be written as an infinite continued fraction.\n![img](http://img0.ph.126.net/x1Hyc4iHQg0Jz2EInmT3ag==/6597639313681841979.png)  \nThe infinite continued fraction can be written, √2 = [1;(2)], (2) indicates that 2 repeats ad infinitum. In a similar way, √23 = [4;(1,3,1,8)].\n\nIt turns out that the sequence of partial values of continued fractions for square roots provide the best rational approximations. \n\nWhat is most surprising is that the important mathematical constant,\ne = [2; 1,2,1, 1,4,1, 1,6,1 , … , 1,2k,1, …].\n\nFind the sum of digits in the numerator of the mth convergent of the continued fraction for e.\n\n\n- Powered by [Project Euler](https://projecteuler.net/problem=65)\n\"\"\"", "inputs": [[57], [125], [298], [938], [3756], [18287], [2132], [9999], [788], [8787]], "outputs": [[125], [298], [938], [3756], [18287], [108346], [9469], [55534], [3151], [48461]], "starter_code": "def convergents_of_e(n: int) -> int:", "canonical_solution": "e = [1, 2]\nfor n in range(1, 10 ** 4):\n    for f in (1, 2 * n, 1):\n        e.append(f * e[-1] + e[-2])\nconvergents_of_e = lambda n: sum(map(int, str(e[n])))", "entry_point": "convergents_of_e", "task_id": "TACO_lite/207", "input_output_examples": "[[[10]], [[17]]]", "llm_generated_inputs": "[[1], [2], [5], [10], [20], [50], [100]]", "clusters": {"cluster_list": [{"programs_str": ["from fractions import Fraction\n\ndef convergents_of_e(n: int) -> int:\n\n    def e_sequence(limit):\n        seq = [2]\n        k = 1\n        while len(seq) < limit:\n            seq.extend([1, 2 * k, 1])\n            k += 1\n        return seq[:limit]\n    seq = e_sequence(n)\n    conv = Fraction(seq[-1])\n    for num in reversed(seq[:-1]):\n        conv = Fraction(num) + Fraction(1, conv)\n    return sum((int(digit) for digit in str(conv.numerator)))", "from fractions import Fraction\n\ndef convergents_of_e(n: int) -> int:\n    if n == 1:\n        return 2\n    a = [2] + [1 if i % 3 != 2 else 2 * (i // 3 + 1) for i in range(1, n)]\n    f = Fraction(a[-1])\n    for x in reversed(a[:-1]):\n        f = Fraction(x) + 1 / f\n    return sum((int(digit) for digit in str(f.numerator)))", "def convergents_of_e(n: int) -> int:\n    from fractions import Fraction\n\n    def e_continued_fraction_term(k):\n        if k == 0:\n            return 2\n        elif k % 3 == 2:\n            return 2 * (k // 3 + 1)\n        else:\n            return 1\n    convergent = Fraction(0, 1)\n    for k in range(n - 1, -1, -1):\n        term = e_continued_fraction_term(k)\n        convergent = Fraction(term, 1) + convergent\n        if k != 0:\n            convergent = Fraction(1, convergent)\n    return sum((int(digit) for digit in str(convergent.numerator)))"], "outputs": "[[2], [3], [10], [17], [39], [91], [272]]", "probability": 0.15, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from fractions import Fraction\n\ndef convergents_of_e(n: int) -> int:\n\n    def e_sequence(length):\n        seq = [2]\n        k = 1\n        while len(seq) < length:\n            seq.extend([1, 2 * k, 1])\n            k += 1\n        return seq[:length]\n\n    def compute_convergent(seq):\n        convergent = Fraction(0)\n        for term in reversed(seq):\n            convergent = Fraction(1, term + convergent)\n        return convergent + seq[0]\n    seq = e_sequence(n)\n    numerator = compute_convergent(seq).numerator\n    return sum((int(digit) for digit in str(numerator)))", "from fractions import Fraction\n\ndef convergents_of_e(n: int) -> int:\n\n    def e_sequence(limit):\n        seq = [2]\n        k = 1\n        while len(seq) < limit:\n            seq.extend([1, 2 * k, 1])\n            k += 1\n        return seq[:limit]\n    seq = e_sequence(n)\n    conv = Fraction(0, 1)\n    for term in reversed(seq):\n        conv = Fraction(1, term + conv)\n    conv += seq[0]\n    return sum((int(digit) for digit in str(conv.numerator)))", "def convergents_of_e(n: int) -> int:\n    from fractions import Fraction\n\n    def e_sequence(n):\n        seq = [2]\n        k = 1\n        while len(seq) < n:\n            seq.extend([1, 2 * k, 1])\n            k += 1\n        return seq[:n]\n    seq = e_sequence(n)\n    convergent = Fraction(0, 1)\n    for term in reversed(seq):\n        convergent = Fraction(1, term + convergent)\n    convergent += seq[0]\n    return sum((int(digit) for digit in str(convergent.numerator)))", "def convergents_of_e(n: int) -> int:\n    from fractions import Fraction\n\n    def e_sequence(limit):\n        seq = [2]\n        k = 1\n        while len(seq) < limit:\n            seq.extend([1, 2 * k, 1])\n            k += 1\n        return seq[:limit]\n    sequence = e_sequence(n)\n    convergent = Fraction(0, 1)\n    for term in reversed(sequence):\n        convergent = Fraction(1, term + convergent)\n    convergent += sequence[0]\n    return sum((int(digit) for digit in str(convergent.numerator)))", "from fractions import Fraction\n\ndef convergents_of_e(n: int) -> int:\n\n    def e_sequence(limit):\n        seq = [2]\n        k = 1\n        while len(seq) < limit:\n            seq.extend([1, 2 * k, 1])\n            k += 1\n        return seq[:limit]\n    seq = e_sequence(n)\n    convergent = Fraction(0, 1)\n    for term in reversed(seq):\n        convergent = Fraction(1, term + convergent)\n    convergent += seq[0]\n    return sum((int(digit) for digit in str(convergent.numerator)))", "def convergents_of_e(n: int) -> int:\n    from fractions import Fraction\n\n    def e_sequence(n):\n        seq = [2]\n        k = 1\n        while len(seq) < n:\n            seq.extend([1, 2 * k, 1])\n            k += 1\n        return seq[:n]\n    seq = e_sequence(n)\n    conv = Fraction(0)\n    for term in reversed(seq):\n        conv = Fraction(1, term + conv)\n    conv += seq[0]\n    return sum((int(digit) for digit in str(conv.numerator)))"], "outputs": "[[5], [7], [9], [12], [43], [100], [270]]", "probability": 0.3, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [12], [17]]]"}, {"programs_str": ["from fractions import Fraction\n\ndef convergents_of_e(n: int) -> int:\n\n    def e_continued_fraction(n):\n        seq = [2]\n        k = 1\n        while len(seq) < n:\n            seq.extend([1, 2 * k, 1])\n            k += 1\n        return seq[:n]\n\n    def compute_convergent(seq):\n        convergent = Fraction(0)\n        for term in reversed(seq):\n            convergent = Fraction(1, term + convergent)\n        return convergent\n    seq = e_continued_fraction(n)\n    convergent = compute_convergent(seq)\n    numerator_sum_of_digits = sum((int(digit) for digit in str(convergent.numerator)))\n    return numerator_sum_of_digits", "from fractions import Fraction\n\ndef convergents_of_e(n: int) -> int:\n\n    def e_continued_fraction(n):\n        seq = [2]\n        k = 1\n        while len(seq) < n:\n            seq.extend([1, 2 * k, 1])\n            k += 1\n        return seq[:n]\n\n    def calculate_convergent(seq):\n        convergent = Fraction(0, 1)\n        for term in reversed(seq):\n            convergent = Fraction(1, term + convergent)\n        return convergent\n    seq = e_continued_fraction(n)\n    convergent = calculate_convergent(seq)\n    numerator = convergent.numerator\n    return sum((int(digit) for digit in str(numerator)))"], "outputs": "[[1], [1], [7], [14], [19], [107], [239]]", "probability": 0.1, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [14], [17]]]"}, {"programs_str": ["def convergents_of_e(n: int) -> int:\n    from fractions import Fraction\n\n    def e_terms():\n        k = 1\n        while True:\n            yield 1\n            yield (2 * k)\n            yield 1\n            k += 1\n    terms = [2] + [next(e_terms()) for _ in range(n - 1)]\n    convergent = Fraction(0, 1)\n    for term in reversed(terms):\n        convergent = Fraction(1, term + convergent)\n    convergent += terms[0]\n    return sum((int(digit) for digit in str(convergent.numerator)))"], "outputs": "[[5], [7], [4], [10], [22], [61], [91]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [10], [17]]]"}, {"programs_str": ["from fractions import Fraction\n\ndef convergents_of_e(n: int) -> int:\n\n    def e_continued_fraction_term(k):\n        if k == 0:\n            return 2\n        elif k % 3 == 2:\n            return 2 * (k // 3 + 1)\n        else:\n            return 1\n    fraction = Fraction(0, 1)\n    for k in range(n, 0, -1):\n        term = e_continued_fraction_term(k - 1)\n        fraction = term + Fraction(1, fraction)\n    numerator = fraction.numerator\n    return sum((int(digit) for digit in str(numerator)))"], "outputs": "[['ZeroDivisionError'], ['ZeroDivisionError'], ['ZeroDivisionError'], ['ZeroDivisionError'], ['ZeroDivisionError'], ['ZeroDivisionError'], ['ZeroDivisionError']]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], ['ZeroDivisionError'], [17]]]"}, {"programs_str": ["def convergents_of_e(n: int) -> int:\n    from fractions import Fraction\n\n    def e_terms(k):\n        if k == 0:\n            return 2\n        elif k % 3 == 2:\n            return 2 * (k // 3 + 1)\n        else:\n            return 1\n    fraction = Fraction(0)\n    for i in range(n - 1, 0, -1):\n        fraction = Fraction(e_terms(i), 1 + fraction)\n    fraction += Fraction(e_terms(0))\n    return sum((int(digit) for digit in str(fraction.numerator)))"], "outputs": "[[2], [3], [8], [11], [34], [82], [245]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [11], [17]]]"}, {"programs_str": ["from fractions import Fraction\n\ndef convergents_of_e(n: int) -> int:\n    if n == 1:\n        return 2\n    a = 2\n    b = Fraction(1, 1)\n    k = 1\n    for i in range(1, n):\n        if i % 3 == 2:\n            k += 1\n            b = Fraction(2 * k, 1 + b)\n        else:\n            b = Fraction(1, 1 + b)\n    result = a + b\n    return sum((int(digit) for digit in str(result.numerator)))"], "outputs": "[[2], [5], [12], [20], [33], [79], [251]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [20], [17]]]"}, {"programs_str": ["from fractions import Fraction\n\ndef convergents_of_e(n: int) -> int:\n    if n == 1:\n        return 2\n    a = 2\n    b = Fraction(1, 1)\n    for k in range(1, n):\n        if k % 3 == 2:\n            a = 2 * (k // 3 + 1)\n        else:\n            a = 1\n        b = Fraction(a, 1 + b)\n    numerator = 2 + b\n    return sum((int(digit) for digit in str(numerator.numerator)))"], "outputs": "[[2], [5], [9], [12], [35], [87], [225]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [12], [17]]]"}, {"programs_str": ["def convergents_of_e(n: int) -> int:\n    from fractions import Fraction\n\n    def e_continued_fraction_term(k):\n        if k == 0:\n            return 2\n        elif k % 3 == 2:\n            return 2 * (k // 3 + 1)\n        else:\n            return 1\n    convergent = Fraction(0, 1)\n    for k in range(n, -1, -1):\n        term = e_continued_fraction_term(k)\n        convergent = Fraction(term, 1) + convergent\n        if k != 0:\n            convergent = Fraction(1, convergent)\n    return sum((int(digit) for digit in str(convergent.numerator)))"], "outputs": "[[3], [8], [15], [12], [17], [99], [255]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [12], [17]]]"}, {"programs_str": ["def convergents_of_e(n: int) -> int:\n    from fractions import Fraction\n    if n == 1:\n        return 2\n    h, k = (1, 0)\n    h1, k1 = (2, 1)\n    for i in range(2, n + 1):\n        a = 2 * (i // 3) if i % 3 == 2 else 1\n        h, k = (h1, k1)\n        h1, k1 = (a * h1 + h, a * k1 + k)\n    return sum((int(digit) for digit in str(h1)))"], "outputs": "[[2], [2], [6], [12], [27], [81], [261]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [12], [17]]]"}, {"programs_str": ["from fractions import Fraction\n\ndef convergents_of_e(n: int) -> int:\n\n    def e_terms():\n        k = 1\n        while True:\n            yield 1\n            yield (2 * k)\n            yield 1\n            k += 1\n    terms = [2] + list(e_terms())[:n - 1]\n    convergent = Fraction(1, terms[-1])\n    for term in reversed(terms[:-1]):\n        convergent = Fraction(term) + Fraction(1, convergent)\n    return sum((int(digit) for digit in str(convergent.numerator)))"], "outputs": "['Timeout', 'Timeout', 'Timeout', 'Timeout', 'Timeout', 'Timeout', 'Timeout']", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], 'Timeout', [17]]]"}, {"programs_str": ["from fractions import Fraction\n\ndef convergents_of_e(n: int) -> int:\n    if n == 1:\n        return 2\n    a = [2] + [1 if i % 3 != 1 else 2 * (i // 3 + 1) for i in range(1, n)]\n    f = Fraction(a[-1])\n    for x in reversed(a[:-1]):\n        f = Fraction(x) + 1 / f\n    return sum((int(digit) for digit in str(f.numerator)))"], "outputs": "[[2], [5], [10], [10], [53], [107], [265]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [10], [17]]]"}], "entropy": 0.8950428265058215, "llm_generated_inputs": "[[1], [2], [5], [10], [20], [50], [100]]", "input_output_examples": "[[[10]], [[17]]]", "weighted_test_consistency": 0.15, "at_least_one_align": true, "ambiguity": 0.8725214132529107}}
{"requirement": "from typing import Union\n\n\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:\n\"\"\"My washing machine uses ```water``` amount of water to wash ```clothes``` amount of clothes. You are given a ```load``` amount of clothes to wash.  For each single item of load above the standard amount of clothes, the washing machine will use 10% more water (multiplicative) to clean.\n\nWrite a function ```howMuchWater``` (JS)/```how_much_water``` (Python) to work out how much water is needed if you have a ```clothes``` amount of clothes.  The function will accept 3 parameters - ```howMuchWater(water, load, clothes)``` / ```how_much_water(water, load, clothes)```\n\nMy washing machine is an old model that can only handle double the amount of ```load```.  If the amount of ```clothes``` is more than 2 times the standard amount of ```load```, return ```'Too much clothes'```.  The washing machine also cannot handle any amount of clothes less than ```load```.  If that is the case, return ```'Not enough clothes'```.\n\nThe answer should be rounded to the nearest 2 decimal places.\n\"\"\"", "inputs": [[10, 10, 21], [10, 10, 2], [10, 11, 20], [50, 15, 29], [50, 15, 15]], "outputs": [["Too much clothes"], ["Not enough clothes"], [23.58], [189.87], [50]], "starter_code": "from typing import Union\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:", "canonical_solution": "def how_much_water(water, clothes, load):\n    if load > 2 * clothes:\n        return 'Too much clothes'\n    if load < clothes:\n        return 'Not enough clothes'\n    for i in range(load - clothes):\n        water *= 1.1\n    return round(water, 2)", "entry_point": "how_much_water", "task_id": "TACO_lite/208", "input_output_examples": "[[[5.0, 14, 10], [5.0, 5, 10], [5.0, 25, 10]], [[7.33], ['Not enough clothes'], ['Too much clothes']]]", "llm_generated_inputs": "[[10.0, 5, 5], [10.0, 5, 6], [10.0, 5, 10], [10.0, 5, 11], [10.0, 5, 0], [10.0, 5, 1], [10.0, 5, 2], [10.0, 5, 9], [10.0, 5, 25], [10.0, 5, 100]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import Union\n\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:\n    if clothes > 2 * load:\n        return 'Too much clothes'\n    elif clothes < load:\n        return 'Not enough clothes'\n    else:\n        additional_clothes = clothes - load\n        total_water = water * 1.1 ** additional_clothes\n        return round(total_water, 2)", "from typing import Union\n\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:\n    if clothes < load:\n        return 'Not enough clothes'\n    if clothes > 2 * load:\n        return 'Too much clothes'\n    additional_clothes = clothes - load\n    total_water = water * 1.1 ** additional_clothes\n    return round(total_water, 2)", "from typing import Union\n\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:\n    if clothes < load:\n        return 'Not enough clothes'\n    if clothes > 2 * load:\n        return 'Too much clothes'\n    additional_clothes = clothes - load\n    total_water = water * 1.1 ** additional_clothes\n    return round(total_water, 2)", "from typing import Union\n\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:\n    if clothes < load:\n        return 'Not enough clothes'\n    if clothes > 2 * load:\n        return 'Too much clothes'\n    additional_clothes = clothes - load\n    total_water = water * 1.1 ** additional_clothes\n    return round(total_water, 2)", "from typing import Union\n\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:\n    if clothes < load:\n        return 'Not enough clothes'\n    if clothes > 2 * load:\n        return 'Too much clothes'\n    additional_clothes = clothes - load\n    total_water = water * 1.1 ** additional_clothes\n    return round(total_water, 2)", "from typing import Union\n\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:\n    if clothes < load:\n        return 'Not enough clothes'\n    if clothes > 2 * load:\n        return 'Too much clothes'\n    additional_clothes = clothes - load\n    total_water = water * 1.1 ** additional_clothes\n    return round(total_water, 2)", "from typing import Union\n\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:\n    if clothes < load:\n        return 'Not enough clothes'\n    if clothes > 2 * load:\n        return 'Too much clothes'\n    additional_clothes = clothes - load\n    total_water = water * 1.1 ** additional_clothes\n    return round(total_water, 2)", "from typing import Union\n\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:\n    if clothes > 2 * load:\n        return 'Too much clothes'\n    elif clothes < load:\n        return 'Not enough clothes'\n    else:\n        additional_clothes = clothes - load\n        total_water = water * 1.1 ** additional_clothes\n        return round(total_water, 2)", "from typing import Union\n\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:\n    if clothes < load:\n        return 'Not enough clothes'\n    if clothes > 2 * load:\n        return 'Too much clothes'\n    additional_clothes = clothes - load\n    total_water = water * 1.1 ** additional_clothes\n    return round(total_water, 2)", "from typing import Union\n\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:\n    if clothes < load:\n        return 'Not enough clothes'\n    if clothes > 2 * load:\n        return 'Too much clothes'\n    additional_clothes = clothes - load\n    total_water = water * 1.1 ** additional_clothes\n    return round(total_water, 2)", "from typing import Union\n\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:\n    if clothes > 2 * load:\n        return 'Too much clothes'\n    elif clothes < load:\n        return 'Not enough clothes'\n    else:\n        additional_clothes = max(0, clothes - load)\n        total_water = water * 1.1 ** additional_clothes\n        return round(total_water, 2)", "from typing import Union\n\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:\n    if clothes < load:\n        return 'Not enough clothes'\n    if clothes > 2 * load:\n        return 'Too much clothes'\n    additional_clothes = clothes - load\n    total_water = water * 1.1 ** additional_clothes\n    return round(total_water, 2)", "from typing import Union\n\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:\n    if clothes < load:\n        return 'Not enough clothes'\n    elif clothes > 2 * load:\n        return 'Too much clothes'\n    else:\n        additional_clothes = clothes - load\n        total_water = water * 1.1 ** additional_clothes\n        return round(total_water, 2)", "from typing import Union\n\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:\n    if clothes > 2 * load:\n        return 'Too much clothes'\n    elif clothes < load:\n        return 'Not enough clothes'\n    else:\n        additional_clothes = clothes - load\n        total_water = water * 1.1 ** additional_clothes\n        return round(total_water, 2)", "from typing import Union\n\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:\n    if clothes > 2 * load:\n        return 'Too much clothes'\n    elif clothes < load:\n        return 'Not enough clothes'\n    else:\n        additional_clothes = clothes - load\n        total_water = water * 1.1 ** additional_clothes\n        return round(total_water, 2)", "from typing import Union\n\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:\n    if clothes > 2 * load:\n        return 'Too much clothes'\n    elif clothes < load:\n        return 'Not enough clothes'\n    else:\n        additional_clothes = clothes - load\n        total_water = water * 1.1 ** additional_clothes\n        return round(total_water, 2)", "from typing import Union\n\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:\n    if clothes > 2 * load:\n        return 'Too much clothes'\n    elif clothes < load:\n        return 'Not enough clothes'\n    else:\n        additional_clothes = max(0, clothes - load)\n        total_water = water * 1.1 ** additional_clothes\n        return round(total_water, 2)", "from typing import Union\n\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:\n    if clothes > 2 * load:\n        return 'Too much clothes'\n    elif clothes < load:\n        return 'Not enough clothes'\n    else:\n        additional_clothes = clothes - load\n        total_water = water * 1.1 ** additional_clothes\n        return round(total_water, 2)", "from typing import Union\n\ndef how_much_water(water: float, clothes: int, load: int) -> Union[str, float]:\n    if clothes < load:\n        return 'Not enough clothes'\n    if clothes > 2 * load:\n        return 'Too much clothes'\n    additional_clothes = clothes - load\n    total_water = water * 1.1 ** additional_clothes\n    return round(total_water, 2)"], "outputs": "[[10.0], ['Not enough clothes'], ['Not enough clothes'], ['Not enough clothes'], ['Too much clothes'], ['Too much clothes'], ['Too much clothes'], ['Not enough clothes'], ['Not enough clothes'], ['Not enough clothes']]", "probability": 0.95, "is_align_req": false, "test_consistency": 0.6666666666666667, "failed_input_output_examples": "[[[5.0, 14, 10], [7.32], [7.33]]]"}, {"programs_str": [""], "outputs": "[['EmptyCodeError'], ['EmptyCodeError'], ['EmptyCodeError'], ['EmptyCodeError'], ['EmptyCodeError'], ['EmptyCodeError'], ['EmptyCodeError'], ['EmptyCodeError'], ['EmptyCodeError'], ['EmptyCodeError']]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[5.0, 14, 10], ['EmptyCodeError'], [7.33]], [[5.0, 5, 10], ['EmptyCodeError'], ['Not enough clothes']], [[5.0, 25, 10], ['EmptyCodeError'], ['Too much clothes']]]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[10.0, 5, 5], [10.0, 5, 6], [10.0, 5, 10], [10.0, 5, 11], [10.0, 5, 0], [10.0, 5, 1], [10.0, 5, 2], [10.0, 5, 9], [10.0, 5, 25], [10.0, 5, 100]]", "input_output_examples": "[[[5.0, 14, 10], [5.0, 5, 10], [5.0, 25, 10]], [[7.33], ['Not enough clothes'], ['Too much clothes']]]", "weighted_test_consistency": 0.6333333333333334, "at_least_one_align": false, "ambiguity": 0.3265318118913114}}
{"requirement": "def people_with_age_drink(age: int) -> str:\n\"\"\"- Kids drink toddy.\n- Teens drink coke.\n- Young adults drink beer.\n- Adults drink whisky.\n\nMake a function that receive age, and return what they drink.\n\n**Rules:**\n\n- Children under 14 old.\n- Teens under 18 old.\n- Young under 21 old.\n- Adults have 21 or more.\n\"\"\"", "inputs": [[13], [0], [17], [15], [14], [20], [18], [22], [21]], "outputs": [["drink toddy"], ["drink toddy"], ["drink coke"], ["drink coke"], ["drink coke"], ["drink beer"], ["drink beer"], ["drink whisky"], ["drink whisky"]], "starter_code": "def people_with_age_drink(age: int) -> str:", "canonical_solution": "def people_with_age_drink(age):\n    if age > 20:\n        return 'drink whisky'\n    if age > 17:\n        return 'drink beer'\n    if age > 13:\n        return 'drink coke'\n    return 'drink toddy'", "entry_point": "people_with_age_drink", "task_id": "TACO_lite/210", "input_output_examples": "[[[13], [17], [18], [20], [30]], [['drink toddy'], ['drink coke'], ['drink beer'], ['drink beer'], ['drink whisky']]]", "llm_generated_inputs": "[[0], [13], [14], [17], [18], [20], [21], [100]]", "clusters": {"cluster_list": [{"programs_str": ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], "outputs": "[['EmptyCodeError'], ['EmptyCodeError'], ['EmptyCodeError'], ['EmptyCodeError'], ['EmptyCodeError'], ['EmptyCodeError'], ['EmptyCodeError'], ['EmptyCodeError']]", "probability": 1.0, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[13], ['EmptyCodeError'], ['drink toddy']], [[17], ['EmptyCodeError'], ['drink coke']], [[18], ['EmptyCodeError'], ['drink beer']], [[20], ['EmptyCodeError'], ['drink beer']], [[30], ['EmptyCodeError'], ['drink whisky']]]"}], "entropy": 0, "llm_generated_inputs": "[[0], [13], [14], [17], [18], [20], [21], [100]]", "input_output_examples": "[[[13], [17], [18], [20], [30]], [['drink toddy'], ['drink coke'], ['drink beer'], ['drink beer'], ['drink whisky']]]", "weighted_test_consistency": 0.0, "at_least_one_align": false, "ambiguity": 0.5}}
