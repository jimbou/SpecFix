{"task_id": "Mbpp/2", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"", "entry_point": "similar_elements", "canonical_solution": "def similar_elements(test_tup1, test_tup2):\n  return tuple(set(test_tup1) & set(test_tup2))", "input_output_examples": "[[[[3, 4, 5, 6], [5, 7, 4, 10]]], [[(4, 5)]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:", "llm_generated_inputs": "[[[3, 4, 5, 6], [5, 7, 4, 10]], [[1, 2, 3], [4, 5, 6]], [[1, 1, 2, 2], [2, 2, 3, 3]], [[], [1, 2, 3]], [[1, 2, 3], []], [[], []], [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1]], [[10, 20, 30, 40], [40, 30, 20, 10]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))"], "outputs": "[[(4, 5)], [()], [(2,)], [()], [()], [()], [(1, 2, 3, 4, 5)], [(40, 10, 20, 30)]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[3, 4, 5, 6], [5, 7, 4, 10]], [[1, 2, 3], [4, 5, 6]], [[1, 1, 2, 2], [2, 2, 3, 3]], [[], [1, 2, 3]], [[1, 2, 3], []], [[], []], [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1]], [[10, 20, 30, 40], [40, 30, 20, 10]]]", "input_output_examples": "[[[[3, 4, 5, 6], [5, 7, 4, 10]]], [[(4, 5)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/3", "requirement": "def is_not_prime(n: int) -> bool:\n\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"", "entry_point": "is_not_prime", "canonical_solution": "import math\ndef is_not_prime(n):\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False", "input_output_examples": "[[[2]], [[False]]]", "starter_code": "def is_not_prime(n: int) -> bool:", "llm_generated_inputs": "[[2], [3], [4], [5], [9], [11], [15], [17], [18], [19], [20], [23], [24], [25], [29], [30], [-1], [0], [1]]", "clusters": {"cluster_list": [{"programs_str": ["def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"], "outputs": "[[False], [False], [True], [False], [True], [False], [True], [False], [True], [False], [True], [False], [True], [True], [False], [True], [True], [True], [True]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[2], [3], [4], [5], [9], [11], [15], [17], [18], [19], [20], [23], [24], [25], [29], [30], [-1], [0], [1]]", "input_output_examples": "[[[2]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/4", "requirement": "def heap_queue_largest(nums: list, n: int) -> list:\n\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"", "entry_point": "heap_queue_largest", "canonical_solution": "import heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums", "input_output_examples": "[[[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3]], [[[85, 75, 65]]]]", "starter_code": "def heap_queue_largest(nums: list, n: int) -> list:", "llm_generated_inputs": "[[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3], [[1, 2, 3, 4, 5], 5], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 1], [[5, 5, 5, 5, 5], 3], [[100], 1], [[100, 200, 300], 0], [[100, 200, 300], 5], [[], 3], [[1, 2, 3], -1]]", "clusters": {"cluster_list": [{"programs_str": ["import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return heapq.nlargest(n, nums)[::-1]", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return heapq.nlargest(n, nums)[::-1]", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)[::-1]", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)[::-1]", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return heapq.nlargest(n, nums)[::-1]", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return heapq.nlargest(n, nums)[::-1]", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)[::-1]", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return heapq.nlargest(n, nums)[::-1]", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)[::-1]", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)[::-1]", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)[::-1]", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)[::-1]", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)[::-1]", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return heapq.nlargest(n, nums)[::-1]", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return heapq.nlargest(n, nums)[::-1]", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return heapq.nlargest(n, nums)[::-1]", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)[::-1]", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return heapq.nlargest(n, nums)[::-1]", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)[::-1]", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return heapq.nlargest(n, nums)[::-1]"], "outputs": "[[[65, 75, 85]], [[1, 2, 3, 4, 5]], [[10]], [[5, 5, 5]], [[100]], [[]], [[100, 200, 300]], [[]], [[]]]", "probability": 1.0, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3], [[65, 75, 85]], [[85, 75, 65]]]]"}], "entropy": 0, "llm_generated_inputs": "[[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3], [[1, 2, 3, 4, 5], 5], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 1], [[5, 5, 5, 5, 5], 3], [[100], 1], [[100, 200, 300], 0], [[100, 200, 300], 5], [[], 3], [[1, 2, 3], -1]]", "input_output_examples": "[[[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3]], [[[85, 75, 65]]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false, "ambiguity": 0.5}}
{"task_id": "Mbpp/6", "requirement": "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"", "entry_point": "differ_At_One_Bit_Pos", "canonical_solution": "def is_Power_Of_Two(x: int): \n    return x > 0 and (x & (x - 1)) == 0\ndef differ_At_One_Bit_Pos(a: int,b: int):\n    return is_Power_Of_Two(a ^ b)", "input_output_examples": "[[[13, 9]], [[True]]]", "starter_code": "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:", "llm_generated_inputs": "[[13, 9], [0, 1], [2, 3], [4, 5], [8, 10], [1, 2], [3, 1], [15, 7], [31, 15], [16, 0], [0, 0], [5, 5], [255, 254], [1024, 1025], [2048, 2049]]", "clusters": {"cluster_list": [{"programs_str": ["def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result & xor_result - 1 == 0 and xor_result != 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result & xor_result - 1 == 0 and xor_result != 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result & xor_result - 1 == 0 and xor_result != 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result & xor_result - 1 == 0 and xor_result != 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0 and a != b", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0 and a != b", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0 and a != b", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result & xor_result - 1 == 0 and xor_result != 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result & xor_result - 1 == 0 and xor_result != 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result & xor_result - 1 == 0 and xor_result != 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result & xor_result - 1 == 0 and xor_result != 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0 and a != b", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0 and a != b", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result & xor_result - 1 == 0 and xor_result != 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result & xor_result - 1 == 0 and xor_result != 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0 and a != b", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result & xor_result - 1 == 0 and xor_result != 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0 and a != b", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0 and a != b", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0 and a != b"], "outputs": "[[True], [True], [True], [True], [True], [False], [True], [True], [True], [True], [False], [False], [True], [True], [True]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[13, 9], [0, 1], [2, 3], [4, 5], [8, 10], [1, 2], [3, 1], [15, 7], [31, 15], [16, 0], [0, 0], [5, 5], [255, 254], [1024, 1025], [2048, 2049]]", "input_output_examples": "[[[13, 9]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/7", "requirement": "from typing import List\n\n\ndef find_char_long(text: str) -> List[str]:\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"", "entry_point": "find_char_long", "canonical_solution": "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))", "input_output_examples": "[[['Please move back to stream']], [[['Please', 'move', 'back', 'stream']]]]", "starter_code": "from typing import List\ndef find_char_long(text: str) -> List[str]:", "llm_generated_inputs": "[['Please move back to stream'], ['a'], ['abc'], ['abcd'], ['abcde'], ['This is a test string with some longwordsindeed'], ['short longword'], ['equal equal'], ['single'], ['multiple words here'], ['1234 56789'], ['!@#$%^ &*()'], ['MixedCASE Words'], ['1234abcd efgh5678'], ['boundary conditions']]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]"], "outputs": "[[['Please', 'move', 'back', 'stream']], [[]], [[]], [['abcd']], [['abcde']], [['This', 'test', 'string', 'with', 'some', 'longwordsindeed']], [['short', 'longword']], [['equal', 'equal']], [['single']], [['multiple', 'words', 'here']], [['1234', '56789']], [['!@#$%^', '&*()']], [['MixedCASE', 'Words']], [['1234abcd', 'efgh5678']], [['boundary', 'conditions']]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Please move back to stream'], ['a'], ['abc'], ['abcd'], ['abcde'], ['This is a test string with some longwordsindeed'], ['short longword'], ['equal equal'], ['single'], ['multiple words here'], ['1234 56789'], ['!@#$%^ &*()'], ['MixedCASE Words'], ['1234abcd efgh5678'], ['boundary conditions']]", "input_output_examples": "[[['Please move back to stream']], [[['Please', 'move', 'back', 'stream']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/8", "requirement": "from typing import List\n\n\ndef square_nums(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"", "entry_point": "square_nums", "canonical_solution": "def square_nums(nums):\n return [i**2 for i in nums]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]]]]", "starter_code": "from typing import List\ndef square_nums(nums: List[int]) -> List[int]:", "llm_generated_inputs": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[0]], [[-1, -2, -3]], [[10, 20, 30]], [[]], [[100, 200, 300]], [[1, 0, -1, 2, -2]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]"], "outputs": "[[[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]], [[0]], [[1, 4, 9]], [[100, 400, 900]], [[]], [[10000, 40000, 90000]], [[1, 0, 1, 4, 4]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[0]], [[-1, -2, -3]], [[10, 20, 30]], [[]], [[100, 200, 300]], [[1, 0, -1, 2, -2]]]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/9", "requirement": "def find_Rotations(s: str) -> int:\n\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"", "entry_point": "find_Rotations", "canonical_solution": "def find_Rotations(s): \n    n = len(s)\n    s += s\n    for i in range(1, n + 1):\n        if s[i: i + n] == s[0: n]:\n            return i\n    return n", "input_output_examples": "[[['aaaa']], [[1]]]", "starter_code": "def find_Rotations(s: str) -> int:", "llm_generated_inputs": "[['aaaa'], ['abcde'], ['abab'], ['abcdabcd'], ['aabbccdd'], ['zzzzzzzz'], ['abcdefg'], ['a'], ['']]", "clusters": {"cluster_list": [{"programs_str": ["def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n"], "outputs": "[[1], [5], [2], [4], [8], [1], [7], [1], [0]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['aaaa'], ['abcde'], ['abab'], ['abcdabcd'], ['aabbccdd'], ['zzzzzzzz'], ['abcdefg'], ['a'], ['']]", "input_output_examples": "[[['aaaa']], [[1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/11", "requirement": "def remove_Occ(s: str, ch: str) -> str:\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"", "entry_point": "remove_Occ", "canonical_solution": "def remove_Occ(s,ch): \n    s = s.replace(ch, '', 1)\n    s = s[::-1].replace(ch, '', 1)[::-1]\n    return s", "input_output_examples": "[[['hello', 'l']], [['heo']]]", "starter_code": "def remove_Occ(s: str, ch: str) -> str:", "llm_generated_inputs": "[['hello', 'l'], ['abracadabra', 'a'], ['mississippi', 'i'], ['foobar', 'f'], ['foobar', 'x'], ['', 'a'], ['a', 'a'], ['aaaa', 'a'], ['abcde', 'e'], ['abcde', 'a']]", "clusters": {"cluster_list": [{"programs_str": ["def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    if first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence + 1:]\n    last_occurrence = s.rfind(ch)\n    if last_occurrence != -1:\n        s = s[:last_occurrence] + s[last_occurrence + 1:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    if first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence + 1:]\n    last_occurrence = s.rfind(ch)\n    if last_occurrence != -1:\n        s = s[:last_occurrence] + s[last_occurrence + 1:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    if first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence + 1:]\n    last_occurrence = s.rfind(ch)\n    if last_occurrence != -1:\n        s = s[:last_occurrence] + s[last_occurrence + 1:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    if first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence + 1:]\n    last_occurrence = s.rfind(ch)\n    if last_occurrence != -1:\n        s = s[:last_occurrence] + s[last_occurrence + 1:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    if first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence + 1:]\n    last_occurrence = s.rfind(ch)\n    if last_occurrence != -1:\n        s = s[:last_occurrence] + s[last_occurrence + 1:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    if first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence + 1:]\n    last_occurrence = s.rfind(ch)\n    if last_occurrence != -1:\n        s = s[:last_occurrence] + s[last_occurrence + 1:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    if first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence + 1:]\n    last_occurrence = s.rfind(ch)\n    if last_occurrence != -1:\n        s = s[:last_occurrence] + s[last_occurrence + 1:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    if first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence + 1:]\n    last_occurrence = s.rfind(ch)\n    if last_occurrence != -1:\n        s = s[:last_occurrence] + s[last_occurrence + 1:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]"], "outputs": "[['heo'], ['bracadabr'], ['mssissipp'], ['oobar'], ['foobar'], [''], [''], ['aa'], ['abcd'], ['bcde']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['hello', 'l'], ['abracadabra', 'a'], ['mississippi', 'i'], ['foobar', 'f'], ['foobar', 'x'], ['', 'a'], ['a', 'a'], ['aaaa', 'a'], ['abcde', 'e'], ['abcde', 'a']]", "input_output_examples": "[[['hello', 'l']], [['heo']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/12", "requirement": "from typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"", "entry_point": "sort_matrix", "canonical_solution": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "input_output_examples": "[[[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]]], [[[[1, 1, 1], [1, 2, 3], [2, 4, 5]]]]]", "starter_code": "from typing import List\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:", "llm_generated_inputs": "[[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]], [[[10, 15], [5, 20], [25, 0]]], [[[5, 5, 5], [0, 0, 0], [1, 2, 3]]], [[[3, 2, 1], [6, 5, 4], [9, 8, 7]]], [[]], [[[]]], [[[1]]], [[[1, 2], [3, 4], [5, 6], [7, 8]]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)"], "outputs": "[[[[1, 1, 1], [1, 2, 3], [2, 4, 5]]], [[[10, 15], [5, 20], [25, 0]]], [[[0, 0, 0], [1, 2, 3], [5, 5, 5]]], [[[3, 2, 1], [6, 5, 4], [9, 8, 7]]], [[]], [[[]]], [[[1]]], [[[1, 2], [3, 4], [5, 6], [7, 8]]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]], [[[10, 15], [5, 20], [25, 0]]], [[[5, 5, 5], [0, 0, 0], [1, 2, 3]]], [[[3, 2, 1], [6, 5, 4], [9, 8, 7]]], [[]], [[[]]], [[[1]]], [[[1, 2], [3, 4], [5, 6], [7, 8]]]]", "input_output_examples": "[[[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]]], [[[[1, 1, 1], [1, 2, 3], [2, 4, 5]]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/14", "requirement": "def find_Volume(l: float, b: float, h: float) -> float:\n\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"", "entry_point": "find_Volume", "canonical_solution": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2)", "input_output_examples": "[[[10, 8, 6]], [[240]]]", "starter_code": "def find_Volume(l: float, b: float, h: float) -> float:", "llm_generated_inputs": "[[10, 8, 6], [0, 5, 10], [5, 0, 10], [5, 10, 0], [0, 0, 0], [1.5, 2.5, 3.5], [-1, 5, 10], [5, -1, 10], [5, 10, -1], [-1, -1, -1]]", "clusters": {"cluster_list": [{"programs_str": ["def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2"], "outputs": "[[240.0], [0.0], [0.0], [0.0], [0.0], [6.5625], [-25.0], [-25.0], [-25.0], [-0.5]]", "probability": 0.8, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def find_Volume(l: float, b: float, h: float) -> float:\n    from math import sqrt\n    base_area = b * sqrt(l ** 2 - (b / 2) ** 2) / 2\n    return base_area * h"], "outputs": "[[219.96363335788033], ['ValueError'], [0.0], [0.0], [0.0], [3.627558364451218], ['ValueError'], [-24.8746859276655], [-0.0], [0.4330127018922193]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[10, 8, 6], [219.96363335788033], [240]]]"}, {"programs_str": ["def find_Volume(l: float, b: float, h: float) -> float:\n    from math import sqrt\n    base_area = b * sqrt(3) / 4\n    return base_area * l"], "outputs": "[[34.64101615137754], [0.0], [0.0], [21.650635094610962], [0.0], [1.6237976320958223], [-2.1650635094610964], [-2.1650635094610964], [21.650635094610962], [0.4330127018922193]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[10, 8, 6], [34.64101615137754], [240]]]"}, {"programs_str": ["def find_Volume(l: float, b: float, h: float) -> float:\n    from math import sqrt\n    s = (l + b + sqrt(l ** 2 + b ** 2)) / 2\n    area_of_base = sqrt(s * (s - l) * (s - b) * (s - sqrt(l ** 2 + b ** 2)))\n    volume = area_of_base * h\n    return volume", "def find_Volume(l: float, b: float, h: float) -> float:\n    from math import sqrt\n    s = (l + b + sqrt(l ** 2 + b ** 2)) / 2\n    area_of_base = sqrt(s * (s - l) * (s - b) * (s - sqrt(l ** 2 + b ** 2)))\n    volume = area_of_base * h\n    return volume"], "outputs": "[[240.0], [0.0], [0.0], [0.0], [0.0], [6.562499999999999], [25.0], [25.0], [-24.999999999999996], [-0.5]]", "probability": 0.1, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.5109640474436812, "llm_generated_inputs": "[[10, 8, 6], [0, 5, 10], [5, 0, 10], [5, 10, 0], [0, 0, 0], [1.5, 2.5, 3.5], [-1, 5, 10], [5, -1, 10], [5, 10, -1], [-1, -1, -1]]", "input_output_examples": "[[[10, 8, 6]], [[240]]]", "weighted_test_consistency": 0.9, "at_least_one_align": true, "ambiguity": 0.3054820237218406}}
{"task_id": "Mbpp/16", "requirement": "def text_lowercase_underscore(text: str) -> bool:\n\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"", "entry_point": "text_lowercase_underscore", "canonical_solution": "import re\ndef text_lowercase_underscore(text):\n        return bool(re.match('^[a-z]+(_[a-z]+)*$', text))", "input_output_examples": "[[['aab_cbbbc']], [[True]]]", "starter_code": "def text_lowercase_underscore(text: str) -> bool:", "llm_generated_inputs": "[['aab_cbbbc'], ['Aab_cbbbc'], ['aab_Cbbbc'], ['aab_cbbBc'], ['aab_cbbbc_'], ['_aab_cbbbc'], ['aab__cbbbc'], ['aab_cbbbc_def'], ['aab_cbbbc123'], ['123_aab_cbbbc'], ['aab_cbbbc!'], ['aab_cbbbc '], [''], ['_'], ['a_b_c_d_e'], ['abcdefghijklmnopqrstuvwxyz'], ['a_b']]", "clusters": {"cluster_list": [{"programs_str": ["import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', text))"], "outputs": "[[True], [False], [False], [False], [False], [False], [False], [True], [False], [False], [False], [False], [False], [False], [True], [True], [True]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['aab_cbbbc'], ['Aab_cbbbc'], ['aab_Cbbbc'], ['aab_cbbBc'], ['aab_cbbbc_'], ['_aab_cbbbc'], ['aab__cbbbc'], ['aab_cbbbc_def'], ['aab_cbbbc123'], ['123_aab_cbbbc'], ['aab_cbbbc!'], ['aab_cbbbc '], [''], ['_'], ['a_b_c_d_e'], ['abcdefghijklmnopqrstuvwxyz'], ['a_b']]", "input_output_examples": "[[['aab_cbbbc']], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/17", "requirement": "def square_perimeter(a: int) -> int:\n\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"", "entry_point": "square_perimeter", "canonical_solution": "def square_perimeter(a):\n  return 4*a", "input_output_examples": "[[[10]], [[40]]]", "starter_code": "def square_perimeter(a: int) -> int:", "llm_generated_inputs": "[[10], [0], [1], [-5], [100]]", "clusters": {"cluster_list": [{"programs_str": ["def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a"], "outputs": "[[40], [0], [4], [-20], [400]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[10], [0], [1], [-5], [100]]", "input_output_examples": "[[[10]], [[40]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/18", "requirement": "def remove_dirty_chars(string: str, second_string: str) -> str:\n\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\n\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"", "entry_point": "remove_dirty_chars", "canonical_solution": "def remove_dirty_chars(string, second_string): \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string", "input_output_examples": "[[['probasscurve', 'pros']], [['bacuve']]]", "starter_code": "def remove_dirty_chars(string: str, second_string: str) -> str:", "llm_generated_inputs": "[['probasscurve', 'pros'], ['hello', 'aeiou'], ['abcdef', 'ghijkl'], ['', 'abc'], ['abc', ''], ['', ''], ['aabbcc', 'abc'], ['python', 'nohtyp'], ['12345', '54321'], ['special!@#', '!@']]", "clusters": {"cluster_list": [{"programs_str": ["def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))"], "outputs": "[['bacuve'], ['hll'], ['abcdef'], [''], ['abc'], [''], [''], [''], [''], ['special#']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['probasscurve', 'pros'], ['hello', 'aeiou'], ['abcdef', 'ghijkl'], ['', 'abc'], ['abc', ''], ['', ''], ['aabbcc', 'abc'], ['python', 'nohtyp'], ['12345', '54321'], ['special!@#', '!@']]", "input_output_examples": "[[['probasscurve', 'pros']], [['bacuve']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/19", "requirement": "from typing import List\n\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"", "entry_point": "test_duplicate", "canonical_solution": "def test_duplicate(arraynums):\n    return len(arraynums) != len(set(arraynums))", "input_output_examples": "[[[[1, 2, 3, 4, 5]]], [[False]]]", "starter_code": "from typing import List\ndef test_duplicate(arraynums: List[int]) -> bool:", "llm_generated_inputs": "[[[1, 2, 3, 4, 5]], [[1, 2, 2, 3, 4]], [[]], [[10]], [[1, 1, 1, 1, 1]], [[1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10]], [[100, 200, 300, 400, 500, 100]], [[-1, -2, -3, -4, -5, -1]], [[0, 0, 0, 0]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))"], "outputs": "[[False], [True], [False], [False], [True], [True], [True], [True], [True]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5]], [[1, 2, 2, 3, 4]], [[]], [[10]], [[1, 1, 1, 1, 1]], [[1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10]], [[100, 200, 300, 400, 500, 100]], [[-1, -2, -3, -4, -5, -1]], [[0, 0, 0, 0]]]", "input_output_examples": "[[[[1, 2, 3, 4, 5]]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/20", "requirement": "def is_woodall(num: int) -> bool:\n\"\"\"\nWrite a function to check if the given number is woodall or not.\nassert is_woodall(383) == True\n\"\"\"", "entry_point": "is_woodall", "canonical_solution": "def is_woodall(x): \n\tif not isinstance(x, int):\n\t\treturn False\n\tif x <= 0 or x % 2 == 0:\n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx += 1 \n\ti = 0\n\twhile (x % 2 == 0): \n\t\tx /= 2\n\t\ti += 1\n\t\tif (i == x): \n\t\t\treturn True\n\treturn False", "input_output_examples": "[[[383]], [[True]]]", "starter_code": "def is_woodall(num: int) -> bool:", "llm_generated_inputs": "[[0], [1], [2], [7], [23], [383], [319], [-5], [-1], [1000]]", "clusters": {"cluster_list": [{"programs_str": ["def is_woodall(num: int) -> bool:\n    n = 1\n    while n * (2 ** n - 1) <= num:\n        if n * (2 ** n - 1) == num:\n            return True\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    n = 1\n    while n * (2 ** n - 1) <= num:\n        if n * (2 ** n - 1) == num:\n            return True\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    n = 1\n    while n * (2 ** n - 1) <= num:\n        if n * (2 ** n - 1) == num:\n            return True\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    n = 1\n    while n * (2 ** n - 1) <= num:\n        if n * (2 ** n - 1) == num:\n            return True\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    n = 1\n    while n * (2 ** n - 1) <= num:\n        if n * (2 ** n - 1) == num:\n            return True\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    n = 1\n    while n * (2 ** n - 1) <= num:\n        if n * (2 ** n - 1) == num:\n            return True\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    n = 1\n    while n * (2 ** n - 1) <= num:\n        if n * (2 ** n - 1) == num:\n            return True\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    n = 1\n    while n * (2 ** n - 1) <= num:\n        if n * (2 ** n - 1) == num:\n            return True\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    n = 1\n    while n * (2 ** n - 1) <= num:\n        if n * (2 ** n - 1) == num:\n            return True\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    n = 1\n    while n * (2 ** n - 1) <= num:\n        if n * (2 ** n - 1) == num:\n            return True\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    n = 1\n    while n * (2 ** n - 1) <= num:\n        if n * (2 ** n - 1) == num:\n            return True\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    n = 1\n    while n * (2 ** n - 1) <= num:\n        if n * (2 ** n - 1) == num:\n            return True\n        n += 1\n    return False"], "outputs": "[[False], [True], [False], [False], [False], [False], [False], [False], [False], [False]]", "probability": 0.6, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[383], [False], [True]]]"}, {"programs_str": ["def is_woodall(num: int) -> bool:\n    n = 1\n    while n * 2 ** n - 1 <= num:\n        if n * 2 ** n - 1 == num:\n            return True\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    n = 1\n    while n * 2 ** n - 1 <= num:\n        if n * 2 ** n - 1 == num:\n            return True\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    n = 1\n    while n * 2 ** n - 1 <= num:\n        if n * 2 ** n - 1 == num:\n            return True\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    n = 1\n    while n * 2 ** n - 1 <= num:\n        if n * 2 ** n - 1 == num:\n            return True\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    n = 1\n    while n * 2 ** n - 1 <= num:\n        if n * 2 ** n - 1 == num:\n            return True\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    n = 1\n    while n * 2 ** n - 1 <= num:\n        if n * 2 ** n - 1 == num:\n            return True\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    n = 1\n    while n * 2 ** n - 1 <= num:\n        if n * 2 ** n - 1 == num:\n            return True\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    n = 1\n    while n * 2 ** n - 1 <= num:\n        if n * 2 ** n - 1 == num:\n            return True\n        n += 1\n    return False"], "outputs": "[[False], [True], [False], [True], [True], [True], [False], [False], [False], [False]]", "probability": 0.4, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.9709505944546688, "llm_generated_inputs": "[[0], [1], [2], [7], [23], [383], [319], [-5], [-1], [1000]]", "input_output_examples": "[[[383]], [[True]]]", "weighted_test_consistency": 0.4, "at_least_one_align": true, "ambiguity": 0.7854752972273344}}
{"task_id": "Mbpp/56", "requirement": "def check(n: int) -> bool:\n\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"", "entry_point": "check", "canonical_solution": "def check(n):    \n    return n == 2 * int(str(n)[::-1]) - 1", "input_output_examples": "[[[70]], [[False]]]", "starter_code": "def check(n: int) -> bool:", "llm_generated_inputs": "[[70], [21], [0], [1], [9], [10], [11], [12], [23], [55], [99], [100], [201], [-1], [-21]]", "clusters": {"cluster_list": [{"programs_str": ["def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reverse = int(str(n)[::-1])\n    return n == 2 * reverse - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reverse = int(str(n)[::-1])\n    return n == 2 * reverse - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1"], "outputs": "[[False], [False], [False], [True], [False], [False], [False], [False], [False], [False], [False], [False], [False], ['ValueError'], ['ValueError']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[70], [21], [0], [1], [9], [10], [11], [12], [23], [55], [99], [100], [201], [-1], [-21]]", "input_output_examples": "[[[70]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/57", "requirement": "from typing import List\n\n\ndef find_Max_Num(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"", "entry_point": "find_Max_Num", "canonical_solution": "def find_Max_Num(arr) : \n    arr.sort(reverse = True)\n    return int(\"\".join(map(str,arr)))", "input_output_examples": "[[[[1, 2, 3]]], [[321]]]", "starter_code": "from typing import List\ndef find_Max_Num(arr: List[int]) -> int:", "llm_generated_inputs": "[[[1, 2, 3]], [[3, 2, 1]], [[0, 0, 0]], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]], [[1]], [[5, 5, 5, 5]], [[9, 9, 8, 8, 7, 7, 6, 6]], [[10, 20, 30]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    num = int(''.join(map(str, arr)))\n    return num", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    num_str = ''.join(map(str, arr))\n    return int(num_str)", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num"], "outputs": "[[321], [321], [0], [9876543210], [1], [5555], [99887766], [302010]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[3, 2, 1]], [[3, 2, 1]], [[0, 0, 0]], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]], [[1]], [[5, 5, 5, 5]], [[9, 9, 8, 8, 7, 7, 6, 6]], [[30, 20, 10]]]", "input_output_examples": "[[[[3, 2, 1]]], [[321]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/58", "requirement": "def opposite_Signs(x: int, y: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"", "entry_point": "opposite_Signs", "canonical_solution": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0)", "input_output_examples": "[[[1, -2]], [[True]]]", "starter_code": "def opposite_Signs(x: int, y: int) -> bool:", "llm_generated_inputs": "[[1, -2], [-5, 10], [0, 5], [0, -3], [7, 3], [-8, -4], [100, -100], [-256, 256], [-1, 1]]", "clusters": {"cluster_list": [{"programs_str": ["def opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) & 2147483648 != 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) & 2147483648 != 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) & 2147483648 != 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) & 2147483648 != 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) & 2147483648 != 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) & 2147483648 != 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) & 2147483648 != 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) & 2147483648 != 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) & 2147483648 != 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) & 2147483648 != 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) & 2147483648 != 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) & 2147483648 != 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) & 2147483648 != 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) & 2147483648 != 0"], "outputs": "[[True], [True], [False], [True], [False], [False], [True], [True], [True]]", "probability": 0.7, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) & amp\n    2147483648 != 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) & amp\n    2147483648 != 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) & amp\n    2147483648 != 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) & amp\n    2147483648 != 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) & amp\n    2147483648 != 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) & amp\n    2147483648 != 0"], "outputs": "[['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError']]", "probability": 0.3, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[1, -2], ['NameError'], [True]]]"}], "entropy": 0.8812908992306927, "llm_generated_inputs": "[[1, -2], [-5, 10], [0, 5], [0, -3], [7, 3], [-8, -4], [100, -100], [-256, 256], [-1, 1]]", "input_output_examples": "[[[1, -2]], [[True]]]", "weighted_test_consistency": 0.7, "at_least_one_align": true, "ambiguity": 0.5906454496153464}}
{"task_id": "Mbpp/59", "requirement": "def is_octagonal(n: int) -> int:\n\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"", "entry_point": "is_octagonal", "canonical_solution": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n", "input_output_examples": "[[[5]], [[65]]]", "starter_code": "def is_octagonal(n: int) -> int:", "llm_generated_inputs": "[[1], [2], [3], [4], [5], [10], [0], [-1], [100]]", "clusters": {"cluster_list": [{"programs_str": ["def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)"], "outputs": "[[1], [8], [21], [40], [65], [280], [0], [5], [29800]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [3], [4], [5], [10], [0], [-1], [100]]", "input_output_examples": "[[[5]], [[65]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/61", "requirement": "def count_Substrings(s: str) -> int:\n\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"", "entry_point": "count_Substrings", "canonical_solution": "from collections import defaultdict\ndef count_Substrings(s):\n    n, count, sum = len(s), 0, 0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - i - 1]\n        mp[sum - i - 1] += 1\n    return count", "input_output_examples": "[[['112112']], [[6]]]", "starter_code": "def count_Substrings(s: str) -> int:", "llm_generated_inputs": "[['112112'], ['000'], ['12345'], ['111'], ['987654321'], [''], ['1'], ['12'], ['11']]", "clusters": {"cluster_list": [{"programs_str": ["def count_Substrings(s: str) -> int:\n    from collections import defaultdict\n    count = 0\n    balance = 0\n    seen = defaultdict(int)\n    seen[0] = 1\n    for char in s:\n        balance += int(char) - 1\n        count += seen[balance]\n        seen[balance] += 1\n    return count", "def count_Substrings(s: str) -> int:\n    from collections import defaultdict\n    count = 0\n    prefix_sum = 0\n    diff_count = defaultdict(int)\n    diff_count[0] = 1\n    for i in range(len(s)):\n        prefix_sum += int(s[i])\n        diff = prefix_sum - (i + 1)\n        count += diff_count[diff]\n        diff_count[diff] += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        sum_digits = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            if sum_digits == j - i + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        sum_digits = 0\n        length = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            length += 1\n            if sum_digits == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    from collections import defaultdict\n    count = 0\n    balance = 0\n    prefix_count = defaultdict(int)\n    prefix_count[0] = 1\n    for i in range(len(s)):\n        balance += int(s[i]) - 1\n        if balance in prefix_count:\n            count += prefix_count[balance]\n        prefix_count[balance] += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        sum_digits = 0\n        length = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            length += 1\n            if sum_digits == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    from collections import defaultdict\n    count = 0\n    balance = 0\n    seen = defaultdict(int)\n    seen[0] = 1\n    for char in s:\n        balance += int(char) - 1\n        count += seen[balance]\n        seen[balance] += 1\n    return count", "def count_Substrings(s: str) -> int:\n    from collections import defaultdict\n    count = 0\n    balance = 0\n    prefix_count = defaultdict(int)\n    prefix_count[0] = 1\n    for char in s:\n        balance += int(char) - 1\n        count += prefix_count[balance]\n        prefix_count[balance] += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        sum_digits = 0\n        length = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            length += 1\n            if sum_digits == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        sum_digits = 0\n        length = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            length += 1\n            if sum_digits == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        sum_digits = 0\n        length = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            length += 1\n            if sum_digits == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        sum_digits = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            if sum_digits == j - i + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        sum_digits = 0\n        length = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            length += 1\n            if sum_digits == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    from collections import defaultdict\n    count = 0\n    balance = 0\n    prefix_count = defaultdict(int)\n    prefix_count[0] = 1\n    for i in range(len(s)):\n        balance += int(s[i]) - 1\n        count += prefix_count[balance]\n        prefix_count[balance] += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        sum_digits = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            if sum_digits == j - i + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        sum_digits = 0\n        length = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            length += 1\n            if sum_digits == length:\n                count += 1\n    return count"], "outputs": "[[6], [0], [1], [6], [1], [0], [1], [1], [3]]", "probability": 0.8, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def count_Substrings(s: str) -> int:\n    from collections import defaultdict\n    count = 0\n    prefix_sum = 0\n    occurrences = defaultdict(int)\n    occurrences[0] = 1\n    for i, char in enumerate(s):\n        prefix_sum += int(char) - (i + 1)\n        count += occurrences[prefix_sum]\n        occurrences[prefix_sum] += 1\n    return count", "def count_Substrings(s: str) -> int:\n    from collections import defaultdict\n    count = 0\n    prefix_sum = 0\n    occurrences = defaultdict(int)\n    occurrences[0] = 1\n    for i, char in enumerate(s):\n        prefix_sum += int(char) - (i + 1)\n        count += occurrences[prefix_sum]\n        occurrences[prefix_sum] += 1\n    return count", "def count_Substrings(s: str) -> int:\n    from collections import defaultdict\n    count = 0\n    diff_count = defaultdict(int)\n    diff_count[0] = 1\n    current_sum = 0\n    for i in range(len(s)):\n        current_sum += int(s[i]) - (i + 1)\n        count += diff_count[current_sum]\n        diff_count[current_sum] += 1\n    return count", "def count_Substrings(s: str) -> int:\n    from collections import defaultdict\n    count = 0\n    prefix_sum = 0\n    occurrences = defaultdict(int)\n    occurrences[0] = 1\n    for i in range(len(s)):\n        prefix_sum += int(s[i]) - (i + 1)\n        count += occurrences[prefix_sum]\n        occurrences[prefix_sum] += 1\n    return count"], "outputs": "[[1], [0], [15], [1], [5], [0], [1], [3], [1]]", "probability": 0.2, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['112112'], [1], [6]]]"}], "entropy": 0.7219280948873623, "llm_generated_inputs": "[['112112'], ['000'], ['12345'], ['111'], ['987654321'], [''], ['1'], ['12'], ['11']]", "input_output_examples": "[[['112112']], [[6]]]", "weighted_test_consistency": 0.8, "at_least_one_align": true, "ambiguity": 0.46096404744368114}}
{"task_id": "Mbpp/62", "requirement": "from typing import List\n\n\ndef smallest_num(xs: List[int]) -> int:\n\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"", "entry_point": "smallest_num", "canonical_solution": "def smallest_num(xs):\n  assert len(xs) > 0, \"invalid inputs\"\n  return min(xs)", "input_output_examples": "[[[[10, 20, 1, 45, 99]]], [[1]]]", "starter_code": "from typing import List\ndef smallest_num(xs: List[int]) -> int:", "llm_generated_inputs": "[[[10, 20, 1, 45, 99]], [[3, 1, 4, 1, 5, 9]], [[0, -1, -2, -3, -4]], [[100]], [[]], [[7, 7, 7, 7]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)"], "outputs": "[[1], [1], [-4], [100], ['ValueError'], [7]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[10, 20, 1, 45, 99]], [[3, 1, 4, 1, 5, 9]], [[0, -1, -2, -3, -4]], [[100]], [[]], [[7, 7, 7, 7]]]", "input_output_examples": "[[[[10, 20, 1, 45, 99]]], [[1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/63", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"", "entry_point": "max_difference", "canonical_solution": "def max_difference(test_list):\n  return max(abs(a - b) for a, b in test_list)", "input_output_examples": "[[[[(3, 5), (1, 7), (10, 3), (1, 2)]]], [[7]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:", "llm_generated_inputs": "[[[(3, 5), (1, 7), (10, 3), (1, 2)]], [[(10, 2), (5, 5), (8, 3)]], [[(1, 1), (2, 2), (3, 3)]], [[(-1, -5), (-3, -2), (-4, -8)]], [[(100, 50), (200, 150), (300, 250)]], [[(0, 0)]], [[]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))"], "outputs": "[[7], [8], [0], [4], [50], [0], ['ValueError']]", "probability": 0.8, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))", "def max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))", "def max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))", "def max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))"], "outputs": "[['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError']]", "probability": 0.2, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[[(3, 5), (1, 7), (10, 3), (1, 2)]], ['NameError'], [7]]]"}], "entropy": 0.7219280948873623, "llm_generated_inputs": "[[[(3, 5), (1, 7), (10, 3), (1, 2)]], [[(10, 2), (5, 5), (8, 3)]], [[(1, 1), (2, 2), (3, 3)]], [[(-1, -5), (-3, -2), (-4, -8)]], [[(100, 50), (200, 150), (300, 250)]], [[(0, 0)]], [[]]]", "input_output_examples": "[[[[(3, 5), (1, 7), (10, 3), (1, 2)]]], [[7]]]", "weighted_test_consistency": 0.8, "at_least_one_align": true, "ambiguity": 0.46096404744368114}}
{"task_id": "Mbpp/64", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"", "entry_point": "subject_marks", "canonical_solution": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks", "input_output_examples": "[[[[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]]], [[[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:", "llm_generated_inputs": "[[[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]], [[('History', 75), ('Geography', 75), ('Physics', 85)]], [[('Chemistry', 100)]], [[]], [[('Biology', 60), ('Art', 50), ('Music', 40), ('Physical Education', 30)]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List\nfrom typing import Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List\nfrom typing import Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List\nfrom typing import Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List\nfrom typing import Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List\nfrom typing import Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List\nfrom typing import Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List\nfrom typing import Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List\nfrom typing import Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List\nfrom typing import Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List\nfrom typing import Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List\nfrom typing import Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List\nfrom typing import Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List\nfrom typing import Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List\nfrom typing import Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List\nfrom typing import Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List\nfrom typing import Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List\nfrom typing import Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])"], "outputs": "[[[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]], [[('History', 75), ('Geography', 75), ('Physics', 85)]], [[('Chemistry', 100)]], [[]], [[('Physical Education', 30), ('Music', 40), ('Art', 50), ('Biology', 60)]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]], [[('History', 75), ('Geography', 75), ('Physics', 85)]], [[('Chemistry', 100)]], [[]], [[('Biology', 60), ('Art', 50), ('Music', 40), ('Physical Education', 30)]]]", "input_output_examples": "[[[[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]]], [[[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/65", "requirement": "from typing import List\nfrom typing import Union\n\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"", "entry_point": "recursive_list_sum", "canonical_solution": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total", "input_output_examples": "[[[[1, 2, [3, 4], [5, 6]]]], [[21]]]", "starter_code": "from typing import List\nfrom typing import Union\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:", "llm_generated_inputs": "[[[1, 2, [3, 4], [5, 6]]], [[1, [2, [3, [4, [5]]]]]], [[]], [[1, 2, 3, 4, 5]], [[[[1]], 2, [3, [4, 5]]]], [[0, [0, [0, [0]]]]], [[[-1, -2, [-3, -4], [-5, -6]]]]]", "clusters": {"cluster_list": [{"programs_str": ["def recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "def recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "def recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "def recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "def recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "def recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "def recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "def recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "def recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"], "outputs": "[['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError']]", "probability": 0.45, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 2, [3, 4], [5, 6]]], ['NameError'], [21]]]"}, {"programs_str": ["from typing import List\nfrom typing import Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List\nfrom typing import Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List\nfrom typing import Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List\nfrom typing import Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List\nfrom typing import Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List\nfrom typing import Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List\nfrom typing import Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List\nfrom typing import Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List\nfrom typing import Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List\nfrom typing import Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List\nfrom typing import Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"], "outputs": "[[21], [15], [0], [15], [15], [0], [-21]]", "probability": 0.55, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.9927744539878083, "llm_generated_inputs": "[[[1, 2, [3, 4], [5, 6]]], [[1, [2, [3, [4, [5]]]]]], [[]], [[1, 2, 3, 4, 5]], [[[[1]], 2, [3, [4, 5]]]], [[0, [0, [0, [0]]]]], [[[-1, -2, [-3, -4], [-5, -6]]]]]", "input_output_examples": "[[[[1, 2, [3, 4], [5, 6]]]], [[21]]]", "weighted_test_consistency": 0.55, "at_least_one_align": true, "ambiguity": 0.7213872269939041}}
{"task_id": "Mbpp/66", "requirement": "from typing import List\n\n\ndef pos_count(l: List[int]) -> int:\n\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"", "entry_point": "pos_count", "canonical_solution": "def pos_count(l):\n  return len([x for x in l if x > 0])", "input_output_examples": "[[[[1, -2, 3, -4]]], [[2]]]", "starter_code": "from typing import List\ndef pos_count(l: List[int]) -> int:", "llm_generated_inputs": "[[[1, -2, 3, -4]], [[0, 0, 0, 0]], [[1, 2, 3, 4]], [[-1, -2, -3, -4]], [[]], [[1]], [[-1]], [[0]], [[1, -1, 0]], [[100, 200, 300]], [[-100, -200, -300]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for num in l if num > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for num in l if num > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for num in l if num > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for num in l if num > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for num in l if num > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for num in l if num > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for num in l if num > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for num in l if num > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for num in l if num > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for num in l if num > 0))"], "outputs": "[[2], [0], [4], [0], [0], [1], [0], [0], [1], [3], [0]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, -2, 3, -4]], [[0, 0, 0, 0]], [[1, 2, 3, 4]], [[-1, -2, -3, -4]], [[]], [[1]], [[-1]], [[0]], [[1, -1, 0]], [[100, 200, 300]], [[-100, -200, -300]]]", "input_output_examples": "[[[[1, -2, 3, -4]]], [[2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/67", "requirement": "def bell_number(n: int) -> int:\n\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"", "entry_point": "bell_number", "canonical_solution": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0]", "input_output_examples": "[[[2]], [[2]]]", "starter_code": "def bell_number(n: int) -> int:", "llm_generated_inputs": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]", "clusters": {"cluster_list": [{"programs_str": ["def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]"], "outputs": "[[1], [1], [2], [5], [15], [52], [203], [877], [4140], [21147], [115975]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]", "input_output_examples": "[[[2]], [[2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/68", "requirement": "from typing import List\n\n\ndef is_Monotonic(arr: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"", "entry_point": "is_Monotonic", "canonical_solution": "def is_Monotonic(A): \n    return all(a <= b for a, b in zip(A, A[1:])) or all(a >= b for a, b in zip(A, A[1:]))", "input_output_examples": "[[[[6, 5, 4, 4]]], [[True]]]", "starter_code": "from typing import List\ndef is_Monotonic(arr: List[int]) -> bool:", "llm_generated_inputs": "[[[6, 5, 4, 4]], [[1, 2, 2, 3]], [[1, 3, 2]], [[1, 2, 4, 5]], [[1, 1, 1]], [[5, 5, 5, 5]], [[10]], [[]], [[7, 7, 7, 8, 9, 10]], [[10, 9, 8, 8, 7, 6]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if len(arr) <= 1:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if len(arr) <= 1:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing"], "outputs": "[[True], [True], [False], [True], [True], [True], [True], [True], [True], [True]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[6, 5, 4, 4]], [[1, 2, 2, 3]], [[1, 3, 2]], [[1, 2, 4, 5]], [[1, 1, 1]], [[5, 5, 5, 5]], [[10]], [[]], [[7, 7, 7, 8, 9, 10]], [[10, 9, 8, 8, 7, 6]]]", "input_output_examples": "[[[[6, 5, 4, 4]]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/69", "requirement": "from typing import List\n\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"", "entry_point": "is_sublist", "canonical_solution": "def is_sublist(l, s):\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))", "input_output_examples": "[[[[2, 4, 3, 5, 7], [3, 7]]], [[False]]]", "starter_code": "from typing import List\ndef is_sublist(l: List[int], s: List[int]) -> bool:", "llm_generated_inputs": "[[[2, 4, 3, 5, 7], [3, 7]], [[1, 2, 3, 4, 5], [2, 3]], [[1, 2, 3, 4, 5], [5]], [[1, 2, 3, 4, 5], [1]], [[1, 2, 3, 4, 5], []], [[1, 2, 3, 4, 5], [6]], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5], [2, 4, 5]], [[1, 2, 2, 3, 4], [2, 2]], [[1, 2, 3, 4, 5], [5, 4]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False"], "outputs": "[[False], [True], [True], [True], [True], [False], [True], [False], [True], [False]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[2, 4, 3, 5, 7], [3, 7]], [[1, 2, 3, 4, 5], [2, 3]], [[1, 2, 3, 4, 5], [5]], [[1, 2, 3, 4, 5], [1]], [[1, 2, 3, 4, 5], []], [[1, 2, 3, 4, 5], [6]], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5], [2, 4, 5]], [[1, 2, 2, 3, 4], [2, 2]], [[1, 2, 3, 4, 5], [5, 4]]]", "input_output_examples": "[[[[2, 4, 3, 5, 7], [3, 7]]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/70", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef get_equal(Input: List[Tuple]) -> bool:\n\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"", "entry_point": "get_equal", "canonical_solution": "def get_equal(Input):\n  return len(set(len(item) for item in Input)) == 1", "input_output_examples": "[[[[(11, 22, 33), (44, 55, 66)]]], [[True]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef get_equal(Input: List[Tuple]) -> bool:", "llm_generated_inputs": "[[[(11, 22, 33), (44, 55, 66)]], [[(1, 2), (3, 4, 5)]], [[(1,), (2,), (3,)]], [[]], [[(1, 2, 3), (4, 5, 6), (7, 8, 9)]], [[(1, 2, 3), (4, 5), (6, 7, 8, 9)]], [[(1, 2, 3), (1, 2, 3), (1, 2, 3)]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    return all((len(t) == first_length for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    for t in Input:\n        if len(t) != first_length:\n            return False\n    return True", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    for item in Input:\n        if len(item) != first_length:\n            return False\n    return True", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    for t in Input:\n        if len(t) != first_length:\n            return False\n    return True", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    return all((len(t) == first_length for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    return all((len(t) == first_length for t in Input))"], "outputs": "[[True], [False], [True], [True], [True], [False], [True]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[(11, 22, 33), (44, 55, 66)]], [[(1, 2), (3, 4, 5)]], [[(1,), (2,), (3,)]], [[]], [[(1, 2, 3), (4, 5, 6), (7, 8, 9)]], [[(1, 2, 3), (4, 5), (6, 7, 8, 9)]], [[(1, 2, 3), (1, 2, 3), (1, 2, 3)]]]", "input_output_examples": "[[[[(11, 22, 33), (44, 55, 66)]]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/71", "requirement": "from typing import List\n\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"", "entry_point": "comb_sort", "canonical_solution": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums", "input_output_examples": "[[[[5, 15, 37, 25, 79]]], [[[5, 15, 25, 37, 79]]]]", "starter_code": "from typing import List\ndef comb_sort(nums: List[int]) -> List[int]:", "llm_generated_inputs": "[[[5, 15, 37, 25, 79]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[5]], [[]], [[3, 3, 3, 3, 3]], [[100, -100, 50, -50, 0]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n            i += 1\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n            i += 1\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n            i += 1\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n            i += 1\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_next_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(1, gap)\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n            i += 1\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums"], "outputs": "[[[5, 15, 25, 37, 79]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[5]], [[]], [[3, 3, 3, 3, 3]], [[-100, -50, 0, 50, 100]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[5, 15, 25, 37, 79]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[5]], [[]], [[3, 3, 3, 3, 3]], [[-100, -50, 0, 50, 100]]]", "input_output_examples": "[[[[5, 15, 25, 37, 79]]], [[[5, 15, 25, 37, 79]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/72", "requirement": "def dif_Square(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"", "entry_point": "dif_Square", "canonical_solution": "def dif_Square(n): \n    # see https://www.quora.com/Which-numbers-can-be-expressed-as-the-difference-of-two-squares\n    return n % 4 != 2", "input_output_examples": "[[[5]], [[True]]]", "starter_code": "def dif_Square(n: int) -> bool:", "llm_generated_inputs": "[[5], [3], [0], [1], [2], [4], [9], [15], [16], [-1], [-5]]", "clusters": {"cluster_list": [{"programs_str": ["def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0"], "outputs": "[[True], [True], [True], [True], [False], [True], [True], [True], [True], [True], [True]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[5], [3], [0], [1], [2], [4], [9], [15], [16], [-1], [-5]]", "input_output_examples": "[[[5]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/74", "requirement": "from typing import List\n\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"", "entry_point": "is_samepatterns", "canonical_solution": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    pattern_color_dict = {pattern: set() for pattern in patterns}\n    for color, pattern in zip(colors, patterns):\n        pattern_color_dict[pattern].add(color)\n    return all(len(pattern_color_dict[pattern]) == 1 for pattern in patterns)", "input_output_examples": "[[[['red', 'green', 'green'], ['a', 'b', 'b']]], [[True]]]", "starter_code": "from typing import List\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:", "llm_generated_inputs": "[[['red', 'green', 'green'], ['a', 'b', 'b']], [['red', 'green', 'blue'], ['a', 'b', 'c']], [['red', 'red', 'red'], ['a', 'a', 'a']], [['red', 'green'], ['a', 'b']], [[], []], [['red'], ['a']], [['red', 'green', 'green'], ['a', 'b', 'c']], [['red', 'green', 'blue', 'blue'], ['a', 'b', 'c', 'c']], [['red', 'green', 'blue'], ['a', 'a', 'a']]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True"], "outputs": "[[True], [True], [True], [True], [True], [True], [False], [True], [False]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['red', 'green', 'green'], ['a', 'b', 'b']], [['red', 'green', 'blue'], ['a', 'b', 'c']], [['red', 'red', 'red'], ['a', 'a', 'a']], [['red', 'green'], ['a', 'b']], [[], []], [['red'], ['a']], [['red', 'green', 'green'], ['a', 'b', 'c']], [['red', 'green', 'blue', 'blue'], ['a', 'b', 'c', 'c']], [['red', 'green', 'blue'], ['a', 'a', 'a']]]", "input_output_examples": "[[[['red', 'green', 'green'], ['a', 'b', 'b']]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/75", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"", "entry_point": "find_tuples", "canonical_solution": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res", "input_output_examples": "[[[[(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6]], [[[(6, 24, 12)]]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:", "llm_generated_inputs": "[[[(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6], [[(3, 9, 15), (10, 20, 30), (14, 28, 42)], 3], [[(5, 10, 15), (20, 25, 30), (35, 40, 45)], 5], [[(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1], [[(8, 16, 24), (10, 20, 30), (12, 24, 36)], 4], [[(2, 4, 6), (3, 6, 9), (5, 10, 15)], 2], [[], 5], [[(0, 0, 0), (0, 1, 2), (3, 0, 6)], 0], [[(10, 20, 30), (15, 25, 35), (20, 40, 60)], 10], [[(11, 22, 33), (22, 44, 66), (33, 66, 99)], 11]]", "clusters": {"cluster_list": [{"programs_str": ["def find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [sub for sub in test_list if all((ele % K == 0 for ele in sub))]", "def find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [sub for sub in test_list if all((ele % K == 0 for ele in sub))]", "def find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [sub for sub in test_list if all((ele % K == 0 for ele in sub))]", "def find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [sub for sub in test_list if all((ele % K == 0 for ele in sub))]", "def find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [sub for sub in test_list if all((ele % K == 0 for ele in sub))]"], "outputs": "[['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError']]", "probability": 0.25, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[[(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6], ['NameError'], [[(6, 24, 12)]]]]"}, {"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [sub for sub in test_list if all((ele % K == 0 for ele in sub))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [sub for sub in test_list if all((ele % K == 0 for ele in sub))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [sub for sub in test_list if all((ele % K == 0 for ele in sub))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [sub for sub in test_list if all((ele % K == 0 for ele in sub))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [sub for sub in test_list if all((ele % K == 0 for ele in sub))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [sub for sub in test_list if all((ele % K == 0 for ele in sub))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [sub for sub in test_list if all((ele % K == 0 for ele in sub))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [sub for sub in test_list if all((ele % K == 0 for ele in sub))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [sub for sub in test_list if all((ele % K == 0 for ele in sub))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [sub for sub in test_list if all((ele % K == 0 for ele in sub))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [sub for sub in test_list if all((ele % K == 0 for ele in sub))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [sub for sub in test_list if all((ele % K == 0 for ele in sub))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [sub for sub in test_list if all((ele % K == 0 for ele in sub))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [sub for sub in test_list if all((ele % K == 0 for ele in sub))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [sub for sub in test_list if all((ele % K == 0 for ele in sub))]"], "outputs": "[[[(6, 24, 12)]], [[(3, 9, 15)]], [[(5, 10, 15), (20, 25, 30), (35, 40, 45)]], [[(1, 2, 3), (4, 5, 6), (7, 8, 9)]], [[(8, 16, 24), (12, 24, 36)]], [[(2, 4, 6)]], [[]], ['ZeroDivisionError'], [[(10, 20, 30), (20, 40, 60)]], [[(11, 22, 33), (22, 44, 66), (33, 66, 99)]]]", "probability": 0.75, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8112781244591328, "llm_generated_inputs": "[[[(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6], [[(3, 9, 15), (10, 20, 30), (14, 28, 42)], 3], [[(5, 10, 15), (20, 25, 30), (35, 40, 45)], 5], [[(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1], [[(8, 16, 24), (10, 20, 30), (12, 24, 36)], 4], [[(2, 4, 6), (3, 6, 9), (5, 10, 15)], 2], [[], 5], [[(0, 0, 0), (0, 1, 2), (3, 0, 6)], 0], [[(10, 20, 30), (15, 25, 35), (20, 40, 60)], 10], [[(11, 22, 33), (22, 44, 66), (33, 66, 99)], 11]]", "input_output_examples": "[[[[(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6]], [[[(6, 24, 12)]]]]", "weighted_test_consistency": 0.75, "at_least_one_align": true, "ambiguity": 0.5306390622295665}}
{"task_id": "Mbpp/77", "requirement": "def is_Diff(n: int) -> bool:\n\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"", "entry_point": "is_Diff", "canonical_solution": "def is_Diff(n): \n    return n % 11 == 0", "input_output_examples": "[[[12345]], [[False]]]", "starter_code": "def is_Diff(n: int) -> bool:", "llm_generated_inputs": "[[12345], [0], [11], [-11], [22], [-22], [1001], [-1001], [121], [-121], [9], [-9], [123456789], [-123456789]]", "clusters": {"cluster_list": [{"programs_str": ["def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0"], "outputs": "[[False], [True], [True], [True], [True], [True], [True], [True], [True], [True], [False], [False], [False], [False]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[12345], [0], [11], [-11], [22], [-22], [1001], [-1001], [121], [-121], [9], [-9], [123456789], [-123456789]]", "input_output_examples": "[[[12345]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/79", "requirement": "def word_len(s: str) -> bool:\n\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"", "entry_point": "word_len", "canonical_solution": "def word_len(s): \n    return len(s) % 2 == 1", "input_output_examples": "[[['Hadoop']], [[False]]]", "starter_code": "def word_len(s: str) -> bool:", "llm_generated_inputs": "[['Hadoop'], ['Python'], ['Java'], ['R'], [''], ['a'], ['OpenAI'], ['ChatGPT']]", "clusters": {"cluster_list": [{"programs_str": ["def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0"], "outputs": "[[False], [False], [False], [True], [False], [True], [False], [True]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Hadoop'], ['Python'], ['Java'], ['R'], [''], ['a'], ['OpenAI'], ['ChatGPT']]", "input_output_examples": "[[['Hadoop']], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/80", "requirement": "def tetrahedral_number(n: int) -> float:\n\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"", "entry_point": "tetrahedral_number", "canonical_solution": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6", "input_output_examples": "[[[5]], [[35]]]", "starter_code": "def tetrahedral_number(n: int) -> float:", "llm_generated_inputs": "[[1], [2], [3], [4], [5], [10], [0], [-1], [-5]]", "clusters": {"cluster_list": [{"programs_str": ["def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6"], "outputs": "[[1.0], [4.0], [10.0], [20.0], [35.0], [220.0], [0.0], [0.0], [-10.0]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [3], [4], [5], [10], [0], [-1], [-5]]", "input_output_examples": "[[[5]], [[35]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/82", "requirement": "def volume_sphere(r: float) -> float:\n\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"", "entry_point": "volume_sphere", "canonical_solution": "import math\ndef volume_sphere(r):\n  return (4./3.) * math.pi * (r**3)", "input_output_examples": "[[[10]], [[4188.790204786391]]]", "starter_code": "def volume_sphere(r: float) -> float:", "llm_generated_inputs": "[[10], [0], [1], [1.5], [2.3], [-1], [-5.5], [100]]", "clusters": {"cluster_list": [{"programs_str": ["import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3"], "outputs": "[[4188.790204786391], [0.0], [4.1887902047863905], [14.137166941154067], [50.965010421636], [-4.1887902047863905], [-696.9099703213358], [4188790.2047863905]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[10], [0], [1], [1.5], [2.3], [-1], [-5.5], [100]]", "input_output_examples": "[[[10]], [[4188.790204786391]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/84", "requirement": "def sequence(n: int) -> int:\n\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"", "entry_point": "sequence", "canonical_solution": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\tseq = [0] * (n + 1)\n\tseq[1] = seq[2] = 1\n\tfor i in range(3, n + 1):\n\t\tseq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n\treturn seq[n]", "input_output_examples": "[[[10]], [[6]]]", "starter_code": "def sequence(n: int) -> int:", "llm_generated_inputs": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [0], [-1], [-5]]", "clusters": {"cluster_list": [{"programs_str": ["def sequence(n: int) -> int:\n    if n == 1:\n        return 1\n    p = [0] * (n + 1)\n    p[1], p[2] = (1, 1)\n    for i in range(3, n + 1):\n        p[i] = p[p[i - 1]] + p[i - p[i - 1]]\n    return p[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n == 1:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1], dp[2] = (1, 1)\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1], dp[2] = (1, 1)\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]", "def sequence(n: int) -> int:\n    if n == 1:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1], dp[2] = (1, 1)\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]", "def sequence(n: int) -> int:\n    if n == 1:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1], dp[2] = (1, 1)\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]", "def sequence(n: int) -> int:\n    if n == 1:\n        return 1\n    p = [0] * (n + 1)\n    p[1], p[2] = (1, 1)\n    for i in range(3, n + 1):\n        p[i] = p[p[i - 1]] + p[i - p[i - 1]]\n    return p[n]", "def sequence(n: int) -> int:\n    if n == 1:\n        return 1\n    sequence_values = [0] * (n + 1)\n    sequence_values[1], sequence_values[2] = (1, 1)\n    for i in range(3, n + 1):\n        sequence_values[i] = sequence_values[sequence_values[i - 1]] + sequence_values[i - sequence_values[i - 1]]\n    return sequence_values[n]", "def sequence(n: int) -> int:\n    if n == 1:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1], dp[2] = (1, 1)\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]", "def sequence(n: int) -> int:\n    if n == 1:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1], dp[2] = (1, 1)\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]", "def sequence(n: int) -> int:\n    if n == 1:\n        return 1\n    p = [0] * (n + 1)\n    p[1], p[2] = (1, 1)\n    for i in range(3, n + 1):\n        p[i] = p[p[i - 1]] + p[i - p[i - 1]]\n    return p[n]", "def sequence(n: int) -> int:\n    if n == 1:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1], dp[2] = (1, 1)\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1], dp[2] = (1, 1)\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1], dp[2] = (1, 1)\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1], dp[2] = (1, 1)\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]", "def sequence(n: int) -> int:\n    if n == 1:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1], dp[2] = (1, 1)\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]", "def sequence(n: int) -> int:\n    if n == 1:\n        return 1\n    p = [0] * (n + 1)\n    p[1], p[2] = (1, 1)\n    for i in range(3, n + 1):\n        p[i] = p[p[i - 1]] + p[i - p[i - 1]]\n    return p[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1], dp[2] = (1, 1)\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]", "def sequence(n: int) -> int:\n    if n == 1:\n        return 1\n    sequence_values = [0] * (n + 1)\n    sequence_values[1], sequence_values[2] = (1, 1)\n    for i in range(3, n + 1):\n        sequence_values[i] = sequence_values[sequence_values[i - 1]] + sequence_values[i - sequence_values[i - 1]]\n    return sequence_values[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1], dp[2] = (1, 1)\n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]\n    return dp[n]"], "outputs": "[[1], [1], [2], [2], [3], [4], [4], [4], [5], [6], [7], [7], [8], [8], [8], ['IndexError'], ['IndexError'], ['IndexError']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [0], [-1], [-5]]", "input_output_examples": "[[[10]], [[6]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/85", "requirement": "def surfacearea_sphere(r: float) -> float:\n\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"", "entry_point": "surfacearea_sphere", "canonical_solution": "import math\ndef surfacearea_sphere(r):\n  return 4 * math.pi * (r**2)", "input_output_examples": "[[[10]], [[1256.6370614359173]]]", "starter_code": "def surfacearea_sphere(r: float) -> float:", "llm_generated_inputs": "[[10], [0], [1], [1.5], [100], [-1], [-10.5], [0.001], [1000000]]", "clusters": {"cluster_list": [{"programs_str": ["import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2"], "outputs": "[[1256.6370614359173], [0.0], [12.566370614359172], [28.274333882308138], [125663.70614359173], [12.566370614359172], [1385.4423602330987], [1.2566370614359172e-05], [12566370614359.172]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[10], [0], [1], [1.5], [100], [-1], [-10.5], [0.001], [1000000]]", "input_output_examples": "[[[10]], [[1256.6370614359173]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/86", "requirement": "def centered_hexagonal_number(n: int) -> int:\n\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"", "entry_point": "centered_hexagonal_number", "canonical_solution": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1", "input_output_examples": "[[[10]], [[271]]]", "starter_code": "def centered_hexagonal_number(n: int) -> int:", "llm_generated_inputs": "[[1], [2], [3], [4], [5], [10], [0], [-1], [100]]", "clusters": {"cluster_list": [{"programs_str": ["def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1"], "outputs": "[[1], [7], [19], [37], [61], [271], [1], [7], [29701]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [3], [4], [5], [10], [0], [-1], [100]]", "input_output_examples": "[[[10]], [[271]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/87", "requirement": "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"", "entry_point": "merge_dictionaries_three", "canonical_solution": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict", "input_output_examples": "[[[{'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'}]], [[{'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}]]]", "starter_code": "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:", "llm_generated_inputs": "[[{'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'}], [{}, {}, {}], [{'key1': 'value1'}, {'key2': 'value2'}, {'key3': 'value3'}], [{'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'c': 5, 'd': 6}], [{'x': 'one'}, {}, {'x': 'two'}], [{'same': 'value'}, {'same': 'value'}, {'same': 'value'}]]", "clusters": {"cluster_list": [{"programs_str": ["def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"], "outputs": "[[{'R': 'Red', 'B': 'Black', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}], [{}], [{'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}], [{'a': 1, 'b': 3, 'c': 5, 'd': 6}], [{'x': 'two'}], [{'same': 'value'}]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[{'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'}], [{}, {}, {}], [{'key1': 'value1'}, {'key2': 'value2'}, {'key3': 'value3'}], [{'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'c': 5, 'd': 6}], [{'x': 'one'}, {}, {'x': 'two'}], [{'same': 'value'}, {'same': 'value'}, {'same': 'value'}]]", "input_output_examples": "[[[{'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'}]], [[{'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/88", "requirement": "from typing import List\nfrom typing import Dict\n\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"", "entry_point": "freq_count", "canonical_solution": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count", "input_output_examples": "[[[[10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]]], [[{10: 4, 20: 4, 40: 2, 50: 2, 30: 1}]]]", "starter_code": "from typing import List\nfrom typing import Dict\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:", "llm_generated_inputs": "[[[10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]], [[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]], [['a', 'b', 'c', 'a', 'b', 'a']], [[]], [[1]], [[None, None, 1, 1, 'a', 'a']], [[True, False, True, True]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"], "outputs": "[[{10: 4, 20: 4, 40: 2, 50: 2, 30: 1}], [{1: 1, 2: 2, 3: 3, 4: 4}], [{'a': 3, 'b': 2, 'c': 1}], [{}], [{1: 1}], [{None: 2, 1: 2, 'a': 2}], [{True: 3, False: 1}]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]], [[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]], [['a', 'b', 'c', 'a', 'b', 'a']], [[]], [[1]], [[None, None, 1, 1, 'a', 'a']], [[True, False, True, True]]]", "input_output_examples": "[[[[10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]]], [[{10: 4, 20: 4, 40: 2, 50: 2, 30: 1}]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/89", "requirement": "def closest_num(N: int) -> int:\n\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"", "entry_point": "closest_num", "canonical_solution": "def closest_num(N):\n  return (N - 1)", "input_output_examples": "[[[11]], [[10]]]", "starter_code": "def closest_num(N: int) -> int:", "llm_generated_inputs": "[[11], [1], [0], [-1], [-10], [100], [999]]", "clusters": {"cluster_list": [{"programs_str": ["def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1"], "outputs": "[[10], [0], [-1], [-2], [-11], [99], [998]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[11], [1], [0], [-1], [-10], [100], [999]]", "input_output_examples": "[[[11]], [[10]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/90", "requirement": "from typing import List\n\n\ndef len_log(list1: List[str]) -> int:\n\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"", "entry_point": "len_log", "canonical_solution": "def len_log(list1):\n    return max(len(x) for x in list1)", "input_output_examples": "[[[['python', 'PHP', 'bigdata']]], [[7]]]", "starter_code": "from typing import List\ndef len_log(list1: List[str]) -> int:", "llm_generated_inputs": "[[['python', 'PHP', 'bigdata']], [['a', 'ab', 'abc']], [['longestword', 'short', 'tiny']], [[]], [['equal', 'equal', 'equal']], [['single']], [['', 'nonempty', 'string']], [['verylongwordindeed', 'short', 'tiny']]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))"], "outputs": "[[7], [3], [11], ['ValueError'], [5], [6], [8], [18]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['python', 'PHP', 'bigdata']], [['a', 'ab', 'abc']], [['longestword', 'short', 'tiny']], [[]], [['equal', 'equal', 'equal']], [['single']], [['', 'nonempty', 'string']], [['verylongwordindeed', 'short', 'tiny']]]", "input_output_examples": "[[[['python', 'PHP', 'bigdata']]], [[7]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/91", "requirement": "from typing import List\n\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"", "entry_point": "find_substring", "canonical_solution": "def find_substring(str1, sub_str):\n   return any(sub_str in s for s in str1)", "input_output_examples": "[[[['red', 'black', 'white', 'green', 'orange'], 'ack']], [[True]]]", "starter_code": "from typing import List\ndef find_substring(str1: List[str], sub_str: str) -> bool:", "llm_generated_inputs": "[[['red', 'black', 'white', 'green', 'orange'], 'ack'], [['red', 'black', 'white', 'green', 'orange'], 'blue'], [[], 'ack'], [['red', 'black', 'white', 'green', 'orange'], ''], [['red', 'black', 'white', 'green', 'orange'], 'orange'], [['red', 'black', 'white', 'green', 'orange'], 'red'], [['red', 'black', 'white', 'green', 'orange'], 'e'], [['red', 'black', 'white', 'green', 'orange'], 'z']]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"], "outputs": "[[True], [False], [False], [True], [True], [True], [True], [False]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['red', 'black', 'white', 'green', 'orange'], 'ack'], [['red', 'black', 'white', 'green', 'orange'], 'blue'], [[], 'ack'], [['red', 'black', 'white', 'green', 'orange'], ''], [['red', 'black', 'white', 'green', 'orange'], 'orange'], [['red', 'black', 'white', 'green', 'orange'], 'red'], [['red', 'black', 'white', 'green', 'orange'], 'e'], [['red', 'black', 'white', 'green', 'orange'], 'z']]", "input_output_examples": "[[[['red', 'black', 'white', 'green', 'orange'], 'ack']], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/92", "requirement": "def is_undulating(n: int) -> bool:\n\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"", "entry_point": "is_undulating", "canonical_solution": "def is_undulating(n): \n\tdigits = [int(digit) for digit in str(n)]\n\tif len(set(digits)) != 2:\n\t\treturn False\n\treturn all(a != b for a, b in zip(digits, digits[1:]))", "input_output_examples": "[[[1212121]], [[True]]]", "starter_code": "def is_undulating(n: int) -> bool:", "llm_generated_inputs": "[[1212121], [123123], [787878], [121], [12], [1], [101010], [1001], [989898], [111], [222], [12321], [45654], [112211], [1221]]", "clusters": {"cluster_list": [{"programs_str": ["def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3 or len(set(s[::2])) != 1 or len(set(s[1::2])) != 1:\n        return False\n    return s[0] != s[1]", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3 or len(set(s)) != 2:\n        return False\n    for i in range(2, len(s)):\n        if s[i] != s[i - 2]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3 or len(set(s)) != 2:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] != s[i + 2]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3 or len(set(s)) != 2:\n        return False\n    return all((s[i] == s[i % 2] for i in range(len(s))))", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3 or len(set(s)) != 2:\n        return False\n    for i in range(2, len(s)):\n        if s[i] != s[i - 2]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3 or len(set(s)) != 2:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] != s[i + 2]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3 or len(set(s)) != 2:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] != s[i + 2]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3 or len(set(s[::2])) != 1 or len(set(s[1::2])) != 1:\n        return False\n    return s[0] != s[1]", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3 or len(set(s[::2])) != 1 or len(set(s[1::2])) != 1:\n        return False\n    return s[0] != s[1]", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3 or len(set(s[::2])) != 1 or len(set(s[1::2])) != 1:\n        return False\n    return s[0] != s[1]", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3 or len(set(s[::2])) != 1 or len(set(s[1::2])) != 1:\n        return False\n    return s[0] != s[1]", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3 or len(set(s)) != 2:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] != s[i + 2]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3 or len(set(s[::2])) != 1 or len(set(s[1::2])) != 1:\n        return False\n    return s[0] != s[1]", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3 or len(set(s)) != 2:\n        return False\n    for i in range(2, len(s)):\n        if s[i] != s[i - 2]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3 or len(set(s)) != 2:\n        return False\n    for i in range(2, len(s)):\n        if s[i] != s[i - 2]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3 or len(set(s)) != 2:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] != s[i + 2]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3 or len(set(s[::2])) != 1 or len(set(s[1::2])) != 1:\n        return False\n    return s[0] != s[1]", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3 or len(set(s)) != 2:\n        return False\n    for i in range(2, len(s)):\n        if s[i] != s[i - 2]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3 or len(set(s)) != 2:\n        return False\n    for i in range(2, len(s)):\n        if s[i] != s[i - 2]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3 or len(set(s)) != 2:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] != s[i + 2]:\n            return False\n    return True"], "outputs": "[[True], [False], [True], [True], [False], [False], [True], [False], [True], [False], [False], [False], [False], [False], [False]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1212121], [123123], [787878], [121], [12], [1], [101010], [1001], [989898], [111], [222], [12321], [45654], [112211], [1221]]", "input_output_examples": "[[[1212121]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/93", "requirement": "def power(a: int, b: int) -> int:\n\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"", "entry_point": "power", "canonical_solution": "def power(a, b):\n\treturn a ** b", "input_output_examples": "[[[3, 4]], [[81]]]", "starter_code": "def power(a: int, b: int) -> int:", "llm_generated_inputs": "[[3, 4], [2, 3], [5, 0], [0, 5], [0, 0], [-2, 3], [-2, 2], [2, -3], [-2, -3], [10, 1], [1, 10]]", "clusters": {"cluster_list": [{"programs_str": ["def power(a: int, b: int) -> int:\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result", "def power(a: int, b: int) -> int:\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result", "def power(a: int, b: int) -> int:\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result", "def power(a: int, b: int) -> int:\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result", "def power(a: int, b: int) -> int:\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result", "def power(a: int, b: int) -> int:\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result", "def power(a: int, b: int) -> int:\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result", "def power(a: int, b: int) -> int:\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result", "def power(a: int, b: int) -> int:\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result", "def power(a: int, b: int) -> int:\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result", "def power(a: int, b: int) -> int:\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result", "def power(a: int, b: int) -> int:\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result", "def power(a: int, b: int) -> int:\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result", "def power(a: int, b: int) -> int:\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result", "def power(a: int, b: int) -> int:\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result"], "outputs": "[[81], [8], [1], [0], [1], [-8], [4], [1], [1], [10], [1]]", "probability": 0.75, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b"], "outputs": "[[81], [8], [1], [0], [1], [-8], [4], [0.125], [-0.125], [10], [1]]", "probability": 0.25, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8112781244591328, "llm_generated_inputs": "[[3, 4], [2, 3], [5, 0], [0, 5], [0, 0], [-2, 3], [-2, 2], [2, -3], [-2, -3], [10, 1], [1, 10]]", "input_output_examples": "[[[3, 4]], [[81]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.4056390622295664}}
{"task_id": "Mbpp/94", "requirement": "from typing import List\n\n\ndef index_minimum(test_list: List[tuple]) -> any:\n\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"", "entry_point": "index_minimum", "canonical_solution": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res)", "input_output_examples": "[[[[('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]]], [['Varsha']]]", "starter_code": "from typing import List\ndef index_minimum(test_list: List[tuple]) -> any:", "llm_generated_inputs": "[[[('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]], [[('Alice', 5), ('Bob', 2), ('Charlie', 8)]], [[('Tom', 10), ('Jerry', 10), ('Spike', 5)]], [[('One', 1)]], [[('First', 3), ('Second', 2), ('Third', 1)]], [[('A', 100), ('B', 200), ('C', 50), ('D', 50)]], [[('Single', 0)]], [[]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]"], "outputs": "[['Varsha'], ['Bob'], ['Spike'], ['One'], ['Third'], ['C'], ['Single'], ['ValueError']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]], [[('Alice', 5), ('Bob', 2), ('Charlie', 8)]], [[('Tom', 10), ('Jerry', 10), ('Spike', 5)]], [[('One', 1)]], [[('First', 3), ('Second', 2), ('Third', 1)]], [[('A', 100), ('B', 200), ('C', 50), ('D', 50)]], [[('Single', 0)]], [[]]]", "input_output_examples": "[[[[('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]]], [['Varsha']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/95", "requirement": "from typing import List\n\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"", "entry_point": "Find_Min_Length", "canonical_solution": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength", "input_output_examples": "[[[[[1], [1, 2]]]], [[1]]]", "starter_code": "from typing import List\ndef Find_Min_Length(lst: List[List[Any]]) -> int:", "llm_generated_inputs": "[[[[1], [1, 2]]], [[[1, 2, 3], [4, 5], [6]]], [[]], [[[], [1, 2], [3, 4, 5]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1]]], [[[1], [2], [3]]]]", "clusters": {"cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))"], "outputs": "[[1], [1], ['ValueError'], [0], [3], [1], [1]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[1], [1, 2]]], [[[1, 2, 3], [4, 5], [6]]], [[]], [[[], [1, 2], [3, 4, 5]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1]]], [[[1], [2], [3]]]]", "input_output_examples": "[[[[[1], [1, 2]]]], [[1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}}
{"task_id": "Mbpp/96", "requirement": "def divisor(n: int) -> int:\n\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"", "entry_point": "divisor", "canonical_solution": "def divisor(n):\n  return sum(1 for i in range(1, n + 1) if n % i == 0)", "input_output_examples": "[[[15]], [[4]]]", "starter_code": "def divisor(n: int) -> int:", "llm_generated_inputs": "[[15], [1], [0], [-5], [16], [13]]", "clusters": {"cluster_list": [{"programs_str": ["def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"], "outputs": "[[4], [1], [0], [0], [5], [2]]", "probability": 0.45, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count"], "outputs": "[[4], [1], [0], ['TypeError'], [5], [2]]", "probability": 0.55, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.9927744539878083, "llm_generated_inputs": "[[15], [1], [0], [-5], [16], [13]]", "input_output_examples": "[[[15]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.49638722699390414}}
