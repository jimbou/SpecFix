requirement,requirement_without_examples
"from typing import List


def tri(n: int) -> List[float]:
    """"""Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """"""","from typing import List


def tri(n: int) -> List[float]:
    """"""Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    """""""
"from typing import List


def is_divisible_by_6(s: str) -> List[str]:
""""""# Task
A masked number is a string that consists of digits and one asterisk (`*`) that should be replaced by exactly one digit. Given a masked number `s`, find all the possible options to replace the asterisk with a digit to produce an integer divisible by 6.


# Input/Output

`[input]` string `s`

A masked number.

`1 ≤ inputString.length ≤ 10000.`

`[output]` a string array

Sorted array of strings representing all non-negative integers that correspond to the given mask and are divisible by 6.

# Example

For `s = ""1*0""`, the output should be `[""120"", ""150"", ""180""].`

For `s = ""*1""`, the output should be `[].`

For `s = ""1234567890123456789012345678*0""`, 

the output should be 
```
[
""123456789012345678901234567800"",
""123456789012345678901234567830"",
""123456789012345678901234567860"",
""123456789012345678901234567890""]```
As you can see, the masked number may be very large ;-)
""""""","from typing import List


def is_divisible_by_6(s: str) -> List[str]:
""""""# Task
A masked number is a string that consists of digits and one asterisk (`*`) that should be replaced by exactly one digit. Given a masked number `s`, find all the possible options to replace the asterisk with a digit to produce an integer divisible by 6.


# Input/Output

`[input]` string `s`

A masked number.

`1 ≤ inputString.length ≤ 10000.`

`[output]` a string array

Sorted array of strings representing all non-negative integers that correspond to the given mask and are divisible by 6.
"""""""
"def is_haiku(text: str) -> bool:
""""""[Haikus](https://en.wikipedia.org/wiki/Haiku_in_English) are short poems in a three-line format, with 17 syllables arranged in a 5–7–5 pattern. Your task is to check if the supplied text is a haiku or not.


### About syllables

[Syllables](https://en.wikipedia.org/wiki/Syllable) are the phonological building blocks of words. *In this kata*, a syllable is a part of a word including a vowel (""a-e-i-o-u-y"") or a group of vowels (e.g. ""ou"", ""ee"", ""ay""). A few examples: ""tea"", ""can"", ""to·day"", ""week·end"", ""el·e·phant"".

**However**, silent ""E""s **do not** create syllables. *In this kata*, an ""E"" is considered silent if it's alone at the end of the word, preceded by one (or more) consonant(s) and there is at least one other syllable in the word. Examples: ""age"", ""ar·range"", ""con·crete""; but not in ""she"", ""blue"", ""de·gree"".

Some more examples:
* one syllable words: ""cat"", ""cool"", ""sprout"", ""like"", ""eye"", ""squeeze""
* two syllables words: ""ac·count"", ""hon·est"", ""beau·ty"", ""a·live"", ""be·cause"", ""re·store""


## Examples
```
An old silent pond...
A frog jumps into the pond,
splash! Silence again.
```

...should return `True`, as this is a valid 5–7–5 haiku:
```
An old si·lent pond...            # 5 syllables
A frog jumps in·to the pond,      # 7
splash! Si·lence a·gain.          # 5
```

Another example:

```
Autumn moonlight -
a worm digs silently
into the chestnut.
```

...should return `False`, because the number of syllables per line is not correct:
```
Au·tumn moon·light -          # 4 syllables
a worm digs si·lent·ly        # 6
in·to the chest·nut.          # 5
```

---

## My other katas

If you enjoyed this kata then please try [my other katas](https://www.codewars.com/collections/katas-created-by-anter69)! :-)
""""""","def is_haiku(text: str) -> bool:
""""""[Haikus](https://en.wikipedia.org/wiki/Haiku_in_English) are short poems in a three-line format, with 17 syllables arranged in a 5–7–5 pattern. Your task is to check if the supplied text is a haiku or not.


### About syllables

[Syllables](https://en.wikipedia.org/wiki/Syllable) are the phonological building blocks of words. *In this kata*, a syllable is a part of a word including a vowel (""a-e-i-o-u-y"") or a group of vowels (e.g. ""ou"", ""ee"", ""ay"").

**However**, silent ""E""s **do not** create syllables. *In this kata*, an ""E"" is considered silent if it's alone at the end of the word, preceded by one (or more) consonant(s) and there is at least one other syllable in the word.
"""""""
"def isdigit(string: str) -> bool:
""""""Given a string s, write a method (function) that will return true if its a valid single integer or floating number or false if its not.

Valid examples, should return true:

should return false:
""""""","def isdigit(string: str) -> bool:
""""""Given a string s, write a method (function) that will return true if its a valid single integer or floating number or false if its not.
"""""""
"from typing import List


def pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:
""""""
Write a function to pack consecutive duplicates of a given list elements into sublists.
assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]
""""""","from typing import List


def pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:
""""""
Write a function to pack consecutive duplicates of a given list elements into sublists.
"""""""
"def right_angle_triangle(a: int, b: int, c: int) -> bool:
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''","def right_angle_triangle(a: int, b: int, c: int) -> bool:
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    '''"
"def remove_Occ(s: str, ch: str) -> str:
""""""
Write a python function to remove first and last occurrence of a given character from the string.


assert remove_Occ(""hello"",""l"") == ""heo""
""""""","def remove_Occ(s: str, ch: str) -> str:
""""""
Write a python function to remove first and last occurrence of a given character from the string.


"""""""
"from typing import List


def min_length_num(digits: int, max_num: int) -> List[int]:
""""""# Task:

We define the ""self reversed power sequence"" as one shown below:



Implement a function that takes 2 arguments (`ord max` and `num dig`), and finds the smallest term of the sequence whose index is less than or equal to `ord max`, and has exactly `num dig` number of digits.

If there is a number with correct amount of digits, the result should be an array in the form:

```python
[True, smallest found term]
[False, -1]
```

## Input range:

```python
ord_max <= 1000
```

___

## Examples:

```python
min_length_num(5, 10) == [True, 10]   # 10th term has 5 digits
min_length_num(7, 11) == [False, -1]  # no terms before the 13th one have 7 digits
min_length_num(7, 14) == [True, 13]   # 13th term is the first one which has 7 digits
```

Which you can see in the table below:

```
n-th Term    Term Value
1              0
2              1
3              3
4              8
5              22
6              65
7              209
8              732
9              2780
10             11377
11             49863
12             232768
13             1151914
14             6018785
```

___

Enjoy it and happy coding!!
""""""","from typing import List


def min_length_num(digits: int, max_num: int) -> List[int]:
""""""# Task:

We define the ""self reversed power sequence"" as one shown below:



Implement a function that takes 2 arguments (`ord max` and `num dig`), and finds the smallest term of the sequence whose index is less than or equal to `ord max`, and has exactly `num dig` number of digits.

If there is a number with correct amount of digits, the result should be an array in the form:

```python
[True, smallest found term]
[False, -1]
```

## Input range:

```python
ord_max <= 1000
```

___



___

Enjoy it and happy coding!!
"""""""
"from typing import List


def max_Abs_Diff(arr: List[int]) -> int:
""""""
Write a python function to find the maximum difference between any two elements in a given array.
assert max_Abs_Diff((2,1,5,3)) == 4
""""""","from typing import List


def max_Abs_Diff(arr: List[int]) -> int:
""""""
Write a python function to find the maximum difference between any two elements in a given array.
"""""""
"def solve_for_x(equation: str) -> int:
""""""# Solve For X

You will be given an equation as a string and you will need to [solve for X](https://www.mathplacementreview.com/algebra/basic-algebra.php#solve-for-a-variable) and return x's value. For example: 

```python
solve_for_x('x - 5 = 20') # should return 25
solve_for_x('20 = 5 * x - 5') # should return 5
solve_for_x('5 * x = x + 8') # should return 2
solve_for_x('(5 - 3) * x = x + 2') # should return 2
```

NOTES:
 * All numbers will be whole numbers
 * Don't forget about the [order of operations](https://www.mathplacementreview.com/algebra/basic-algebra.php#order-of-operations).
 * If the random tests don't pass the first time, just run them again.
""""""","def solve_for_x(equation: str) -> int:
""""""# Solve For X

You will be given an equation as a string and you will need to [solve for X](https://www.mathplacementreview.com/algebra/basic-algebra.php#solve-for-a-variable) and return x's value.

NOTES:
 * All numbers will be whole numbers
 * Don't forget about the [order of operations](https://www.mathplacementreview.com/algebra/basic-algebra.php#order-of-operations).
 * If the random tests don't pass the first time, just run them again.
"""""""
"def volume_cube(l: int) -> int:
""""""
Write a function to find the volume of a cube given its side length.
assert volume_cube(3)==27
""""""","def volume_cube(l: int) -> int:
""""""
Write a function to find the volume of a cube given its side length.
"""""""
"from typing import List


def below_threshold(l: List[int], t: int) -> bool:
    """"""Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""","from typing import List


def below_threshold(l: List[int], t: int) -> bool:
    """"""Return True if all numbers in the list l are below threshold t.
    """""""
"def digit_distance_nums(n1: int, n2: int) -> int:
""""""
Write a python function to find the sum of the per-digit difference between two integers.
assert digit_distance_nums(1,2) == 1
""""""","def digit_distance_nums(n1: int, n2: int) -> int:
""""""
Write a python function to find the sum of the per-digit difference between two integers.
"""""""
"def choose_num(x: int, y: int) -> int:
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""","def choose_num(x: int, y: int) -> int:
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.
    """""""
"def fizz_buzz(n: int) -> int:
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""","def fizz_buzz(n: int) -> int:
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    """""""
