{"task_id": "Mbpp/2", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"", "llm_generated_inputs": "[[[3, 4, 5, 6], [5, 7, 4, 10]], [[1, 2, 3], [3, 4, 5]], [[10, 20, 30], [30, 40, 10]], [[1, 1, 2, 2], [2, 2, 3, 3]], [[5], [5]], [[], []], [[], [1, 2, 3]], [[1, 2, 3], []], [[1, 2, 3], [4, 5, 6]]]", "programs": ["from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return tuple(shared_elements)", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return tuple(shared_elements)", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))"], "clusters": [{"programs_str": ["from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return tuple(shared_elements)", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return tuple(shared_elements)", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List\nfrom typing import Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))"], "outputs": "[[(4, 5)], [(3,)], [(10, 30)], [(2,)], [(5,)], [()], [()], [()], [()]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/3", "requirement": "def is_not_prime(n: int) -> bool:\n\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [4], [5], [10], [15], [23], [25], [0], [-1], [-10], [100], [97]]", "programs": ["def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"], "clusters": [{"programs_str": ["def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"], "outputs": "[[True], [False], [False], [True], [False], [True], [True], [False], [True], [True], [True], [True], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/4", "requirement": "def heap_queue_largest(nums: list, n: int) -> list:\n\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"", "llm_generated_inputs": "[[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3], [[10, 20, 30, 40, 50], 5], [[3], 1], [[], 0], [[2, 2, 2, 2], 2], [[8, 7, 6, 5, 4], 3], [[1, 4, 3, 2], 0], [[10, 9, 8, 7, 6, 5], 1], [[-1, -2, -3, -4, -5], 2]]", "programs": ["import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return heapq.nlargest(n, nums)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return heapq.nlargest(n, nums)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return heapq.nlargest(n, nums)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return heapq.nlargest(n, nums)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)"], "clusters": [{"programs_str": ["import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return heapq.nlargest(n, nums)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return heapq.nlargest(n, nums)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return heapq.nlargest(n, nums)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return heapq.nlargest(n, nums)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)"], "outputs": "[[[85, 75, 65]], [[50, 40, 30, 20, 10]], [[3]], [[]], [[2, 2]], [[8, 7, 6]], [[]], [[10]], [[-1, -2]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/6", "requirement": "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"", "llm_generated_inputs": "[[13, 9], [15, 14], [1, 0], [4, 0], [7, 6], [10, 2], [0, 1], [255, 254], [32, 64], [8, 10]]", "programs": ["def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0 and a ^ b != 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return a ^ b != 0 and (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0 and a ^ b != 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return a ^ b == 1 << (a ^ b).bit_length() - 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return a ^ b != 0 and (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return a ^ b != 0 and (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0 and a ^ b != 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return a ^ b != 0 and (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return a ^ b != 0 and a ^ b & (a ^ b - 1) == 0"], "clusters": [{"programs_str": ["def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0 and a ^ b != 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return a ^ b != 0 and (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0 and a ^ b != 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return a ^ b == 1 << (a ^ b).bit_length() - 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return a ^ b != 0 and (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return a ^ b != 0 and (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0 and a ^ b != 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return a ^ b != 0 and (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1"], "outputs": "[[True], [True], [True], [True], [True], [True], [True], [True], [False], [True]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return a ^ b != 0 and a ^ b & (a ^ b - 1) == 0"], "outputs": "[[False], [False], [False], [False], [False], [False], [True], [False], [False], [False]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[13, 9], [False], [True]]]"}]}
{"task_id": "Mbpp/7", "requirement": "from typing import List\n\n\ndef find_char_long(text: str) -> List[str]:\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"", "llm_generated_inputs": "[['Please move back to stream'], ['This is an example of testing words'], ['Python is fun'], ['short word'], ['many kinds of words exist in this test'], ['A quick brown fox jumps over the lazy dog'], [''], ['123 4567 89'], ['abcd efgh ijkl mnopQRST']]", "programs": ["from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]"], "clusters": [{"programs_str": ["from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]"], "outputs": "[[['Please', 'move', 'back', 'stream']], [['This', 'example', 'testing', 'words']], [['Python']], [['short', 'word']], [['many', 'kinds', 'words', 'exist', 'this', 'test']], [['quick', 'brown', 'jumps', 'over', 'lazy']], [[]], [['4567']], [['abcd', 'efgh', 'ijkl', 'mnopQRST']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/8", "requirement": "from typing import List\n\n\ndef square_nums(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 4, 5]], [[0, -1, -2, -3]], [[10, 20, 30]], [[-10, -20, -30]], [[5]], [[]], [[2, 4, 6, 8, 10]], [[1, 1, 1, 1]], [[3, 5, 7, 9]]]", "programs": ["from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]"], "clusters": [{"programs_str": ["from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]"], "outputs": "[[[1, 4, 9, 16, 25]], [[0, 1, 4, 9]], [[100, 400, 900]], [[100, 400, 900]], [[25]], [[]], [[4, 16, 36, 64, 100]], [[1, 1, 1, 1]], [[9, 25, 49, 81]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/9", "requirement": "def find_Rotations(s: str) -> int:\n\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"", "llm_generated_inputs": "[['aaaa'], ['abcabc'], ['abcdabcd'], ['abcd'], ['a'], ['ababab']]", "programs": ["def find_Rotations(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    double_s = s + s\n    for i in range(1, n):\n        if double_s[i:i + n] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i % n:] + s[:i % n] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    for i in range(1, len(s) + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return len(s)", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    if len(s) == 0:\n        return 0\n    doubled_s = s + s\n    length = len(s)\n    for i in range(1, length):\n        if doubled_s[i:i + length] == s:\n            return i\n    return length", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i % n:] + s[:i % n] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for k in range(1, n + 1):\n        if s == s[k:] + s[:k]:\n            return k\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    concatenated = s + s\n    for i in range(1, n):\n        if concatenated[i:i + n] == s:\n            return i + 1\n    return n"], "clusters": [{"programs_str": ["def find_Rotations(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    double_s = s + s\n    for i in range(1, n):\n        if double_s[i:i + n] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i % n:] + s[:i % n] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    for i in range(1, len(s) + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return len(s)", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    if len(s) == 0:\n        return 0\n    doubled_s = s + s\n    length = len(s)\n    for i in range(1, length):\n        if doubled_s[i:i + length] == s:\n            return i\n    return length", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i % n:] + s[:i % n] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for k in range(1, n + 1):\n        if s == s[k:] + s[:k]:\n            return k\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return n"], "outputs": "[[1], [3], [4], [4], [1], [2]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def find_Rotations(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    concatenated = s + s\n    for i in range(1, n):\n        if concatenated[i:i + n] == s:\n            return i + 1\n    return n"], "outputs": "[[2], [4], [5], [4], [1], [3]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aaaa'], [2], [1]]]"}]}
{"task_id": "Mbpp/11", "requirement": "def remove_Occ(s: str, ch: str) -> str:\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"", "llm_generated_inputs": "[['hello', 'l'], ['banana', 'a'], ['character', 'c'], ['testcase', 't'], ['', 'a'], ['a', 'a'], ['abcdefg', 'x'], ['apple', 'p'], ['hello world', 'o']]", "programs": ["def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1 or first_index == last_index:\n        return s.replace(ch, '', 1)\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index != -1 and first_index != last_index:\n        return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n    elif first_index == last_index and first_index != -1:\n        return s[:first_index] + s[first_index + 1:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == -1:\n        return s\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    s = s[:first_index] + s[first_index + 1:]\n    if last_index > first_index:\n        last_index -= 1\n    if last_index >= 0:\n        s = s[:last_index] + s[last_index + 1:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == -1:\n        return s\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence + 1:]\n    if last_occurrence != -1 and last_occurrence > first_occurrence:\n        s = s[:last_occurrence - 1] + s[last_occurrence:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == -1:\n        return s\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ == -1:\n        return s\n    if first_occ == last_occ:\n        return s[:first_occ] + s[first_occ + 1:]\n    return s[:first_occ] + s[first_occ + 1:last_occ] + s[last_occ + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1 or first_index == last_index:\n        return s.replace(ch, '', 1)\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence != -1 and last_occurrence != -1 and (first_occurrence != last_occurrence):\n        return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]\n    return s.replace(ch, '', 1).replace(ch, '', 1)", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ == -1:\n        return s\n    if first_occ == last_occ:\n        return s[:first_occ] + s[first_occ + 1:]\n    return s[:first_occ] + s[first_occ + 1:last_occ] + s[last_occ + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]"], "clusters": [{"programs_str": ["def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1 or first_index == last_index:\n        return s.replace(ch, '', 1)\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index != -1 and first_index != last_index:\n        return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n    elif first_index == last_index and first_index != -1:\n        return s[:first_index] + s[first_index + 1:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == -1:\n        return s\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    s = s[:first_index] + s[first_index + 1:]\n    if last_index > first_index:\n        last_index -= 1\n    if last_index >= 0:\n        s = s[:last_index] + s[last_index + 1:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == -1:\n        return s\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence + 1:]\n    if last_occurrence != -1 and last_occurrence > first_occurrence:\n        s = s[:last_occurrence - 1] + s[last_occurrence:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == -1:\n        return s\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ == -1:\n        return s\n    if first_occ == last_occ:\n        return s[:first_occ] + s[first_occ + 1:]\n    return s[:first_occ] + s[first_occ + 1:last_occ] + s[last_occ + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1 or first_index == last_index:\n        return s.replace(ch, '', 1)\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence != -1 and last_occurrence != -1 and (first_occurrence != last_occurrence):\n        return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]\n    return s.replace(ch, '', 1).replace(ch, '', 1)", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ == -1:\n        return s\n    if first_occ == last_occ:\n        return s[:first_occ] + s[first_occ + 1:]\n    return s[:first_occ] + s[first_occ + 1:last_occ] + s[last_occ + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]"], "outputs": "[['heo'], ['bnan'], ['harater'], ['escase'], [''], [''], ['abcdefg'], ['ale'], ['hell wrld']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/12", "requirement": "from typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"", "llm_generated_inputs": "[[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]], [[[5, 3], [1, 2, 4]]], [[[0, 0], [0, 0], [1, 1]]], [[[10], [2], [5], [8]]], [[[1]]], [[[3, 2, 1], [6, 5], [4]]], [[[7, 8], [3, 4], [1, 2], [9, 10]]]]", "programs": ["from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)"], "clusters": [{"programs_str": ["from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=sum)"], "outputs": "[[[[1, 1, 1], [1, 2, 3], [2, 4, 5]]], [[[1, 2, 4], [5, 3]]], [[[0, 0], [0, 0], [1, 1]]], [[[2], [5], [8], [10]]], [[[1]]], [[[4], [3, 2, 1], [6, 5]]], [[[1, 2], [3, 4], [7, 8], [9, 10]]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/14", "requirement": "def find_Volume(l: float, b: float, h: float) -> float:\n\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"", "llm_generated_inputs": "[[10, 8, 6], [5, 4, 3], [0, 10, 5], [10, 0, 5], [10, 8, 0], [1.5, 2.5, 3.0], [10000000000.0, 10000000000.0, 10000000000.0], [-1, 5, 3], [10, 10, 10]]", "programs": ["def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2"], "clusters": [{"programs_str": ["def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 1 / 2 * l * b * h", "def find_Volume(l: float, b: float, h: float) -> float:\n    return l * b * h / 2"], "outputs": "[[240.0], [30.0], [0.0], [0.0], [0.0], [5.625], [5e+29], [-7.5], [500.0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/16", "requirement": "def text_lowercase_underscore(text: str) -> bool:\n\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"", "llm_generated_inputs": "[['aab_cbbbc'], ['abc_def_ghi'], ['abcd__efgh'], ['Abc_def'], ['aabC_cbbbc'], ['a_b_c_d'], ['abcd'], ['___'], [''], ['lower_case_with_underscore']]", "programs": ["def text_lowercase_underscore(text: str) -> bool:\n    import re\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('([a-z]+_)*[a-z]+', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match('^([a-z]+_)*[a-z]+$', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return re.match(pattern, text) is not None", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('([a-z]+_)*[a-z]+', text))", "def text_lowercase_underscore(text: str) -> bool:\n    import re\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('([a-z]+(_[a-z]+)*)', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('([a-z]+(_[a-z]+)*)+', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('([a-z]+_)*[a-z]+', text))", "def text_lowercase_underscore(text: str) -> bool:\n    import re\n    return bool(re.fullmatch('([a-z]+(_[a-z]+)*)?', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('([a-z]+(_[a-z]+)*)?', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('([a-z]+(_[a-z]+)*)?', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('([a-z]+(_[a-z]+)*)?', text))", "def text_lowercase_underscore(text: str) -> bool:\n    import re\n    return bool(re.fullmatch('([a-z]+_\\\\b)*[a-z]+', text))"], "clusters": [{"programs_str": ["def text_lowercase_underscore(text: str) -> bool:\n    import re\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('([a-z]+_)*[a-z]+', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match('^([a-z]+_)*[a-z]+$', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return re.match(pattern, text) is not None", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('([a-z]+_)*[a-z]+', text))", "def text_lowercase_underscore(text: str) -> bool:\n    import re\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('([a-z]+(_[a-z]+)*)', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('([a-z]+(_[a-z]+)*)+', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('([a-z]+_)*[a-z]+', text))"], "outputs": "[[True], [True], [False], [False], [False], [True], [True], [False], [False], [True]]", "probability": 0.75, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def text_lowercase_underscore(text: str) -> bool:\n    import re\n    return bool(re.fullmatch('([a-z]+(_[a-z]+)*)?', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('([a-z]+(_[a-z]+)*)?', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('([a-z]+(_[a-z]+)*)?', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('([a-z]+(_[a-z]+)*)?', text))"], "outputs": "[[True], [True], [False], [False], [False], [True], [True], [False], [True], [True]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def text_lowercase_underscore(text: str) -> bool:\n    import re\n    return bool(re.fullmatch('([a-z]+_\\\\b)*[a-z]+', text))"], "outputs": "[[False], [False], [False], [False], [False], [False], [True], [False], [False], [False]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aab_cbbbc'], [False], [True]]]"}]}
{"task_id": "Mbpp/17", "requirement": "def square_perimeter(a: int) -> int:\n\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"", "llm_generated_inputs": "[[10], [0], [-5], [1], [100], [2], [999999]]", "programs": ["def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a"], "clusters": [{"programs_str": ["def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a"], "outputs": "[[40], [0], [-20], [4], [400], [8], [3999996]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/18", "requirement": "def remove_dirty_chars(string: str, second_string: str) -> str:\n\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\n\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"", "llm_generated_inputs": "[['probasscurve', 'pros'], ['hello world', 'lo'], ['clean code', 'ae'], ['abcdef', 'xyz'], ['123456', '345'], ['', 'abc'], ['abc', ''], ['abcd', 'abc'], ['aabbcc', 'abc'], ['removeall', 'remove']]", "programs": ["def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((c for c in string if c not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))"], "clusters": [{"programs_str": ["def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((c for c in string if c not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))"], "outputs": "[['bacuve'], ['he wrd'], ['cln cod'], ['abcdef'], ['126'], [''], ['abc'], ['d'], [''], ['all']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/19", "requirement": "from typing import List\n\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5, 1]], [[]], [[1]], [[2, 2]], [[0, -1, -1, 1]], [[3, 3, 3, 3, 3]], [[5, 4, 3, 2, 1]]]", "programs": ["from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) == len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) == len(set(arraynums))"], "clusters": [{"programs_str": ["from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))"], "outputs": "[[False], [True], [False], [False], [True], [True], [True], [False]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) == len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) == len(set(arraynums))"], "outputs": "[[True], [False], [True], [True], [False], [False], [False], [True]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 2, 3, 4, 5]], [True], [False]]]"}]}
{"task_id": "Mbpp/20", "requirement": "def is_woodall(num: int) -> bool:\n\"\"\"\nWrite a function to check if the given number is woodall or not.\nassert is_woodall(383) == True\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [10], [15], [31], [63], [127], [255], [383], [500], [1024], [2048]]", "programs": ["from math import log2, floor\n\ndef is_woodall(num: int) -> bool:\n    n = floor(log2(num + 1))\n    woodall_number = n * 2 ** n - 1\n    return woodall_number == num", "def is_woodall(num: int) -> bool:\n    from math import log2, floor\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n - 1)\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    from math import log2, floor\n    n = floor(log2(num + 1))\n    woodall_number = n * 2 ** n - 1\n    return num == woodall_number", "def is_woodall(num: int) -> bool:\n    from math import log2, floor\n    n = 1\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    from math import log2, floor\n    n = 1\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "import math\n\ndef is_woodall(num: int) -> bool:\n    n = 1\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    import math\n    n = 1\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    import math\n    k = 1\n    while True:\n        woodall_number = k * 2 ** k - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        k += 1", "def is_woodall(num: int) -> bool:\n    import math\n    n = 1\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        if woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    n = 1\n    while True:\n        woodall_num = n * 2 ** n - 1\n        if woodall_num == num:\n            return True\n        elif woodall_num > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    import math\n    n = 1\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "import math\n\ndef is_woodall(num: int) -> bool:\n    n = 1\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "from math import log2, floor\n\ndef is_woodall(num: int) -> bool:\n    n = 1\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    import math\n    n = 1\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    import math\n    n = 1\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        if woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    from math import log2, floor\n    n = floor(log2(num + 1))\n    woodall_number = (n + 1) * 2 ** n - 1\n    return num == woodall_number", "def is_woodall(num: int) -> bool:\n    from math import log2, floor\n    n = floor(log2(num + 1))\n    woodall_number = (n + 1) * 2 ** n - 1\n    return num == woodall_number", "from math import log2, floor\n\ndef is_woodall(num: int) -> bool:\n    n = floor(log2(num + 1))\n    woodall_number = (n + 1) * 2 ** n - 1\n    return woodall_number == num", "from math import log2, floor\n\ndef is_woodall(num: int) -> bool:\n    n = floor(log2(num + 1))\n    woodall_number = (n + 1) * 2 ** n - 1\n    return woodall_number == num", "from math import log2, floor\n\ndef is_woodall(num: int) -> bool:\n    n = floor(log2(num + 1))\n    woodall_number = (n + 1) * 2 ** n - 1\n    return woodall_number == num"], "clusters": [{"programs_str": ["from math import log2, floor\n\ndef is_woodall(num: int) -> bool:\n    n = floor(log2(num + 1))\n    woodall_number = n * 2 ** n - 1\n    return woodall_number == num", "def is_woodall(num: int) -> bool:\n    from math import log2, floor\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n - 1)\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    from math import log2, floor\n    n = floor(log2(num + 1))\n    woodall_number = n * 2 ** n - 1\n    return num == woodall_number"], "outputs": "[[True], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False]]", "probability": 0.15, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[383], [False], [True]]]"}, {"programs_str": ["def is_woodall(num: int) -> bool:\n    from math import log2, floor\n    n = 1\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    from math import log2, floor\n    n = 1\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "import math\n\ndef is_woodall(num: int) -> bool:\n    n = 1\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    import math\n    n = 1\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    import math\n    k = 1\n    while True:\n        woodall_number = k * 2 ** k - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        k += 1", "def is_woodall(num: int) -> bool:\n    import math\n    n = 1\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        if woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    n = 1\n    while True:\n        woodall_num = n * 2 ** n - 1\n        if woodall_num == num:\n            return True\n        elif woodall_num > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    import math\n    n = 1\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "import math\n\ndef is_woodall(num: int) -> bool:\n    n = 1\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "from math import log2, floor\n\ndef is_woodall(num: int) -> bool:\n    n = 1\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    import math\n    n = 1\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    import math\n    n = 1\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        if woodall_number > num:\n            return False\n        n += 1"], "outputs": "[[True], [False], [False], [False], [False], [False], [True], [False], [False], [True], [False], [False], [False]]", "probability": 0.6, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def is_woodall(num: int) -> bool:\n    from math import log2, floor\n    n = floor(log2(num + 1))\n    woodall_number = (n + 1) * 2 ** n - 1\n    return num == woodall_number", "def is_woodall(num: int) -> bool:\n    from math import log2, floor\n    n = floor(log2(num + 1))\n    woodall_number = (n + 1) * 2 ** n - 1\n    return num == woodall_number", "from math import log2, floor\n\ndef is_woodall(num: int) -> bool:\n    n = floor(log2(num + 1))\n    woodall_number = (n + 1) * 2 ** n - 1\n    return woodall_number == num", "from math import log2, floor\n\ndef is_woodall(num: int) -> bool:\n    n = floor(log2(num + 1))\n    woodall_number = (n + 1) * 2 ** n - 1\n    return woodall_number == num", "from math import log2, floor\n\ndef is_woodall(num: int) -> bool:\n    n = floor(log2(num + 1))\n    woodall_number = (n + 1) * 2 ** n - 1\n    return woodall_number == num"], "outputs": "[[False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False]]", "probability": 0.25, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[383], [False], [True]]]"}]}
{"task_id": "Mbpp/56", "requirement": "def check(n: int) -> bool:\n\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"", "llm_generated_inputs": "[[0], [1], [10], [12], [25], [30], [52], [70], [72], [100], [101]]", "programs": ["def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n\n    def reverse_num(num: int) -> int:\n        return int(str(num)[::-1])\n    rev_n = reverse_num(n)\n    return n == 2 * rev_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n\n    def reverse_number(num: int) -> int:\n        return int(str(num)[::-1])\n    rev_n = reverse_number(n)\n    return n == 2 * rev_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n\n    def reverse_number(num: int) -> int:\n        return int(str(num)[::-1])\n    reversed_n = reverse_number(n)\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1"], "clusters": [{"programs_str": ["def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n\n    def reverse_num(num: int) -> int:\n        return int(str(num)[::-1])\n    rev_n = reverse_num(n)\n    return n == 2 * rev_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n\n    def reverse_number(num: int) -> int:\n        return int(str(num)[::-1])\n    rev_n = reverse_number(n)\n    return n == 2 * rev_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n\n    def reverse_number(num: int) -> int:\n        return int(str(num)[::-1])\n    reversed_n = reverse_number(n)\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1"], "outputs": "[[False], [True], [False], [False], [False], [False], [False], [False], [False], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/57", "requirement": "from typing import List\n\n\ndef find_Max_Num(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3]], [[3, 30, 34, 5, 9]], [[0, 0, 0]], [[9, 8, 7, 6, 5]], [[1, 10, 11]], [[10, 2]], [[5, 56, 6]], [[0]], [[2, 23, 9]]]", "programs": ["from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr = sorted(map(str, arr), reverse=True)\n    return int(''.join(arr))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr_str = list(map(str, arr))\n    arr_str.sort(reverse=True, key=lambda x: x * 10)\n    return int(''.join(arr_str))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    sorted_arr = sorted(map(str, arr), reverse=True)\n    return int(''.join(sorted_arr))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr_str = list(map(str, arr))\n    arr_str.sort(key=lambda x: x * 10, reverse=True)\n    largest_num = ''.join(arr_str)\n    return int(largest_num)", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr_str = list(map(str, arr))\n    arr_str.sort(key=lambda x: x * 10, reverse=True)\n    return int(''.join(arr_str))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr_str = list(map(str, arr))\n    arr_str.sort(reverse=True, key=lambda x: x * 10)\n    return int(''.join(arr_str))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr = sorted(map(str, arr), reverse=True)\n    return int(''.join(arr))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr_str = [str(num) for num in arr]\n    arr_str.sort(key=lambda x: x * 10, reverse=True)\n    return int(''.join(arr_str))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr = list(map(str, arr))\n    arr.sort(reverse=True, key=lambda x: x * 10)\n    return int(''.join(arr))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr = sorted(map(str, arr), reverse=True)\n    return int(''.join(arr))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr_str = sorted(map(str, arr), reverse=True)\n    return int(''.join(arr_str))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr_str = list(map(str, arr))\n    arr_str.sort(reverse=True, key=lambda x: x * 10)\n    return int(''.join(arr_str))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr_str = list(map(str, arr))\n    arr_str.sort(key=lambda x: x * 10, reverse=True)\n    return int(''.join(arr_str))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr_str = sorted(map(str, arr), reverse=True)\n    return int(''.join(arr_str))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr = sorted(map(str, arr), reverse=True)\n    return int(''.join(arr))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))"], "clusters": [{"programs_str": ["from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr = sorted(map(str, arr), reverse=True)\n    return int(''.join(arr))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr_str = list(map(str, arr))\n    arr_str.sort(reverse=True, key=lambda x: x * 10)\n    return int(''.join(arr_str))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    sorted_arr = sorted(map(str, arr), reverse=True)\n    return int(''.join(sorted_arr))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr_str = list(map(str, arr))\n    arr_str.sort(key=lambda x: x * 10, reverse=True)\n    largest_num = ''.join(arr_str)\n    return int(largest_num)", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr_str = list(map(str, arr))\n    arr_str.sort(key=lambda x: x * 10, reverse=True)\n    return int(''.join(arr_str))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr_str = list(map(str, arr))\n    arr_str.sort(reverse=True, key=lambda x: x * 10)\n    return int(''.join(arr_str))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr = sorted(map(str, arr), reverse=True)\n    return int(''.join(arr))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr_str = [str(num) for num in arr]\n    arr_str.sort(key=lambda x: x * 10, reverse=True)\n    return int(''.join(arr_str))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr = list(map(str, arr))\n    arr.sort(reverse=True, key=lambda x: x * 10)\n    return int(''.join(arr))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr = sorted(map(str, arr), reverse=True)\n    return int(''.join(arr))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr_str = sorted(map(str, arr), reverse=True)\n    return int(''.join(arr_str))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr_str = list(map(str, arr))\n    arr_str.sort(reverse=True, key=lambda x: x * 10)\n    return int(''.join(arr_str))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr_str = list(map(str, arr))\n    arr_str.sort(key=lambda x: x * 10, reverse=True)\n    return int(''.join(arr_str))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr_str = sorted(map(str, arr), reverse=True)\n    return int(''.join(arr_str))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr = sorted(map(str, arr), reverse=True)\n    return int(''.join(arr))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))"], "outputs": "[[321], [9534303], [0], [98765], [11101], [210], [6565], [0], [9232]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/58", "requirement": "def opposite_Signs(x: int, y: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"", "llm_generated_inputs": "[[1, -2], [-1, 2], [0, 5], [-5, 0], [0, 0], [100, -100], [-42, 42], [2147483647, -2147483648]]", "programs": ["def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return x < 0 and y > 0 or (x > 0 and y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return x < 0 < y or y < 0 < x", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x > 0) != (y > 0)"], "clusters": [{"programs_str": ["def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)"], "outputs": "[[True], [True], [False], [True], [False], [True], [True], [True]]", "probability": 0.85, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def opposite_Signs(x: int, y: int) -> bool:\n    return x < 0 and y > 0 or (x > 0 and y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return x < 0 < y or y < 0 < x"], "outputs": "[[True], [True], [False], [False], [False], [True], [True], [True]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def opposite_Signs(x: int, y: int) -> bool:\n    return (x > 0) != (y > 0)"], "outputs": "[[True], [True], [True], [False], [False], [True], [True], [True]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/59", "requirement": "def is_octagonal(n: int) -> int:\n\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [4], [5], [10], [15], [20], [0], [-1]]", "programs": ["def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)"], "clusters": [{"programs_str": ["def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)"], "outputs": "[[1], [8], [21], [40], [65], [280], [645], [1160], [0], [5]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/61", "requirement": "def count_Substrings(s: str) -> int:\n\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"", "llm_generated_inputs": "[['112112'], ['123456'], ['1111'], ['0000'], ['1'], ['111'], ['222'], ['121'], ['11'], ['']]", "programs": ["def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for start in range(n):\n        digit_sum = 0\n        for end in range(start, n):\n            digit_sum += int(s[end])\n            length = end - start + 1\n            if digit_sum == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for start in range(n):\n        digit_sum = 0\n        for end in range(start, n):\n            digit_sum += int(s[end])\n            if digit_sum == end - start + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            length = j - i + 1\n            if digit_sum == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        total_sum = 0\n        for j in range(i, n):\n            total_sum += int(s[j])\n            if total_sum == j - i + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            length = j - i + 1\n            if digit_sum == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += int(s[j])\n            if current_sum == j - i + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for start in range(n):\n        sum_digits = 0\n        for end in range(start, n):\n            sum_digits += int(s[end])\n            if sum_digits == end - start + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == j - i + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == j - i + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for length in range(1, n + 1):\n        for start in range(n - length + 1):\n            substring = s[start:start + length]\n            digit_sum = sum((int(char) for char in substring))\n            if digit_sum == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == j - i + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            length = j - i + 1\n            if digit_sum == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        sum_digits = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            length = j - i + 1\n            if sum_digits == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == j - i + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for start in range(n):\n        current_sum = 0\n        for end in range(start, n):\n            current_sum += int(s[end])\n            length = end - start + 1\n            if current_sum == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == j - i + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        sum_digits = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            if sum_digits == j - i + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for length in range(1, n + 1):\n        for start in range(n - length + 1):\n            substring = s[start:start + length]\n            if sum((int(digit) for digit in substring)) == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        total_sum = 0\n        for j in range(i, n):\n            total_sum += int(s[j])\n            length = j - i + 1\n            if total_sum == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    total_count = 0\n    n = len(s)\n    for i in range(n):\n        sum_digits = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            length = j - i + 1\n            if sum_digits == length:\n                total_count += 1\n    return total_count"], "clusters": [{"programs_str": ["def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for start in range(n):\n        digit_sum = 0\n        for end in range(start, n):\n            digit_sum += int(s[end])\n            length = end - start + 1\n            if digit_sum == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for start in range(n):\n        digit_sum = 0\n        for end in range(start, n):\n            digit_sum += int(s[end])\n            if digit_sum == end - start + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            length = j - i + 1\n            if digit_sum == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        total_sum = 0\n        for j in range(i, n):\n            total_sum += int(s[j])\n            if total_sum == j - i + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            length = j - i + 1\n            if digit_sum == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += int(s[j])\n            if current_sum == j - i + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for start in range(n):\n        sum_digits = 0\n        for end in range(start, n):\n            sum_digits += int(s[end])\n            if sum_digits == end - start + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == j - i + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == j - i + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for length in range(1, n + 1):\n        for start in range(n - length + 1):\n            substring = s[start:start + length]\n            digit_sum = sum((int(char) for char in substring))\n            if digit_sum == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == j - i + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            length = j - i + 1\n            if digit_sum == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        sum_digits = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            length = j - i + 1\n            if sum_digits == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == j - i + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for start in range(n):\n        current_sum = 0\n        for end in range(start, n):\n            current_sum += int(s[end])\n            length = end - start + 1\n            if current_sum == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == j - i + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        sum_digits = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            if sum_digits == j - i + 1:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for length in range(1, n + 1):\n        for start in range(n - length + 1):\n            substring = s[start:start + length]\n            if sum((int(digit) for digit in substring)) == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        total_sum = 0\n        for j in range(i, n):\n            total_sum += int(s[j])\n            length = j - i + 1\n            if total_sum == length:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    total_count = 0\n    n = len(s)\n    for i in range(n):\n        sum_digits = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            length = j - i + 1\n            if sum_digits == length:\n                total_count += 1\n    return total_count"], "outputs": "[[6], [1], [10], [0], [1], [6], [0], [2], [3], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/62", "requirement": "from typing import List\n\n\ndef smallest_num(xs: List[int]) -> int:\n\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"", "llm_generated_inputs": "[[[10, 20, 1, 45, 99]], [[0, -1, -10, 5]], [[-5, -3, -20, -1]], [[100, 200, 300]], [[50]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]], [[-1, 0, 1]], [[-10, 0, 10, -5]], [[]], [[5, 5, 5, 5]]]", "programs": ["from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)"], "clusters": [{"programs_str": ["from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)"], "outputs": "[[1], [-10], [-20], [100], [50], [0], [-1], [-10], ['ValueError'], [5]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/63", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"", "llm_generated_inputs": "[[[(3, 5), (1, 7), (10, 3), (1, 2)]], [[(0, 0), (0, 0), (0, 0)]], [[(1, 1), (2, 2), (3, 3)]], [[(5, 10), (15, 20), (30, 40)]], [[(100, -50), (25, 75), (-100, 100)]], [[(7, 1)]], [[(1, 10), (2, 11), (3, 12), (4, 13)]], [[(2, 5), (5, 2), (2, 5)]], [[(8, 3), (4, 2), (0, 1)]]]", "programs": ["from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = float('-inf')\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = float('-inf')\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = float('-inf')\n    for a, b in test_list:\n        current_diff = abs(a - b)\n        if current_diff > max_diff:\n            max_diff = current_diff\n    return max_diff", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = float('-inf')\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = float('-inf')\n    for x, y in test_list:\n        diff = abs(x - y)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for a, b in test_list:\n        max_diff = max(max_diff, abs(a - b))\n    return max_diff", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = float('-inf')\n    for a, b in test_list:\n        max_diff = max(max_diff, abs(a - b))\n    return max_diff", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = float('-inf')\n    for a, b in test_list:\n        current_diff = abs(a - b)\n        if current_diff > max_diff:\n            max_diff = current_diff\n    return max_diff", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for a, b in test_list:\n        max_diff = max(max_diff, abs(a - b))\n    return max_diff", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for pair in test_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((b - a for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((b - a for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_val = float('-inf')\n    min_val = float('inf')\n    for a, b in test_list:\n        max_val = max(max_val, a, b)\n        min_val = min(min_val, a, b)\n    return max_val - min_val", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_val = max((max(pair) for pair in test_list))\n    min_val = min((min(pair) for pair in test_list))\n    return max_val - min_val", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_val = float('-inf')\n    min_val = float('inf')\n    for pair in test_list:\n        max_val = max(max_val, pair[1])\n        min_val = min(min_val, pair[0])\n    return max_val - min_val"], "clusters": [{"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = float('-inf')\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = float('-inf')\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = float('-inf')\n    for a, b in test_list:\n        current_diff = abs(a - b)\n        if current_diff > max_diff:\n            max_diff = current_diff\n    return max_diff", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = float('-inf')\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = float('-inf')\n    for x, y in test_list:\n        diff = abs(x - y)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for a, b in test_list:\n        max_diff = max(max_diff, abs(a - b))\n    return max_diff", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = float('-inf')\n    for a, b in test_list:\n        max_diff = max(max_diff, abs(a - b))\n    return max_diff", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = float('-inf')\n    for a, b in test_list:\n        current_diff = abs(a - b)\n        if current_diff > max_diff:\n            max_diff = current_diff\n    return max_diff", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for a, b in test_list:\n        max_diff = max(max_diff, abs(a - b))\n    return max_diff", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for pair in test_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"], "outputs": "[[7], [0], [0], [10], [200], [6], [9], [3], [5]]", "probability": 0.75, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((b - a for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((b - a for a, b in test_list))"], "outputs": "[[6], [0], [0], [10], [200], [-6], [9], [3], [1]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[(3, 5), (1, 7), (10, 3), (1, 2)]], [6], [7]]]"}, {"programs_str": ["from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_val = float('-inf')\n    min_val = float('inf')\n    for a, b in test_list:\n        max_val = max(max_val, a, b)\n        min_val = min(min_val, a, b)\n    return max_val - min_val", "from typing import List\nfrom typing import Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_val = max((max(pair) for pair in test_list))\n    min_val = min((min(pair) for pair in test_list))\n    return max_val - min_val"], "outputs": "[[9], [0], [2], [35], [200], [6], [12], [3], [8]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[(3, 5), (1, 7), (10, 3), (1, 2)]], [9], [7]]]"}, {"programs_str": ["from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_val = float('-inf')\n    min_val = float('inf')\n    for pair in test_list:\n        max_val = max(max_val, pair[1])\n        min_val = min(min_val, pair[0])\n    return max_val - min_val"], "outputs": "[[6], [0], [2], [35], [200], [-6], [12], [3], [3]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[(3, 5), (1, 7), (10, 3), (1, 2)]], [6], [7]]]"}]}
{"task_id": "Mbpp/64", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"", "llm_generated_inputs": "[[[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]], [[('Art', 100), ('Literature', 95), ('History', 85), ('PE', 70)]], [[('Biology', 50), ('Chemistry', 60), ('Physics', 40)]], [[('Geography', 90), ('Civics', 90), ('Mathematics', 90)]], [[('History', 100)]], [[('Economics', 70), ('Philosophy', 70), ('Sociology', 70)]], [[('Math', 95), ('Biology', 95), ('Chemistry', 95)]]]", "programs": ["from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])"], "clusters": [{"programs_str": ["from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])"], "outputs": "[[[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]], [[('PE', 70), ('History', 85), ('Literature', 95), ('Art', 100)]], [[('Physics', 40), ('Biology', 50), ('Chemistry', 60)]], [[('Geography', 90), ('Civics', 90), ('Mathematics', 90)]], [[('History', 100)]], [[('Economics', 70), ('Philosophy', 70), ('Sociology', 70)]], [[('Math', 95), ('Biology', 95), ('Chemistry', 95)]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/65", "requirement": "from typing import List\nfrom typing import Union\n\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"", "llm_generated_inputs": "[[[1, 2, [3, 4], [5, 6]]], [[1, [2, [3, [4]]]]], [[[[1, 2], 3], 4]], [[1, 2, 3, 4, 5]], [[[[1]], 2]], [[1, 2, [], [3, [], [4]], 5]], [[[[[]]]]], [[1, [2, [3, 4]], [5, [6, [7]]]]]]", "programs": ["from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total_sum = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        else:\n            total_sum += item\n    return total_sum", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List\nfrom typing import Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, int):\n            total += element\n        elif isinstance(element, list):\n            total += recursive_list_sum(element)\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total_sum = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        else:\n            total_sum += element\n    return total_sum", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total_sum = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        else:\n            total_sum += item\n    return total_sum", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, int):\n            total += item\n        elif isinstance(item, list):\n            total += recursive_list_sum(item)\n    return total"], "clusters": [{"programs_str": ["from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total_sum = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        else:\n            total_sum += item\n    return total_sum", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List\nfrom typing import Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, int):\n            total += element\n        elif isinstance(element, list):\n            total += recursive_list_sum(element)\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total_sum = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        else:\n            total_sum += element\n    return total_sum", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total_sum = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        else:\n            total_sum += item\n    return total_sum", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, int):\n            total += item\n        elif isinstance(item, list):\n            total += recursive_list_sum(item)\n    return total"], "outputs": "[[21], [10], [10], [15], [3], [15], [0], [28]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/66", "requirement": "from typing import List\n\n\ndef pos_count(l: List[int]) -> int:\n\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"", "llm_generated_inputs": "[[[1, -2, 3, -4]], [[0, 2, 5, -1, -3]], [[]], [[-1, -2, -3]], [[3, 1, 4, 1, 5]], [[10, -10, 20, 0, 30]], [[7]], [[5, 5, 5]], [[-5, -5, 0]]]", "programs": ["from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for number in l if number > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))"], "clusters": [{"programs_str": ["from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for number in l if number > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))"], "outputs": "[[2], [2], [0], [0], [5], [3], [1], [3], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/67", "requirement": "def bell_number(n: int) -> int:\n\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [3], [4], [5], [10], [15], [20]]", "programs": ["def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n == 0:\n        return 1\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n == 0:\n        return 1\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n == 0:\n        return 1\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n == 0:\n        return 1\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]"], "clusters": [{"programs_str": ["def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n == 0:\n        return 1\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n == 0:\n        return 1\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n == 0:\n        return 1\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n == 0:\n        return 1\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]"], "outputs": "[[1], [1], [2], [5], [15], [52], [115975], [1382958545], [51724158235372]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/68", "requirement": "from typing import List\n\n\ndef is_Monotonic(arr: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 2, 3]], [[6, 5, 4, 4]], [[1, 3, 2]], [[1, 1, 1]], [[-1, -2, -3, -4]], [[5, 5, 5, 5, 5]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[2, 2, 3, 3, 3, 2]], [[1]], [[3, 3, 2, 1]]]", "programs": ["from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = True\n    decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = all((arr[i] <= arr[i + 1] for i in range(len(arr) - 1)))\n    decreasing = all((arr[i] >= arr[i + 1] for i in range(len(arr) - 1)))\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = all((arr[i] <= arr[i + 1] for i in range(len(arr) - 1)))\n    decreasing = all((arr[i] >= arr[i + 1] for i in range(len(arr) - 1)))\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing"], "clusters": [{"programs_str": ["from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = True\n    decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = all((arr[i] <= arr[i + 1] for i in range(len(arr) - 1)))\n    decreasing = all((arr[i] >= arr[i + 1] for i in range(len(arr) - 1)))\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = all((arr[i] <= arr[i + 1] for i in range(len(arr) - 1)))\n    decreasing = all((arr[i] >= arr[i + 1] for i in range(len(arr) - 1)))\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing"], "outputs": "[[True], [True], [False], [True], [True], [True], [True], [True], [False], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/69", "requirement": "from typing import List\n\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"", "llm_generated_inputs": "[[[2, 4, 3, 5, 7], [3, 7]], [[1, 2, 3, 4, 5], [2, 3]], [[1, 2, 3], [1, 2, 3]], [[1, 2, 3, 4, 5], [6]], [[], [1, 2]], [[1, 2, 3, 4, 5], []], [[1, 1, 1, 1], [1, 1]], [[7, 8, 9, 10], [10]], [[2, 3, 4, 5, 6], [5, 6, 7]], [[5, 5, 5, 5], [5, 5, 5]]]", "programs": ["from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    n, m = (len(l), len(s))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    len_l = len(l)\n    len_s = len(s)\n    if len_s == 0:\n        return True\n    if len_l < len_s:\n        return False\n    for i in range(len_l - len_s + 1):\n        if l[i:i + len_s] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if len(s) == 0:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    n, m = (len(l), len(s))\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    len_l = len(l)\n    len_s = len(s)\n    if len_s == 0:\n        return True\n    if len_l < len_s:\n        return False\n    for i in range(len_l - len_s + 1):\n        if l[i:i + len_s] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    n, m = (len(l), len(s))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    n, m = (len(l), len(s))\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    n, m = (len(l), len(s))\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    n, m = (len(l), len(s))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    n, m = (len(l), len(s))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    s_length = len(s)\n    if s_length == 0:\n        return True\n    if len(l) < s_length:\n        return False\n    for i in range(len(l) - s_length + 1):\n        if l[i:i + s_length] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    s_len = len(s)\n    l_len = len(l)\n    for i in range(l_len - s_len + 1):\n        if l[i:i + s_len] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    n, m = (len(l), len(s))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    n, m = (len(l), len(s))\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    n, m = (len(l), len(s))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    s_len = len(s)\n    l_len = len(l)\n    if s_len == 0:\n        return True\n    if s_len > l_len:\n        return False\n    for i in range(l_len - s_len + 1):\n        if l[i:i + s_len] == s:\n            return True\n    return False"], "clusters": [{"programs_str": ["from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    n, m = (len(l), len(s))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    len_l = len(l)\n    len_s = len(s)\n    if len_s == 0:\n        return True\n    if len_l < len_s:\n        return False\n    for i in range(len_l - len_s + 1):\n        if l[i:i + len_s] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if len(s) == 0:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    n, m = (len(l), len(s))\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    len_l = len(l)\n    len_s = len(s)\n    if len_s == 0:\n        return True\n    if len_l < len_s:\n        return False\n    for i in range(len_l - len_s + 1):\n        if l[i:i + len_s] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    n, m = (len(l), len(s))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    n, m = (len(l), len(s))\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    n, m = (len(l), len(s))\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    n, m = (len(l), len(s))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    n, m = (len(l), len(s))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    s_length = len(s)\n    if s_length == 0:\n        return True\n    if len(l) < s_length:\n        return False\n    for i in range(len(l) - s_length + 1):\n        if l[i:i + s_length] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    s_len = len(s)\n    l_len = len(l)\n    for i in range(l_len - s_len + 1):\n        if l[i:i + s_len] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    n, m = (len(l), len(s))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    n, m = (len(l), len(s))\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    n, m = (len(l), len(s))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    s_len = len(s)\n    l_len = len(l)\n    if s_len == 0:\n        return True\n    if s_len > l_len:\n        return False\n    for i in range(l_len - s_len + 1):\n        if l[i:i + s_len] == s:\n            return True\n    return False"], "outputs": "[[False], [True], [True], [False], [False], [True], [True], [True], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/70", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef get_equal(Input: List[Tuple]) -> bool:\n\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"", "llm_generated_inputs": "[[[(11, 22, 33), (44, 55, 66)]], [[(1, 2), (3, 4), (5, 6)]], [[(1, 2, 3), (4, 5, 6), (7, 8, 9)]], [[(1, 2), (3, 4), (5, 6, 7)]], [[(1,), (2,), (3,)]], [[(11, 22), (44, 55), (66, 77)]], [[(1, 2, 3), (4, 5)]], [[(100, 200, 300, 400), (500, 600, 700, 800)]], [[(9, 8, 7, 6), (5, 4, 3, 2), (1, 0, -1, -2)]], [[(True, False), (False, True), (True, True)]]]", "programs": ["from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(t) == length for t in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(tup) == length for tup in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(t) == length for t in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    return all((len(tup) == first_length for tup in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(tup) == length for tup in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(tup) == length for tup in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(tup) == length for tup in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(tup) == length for tup in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(t) == length for t in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    return all((len(tup) == first_length for tup in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(t) == length for t in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(tup) == length for tup in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(t) == length for t in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(t) == length for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(t) == length for t in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))"], "clusters": [{"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(t) == length for t in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(tup) == length for tup in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(t) == length for t in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    return all((len(tup) == first_length for tup in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(tup) == length for tup in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(tup) == length for tup in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(tup) == length for tup in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(tup) == length for tup in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(t) == length for t in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    return all((len(tup) == first_length for tup in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(t) == length for t in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(tup) == length for tup in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(t) == length for t in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(t) == length for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all((len(t) == length for t in Input))", "from typing import List\nfrom typing import Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    return all((len(t) == len(Input[0]) for t in Input))"], "outputs": "[[True], [True], [True], [False], [True], [True], [False], [True], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/71", "requirement": "from typing import List\n\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"", "llm_generated_inputs": "[[[5, 15, 37, 25, 79]], [[10, 1, 3, 2, 4]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[-1, 0, 1, -5, 5]], [[1000, 2, 50, 0, -200]], [[7, 8, 5, 5, 7, 9, 10]], [[1]], [[]]]", "programs": ["from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    gap = len(nums)\n    sorted = False\n    while not sorted:\n        gap = get_gap(gap)\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    sorted = False\n    while not sorted:\n        gap = get_gap(gap)\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = max(1, int(gap / shrink))\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = max(1, int(gap / shrink))\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_next_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    sorted = False\n    while not sorted:\n        gap = get_next_gap(gap)\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_next_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    sorted = False\n    while not sorted:\n        gap = get_next_gap(gap)\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_next_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    sorted = False\n    while not sorted:\n        gap = get_next_gap(gap)\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    sorted = False\n    while not sorted:\n        gap = get_gap(gap)\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = max(1, int(gap / shrink))\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap != 1 or swapped:\n        gap = get_gap(gap)\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap != 1 or swapped:\n        gap = get_gap(gap)\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap != 1 or swapped:\n        gap = get_gap(gap)\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_next_gap(gap):\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = get_gap(gap)\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums"], "clusters": [{"programs_str": ["from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    gap = len(nums)\n    sorted = False\n    while not sorted:\n        gap = get_gap(gap)\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    sorted = False\n    while not sorted:\n        gap = get_gap(gap)\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = max(1, int(gap / shrink))\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = max(1, int(gap / shrink))\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_next_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    sorted = False\n    while not sorted:\n        gap = get_next_gap(gap)\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_next_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    sorted = False\n    while not sorted:\n        gap = get_next_gap(gap)\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_next_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    sorted = False\n    while not sorted:\n        gap = get_next_gap(gap)\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    sorted = False\n    while not sorted:\n        gap = get_gap(gap)\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = max(1, int(gap / shrink))\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums"], "outputs": "[[[5, 15, 37, 25, 79]], [[2, 1, 3, 10, 4]], [[1, 2, 3, 4, 5]], [[2, 1, 3, 5, 4]], [[-5, -1, 0, 1, 5]], [[-200, 0, 2, 50, 1000]], [[7, 8, 5, 5, 7, 9, 10]], [[1]], [[]]]", "probability": 0.75, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[5, 15, 37, 25, 79]], [[5, 15, 37, 25, 79]], [[5, 15, 25, 37, 79]]]]"}, {"programs_str": ["from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap != 1 or swapped:\n        gap = get_gap(gap)\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap != 1 or swapped:\n        gap = get_gap(gap)\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap != 1 or swapped:\n        gap = get_gap(gap)\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_next_gap(gap):\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = get_gap(gap)\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums"], "outputs": "[[[5, 15, 25, 37, 79]], [[1, 2, 3, 4, 10]], [[1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5]], [[-5, -1, 0, 1, 5]], [[-200, 0, 2, 50, 1000]], [[5, 5, 7, 7, 8, 9, 10]], [[1]], [[]]]", "probability": 0.25, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/72", "requirement": "def dif_Square(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [4], [5], [6], [8], [9], [10], [15], [16], [25], [0], [-1], [-16]]", "programs": ["def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n >= 0 and n % 4 != 2", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n > 0"], "clusters": [{"programs_str": ["def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 4 == 0 or n % 4 == 1"], "outputs": "[[True], [False], [False], [True], [True], [False], [True], [True], [False], [False], [True], [True], [True], [False], [True]]", "probability": 0.85, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def dif_Square(n: int) -> bool:\n    return n >= 0 and n % 4 != 2"], "outputs": "[[True], [False], [True], [True], [True], [False], [True], [True], [False], [True], [True], [True], [True], [False], [False]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0"], "outputs": "[[True], [False], [True], [True], [True], [False], [True], [True], [False], [True], [True], [True], [True], [True], [True]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n > 0"], "outputs": "[[True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [False], [True]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/74", "requirement": "from typing import List\n\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"", "llm_generated_inputs": "[[['red', 'green', 'green'], ['a', 'b', 'b']], [['blue', 'blue', 'red'], ['x', 'x', 'y']], [['yellow', 'yellow', 'yellow'], ['c', 'c', 'c']], [['orange', 'purple'], ['m', 'n']], [['black', 'white', 'black', 'white'], ['1', '2', '1', '2']], [['red', 'green', 'blue'], ['a', 'b', 'c']], [[], []], [['green'], ['a']], [['red'], ['a', 'b']]]", "programs": ["from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True"], "clusters": [{"programs_str": ["from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True"], "outputs": "[[True], [True], [True], [True], [True], [True], [True], [True], [False]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True"], "outputs": "[[True], [True], [True], [True], [True], [True], [True], [True], [True]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/75", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"", "llm_generated_inputs": "[[[(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6], [[(5, 10, 15), (2, 4, 6), (3, 5, 7)], 5], [[(1, 2, 3), (4, 5, 6), (7, 8, 9)], 10], [[], 1], [[(3, 6, 9), (2, 4, 8)], 3], [[(10, 20), (21, 22)], 10], [[(11, 22, 33), (0, 0, 0)], 11], [[(10,), (20,), (30,)], 5], [[(7, 14), (8, 16)], 2], [[(9, 3, 6), (11, 22, 33)], 3]]", "programs": ["from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((x % K == 0 for x in tup))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((x % K == 0 for x in tup))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((elem % K == 0 for elem in tup))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((elem % K == 0 for elem in tup))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((elem % K == 0 for elem in tup))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((elem % K == 0 for elem in tup))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((elem % K == 0 for elem in tup))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tpl for tpl in test_list if all((x % K == 0 for x in tpl))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((x % K == 0 for x in tup))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((elem % K == 0 for elem in tup))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]"], "clusters": [{"programs_str": ["from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((x % K == 0 for x in tup))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((x % K == 0 for x in tup))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((elem % K == 0 for elem in tup))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((elem % K == 0 for elem in tup))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((elem % K == 0 for elem in tup))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((elem % K == 0 for elem in tup))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((elem % K == 0 for elem in tup))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tpl for tpl in test_list if all((x % K == 0 for x in tpl))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((x % K == 0 for x in tup))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((elem % K == 0 for elem in tup))]", "from typing import List\nfrom typing import Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]"], "outputs": "[[[(6, 24, 12)]], [[(5, 10, 15)]], [[]], [[]], [[(3, 6, 9)]], [[(10, 20)]], [[(11, 22, 33), (0, 0, 0)]], [[(10,), (20,), (30,)]], [[(8, 16)]], [[(9, 3, 6)]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/77", "requirement": "def is_Diff(n: int) -> bool:\n\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"", "llm_generated_inputs": "[[0], [11], [22], [10], [12345], [-11], [-22], [102], [1001], [121]]", "programs": ["def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0"], "clusters": [{"programs_str": ["def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0"], "outputs": "[[True], [True], [True], [False], [False], [True], [True], [False], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/79", "requirement": "def word_len(s: str) -> bool:\n\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"", "llm_generated_inputs": "[['Hadoop'], ['Python'], ['AI'], ['Data'], [''], ['a'], ['ab'], ['abcdefgh']]", "programs": ["def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1"], "clusters": [{"programs_str": ["def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1", "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1"], "outputs": "[[False], [False], [False], [False], [False], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/80", "requirement": "def tetrahedral_number(n: int) -> float:\n\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [4], [5], [0], [-1], [10], [20], [100]]", "programs": ["def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6"], "clusters": [{"programs_str": ["def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6"], "outputs": "[[1.0], [4.0], [10.0], [20.0], [35.0], [0.0], [0.0], [220.0], [1540.0], [171700.0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/82", "requirement": "def volume_sphere(r: float) -> float:\n\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"", "llm_generated_inputs": "[[0], [1], [5], [10], [100], [2.5], [3.14159], [10.5], [-1]]", "programs": ["import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3"], "clusters": [{"programs_str": ["import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3"], "outputs": "[[0.0], [4.1887902047863905], [523.5987755982989], [4188.790204786391], [4188790.2047863905], [65.44984694978736], [129.87845893385725], [4849.048260815845], [-4.1887902047863905]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/84", "requirement": "def sequence(n: int) -> int:\n\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [15], [20], [0], [-1]]", "programs": ["def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    newman_conway = [0] * (n + 1)\n    newman_conway[1] = 1\n    newman_conway[2] = 1\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise ValueError('n must be a positive integer.')\n    if n == 1 or n == 2:\n        return 1\n    newman_conway = [0] * (n + 1)\n    newman_conway[1] = newman_conway[2] = 1\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer.')\n    elif n == 1 or n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    arr = [0] * (n + 1)\n    arr[1], arr[2], arr[3] = (1, 1, 2)\n    for i in range(4, n + 1):\n        arr[i] = arr[arr[i - 1]] + arr[i - arr[i - 1]]\n    return arr[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    conway = [0] * (n + 1)\n    conway[1], conway[2] = (1, 1)\n    for i in range(3, n + 1):\n        conway[i] = conway[conway[i - 1]] + conway[i - conway[i - 1]]\n    return conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    seq = [0, 1, 1]\n    for i in range(3, n + 1):\n        next_value = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n        seq.append(next_value)\n    return seq[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    if n == 1 or n == 2:\n        return 1\n    newman_conway = [0] * (n + 1)\n    newman_conway[1], newman_conway[2] = (1, 1)\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    if n == 1 or n == 2:\n        return 1\n    newman_conway = [0] * (n + 1)\n    newman_conway[1] = 1\n    newman_conway[2] = 1\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    if n == 1 or n == 2:\n        return 1\n    newman_conway = [0] * (n + 1)\n    newman_conway[1], newman_conway[2] = (1, 1)\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    newman_conway = [0] * (n + 1)\n    newman_conway[1] = 1\n    if n > 1:\n        newman_conway[2] = 1\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer.')\n    if n == 1 or n == 2:\n        return 1\n    else:\n        newman_conway = [0] * (n + 1)\n        newman_conway[1], newman_conway[2] = (1, 1)\n        for i in range(3, n + 1):\n            newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n        return newman_conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer.')\n    if n == 1 or n == 2:\n        return 1\n    newman_conway = [0] * (n + 1)\n    newman_conway[1], newman_conway[2] = (1, 1)\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    newman_conway = [0] * (n + 1)\n    newman_conway[1] = 1\n    if n > 1:\n        newman_conway[2] = 1\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    if n <= 2:\n        return 1\n    result = [0] * (n + 1)\n    result[1] = result[2] = 1\n    for i in range(3, n + 1):\n        result[i] = result[result[i - 1]] + result[i - result[i - 1]]\n    return result[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        return 0\n    if n <= 3:\n        return n\n    arr = [0] * (n + 1)\n    arr[1], arr[2], arr[3] = (1, 2, 3)\n    for i in range(4, n + 1):\n        arr[i] = arr[arr[i - 1]] + arr[i - arr[i - 1]]\n    return arr[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    if n <= 2:\n        return n\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 2)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('Input must be a positive integer')\n    if n <= 2:\n        return n\n    conway_sequence = [0] * (n + 1)\n    conway_sequence[1], conway_sequence[2] = (1, 2)\n    for i in range(3, n + 1):\n        conway_sequence[i] = conway_sequence[conway_sequence[i - 1]] + conway_sequence[i - conway_sequence[i - 1]]\n    return conway_sequence[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    newman_conway = [0] * (n + 1)\n    newman_conway[1] = 1\n    for i in range(2, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    if n == 1 or n == 2:\n        return n\n    newman_conway = [0] * (n + 1)\n    newman_conway[1] = 1\n    newman_conway[2] = 2\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    p = [0] * (n + 1)\n    p[1], p[2] = (1, 1)\n    for i in range(3, n + 1):\n        p[i] = p[p[i - 1]] + p[i - p[i - 1]]\n    return p[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        return 0\n    seq = [0] * (n + 1)\n    seq[1] = 1\n    if n > 1:\n        seq[2] = 1\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]"], "clusters": [{"programs_str": ["def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    newman_conway = [0] * (n + 1)\n    newman_conway[1] = 1\n    newman_conway[2] = 1\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise ValueError('n must be a positive integer.')\n    if n == 1 or n == 2:\n        return 1\n    newman_conway = [0] * (n + 1)\n    newman_conway[1] = newman_conway[2] = 1\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer.')\n    elif n == 1 or n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    arr = [0] * (n + 1)\n    arr[1], arr[2], arr[3] = (1, 1, 2)\n    for i in range(4, n + 1):\n        arr[i] = arr[arr[i - 1]] + arr[i - arr[i - 1]]\n    return arr[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    conway = [0] * (n + 1)\n    conway[1], conway[2] = (1, 1)\n    for i in range(3, n + 1):\n        conway[i] = conway[conway[i - 1]] + conway[i - conway[i - 1]]\n    return conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    seq = [0, 1, 1]\n    for i in range(3, n + 1):\n        next_value = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n        seq.append(next_value)\n    return seq[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    if n == 1 or n == 2:\n        return 1\n    newman_conway = [0] * (n + 1)\n    newman_conway[1], newman_conway[2] = (1, 1)\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    if n == 1 or n == 2:\n        return 1\n    newman_conway = [0] * (n + 1)\n    newman_conway[1] = 1\n    newman_conway[2] = 1\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    if n == 1 or n == 2:\n        return 1\n    newman_conway = [0] * (n + 1)\n    newman_conway[1], newman_conway[2] = (1, 1)\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    newman_conway = [0] * (n + 1)\n    newman_conway[1] = 1\n    if n > 1:\n        newman_conway[2] = 1\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer.')\n    if n == 1 or n == 2:\n        return 1\n    else:\n        newman_conway = [0] * (n + 1)\n        newman_conway[1], newman_conway[2] = (1, 1)\n        for i in range(3, n + 1):\n            newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n        return newman_conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer.')\n    if n == 1 or n == 2:\n        return 1\n    newman_conway = [0] * (n + 1)\n    newman_conway[1], newman_conway[2] = (1, 1)\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    newman_conway = [0] * (n + 1)\n    newman_conway[1] = 1\n    if n > 1:\n        newman_conway[2] = 1\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    if n <= 2:\n        return 1\n    result = [0] * (n + 1)\n    result[1] = result[2] = 1\n    for i in range(3, n + 1):\n        result[i] = result[result[i - 1]] + result[i - result[i - 1]]\n    return result[n]"], "outputs": "[[1], [1], [2], [2], [3], [4], [4], [4], [5], [6], [7], [7], [8], [12], ['ValueError'], ['ValueError']]", "probability": 0.65, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def sequence(n: int) -> int:\n    if n < 1:\n        return 0\n    if n <= 3:\n        return n\n    arr = [0] * (n + 1)\n    arr[1], arr[2], arr[3] = (1, 2, 3)\n    for i in range(4, n + 1):\n        arr[i] = arr[arr[i - 1]] + arr[i - arr[i - 1]]\n    return arr[n]"], "outputs": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [15], [20], [0], [0]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [10], [6]]]"}, {"programs_str": ["def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    if n <= 2:\n        return n\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 2)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('Input must be a positive integer')\n    if n <= 2:\n        return n\n    conway_sequence = [0] * (n + 1)\n    conway_sequence[1], conway_sequence[2] = (1, 2)\n    for i in range(3, n + 1):\n        conway_sequence[i] = conway_sequence[conway_sequence[i - 1]] + conway_sequence[i - conway_sequence[i - 1]]\n    return conway_sequence[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    newman_conway = [0] * (n + 1)\n    newman_conway[1] = 1\n    for i in range(2, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    if n == 1 or n == 2:\n        return n\n    newman_conway = [0] * (n + 1)\n    newman_conway[1] = 1\n    newman_conway[2] = 2\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]"], "outputs": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [15], [20], ['ValueError'], ['ValueError']]", "probability": 0.2, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [10], [6]]]"}, {"programs_str": ["def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    p = [0] * (n + 1)\n    p[1], p[2] = (1, 1)\n    for i in range(3, n + 1):\n        p[i] = p[p[i - 1]] + p[i - p[i - 1]]\n    return p[n]"], "outputs": "[['IndexError'], [1], [2], [2], [3], [4], [4], [4], [5], [6], [7], [7], [8], [12], ['ValueError'], ['ValueError']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def sequence(n: int) -> int:\n    if n < 1:\n        return 0\n    seq = [0] * (n + 1)\n    seq[1] = 1\n    if n > 1:\n        seq[2] = 1\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]"], "outputs": "[[1], [1], [2], [2], [3], [4], [4], [4], [5], [6], [7], [7], [8], [12], [0], [0]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/85", "requirement": "def surfacearea_sphere(r: float) -> float:\n\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"", "llm_generated_inputs": "[[0], [1], [10], [5.5], [100], [-1], [3.14159], [1000000.0]]", "programs": ["import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2"], "clusters": [{"programs_str": ["import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2"], "outputs": "[[0.0], [12.566370614359172], [1256.6370614359173], [380.132711084365], [125663.70614359173], [12.566370614359172], [124.02489720223573], [12566370614359.172]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/86", "requirement": "def centered_hexagonal_number(n: int) -> int:\n\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [10], [0], [-1], [100], [50], [1000], [5]]", "programs": ["def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 1) // 2", "def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 1) // 2", "def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 1) // 2", "def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 2) // 2", "def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 2) // 2", "def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 2) // 2", "def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 2) // 2", "def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 2) // 2", "def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 2)", "def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 2)", "def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 2)", "def centered_hexagonal_number(n: int) -> int:\n    return n * (2 * n - 1)"], "clusters": [{"programs_str": ["def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1"], "outputs": "[[1], [7], [19], [271], [1], [7], [29701], [7351], [2997001], [61]]", "probability": 0.4, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 1) // 2", "def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 1) // 2", "def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 1) // 2"], "outputs": "[[1], [5], [12], [145], [0], [2], [14950], [3725], [1499500], [35]]", "probability": 0.15, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [145], [271]]]"}, {"programs_str": ["def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 2) // 2", "def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 2) // 2", "def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 2) // 2", "def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 2) // 2", "def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 2) // 2"], "outputs": "[[0], [4], [10], [140], [0], [2], [14900], [3700], [1499000], [32]]", "probability": 0.25, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [140], [271]]]"}, {"programs_str": ["def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 2)", "def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 2)", "def centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 2)"], "outputs": "[[1], [8], [21], [280], [0], [5], [29800], [7400], [2998000], [65]]", "probability": 0.15, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [280], [271]]]"}, {"programs_str": ["def centered_hexagonal_number(n: int) -> int:\n    return n * (2 * n - 1)"], "outputs": "[[1], [6], [15], [190], [0], [3], [19900], [4950], [1999000], [45]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [190], [271]]]"}]}
{"task_id": "Mbpp/87", "requirement": "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"", "llm_generated_inputs": "[[{'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'d': 5}], [{}, {}, {'x': 10}], [{'key1': 'value1'}, {'key2': 'value2'}, {'key3': 'value3'}], [{'duplicate': 1}, {'duplicate': 2}, {'duplicate': 3}], [{'single': 'only'}, {'empty': {}}, {}], [{'num': 42}, {'str': 'answer'}, {'bool': True}]]", "programs": ["def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged = {**dict1, **dict2, **dict3}\n    return merged", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged = {**dict1, **dict2, **dict3}\n    return merged", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"], "clusters": [{"programs_str": ["def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged = {**dict1, **dict2, **dict3}\n    return merged", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged = {**dict1, **dict2, **dict3}\n    return merged", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"], "outputs": "[[{'a': 1, 'b': 3, 'c': 4, 'd': 5}], [{'x': 10}], [{'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}], [{'duplicate': 3}], [{'single': 'only', 'empty': {}}], [{'num': 42, 'str': 'answer', 'bool': True}]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/88", "requirement": "from typing import List\nfrom typing import Dict\n\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"", "llm_generated_inputs": "[[[10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]], [['apple', 'banana', 'apple', 'orange', 'banana', 'banana']], [[1, 2, 2, 3, 4, 4, 4, 5, 5]], [[True, False, True, True, False]], [([],)], [[None, None, None, 'text', None]], [[0, 0, 0, 0, 0, 0, 1]], [['a', 'b', 'a', 1, 1, 1, 'b', 'b', 'b']]]", "programs": ["from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency_dict = {}\n    for item in list1:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        frequency[item] = frequency.get(item, 0) + 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"], "clusters": [{"programs_str": ["from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency_dict = {}\n    for item in list1:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        frequency[item] = frequency.get(item, 0) + 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"], "outputs": "[[{10: 4, 20: 4, 40: 2, 50: 2, 30: 1}], [{'apple': 2, 'banana': 3, 'orange': 1}], [{1: 1, 2: 2, 3: 1, 4: 3, 5: 2}], [{True: 3, False: 2}], ['TypeError'], [{None: 4, 'text': 1}], [{0: 6, 1: 1}], [{'a': 2, 'b': 4, 1: 3}]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/89", "requirement": "def closest_num(N: int) -> int:\n\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"", "llm_generated_inputs": "[[11], [10], [1], [0], [-5], [-1], [100], [15]]", "programs": ["def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1 if N > 0 else None", "def closest_num(N: int) -> int:\n    return N - 1 if N > 0 else None"], "clusters": [{"programs_str": ["def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1"], "outputs": "[[10], [9], [0], [-1], [-6], [-2], [99], [14]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def closest_num(N: int) -> int:\n    return N - 1 if N > 0 else None", "def closest_num(N: int) -> int:\n    return N - 1 if N > 0 else None"], "outputs": "[[10], [9], [0], [None], [None], [None], [99], [14]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/90", "requirement": "from typing import List\n\n\ndef len_log(list1: List[str]) -> int:\n\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"", "llm_generated_inputs": "[[['python', 'PHP', 'bigdata']], [['short', 'longer', 'longestword']], [['a', 'ab', 'abc', 'abcd']], [['word', 'anotherword', 'aword']], [['', 'empty', '']], [['single']], [['space at end ', 'middle space', ' end ']], [['123', '4567', '89']]]", "programs": ["from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))"], "clusters": [{"programs_str": ["from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))"], "outputs": "[[7], [11], [4], [11], [5], [6], [13], [4]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/91", "requirement": "from typing import List\n\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"", "llm_generated_inputs": "[[['red', 'black', 'white', 'green', 'orange'], 'ack'], [['apple', 'banana', 'berry'], 'banana'], [['hello', 'world'], 'lo'], [['abc', 'def', 'ghi'], 'xyz'], [['quick', 'brown', 'fox'], 'brown'], [['a', 'b', 'c'], 'd'], [['testing', 'one', 'two', 'three'], 'one'], [[], 'test'], [['one', 'two', 'three'], ''], [['case', 'sensitivity', 'is', 'important'], 'sensitivity']]", "programs": ["from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))"], "clusters": [{"programs_str": ["from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))"], "outputs": "[[True], [True], [True], [False], [True], [False], [True], [False], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/92", "requirement": "def is_undulating(n: int) -> bool:\n\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"", "llm_generated_inputs": "[[1212121], [123456], [112233], [111222], [121211], [0], [9], [12321], [121], [222]]", "programs": ["def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    for i in range(1, len(num_str)):\n        if num_str[i] == num_str[i - 1]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    return all((num_str[i] != num_str[i + 1] for i in range(len(num_str) - 1)))", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    return all((s[i] != s[i + 1] for i in range(len(s) - 1)))", "def is_undulating(n: int) -> bool:\n    n_str = str(n)\n    for i in range(1, len(n_str)):\n        if n_str[i] == n_str[i - 1]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    return all((s[i] != s[i + 1] for i in range(len(s) - 1)))", "def is_undulating(n: int) -> bool:\n    n_str = str(n)\n    return all((n_str[i] != n_str[i + 1] for i in range(len(n_str) - 1)))", "def is_undulating(n: int) -> bool:\n    n_str = str(n)\n    return all((n_str[i] != n_str[i + 1] for i in range(len(n_str) - 1)))", "def is_undulating(n: int) -> bool:\n    n_str = str(n)\n    return all((n_str[i] != n_str[i + 1] for i in range(len(n_str) - 1)))", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    return all((s[i] != s[i + 1] for i in range(len(s) - 1)))", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    return all((s[i] != s[i + 1] for i in range(len(s) - 1)))", "def is_undulating(n: int) -> bool:\n    n_str = str(n)\n    for i in range(1, len(n_str)):\n        if n_str[i] == n_str[i - 1]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    digits = str(n)\n    for i in range(len(digits) - 1):\n        if digits[i] == digits[i + 1]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    return all((abs(int(s[i]) - int(s[i + 1])) == 1 for i in range(len(s) - 1)))", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    return all((s[i] != s[i + 1] for i in range(len(s) - 1)))", "def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    return all((num_str[i] != num_str[i + 1] for i in range(len(num_str) - 1)))", "def is_undulating(n: int) -> bool:\n    n_str = str(n)\n    return all((n_str[i] != n_str[i + 1] for i in range(len(n_str) - 1)))", "def is_undulating(n: int) -> bool:\n    n_str = str(n)\n    return all((n_str[i] != n_str[i + 1] for i in range(len(n_str) - 1)))", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    return all((s[i] != s[i + 1] for i in range(len(s) - 1)))", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    return all((s[i] != s[i + 1] for i in range(len(s) - 1)))", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    return all((s[i] != s[i + 1] for i in range(len(s) - 1)))"], "clusters": [{"programs_str": ["def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    for i in range(1, len(num_str)):\n        if num_str[i] == num_str[i - 1]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    return all((num_str[i] != num_str[i + 1] for i in range(len(num_str) - 1)))", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    return all((s[i] != s[i + 1] for i in range(len(s) - 1)))", "def is_undulating(n: int) -> bool:\n    n_str = str(n)\n    for i in range(1, len(n_str)):\n        if n_str[i] == n_str[i - 1]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    return all((s[i] != s[i + 1] for i in range(len(s) - 1)))", "def is_undulating(n: int) -> bool:\n    n_str = str(n)\n    return all((n_str[i] != n_str[i + 1] for i in range(len(n_str) - 1)))", "def is_undulating(n: int) -> bool:\n    n_str = str(n)\n    return all((n_str[i] != n_str[i + 1] for i in range(len(n_str) - 1)))", "def is_undulating(n: int) -> bool:\n    n_str = str(n)\n    return all((n_str[i] != n_str[i + 1] for i in range(len(n_str) - 1)))", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    return all((s[i] != s[i + 1] for i in range(len(s) - 1)))", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    return all((s[i] != s[i + 1] for i in range(len(s) - 1)))", "def is_undulating(n: int) -> bool:\n    n_str = str(n)\n    for i in range(1, len(n_str)):\n        if n_str[i] == n_str[i - 1]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    digits = str(n)\n    for i in range(len(digits) - 1):\n        if digits[i] == digits[i + 1]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    return all((abs(int(s[i]) - int(s[i + 1])) == 1 for i in range(len(s) - 1)))", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    return all((s[i] != s[i + 1] for i in range(len(s) - 1)))", "def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    return all((num_str[i] != num_str[i + 1] for i in range(len(num_str) - 1)))", "def is_undulating(n: int) -> bool:\n    n_str = str(n)\n    return all((n_str[i] != n_str[i + 1] for i in range(len(n_str) - 1)))", "def is_undulating(n: int) -> bool:\n    n_str = str(n)\n    return all((n_str[i] != n_str[i + 1] for i in range(len(n_str) - 1)))", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    return all((s[i] != s[i + 1] for i in range(len(s) - 1)))", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    return all((s[i] != s[i + 1] for i in range(len(s) - 1)))", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    return all((s[i] != s[i + 1] for i in range(len(s) - 1)))"], "outputs": "[[True], [True], [False], [False], [False], [True], [True], [True], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/93", "requirement": "def power(a: int, b: int) -> int:\n\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"", "llm_generated_inputs": "[[2, 3], [5, 0], [0, 5], [0, 0], [-2, 3], [2, -2], [3, 4], [1, 100], [10, 1], [2, 10]]", "programs": ["def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b"], "clusters": [{"programs_str": ["def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b"], "outputs": "[[8], [1], [0], [1], [-8], [0.25], [81], [1], [10], [1024]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/94", "requirement": "from typing import List\n\n\ndef index_minimum(test_list: List[tuple]) -> any:\n\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"", "llm_generated_inputs": "[[[('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]], [[('Alice', 50), ('Bob', 50), ('Charlie', 75)]], [[('John', 200), ('Doe', 150), ('Smith', 150)]], [[('Single', 10)]], [[(1, 5), (2, 3), (3, 4)]], [[('First', 5), ('Second', 10), ('Third', 2)]], [[('High', 1000), ('Medium', 500), ('Low', 1)]]]", "programs": ["from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List, Any\n\ndef index_minimum(test_list: List[tuple]) -> Any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List, Any\n\ndef index_minimum(test_list: List[tuple]) -> Any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List, Any\n\ndef index_minimum(test_list: List[tuple]) -> Any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List, Any\n\ndef index_minimum(test_list: List[tuple]) -> Any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> str:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List, Any\n\ndef index_minimum(test_list: List[tuple]) -> Any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> str:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List, Any\n\ndef index_minimum(test_list: List[tuple]) -> Any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List, any\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]"], "clusters": [{"programs_str": ["from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List, Any\n\ndef index_minimum(test_list: List[tuple]) -> Any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List, Any\n\ndef index_minimum(test_list: List[tuple]) -> Any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List, Any\n\ndef index_minimum(test_list: List[tuple]) -> Any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List, Any\n\ndef index_minimum(test_list: List[tuple]) -> Any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> str:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List, Any\n\ndef index_minimum(test_list: List[tuple]) -> Any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> str:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List, Any\n\ndef index_minimum(test_list: List[tuple]) -> Any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]"], "outputs": "[['Varsha'], ['Alice'], ['Doe'], ['Single'], [2], ['Third'], ['Low']]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, any\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]"], "outputs": "[['ModuleNotFoundError'], ['ModuleNotFoundError'], ['ModuleNotFoundError'], ['ModuleNotFoundError'], ['ModuleNotFoundError'], ['ModuleNotFoundError'], ['ModuleNotFoundError']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]], ['ModuleNotFoundError'], ['Varsha']]]"}]}
{"task_id": "Mbpp/95", "requirement": "from typing import List\n\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"", "llm_generated_inputs": "[[[[1], [2, 3], [4, 5, 6]]], [[[1, 2], [3, 4], [5]]], [[[], [1, 2, 3], [4]]], [[[10, 20], [30, 40, 50], [60]]], [[[1, 2], [3, 4], [5, 6, 7, 8]]], [[[1, 2, 3], [], [4, 5]]], [[[1, 2, 3], ['a', 'b'], [4]]], [[[1, 2, 3], [1, 2, 3], [1, 2, 3]]], [[[1], [1, 2, 3, 4, 5], [1, 2]]], [[[1, 2, 3], ['x', 'y', 'z']]]]", "programs": ["from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(inner) for inner in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sub_lst) for sub_lst in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sub_lst) for sub_lst in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))"], "clusters": [{"programs_str": ["from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(inner) for inner in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sub_lst) for sub_lst in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sub_lst) for sub_lst in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))"], "outputs": "[[1], [1], [0], [1], [2], [0], [1], [3], [1], [3]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/96", "requirement": "def divisor(n: int) -> int:\n\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"", "llm_generated_inputs": "[[1], [2], [10], [15], [28], [100], [-5], [0]]", "programs": ["def divisor(n: int) -> int:\n    return sum((1 for i in range(1, n + 1) if n % i == 0))", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"], "clusters": [{"programs_str": ["def divisor(n: int) -> int:\n    return sum((1 for i in range(1, n + 1) if n % i == 0))", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"], "outputs": "[[1], [2], [4], [4], [6], [9], [0], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/97", "requirement": "from typing import List\nfrom typing import Dict\n\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"", "llm_generated_inputs": "[[[[]]], [[[1, 2, 3], [4, 5, 6]]], [[[1, 2, 2], [3, 3, 4], [5]]], [[[10, 10, 10], [20, 20], [30]]], [[[1]]], [[[1, 1, 1], [1, 1, 1]]], [[[0, -1, -1], [1, 1, 0]]], [[[7, 7], [8], [], [9, 9, 9, 9]]], [[[2, 2], [2, 2], [2, 2], [2, 2]]], [[[1, 2, 3], [1, 2, 3], [1, 2, 3]]]]", "programs": ["from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    frequency = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency", "from typing import List, Dict\nfrom collections import defaultdict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    frequency = defaultdict(int)\n    for sublist in list1:\n        for item in sublist:\n            frequency[item] += 1\n    return dict(frequency)", "from typing import List\nfrom typing import Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flat_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flat_list))", "from typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    frequency = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency", "from typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict", "from typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    frequency = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency", "from typing import List\nfrom typing import Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List\nfrom typing import Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List\nfrom typing import Dict\nfrom collections import defaultdict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    frequency = defaultdict(int)\n    for sublist in list1:\n        for item in sublist:\n            frequency[item] += 1\n    return dict(frequency)", "from typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    frequency = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flat_list = [item for sublist in list1 for item in sublist]\n    frequency = Counter(flat_list)\n    return dict(frequency)", "from typing import List\nfrom typing import Dict\nfrom collections import defaultdict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    frequency = defaultdict(int)\n    for sublist in list1:\n        for item in sublist:\n            frequency[item] += 1\n    return dict(frequency)", "from typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    frequency = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency", "from typing import List\nfrom typing import Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List\nfrom typing import Dict\nfrom collections import defaultdict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    freq_dict = defaultdict(int)\n    for sublist in list1:\n        for item in sublist:\n            freq_dict[item] += 1\n    return dict(freq_dict)", "from typing import List\nfrom typing import Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List\nfrom typing import Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))"], "clusters": [{"programs_str": ["from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    frequency = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency", "from typing import List, Dict\nfrom collections import defaultdict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    frequency = defaultdict(int)\n    for sublist in list1:\n        for item in sublist:\n            frequency[item] += 1\n    return dict(frequency)", "from typing import List\nfrom typing import Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flat_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flat_list))", "from typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    frequency = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency", "from typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict", "from typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    frequency = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency", "from typing import List\nfrom typing import Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List\nfrom typing import Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List\nfrom typing import Dict\nfrom collections import defaultdict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    frequency = defaultdict(int)\n    for sublist in list1:\n        for item in sublist:\n            frequency[item] += 1\n    return dict(frequency)", "from typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    frequency = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flat_list = [item for sublist in list1 for item in sublist]\n    frequency = Counter(flat_list)\n    return dict(frequency)", "from typing import List\nfrom typing import Dict\nfrom collections import defaultdict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    frequency = defaultdict(int)\n    for sublist in list1:\n        for item in sublist:\n            frequency[item] += 1\n    return dict(frequency)", "from typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    frequency = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency", "from typing import List\nfrom typing import Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List\nfrom typing import Dict\nfrom collections import defaultdict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    freq_dict = defaultdict(int)\n    for sublist in list1:\n        for item in sublist:\n            freq_dict[item] += 1\n    return dict(freq_dict)", "from typing import List\nfrom typing import Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List\nfrom typing import Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))"], "outputs": "[[{}], [{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}], [{1: 1, 2: 2, 3: 2, 4: 1, 5: 1}], [{10: 3, 20: 2, 30: 1}], [{1: 1}], [{1: 6}], [{0: 2, -1: 2, 1: 2}], [{7: 2, 8: 1, 9: 4}], [{2: 8}], [{1: 3, 2: 3, 3: 3}]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/98", "requirement": "from typing import List\n\n\ndef multiply_num(numbers: List[int]) -> float:\n\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"", "llm_generated_inputs": "[[[8, 2, 3, -1, 7]], [[1, 2, 3, 4, 5]], [[-1, -2, -3, -4]], [[0, 1, 2, 3]], [[1]], [(0, 0, 0)], [[-1, 0, 1]], [[5, 5, 5, 5, 5]], [[10, 20, 30]], [[-10, -20, 5]]]", "programs": ["from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"], "clusters": [{"programs_str": ["from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"], "outputs": "[[-67.2], [24.0], [6.0], [0.0], [1.0], [0.0], [0.0], [625.0], [2000.0], [333.3333333333333]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/99", "requirement": "def decimal_to_binary(n: int) -> str:\n\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [5], [10], [255], [1024], [-5], [100], [1023]]", "programs": ["def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = []\n    while n > 0:\n        binary.append(str(n % 2))\n        n //= 2\n    return ''.join(reversed(binary))", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary_representation = []\n    while n > 0:\n        binary_representation.append(str(n % 2))\n        n //= 2\n    return ''.join(reversed(binary_representation))", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:] if n > 0 else '0'"], "clusters": [{"programs_str": ["def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = []\n    while n > 0:\n        binary.append(str(n % 2))\n        n //= 2\n    return ''.join(reversed(binary))", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary_representation = []\n    while n > 0:\n        binary_representation.append(str(n % 2))\n        n //= 2\n    return ''.join(reversed(binary_representation))", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary", "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"], "outputs": "[['0'], ['1'], ['10'], ['101'], ['1010'], ['11111111'], ['10000000000'], [''], ['1100100'], ['1111111111']]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:] if n > 0 else '0'"], "outputs": "[['0'], ['1'], ['10'], ['101'], ['1010'], ['11111111'], ['10000000000'], ['0'], ['1100100'], ['1111111111']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/100", "requirement": "def next_smallest_palindrome(num: int) -> int:\n\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101\n\"\"\"", "llm_generated_inputs": "[[0], [1], [9], [10], [11], [121], [122], [987], [99], [1001], [12321], [30003], [9999], [10000]]", "programs": ["def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    next_num = num + 1\n    while True:\n        if is_palindrome(next_num):\n            return next_num\n        next_num += 1", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1", "def next_smallest_palindrome(num: int) -> int:\n    num += 1\n    while True:\n        if str(num) == str(num)[::-1]:\n            return num\n        num += 1", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num"], "clusters": [{"programs_str": ["def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    next_num = num + 1\n    while True:\n        if is_palindrome(next_num):\n            return next_num\n        next_num += 1", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1", "def next_smallest_palindrome(num: int) -> int:\n    num += 1\n    while True:\n        if str(num) == str(num)[::-1]:\n            return num\n        num += 1", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num"], "outputs": "[[1], [2], [11], [11], [22], [131], [131], [989], [101], [1111], [12421], [30103], [10001], [10001]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/101", "requirement": "from typing import List\n\n\ndef kth_element(arr: List[int], k: int) -> int:\n\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"", "llm_generated_inputs": "[[[12, 3, 5, 7, 19], 2], [[12, 3, 5, 7, 19], 1], [[12, 3, 5, 7, 19], 5], [[1, 2, 3, 4, 5], 3], [[], 1], [[10], 1], [[5, 5, 5, 5, 5], 1], [[7, 8, 1, 3, 4], 4], [[-1, -2, -3, -4], 2], [[10, 20, 30, 40, 50], 0], [[10, 20, 30, 40, 50], 6]]", "programs": ["from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr_sorted = sorted(arr)\n    return arr_sorted[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    sorted_arr = sorted(arr)\n    return sorted_arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    sorted_arr = sorted(arr)\n    return sorted_arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    if k < 1 or k > len(arr):\n        raise ValueError('k is out of bounds')\n    sorted_arr = sorted(arr)\n    return sorted_arr[k - 1]"], "clusters": [{"programs_str": ["from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr_sorted = sorted(arr)\n    return arr_sorted[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    sorted_arr = sorted(arr)\n    return sorted_arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    sorted_arr = sorted(arr)\n    return sorted_arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k - 1]"], "outputs": "[[5], [3], [19], [3], ['IndexError'], [10], [5], [7], [-3], [50], ['IndexError']]", "probability": 0.95, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[12, 3, 5, 7, 19], 2], [5], [3]]]"}, {"programs_str": ["from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    if k < 1 or k > len(arr):\n        raise ValueError('k is out of bounds')\n    sorted_arr = sorted(arr)\n    return sorted_arr[k - 1]"], "outputs": "[[5], [3], [19], [3], ['ValueError'], [10], [5], [7], [-3], ['ValueError'], ['ValueError']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[12, 3, 5, 7, 19], 2], [5], [3]]]"}]}
{"task_id": "Mbpp/102", "requirement": "def snake_to_camel(word: str) -> str:\n\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"", "llm_generated_inputs": "[['python_program'], ['singleword'], ['multiple_words_in_snake_case'], ['_leading_underscore'], ['trailing_underscore_'], ['__double_underscore__'], ['UPPERCASE_WORDS'], ['mixed_CASE_word'], ['special#$%^&*characters'], ['']]", "programs": ["def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))"], "clusters": [{"programs_str": ["def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))"], "outputs": "[['PythonProgram'], ['Singleword'], ['MultipleWordsInSnakeCase'], ['LeadingUnderscore'], ['TrailingUnderscore'], ['DoubleUnderscore'], ['UppercaseWords'], ['MixedCaseWord'], ['Special#$%^&*characters'], ['']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/103", "requirement": "def eulerian_num(n: int, m: int) -> int:\n\"\"\"\nWrite a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"", "llm_generated_inputs": "[[3, 1], [0, 0], [1, 0], [1, 1], [2, 0], [2, 1], [2, 2], [5, 3], [4, 2], [6, 4]]", "programs": ["def eulerian_num(n: int, m: int) -> int:\n    eulerian = [[0] * (n + 1) for _ in range(n + 1)]\n    eulerian[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if j == 0:\n                eulerian[i][j] = (i + 1) * eulerian[i - 1][j]\n            elif j == i:\n                eulerian[i][j] = i * eulerian[i - 1][j - 1]\n            else:\n                eulerian[i][j] = i * eulerian[i - 1][j - 1] + (i + 1) * eulerian[i - 1][j]\n    return eulerian[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n    for i in range(1, n + 1):\n        A[i][0] = (i - 1) * A[i - 1][0]\n        for j in range(1, i + 1):\n            A[i][j] = (i - j) * A[i - 1][j - 1] + (j + 1) * A[i - 1][j]\n    return A[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    eulerian = [[0] * (n + 1) for _ in range(n + 1)]\n    eulerian[0][0] = 1\n    for i in range(1, n + 1):\n        eulerian[i][0] = 0\n        for j in range(1, i + 1):\n            eulerian[i][j] = (i - j) * eulerian[i - 1][j - 1] + (j + 1) * eulerian[i - 1][j]\n    return eulerian[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n    for i in range(1, n + 1):\n        A[i][0] = 0\n        A[i][i] = 0\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            A[i][j] = (i - j) * A[i - 1][j - 1] + (j + 1) * A[i - 1][j]\n    return A[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    eulerian = [[0] * (n + 1) for _ in range(n + 1)]\n    eulerian[0][0] = 1\n    for i in range(1, n + 1):\n        eulerian[i][0] = (i - 1) * eulerian[i - 1][0]\n        for j in range(1, i + 1):\n            eulerian[i][j] = j * eulerian[i - 1][j] + (i - j) * eulerian[i - 1][j - 1]\n    return eulerian[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(0, i + 1):\n            if j == 0:\n                A[i][j] = (i + 1) * A[i - 1][j]\n            elif j == i:\n                A[i][j] = i * A[i - 1][j - 1]\n            else:\n                A[i][j] = (i - j + 1) * A[i - 1][j] + j * A[i - 1][j - 1]\n    return A[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if j == 0:\n                A[i][j] = (i + 1) * A[i - 1][j]\n            elif j == i:\n                A[i][j] = i * A[i - 1][j - 1]\n            else:\n                A[i][j] = (i - j + 1) * A[i - 1][j] + j * A[i - 1][j - 1]\n    return A[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(0, i + 1):\n            if j == 0:\n                A[i][j] = (i + 1) * A[i - 1][j]\n            elif j == i:\n                A[i][j] = i * A[i - 1][j - 1]\n            else:\n                A[i][j] = (i - j + 1) * A[i - 1][j] + j * A[i - 1][j - 1]\n    return A[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        A[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            A[i][j] = (i - j) * A[i - 1][j] + (j + 1) * A[i - 1][j - 1]\n    return A[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n    for i in range(1, n + 1):\n        A[i][0] = (i + 1) * A[i - 1][0]\n        for j in range(1, i + 1):\n            A[i][j] = (j + 1) * A[i - 1][j] + (i - j) * A[i - 1][j - 1]\n    return A[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    eulerian = [[0] * (n + 1) for _ in range(n + 1)]\n    eulerian[0][0] = 1\n    for i in range(1, n + 1):\n        eulerian[i][0] = 0\n        eulerian[i][i] = 1\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            eulerian[i][j] = (j + 1) * eulerian[i - 1][j] + (i - j) * eulerian[i - 1][j - 1]\n    return eulerian[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        A[i][0] = 1 if i == 0 else 0\n        A[i][i] = 1\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            A[i][j] = (i - j) * A[i - 1][j - 1] + (j + 1) * A[i - 1][j]\n    return A[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (m + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(0, min(m, i) + 1):\n            A[i][j] = (i - j) * A[i - 1][j] + (j + 1) * A[i - 1][j - 1]\n    return A[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    if n == 0 and m == 0:\n        return 1\n    if n == 0:\n        return 0\n    if m == 0:\n        return 1\n    eulerian = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        eulerian[i][0] = 1 if i == 0 else 0\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            eulerian[i][j] = (i - j) * eulerian[i - 1][j] + (j + 1) * eulerian[i - 1][j - 1]\n    return eulerian[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    eulerian = [[0] * (n + 1) for _ in range(n + 1)]\n    eulerian[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if j == 0:\n                eulerian[i][j] = (i + 1) * eulerian[i - 1][j]\n            elif j == i:\n                eulerian[i][j] = i * eulerian[i - 1][j - 1]\n            else:\n                eulerian[i][j] = (i - j + 1) * eulerian[i - 1][j] + (j + 1) * eulerian[i - 1][j - 1]\n    return eulerian[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    eulerian = [[0] * (n + 1) for _ in range(n + 1)]\n    eulerian[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(0, i + 1):\n            if j == 0:\n                eulerian[i][j] = (2 * i - 1) * eulerian[i - 1][j]\n            elif j == i:\n                eulerian[i][j] = (2 * i - 1) * eulerian[i - 1][j - 1] + 1\n            else:\n                eulerian[i][j] = (j + 1) * eulerian[i - 1][j] + (i - j) * eulerian[i - 1][j - 1]\n    return eulerian[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n    for i in range(1, n + 1):\n        A[i][0] = (i + 1) * A[i - 1][0]\n        for j in range(1, i + 1):\n            A[i][j] = (i - j + 1) * A[i - 1][j - 1] + (j + 1) * A[i - 1][j]\n    return A[n][m]", "from math import comb\n\ndef eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            A[i][j] = (i - j) * A[i - 1][j] + (j + 1) * A[i - 1][j - 1] if j > 0 else (i - j) * A[i - 1][j]\n    return A[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    eulerian = [[0] * (n + 1) for _ in range(n + 1)]\n    eulerian[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(0, i + 1):\n            if j == 0:\n                eulerian[i][j] = (i + 1) * eulerian[i - 1][j]\n            elif j == i:\n                eulerian[i][j] = i * eulerian[i - 1][j - 1]\n            else:\n                eulerian[i][j] = (j + 1) * eulerian[i - 1][j] + (i - j) * eulerian[i - 1][j - 1]\n    return eulerian[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        A[i][0] = 1 if i == 0 else 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            A[i][j] = (i - j) * A[i - 1][j] + (j + 1) * A[i - 1][j - 1]\n    return A[n][m]"], "clusters": [{"programs_str": ["def eulerian_num(n: int, m: int) -> int:\n    eulerian = [[0] * (n + 1) for _ in range(n + 1)]\n    eulerian[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if j == 0:\n                eulerian[i][j] = (i + 1) * eulerian[i - 1][j]\n            elif j == i:\n                eulerian[i][j] = i * eulerian[i - 1][j - 1]\n            else:\n                eulerian[i][j] = i * eulerian[i - 1][j - 1] + (i + 1) * eulerian[i - 1][j]\n    return eulerian[n][m]"], "outputs": "[[46], [1], [2], [1], [6], [7], [2], [2521], [329], [21244]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 1], [46], [4]]]"}, {"programs_str": ["def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n    for i in range(1, n + 1):\n        A[i][0] = (i - 1) * A[i - 1][0]\n        for j in range(1, i + 1):\n            A[i][j] = (i - j) * A[i - 1][j - 1] + (j + 1) * A[i - 1][j]\n    return A[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    eulerian = [[0] * (n + 1) for _ in range(n + 1)]\n    eulerian[0][0] = 1\n    for i in range(1, n + 1):\n        eulerian[i][0] = 0\n        for j in range(1, i + 1):\n            eulerian[i][j] = (i - j) * eulerian[i - 1][j - 1] + (j + 1) * eulerian[i - 1][j]\n    return eulerian[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n    for i in range(1, n + 1):\n        A[i][0] = 0\n        A[i][i] = 0\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            A[i][j] = (i - j) * A[i - 1][j - 1] + (j + 1) * A[i - 1][j]\n    return A[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    eulerian = [[0] * (n + 1) for _ in range(n + 1)]\n    eulerian[0][0] = 1\n    for i in range(1, n + 1):\n        eulerian[i][0] = (i - 1) * eulerian[i - 1][0]\n        for j in range(1, i + 1):\n            eulerian[i][j] = j * eulerian[i - 1][j] + (i - j) * eulerian[i - 1][j - 1]\n    return eulerian[n][m]"], "outputs": "[[0], [1], [0], [0], [0], [0], [0], [0], [0], [0]]", "probability": 0.2, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 1], [0], [4]]]"}, {"programs_str": ["def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(0, i + 1):\n            if j == 0:\n                A[i][j] = (i + 1) * A[i - 1][j]\n            elif j == i:\n                A[i][j] = i * A[i - 1][j - 1]\n            else:\n                A[i][j] = (i - j + 1) * A[i - 1][j] + j * A[i - 1][j - 1]\n    return A[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if j == 0:\n                A[i][j] = (i + 1) * A[i - 1][j]\n            elif j == i:\n                A[i][j] = i * A[i - 1][j - 1]\n            else:\n                A[i][j] = (i - j + 1) * A[i - 1][j] + j * A[i - 1][j - 1]\n    return A[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(0, i + 1):\n            if j == 0:\n                A[i][j] = (i + 1) * A[i - 1][j]\n            elif j == i:\n                A[i][j] = i * A[i - 1][j - 1]\n            else:\n                A[i][j] = (i - j + 1) * A[i - 1][j] + j * A[i - 1][j - 1]\n    return A[n][m]"], "outputs": "[[18], [1], [2], [1], [6], [4], [2], [360], [72], [2160]]", "probability": 0.15, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 1], [18], [4]]]"}, {"programs_str": ["def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        A[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            A[i][j] = (i - j) * A[i - 1][j] + (j + 1) * A[i - 1][j - 1]\n    return A[n][m]"], "outputs": "[[10], [1], [1], [2], [1], [4], [6], [456], [66], [3480]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 1], [10], [4]]]"}, {"programs_str": ["def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n    for i in range(1, n + 1):\n        A[i][0] = (i + 1) * A[i - 1][0]\n        for j in range(1, i + 1):\n            A[i][j] = (j + 1) * A[i - 1][j] + (i - j) * A[i - 1][j - 1]\n    return A[n][m]"], "outputs": "[[16], [1], [2], [0], [6], [2], [0], [84], [38], [178]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 1], [16], [4]]]"}, {"programs_str": ["def eulerian_num(n: int, m: int) -> int:\n    eulerian = [[0] * (n + 1) for _ in range(n + 1)]\n    eulerian[0][0] = 1\n    for i in range(1, n + 1):\n        eulerian[i][0] = 0\n        eulerian[i][i] = 1\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            eulerian[i][j] = (j + 1) * eulerian[i - 1][j] + (i - j) * eulerian[i - 1][j - 1]\n    return eulerian[n][m]", "def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        A[i][0] = 1 if i == 0 else 0\n        A[i][i] = 1\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            A[i][j] = (i - j) * A[i - 1][j - 1] + (j + 1) * A[i - 1][j]\n    return A[n][m]"], "outputs": "[[4], [1], [0], [1], [0], [2], [1], [82], [23], [234]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (m + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(0, min(m, i) + 1):\n            A[i][j] = (i - j) * A[i - 1][j] + (j + 1) * A[i - 1][j - 1]\n    return A[n][m]"], "outputs": "[[16], [1], [2], [2], [6], [4], [6], [480], [72], [3600]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 1], [16], [4]]]"}, {"programs_str": ["def eulerian_num(n: int, m: int) -> int:\n    if n == 0 and m == 0:\n        return 1\n    if n == 0:\n        return 0\n    if m == 0:\n        return 1\n    eulerian = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        eulerian[i][0] = 1 if i == 0 else 0\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            eulerian[i][j] = (i - j) * eulerian[i - 1][j] + (j + 1) * eulerian[i - 1][j - 1]\n    return eulerian[n][m]"], "outputs": "[[4], [1], [1], [2], [1], [2], [6], [288], [36], [2400]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def eulerian_num(n: int, m: int) -> int:\n    eulerian = [[0] * (n + 1) for _ in range(n + 1)]\n    eulerian[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if j == 0:\n                eulerian[i][j] = (i + 1) * eulerian[i - 1][j]\n            elif j == i:\n                eulerian[i][j] = i * eulerian[i - 1][j - 1]\n            else:\n                eulerian[i][j] = (i - j + 1) * eulerian[i - 1][j] + (j + 1) * eulerian[i - 1][j - 1]\n    return eulerian[n][m]"], "outputs": "[[30], [1], [2], [1], [6], [6], [2], [924], [156], [6264]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 1], [30], [4]]]"}, {"programs_str": ["def eulerian_num(n: int, m: int) -> int:\n    eulerian = [[0] * (n + 1) for _ in range(n + 1)]\n    eulerian[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(0, i + 1):\n            if j == 0:\n                eulerian[i][j] = (2 * i - 1) * eulerian[i - 1][j]\n            elif j == i:\n                eulerian[i][j] = (2 * i - 1) * eulerian[i - 1][j - 1] + 1\n            else:\n                eulerian[i][j] = (j + 1) * eulerian[i - 1][j] + (i - j) * eulerian[i - 1][j - 1]\n    return eulerian[n][m]"], "outputs": "[[16], [1], [1], [2], [3], [5], [7], [900], [110], [8975]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 1], [16], [4]]]"}, {"programs_str": ["def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n    for i in range(1, n + 1):\n        A[i][0] = (i + 1) * A[i - 1][0]\n        for j in range(1, i + 1):\n            A[i][j] = (i - j + 1) * A[i - 1][j - 1] + (j + 1) * A[i - 1][j]\n    return A[n][m]"], "outputs": "[[30], [1], [2], [1], [6], [6], [1], [541], [135], [1988]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 1], [30], [4]]]"}, {"programs_str": ["from math import comb\n\ndef eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            A[i][j] = (i - j) * A[i - 1][j] + (j + 1) * A[i - 1][j - 1] if j > 0 else (i - j) * A[i - 1][j]\n    return A[n][m]"], "outputs": "[[12], [1], [1], [2], [2], [4], [6], [480], [72], [3600]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 1], [12], [4]]]"}, {"programs_str": ["def eulerian_num(n: int, m: int) -> int:\n    eulerian = [[0] * (n + 1) for _ in range(n + 1)]\n    eulerian[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(0, i + 1):\n            if j == 0:\n                eulerian[i][j] = (i + 1) * eulerian[i - 1][j]\n            elif j == i:\n                eulerian[i][j] = i * eulerian[i - 1][j - 1]\n            else:\n                eulerian[i][j] = (j + 1) * eulerian[i - 1][j] + (i - j) * eulerian[i - 1][j - 1]\n    return eulerian[n][m]"], "outputs": "[[20], [1], [2], [1], [6], [4], [2], [276], [70], [1322]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 1], [20], [4]]]"}, {"programs_str": ["def eulerian_num(n: int, m: int) -> int:\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        A[i][0] = 1 if i == 0 else 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            A[i][j] = (i - j) * A[i - 1][j] + (j + 1) * A[i - 1][j - 1]\n    return A[n][m]"], "outputs": "[[4], [1], [0], [2], [0], [2], [6], [288], [36], [2400]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/104", "requirement": "from typing import List\n\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"", "llm_generated_inputs": "[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]], [[['apple', 'banana', 'cherry'], ['grape', 'fig'], ['kiwi']]], [[['cat', 'bat'], ['ant', 'dog', 'elephant'], ['zebra', 'lion', 'tiger']]], [[[], ['single'], [], []]], [[['xyz', 'abc'], ['123', '456'], ['pqr', 'mno']]], [[['a', 'C', 'b'], ['B', 'a', 'A'], ['z', 'y', 'x']]], [[['short'], ['longer', 'longest'], ['tiny', 'medium', 'large']]], [[['same', 'same'], ['duplicate', 'duplicate', 'duplicate']]], [[['apple', 'APPLE'], ['banana', 'Banana'], ['Cherry', 'cherry']]]]", "programs": ["from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]"], "clusters": [{"programs_str": ["from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]"], "outputs": "[[[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]], [[['apple', 'banana', 'cherry'], ['fig', 'grape'], ['kiwi']]], [[['bat', 'cat'], ['ant', 'dog', 'elephant'], ['lion', 'tiger', 'zebra']]], [[[], ['single'], [], []]], [[['abc', 'xyz'], ['123', '456'], ['mno', 'pqr']]], [[['C', 'a', 'b'], ['A', 'B', 'a'], ['x', 'y', 'z']]], [[['short'], ['longer', 'longest'], ['large', 'medium', 'tiny']]], [[['same', 'same'], ['duplicate', 'duplicate', 'duplicate']]], [[['APPLE', 'apple'], ['Banana', 'banana'], ['Cherry', 'cherry']]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/105", "requirement": "from typing import List\n\n\ndef count(lst: List[bool]) -> int:\n\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"", "llm_generated_inputs": "[[[True, False, True]], [[True, True, True]], [[False, False, False]], [[True, False, False, True]], [[True, True, False, True, False]], [[True, True, True, True]], [[False, True, False]], [[True, True, True, False, False, True, False]], [[False]], [[True]]]", "programs": ["from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return lst.count(True)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)"], "clusters": [{"programs_str": ["from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return lst.count(True)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)"], "outputs": "[[2], [3], [0], [2], [3], [4], [1], [4], [0], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/106", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n\"\"\"\nWrite a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3], (4, 5)], [[], (1, 2)], [[0], (3, 4)], [[7, 8], (9,)], [[10, 11], ()], [['apple', 'banana'], ('orange', 'grape')], [['a', 'b'], ('c',)]]", "programs": ["from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)"], "clusters": [{"programs_str": ["from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)"], "outputs": "[[(4, 5, 1, 2, 3)], [(1, 2)], [(3, 4, 0)], [(9, 7, 8)], [(10, 11)], [('orange', 'grape', 'apple', 'banana')], [('c', 'a', 'b')]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/108", "requirement": "from typing import List\n\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n\"\"\"\nWrite a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"", "llm_generated_inputs": "[[[25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]], [[], [], []], [[1], [2], [3]], [[5, 2], [3, 1], [4]], [[-1, -3, -2], [2, 3, 1], [0, -4]], [[10, 20], [], [5, 15]], [[100, 50, 25], [75, 150], [200]], [[1, 1, 1], [1, 1], [1]], [[5], [3], [4]]]", "programs": ["from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    merged_list.sort()\n    return merged_list", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    merged_list.sort()\n    return merged_list", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    return sorted(merged_list)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    return sorted(merged_list)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged = num1 + num2 + num3\n    merged.sort()\n    return merged", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    merged_list.sort()\n    return merged_list", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    merged_list.sort()\n    return merged_list", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    return sorted(merged_list)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged = sorted(num1 + num2 + num3)\n    return merged", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    return sorted(merged_list)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    merged_list.sort()\n    return merged_list", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    combined = num1 + num2 + num3\n    return sorted(combined)"], "clusters": [{"programs_str": ["from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    merged_list.sort()\n    return merged_list", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    merged_list.sort()\n    return merged_list", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    return sorted(merged_list)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    return sorted(merged_list)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged = num1 + num2 + num3\n    merged.sort()\n    return merged", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    merged_list.sort()\n    return merged_list", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    merged_list.sort()\n    return merged_list", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    return sorted(merged_list)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged = sorted(num1 + num2 + num3)\n    return merged", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    return sorted(merged_list)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    merged_list.sort()\n    return merged_list", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    combined = num1 + num2 + num3\n    return sorted(combined)"], "outputs": "[[[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]], [[]], [[1, 2, 3]], [[1, 2, 3, 4, 5]], [[-4, -3, -2, -1, 0, 1, 2, 3]], [[5, 10, 15, 20]], [[25, 50, 75, 100, 150, 200]], [[1, 1, 1, 1, 1, 1]], [[3, 4, 5]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/109", "requirement": "def odd_Equivalent(s: str, n: int) -> int:\n\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"", "llm_generated_inputs": "[['011001', 6], ['101010', 5], ['111111', 10], ['000000', 4], ['001100', 8], ['110011', 3], ['100101', 7], ['010101', 2]]", "programs": ["def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated = s[i:] + s[:i]\n        if rotated.count('1') % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated_number = int(s[i:] + s[:i], 2)\n        if rotated_number % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated_value = int(s[i:] + s[:i], 2)\n        if rotated_value % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated = s[i:] + s[:i]\n        value = int(rotated, 2)\n        if value % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated_value = int(s[i:] + s[:i], 2)\n        if rotated_value % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated_value = s[i:] + s[:i]\n        if int(rotated_value, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated = s[i:] + s[:i]\n        value = int(rotated, 2)\n        if value % 2 != 0:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n\n    def is_odd(binary_str: str) -> bool:\n        return int(binary_str, 2) % 2 == 1\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated = s[i:] + s[:i]\n        if is_odd(rotated):\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotated = s[i % length:] + s[:i % length]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotated = s[i % length:] + s[:i % length]\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    return sum((1 for i in range(n) if int(s[i:] + s[:i]) % 2 == 1))", "def odd_Equivalent(s: str, n: int) -> int:\n    from collections import deque\n    binary_deque = deque(s)\n    odd_count = 0\n    for _ in range(n):\n        if int(''.join(binary_deque), 2) % 2 == 1:\n            odd_count += 1\n        binary_deque.append(binary_deque.popleft())\n    return odd_count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotated_value = s[i % length:]\n        if int(rotated_value, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    rotations = {s[i:] + s[:i] for i in range(len(s))}\n    count = sum((1 for rotation in rotations if int(rotation, 2) % 2 == 1))\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    rotations = set()\n    length = len(s)\n    for i in range(n):\n        rotated = s[i % length:] + s[:i % length]\n        rotations.add(rotated)\n    odd_count = sum((1 for num in rotations if int(num, 2) % 2 == 1))\n    return odd_count", "def odd_Equivalent(s: str, n: int) -> int:\n    rotated_numbers = set()\n    for i in range(n):\n        rotated_string = s[i % len(s):] + s[:i % len(s)]\n        if int(rotated_string, 2) % 2 == 1:\n            rotated_numbers.add(rotated_string)\n    return len(rotated_numbers)"], "clusters": [{"programs_str": ["def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated = s[i:] + s[:i]\n        if rotated.count('1') % 2 == 1:\n            count += 1\n    return count"], "outputs": "[[6], [6], [0], [0], [0], [0], [6], [6]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['011001', 6], [6], [3]]]"}, {"programs_str": ["def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated_number = int(s[i:] + s[:i], 2)\n        if rotated_number % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated_value = int(s[i:] + s[:i], 2)\n        if rotated_value % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated = s[i:] + s[:i]\n        value = int(rotated, 2)\n        if value % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated_value = int(s[i:] + s[:i], 2)\n        if rotated_value % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated_value = s[i:] + s[:i]\n        if int(rotated_value, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated = s[i:] + s[:i]\n        value = int(rotated, 2)\n        if value % 2 != 0:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n\n    def is_odd(binary_str: str) -> bool:\n        return int(binary_str, 2) % 2 == 1\n    count = 0\n    length = len(s)\n    for i in range(length):\n        rotated = s[i:] + s[:i]\n        if is_odd(rotated):\n            count += 1\n    return count"], "outputs": "[[3], [3], [6], [0], [2], [4], [3], [3]]", "probability": 0.55, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotated = s[i % length:] + s[:i % length]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotated = s[i % length:] + s[:i % length]\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    return sum((1 for i in range(n) if int(s[i:] + s[:i]) % 2 == 1))", "def odd_Equivalent(s: str, n: int) -> int:\n    from collections import deque\n    binary_deque = deque(s)\n    odd_count = 0\n    for _ in range(n):\n        if int(''.join(binary_deque), 2) % 2 == 1:\n            odd_count += 1\n        binary_deque.append(binary_deque.popleft())\n    return odd_count"], "outputs": "[[3], [2], [10], [0], [2], [3], [4], [1]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotated_value = s[i % length:]\n        if int(rotated_value, 2) % 2 == 1:\n            count += 1\n    return count"], "outputs": "[[6], [0], [10], [0], [0], [3], [7], [2]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['011001', 6], [6], [3]]]"}, {"programs_str": ["def odd_Equivalent(s: str, n: int) -> int:\n    rotations = {s[i:] + s[:i] for i in range(len(s))}\n    count = sum((1 for rotation in rotations if int(rotation, 2) % 2 == 1))\n    return count"], "outputs": "[[3], [1], [1], [0], [2], [4], [3], [1]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def odd_Equivalent(s: str, n: int) -> int:\n    rotations = set()\n    length = len(s)\n    for i in range(n):\n        rotated = s[i % length:] + s[:i % length]\n        rotations.add(rotated)\n    odd_count = sum((1 for num in rotations if int(num, 2) % 2 == 1))\n    return odd_count", "def odd_Equivalent(s: str, n: int) -> int:\n    rotated_numbers = set()\n    for i in range(n):\n        rotated_string = s[i % len(s):] + s[:i % len(s)]\n        if int(rotated_string, 2) % 2 == 1:\n            rotated_numbers.add(rotated_string)\n    return len(rotated_numbers)"], "outputs": "[[3], [1], [1], [0], [2], [3], [3], [1]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/111", "requirement": "from typing import List\n\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n\"\"\"\nWrite a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"", "llm_generated_inputs": "[[[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]], [[[1, 2, 3], [3, 4, 5], [5, 6, 7]]], [[[10, 20, 30], [30, 40, 50], [60, 70, 30]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[7, 14, 21], [14, 28, 42], [1, 14, 2]]], [[[100, 200, 300], [200, 400, 500], [600, 700]]], [[[1, 2], [2, 1], [1, 2]]], [[[99, 88, 77], [88, 66, 55], [77]]], [[[5, 10], [15, 20], [25]]], [[[9], [1, 2, 3], [4, 5]]], [[[1], [1], [1]]], [[[1, 2], [3, 4], []]]]", "programs": ["from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(set(lst))\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)"], "clusters": [{"programs_str": ["from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(set(lst))\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)"], "outputs": "[[[18, 12]], [[]], [[30]], [[]], [[14]], [[]], [[1, 2]], [[]], [[]], [[]], [[1]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/113", "requirement": "def check_integer(text: str) -> Optional[bool]:\n\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"", "llm_generated_inputs": "[['123'], ['-456'], ['0'], ['abc'], ['123abc'], ['-0'], ['00456'], ['   99  '], ['-00123'], ['100.5'], [' ten '], ['9e10']]", "programs": ["from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    if text.isdigit() or (text.startswith('-') and text[1:].isdigit()):\n        return True\n    return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    if text.isdigit() or (text.startswith(('-', '+')) and text[1:].isdigit()):\n        return True\n    return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    if text.isdigit() or (text[0] in ('-', '+') and text[1:].isdigit()):\n        return True\n    return False"], "clusters": [{"programs_str": ["from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"], "outputs": "[[True], [True], [True], [False], [False], [True], [True], [True], [True], [False], [False], [False]]", "probability": 0.85, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    if text.isdigit() or (text.startswith('-') and text[1:].isdigit()):\n        return True\n    return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    if text.isdigit() or (text.startswith(('-', '+')) and text[1:].isdigit()):\n        return True\n    return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    if text.isdigit() or (text[0] in ('-', '+') and text[1:].isdigit()):\n        return True\n    return False"], "outputs": "[[True], [True], [True], [False], [False], [True], [True], [False], [True], [False], [False], [False]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/116", "requirement": "from typing import Tuple\n\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"", "llm_generated_inputs": "[[(1, 2, 3)], [(0, 1, 2, 3)], [(9, 8, 7, 6, 5)], [(0, 0, 1)], [(5, 0, 2, 4)], [(1, 0, 0, 5)], [(3, 2, 1)], [(7, 5)], [(1, 2, 3, 4, 5, 6, 7, 8, 9)], [(2, 0, 5, 9, 3)]]", "programs": ["from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))"], "clusters": [{"programs_str": ["from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))"], "outputs": "[[123], [123], [98765], [1], [5024], [1005], [321], [75], [123456789], [20593]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/118", "requirement": "from typing import List\n\n\ndef string_to_list(string: str) -> List[str]:\n\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"", "llm_generated_inputs": "[['python programming'], ['hello world'], ['a b c d e f g'], [' singleSpace '], ['multiple    spaces'], [''], ['    '], ['text with    irregular   spaces']]", "programs": ["from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split()"], "clusters": [{"programs_str": ["from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')"], "outputs": "[[['python', 'programming']], [['hello', 'world']], [['a', 'b', 'c', 'd', 'e', 'f', 'g']], [['', 'singleSpace', '']], [['multiple', '', '', '', 'spaces']], [['']], [['', '', '', '', '']], [['text', 'with', '', '', '', 'irregular', '', '', 'spaces']]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split()"], "outputs": "[[['python', 'programming']], [['hello', 'world']], [['a', 'b', 'c', 'd', 'e', 'f', 'g']], [['singleSpace']], [['multiple', 'spaces']], [[]], [[]], [['text', 'with', 'irregular', 'spaces']]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/119", "requirement": "from typing import List\n\n\ndef search(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3\n\"\"\"", "llm_generated_inputs": "[[[1, 1, 2, 2, 3]], [[1, 1, 2, 3, 3]], [[0, 0, 1, 1, 2, 2, 3]], [[5, 5, 6, 6, 7]], [[2, 2, 5, 5, 6, 7, 7, 8, 8]], [[1]], [[1, 1, 2]], [[2, 3, 3, 4, 4, 5, 5]]]", "programs": ["from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        is_even = mid % 2 == 0\n        if is_even and mid + 1 < len(arr) and (arr[mid] == arr[mid + 1]) or (not is_even and mid - 1 >= 0 and (arr[mid] == arr[mid - 1])):\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if mid + 1 < len(arr) and arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if mid + 1 < len(arr) and arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif mid - 1 >= 0 and arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if mid + 1 < len(arr) and arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif mid - 1 >= 0 and arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]"], "clusters": [{"programs_str": ["from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        is_even = mid % 2 == 0\n        if is_even and mid + 1 < len(arr) and (arr[mid] == arr[mid + 1]) or (not is_even and mid - 1 >= 0 and (arr[mid] == arr[mid - 1])):\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if mid + 1 < len(arr) and arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if mid + 1 < len(arr) and arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif mid - 1 >= 0 and arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if mid + 1 < len(arr) and arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        elif mid - 1 >= 0 and arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]"], "outputs": "[[3], [2], [3], [7], [6], [1], [2], [2]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/120", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"", "llm_generated_inputs": "[[[(2, 7), (2, 6), (1, 8), (4, 9)]], [[(0, 0), (1, 1), (2, 3)]], [[(5, -3), (-1, 4), (2, 2)]], [[(-5, -1), (-2, -3), (0, 1)]], [[(1, 1), (1, 1), (1, 1)]], [[(0, 10), (10, 0)]], [[(7, 6), (3, 2), (5, 5)]], [[(1000, 2000), (3000, 4000), (5000, 6000)]], [[(9, 0), (0, 0), (0, 9)]], [[(1, 100), (2, 100), (3, 100)]]]", "programs": ["from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = a * b\n        if abs(product) > max_product:\n            max_product = abs(product)\n    return max_product", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(a * b) for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(x * y) for x, y in list1))", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(a * b) for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(a * b) for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(a * b) for a, b in list1))", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(a * b) for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = float('-inf')\n    for a, b in list1:\n        product = a * b\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((a * b for a, b in list1))"], "clusters": [{"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = a * b\n        if abs(product) > max_product:\n            max_product = abs(product)\n    return max_product", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(a * b) for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(x * y) for x, y in list1))", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(a * b) for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(a * b) for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(a * b) for a, b in list1))", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(a * b) for a, b in list1))"], "outputs": "[[36], [6], [15], [6], [1], [0], [42], [30000000], [0], [300]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = float('-inf')\n    for a, b in list1:\n        product = a * b\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((a * b for a, b in list1))"], "outputs": "[[36], [6], [4], [6], [1], [0], [42], [30000000], [0], [300]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/123", "requirement": "def amicable_numbers_sum(limit: int) -> int:\n\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n\nassert amicable_numbers_sum(999)==504\n\"\"\"", "llm_generated_inputs": "[[1], [10], [200], [500], [999], [10000], [220], [284], [1000000], [0], [-5]]", "programs": ["def amicable_numbers_sum(limit: int) -> int:\n\n    def divisor_sum(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        if num not in amicable_numbers:\n            partner = divisor_sum(num)\n            if partner != num and divisor_sum(partner) == num:\n                amicable_numbers.add(num)\n                amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 0\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != 1 and i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(1, limit + 1):\n        if num not in amicable_numbers:\n            partner = sum_of_divisors(num)\n            if partner != num and sum_of_divisors(partner) == num:\n                amicable_numbers.add(num)\n                amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 0\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != 1 and i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(1, limit + 1):\n        if num not in amicable_numbers:\n            partner = sum_of_divisors(num)\n            if partner != num and sum_of_divisors(partner) == num:\n                amicable_numbers.add(num)\n                amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n):\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        if num not in amicable_numbers:\n            partner = sum_of_divisors(num)\n            if partner != num and sum_of_divisors(partner) == num:\n                amicable_numbers.add(num)\n                amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        if num not in amicable_numbers:\n            partner = sum_of_divisors(num)\n            if partner != num and sum_of_divisors(partner) == num:\n                amicable_numbers.add(num)\n                amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and sum_of_divisors(partner) == num:\n            amicable_numbers.add(num)\n            amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 0\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != 1 and i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(1, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and sum_of_divisors(partner) == num:\n            amicable_numbers.add(num)\n            amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and sum_of_divisors(partner) == num:\n            amicable_numbers.add(num)\n            amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 0\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i and i != 1:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(1, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and sum_of_divisors(partner) == num:\n            amicable_numbers.add(num)\n            amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != 1 and i != n // i:\n                    total += n // i\n        return total\n    amicable_nums = set()\n    for num in range(1, limit + 1):\n        if num not in amicable_nums:\n            sum_div = sum_of_divisors(num)\n            if sum_div != num and sum_of_divisors(sum_div) == num:\n                amicable_nums.add(num)\n                amicable_nums.add(sum_div)\n    return sum(amicable_nums)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def divisor_sum(n: int) -> int:\n        total = 0\n        for i in range(1, n // 2 + 1):\n            if n % i == 0:\n                total += i\n        return total\n    amicable_numbers = set()\n    for num in range(1, limit + 1):\n        partner = divisor_sum(num)\n        if partner != num and partner <= limit and (divisor_sum(partner) == num):\n            amicable_numbers.add(num)\n            amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 0\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != 1 and i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(1, limit + 1):\n        if num not in amicable_numbers:\n            partner = sum_of_divisors(num)\n            if partner != num and sum_of_divisors(partner) == num and (partner <= limit):\n                amicable_numbers.add(num)\n                amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and partner <= limit:\n            if sum_of_divisors(partner) == num:\n                amicable_numbers.add(num)\n                amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and partner <= limit:\n            if sum_of_divisors(partner) == num:\n                amicable_numbers.add(num)\n                amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n):\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        mate = sum_of_divisors(num)\n        if mate != num and mate <= limit and (sum_of_divisors(mate) == num):\n            amicable_numbers.add(num)\n            amicable_numbers.add(mate)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        if num not in amicable_numbers:\n            friend = sum_of_divisors(num)\n            if friend != num and friend <= limit:\n                if sum_of_divisors(friend) == num:\n                    amicable_numbers.add(num)\n                    amicable_numbers.add(friend)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        if num not in amicable_numbers:\n            partner = sum_of_divisors(num)\n            if partner != num and partner <= limit:\n                if sum_of_divisors(partner) == num:\n                    amicable_numbers.add(num)\n                    amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        return sum((i for i in range(1, n // 2 + 1) if n % i == 0))\n    amicable_numbers = set()\n    for a in range(2, limit + 1):\n        b = sum_of_divisors(a)\n        if b > a and b <= limit:\n            if sum_of_divisors(b) == a:\n                amicable_numbers.add(a)\n                amicable_numbers.add(b)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != 1 and i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and partner <= limit:\n            if sum_of_divisors(partner) == num:\n                amicable_numbers.add(num)\n                amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n):\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_nums = set()\n    for a in range(2, limit):\n        b = sum_of_divisors(a)\n        if b > a and b < limit:\n            if a == sum_of_divisors(b):\n                amicable_nums.add(a)\n                amicable_nums.add(b)\n    return sum(amicable_nums)"], "clusters": [{"programs_str": ["def amicable_numbers_sum(limit: int) -> int:\n\n    def divisor_sum(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        if num not in amicable_numbers:\n            partner = divisor_sum(num)\n            if partner != num and divisor_sum(partner) == num:\n                amicable_numbers.add(num)\n                amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 0\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != 1 and i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(1, limit + 1):\n        if num not in amicable_numbers:\n            partner = sum_of_divisors(num)\n            if partner != num and sum_of_divisors(partner) == num:\n                amicable_numbers.add(num)\n                amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 0\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != 1 and i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(1, limit + 1):\n        if num not in amicable_numbers:\n            partner = sum_of_divisors(num)\n            if partner != num and sum_of_divisors(partner) == num:\n                amicable_numbers.add(num)\n                amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n):\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        if num not in amicable_numbers:\n            partner = sum_of_divisors(num)\n            if partner != num and sum_of_divisors(partner) == num:\n                amicable_numbers.add(num)\n                amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        if num not in amicable_numbers:\n            partner = sum_of_divisors(num)\n            if partner != num and sum_of_divisors(partner) == num:\n                amicable_numbers.add(num)\n                amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and sum_of_divisors(partner) == num:\n            amicable_numbers.add(num)\n            amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 0\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != 1 and i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(1, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and sum_of_divisors(partner) == num:\n            amicable_numbers.add(num)\n            amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and sum_of_divisors(partner) == num:\n            amicable_numbers.add(num)\n            amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 0\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i and i != 1:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(1, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and sum_of_divisors(partner) == num:\n            amicable_numbers.add(num)\n            amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != 1 and i != n // i:\n                    total += n // i\n        return total\n    amicable_nums = set()\n    for num in range(1, limit + 1):\n        if num not in amicable_nums:\n            sum_div = sum_of_divisors(num)\n            if sum_div != num and sum_of_divisors(sum_div) == num:\n                amicable_nums.add(num)\n                amicable_nums.add(sum_div)\n    return sum(amicable_nums)"], "outputs": "[[0], [0], [0], [504], [504], [31626], [504], [504], ['Timeout'], [0], [0]]", "probability": 0.5, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def amicable_numbers_sum(limit: int) -> int:\n\n    def divisor_sum(n: int) -> int:\n        total = 0\n        for i in range(1, n // 2 + 1):\n            if n % i == 0:\n                total += i\n        return total\n    amicable_numbers = set()\n    for num in range(1, limit + 1):\n        partner = divisor_sum(num)\n        if partner != num and partner <= limit and (divisor_sum(partner) == num):\n            amicable_numbers.add(num)\n            amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 0\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != 1 and i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(1, limit + 1):\n        if num not in amicable_numbers:\n            partner = sum_of_divisors(num)\n            if partner != num and sum_of_divisors(partner) == num and (partner <= limit):\n                amicable_numbers.add(num)\n                amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and partner <= limit:\n            if sum_of_divisors(partner) == num:\n                amicable_numbers.add(num)\n                amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and partner <= limit:\n            if sum_of_divisors(partner) == num:\n                amicable_numbers.add(num)\n                amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n):\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        mate = sum_of_divisors(num)\n        if mate != num and mate <= limit and (sum_of_divisors(mate) == num):\n            amicable_numbers.add(num)\n            amicable_numbers.add(mate)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        if num not in amicable_numbers:\n            friend = sum_of_divisors(num)\n            if friend != num and friend <= limit:\n                if sum_of_divisors(friend) == num:\n                    amicable_numbers.add(num)\n                    amicable_numbers.add(friend)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        if num not in amicable_numbers:\n            partner = sum_of_divisors(num)\n            if partner != num and partner <= limit:\n                if sum_of_divisors(partner) == num:\n                    amicable_numbers.add(num)\n                    amicable_numbers.add(partner)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        return sum((i for i in range(1, n // 2 + 1) if n % i == 0))\n    amicable_numbers = set()\n    for a in range(2, limit + 1):\n        b = sum_of_divisors(a)\n        if b > a and b <= limit:\n            if sum_of_divisors(b) == a:\n                amicable_numbers.add(a)\n                amicable_numbers.add(b)\n    return sum(amicable_numbers)", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != 1 and i != n // i:\n                    total += n // i\n        return total\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and partner <= limit:\n            if sum_of_divisors(partner) == num:\n                amicable_numbers.add(num)\n                amicable_numbers.add(partner)\n    return sum(amicable_numbers)"], "outputs": "[[0], [0], [0], [504], [504], ['Timeout'], [0], [504], ['Timeout'], [0], [0]]", "probability": 0.45, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n):\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_nums = set()\n    for a in range(2, limit):\n        b = sum_of_divisors(a)\n        if b > a and b < limit:\n            if a == sum_of_divisors(b):\n                amicable_nums.add(a)\n                amicable_nums.add(b)\n    return sum(amicable_nums)"], "outputs": "[[0], [0], [0], [504], [504], [31626], [0], [0], ['Timeout'], [0], [0]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/124", "requirement": "def angle_complex(a: complex, b: complex) -> float:\n\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"", "llm_generated_inputs": "[[0, 1j], [1, 1], [-1, 1], [1, 0], [0, (-0-1j)], [1, -1], [-1, -1], [0, 0], [(3+4j), (1+1j)], [(-2+2j), (2-2j)]]", "programs": ["import cmath\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(b)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import cmath\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(b)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag - a.imag, b.real - a.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real) - math.atan2(a.imag, a.real)", "import cmath\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(b) - cmath.phase(a)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real) - math.atan2(a.imag, a.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real) - math.atan2(a.imag, a.real)", "import cmath\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(b) - cmath.phase(a)"], "clusters": [{"programs_str": ["import cmath\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(b)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import cmath\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(b)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)"], "outputs": "[[1.5707963267948966], [0.0], [0.0], [0.0], [-1.5707963267948966], [3.141592653589793], [3.141592653589793], [0.0], [0.7853981633974483], [-0.7853981633974483]]", "probability": 0.7, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag - a.imag, b.real - a.real)"], "outputs": "[[1.5707963267948966], [0.0], [0.0], [3.141592653589793], [-1.5707963267948966], [3.141592653589793], [0.0], [0.0], [-2.158798930342464], [-0.7853981633974483]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real) - math.atan2(a.imag, a.real)", "import cmath\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(b) - cmath.phase(a)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real) - math.atan2(a.imag, a.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real) - math.atan2(a.imag, a.real)", "import cmath\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(b) - cmath.phase(a)"], "outputs": "[[1.5707963267948966], [0.0], [-3.141592653589793], [0.0], [-1.5707963267948966], [3.141592653589793], [0.0], [0.0], [-0.1418970546041639], [-3.141592653589793]]", "probability": 0.25, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/125", "requirement": "def find_length(string: str) -> int:\n\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6\n\"\"\"", "llm_generated_inputs": "[['11000010001'], ['101010'], ['000000'], ['111111'], ['10101'], ['1'], ['0'], [''], ['10'], ['01'], ['10000'], ['01111']]", "programs": ["def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        elif char == '1':\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        elif char == '1':\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        elif char == '1':\n            current_diff -= 1\n        if current_diff > max_diff:\n            max_diff = current_diff\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        elif char == '1':\n            current_diff -= 1\n        if current_diff > max_diff:\n            max_diff = current_diff\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        elif char == '1':\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        elif char == '1':\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff > max_diff:\n            max_diff = current_diff\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_length = 0\n    count = 0\n    count_map = {0: -1}\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count in count_map:\n            max_length = max(max_length, i - count_map[count])\n        else:\n            count_map[count] = i\n    return max_length", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    diff_map = {0: -1}\n    for i, char in enumerate(string):\n        current_diff += 1 if char == '0' else -1\n        if current_diff in diff_map:\n            max_diff = max(max_diff, i - diff_map[current_diff])\n        else:\n            diff_map[current_diff] = i\n    return max_diff", "def find_length(string: str) -> int:\n    diff = [0] * (len(string) + 1)\n    for i in range(1, len(string) + 1):\n        diff[i] = diff[i - 1] + (1 if string[i - 1] == '0' else -1)\n    index_map = {}\n    max_diff = 0\n    for i in range(len(diff)):\n        if diff[i] in index_map:\n            max_diff = max(max_diff, i - index_map[diff[i]])\n        else:\n            index_map[diff[i]] = i\n    return max_diff", "def find_length(string: str) -> int:\n    transformed = [1 if char == '0' else -1 for char in string]\n    max_difference = float('-inf')\n    current_sum = 0\n    for num in transformed:\n        current_sum += num\n        if current_sum > max_difference:\n            max_difference = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_difference"], "clusters": [{"programs_str": ["def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        elif char == '1':\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        elif char == '1':\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        elif char == '1':\n            current_diff -= 1\n        if current_diff > max_diff:\n            max_diff = current_diff\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        elif char == '1':\n            current_diff -= 1\n        if current_diff > max_diff:\n            max_diff = current_diff\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        elif char == '1':\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        elif char == '1':\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff > max_diff:\n            max_diff = current_diff\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff"], "outputs": "[[6], [1], [6], [0], [1], [0], [1], [0], [1], [1], [4], [1]]", "probability": 0.8, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def find_length(string: str) -> int:\n    max_length = 0\n    count = 0\n    count_map = {0: -1}\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count in count_map:\n            max_length = max(max_length, i - count_map[count])\n        else:\n            count_map[count] = i\n    return max_length", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    diff_map = {0: -1}\n    for i, char in enumerate(string):\n        current_diff += 1 if char == '0' else -1\n        if current_diff in diff_map:\n            max_diff = max(max_diff, i - diff_map[current_diff])\n        else:\n            diff_map[current_diff] = i\n    return max_diff", "def find_length(string: str) -> int:\n    diff = [0] * (len(string) + 1)\n    for i in range(1, len(string) + 1):\n        diff[i] = diff[i - 1] + (1 if string[i - 1] == '0' else -1)\n    index_map = {}\n    max_diff = 0\n    for i in range(len(diff)):\n        if diff[i] in index_map:\n            max_diff = max(max_diff, i - index_map[diff[i]])\n        else:\n            index_map[diff[i]] = i\n    return max_diff"], "outputs": "[[4], [6], [0], [0], [4], [0], [0], [0], [2], [2], [2], [2]]", "probability": 0.15, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['11000010001'], [4], [6]]]"}, {"programs_str": ["def find_length(string: str) -> int:\n    transformed = [1 if char == '0' else -1 for char in string]\n    max_difference = float('-inf')\n    current_sum = 0\n    for num in transformed:\n        current_sum += num\n        if current_sum > max_difference:\n            max_difference = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_difference"], "outputs": "[[6], [1], [6], [-1], [1], [-1], [1], [-inf], [1], [1], [4], [1]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/126", "requirement": "def sum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"", "llm_generated_inputs": "[[10, 15], [6, 8], [12, 18], [1, 1], [0, 10], [-10, -15], [10, 0], [11, 13], [24, 36]]", "programs": ["def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_gcd = gcd(a, b)\n    total_sum = 0\n    for i in range(1, common_gcd + 1):\n        if common_gcd % i == 0:\n            total_sum += i\n    return total_sum", "def sum(a: int, b: int) -> int:\n\n    def gcd(x, y):\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_divisor_sum = 0\n    g = gcd(a, b)\n    for i in range(1, g + 1):\n        if g % i == 0:\n            common_divisor_sum += i\n    return common_divisor_sum", "def sum(a: int, b: int) -> int:\n\n    def gcd(x, y):\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_divisors_sum = 0\n    common_divisor = gcd(a, b)\n    for i in range(1, common_divisor + 1):\n        if common_divisor % i == 0:\n            common_divisors_sum += i\n    return common_divisors_sum", "def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_divisors_sum = 0\n    gcd_value = gcd(a, b)\n    for i in range(1, gcd_value + 1):\n        if gcd_value % i == 0:\n            common_divisors_sum += i\n    return common_divisors_sum", "def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_gcd = gcd(a, b)\n    common_divisors_sum = sum((i for i in range(1, common_gcd + 1) if common_gcd % i == 0))\n    return common_divisors_sum", "def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_gcd = gcd(a, b)\n    common_divisors_sum = sum((i for i in range(1, common_gcd + 1) if common_gcd % i == 0))\n    return common_divisors_sum", "from typing import List\n\ndef common_divisors(a: int, b: int) -> List[int]:\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef sum(a: int, b: int) -> int:\n    return sum(common_divisors(a, b))", "def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n\n    def common_divisors(n: int) -> list:\n        divs = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divs.append(i)\n        return divs\n    gcd_value = gcd(a, b)\n    return sum(common_divisors(gcd_value))", "def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_gcd = gcd(a, b)\n    common_divisors_sum = sum((i for i in range(1, common_gcd + 1) if common_gcd % i == 0))\n    return common_divisors_sum", "def sum(a: int, b: int) -> int:\n\n    def common_divisors(x, y):\n        divisors = []\n        for i in range(1, min(x, y) + 1):\n            if x % i == 0 and y % i == 0:\n                divisors.append(i)\n        return divisors\n    return sum(common_divisors(a, b))", "def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_gcd = gcd(a, b)\n    common_divisors_sum = sum((i for i in range(1, common_gcd + 1) if common_gcd % i == 0))\n    return common_divisors_sum", "def sum(a: int, b: int) -> int:\n\n    def common_divisors(x, y):\n        return [i for i in range(1, min(x, y) + 1) if x % i == 0 and y % i == 0]\n    return sum(common_divisors(a, b))", "def sum(a: int, b: int) -> int:\n\n    def common_divisors(x: int, y: int):\n        divisors = []\n        for i in range(1, min(x, y) + 1):\n            if x % i == 0 and y % i == 0:\n                divisors.append(i)\n        return divisors\n    return sum(common_divisors(a, b))", "def sum(a: int, b: int) -> int:\n\n    def gcd(x, y):\n        while y:\n            x, y = (y, x % y)\n        return x\n\n    def common_divisors(n):\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n    common_div = gcd(a, b)\n    divisors = common_divisors(common_div)\n    return sum(divisors)", "def sum(a: int, b: int) -> int:\n\n    def gcd(x, y):\n        while y:\n            x, y = (y, x % y)\n        return x\n\n    def common_divisors(n):\n        divisors = set()\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n // i)\n        return divisors\n    g = gcd(a, b)\n    return sum(common_divisors(g))", "def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n    g = gcd(a, b)\n    common_divisors_sum = sum((i for i in range(1, g + 1) if g % i == 0))\n    return common_divisors_sum", "def sum(a: int, b: int) -> int:\n\n    def common_divisors(x, y):\n        divisors = []\n        for i in range(1, min(x, y) + 1):\n            if x % i == 0 and y % i == 0:\n                divisors.append(i)\n        return divisors\n    return sum(common_divisors(a, b))", "def sum(a: int, b: int) -> int:\n\n    def gcd(x, y):\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_gcd = gcd(a, b)\n    common_divisors_sum = sum((i for i in range(1, common_gcd + 1) if common_gcd % i == 0))\n    return common_divisors_sum", "def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_gcd = gcd(a, b)\n    common_divisors_sum = sum((i for i in range(1, common_gcd + 1) if common_gcd % i == 0))\n    return common_divisors_sum", "def sum(a: int, b: int) -> int:\n\n    def gcd(x, y):\n        while y:\n            x, y = (y, x % y)\n        return x\n\n    def common_divisors(n):\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n    g = gcd(a, b)\n    common_divs = common_divisors(g)\n    return sum(common_divs)"], "clusters": [{"programs_str": ["def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_gcd = gcd(a, b)\n    total_sum = 0\n    for i in range(1, common_gcd + 1):\n        if common_gcd % i == 0:\n            total_sum += i\n    return total_sum", "def sum(a: int, b: int) -> int:\n\n    def gcd(x, y):\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_divisor_sum = 0\n    g = gcd(a, b)\n    for i in range(1, g + 1):\n        if g % i == 0:\n            common_divisor_sum += i\n    return common_divisor_sum", "def sum(a: int, b: int) -> int:\n\n    def gcd(x, y):\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_divisors_sum = 0\n    common_divisor = gcd(a, b)\n    for i in range(1, common_divisor + 1):\n        if common_divisor % i == 0:\n            common_divisors_sum += i\n    return common_divisors_sum", "def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_divisors_sum = 0\n    gcd_value = gcd(a, b)\n    for i in range(1, gcd_value + 1):\n        if gcd_value % i == 0:\n            common_divisors_sum += i\n    return common_divisors_sum"], "outputs": "[[6], [3], [12], [1], [18], [0], [18], [1], [28]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_gcd = gcd(a, b)\n    common_divisors_sum = sum((i for i in range(1, common_gcd + 1) if common_gcd % i == 0))\n    return common_divisors_sum", "def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_gcd = gcd(a, b)\n    common_divisors_sum = sum((i for i in range(1, common_gcd + 1) if common_gcd % i == 0))\n    return common_divisors_sum", "from typing import List\n\ndef common_divisors(a: int, b: int) -> List[int]:\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef sum(a: int, b: int) -> int:\n    return sum(common_divisors(a, b))", "def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n\n    def common_divisors(n: int) -> list:\n        divs = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divs.append(i)\n        return divs\n    gcd_value = gcd(a, b)\n    return sum(common_divisors(gcd_value))", "def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_gcd = gcd(a, b)\n    common_divisors_sum = sum((i for i in range(1, common_gcd + 1) if common_gcd % i == 0))\n    return common_divisors_sum", "def sum(a: int, b: int) -> int:\n\n    def common_divisors(x, y):\n        divisors = []\n        for i in range(1, min(x, y) + 1):\n            if x % i == 0 and y % i == 0:\n                divisors.append(i)\n        return divisors\n    return sum(common_divisors(a, b))", "def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_gcd = gcd(a, b)\n    common_divisors_sum = sum((i for i in range(1, common_gcd + 1) if common_gcd % i == 0))\n    return common_divisors_sum", "def sum(a: int, b: int) -> int:\n\n    def common_divisors(x, y):\n        return [i for i in range(1, min(x, y) + 1) if x % i == 0 and y % i == 0]\n    return sum(common_divisors(a, b))", "def sum(a: int, b: int) -> int:\n\n    def common_divisors(x: int, y: int):\n        divisors = []\n        for i in range(1, min(x, y) + 1):\n            if x % i == 0 and y % i == 0:\n                divisors.append(i)\n        return divisors\n    return sum(common_divisors(a, b))", "def sum(a: int, b: int) -> int:\n\n    def gcd(x, y):\n        while y:\n            x, y = (y, x % y)\n        return x\n\n    def common_divisors(n):\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n    common_div = gcd(a, b)\n    divisors = common_divisors(common_div)\n    return sum(divisors)", "def sum(a: int, b: int) -> int:\n\n    def gcd(x, y):\n        while y:\n            x, y = (y, x % y)\n        return x\n\n    def common_divisors(n):\n        divisors = set()\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n // i)\n        return divisors\n    g = gcd(a, b)\n    return sum(common_divisors(g))", "def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n    g = gcd(a, b)\n    common_divisors_sum = sum((i for i in range(1, g + 1) if g % i == 0))\n    return common_divisors_sum", "def sum(a: int, b: int) -> int:\n\n    def common_divisors(x, y):\n        divisors = []\n        for i in range(1, min(x, y) + 1):\n            if x % i == 0 and y % i == 0:\n                divisors.append(i)\n        return divisors\n    return sum(common_divisors(a, b))", "def sum(a: int, b: int) -> int:\n\n    def gcd(x, y):\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_gcd = gcd(a, b)\n    common_divisors_sum = sum((i for i in range(1, common_gcd + 1) if common_gcd % i == 0))\n    return common_divisors_sum", "def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_gcd = gcd(a, b)\n    common_divisors_sum = sum((i for i in range(1, common_gcd + 1) if common_gcd % i == 0))\n    return common_divisors_sum", "def sum(a: int, b: int) -> int:\n\n    def gcd(x, y):\n        while y:\n            x, y = (y, x % y)\n        return x\n\n    def common_divisors(n):\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n    g = gcd(a, b)\n    common_divs = common_divisors(g)\n    return sum(common_divs)"], "outputs": "[['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError']]", "probability": 0.8, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10, 15], ['TypeError'], [6]]]"}]}
{"task_id": "Mbpp/127", "requirement": "def multiply_int(x: int, y: int) -> int:\n\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"", "llm_generated_inputs": "[[10, 20], [-10, 5], [0, 5], [5, 0], [-4, -6], [1, 1], [100, 200], [-7, 3], [0, 0], [2147483647, 1]]", "programs": ["def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y"], "clusters": [{"programs_str": ["def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y"], "outputs": "[[200], [-50], [0], [0], [24], [1], [20000], [-21], [0], [2147483647]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/128", "requirement": "from typing import List\n\n\ndef long_words(n: int, s: str) -> List[str]:\n\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"", "llm_generated_inputs": "[[3, 'python is a programming language'], [5, 'the quick brown fox jumps over the lazy dog'], [4, 'hello world this is an example'], [0, 'a b c d e f g h i j k l m n o p q r s t u v w x y z'], [10, 'I love programming in Python and data science'], [2, ''], [1, 'word']]", "programs": ["from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]"], "clusters": [{"programs_str": ["from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]"], "outputs": "[[['python', 'programming', 'language']], [[]], [['hello', 'world', 'example']], [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']], [['programming']], [[]], [['word']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/129", "requirement": "from typing import List\n\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"", "llm_generated_inputs": "[[[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]], [[[16, 23, 17, 45], [3, 9, 4, 2], [5, 13, 1, 11], [12, 14, 15, 6]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[8, 1, 6], [3, 5, 7], [4, 9, 2]]], [[[2, 2], [2, 2]]], [[[1]]], [[[1, 2], [3, 4]]], [[[5, 5, 5], [5, 5, 5], [5, 5, 5]]]]", "programs": ["from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    s = n * (n ** 2 + 1) // 2\n    for i in range(n):\n        if sum(my_matrix[i]) != s or sum((row[i] for row in my_matrix)) != s:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != s or sum((my_matrix[i][n - 1 - i] for i in range(n))) != s:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_constant = n * (n * n + 1) // 2\n    for row in my_matrix:\n        if sum(row) != magic_constant:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_constant:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_constant:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_constant:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = n * (n ** 2 + 1) // 2\n    for i in range(n):\n        if sum(my_matrix[i]) != magic_sum or sum((my_matrix[j][i] for j in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_constant = n * (n ** 2 + 1) // 2\n    for row in my_matrix:\n        if sum(row) != magic_constant:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_constant:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_constant:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_constant:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = n * (n ** 2 + 1) // 2\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if any((len(row) != n for row in my_matrix)):\n        return False\n    magic_constant = n * (n * n + 1) // 2\n    for row in my_matrix:\n        if sum(row) != magic_constant:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_constant:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_constant:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_constant:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_constant = n * (n ** 2 + 1) // 2\n    for row in my_matrix:\n        if sum(row) != magic_constant:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_constant:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_constant:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_constant:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = n * (n ** 2 + 1) // 2\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_constant = n * (n * n + 1) // 2\n    for row in my_matrix:\n        if sum(row) != magic_constant:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_constant:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_constant:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_constant:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = n * (n * n + 1) // 2\n    for i in range(n):\n        if sum(my_matrix[i]) != magic_sum:\n            return False\n        if sum((my_matrix[j][i] for j in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = n * (n ** 2 + 1) // 2\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - i - 1] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = n * (n * n + 1) // 2\n    for i in range(n):\n        if sum(my_matrix[i]) != magic_sum or sum((my_matrix[j][i] for j in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum or sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = n * (n * n + 1) // 2\n    for i in range(n):\n        if sum(my_matrix[i]) != magic_sum or sum((my_matrix[j][i] for j in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum or sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = n * (n ** 2 + 1) // 2\n    for i in range(n):\n        if sum(my_matrix[i]) != magic_sum or sum((my_matrix[j][i] for j in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum or sum((my_matrix[i][n - i - 1] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = n * (n * n + 1) // 2\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if n == 0 or any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = n * (n ** 2 + 1) // 2\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if n == 0 or any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True"], "clusters": [{"programs_str": ["from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    s = n * (n ** 2 + 1) // 2\n    for i in range(n):\n        if sum(my_matrix[i]) != s or sum((row[i] for row in my_matrix)) != s:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != s or sum((my_matrix[i][n - 1 - i] for i in range(n))) != s:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_constant = n * (n * n + 1) // 2\n    for row in my_matrix:\n        if sum(row) != magic_constant:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_constant:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_constant:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_constant:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = n * (n ** 2 + 1) // 2\n    for i in range(n):\n        if sum(my_matrix[i]) != magic_sum or sum((my_matrix[j][i] for j in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_constant = n * (n ** 2 + 1) // 2\n    for row in my_matrix:\n        if sum(row) != magic_constant:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_constant:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_constant:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_constant:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = n * (n ** 2 + 1) // 2\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if any((len(row) != n for row in my_matrix)):\n        return False\n    magic_constant = n * (n * n + 1) // 2\n    for row in my_matrix:\n        if sum(row) != magic_constant:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_constant:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_constant:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_constant:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_constant = n * (n ** 2 + 1) // 2\n    for row in my_matrix:\n        if sum(row) != magic_constant:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_constant:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_constant:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_constant:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = n * (n ** 2 + 1) // 2\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_constant = n * (n * n + 1) // 2\n    for row in my_matrix:\n        if sum(row) != magic_constant:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_constant:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_constant:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_constant:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = n * (n * n + 1) // 2\n    for i in range(n):\n        if sum(my_matrix[i]) != magic_sum:\n            return False\n        if sum((my_matrix[j][i] for j in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = n * (n ** 2 + 1) // 2\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - i - 1] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = n * (n * n + 1) // 2\n    for i in range(n):\n        if sum(my_matrix[i]) != magic_sum or sum((my_matrix[j][i] for j in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum or sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = n * (n * n + 1) // 2\n    for i in range(n):\n        if sum(my_matrix[i]) != magic_sum or sum((my_matrix[j][i] for j in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum or sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = n * (n ** 2 + 1) // 2\n    for i in range(n):\n        if sum(my_matrix[i]) != magic_sum or sum((my_matrix[j][i] for j in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum or sum((my_matrix[i][n - i - 1] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = n * (n * n + 1) // 2\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if n == 0 or any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = n * (n ** 2 + 1) // 2\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True"], "outputs": "[[True], [False], [False], [True], [False], [True], [False], [True]]", "probability": 0.8, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if n == 0 or any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True"], "outputs": "[[True], [False], [False], [True], [True], [True], [False], [True]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/130", "requirement": "from typing import List\n\n\ndef max_occurrences(nums: List[int]) -> int:\n\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"", "llm_generated_inputs": "[[[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]], [[1, 1, 1, 2, 2, 3]], [[3, 3, 3, 4, 4, 4, 4, 4]], [[10, 20, 30, 10, 20, 10]], [[5, 5, 5, 5, 5, 5, 5, 5]], [[1]], [[1, 2, 3, 4, 5]], [[-1, -2, -1, -3, -1]], [[0, 0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4]]]", "programs": ["from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    counter = Counter(nums)\n    return max(counter, key=counter.get)", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    frequency = Counter(nums)\n    return frequency.most_common(1)[0][0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return count.most_common(1)[0][0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return max(count.items(), key=lambda x: x[1])[0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return count.most_common(1)[0][0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return max(count.items(), key=lambda x: x[1])[0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return count.most_common(1)[0][0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return count.most_common(1)[0][0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    frequency = Counter(nums)\n    return max(frequency.items(), key=lambda x: x[1])[0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    frequency = Counter(nums)\n    return max(frequency.items(), key=lambda item: item[1])[0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        return None\n    frequency = Counter(nums)\n    return max(frequency, key=frequency.get)", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return max(count, key=count.get)", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    counts = Counter(nums)\n    return max(counts.items(), key=lambda x: x[1])[0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return max(count.items(), key=lambda x: x[1])[0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    return Counter(nums).most_common(1)[0][0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return max(count.items(), key=lambda x: x[1])[0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return max(count, key=count.get)", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    frequency = Counter(nums)\n    return max(frequency.items(), key=lambda x: x[1])[0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return count.most_common(1)[0][0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return count.most_common(1)[0][0]"], "clusters": [{"programs_str": ["from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    counter = Counter(nums)\n    return max(counter, key=counter.get)", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    frequency = Counter(nums)\n    return frequency.most_common(1)[0][0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return count.most_common(1)[0][0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return max(count.items(), key=lambda x: x[1])[0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return count.most_common(1)[0][0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return max(count.items(), key=lambda x: x[1])[0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return count.most_common(1)[0][0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return count.most_common(1)[0][0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    frequency = Counter(nums)\n    return max(frequency.items(), key=lambda x: x[1])[0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    frequency = Counter(nums)\n    return max(frequency.items(), key=lambda item: item[1])[0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        return None\n    frequency = Counter(nums)\n    return max(frequency, key=frequency.get)", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return max(count, key=count.get)", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    counts = Counter(nums)\n    return max(counts.items(), key=lambda x: x[1])[0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return max(count.items(), key=lambda x: x[1])[0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    return Counter(nums).most_common(1)[0][0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return max(count.items(), key=lambda x: x[1])[0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return max(count, key=count.get)", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    frequency = Counter(nums)\n    return max(frequency.items(), key=lambda x: x[1])[0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return count.most_common(1)[0][0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return count.most_common(1)[0][0]"], "outputs": "[[2], [1], [4], [10], [5], [1], [1], [-1], [3]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/131", "requirement": "def reverse_vowels(str1: str) -> str:\n\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"", "llm_generated_inputs": "[['hello'], ['leetcode'], ['Python'], ['Reverse Vowels'], [''], ['aA'], ['A man, a plan, a canal: Panama'], ['12345'], ['!@#$%^&*()'], ['cOdIng']]", "programs": ["def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    reversed_vowels = [str1[i] for i in reversed(vowel_indices)]\n    str_list = list(str1)\n    for index, vowel in zip(vowel_indices, reversed_vowels):\n        str_list[index] = vowel\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        while left < right and str_list[left] not in vowels:\n            left += 1\n        while left < right and str_list[right] not in vowels:\n            right -= 1\n        if left < right:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        while left < right and str_list[left] not in vowels:\n            left += 1\n        while left < right and str_list[right] not in vowels:\n            right -= 1\n        if left < right:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str1_list = list(str1)\n    left, right = (0, len(str1) - 1)\n    while left < right:\n        if str1_list[left] not in vowels:\n            left += 1\n        elif str1_list[right] not in vowels:\n            right -= 1\n        else:\n            str1_list[left], str1_list[right] = (str1_list[right], str1_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str1_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = set('aeiouAEIOU')\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = set('aeiouAEIOU')\n    s = list(str1)\n    left, right = (0, len(s) - 1)\n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = (s[right], s[left])\n            left += 1\n            right -= 1\n    return ''.join(s)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        while left < right and str_list[left] not in vowels:\n            left += 1\n        while left < right and str_list[right] not in vowels:\n            right -= 1\n        if left < right:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    s = list(str1)\n    left, right = (0, len(s) - 1)\n    while left < right:\n        while left < right and s[left] not in vowels:\n            left += 1\n        while left < right and s[right] not in vowels:\n            right -= 1\n        if left < right:\n            s[left], s[right] = (s[right], s[left])\n            left += 1\n            right -= 1\n    return ''.join(s)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n            continue\n        if str_list[right] not in vowels:\n            right -= 1\n            continue\n        str_list[left], str_list[right] = (str_list[right], str_list[left])\n        left += 1\n        right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        while left < right and str_list[left] not in vowels:\n            left += 1\n        while left < right and str_list[right] not in vowels:\n            right -= 1\n        if left < right:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = set('aeiouAEIOU')\n    str1_list = list(str1)\n    left, right = (0, len(str1) - 1)\n    while left < right:\n        if str1_list[left] not in vowels:\n            left += 1\n        elif str1_list[right] not in vowels:\n            right -= 1\n        else:\n            str1_list[left], str1_list[right] = (str1_list[right], str1_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str1_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        if str_list[left] in vowels and str_list[right] in vowels:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n        if str_list[left] not in vowels:\n            left += 1\n        if str_list[right] not in vowels:\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = set('aeiouAEIOU')\n    str1_list = list(str1)\n    left, right = (0, len(str1) - 1)\n    while left < right:\n        if str1_list[left] in vowels and str1_list[right] in vowels:\n            str1_list[left], str1_list[right] = (str1_list[right], str1_list[left])\n            left += 1\n            right -= 1\n        if str1_list[left] not in vowels:\n            left += 1\n        if str1_list[right] not in vowels:\n            right -= 1\n    return ''.join(str1_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    i, j = (0, len(str1) - 1)\n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = (str_list[j], str_list[i])\n            i += 1\n            j -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = set('aeiouAEIOU')\n    str1_list = list(str1)\n    left, right = (0, len(str1) - 1)\n    while left < right:\n        while left < right and str1_list[left] not in vowels:\n            left += 1\n        while left < right and str1_list[right] not in vowels:\n            right -= 1\n        if left < right:\n            str1_list[left], str1_list[right] = (str1_list[right], str1_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str1_list)"], "clusters": [{"programs_str": ["def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    reversed_vowels = [str1[i] for i in reversed(vowel_indices)]\n    str_list = list(str1)\n    for index, vowel in zip(vowel_indices, reversed_vowels):\n        str_list[index] = vowel\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        while left < right and str_list[left] not in vowels:\n            left += 1\n        while left < right and str_list[right] not in vowels:\n            right -= 1\n        if left < right:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        while left < right and str_list[left] not in vowels:\n            left += 1\n        while left < right and str_list[right] not in vowels:\n            right -= 1\n        if left < right:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str1_list = list(str1)\n    left, right = (0, len(str1) - 1)\n    while left < right:\n        if str1_list[left] not in vowels:\n            left += 1\n        elif str1_list[right] not in vowels:\n            right -= 1\n        else:\n            str1_list[left], str1_list[right] = (str1_list[right], str1_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str1_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = set('aeiouAEIOU')\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = set('aeiouAEIOU')\n    s = list(str1)\n    left, right = (0, len(s) - 1)\n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = (s[right], s[left])\n            left += 1\n            right -= 1\n    return ''.join(s)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        while left < right and str_list[left] not in vowels:\n            left += 1\n        while left < right and str_list[right] not in vowels:\n            right -= 1\n        if left < right:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    s = list(str1)\n    left, right = (0, len(s) - 1)\n    while left < right:\n        while left < right and s[left] not in vowels:\n            left += 1\n        while left < right and s[right] not in vowels:\n            right -= 1\n        if left < right:\n            s[left], s[right] = (s[right], s[left])\n            left += 1\n            right -= 1\n    return ''.join(s)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n            continue\n        if str_list[right] not in vowels:\n            right -= 1\n            continue\n        str_list[left], str_list[right] = (str_list[right], str_list[left])\n        left += 1\n        right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        while left < right and str_list[left] not in vowels:\n            left += 1\n        while left < right and str_list[right] not in vowels:\n            right -= 1\n        if left < right:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = set('aeiouAEIOU')\n    str1_list = list(str1)\n    left, right = (0, len(str1) - 1)\n    while left < right:\n        if str1_list[left] not in vowels:\n            left += 1\n        elif str1_list[right] not in vowels:\n            right -= 1\n        else:\n            str1_list[left], str1_list[right] = (str1_list[right], str1_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str1_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        if str_list[left] in vowels and str_list[right] in vowels:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n        if str_list[left] not in vowels:\n            left += 1\n        if str_list[right] not in vowels:\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = set('aeiouAEIOU')\n    str1_list = list(str1)\n    left, right = (0, len(str1) - 1)\n    while left < right:\n        if str1_list[left] in vowels and str1_list[right] in vowels:\n            str1_list[left], str1_list[right] = (str1_list[right], str1_list[left])\n            left += 1\n            right -= 1\n        if str1_list[left] not in vowels:\n            left += 1\n        if str1_list[right] not in vowels:\n            right -= 1\n    return ''.join(str1_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    i, j = (0, len(str1) - 1)\n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = (str_list[j], str_list[i])\n            i += 1\n            j -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = (0, len(str_list) - 1)\n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = set('aeiouAEIOU')\n    str1_list = list(str1)\n    left, right = (0, len(str1) - 1)\n    while left < right:\n        while left < right and str1_list[left] not in vowels:\n            left += 1\n        while left < right and str1_list[right] not in vowels:\n            right -= 1\n        if left < right:\n            str1_list[left], str1_list[right] = (str1_list[right], str1_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str1_list)"], "outputs": "[['holle'], ['leotcede'], ['Python'], ['Revorse Vewels'], [''], ['Aa'], ['a man, a plan, a canal: PanamA'], ['12345'], ['!@#$%^&*()'], ['cIdOng']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/132", "requirement": "from typing import Tuple\n\n\ndef tup_string(tup1: Tuple[str]) -> str:\n\"\"\"\nWrite a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"", "llm_generated_inputs": "[[('a', 'b', 'c')], [('hello', 'world')], [('this', 'is', 'a', 'test')], [('single',)], [('multiple', 'spaces', '   ')], [()], [('case', 'SENSITIVE', 'Check')], [('1', '2', '3', '4', '5')], [('!', '@', '#', '$', '%')]]", "programs": ["from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)"], "clusters": [{"programs_str": ["from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)"], "outputs": "[['abc'], ['helloworld'], ['thisisatest'], ['single'], ['multiplespaces   '], [''], ['caseSENSITIVECheck'], ['12345'], ['!@#$%']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/133", "requirement": "from typing import List\n\n\ndef sum_negativenum(nums: List[int]) -> int:\n\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"", "llm_generated_inputs": "[[[2, 4, -6, -9, 11, -12, 14, -5, 17]], [[-1, -2, -3, -4, -5]], [[1, 2, 3, 4, 5]], [[-10, 10, 0]], [[-1, 0, 1]], [[0, 0, 0]], [[-8, 2, -2, 4, -4]], [[-7, -3, 0, 2, 5]], [[3, -8, -2, -4, 6, -1]], [[-100, -200, -300, -400]]]", "programs": ["from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))"], "clusters": [{"programs_str": ["from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))"], "outputs": "[[-32], [-15], [0], [-10], [-1], [0], [-14], [-10], [-15], [-1000]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/135", "requirement": "def hexagonal_num(n: int) -> int:\n\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [10], [0], [-1], [100]]", "programs": ["def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)"], "clusters": [{"programs_str": ["def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)"], "outputs": "[[1], [6], [15], [190], [0], [3], [19900]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/137", "requirement": "from typing import List\n\n\ndef zero_count(nums: List[int]) -> float:\n\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"", "llm_generated_inputs": "[[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]], [[0, 0, 0, 0]], [[1, 2, 3, 4]], [[-1, -2, -3, -4]], [[0, 1, 2, 0, 0, -4, -5]], [[]], [[1, 0, -1, 0, 0]], [[-1, -2, 0, 0, 3, 4]], [[0, -1, 0, 2, 0]], [[0, 0, 1, 1, 1]]]", "programs": ["from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = sum((1 for num in nums if num != 0))\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    return zeroes / non_zeroes if non_zeroes > 0 else float('inf')", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = sum((1 for num in nums if num != 0))\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = sum((1 for num in nums if num != 0))\n    return zeroes / non_zeroes if non_zeroes > 0 else float('inf')", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = sum((1 for num in nums if num != 0))\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = sum((1 for num in nums if num != 0))\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for n in nums if n == 0))\n    non_zeroes = sum((1 for n in nums if n != 0))\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    return zeroes / non_zeroes if non_zeroes > 0 else float('inf')", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = sum((1 for num in nums if num != 0))\n    total = zeroes + non_zeroes\n    if total == 0:\n        return 0.0\n    return zeroes / non_zeroes"], "clusters": [{"programs_str": ["from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = sum((1 for num in nums if num != 0))\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    return zeroes / non_zeroes if non_zeroes > 0 else float('inf')", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = sum((1 for num in nums if num != 0))\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = sum((1 for num in nums if num != 0))\n    return zeroes / non_zeroes if non_zeroes > 0 else float('inf')", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = sum((1 for num in nums if num != 0))\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = sum((1 for num in nums if num != 0))\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for n in nums if n == 0))\n    non_zeroes = sum((1 for n in nums if n != 0))\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    return zeroes / non_zeroes if non_zeroes > 0 else float('inf')"], "outputs": "[[0.18181818181818182], [inf], [0.0], [0.0], [0.75], [inf], [1.5], [0.5], [1.5], [0.6666666666666666]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = sum((1 for num in nums if num != 0))\n    total = zeroes + non_zeroes\n    if total == 0:\n        return 0.0\n    return zeroes / non_zeroes"], "outputs": "[[0.18181818181818182], ['ZeroDivisionError'], [0.0], [0.0], [0.75], [0.0], [1.5], [0.5], [1.5], [0.6666666666666666]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/138", "requirement": "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [15], [16], [31], [32], [63], [64], [100], [1023], [1024], [2047], [2048]]", "programs": ["def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0 or n == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0 or (n > 0 and n & -n == n)", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0 or n == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0 or n == 1", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0 or n == sum((2 ** i for i in range(n.bit_length()))) - 1", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0 or (n > 0 and n & n - 1 != 0)", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0 or n & n - 1 != 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n < 1:\n        return False\n    return n & n - 1 == 0 or n == 1 or n & n - 1 != 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0 or n >= 2", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0 or (n > 0 and n - 1 & n) == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0 or (n > 0 and is_Sum_Of_Powers_Of_Two(n - 1))"], "clusters": [{"programs_str": ["def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0 or n == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0 or (n > 0 and n & -n == n)", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0 or n == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0 or n == 1", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0"], "outputs": "[[False], [True], [True], [False], [True], [False], [False], [False], [True], [False], [False], [False], [True], [False], [True], [False], [True], [False], [False], [True], [False], [True]]", "probability": 0.65, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [False], [True]]]"}, {"programs_str": ["def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0 or n == sum((2 ** i for i in range(n.bit_length()))) - 1"], "outputs": "[[False], [True], [True], [False], [True], [False], [True], [False], [True], [False], [False], [False], [True], [False], [True], [False], [True], [False], [False], [True], [False], [True]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [False], [True]]]"}, {"programs_str": ["def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0 or (n > 0 and n & n - 1 != 0)", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0 or n & n - 1 != 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n < 1:\n        return False\n    return n & n - 1 == 0 or n == 1 or n & n - 1 != 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0 or n >= 2"], "outputs": "[[False], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0 or (n > 0 and n - 1 & n) == 0"], "outputs": "[[True], [True], [True], [False], [True], [False], [False], [False], [True], [False], [False], [False], [True], [False], [True], [False], [True], [False], [False], [True], [False], [True]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [False], [True]]]"}, {"programs_str": ["def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0 or (n > 0 and is_Sum_Of_Powers_Of_Two(n - 1))"], "outputs": "[[False], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], ['RecursionError'], [True]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/139", "requirement": "def circle_circumference(r: float) -> float:\n\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"", "llm_generated_inputs": "[[10], [0], [2.5], [100], [-5], [3.14], [1000000.0]]", "programs": ["import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r"], "clusters": [{"programs_str": ["import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r"], "outputs": "[[62.83185307179586], [0.0], [15.707963267948966], [628.3185307179587], [-31.41592653589793], [19.729201864543903], [6283185.307179586]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/140", "requirement": "from typing import List\nfrom typing import Set\n\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"", "llm_generated_inputs": "[[[[], []]], [[(1, 2), (3, 4)]], [[(5, 6, 7), (5, 7, 8), (8,)]], [[(1, 1, 1), (2, 2), (3, 3, 3)]], [[(9,), (10, 11), (10,)]], [[(0, -1), (-2, -3, -4)]]]", "programs": ["from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((number for sublist in test_list for number in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List\nfrom typing import Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List\nfrom typing import Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List\nfrom typing import Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List\nfrom typing import Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List\nfrom typing import Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List\nfrom typing import Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((number for sublist in test_list for number in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List\nfrom typing import Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    result = set()\n    for sublist in test_list:\n        result.update(sublist)\n    return result", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))"], "clusters": [{"programs_str": ["from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((number for sublist in test_list for number in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List\nfrom typing import Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List\nfrom typing import Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List\nfrom typing import Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List\nfrom typing import Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List\nfrom typing import Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List\nfrom typing import Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((number for sublist in test_list for number in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List\nfrom typing import Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    result = set()\n    for sublist in test_list:\n        result.update(sublist)\n    return result", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))"], "outputs": "[[set()], [{1, 2, 3, 4}], [{8, 5, 6, 7}], [{1, 2, 3}], [{9, 10, 11}], [{0, -2, -4, -3, -1}]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/141", "requirement": "from typing import List\n\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"", "llm_generated_inputs": "[[[15, 79, 25, 38, 69]], [[3, 6, 2, 9, 1]], [[5, 4, 3, 2, 1]], [[1, 2, 3, 4, 5]], [[-1, -3, -2, 0, 2]], [[0]], [[]], [[42]], [[5, 1, 4, 2, 8]], [[100, 99, 98, 97, 96, 95]]]", "programs": ["from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(k: int) -> None:\n        left, right = (0, k)\n        while left < right:\n            nums[left], nums[right] = (nums[right], nums[left])\n            left += 1\n            right -= 1\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index != size - 1:\n            if max_index != 0:\n                flip(max_index)\n            flip(size - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(k: int) -> None:\n        left = 0\n        right = k\n        while left < right:\n            nums[left], nums[right] = (nums[right], nums[left])\n            left += 1\n            right -= 1\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index != size - 1:\n            if max_index != 0:\n                flip(max_index)\n            flip(size - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist, k):\n        return sublist[:k][::-1] + sublist[k:]\n\n    def find_max_index(sublist, n):\n        max_idx = 0\n        for i in range(1, n):\n            if sublist[i] > sublist[max_idx]:\n                max_idx = i\n        return max_idx\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_idx = find_max_index(nums, size)\n        if max_idx != size - 1:\n            if max_idx != 0:\n                nums = flip(nums, max_idx + 1)\n            nums = flip(nums, size)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist: List[int], k: int) -> List[int]:\n        return sublist[:k][::-1] + sublist[k:]\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index != size - 1:\n            if max_index > 0:\n                nums = flip(nums, max_index + 1)\n            nums = flip(nums, size)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(k):\n        nonlocal nums\n        nums[:k + 1] = reversed(nums[:k + 1])\n\n    def find_max_index(n):\n        return max(range(n), key=lambda i: nums[i])\n    n = len(nums)\n    for i in range(n - 1, 0, -1):\n        max_index = find_max_index(i + 1)\n        if max_index != i:\n            if max_index != 0:\n                flip(max_index)\n            flip(i)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(k: int) -> None:\n        nums[:k] = reversed(nums[:k])\n\n    def find_max_idx(n: int) -> int:\n        max_idx = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        return max_idx\n    n = len(nums)\n    for current_size in range(n, 1, -1):\n        max_idx = find_max_idx(current_size)\n        if max_idx != current_size - 1:\n            if max_idx != 0:\n                flip(max_idx + 1)\n            flip(current_size)\n    return nums", "from typing import List\n\ndef flip(arr: List[int], k: int) -> List[int]:\n    return arr[:k][::-1] + arr[k:]\n\ndef find_max_index(arr: List[int], n: int) -> int:\n    max_index = 0\n    for i in range(1, n):\n        if arr[i] > arr[max_index]:\n            max_index = i\n    return max_index\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    n = len(nums)\n    for curr_size in range(n, 1, -1):\n        max_index = find_max_index(nums, curr_size)\n        if max_index != curr_size - 1:\n            if max_index != 0:\n                nums = flip(nums, max_index + 1)\n            nums = flip(nums, curr_size)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist: List[int], k: int) -> List[int]:\n        return sublist[:k][::-1] + sublist[k:]\n    n = len(nums)\n    for curr_size in range(n, 1, -1):\n        max_index = nums.index(max(nums[:curr_size]))\n        if max_index != curr_size - 1:\n            if max_index != 0:\n                nums = flip(nums, max_index + 1)\n            nums = flip(nums, curr_size)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(k: int) -> None:\n        nums[:k + 1] = reversed(nums[:k + 1])\n\n    def find_max_index(n: int) -> int:\n        return nums.index(max(nums[:n]))\n    n = len(nums)\n    for i in range(n, 1, -1):\n        max_index = find_max_index(i)\n        if max_index != i - 1:\n            if max_index != 0:\n                flip(max_index)\n            flip(i - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(k: int) -> None:\n        left, right = (0, k)\n        while left < right:\n            nums[left], nums[right] = (nums[right], nums[left])\n            left += 1\n            right -= 1\n\n    def find_max_index(n: int) -> int:\n        max_index = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        return max_index\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = find_max_index(size)\n        if max_index != size - 1:\n            if max_index != 0:\n                flip(max_index)\n            flip(size - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(k):\n        nums[:k] = reversed(nums[:k])\n    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            if max_index != 0:\n                flip(max_index + 1)\n            flip(i)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(end: int):\n        left = 0\n        while left < end:\n            nums[left], nums[end] = (nums[end], nums[left])\n            left += 1\n            end -= 1\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index != size - 1:\n            if max_index != 0:\n                flip(max_index)\n            flip(size - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist: List[int], k: int) -> List[int]:\n        return sublist[:k][::-1] + sublist[k:]\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = nums[:size].index(max(nums[:size]))\n        if max_index != size - 1:\n            if max_index != 0:\n                nums = flip(nums, max_index + 1)\n            nums = flip(nums, size)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(end: int) -> None:\n        start = 0\n        while start < end:\n            nums[start], nums[end] = (nums[end], nums[start])\n            start += 1\n            end -= 1\n\n    def find_max_index(end: int) -> int:\n        max_index = 0\n        for i in range(1, end + 1):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        return max_index\n    n = len(nums)\n    for current_size in range(n, 1, -1):\n        max_index = find_max_index(current_size - 1)\n        if max_index != current_size - 1:\n            flip(max_index)\n            flip(current_size - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist: List[int], k: int) -> List[int]:\n        return sublist[:k][::-1] + sublist[k:]\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index != size - 1:\n            if max_index != 0:\n                nums = flip(nums, max_index + 1)\n            nums = flip(nums, size)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist: List[int], k: int) -> List[int]:\n        return sublist[:k][::-1] + sublist[k:]\n\n    def find_max_index(arr: List[int], n: int) -> int:\n        max_index = 0\n        for i in range(1, n):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n    n = len(nums)\n    for i in range(n, 1, -1):\n        max_index = find_max_index(nums, i)\n        if max_index != i - 1:\n            if max_index != 0:\n                nums = flip(nums, max_index + 1)\n            nums = flip(nums, i)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(end: int):\n        start = 0\n        while start < end:\n            nums[start], nums[end] = (nums[end], nums[start])\n            start += 1\n            end -= 1\n    for size in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[0:size]))\n        if max_index != size - 1:\n            if max_index != 0:\n                flip(max_index)\n            flip(size - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist: List[int], k: int) -> List[int]:\n        return sublist[:k][::-1] + sublist[k:]\n    n = len(nums)\n    for i in range(n):\n        max_index = 0\n        for j in range(1, n - i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != n - i - 1:\n            nums = flip(nums, max_index + 1)\n            nums = flip(nums, n - i)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(k):\n        nums[:k] = reversed(nums[:k])\n\n    def find_max_index(n):\n        max_index = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        return max_index\n    n = len(nums)\n    for i in range(n, 1, -1):\n        max_index = find_max_index(i)\n        if max_index != i - 1:\n            if max_index != 0:\n                flip(max_index + 1)\n            flip(i)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist: List[int], k: int) -> List[int]:\n        return sublist[:k][::-1] + sublist[k:]\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index != size - 1:\n            if max_index != 0:\n                nums = flip(nums, max_index + 1)\n            nums = flip(nums, size)\n    return nums"], "clusters": [{"programs_str": ["from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(k: int) -> None:\n        left, right = (0, k)\n        while left < right:\n            nums[left], nums[right] = (nums[right], nums[left])\n            left += 1\n            right -= 1\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index != size - 1:\n            if max_index != 0:\n                flip(max_index)\n            flip(size - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(k: int) -> None:\n        left = 0\n        right = k\n        while left < right:\n            nums[left], nums[right] = (nums[right], nums[left])\n            left += 1\n            right -= 1\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index != size - 1:\n            if max_index != 0:\n                flip(max_index)\n            flip(size - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist, k):\n        return sublist[:k][::-1] + sublist[k:]\n\n    def find_max_index(sublist, n):\n        max_idx = 0\n        for i in range(1, n):\n            if sublist[i] > sublist[max_idx]:\n                max_idx = i\n        return max_idx\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_idx = find_max_index(nums, size)\n        if max_idx != size - 1:\n            if max_idx != 0:\n                nums = flip(nums, max_idx + 1)\n            nums = flip(nums, size)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist: List[int], k: int) -> List[int]:\n        return sublist[:k][::-1] + sublist[k:]\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index != size - 1:\n            if max_index > 0:\n                nums = flip(nums, max_index + 1)\n            nums = flip(nums, size)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(k):\n        nonlocal nums\n        nums[:k + 1] = reversed(nums[:k + 1])\n\n    def find_max_index(n):\n        return max(range(n), key=lambda i: nums[i])\n    n = len(nums)\n    for i in range(n - 1, 0, -1):\n        max_index = find_max_index(i + 1)\n        if max_index != i:\n            if max_index != 0:\n                flip(max_index)\n            flip(i)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(k: int) -> None:\n        nums[:k] = reversed(nums[:k])\n\n    def find_max_idx(n: int) -> int:\n        max_idx = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        return max_idx\n    n = len(nums)\n    for current_size in range(n, 1, -1):\n        max_idx = find_max_idx(current_size)\n        if max_idx != current_size - 1:\n            if max_idx != 0:\n                flip(max_idx + 1)\n            flip(current_size)\n    return nums", "from typing import List\n\ndef flip(arr: List[int], k: int) -> List[int]:\n    return arr[:k][::-1] + arr[k:]\n\ndef find_max_index(arr: List[int], n: int) -> int:\n    max_index = 0\n    for i in range(1, n):\n        if arr[i] > arr[max_index]:\n            max_index = i\n    return max_index\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    n = len(nums)\n    for curr_size in range(n, 1, -1):\n        max_index = find_max_index(nums, curr_size)\n        if max_index != curr_size - 1:\n            if max_index != 0:\n                nums = flip(nums, max_index + 1)\n            nums = flip(nums, curr_size)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist: List[int], k: int) -> List[int]:\n        return sublist[:k][::-1] + sublist[k:]\n    n = len(nums)\n    for curr_size in range(n, 1, -1):\n        max_index = nums.index(max(nums[:curr_size]))\n        if max_index != curr_size - 1:\n            if max_index != 0:\n                nums = flip(nums, max_index + 1)\n            nums = flip(nums, curr_size)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(k: int) -> None:\n        nums[:k + 1] = reversed(nums[:k + 1])\n\n    def find_max_index(n: int) -> int:\n        return nums.index(max(nums[:n]))\n    n = len(nums)\n    for i in range(n, 1, -1):\n        max_index = find_max_index(i)\n        if max_index != i - 1:\n            if max_index != 0:\n                flip(max_index)\n            flip(i - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(k: int) -> None:\n        left, right = (0, k)\n        while left < right:\n            nums[left], nums[right] = (nums[right], nums[left])\n            left += 1\n            right -= 1\n\n    def find_max_index(n: int) -> int:\n        max_index = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        return max_index\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = find_max_index(size)\n        if max_index != size - 1:\n            if max_index != 0:\n                flip(max_index)\n            flip(size - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(k):\n        nums[:k] = reversed(nums[:k])\n    for i in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            if max_index != 0:\n                flip(max_index + 1)\n            flip(i)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(end: int):\n        left = 0\n        while left < end:\n            nums[left], nums[end] = (nums[end], nums[left])\n            left += 1\n            end -= 1\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index != size - 1:\n            if max_index != 0:\n                flip(max_index)\n            flip(size - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist: List[int], k: int) -> List[int]:\n        return sublist[:k][::-1] + sublist[k:]\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = nums[:size].index(max(nums[:size]))\n        if max_index != size - 1:\n            if max_index != 0:\n                nums = flip(nums, max_index + 1)\n            nums = flip(nums, size)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(end: int) -> None:\n        start = 0\n        while start < end:\n            nums[start], nums[end] = (nums[end], nums[start])\n            start += 1\n            end -= 1\n\n    def find_max_index(end: int) -> int:\n        max_index = 0\n        for i in range(1, end + 1):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        return max_index\n    n = len(nums)\n    for current_size in range(n, 1, -1):\n        max_index = find_max_index(current_size - 1)\n        if max_index != current_size - 1:\n            flip(max_index)\n            flip(current_size - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist: List[int], k: int) -> List[int]:\n        return sublist[:k][::-1] + sublist[k:]\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index != size - 1:\n            if max_index != 0:\n                nums = flip(nums, max_index + 1)\n            nums = flip(nums, size)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist: List[int], k: int) -> List[int]:\n        return sublist[:k][::-1] + sublist[k:]\n\n    def find_max_index(arr: List[int], n: int) -> int:\n        max_index = 0\n        for i in range(1, n):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n    n = len(nums)\n    for i in range(n, 1, -1):\n        max_index = find_max_index(nums, i)\n        if max_index != i - 1:\n            if max_index != 0:\n                nums = flip(nums, max_index + 1)\n            nums = flip(nums, i)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(end: int):\n        start = 0\n        while start < end:\n            nums[start], nums[end] = (nums[end], nums[start])\n            start += 1\n            end -= 1\n    for size in range(len(nums), 1, -1):\n        max_index = nums.index(max(nums[0:size]))\n        if max_index != size - 1:\n            if max_index != 0:\n                flip(max_index)\n            flip(size - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist: List[int], k: int) -> List[int]:\n        return sublist[:k][::-1] + sublist[k:]\n    n = len(nums)\n    for i in range(n):\n        max_index = 0\n        for j in range(1, n - i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != n - i - 1:\n            nums = flip(nums, max_index + 1)\n            nums = flip(nums, n - i)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(k):\n        nums[:k] = reversed(nums[:k])\n\n    def find_max_index(n):\n        max_index = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        return max_index\n    n = len(nums)\n    for i in range(n, 1, -1):\n        max_index = find_max_index(i)\n        if max_index != i - 1:\n            if max_index != 0:\n                flip(max_index + 1)\n            flip(i)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist: List[int], k: int) -> List[int]:\n        return sublist[:k][::-1] + sublist[k:]\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index != size - 1:\n            if max_index != 0:\n                nums = flip(nums, max_index + 1)\n            nums = flip(nums, size)\n    return nums"], "outputs": "[[[15, 25, 38, 69, 79]], [[1, 2, 3, 6, 9]], [[1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5]], [[-3, -2, -1, 0, 2]], [[0]], [[]], [[42]], [[1, 2, 4, 5, 8]], [[95, 96, 97, 98, 99, 100]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/142", "requirement": "from typing import List\n\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3], [1, 2, 3], [1, 2, 3]], [[1, 2, 3], [3, 2, 1], [1, 2, 3]], [[10, 20, 30], [10, 20, 30], [10, 30, 30]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 1, 1], [1, 1, 1], [1, 1, 0]], [[], [], []], [[1], [1], [1]], [[1, 2, 3], [1, 2], [1, 2, 3]], [[-1, -2, -3], [-1, -2, 0], [-1, 2, -3]]]", "programs": ["from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for x, y, z in zip(list1, list2, list3) if x == y == z))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))"], "clusters": [{"programs_str": ["from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for x, y, z in zip(list1, list2, list3) if x == y == z))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))"], "outputs": "[[3], [1], [2], [0], [2], [0], [1], [2], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/145", "requirement": "from typing import List\n\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"", "llm_generated_inputs": "[[[2, 1, 5, 3]], [[10, -5, 0, 3, 6]], [[1, 1, 1, 1]], [[-5, -10, 0, 10, 20]], [[0]], [[100, 100, 100, 100, 100, 0]], [[-1, -2, -3, -4]], [[2, 10, -3, 5, 7]], [[7, -2, -5, 7, -10]], [[1000, 5000, 10000, 20000]]]", "programs": ["from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)"], "clusters": [{"programs_str": ["from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)"], "outputs": "[[4], [15], [0], [30], [0], [100], [3], [13], [17], [19000]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/160", "requirement": "from typing import Tuple\nfrom typing import Union\n\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"", "llm_generated_inputs": "[[2, 3, 7], [1, 1, 5], [2, 5, 10], [0, 0, 0], [0, 0, 5], [4, -2, 2], [5, 5, 10], [3, 4, -1], [1, 2, 3], [10, 1, 25], [-1, 2, 1], [-3, -5, -8], [3, 7, 21]]", "programs": ["from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        remaining = n - a * x\n        if remaining % b == 0:\n            y = remaining // b\n            return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder % b == 0:\n            y = remainder // b\n            return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder % b == 0:\n            y = remainder // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder % b == 0:\n            y = remainder // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        remaining = n - a * x\n        if remaining >= 0 and remaining % b == 0:\n            y = remaining // b\n            return (x, y)\n    return None"], "clusters": [{"programs_str": ["from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        remaining = n - a * x\n        if remaining % b == 0:\n            y = remaining // b\n            return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder % b == 0:\n            y = remainder // b\n            return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder % b == 0:\n            y = remainder // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder % b == 0:\n            y = remainder // b\n            return (x, y)\n    return None", "from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None"], "outputs": "[[(2, 1)], [(0, 5)], [(0, 2)], ['ZeroDivisionError'], ['ZeroDivisionError'], [(0, -1)], [(0, 2)], [None], [(1, 1)], [(0, 25)], [None], [(1, 1)], [(0, 3)]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Tuple\nfrom typing import Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    for x in range(n // a + 1):\n        remaining = n - a * x\n        if remaining >= 0 and remaining % b == 0:\n            y = remaining // b\n            return (x, y)\n    return None"], "outputs": "[[(2, 1)], [(0, 5)], [(0, 2)], ['ZeroDivisionError'], ['ZeroDivisionError'], [(0, -1)], [(0, 2)], [None], [(1, 1)], [(0, 25)], [None], [None], [(0, 3)]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/161", "requirement": "from typing import List\n\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 4, 5, 6], [2, 4]], [[10, 20, 30, 40], [20, 30]], [[1, 1, 1, 1, 1], [1]], [[], [1, 2, 3]], [[1, 2, 3], []], [[5, 10, 15, 20, 25], [5, 15, 25]], [[1], [1]], [[1, 2, 3, 4, 5], [6, 7, 8]], [[1, 2, 3, 4, 5], [1, 3, 5]], [[100, 200, 300, 400], [100, 200, 300, 400]]]", "programs": ["from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [elem for elem in list1 if elem not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [element for element in list1 if element not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]"], "clusters": [{"programs_str": ["from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [elem for elem in list1 if elem not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [element for element in list1 if element not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]"], "outputs": "[[[1, 3, 5, 6]], [[10, 40]], [[]], [[]], [[1, 2, 3]], [[10, 20]], [[]], [[1, 2, 3, 4, 5]], [[2, 4]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/162", "requirement": "def sum_series(n: int) -> int:\n\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n\nassert sum_series(6) == 12\n\"\"\"", "llm_generated_inputs": "[[6], [0], [1], [2], [5], [10], [-1], [7], [100]]", "programs": ["def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    total = 0\n    for i in range(n // 2 + 1):\n        current_term = n - 2 * i\n        if current_term <= 0:\n            break\n        total += current_term\n    return total", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i >= 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i >= 0))"], "clusters": [{"programs_str": ["def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    total = 0\n    for i in range(n // 2 + 1):\n        current_term = n - 2 * i\n        if current_term <= 0:\n            break\n        total += current_term\n    return total", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i >= 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i > 0))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1) if n - 2 * i >= 0))"], "outputs": "[[12], [0], [1], [2], [9], [30], [0], [16], [2550]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/165", "requirement": "def count_char_position(str1: str) -> int:\n\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"", "llm_generated_inputs": "[['abcde'], ['aBcDe'], ['xyz'], ['hello'], ['aeglmno'], ['xyzABc'], ['abcdefghij'], ['mnopqrstu'], ['QWERTY'], ['']]", "programs": ["from string import ascii_lowercase\n\ndef count_char_position(str1: str) -> int:\n    count = 0\n    str1_lower = str1.lower()\n    for i, char in enumerate(str1_lower):\n        if char in ascii_lowercase and char == ascii_lowercase[i]:\n            count += 1\n    return count", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower(), start=1) if char == chr(i + 96)))", "def count_char_position(str1: str) -> int:\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for index, char in enumerate(str1.lower()):\n        if char in alphabet and alphabet[index] == char:\n            count += 1\n    return count", "def count_char_position(str1: str) -> int:\n    count = 0\n    str1 = str1.lower()\n    for index, char in enumerate(str1):\n        if char.isalpha() and ord(char) - ord('a') == index:\n            count += 1\n    return count", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    count = 0\n    for index, char in enumerate(str1.lower()):\n        if char.isalpha() and ord(char) - ord('a') + 1 == index + 1:\n            count += 1\n    return count", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    count = 0\n    for index, char in enumerate(str1.lower()):\n        if ord(char) - ord('a') == index:\n            count += 1\n    return count", "def count_char_position(str1: str) -> int:\n    return sum((1 for index, char in enumerate(str1.lower()) if char.isalpha() and index + 1 == ord(char) - ord('a') + 1))", "def count_char_position(str1: str) -> int:\n    return sum((1 for index, char in enumerate(str1.lower(), start=1) if char.isalpha() and ord(char) - ord('a') + 1 == index))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    str1 = str1.lower()\n    for index, char in enumerate(str1):\n        if char in alphabet and char == alphabet[index]:\n            count += 1\n    return count"], "clusters": [{"programs_str": ["from string import ascii_lowercase\n\ndef count_char_position(str1: str) -> int:\n    count = 0\n    str1_lower = str1.lower()\n    for i, char in enumerate(str1_lower):\n        if char in ascii_lowercase and char == ascii_lowercase[i]:\n            count += 1\n    return count", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower(), start=1) if char == chr(i + 96)))", "def count_char_position(str1: str) -> int:\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for index, char in enumerate(str1.lower()):\n        if char in alphabet and alphabet[index] == char:\n            count += 1\n    return count", "def count_char_position(str1: str) -> int:\n    count = 0\n    str1 = str1.lower()\n    for index, char in enumerate(str1):\n        if char.isalpha() and ord(char) - ord('a') == index:\n            count += 1\n    return count", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    count = 0\n    for index, char in enumerate(str1.lower()):\n        if char.isalpha() and ord(char) - ord('a') + 1 == index + 1:\n            count += 1\n    return count", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    count = 0\n    for index, char in enumerate(str1.lower()):\n        if ord(char) - ord('a') == index:\n            count += 1\n    return count", "def count_char_position(str1: str) -> int:\n    return sum((1 for index, char in enumerate(str1.lower()) if char.isalpha() and index + 1 == ord(char) - ord('a') + 1))", "def count_char_position(str1: str) -> int:\n    return sum((1 for index, char in enumerate(str1.lower(), start=1) if char.isalpha() and ord(char) - ord('a') + 1 == index))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    str1 = str1.lower()\n    for index, char in enumerate(str1):\n        if char in alphabet and char == alphabet[index]:\n            count += 1\n    return count"], "outputs": "[[5], [5], [0], [0], [1], [0], [10], [0], [0], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/166", "requirement": "from typing import List\n\n\ndef find_even_pair(A: List[int]) -> int:\n\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"", "llm_generated_inputs": "[[[5, 4, 7, 2, 1]], [[1, 2, 3, 4]], [[0, 0, 0, 0]], [[1, 1, 1, 1, 1]], [[2, 3, 5, 7]], [[10, 15, 20, 25]], [[2, 4, 6, 8]], [[-1, 2, 3, -4]], [[-2, -4, 2, 4]]]", "programs": ["from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"], "clusters": [{"programs_str": ["from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"], "outputs": "[[4], [2], [6], [10], [3], [2], [6], [2], [6]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/167", "requirement": "def next_power_of_2(n: int) -> int:\n\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [3], [4], [5], [15], [16], [17], [31], [32], [33], [1023], [1024], [1025], [10000]]", "programs": ["def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 1:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power <<= 1\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power"], "clusters": [{"programs_str": ["def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 1:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power <<= 1\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power"], "outputs": "[[1], [1], [2], [4], [4], [8], [16], [16], [32], [32], [32], [64], [1024], [1024], [2048], [16384]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/168", "requirement": "from typing import List\n\n\ndef frequency(a: List[int], x: int) -> int:\n\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 4, 2, 2], 2], [[1, 2, 3, 4, 2, 2], 3], [[], 1], [[1, 1, 1, 1, 1], 1], [[1, 1, 1, 1, 1], 0], [[5, 5, 5, 5, 5], 5], [[1, 2, 3, 4, 5], 6], [[-1, -1, -1, 0], -1], [[-1, 0, 1, 1], 0], [[100, 200, 300, 400], 300]]", "programs": ["from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)"], "clusters": [{"programs_str": ["from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)"], "outputs": "[[3], [1], [0], [5], [0], [5], [0], [3], [1], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/170", "requirement": "from typing import List\n\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"", "llm_generated_inputs": "[[[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 2, 5], [[10, 20, 30, 40, 50], 0, 2], [[-5, -10, 15, 20, 25], 1, 3], [[1, 2, 3, 4, 5], 0, 4], [[1], 0, 0], [[], 0, 0], [[2, 4, 6, 8, 10], 0, 5], [[1, 1, 1, 1, 1], 1, 3], [[99, 100, 101, 102], 0, 3], [[5, 10, 15, 20], 2, 3]]", "programs": ["from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])"], "clusters": [{"programs_str": ["from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])"], "outputs": "[[22], [60], [25], [15], [1], [0], [30], [3], [402], [35]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/171", "requirement": "def perimeter_pentagon(a: int) -> int:\n\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n\nassert perimeter_pentagon(5) == 25\n\"\"\"", "llm_generated_inputs": "[[1], [3], [5], [10], [100], [0], [-5]]", "programs": ["def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a"], "clusters": [{"programs_str": ["def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a"], "outputs": "[[5], [15], [25], [50], [500], [0], [-25]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/172", "requirement": "def count_occurance(s: str) -> int:\n\"\"\"\nWrite a function to count the number of occurence of the string 'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"", "llm_generated_inputs": "[['std'], ['letstdlenstdporstd'], ['stdstdstd'], ['no_occurrence_here'], ['STDstSTDstd'], [''], ['123std456std']]", "programs": ["def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')"], "clusters": [{"programs_str": ["def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')"], "outputs": "[[1], [3], [3], [0], [1], [0], [2]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/222", "requirement": "from typing import Tuple\n\n\ndef check_type(test_tuple: Tuple) -> bool:\n\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"", "llm_generated_inputs": "[[(5, 6, 7, 3, 5, 6)], [('a', 'b', 'c')], [((1, 2), (3, 4), (5, 6))], [(3.14, 2.7, 1.618)], [('hello', 1)], [(None, None, None)], [((1, 2), 'string', 3)], [(True, False, True)]]", "programs": ["from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(item, type(test_tuple[0])) for item in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all((isinstance(item, first_type) for item in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(item, type(test_tuple[0])) for item in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(x, type(test_tuple[0])) for x in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(x, type(test_tuple[0])) for x in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((type(x) == type(test_tuple[0]) for x in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((type(x) is type(test_tuple[0]) for x in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple)) if test_tuple else True", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))"], "clusters": [{"programs_str": ["from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(item, type(test_tuple[0])) for item in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all((isinstance(item, first_type) for item in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(item, type(test_tuple[0])) for item in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(x, type(test_tuple[0])) for x in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(x, type(test_tuple[0])) for x in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((type(x) == type(test_tuple[0]) for x in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((type(x) is type(test_tuple[0]) for x in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple)) if test_tuple else True", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(i, type(test_tuple[0])) for i in test_tuple))"], "outputs": "[[True], [True], [True], [True], [False], [True], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/223", "requirement": "from typing import List\n\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 3, 3, 3, 10], 7, 3], [[1, 1, 1, 1, 2, 2, 3], 7, 1], [[1, 2, 3, 4, 5], 5, 1], [[2, 2, 2, 3, 3, 4, 4], 7, 2], [[5, 5, 5, 5, 1, 1, 1], 7, 5], [[1, 2, 2, 2, 2, 3, 3], 7, 2], [[4, 4, 4, 4, 4, 4, 4], 7, 4], [[1, 1, 2, 3, 4, 5, 5], 7, 5], [[], 0, 1], [[1], 1, 1]]", "programs": ["from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    if n == 0:\n        return False\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2"], "clusters": [{"programs_str": ["from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    if n == 0:\n        return False\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2"], "outputs": "[[True], [True], [False], [False], [True], [True], [True], [False], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/224", "requirement": "from typing import Set\n\n\ndef count_Set_Bits(n: int) -> int:\n\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [3], [7], [8], [15], [16], [31], [32], [255], [256], [1023], [1024]]", "programs": ["from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')"], "clusters": [{"programs_str": ["from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')"], "outputs": "[[0], [1], [1], [2], [3], [1], [4], [1], [5], [1], [8], [1], [10], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/226", "requirement": "def odd_values_string(str1: str) -> str:\n\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"", "llm_generated_inputs": "[['abcdef'], ['1a2b3c4d5e'], [''], ['abcdefghijklmnopqrstuvwxyz'], ['hello world'], ['Python Programming'], ['a'], ['ABABABABA'], ['1234567890']]", "programs": ["def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return ''.join((str1[i] for i in range(len(str1)) if i % 2 == 0))", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return ''.join((str1[i] for i in range(len(str1)) if i % 2 == 0))", "def odd_values_string(str1: str) -> str:\n    return ''.join((str1[i] for i in range(len(str1)) if i % 2 == 0))", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return ''.join((str1[i] for i in range(len(str1)) if i % 2 == 0))", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return ''.join((str1[i] for i in range(len(str1)) if i % 2 == 0))", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return str1[::2]"], "clusters": [{"programs_str": ["def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return ''.join((str1[i] for i in range(len(str1)) if i % 2 == 0))", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return ''.join((str1[i] for i in range(len(str1)) if i % 2 == 0))", "def odd_values_string(str1: str) -> str:\n    return ''.join((str1[i] for i in range(len(str1)) if i % 2 == 0))", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return ''.join((str1[i] for i in range(len(str1)) if i % 2 == 0))", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return ''.join((str1[i] for i in range(len(str1)) if i % 2 == 0))", "def odd_values_string(str1: str) -> str:\n    return str1[::2]", "def odd_values_string(str1: str) -> str:\n    return str1[::2]"], "outputs": "[['ace'], ['12345'], [''], ['acegikmoqsuwy'], ['hlowrd'], ['Pto rgamn'], ['a'], ['AAAAA'], ['13579']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/227", "requirement": "def min_of_three(a: int, b: int, c: int) -> int:\n\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"", "llm_generated_inputs": "[[10, 20, 0], [5, 3, 4], [0, 0, 0], [-1, -2, -3], [100, 50, 75], [1, 2, 3], [10, 10, 10], [-10, 0, 10], [2, 2, 2]]", "programs": ["def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)"], "clusters": [{"programs_str": ["def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)"], "outputs": "[[0], [3], [0], [-3], [50], [1], [10], [-10], [2]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/230", "requirement": "def replace_blank(str1: str, char: str) -> str:\n\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"", "llm_generated_inputs": "[['hello world', '*'], ['   leading spaces', '#'], ['trailing spaces   ', '$'], ['', '%'], ['no blanks', '*'], ['    mixed    spaces    ', '!'], ['multiple   spaces   in  a  row', '&'], ['  ', '@'], ['single blank', '?'], ['  extra   blanks  in between  ', 'X']]", "programs": ["def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)"], "clusters": [{"programs_str": ["def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)"], "outputs": "[['hello*world'], ['###leading#spaces'], ['trailing$spaces$$$'], [''], ['no*blanks'], ['!!!!mixed!!!!spaces!!!!'], ['multiple&&&spaces&&&in&&a&&row'], ['@@'], ['single?blank'], ['XXextraXXXblanksXXinXbetweenXX']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/232", "requirement": "from typing import List\n\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"", "llm_generated_inputs": "[[[10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2], [[1, 2, 3, 4, 5], 3], [[5, 5, 5, 5, 5], 2], [[10], 1], [[], 0], [[7, 8, 9, 10], 5], [[3, 1, 2, 4], 0]]", "programs": ["from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list(set(list1)), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]"], "clusters": [{"programs_str": ["from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list(set(list1)), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(set(list1), reverse=True)[:n]"], "outputs": "[[[100, 90]], [[5, 4, 3]], [[5]], [[10]], [[]], [[10, 9, 8, 7]], [[]]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]"], "outputs": "[[[100, 90]], [[5, 4, 3]], [[5, 5]], [[10]], [[]], [[10, 9, 8, 7]], [[]]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/233", "requirement": "def lateralsuface_cylinder(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"", "llm_generated_inputs": "[[10.0, 5.0], [0.0, 5.0], [10.0, 0.0], [1.5, 3.0], [100.0, 100.0], [10.0, -5.0], [-10.0, 5.0], [3.14, 2.0], [5.5, 4.5], [250.0, 50.0]]", "programs": ["import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h"], "clusters": [{"programs_str": ["import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h"], "outputs": "[[314.1592653589793], [0.0], [0.0], [28.274333882308138], [62831.853071795864], [-314.1592653589793], [-314.1592653589793], [39.458403729087806], [155.50883635269474], [78539.81633974482]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/234", "requirement": "def volume_cube(l: int) -> int:\n\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27\n\"\"\"", "llm_generated_inputs": "[[3], [1], [0], [-5], [10], [100]]", "programs": ["def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3"], "clusters": [{"programs_str": ["def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3"], "outputs": "[[27], [1], [0], [-125], [1000], [1000000]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/235", "requirement": "def even_bit_set_number(n: int) -> int:\n\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [10], [15], [255], [1024], [2048], [4095], [8192]]", "programs": ["def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    mask = 2863311530\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    bit_mask = 2863311530\n    return n | bit_mask", "def even_bit_set_number(n: int) -> int:\n    mask = 2863311530\n    result = n | mask\n    return result", "def even_bit_set_number(n: int) -> int:\n    even_bit_mask = 2863311530\n    return n | even_bit_mask", "def even_bit_set_number(n: int) -> int:\n    mask = 2863311530\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    mask = 2863311530\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    even_mask = 2863311530\n    return n | even_mask", "def even_bit_set_number(n: int) -> int:\n    even_mask = 2863311530\n    return n | even_mask", "def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    mask = 6148914691236517205\n    return n | mask"], "clusters": [{"programs_str": ["def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    mask = 2863311530\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    bit_mask = 2863311530\n    return n | bit_mask", "def even_bit_set_number(n: int) -> int:\n    mask = 2863311530\n    result = n | mask\n    return result", "def even_bit_set_number(n: int) -> int:\n    even_bit_mask = 2863311530\n    return n | even_bit_mask", "def even_bit_set_number(n: int) -> int:\n    mask = 2863311530\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    mask = 2863311530\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    even_mask = 2863311530\n    return n | even_mask", "def even_bit_set_number(n: int) -> int:\n    even_mask = 2863311530\n    return n | even_mask", "def even_bit_set_number(n: int) -> int:\n    return n | 2863311530", "def even_bit_set_number(n: int) -> int:\n    return n | 2863311530"], "outputs": "[[2863311530], [2863311531], [2863311530], [2863311530], [2863311535], [2863311615], [2863312554], [2863311530], [2863312895], [2863311530]]", "probability": 0.95, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [2863311530], [10]]]"}, {"programs_str": ["def even_bit_set_number(n: int) -> int:\n    mask = 6148914691236517205\n    return n | mask"], "outputs": "[[6148914691236517205], [6148914691236517205], [6148914691236517207], [6148914691236517215], [6148914691236517215], [6148914691236517375], [6148914691236517205], [6148914691236519253], [6148914691236519935], [6148914691236525397]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [6148914691236517215], [10]]]"}]}
{"task_id": "Mbpp/237", "requirement": "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"", "llm_generated_inputs": "[[[]], [[(), ()]], [[(1, 2), (1, 2), (2, 1)]], [[(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]], [[(1, 1), (1, 1), (1, 2), (2, 1)]], [[(0, 0), (0, 0), (0, 1), (1, 0)]], [[(1, 2, 3), (1, 2, 3), (3, 1, 2)]], [[(None, None), (None, None), (None, 1)]], [[(1, 2), (1, 2), (1, 2), (2, 1)]], [[(1, 2), (2, 1), (3, 3), (3, 3), (1, 1)]]]", "programs": ["from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrences = {}\n    for t in test_list:\n        if t in occurrences:\n            occurrences[t] += 1\n        else:\n            occurrences[t] = 1\n    return occurrences", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrence_dict = {}\n    for tup in test_list:\n        if tup in occurrence_dict:\n            occurrence_dict[tup] += 1\n        else:\n            occurrence_dict[tup] = 1\n    return occurrence_dict", "from typing import List, Dict, Tuple, Any\nfrom collections import Counter\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    count = Counter(test_list)\n    return dict(count)", "from typing import List, Dict, Tuple, Any\nfrom collections import Counter\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    count = Counter(test_list)\n    return dict(count)", "from typing import List, Dict, Tuple, Any\nfrom collections import Counter\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    count_dict = Counter(test_list)\n    return dict(count_dict)", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrence_dict = {}\n    for item in test_list:\n        if item in occurrence_dict:\n            occurrence_dict[item] += 1\n        else:\n            occurrence_dict[item] = 1\n    return occurrence_dict", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrence_dict = {}\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in occurrence_dict:\n            occurrence_dict[sorted_tup] += 1\n        else:\n            occurrence_dict[sorted_tup] = 1\n    return occurrence_dict", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrences = {}\n    for tpl in test_list:\n        sorted_tpl = tuple(sorted(tpl))\n        if sorted_tpl in occurrences:\n            occurrences[sorted_tpl] += 1\n        else:\n            occurrences[sorted_tpl] = 1\n    return occurrences", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrences = {}\n    for item in test_list:\n        sorted_item = tuple(sorted(item))\n        if sorted_item in occurrences:\n            occurrences[sorted_item] += 1\n        else:\n            occurrences[sorted_item] = 1\n    return occurrences", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrence_dict = {}\n    for tpl in test_list:\n        sorted_tpl = tuple(sorted(tpl))\n        if sorted_tpl in occurrence_dict:\n            occurrence_dict[sorted_tpl] += 1\n        else:\n            occurrence_dict[sorted_tpl] = 1\n    return occurrence_dict", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrences = {}\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in occurrences:\n            occurrences[sorted_tup] += 1\n        else:\n            occurrences[sorted_tup] = 1\n    return occurrences", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrence_dict = {}\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        occurrence_dict[sorted_tup] = occurrence_dict.get(sorted_tup, 0) + 1\n    return occurrence_dict", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrence_dict = {}\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in occurrence_dict:\n            occurrence_dict[sorted_tup] += 1\n        else:\n            occurrence_dict[sorted_tup] = 1\n    return occurrence_dict", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrence_count = {}\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in occurrence_count:\n            occurrence_count[sorted_tup] += 1\n        else:\n            occurrence_count[sorted_tup] = 1\n    return occurrence_count", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    count_dict = {}\n    for item in test_list:\n        sorted_item = tuple(sorted(item))\n        if sorted_item in count_dict:\n            count_dict[sorted_item] += 1\n        else:\n            count_dict[sorted_item] = 1\n    return count_dict", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    count_dict = {}\n    for item in test_list:\n        sorted_item = tuple(sorted(item))\n        if sorted_item in count_dict:\n            count_dict[sorted_item] += 1\n        else:\n            count_dict[sorted_item] = 1\n    return count_dict", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrences = {}\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        occurrences[sorted_tup] = occurrences.get(sorted_tup, 0) + 1\n    return occurrences", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrences = {}\n    for item in test_list:\n        sorted_item = tuple(sorted(item))\n        occurrences[sorted_item] = occurrences.get(sorted_item, 0) + 1\n    return occurrences", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    count_dict = {}\n    for item in test_list:\n        sorted_item = tuple(sorted(item))\n        if sorted_item in count_dict:\n            count_dict[sorted_item] += 1\n        else:\n            count_dict[sorted_item] = 1\n    return {k: v for k, v in count_dict.items() if v > 1}", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrence_dict = {}\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in occurrence_dict:\n            occurrence_dict[sorted_tup] += 1\n        else:\n            occurrence_dict[sorted_tup] = 1\n    return {k: v for k, v in occurrence_dict.items() if v > 1}"], "clusters": [{"programs_str": ["from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrences = {}\n    for t in test_list:\n        if t in occurrences:\n            occurrences[t] += 1\n        else:\n            occurrences[t] = 1\n    return occurrences", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrence_dict = {}\n    for tup in test_list:\n        if tup in occurrence_dict:\n            occurrence_dict[tup] += 1\n        else:\n            occurrence_dict[tup] = 1\n    return occurrence_dict", "from typing import List, Dict, Tuple, Any\nfrom collections import Counter\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    count = Counter(test_list)\n    return dict(count)", "from typing import List, Dict, Tuple, Any\nfrom collections import Counter\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    count = Counter(test_list)\n    return dict(count)", "from typing import List, Dict, Tuple, Any\nfrom collections import Counter\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    count_dict = Counter(test_list)\n    return dict(count_dict)", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrence_dict = {}\n    for item in test_list:\n        if item in occurrence_dict:\n            occurrence_dict[item] += 1\n        else:\n            occurrence_dict[item] = 1\n    return occurrence_dict"], "outputs": "[[{}], [{(): 2}], [{(1, 2): 2, (2, 1): 1}], [{(3, 1): 1, (1, 3): 1, (2, 5): 1, (5, 2): 1, (6, 3): 1}], [{(1, 1): 2, (1, 2): 1, (2, 1): 1}], [{(0, 0): 2, (0, 1): 1, (1, 0): 1}], [{(1, 2, 3): 2, (3, 1, 2): 1}], [{(None, None): 2, (None, 1): 1}], [{(1, 2): 3, (2, 1): 1}], [{(1, 2): 1, (2, 1): 1, (3, 3): 2, (1, 1): 1}]]", "probability": 0.3, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]], [{(3, 1): 1, (1, 3): 1, (2, 5): 1, (5, 2): 1, (6, 3): 1}], [{(1, 3): 2, (2, 5): 2, (3, 6): 1}]]]"}, {"programs_str": ["from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrence_dict = {}\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in occurrence_dict:\n            occurrence_dict[sorted_tup] += 1\n        else:\n            occurrence_dict[sorted_tup] = 1\n    return occurrence_dict", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrences = {}\n    for tpl in test_list:\n        sorted_tpl = tuple(sorted(tpl))\n        if sorted_tpl in occurrences:\n            occurrences[sorted_tpl] += 1\n        else:\n            occurrences[sorted_tpl] = 1\n    return occurrences", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrences = {}\n    for item in test_list:\n        sorted_item = tuple(sorted(item))\n        if sorted_item in occurrences:\n            occurrences[sorted_item] += 1\n        else:\n            occurrences[sorted_item] = 1\n    return occurrences", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrence_dict = {}\n    for tpl in test_list:\n        sorted_tpl = tuple(sorted(tpl))\n        if sorted_tpl in occurrence_dict:\n            occurrence_dict[sorted_tpl] += 1\n        else:\n            occurrence_dict[sorted_tpl] = 1\n    return occurrence_dict", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrences = {}\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in occurrences:\n            occurrences[sorted_tup] += 1\n        else:\n            occurrences[sorted_tup] = 1\n    return occurrences", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrence_dict = {}\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        occurrence_dict[sorted_tup] = occurrence_dict.get(sorted_tup, 0) + 1\n    return occurrence_dict", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrence_dict = {}\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in occurrence_dict:\n            occurrence_dict[sorted_tup] += 1\n        else:\n            occurrence_dict[sorted_tup] = 1\n    return occurrence_dict", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrence_count = {}\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in occurrence_count:\n            occurrence_count[sorted_tup] += 1\n        else:\n            occurrence_count[sorted_tup] = 1\n    return occurrence_count", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    count_dict = {}\n    for item in test_list:\n        sorted_item = tuple(sorted(item))\n        if sorted_item in count_dict:\n            count_dict[sorted_item] += 1\n        else:\n            count_dict[sorted_item] = 1\n    return count_dict", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    count_dict = {}\n    for item in test_list:\n        sorted_item = tuple(sorted(item))\n        if sorted_item in count_dict:\n            count_dict[sorted_item] += 1\n        else:\n            count_dict[sorted_item] = 1\n    return count_dict", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrences = {}\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        occurrences[sorted_tup] = occurrences.get(sorted_tup, 0) + 1\n    return occurrences", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrences = {}\n    for item in test_list:\n        sorted_item = tuple(sorted(item))\n        occurrences[sorted_item] = occurrences.get(sorted_item, 0) + 1\n    return occurrences"], "outputs": "[[{}], [{(): 2}], [{(1, 2): 3}], [{(1, 3): 2, (2, 5): 2, (3, 6): 1}], [{(1, 1): 2, (1, 2): 2}], [{(0, 0): 2, (0, 1): 2}], [{(1, 2, 3): 3}], ['TypeError'], [{(1, 2): 4}], [{(1, 2): 2, (3, 3): 2, (1, 1): 1}]]", "probability": 0.6, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    count_dict = {}\n    for item in test_list:\n        sorted_item = tuple(sorted(item))\n        if sorted_item in count_dict:\n            count_dict[sorted_item] += 1\n        else:\n            count_dict[sorted_item] = 1\n    return {k: v for k, v in count_dict.items() if v > 1}", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrence_dict = {}\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in occurrence_dict:\n            occurrence_dict[sorted_tup] += 1\n        else:\n            occurrence_dict[sorted_tup] = 1\n    return {k: v for k, v in occurrence_dict.items() if v > 1}"], "outputs": "[[{}], [{(): 2}], [{(1, 2): 3}], [{(1, 3): 2, (2, 5): 2}], [{(1, 1): 2, (1, 2): 2}], [{(0, 0): 2, (0, 1): 2}], [{(1, 2, 3): 3}], ['TypeError'], [{(1, 2): 4}], [{(1, 2): 2, (3, 3): 2}]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]], [{(1, 3): 2, (2, 5): 2}], [{(1, 3): 2, (2, 5): 2, (3, 6): 1}]]]"}]}
{"task_id": "Mbpp/238", "requirement": "def number_of_substrings(str1: str) -> int:\n\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"", "llm_generated_inputs": "[['abc'], ['a'], [('abcd', 10)], [('abcdef', 21)], [('aabb', 10)], [('aaa', 6)], [('', 0)], [('ab', 3)]]", "programs": ["def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    return len(str1) * (len(str1) + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    return len(str1) * (len(str1) + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    return len(str1) * (len(str1) + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    return len(str1) * (len(str1) + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    return len(str1) * (len(str1) + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    return len(str1) * (len(str1) + 1) // 2"], "clusters": [{"programs_str": ["def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    return len(str1) * (len(str1) + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    return len(str1) * (len(str1) + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    return len(str1) * (len(str1) + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    return len(str1) * (len(str1) + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    return len(str1) * (len(str1) + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    return len(str1) * (len(str1) + 1) // 2"], "outputs": "[[6], [1], [3], [3], [3], [3], [3], [3]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/239", "requirement": "def get_total_number_of_sequences(m: int, n: int) -> int:\n\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"", "llm_generated_inputs": "[[10, 4], [10, 1], [10, 2], [15, 5], [5, 3], [20, 6], [1, 1], [2, 2], [10, 10], [100, 7]]", "programs": ["def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        total = 0\n        next_start = 2 * start\n        while next_start <= m:\n            total += count_sequences(next_start, length - 1)\n            next_start += 1\n        return total\n    total_count = 0\n    for first in range(1, m + 1):\n        total_count += count_sequences(first, n - 1)\n    return total_count", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(last_value, length):\n        if length == 0:\n            return 1\n        count = 0\n        next_value = last_value * 2\n        while next_value <= m:\n            count += count_sequences(next_value, length - 1)\n            next_value += 1\n        return count\n    total_count = 0\n    for start in range(1, m + 1):\n        total_count += count_sequences(start, n - 1)\n    return total_count", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(last_value, length_remaining):\n        if length_remaining == 0:\n            return 1\n        total_count = 0\n        next_value_min = max(2 * last_value, 1)\n        next_value_max = m\n        for next_value in range(next_value_min, next_value_max + 1):\n            total_count += count_sequences(next_value, length_remaining - 1)\n        return total_count\n    total_sequences = 0\n    for starting_value in range(1, m + 1):\n        total_sequences += count_sequences(starting_value, n - 1)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        count = 0\n        next_val = 2 * start\n        while next_val <= m:\n            count += count_sequences(next_val, length - 1)\n            next_val += 1\n        return count\n    total_count = 0\n    for first in range(1, m + 1):\n        total_count += count_sequences(first, n - 1)\n    return total_count", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(last, length):\n        if length == n:\n            return 1\n        total = 0\n        next_value = last * 2\n        while next_value <= m:\n            total += count_sequences(next_value, length + 1)\n            next_value += 1\n        return total\n    total_count = 0\n    for starting_point in range(1, m + 1):\n        total_count += count_sequences(starting_point, 1)\n    return total_count", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(last, length):\n        if length == n:\n            return 1\n        total = 0\n        next_min = max(last * 2, 1)\n        next_max = m\n        for next_value in range(next_min, next_max + 1):\n            total += count_sequences(next_value, length + 1)\n        return total\n    total_sequences = 0\n    for starting_value in range(1, m + 1):\n        total_sequences += count_sequences(starting_value, 1)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(current_value, length):\n        if length == 0:\n            return 1\n        total_count = 0\n        next_value = current_value * 2\n        while next_value <= m:\n            total_count += count_sequences(next_value, length - 1)\n            next_value += 1\n        return total_count\n    total = 0\n    for start in range(1, m + 1):\n        total += count_sequences(start, n - 1)\n    return total", "def get_total_number_of_sequences(m: int, n: int) -> int:\n    from functools import lru_cache\n\n    def count_sequences(length, last_value):\n        if length == 0:\n            return 1\n        total = 0\n        next_value = last_value * 2\n        while next_value <= m:\n            total += count_sequences(length - 1, next_value)\n            next_value += 1\n        return total\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += count_sequences(n - 1, start)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(current, length):\n        if length == 0:\n            return 1\n        total = 0\n        next_value = current * 2\n        while next_value <= m:\n            total += count_sequences(next_value, length - 1)\n            next_value += 1\n        return total\n    count = 0\n    for start in range(1, m + 1):\n        count += count_sequences(start, n - 1)\n    return count", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(prev: int, length: int) -> int:\n        if length == 0:\n            return 1\n        total = 0\n        start = 2 * prev\n        for next_element in range(start, m + 1):\n            total += count_sequences(next_element, length - 1)\n        return total\n    total_sequences = 0\n    for first_element in range(1, m + 1):\n        total_sequences += count_sequences(first_element, n - 1)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n    from functools import lru_cache\n\n    def count_sequences(last_value, remaining_length):\n        if remaining_length == 0:\n            return 1\n        total = 0\n        next_value = last_value * 2\n        while next_value <= m:\n            total += count_sequences(next_value, remaining_length - 1)\n            next_value += 1\n        return total\n    total_count = 0\n    for start in range(1, m + 1):\n        total_count += count_sequences(start, n - 1)\n    return total_count", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        count = 0\n        next_start = start * 2\n        while next_start <= m:\n            count += count_sequences(next_start, length - 1)\n            next_start += 1\n        return count\n    total_count = 0\n    for first in range(1, m + 1):\n        total_count += count_sequences(first, n - 1)\n    return total_count", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def helper(prev: int, length: int) -> int:\n        if length == 0:\n            return 1\n        count = 0\n        next_num = max(2 * prev, 1)\n        while next_num <= m:\n            count += helper(next_num, length - 1)\n            next_num += 1\n        return count\n    total = 0\n    for start in range(1, m + 1):\n        total += helper(start, n - 1)\n    return total", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        total = 0\n        next_start = start * 2\n        while next_start <= m:\n            total += count_sequences(next_start, length - 1)\n            next_start += 1\n        return total\n    total_sequences = 0\n    for initial in range(1, m + 1):\n        total_sequences += count_sequences(initial, n - 1)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        total = 0\n        next_start = start * 2\n        while next_start <= m:\n            total += count_sequences(next_start, length - 1)\n            next_start += 1\n        return total\n    return count_sequences(1, n)", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        total = 0\n        next_start = max(start * 2, 1)\n        while next_start <= m:\n            total += count_sequences(next_start, length - 1)\n            next_start += 1\n        return total\n    return count_sequences(1, n)", "def get_total_number_of_sequences(m: int, n: int) -> int:\n    if n == 0:\n        return 1\n\n    def count_sequences(prev: int, length: int) -> int:\n        if length == 0:\n            return 1\n        total = 0\n        current = prev * 2\n        while current <= m:\n            total += count_sequences(current, length - 1)\n            current += 1\n        return total\n    return count_sequences(1, n)", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        total = 0\n        next_start = start * 2\n        while next_start <= m:\n            total += count_sequences(next_start, length - 1)\n            next_start += 1\n        return total\n    return count_sequences(1, n)", "def get_total_number_of_sequences(m: int, n: int) -> int:\n    if n == 0:\n        return 1\n    total_sequences = 0\n    for previous in range(1, m + 1):\n        next_value = 2 * previous\n        while next_value <= m:\n            total_sequences += get_total_number_of_sequences(m - next_value, n - 1)\n            next_value += 1\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            k = j // 2\n            for x in range(k, j + 1):\n                dp[i][j] += dp[i - 1][x]\n    return sum((dp[n][j] for j in range(1, m + 1)))"], "clusters": [{"programs_str": ["def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        total = 0\n        next_start = 2 * start\n        while next_start <= m:\n            total += count_sequences(next_start, length - 1)\n            next_start += 1\n        return total\n    total_count = 0\n    for first in range(1, m + 1):\n        total_count += count_sequences(first, n - 1)\n    return total_count", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(last_value, length):\n        if length == 0:\n            return 1\n        count = 0\n        next_value = last_value * 2\n        while next_value <= m:\n            count += count_sequences(next_value, length - 1)\n            next_value += 1\n        return count\n    total_count = 0\n    for start in range(1, m + 1):\n        total_count += count_sequences(start, n - 1)\n    return total_count", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(last_value, length_remaining):\n        if length_remaining == 0:\n            return 1\n        total_count = 0\n        next_value_min = max(2 * last_value, 1)\n        next_value_max = m\n        for next_value in range(next_value_min, next_value_max + 1):\n            total_count += count_sequences(next_value, length_remaining - 1)\n        return total_count\n    total_sequences = 0\n    for starting_value in range(1, m + 1):\n        total_sequences += count_sequences(starting_value, n - 1)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        count = 0\n        next_val = 2 * start\n        while next_val <= m:\n            count += count_sequences(next_val, length - 1)\n            next_val += 1\n        return count\n    total_count = 0\n    for first in range(1, m + 1):\n        total_count += count_sequences(first, n - 1)\n    return total_count", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(last, length):\n        if length == n:\n            return 1\n        total = 0\n        next_value = last * 2\n        while next_value <= m:\n            total += count_sequences(next_value, length + 1)\n            next_value += 1\n        return total\n    total_count = 0\n    for starting_point in range(1, m + 1):\n        total_count += count_sequences(starting_point, 1)\n    return total_count", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(last, length):\n        if length == n:\n            return 1\n        total = 0\n        next_min = max(last * 2, 1)\n        next_max = m\n        for next_value in range(next_min, next_max + 1):\n            total += count_sequences(next_value, length + 1)\n        return total\n    total_sequences = 0\n    for starting_value in range(1, m + 1):\n        total_sequences += count_sequences(starting_value, 1)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(current_value, length):\n        if length == 0:\n            return 1\n        total_count = 0\n        next_value = current_value * 2\n        while next_value <= m:\n            total_count += count_sequences(next_value, length - 1)\n            next_value += 1\n        return total_count\n    total = 0\n    for start in range(1, m + 1):\n        total += count_sequences(start, n - 1)\n    return total", "def get_total_number_of_sequences(m: int, n: int) -> int:\n    from functools import lru_cache\n\n    def count_sequences(length, last_value):\n        if length == 0:\n            return 1\n        total = 0\n        next_value = last_value * 2\n        while next_value <= m:\n            total += count_sequences(length - 1, next_value)\n            next_value += 1\n        return total\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += count_sequences(n - 1, start)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(current, length):\n        if length == 0:\n            return 1\n        total = 0\n        next_value = current * 2\n        while next_value <= m:\n            total += count_sequences(next_value, length - 1)\n            next_value += 1\n        return total\n    count = 0\n    for start in range(1, m + 1):\n        count += count_sequences(start, n - 1)\n    return count", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(prev: int, length: int) -> int:\n        if length == 0:\n            return 1\n        total = 0\n        start = 2 * prev\n        for next_element in range(start, m + 1):\n            total += count_sequences(next_element, length - 1)\n        return total\n    total_sequences = 0\n    for first_element in range(1, m + 1):\n        total_sequences += count_sequences(first_element, n - 1)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n    from functools import lru_cache\n\n    def count_sequences(last_value, remaining_length):\n        if remaining_length == 0:\n            return 1\n        total = 0\n        next_value = last_value * 2\n        while next_value <= m:\n            total += count_sequences(next_value, remaining_length - 1)\n            next_value += 1\n        return total\n    total_count = 0\n    for start in range(1, m + 1):\n        total_count += count_sequences(start, n - 1)\n    return total_count", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        count = 0\n        next_start = start * 2\n        while next_start <= m:\n            count += count_sequences(next_start, length - 1)\n            next_start += 1\n        return count\n    total_count = 0\n    for first in range(1, m + 1):\n        total_count += count_sequences(first, n - 1)\n    return total_count", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def helper(prev: int, length: int) -> int:\n        if length == 0:\n            return 1\n        count = 0\n        next_num = max(2 * prev, 1)\n        while next_num <= m:\n            count += helper(next_num, length - 1)\n            next_num += 1\n        return count\n    total = 0\n    for start in range(1, m + 1):\n        total += helper(start, n - 1)\n    return total", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        total = 0\n        next_start = start * 2\n        while next_start <= m:\n            total += count_sequences(next_start, length - 1)\n            next_start += 1\n        return total\n    total_sequences = 0\n    for initial in range(1, m + 1):\n        total_sequences += count_sequences(initial, n - 1)\n    return total_sequences"], "outputs": "[[4], [10], [25], [0], [2], [0], [1], [1], [0], [2790]]", "probability": 0.7, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        total = 0\n        next_start = start * 2\n        while next_start <= m:\n            total += count_sequences(next_start, length - 1)\n            next_start += 1\n        return total\n    return count_sequences(1, n)", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        total = 0\n        next_start = max(start * 2, 1)\n        while next_start <= m:\n            total += count_sequences(next_start, length - 1)\n            next_start += 1\n        return total\n    return count_sequences(1, n)", "def get_total_number_of_sequences(m: int, n: int) -> int:\n    if n == 0:\n        return 1\n\n    def count_sequences(prev: int, length: int) -> int:\n        if length == 0:\n            return 1\n        total = 0\n        current = prev * 2\n        while current <= m:\n            total += count_sequences(current, length - 1)\n            current += 1\n        return total\n    return count_sequences(1, n)", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        total = 0\n        next_start = start * 2\n        while next_start <= m:\n            total += count_sequences(next_start, length - 1)\n            next_start += 1\n        return total\n    return count_sequences(1, n)"], "outputs": "[[0], [9], [16], [0], [0], [0], [0], [0], [0], [0]]", "probability": 0.2, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10, 4], [0], [4]]]"}, {"programs_str": ["def get_total_number_of_sequences(m: int, n: int) -> int:\n    if n == 0:\n        return 1\n    total_sequences = 0\n    for previous in range(1, m + 1):\n        next_value = 2 * previous\n        while next_value <= m:\n            total_sequences += get_total_number_of_sequences(m - next_value, n - 1)\n            next_value += 1\n    return total_sequences"], "outputs": "[[19], [25], [80], [622], [0], [14651], [0], [0], [0], ['Timeout']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10, 4], [19], [4]]]"}, {"programs_str": ["def get_total_number_of_sequences(m: int, n: int) -> int:\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            k = j // 2\n            for x in range(k, j + 1):\n                dp[i][j] += dp[i - 1][x]\n    return sum((dp[n][j] for j in range(1, m + 1)))"], "outputs": "[[458], [10], [39], [6405], [30], [89159], [1], [3], [73538], [8203705434]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10, 4], [458], [4]]]"}]}
{"task_id": "Mbpp/240", "requirement": "from typing import List\n\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"", "llm_generated_inputs": "[[[1, 3, 5, 7, 9, 10], [2, 4, 6, 8]], [[10, 20, 30], [1]], [[], [1, 2, 3]], [[5], []], [['a', 'b', 'c'], ['d', 'e', 'f', 'g']], [[None], [1, 2, 3]], [[1, 2, 3, 4, 5], ['x', 'y']], [['apple', 'banana'], ['kiwi']], [[], []], [[100], ['a', 'b']]]", "programs": ["from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    if list1:\n        list1 = list1[:-1] + list2\n    else:\n        list1 = list2\n    return list1", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    if list1:\n        list1 = list1[:-1]\n    return list1 + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    if list1:\n        list1 = list1[:-1] + list2\n    else:\n        list1 = list2\n    return list1", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    if list1:\n        list1 = list1[:-1] + list2\n    return list1"], "clusters": [{"programs_str": ["from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    if list1:\n        list1 = list1[:-1] + list2\n    else:\n        list1 = list2\n    return list1", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    if list1:\n        list1 = list1[:-1]\n    return list1 + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    if list1:\n        list1 = list1[:-1] + list2\n    else:\n        list1 = list2\n    return list1", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2"], "outputs": "[[[1, 3, 5, 7, 9, 2, 4, 6, 8]], [[10, 20, 1]], [[1, 2, 3]], [[]], [['a', 'b', 'd', 'e', 'f', 'g']], [[1, 2, 3]], [[1, 2, 3, 4, 'x', 'y']], [['apple', 'kiwi']], [[]], [['a', 'b']]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    if list1:\n        list1 = list1[:-1] + list2\n    return list1"], "outputs": "[[[1, 3, 5, 7, 9, 2, 4, 6, 8]], [[10, 20, 1]], [[]], [[]], [['a', 'b', 'd', 'e', 'f', 'g']], [[1, 2, 3]], [[1, 2, 3, 4, 'x', 'y']], [['apple', 'kiwi']], [[]], [['a', 'b']]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/242", "requirement": "def count_charac(str1: str) -> int:\n\"\"\"\nWrite a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"", "llm_generated_inputs": "[['Hello, World!'], ['Python 3.9'], [''], ['     '], ['A very long string that contains many characters for testing purposes.'], ['1234567890'], ['Special characters: @#$%^&*()!'], ['Whitespace    and   tabs\\t']]", "programs": ["def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)"], "clusters": [{"programs_str": ["def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)"], "outputs": "[[13], [10], [0], [5], [70], [10], [30], [25]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/244", "requirement": "def next_Perfect_Square(N: int) -> int:\n\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"", "llm_generated_inputs": "[[1], [4], [8], [16], [24], [35], [36], [49], [0], [-1], [100], [121]]", "programs": ["def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.ceil(math.sqrt(N))\n    return (next_square_root + 1) ** 2", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.ceil(math.sqrt(N))\n    return (next_square_root + 1) ** 2", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.ceil(math.sqrt(N)) + 1\n    return next_square_root ** 2", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.ceil(math.sqrt(N))\n    return (next_square_root + 1) ** 2", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.ceil(math.sqrt(N))\n    return (next_square_root + 1) ** 2", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.ceil(math.sqrt(N))\n    return (next_square_root + 1) ** 2", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.ceil(math.sqrt(N))\n    return (next_square_root + 1) ** 2", "def next_Perfect_Square(N: int) -> int:\n    import math\n    root = math.isqrt(N) + 1\n    return root * root", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.isqrt(N) + 1\n    return next_square_root * next_square_root", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_root = math.isqrt(N) + 1\n    return next_root * next_root", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.isqrt(N) + 1\n    return next_square_root * next_square_root", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_root = math.isqrt(N) + 1\n    return next_root * next_root", "def next_Perfect_Square(N: int) -> int:\n    import math\n    root = math.isqrt(N)\n    return (root + 1) ** 2", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.isqrt(N) + 1\n    return next_square_root * next_square_root", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_sqrt = math.isqrt(N) + 1\n    return next_sqrt * next_sqrt", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_root = math.isqrt(N) + 1\n    return next_root * next_root", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_root = math.isqrt(N) + 1\n    return next_root * next_root", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_root = math.isqrt(N) + 1\n    return next_root * next_root", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.isqrt(N) + 1\n    return next_square_root * next_square_root", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.ceil(math.sqrt(N + 1))\n    return next_square_root * next_square_root"], "clusters": [{"programs_str": ["def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.ceil(math.sqrt(N))\n    return (next_square_root + 1) ** 2", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.ceil(math.sqrt(N))\n    return (next_square_root + 1) ** 2", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.ceil(math.sqrt(N)) + 1\n    return next_square_root ** 2", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.ceil(math.sqrt(N))\n    return (next_square_root + 1) ** 2", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.ceil(math.sqrt(N))\n    return (next_square_root + 1) ** 2", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.ceil(math.sqrt(N))\n    return (next_square_root + 1) ** 2", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.ceil(math.sqrt(N))\n    return (next_square_root + 1) ** 2"], "outputs": "[[4], [9], [16], [25], [36], [49], [49], [64], [1], ['ValueError'], [121], [144]]", "probability": 0.35, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[35], [49], [36]]]"}, {"programs_str": ["def next_Perfect_Square(N: int) -> int:\n    import math\n    root = math.isqrt(N) + 1\n    return root * root", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.isqrt(N) + 1\n    return next_square_root * next_square_root", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_root = math.isqrt(N) + 1\n    return next_root * next_root", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.isqrt(N) + 1\n    return next_square_root * next_square_root", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_root = math.isqrt(N) + 1\n    return next_root * next_root", "def next_Perfect_Square(N: int) -> int:\n    import math\n    root = math.isqrt(N)\n    return (root + 1) ** 2", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.isqrt(N) + 1\n    return next_square_root * next_square_root", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_sqrt = math.isqrt(N) + 1\n    return next_sqrt * next_sqrt", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_root = math.isqrt(N) + 1\n    return next_root * next_root", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_root = math.isqrt(N) + 1\n    return next_root * next_root", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_root = math.isqrt(N) + 1\n    return next_root * next_root", "def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.isqrt(N) + 1\n    return next_square_root * next_square_root"], "outputs": "[[4], [9], [9], [25], [25], [36], [49], [64], [1], ['ValueError'], [121], [144]]", "probability": 0.6, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def next_Perfect_Square(N: int) -> int:\n    import math\n    next_square_root = math.ceil(math.sqrt(N + 1))\n    return next_square_root * next_square_root"], "outputs": "[[4], [9], [9], [25], [25], [36], [49], [64], [1], [0], [121], [144]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/245", "requirement": "from typing import List\n\n\ndef max_sum(arr: List[int]) -> int:\n\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"", "llm_generated_inputs": "[[[1, 15, 51, 45, 33, 100, 12, 18, 9]], [[5, 1, 2, 3, 4]], [[10]], [[-1, -2, -3, -4]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[3, 4, 5, 1, 2]], [[1, 3, 2, 4, 1]], [[10, 20, 30, 20, 10]], [[1, 2, 3, 4, 2, 1, 5]]]", "programs": ["from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    inc = arr[:]\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    dec = arr[:]\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, inc[i] + dec[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    dec = [0] * n\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, inc[i] + dec[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    increasing_sum = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increasing_sum[i] = max(increasing_sum[i], increasing_sum[j] + arr[i])\n    decreasing_sum = arr[:]\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j]:\n                decreasing_sum[i] = max(decreasing_sum[i], decreasing_sum[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, increasing_sum[i] + decreasing_sum[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, inc[i] + dec[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    increase = [0] * n\n    for i in range(n):\n        increase[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increase[i] = max(increase[i], increase[j] + arr[i])\n    decrease = [0] * n\n    for i in range(n - 1, -1, -1):\n        decrease[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                decrease[i] = max(decrease[i], decrease[j] + arr[i])\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, increase[i] + decrease[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    dec = [0] * n\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, inc[i] + dec[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    increasing_sum = arr[:]\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increasing_sum[i] = max(increasing_sum[i], increasing_sum[j] + arr[i])\n    decreasing_sum = arr[:]\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j]:\n                decreasing_sum[i] = max(decreasing_sum[i], decreasing_sum[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, increasing_sum[i] + decreasing_sum[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, inc[i] + dec[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = arr[:]\n    dec = arr[:]\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    increase = [0] * n\n    for i in range(n):\n        increase[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increase[i] = max(increase[i], increase[j] + arr[i])\n    decrease = [0] * n\n    for i in range(n - 1, -1, -1):\n        decrease[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j]:\n                decrease[i] = max(decrease[i], decrease[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, increase[i] + decrease[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = arr[:]\n    dec = arr[:]\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    inc = arr[:]\n    dec = arr[:]\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    max_inc = [0] * n\n    for i in range(n):\n        max_inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_inc[i] = max(max_inc[i], max_inc[j] + arr[i])\n    max_dec = [0] * n\n    for i in range(n - 1, -1, -1):\n        max_dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                max_dec[i] = max(max_dec[i], max_dec[j] + arr[i])\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, max_inc[i] + max_dec[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    increase = [0] * n\n    decrease = [0] * n\n    for i in range(n):\n        increase[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increase[i] = max(increase[i], increase[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        decrease[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                decrease[i] = max(decrease[i], decrease[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, increase[i] + decrease[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    dec = [0] * n\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum"], "clusters": [{"programs_str": ["from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    inc = arr[:]\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    dec = arr[:]\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, inc[i] + dec[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    dec = [0] * n\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, inc[i] + dec[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    increasing_sum = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increasing_sum[i] = max(increasing_sum[i], increasing_sum[j] + arr[i])\n    decreasing_sum = arr[:]\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j]:\n                decreasing_sum[i] = max(decreasing_sum[i], decreasing_sum[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, increasing_sum[i] + decreasing_sum[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, inc[i] + dec[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    increase = [0] * n\n    for i in range(n):\n        increase[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increase[i] = max(increase[i], increase[j] + arr[i])\n    decrease = [0] * n\n    for i in range(n - 1, -1, -1):\n        decrease[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                decrease[i] = max(decrease[i], decrease[j] + arr[i])\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, increase[i] + decrease[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    dec = [0] * n\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, inc[i] + dec[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    increasing_sum = arr[:]\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increasing_sum[i] = max(increasing_sum[i], increasing_sum[j] + arr[i])\n    decreasing_sum = arr[:]\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j]:\n                decreasing_sum[i] = max(decreasing_sum[i], decreasing_sum[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, increasing_sum[i] + decreasing_sum[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, inc[i] + dec[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = arr[:]\n    dec = arr[:]\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    increase = [0] * n\n    for i in range(n):\n        increase[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increase[i] = max(increase[i], increase[j] + arr[i])\n    decrease = [0] * n\n    for i in range(n - 1, -1, -1):\n        decrease[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j]:\n                decrease[i] = max(decrease[i], decrease[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, increase[i] + decrease[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = arr[:]\n    dec = arr[:]\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    inc = arr[:]\n    dec = arr[:]\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    max_inc = [0] * n\n    for i in range(n):\n        max_inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_inc[i] = max(max_inc[i], max_inc[j] + arr[i])\n    max_dec = [0] * n\n    for i in range(n - 1, -1, -1):\n        max_dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                max_dec[i] = max(max_dec[i], max_dec[j] + arr[i])\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, max_inc[i] + max_dec[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    increase = [0] * n\n    decrease = [0] * n\n    for i in range(n):\n        increase[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increase[i] = max(increase[i], increase[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        decrease[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                decrease[i] = max(decrease[i], decrease[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, increase[i] + decrease[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    dec = [0] * n\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum"], "outputs": "[[194], [10], [10], [0], [15], [15], [14], [9], [90], [15]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/247", "requirement": "def lps(str1: str) -> int:\n\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"", "llm_generated_inputs": "[['TENS FOR TENS'], ['ABCBBA'], ['A man a plan a canal Panama'], ['aaaaaaa'], ['abcdefgh'], [''], ['a'], ['ab'], ['racecar']]", "programs": ["def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j] and cl == 2:\n                dp[i][j] = 2\n            elif str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    import re\n    str1 = re.sub('\\\\s+', '', str1).lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = ''.join(str1.split()).upper()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j] and length == 2:\n                dp[i][j] = 2\n            elif str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.lower().replace(' ', '')\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    if n == 0:\n        return 0\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]"], "clusters": [{"programs_str": ["def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j] and cl == 2:\n                dp[i][j] = 2\n            elif str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    import re\n    str1 = re.sub('\\\\s+', '', str1).lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = ''.join(str1.split()).upper()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j] and length == 2:\n                dp[i][j] = 2\n            elif str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.lower().replace(' ', '')\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]"], "outputs": "[[3], [5], [21], [7], [1], ['IndexError'], [1], [1], [7]]", "probability": 0.9, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['TENS FOR TENS'], [3], [5]]]"}, {"programs_str": ["def lps(str1: str) -> int:\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]"], "outputs": "[[5], [5], [19], [7], [1], ['IndexError'], [1], [1], [7]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def lps(str1: str) -> int:\n    str1 = str1.replace(' ', '').lower()\n    n = len(str1)\n    if n == 0:\n        return 0\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]"], "outputs": "[[3], [5], [21], [7], [1], [0], [1], [1], [7]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['TENS FOR TENS'], [3], [5]]]"}]}
{"task_id": "Mbpp/250", "requirement": "def count_X(tup: tuple, x: any) -> int:\n\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"", "llm_generated_inputs": "[[(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4]]", "programs": ["def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)"], "clusters": [{"programs_str": ["def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)"], "outputs": "[[0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/251", "requirement": "from typing import List\n\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"", "llm_generated_inputs": "[[['Red', 'Green', 'Black'], 'c'], [[], 'a'], [['Apple', 'Banana'], 'Fruit'], [['A', 'B', 'C'], ''], [['1', '2', '3'], 0], [['Hello'], 'World']]", "programs": ["from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    return [elem for item in list1 for elem in (element, item)]"], "clusters": [{"programs_str": ["from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    return [elem for item in list1 for elem in (element, item)]"], "outputs": "[[['c', 'Red', 'c', 'Green', 'c', 'Black']], [[]], [['Fruit', 'Apple', 'Fruit', 'Banana']], [['', 'A', '', 'B', '', 'C']], [[0, '1', 0, '2', 0, '3']], [['World', 'Hello']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/252", "requirement": "def convert(numbers: complex) -> tuple:\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"", "llm_generated_inputs": "[[1], [0], [(1+0j)], [1j], [(1+1j)], [(-1-1j)], [(3+4j)], [(-4+3j)], [-1j], [(-2+0j)], [0], [(10000000000+10000000000j)], [(-30000000000-40000000000j)]]", "programs": ["import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, theta = cmath.polar(numbers)\n    return (r, theta)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, theta = cmath.polar(numbers)\n    return (r, theta)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r = abs(numbers)\n    theta = cmath.phase(numbers)\n    return (r, theta)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, theta = cmath.polar(numbers)\n    return (r, theta)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, theta = cmath.polar(numbers)\n    return (r, theta)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    modulus = abs(numbers)\n    angle = cmath.phase(numbers)\n    return (modulus, angle)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    magnitude, angle = cmath.polar(numbers)\n    return (magnitude, angle)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, theta = cmath.polar(numbers)\n    return (r, theta)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)"], "clusters": [{"programs_str": ["import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, theta = cmath.polar(numbers)\n    return (r, theta)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, theta = cmath.polar(numbers)\n    return (r, theta)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r = abs(numbers)\n    theta = cmath.phase(numbers)\n    return (r, theta)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, theta = cmath.polar(numbers)\n    return (r, theta)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, theta = cmath.polar(numbers)\n    return (r, theta)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    modulus = abs(numbers)\n    angle = cmath.phase(numbers)\n    return (modulus, angle)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    magnitude, angle = cmath.polar(numbers)\n    return (magnitude, angle)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, theta = cmath.polar(numbers)\n    return (r, theta)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    r, phi = cmath.polar(numbers)\n    return (r, phi)"], "outputs": "[[(1.0, 0.0)], [(0.0, 0.0)], [(1.0, 0.0)], [(1.0, 1.5707963267948966)], [(1.4142135623730951, 0.7853981633974483)], [(1.4142135623730951, -2.356194490192345)], [(5.0, 0.9272952180016122)], [(5.0, 2.498091544796509)], [(1.0, -1.5707963267948966)], [(2.0, 3.141592653589793)], [(0.0, 0.0)], [(14142135623.730951, 0.7853981633974483)], [(50000000000.0, -2.214297435588181)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/253", "requirement": "from typing import List\n\n\ndef count_integer(lst: List[Any]) -> int:\n\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 'abc', 1.2]], [['a', 'b', 'c', 'd']], [[3, 5, 1.5, -2, 4]], [[None, True, False, 0, 1]], [[10, 'str', -5, 3.14, -1]], [([1, 2, 3], [4, 5], [6])], [[0, 0, 0, 0]], [[1, 1, 1, 1, 1]], [[-1, -2, -3]], [[-1.0, -2.0, 3, 4.5]]]", "programs": ["from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((isinstance(x, int) for x in lst))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for element in lst if isinstance(element, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for x in lst if isinstance(x, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for element in lst if isinstance(element, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for x in lst if isinstance(x, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for x in lst if isinstance(x, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))"], "clusters": [{"programs_str": ["from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((isinstance(x, int) for x in lst))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for element in lst if isinstance(element, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for x in lst if isinstance(x, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for element in lst if isinstance(element, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for x in lst if isinstance(x, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for x in lst if isinstance(x, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))"], "outputs": "[[2], [0], [4], [4], [3], [0], [4], [5], [3], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/255", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"", "llm_generated_inputs": "[[['Red', 'Green', 'Blue'], 1], [['Red'], 1], [['Red', 'Green'], 2], [['Red', 'Green', 'Blue'], 2], [['Red', 'Green', 'Blue'], 3], [['Red', 'Green', 'Blue'], 0], [[], 1], [['Yellow', 'Orange', 'Purple'], 2], [['A', 'B', 'C', 'D'], 4]]", "programs": ["from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import product\n\ndef combinations_colors(l: List[str], n: int) -> List[Tuple]:\n    return list(product(l, repeat=n))", "from typing import List, Tuple\nfrom itertools import product\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(product(l, repeat=n))"], "clusters": [{"programs_str": ["from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))"], "outputs": "[[[('Red',), ('Green',), ('Blue',)]], [[('Red',)]], [[('Red', 'Red'), ('Red', 'Green'), ('Green', 'Green')]], [[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]], [[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]], [[()]], [[]], [[('Yellow', 'Yellow'), ('Yellow', 'Orange'), ('Yellow', 'Purple'), ('Orange', 'Orange'), ('Orange', 'Purple'), ('Purple', 'Purple')]], [[('A', 'A', 'A', 'A'), ('A', 'A', 'A', 'B'), ('A', 'A', 'A', 'C'), ('A', 'A', 'A', 'D'), ('A', 'A', 'B', 'B'), ('A', 'A', 'B', 'C'), ('A', 'A', 'B', 'D'), ('A', 'A', 'C', 'C'), ('A', 'A', 'C', 'D'), ('A', 'A', 'D', 'D'), ('A', 'B', 'B', 'B'), ('A', 'B', 'B', 'C'), ('A', 'B', 'B', 'D'), ('A', 'B', 'C', 'C'), ('A', 'B', 'C', 'D'), ('A', 'B', 'D', 'D'), ('A', 'C', 'C', 'C'), ('A', 'C', 'C', 'D'), ('A', 'C', 'D', 'D'), ('A', 'D', 'D', 'D'), ('B', 'B', 'B', 'B'), ('B', 'B', 'B', 'C'), ('B', 'B', 'B', 'D'), ('B', 'B', 'C', 'C'), ('B', 'B', 'C', 'D'), ('B', 'B', 'D', 'D'), ('B', 'C', 'C', 'C'), ('B', 'C', 'C', 'D'), ('B', 'C', 'D', 'D'), ('B', 'D', 'D', 'D'), ('C', 'C', 'C', 'C'), ('C', 'C', 'C', 'D'), ('C', 'C', 'D', 'D'), ('C', 'D', 'D', 'D'), ('D', 'D', 'D', 'D')]]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\nfrom itertools import product\n\ndef combinations_colors(l: List[str], n: int) -> List[Tuple]:\n    return list(product(l, repeat=n))", "from typing import List, Tuple\nfrom itertools import product\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(product(l, repeat=n))"], "outputs": "[[[('Red',), ('Green',), ('Blue',)]], [[('Red',)]], [[('Red', 'Red'), ('Red', 'Green'), ('Green', 'Red'), ('Green', 'Green')]], [[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]], [[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Red'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Red'), ('Red', 'Blue', 'Green'), ('Red', 'Blue', 'Blue'), ('Green', 'Red', 'Red'), ('Green', 'Red', 'Green'), ('Green', 'Red', 'Blue'), ('Green', 'Green', 'Red'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Red'), ('Green', 'Blue', 'Green'), ('Green', 'Blue', 'Blue'), ('Blue', 'Red', 'Red'), ('Blue', 'Red', 'Green'), ('Blue', 'Red', 'Blue'), ('Blue', 'Green', 'Red'), ('Blue', 'Green', 'Green'), ('Blue', 'Green', 'Blue'), ('Blue', 'Blue', 'Red'), ('Blue', 'Blue', 'Green'), ('Blue', 'Blue', 'Blue')]], [[()]], [[]], [[('Yellow', 'Yellow'), ('Yellow', 'Orange'), ('Yellow', 'Purple'), ('Orange', 'Yellow'), ('Orange', 'Orange'), ('Orange', 'Purple'), ('Purple', 'Yellow'), ('Purple', 'Orange'), ('Purple', 'Purple')]], [[('A', 'A', 'A', 'A'), ('A', 'A', 'A', 'B'), ('A', 'A', 'A', 'C'), ('A', 'A', 'A', 'D'), ('A', 'A', 'B', 'A'), ('A', 'A', 'B', 'B'), ('A', 'A', 'B', 'C'), ('A', 'A', 'B', 'D'), ('A', 'A', 'C', 'A'), ('A', 'A', 'C', 'B'), ('A', 'A', 'C', 'C'), ('A', 'A', 'C', 'D'), ('A', 'A', 'D', 'A'), ('A', 'A', 'D', 'B'), ('A', 'A', 'D', 'C'), ('A', 'A', 'D', 'D'), ('A', 'B', 'A', 'A'), ('A', 'B', 'A', 'B'), ('A', 'B', 'A', 'C'), ('A', 'B', 'A', 'D'), ('A', 'B', 'B', 'A'), ('A', 'B', 'B', 'B'), ('A', 'B', 'B', 'C'), ('A', 'B', 'B', 'D'), ('A', 'B', 'C', 'A'), ('A', 'B', 'C', 'B'), ('A', 'B', 'C', 'C'), ('A', 'B', 'C', 'D'), ('A', 'B', 'D', 'A'), ('A', 'B', 'D', 'B'), ('A', 'B', 'D', 'C'), ('A', 'B', 'D', 'D'), ('A', 'C', 'A', 'A'), ('A', 'C', 'A', 'B'), ('A', 'C', 'A', 'C'), ('A', 'C', 'A', 'D'), ('A', 'C', 'B', 'A'), ('A', 'C', 'B', 'B'), ('A', 'C', 'B', 'C'), ('A', 'C', 'B', 'D'), ('A', 'C', 'C', 'A'), ('A', 'C', 'C', 'B'), ('A', 'C', 'C', 'C'), ('A', 'C', 'C', 'D'), ('A', 'C', 'D', 'A'), ('A', 'C', 'D', 'B'), ('A', 'C', 'D', 'C'), ('A', 'C', 'D', 'D'), ('A', 'D', 'A', 'A'), ('A', 'D', 'A', 'B'), ('A', 'D', 'A', 'C'), ('A', 'D', 'A', 'D'), ('A', 'D', 'B', 'A'), ('A', 'D', 'B', 'B'), ('A', 'D', 'B', 'C'), ('A', 'D', 'B', 'D'), ('A', 'D', 'C', 'A'), ('A', 'D', 'C', 'B'), ('A', 'D', 'C', 'C'), ('A', 'D', 'C', 'D'), ('A', 'D', 'D', 'A'), ('A', 'D', 'D', 'B'), ('A', 'D', 'D', 'C'), ('A', 'D', 'D', 'D'), ('B', 'A', 'A', 'A'), ('B', 'A', 'A', 'B'), ('B', 'A', 'A', 'C'), ('B', 'A', 'A', 'D'), ('B', 'A', 'B', 'A'), ('B', 'A', 'B', 'B'), ('B', 'A', 'B', 'C'), ('B', 'A', 'B', 'D'), ('B', 'A', 'C', 'A'), ('B', 'A', 'C', 'B'), ('B', 'A', 'C', 'C'), ('B', 'A', 'C', 'D'), ('B', 'A', 'D', 'A'), ('B', 'A', 'D', 'B'), ('B', 'A', 'D', 'C'), ('B', 'A', 'D', 'D'), ('B', 'B', 'A', 'A'), ('B', 'B', 'A', 'B'), ('B', 'B', 'A', 'C'), ('B', 'B', 'A', 'D'), ('B', 'B', 'B', 'A'), ('B', 'B', 'B', 'B'), ('B', 'B', 'B', 'C'), ('B', 'B', 'B', 'D'), ('B', 'B', 'C', 'A'), ('B', 'B', 'C', 'B'), ('B', 'B', 'C', 'C'), ('B', 'B', 'C', 'D'), ('B', 'B', 'D', 'A'), ('B', 'B', 'D', 'B'), ('B', 'B', 'D', 'C'), ('B', 'B', 'D', 'D'), ('B', 'C', 'A', 'A'), ('B', 'C', 'A', 'B'), ('B', 'C', 'A', 'C'), ('B', 'C', 'A', 'D'), ('B', 'C', 'B', 'A'), ('B', 'C', 'B', 'B'), ('B', 'C', 'B', 'C'), ('B', 'C', 'B', 'D'), ('B', 'C', 'C', 'A'), ('B', 'C', 'C', 'B'), ('B', 'C', 'C', 'C'), ('B', 'C', 'C', 'D'), ('B', 'C', 'D', 'A'), ('B', 'C', 'D', 'B'), ('B', 'C', 'D', 'C'), ('B', 'C', 'D', 'D'), ('B', 'D', 'A', 'A'), ('B', 'D', 'A', 'B'), ('B', 'D', 'A', 'C'), ('B', 'D', 'A', 'D'), ('B', 'D', 'B', 'A'), ('B', 'D', 'B', 'B'), ('B', 'D', 'B', 'C'), ('B', 'D', 'B', 'D'), ('B', 'D', 'C', 'A'), ('B', 'D', 'C', 'B'), ('B', 'D', 'C', 'C'), ('B', 'D', 'C', 'D'), ('B', 'D', 'D', 'A'), ('B', 'D', 'D', 'B'), ('B', 'D', 'D', 'C'), ('B', 'D', 'D', 'D'), ('C', 'A', 'A', 'A'), ('C', 'A', 'A', 'B'), ('C', 'A', 'A', 'C'), ('C', 'A', 'A', 'D'), ('C', 'A', 'B', 'A'), ('C', 'A', 'B', 'B'), ('C', 'A', 'B', 'C'), ('C', 'A', 'B', 'D'), ('C', 'A', 'C', 'A'), ('C', 'A', 'C', 'B'), ('C', 'A', 'C', 'C'), ('C', 'A', 'C', 'D'), ('C', 'A', 'D', 'A'), ('C', 'A', 'D', 'B'), ('C', 'A', 'D', 'C'), ('C', 'A', 'D', 'D'), ('C', 'B', 'A', 'A'), ('C', 'B', 'A', 'B'), ('C', 'B', 'A', 'C'), ('C', 'B', 'A', 'D'), ('C', 'B', 'B', 'A'), ('C', 'B', 'B', 'B'), ('C', 'B', 'B', 'C'), ('C', 'B', 'B', 'D'), ('C', 'B', 'C', 'A'), ('C', 'B', 'C', 'B'), ('C', 'B', 'C', 'C'), ('C', 'B', 'C', 'D'), ('C', 'B', 'D', 'A'), ('C', 'B', 'D', 'B'), ('C', 'B', 'D', 'C'), ('C', 'B', 'D', 'D'), ('C', 'C', 'A', 'A'), ('C', 'C', 'A', 'B'), ('C', 'C', 'A', 'C'), ('C', 'C', 'A', 'D'), ('C', 'C', 'B', 'A'), ('C', 'C', 'B', 'B'), ('C', 'C', 'B', 'C'), ('C', 'C', 'B', 'D'), ('C', 'C', 'C', 'A'), ('C', 'C', 'C', 'B'), ('C', 'C', 'C', 'C'), ('C', 'C', 'C', 'D'), ('C', 'C', 'D', 'A'), ('C', 'C', 'D', 'B'), ('C', 'C', 'D', 'C'), ('C', 'C', 'D', 'D'), ('C', 'D', 'A', 'A'), ('C', 'D', 'A', 'B'), ('C', 'D', 'A', 'C'), ('C', 'D', 'A', 'D'), ('C', 'D', 'B', 'A'), ('C', 'D', 'B', 'B'), ('C', 'D', 'B', 'C'), ('C', 'D', 'B', 'D'), ('C', 'D', 'C', 'A'), ('C', 'D', 'C', 'B'), ('C', 'D', 'C', 'C'), ('C', 'D', 'C', 'D'), ('C', 'D', 'D', 'A'), ('C', 'D', 'D', 'B'), ('C', 'D', 'D', 'C'), ('C', 'D', 'D', 'D'), ('D', 'A', 'A', 'A'), ('D', 'A', 'A', 'B'), ('D', 'A', 'A', 'C'), ('D', 'A', 'A', 'D'), ('D', 'A', 'B', 'A'), ('D', 'A', 'B', 'B'), ('D', 'A', 'B', 'C'), ('D', 'A', 'B', 'D'), ('D', 'A', 'C', 'A'), ('D', 'A', 'C', 'B'), ('D', 'A', 'C', 'C'), ('D', 'A', 'C', 'D'), ('D', 'A', 'D', 'A'), ('D', 'A', 'D', 'B'), ('D', 'A', 'D', 'C'), ('D', 'A', 'D', 'D'), ('D', 'B', 'A', 'A'), ('D', 'B', 'A', 'B'), ('D', 'B', 'A', 'C'), ('D', 'B', 'A', 'D'), ('D', 'B', 'B', 'A'), ('D', 'B', 'B', 'B'), ('D', 'B', 'B', 'C'), ('D', 'B', 'B', 'D'), ('D', 'B', 'C', 'A'), ('D', 'B', 'C', 'B'), ('D', 'B', 'C', 'C'), ('D', 'B', 'C', 'D'), ('D', 'B', 'D', 'A'), ('D', 'B', 'D', 'B'), ('D', 'B', 'D', 'C'), ('D', 'B', 'D', 'D'), ('D', 'C', 'A', 'A'), ('D', 'C', 'A', 'B'), ('D', 'C', 'A', 'C'), ('D', 'C', 'A', 'D'), ('D', 'C', 'B', 'A'), ('D', 'C', 'B', 'B'), ('D', 'C', 'B', 'C'), ('D', 'C', 'B', 'D'), ('D', 'C', 'C', 'A'), ('D', 'C', 'C', 'B'), ('D', 'C', 'C', 'C'), ('D', 'C', 'C', 'D'), ('D', 'C', 'D', 'A'), ('D', 'C', 'D', 'B'), ('D', 'C', 'D', 'C'), ('D', 'C', 'D', 'D'), ('D', 'D', 'A', 'A'), ('D', 'D', 'A', 'B'), ('D', 'D', 'A', 'C'), ('D', 'D', 'A', 'D'), ('D', 'D', 'B', 'A'), ('D', 'D', 'B', 'B'), ('D', 'D', 'B', 'C'), ('D', 'D', 'B', 'D'), ('D', 'D', 'C', 'A'), ('D', 'D', 'C', 'B'), ('D', 'D', 'C', 'C'), ('D', 'D', 'C', 'D'), ('D', 'D', 'D', 'A'), ('D', 'D', 'D', 'B'), ('D', 'D', 'D', 'C'), ('D', 'D', 'D', 'D')]]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/256", "requirement": "def count_Primes_nums(n: int) -> int:\n\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [3], [10], [20], [30], [100], [50], [101]]", "programs": ["def count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    prime_count = 0\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    prime_count = sum(is_prime)\n    return prime_count", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n\n    def is_prime(k: int) -> bool:\n        if k < 2:\n            return False\n        for i in range(2, int(k ** 0.5) + 1):\n            if k % i == 0:\n                return False\n        return True\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0], primes[1] = (False, False)\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for multiple in range(i * i, n, i):\n                primes[multiple] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    prime_count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_count += 1\n    return prime_count", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    return sum(is_prime)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    return sum(is_prime)", "def count_Primes_nums(n: int) -> int:\n    if n <= 1:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)"], "clusters": [{"programs_str": ["def count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    prime_count = 0\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    prime_count = sum(is_prime)\n    return prime_count", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n\n    def is_prime(k: int) -> bool:\n        if k < 2:\n            return False\n        for i in range(2, int(k ** 0.5) + 1):\n            if k % i == 0:\n                return False\n        return True\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0], primes[1] = (False, False)\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for multiple in range(i * i, n, i):\n                primes[multiple] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    prime_count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_count += 1\n    return prime_count", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    return sum(is_prime)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    return sum(is_prime)", "def count_Primes_nums(n: int) -> int:\n    if n <= 1:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)"], "outputs": "[[0], [0], [0], [1], [4], [8], [10], [25], [15], [25]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/257", "requirement": "def swap_numbers(a: int, b: int) -> tuple:\n\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"", "llm_generated_inputs": "[[10, 20], [0, 5], [-10, 10], [100, 1000], [1, -1], [2, 0], [-5, -10]]", "programs": ["def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)"], "clusters": [{"programs_str": ["def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)"], "outputs": "[[(20, 10)], [(5, 0)], [(10, -10)], [(1000, 100)], [(-1, 1)], [(0, 2)], [(-10, -5)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/259", "requirement": "from typing import Tuple\n\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"", "llm_generated_inputs": "[[((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))], [((0, 0), (1, 1)), ((2, 2), (3, 3))], [((-1, -3), (-4, -5)), ((-2, -2), (-1, -1))], [((100, 200), (300, 400)), ((500, 600), (700, 800))], [((5, 5), (5, 5)), ((5, 5), (5, 5))], [(1, 1), (2, 2)], [((1, 2, 3), (4, 5)), ((2, 3, 4), (1, 2))]]", "programs": ["from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b) for a, b in zip(t1, t2)) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b) for a, b in zip(pair1, pair2)) for pair1, pair2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    max_length = max(len(test_tup1), len(test_tup2))\n    result = []\n    for i in range(max_length):\n        first = test_tup1[i] if i < len(test_tup1) else (0, 0)\n        second = test_tup2[i] if i < len(test_tup2) else (0, 0)\n        result.append((max(first[0], second[0]), max(first[1], second[1])))\n    return tuple(result)", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    result = tuple(((max(a, b) for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2)))\n    return result", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b) for a, b in zip(t1, t2)) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    result = tuple(((max(a, b), max(c, d)) for (a, b), (c, d) in zip(test_tup1, test_tup2)))\n    return result", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b) for a, b in zip(t1, t2)) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b) for a, b in zip(t1, t2)) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b) for a, b in zip(t1, t2)) for t1, t2 in zip(test_tup1, test_tup2)))"], "clusters": [{"programs_str": ["from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b) for a, b in zip(t1, t2)) for t1, t2 in zip(test_tup1, test_tup2)))"], "outputs": "[[(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33779f140>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33779f5a0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33779ea40>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0d1c0>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0db60>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0dfc0>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0c660>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0f760>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33cd3f300>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33cd3e0a0>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33cd3eea0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33cd3fbc0>)], ['TypeError'], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33cd3e6c0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33cd3d000>)]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0ef80>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0f3e0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0c740>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0c9e0>)], [((6, 7), (4, 9), (2, 9), (7, 10))]]]"}, {"programs_str": ["from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b) for a, b in zip(pair1, pair2)) for pair1, pair2 in zip(test_tup1, test_tup2)))"], "outputs": "[[(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33cd3f680>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33cd3fca0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c820f20>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c820200>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c820040>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c821d20>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c821b60>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c820c80>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c8233e0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c821fc0>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c823300>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c8217e0>)], ['TypeError'], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c8225e0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c820d60>)]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0cf20>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0de00>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0d620>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0d9a0>)], [((6, 7), (4, 9), (2, 9), (7, 10))]]]"}, {"programs_str": ["from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_tup1, test_tup2)))"], "outputs": "[[((6, 7), (4, 9), (2, 9), (7, 10))], [((2, 2), (3, 3))], [((-1, -2), (-1, -1))], [((500, 600), (700, 800))], [((5, 5), (5, 5))], ['TypeError'], ['ValueError']]", "probability": 0.55, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    max_length = max(len(test_tup1), len(test_tup2))\n    result = []\n    for i in range(max_length):\n        first = test_tup1[i] if i < len(test_tup1) else (0, 0)\n        second = test_tup2[i] if i < len(test_tup2) else (0, 0)\n        result.append((max(first[0], second[0]), max(first[1], second[1])))\n    return tuple(result)"], "outputs": "[[((6, 7), (4, 9), (2, 9), (7, 10))], [((2, 2), (3, 3))], [((-1, -2), (-1, -1))], [((500, 600), (700, 800))], [((5, 5), (5, 5))], ['TypeError'], [((2, 3), (4, 5))]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    result = tuple(((max(a, b) for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2)))\n    return result"], "outputs": "[[(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c823840>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c821540>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c822260>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c8234c0>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c822180>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c822ea0>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c823d80>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c820900>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33cd3c580>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c823ca0>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c8235a0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c822880>)], ['TypeError'], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c821e00>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c822c00>)]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0c040>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0c3c0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0d8c0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0cd60>)], [((6, 7), (4, 9), (2, 9), (7, 10))]]]"}, {"programs_str": ["from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b) for a, b in zip(t1, t2)) for t1, t2 in zip(test_tup1, test_tup2)))"], "outputs": "[[(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c823e60>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c822dc0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c8219a0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c8220a0>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c822500>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c822b20>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c823140>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c823680>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c820120>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c823920>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c820580>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c823bc0>)], ['TypeError'], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c821380>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c822f80>)]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0f220>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0e7a0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0c200>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0e340>)], [((6, 7), (4, 9), (2, 9), (7, 10))]]]"}, {"programs_str": ["from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    result = tuple(((max(a, b), max(c, d)) for (a, b), (c, d) in zip(test_tup1, test_tup2)))\n    return result"], "outputs": "[[((3, 7), (5, 9), (9, 1), (10, 7))], [((0, 2), (1, 3))], [((-1, -2), (-4, -1))], [((200, 600), (400, 800))], [((5, 5), (5, 5))], ['TypeError'], ['ValueError']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))], [((3, 7), (5, 9), (9, 1), (10, 7))], [((6, 7), (4, 9), (2, 9), (7, 10))]]]"}, {"programs_str": ["from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b) for a, b in zip(t1, t2)) for t1, t2 in zip(test_tup1, test_tup2)))"], "outputs": "[[(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b2a420>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b2b220>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b28660>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b2a260>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b29540>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b2a180>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b2a960>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b28f20>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c8211c0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b28120>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c820740>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c823060>)], ['TypeError'], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c821620>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c8218c0>)]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b2adc0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b29fc0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b29ee0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b29700>)], [((6, 7), (4, 9), (2, 9), (7, 10))]]]"}, {"programs_str": ["from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b) for a, b in zip(t1, t2)) for t1, t2 in zip(test_tup1, test_tup2)))"], "outputs": "[[(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c8a5a80>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c8a6880>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c8a4040>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c8a74c0>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33cd3ef80>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33cd3f840>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33cd3eb20>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33cd3d700>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33cd3edc0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33cd3da80>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33cd3e500>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33cd3f5a0>)], ['TypeError'], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33cd3c820>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33cd3fe60>)]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b290e0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b29e00>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b283c0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b292a0>)], [((6, 7), (4, 9), (2, 9), (7, 10))]]]"}, {"programs_str": ["from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a, b) for a, b in zip(t1, t2)) for t1, t2 in zip(test_tup1, test_tup2)))"], "outputs": "[[(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0fa00>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0eb20>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0cba0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0dc40>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0ea40>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0edc0>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0e960>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b0c580>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c8a7760>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c8a60a0>)], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x3378e8f20>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x3378ea5e0>)], ['TypeError'], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c8209e0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x33c823a00>)]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))], [(<generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b2aa40>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b2ace0>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b28200>, <generator object maximize_elements.<locals>.<genexpr>.<genexpr> at 0x337b2a880>)], [((6, 7), (4, 9), (2, 9), (7, 10))]]]"}]}
{"task_id": "Mbpp/260", "requirement": "def newman_prime(n: int) -> int:\n\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\nassert newman_prime(3) == 7\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [10], [20], [0], [-5], [100]]", "programs": ["from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if isprime(num) and all((isprime(num - k) for k in [1, 3, 7])):\n            count += 1\n    return num", "from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    newman_primes = []\n    num = 1\n    while len(newman_primes) < n:\n        if isprime(num) and (num == 2 or num == 3 or num == 5 or (num % 6 == 1) or (num % 6 == 5)):\n            newman_primes.append(num)\n        num += 1\n    return newman_primes[-1]", "from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    newman_primes = []\n    k = 1\n    while len(newman_primes) < n:\n        if isprime(k) and (3 * k + 1) % 2 == 0:\n            newman_primes.append(k)\n        k += 1\n    return newman_primes[n - 1]", "from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer.')\n    count = 0\n    num = 1\n    nth_newman_prime = 0\n    while count < n:\n        num += 1\n        if isprime(num) and (num % 10 == 1 or num % 10 == 3 or num % 10 == 7 or (num % 10 == 9)):\n            count += 1\n            nth_newman_prime = num\n    return nth_newman_prime", "def newman_prime(n: int) -> int:\n    from sympy import isprime\n\n    def generate_newman_primes(limit):\n        primes = []\n        candidate = 2\n        while len(primes) < limit:\n            if isprime(candidate):\n                primes.append(candidate)\n            candidate += 1\n        return primes\n    newman_primes = []\n    primes = generate_newman_primes(100)\n    for i in range(1, len(primes)):\n        np = primes[i] ** 2 + primes[i - 1] ** 2\n        if isprime(np):\n            newman_primes.append(np)\n    return newman_primes[n - 1]", "from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if isprime(num) and (num - 1) % 3 == 0:\n            count += 1\n    return num", "from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    primes = []\n    candidate = 1\n    while len(primes) < n:\n        candidate += 1\n        if isprime(candidate) and (candidate % 10 == 1 or candidate % 10 == 3 or candidate % 10 == 7 or (candidate % 10 == 9)):\n            primes.append(candidate)\n    return primes[-1]", "from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if isprime(num) and (num == 2 or num % 3 == 1):\n            count += 1\n    return num", "from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    primes = []\n    num = 1\n    while len(primes) < n:\n        num += 1\n        if isprime(num) and (num == 2 or num % 3 == 1 or num % 3 == 2):\n            primes.append(num)\n    return primes[-1]", "from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    primes = []\n    candidate = 2\n    while len(primes) < n:\n        if isprime(candidate) and (candidate == 2 or candidate == 3 or candidate == 5 or (not any((candidate % p == 0 for p in primes)))):\n            primes.append(candidate)\n        candidate += 1\n    return primes[n - 1]", "from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if isprime(num) and (num == 2 or (num - 1) % 3 == 0):\n            count += 1\n    return num", "from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    newman_primes = []\n    candidate = 2\n    while len(newman_primes) < n:\n        if isprime(candidate):\n            if candidate == 2 or candidate == 3 or candidate == 5:\n                newman_primes.append(candidate)\n            elif isprime(2 * candidate + 1):\n                newman_primes.append(candidate)\n        candidate += 1\n    return newman_primes[n - 1]", "def newman_prime(n: int) -> int:\n    from sympy import isprime\n\n    def is_newman_shanks_williams_prime(p: int) -> bool:\n        if p < 2:\n            return False\n        if p in (2, 3):\n            return True\n        prev_primes = [2, 3]\n        while prev_primes[-1] < p:\n            next_prime = prev_primes[-1] + 2\n            while not isprime(next_prime):\n                next_prime += 2\n            prev_primes.append(next_prime)\n        if p in prev_primes:\n            return True\n        for prime in prev_primes:\n            if prime >= p:\n                break\n            if isprime(p + 2 * prime):\n                return True\n        return False\n    count = 0\n    current = 1\n    while count < n:\n        current += 1\n        if is_newman_shanks_williams_prime(current):\n            count += 1\n    return current", "def newman_prime(n: int) -> int:\n    from sympy import primerange\n    if n < 1:\n        return None\n    primes = list(primerange(1, 100))\n    newman_primes = []\n    for p in primes:\n        if p > 3:\n            if (p - 1) % 3 == 0 or (p + 1) % 3 == 0:\n                newman_primes.append(p)\n    newman_primes = newman_primes[:n]\n    return newman_primes[-1] if len(newman_primes) >= n else None", "def newman_prime(n: int) -> int:\n    from sympy import primerange\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n\n    def is_newman_prime(p):\n        if p < 2:\n            return False\n        if p == 2:\n            return True\n        if p % 2 == 0:\n            return False\n        newman_primes = [2, 3, 5, 7, 11]\n        for prime in newman_primes:\n            if p == prime:\n                return True\n            elif p > prime and (p % prime == 1 or p % prime == 2):\n                continue\n            else:\n                return False\n        return True\n    count = 0\n    current = 2\n    while count < n:\n        if is_newman_prime(current):\n            count += 1\n            if count == n:\n                return current\n        current += 1", "def newman_prime(n: int) -> int:\n    from sympy import isprime\n\n    def newman_shanks_williams_primes(limit):\n        primes = []\n        q = 1\n        while len(primes) < limit:\n            if isprime(q):\n                r = int(q ** 0.5)\n                if r * r == q:\n                    primes.append(q)\n                elif isprime(r) and isprime(r + 1) and (r * (r + 1) == q):\n                    primes.append(q)\n            q += 1\n        return primes\n    return newman_shanks_williams_primes(n)[-1]", "def newman_prime(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n\n    def is_newman_prime(k: int) -> bool:\n        if k < 2:\n            return False\n        for prime in primes:\n            if prime * prime > k:\n                break\n            if k % prime == 0:\n                return False\n        return True\n    primes = []\n    count = 0\n    candidate = 2\n    while count < n:\n        if is_newman_prime(candidate):\n            primes.append(candidate)\n            count += 1\n        candidate += 1\n    return primes[-1]", "def newman_prime(n: int) -> int:\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def newman_shanks_williams_primes(count):\n        primes = []\n        current = 1\n        while len(primes) < count:\n            if is_prime(current):\n                primes.append(current)\n            current += 1\n        return primes\n    primes_list = newman_shanks_williams_primes(n)\n    return primes_list[n - 1]", "def newman_prime(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    primes = []\n    candidate = 1\n    while len(primes) < n:\n        candidate += 1\n        if candidate % 3 == 1 and is_prime(candidate):\n            primes.append(candidate)\n    return primes[-1]", "def newman_prime(n: int) -> int:\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams(k):\n        return (2 ** k - 1) * (2 ** (k + 1) - 1)\n    primes = []\n    k = 1\n    while len(primes) < n:\n        candidate = newman_shanks_williams(k)\n        if is_prime(candidate):\n            primes.append(candidate)\n        k += 1\n    return primes[-1]"], "clusters": [{"programs_str": ["from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if isprime(num) and all((isprime(num - k) for k in [1, 3, 7])):\n            count += 1\n    return num", "from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    newman_primes = []\n    num = 1\n    while len(newman_primes) < n:\n        if isprime(num) and (num == 2 or num == 3 or num == 5 or (num % 6 == 1) or (num % 6 == 5)):\n            newman_primes.append(num)\n        num += 1\n    return newman_primes[-1]", "from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    newman_primes = []\n    k = 1\n    while len(newman_primes) < n:\n        if isprime(k) and (3 * k + 1) % 2 == 0:\n            newman_primes.append(k)\n        k += 1\n    return newman_primes[n - 1]", "from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer.')\n    count = 0\n    num = 1\n    nth_newman_prime = 0\n    while count < n:\n        num += 1\n        if isprime(num) and (num % 10 == 1 or num % 10 == 3 or num % 10 == 7 or (num % 10 == 9)):\n            count += 1\n            nth_newman_prime = num\n    return nth_newman_prime", "def newman_prime(n: int) -> int:\n    from sympy import isprime\n\n    def generate_newman_primes(limit):\n        primes = []\n        candidate = 2\n        while len(primes) < limit:\n            if isprime(candidate):\n                primes.append(candidate)\n            candidate += 1\n        return primes\n    newman_primes = []\n    primes = generate_newman_primes(100)\n    for i in range(1, len(primes)):\n        np = primes[i] ** 2 + primes[i - 1] ** 2\n        if isprime(np):\n            newman_primes.append(np)\n    return newman_primes[n - 1]", "from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if isprime(num) and (num - 1) % 3 == 0:\n            count += 1\n    return num", "from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    primes = []\n    candidate = 1\n    while len(primes) < n:\n        candidate += 1\n        if isprime(candidate) and (candidate % 10 == 1 or candidate % 10 == 3 or candidate % 10 == 7 or (candidate % 10 == 9)):\n            primes.append(candidate)\n    return primes[-1]", "from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if isprime(num) and (num == 2 or num % 3 == 1):\n            count += 1\n    return num", "from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    primes = []\n    num = 1\n    while len(primes) < n:\n        num += 1\n        if isprime(num) and (num == 2 or num % 3 == 1 or num % 3 == 2):\n            primes.append(num)\n    return primes[-1]", "from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    primes = []\n    candidate = 2\n    while len(primes) < n:\n        if isprime(candidate) and (candidate == 2 or candidate == 3 or candidate == 5 or (not any((candidate % p == 0 for p in primes)))):\n            primes.append(candidate)\n        candidate += 1\n    return primes[n - 1]", "from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if isprime(num) and (num == 2 or (num - 1) % 3 == 0):\n            count += 1\n    return num", "from sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    newman_primes = []\n    candidate = 2\n    while len(newman_primes) < n:\n        if isprime(candidate):\n            if candidate == 2 or candidate == 3 or candidate == 5:\n                newman_primes.append(candidate)\n            elif isprime(2 * candidate + 1):\n                newman_primes.append(candidate)\n        candidate += 1\n    return newman_primes[n - 1]", "def newman_prime(n: int) -> int:\n    from sympy import isprime\n\n    def is_newman_shanks_williams_prime(p: int) -> bool:\n        if p < 2:\n            return False\n        if p in (2, 3):\n            return True\n        prev_primes = [2, 3]\n        while prev_primes[-1] < p:\n            next_prime = prev_primes[-1] + 2\n            while not isprime(next_prime):\n                next_prime += 2\n            prev_primes.append(next_prime)\n        if p in prev_primes:\n            return True\n        for prime in prev_primes:\n            if prime >= p:\n                break\n            if isprime(p + 2 * prime):\n                return True\n        return False\n    count = 0\n    current = 1\n    while count < n:\n        current += 1\n        if is_newman_shanks_williams_prime(current):\n            count += 1\n    return current", "def newman_prime(n: int) -> int:\n    from sympy import primerange\n    if n < 1:\n        return None\n    primes = list(primerange(1, 100))\n    newman_primes = []\n    for p in primes:\n        if p > 3:\n            if (p - 1) % 3 == 0 or (p + 1) % 3 == 0:\n                newman_primes.append(p)\n    newman_primes = newman_primes[:n]\n    return newman_primes[-1] if len(newman_primes) >= n else None", "def newman_prime(n: int) -> int:\n    from sympy import primerange\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n\n    def is_newman_prime(p):\n        if p < 2:\n            return False\n        if p == 2:\n            return True\n        if p % 2 == 0:\n            return False\n        newman_primes = [2, 3, 5, 7, 11]\n        for prime in newman_primes:\n            if p == prime:\n                return True\n            elif p > prime and (p % prime == 1 or p % prime == 2):\n                continue\n            else:\n                return False\n        return True\n    count = 0\n    current = 2\n    while count < n:\n        if is_newman_prime(current):\n            count += 1\n            if count == n:\n                return current\n        current += 1", "def newman_prime(n: int) -> int:\n    from sympy import isprime\n\n    def newman_shanks_williams_primes(limit):\n        primes = []\n        q = 1\n        while len(primes) < limit:\n            if isprime(q):\n                r = int(q ** 0.5)\n                if r * r == q:\n                    primes.append(q)\n                elif isprime(r) and isprime(r + 1) and (r * (r + 1) == q):\n                    primes.append(q)\n            q += 1\n        return primes\n    return newman_shanks_williams_primes(n)[-1]"], "outputs": "[['AttributeError'], ['AttributeError'], ['AttributeError'], ['AttributeError'], ['AttributeError'], ['AttributeError'], ['AttributeError'], ['AttributeError']]", "probability": 0.8, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3], ['AttributeError'], [7]]]"}, {"programs_str": ["def newman_prime(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n\n    def is_newman_prime(k: int) -> bool:\n        if k < 2:\n            return False\n        for prime in primes:\n            if prime * prime > k:\n                break\n            if k % prime == 0:\n                return False\n        return True\n    primes = []\n    count = 0\n    candidate = 2\n    while count < n:\n        if is_newman_prime(candidate):\n            primes.append(candidate)\n            count += 1\n        candidate += 1\n    return primes[-1]"], "outputs": "[[2], [3], [5], [29], [71], ['ValueError'], ['ValueError'], [541]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3], [5], [7]]]"}, {"programs_str": ["def newman_prime(n: int) -> int:\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def newman_shanks_williams_primes(count):\n        primes = []\n        current = 1\n        while len(primes) < count:\n            if is_prime(current):\n                primes.append(current)\n            current += 1\n        return primes\n    primes_list = newman_shanks_williams_primes(n)\n    return primes_list[n - 1]"], "outputs": "[[2], [3], [5], [29], [71], ['IndexError'], ['IndexError'], [541]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3], [5], [7]]]"}, {"programs_str": ["def newman_prime(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    primes = []\n    candidate = 1\n    while len(primes) < n:\n        candidate += 1\n        if candidate % 3 == 1 and is_prime(candidate):\n            primes.append(candidate)\n    return primes[-1]"], "outputs": "[[7], [13], [19], [79], [193], ['IndexError'], ['IndexError'], [1279]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3], [19], [7]]]"}, {"programs_str": ["def newman_prime(n: int) -> int:\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams(k):\n        return (2 ** k - 1) * (2 ** (k + 1) - 1)\n    primes = []\n    k = 1\n    while len(primes) < n:\n        candidate = newman_shanks_williams(k)\n        if is_prime(candidate):\n            primes.append(candidate)\n        k += 1\n    return primes[-1]"], "outputs": "[[3], ['OverflowError'], ['OverflowError'], ['OverflowError'], ['OverflowError'], ['IndexError'], ['IndexError'], ['OverflowError']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3], ['OverflowError'], [7]]]"}]}
{"task_id": "Mbpp/261", "requirement": "from typing import Tuple\n\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"", "llm_generated_inputs": "[[(10, 4, 6, 9), (5, 2, 3, 3)], [(1, 2, 3), (1, 2, 0)], [(0, 0, 0), (1, 2, 3)], [(-10, -20), (2, 4)], [(4,), (2,)]]", "programs": ["from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))"], "clusters": [{"programs_str": ["from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))"], "outputs": "[[(2.0, 2.0, 2.0, 3.0)], ['ZeroDivisionError'], [(0.0, 0.0, 0.0)], [(-5.0, -5.0)], [(2.0,)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/262", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"", "llm_generated_inputs": "[[[1, 1, 2, 3, 4, 4, 5, 1], 3], [[10, 20, 30, 40, 50], 2], [[], 0], [[1, 2], 1], [[5, 4, 3, 2, 1], 5], [[1, 1, 1, 1], 0], [[1, 2, 3, 4, 5], 10]]", "programs": ["from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])"], "clusters": [{"programs_str": ["from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])"], "outputs": "[[([1, 1, 2], [3, 4, 4, 5, 1])], [([10, 20], [30, 40, 50])], [([], [])], [([1], [2])], [([5, 4, 3, 2, 1], [])], [([], [1, 1, 1, 1])], [([1, 2, 3, 4, 5], [])]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/264", "requirement": "def dog_age(h_age: float) -> float:\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"", "llm_generated_inputs": "[[0], [1], [5], [10], [12], [15], [20], [3.5], [7.2], [-1], [25]]", "programs": ["def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Age cannot be negative')\n    elif h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Age cannot be negative')\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Human age cannot be negative.')\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Human age cannot be negative')\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Human age cannot be negative')\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Human age cannot be negative.')\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Human age cannot be negative')\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Age cannot be negative')\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Human age cannot be negative')\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        return 0\n    if h_age <= 2:\n        return h_age * 10.5\n    return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Human age cannot be negative')\n    return 16 * h_age + 31", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Human age cannot be negative')\n    if h_age == 1:\n        return 15\n    elif h_age == 2:\n        return 24\n    else:\n        return 24 + (h_age - 2) * 5", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Human age cannot be negative')\n    elif h_age == 1:\n        return 15.0\n    elif h_age == 2:\n        return 24.0\n    else:\n        return 24.0 + (h_age - 2) * 5.0"], "clusters": [{"programs_str": ["def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4"], "outputs": "[[0.0], [10.5], [33], [53], [61], [73], [93], [27.0], [41.8], [-10.5], [113]]", "probability": 0.35, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Age cannot be negative')\n    elif h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Age cannot be negative')\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Human age cannot be negative.')\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Human age cannot be negative')\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Human age cannot be negative')\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Human age cannot be negative.')\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Human age cannot be negative')\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Age cannot be negative')\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Human age cannot be negative')\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4"], "outputs": "[[0.0], [10.5], [33], [53], [61], [73], [93], [27.0], [41.8], ['ValueError'], [113]]", "probability": 0.45, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        return 0\n    if h_age <= 2:\n        return h_age * 10.5\n    return 21 + (h_age - 2) * 4"], "outputs": "[[0.0], [10.5], [33], [53], [61], [73], [93], [27.0], [41.8], [0], [113]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Human age cannot be negative')\n    return 16 * h_age + 31"], "outputs": "[[31], [47], [111], [191], [223], [271], [351], [87.0], [146.2], ['ValueError'], [431]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[12], [223], [61]]]"}, {"programs_str": ["def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Human age cannot be negative')\n    if h_age == 1:\n        return 15\n    elif h_age == 2:\n        return 24\n    else:\n        return 24 + (h_age - 2) * 5", "def dog_age(h_age: float) -> float:\n    if h_age < 0:\n        raise ValueError('Human age cannot be negative')\n    elif h_age == 1:\n        return 15.0\n    elif h_age == 2:\n        return 24.0\n    else:\n        return 24.0 + (h_age - 2) * 5.0"], "outputs": "[[14], [15], [39], [64], [74], [89], [114], [31.5], [50.0], ['ValueError'], [139]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[12], [74], [61]]]"}]}
{"task_id": "Mbpp/265", "requirement": "from typing import List\n\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"", "llm_generated_inputs": "[[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3], [[], 2], [[1, 2, 3, 4, 5], 1], [['x', 'y', 'z'], 5], [['apple', 'banana', 'cherry'], 2], [[True, False, True, False], 2], [[None, None, None], 1], [['a', 'b', 'c'], 0]]", "programs": ["from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [S[i::step] for i in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [S[i::step] for i in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[j] for j in range(i, len(S), step)] for i in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [S[i::step] for i in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [S[i::step] for i in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for index, value in enumerate(S):\n        result[index % step].append(value)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for i, item in enumerate(S):\n        result[i % step].append(item)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for i in range(len(S)):\n        result[i % step].append(S[i])\n    return result"], "clusters": [{"programs_str": ["from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [S[i::step] for i in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [S[i::step] for i in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[j] for j in range(i, len(S), step)] for i in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [S[i::step] for i in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [S[i::step] for i in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]"], "outputs": "[[[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]], [[[], []]], [[[1, 2, 3, 4, 5]]], [[['x'], ['y'], ['z'], [], []]], [[['apple', 'cherry'], ['banana']]], [[[True, True], [False, False]]], [[[None, None, None]]], [[]]]", "probability": 0.85, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for index, value in enumerate(S):\n        result[index % step].append(value)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for i, item in enumerate(S):\n        result[i % step].append(item)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for i in range(len(S)):\n        result[i % step].append(S[i])\n    return result"], "outputs": "[[[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]], [[[], []]], [[[1, 2, 3, 4, 5]]], [[['x'], ['y'], ['z'], [], []]], [[['apple', 'cherry'], ['banana']]], [[[True, True], [False, False]]], [[[None, None, None]]], ['ZeroDivisionError']]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/266", "requirement": "def lateralsurface_cube(l: int) -> int:\n\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100\n\"\"\"", "llm_generated_inputs": "[[5], [1], [0], [-3], [10], [100], [2]]", "programs": ["def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2"], "clusters": [{"programs_str": ["def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2"], "outputs": "[[100], [4], [0], [36], [400], [40000], [16]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/267", "requirement": "def square_Sum(n: int) -> float:\n\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [5], [10], [100], [-1]]", "programs": ["def square_Sum(n: int) -> float:\n    odd_natural_numbers = [2 * i + 1 for i in range(n)]\n    return sum((x ** 2 for x in odd_natural_numbers))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum((i * i for i in range(1, 2 * n, 2)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum((i ** 2 for i in range(1, 2 * n, 2)))"], "clusters": [{"programs_str": ["def square_Sum(n: int) -> float:\n    odd_natural_numbers = [2 * i + 1 for i in range(n)]\n    return sum((x ** 2 for x in odd_natural_numbers))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum((i * i for i in range(1, 2 * n, 2)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum((i ** 2 for i in range(1, 2 * n, 2)))"], "outputs": "[[0], [1], [10], [165], [1330], [1333300], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/268", "requirement": "def find_star_num(n: int) -> int:\n\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [4], [5], [10], [0], [-1], [100]]", "programs": ["def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (n * 6 - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    if n < 1:\n        return 0\n    return n * (2 * n - 1)", "def find_star_num(n: int) -> int:\n    return n * (3 * n - 1) // 2", "def find_star_num(n: int) -> int:\n    return n * (2 * n - 1)", "def find_star_num(n: int) -> int:\n    return 6 * n * n - 6 * n + 1"], "clusters": [{"programs_str": ["def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (n * 6 - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1", "def find_star_num(n: int) -> int:\n    return n * (6 * n - 6) // 2 + 1"], "outputs": "[[1], [7], [19], [37], [61], [271], [1], [7], [29701]]", "probability": 0.8, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3], [19], [37]]]"}, {"programs_str": ["def find_star_num(n: int) -> int:\n    if n < 1:\n        return 0\n    return n * (2 * n - 1)"], "outputs": "[[1], [6], [15], [28], [45], [190], [0], [0], [19900]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3], [15], [37]]]"}, {"programs_str": ["def find_star_num(n: int) -> int:\n    return n * (3 * n - 1) // 2"], "outputs": "[[1], [5], [12], [22], [35], [145], [0], [2], [14950]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3], [12], [37]]]"}, {"programs_str": ["def find_star_num(n: int) -> int:\n    return n * (2 * n - 1)"], "outputs": "[[1], [6], [15], [28], [45], [190], [0], [3], [19900]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3], [15], [37]]]"}, {"programs_str": ["def find_star_num(n: int) -> int:\n    return 6 * n * n - 6 * n + 1"], "outputs": "[[1], [13], [37], [73], [121], [541], [1], [13], [59401]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/269", "requirement": "def ascii_value(k: str) -> int:\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"", "llm_generated_inputs": "[['A'], ['z'], [(' ',)], ['1'], ['@'], ['~'], [''], ['𐍈']]", "programs": ["def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)"], "clusters": [{"programs_str": ["def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)"], "outputs": "[[65], [122], ['TypeError'], [49], [64], [126], ['TypeError'], [66376]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/270", "requirement": "from typing import List\n\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"", "llm_generated_inputs": "[[[5, 6, 12, 1, 18, 8]], [[0, 2, 4, 6, 8, 10]], [[1, 3, 5, 7, 9]], [[4, 2, 6, 8, 10]], [[2, 4, 6, 8]], [[1, 1, 1, 1]], [[]], [[10]], [[1, 2, 3, 4, 5, 6, 8]]]", "programs": ["from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))"], "clusters": [{"programs_str": ["from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))"], "outputs": "[[30], [12], [0], [20], [8], [0], [0], [10], [8]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/271", "requirement": "def even_Power_Sum(n: int) -> int:\n\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"", "llm_generated_inputs": "[[1], [2], [5], [0], [-3], [10]]", "programs": ["def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))"], "clusters": [{"programs_str": ["def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))"], "outputs": "[[32], [1056], [141600], [0], [0], [7066400]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/272", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"", "llm_generated_inputs": "[[[(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]], [[('a', 'b', 5), ('c', 'd', 10), ('e', 'f', 15)]], [[(100, 'Alice', 30), (200, 'Bob', 25), (300, 'Charlie', 40)]], [[(1, 'SingleElementTuple')]], [[(0, '', 0), (1, 'text', -1)]], [[(1.1, 'test', 3.5), (2.2, 'example', 4.4)]], [[(1, 'Test', None), (2, 'AnotherTest', None)]], [[(3, 4, 5)]], [[(1, 2, 3), (4, 5, 6), (7, 8, 9)]], [[(1, 'One'), (2, 'Two'), (3, 'Three'), (4, 'Four')]], [[('tuple1',), ('tuple2',), ('tuple3',)]], [[(1, 2), (3, 4), (5, 6)]], [[()]]]", "programs": ["from typing import List\nfrom typing import Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List\nfrom typing import Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List\nfrom typing import Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List\nfrom typing import Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List\nfrom typing import Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List\nfrom typing import Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [tpl[-1] for tpl in test_list]", "from typing import List\nfrom typing import Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]"], "clusters": [{"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List\nfrom typing import Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List\nfrom typing import Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List\nfrom typing import Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List\nfrom typing import Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List\nfrom typing import Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [tpl[-1] for tpl in test_list]", "from typing import List\nfrom typing import Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]"], "outputs": "[[[21, 20, 19]], [[5, 10, 15]], [[30, 25, 40]], [['SingleElementTuple']], [[0, -1]], [[3.5, 4.4]], [[None, None]], [[5]], [[3, 6, 9]], [['One', 'Two', 'Three', 'Four']], [['tuple1', 'tuple2', 'tuple3']], [[2, 4, 6]], ['IndexError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/273", "requirement": "from typing import Tuple\n\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"", "llm_generated_inputs": "[[(10, 4, 5), (2, 5, 18)], [(1, 2, 3), (1, 2, 3)]]", "programs": ["from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))"], "clusters": [{"programs_str": ["from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))"], "outputs": "[[(8, -1, -13)], [(0, 0, 0)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/274", "requirement": "def even_binomial_Coeff_Sum(n: int) -> int:\n\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [3], [4], [5], [10], [20], [50], [100]]", "programs": ["from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "def even_binomial_Coeff_Sum(n: int) -> int:\n    from math import comb\n    sum_even = 0\n    for k in range(0, n + 1, 2):\n        sum_even += comb(n, k)\n    return sum_even", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    sum_even_coefficients = 0\n    for k in range(0, n + 1, 2):\n        sum_even_coefficients += comb(n, k)\n    return sum_even_coefficients", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "def even_binomial_Coeff_Sum(n: int) -> int:\n    from math import comb\n    sum_even_indices = 0\n    for k in range(0, n + 1, 2):\n        sum_even_indices += comb(n, k)\n    return sum_even_indices"], "clusters": [{"programs_str": ["from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "def even_binomial_Coeff_Sum(n: int) -> int:\n    from math import comb\n    sum_even = 0\n    for k in range(0, n + 1, 2):\n        sum_even += comb(n, k)\n    return sum_even", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    sum_even_coefficients = 0\n    for k in range(0, n + 1, 2):\n        sum_even_coefficients += comb(n, k)\n    return sum_even_coefficients", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "def even_binomial_Coeff_Sum(n: int) -> int:\n    from math import comb\n    sum_even_indices = 0\n    for k in range(0, n + 1, 2):\n        sum_even_indices += comb(n, k)\n    return sum_even_indices"], "outputs": "[[1], [1], [2], [4], [8], [16], [512], [524288], [562949953421312], [633825300114114700748351602688]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/276", "requirement": "def volume_cylinder(r: float, h: float) -> float:\n\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"", "llm_generated_inputs": "[[10, 5], [2.5, 10], [0, 10], [5, 0], [1.5, 3.5], [7.5, 2.5], [1000, 2000], [3.14, 1]]", "programs": ["import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h"], "clusters": [{"programs_str": ["import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h"], "outputs": "[[1570.7963267948967], [196.34954084936209], [0.0], [0.0], [24.740042147019622], [441.7864669110646], [6283185307.179586], [30.974846927333925]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/277", "requirement": "def dict_filter(dict1: dict, n: int) -> dict:\n\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"", "llm_generated_inputs": "[[{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170], [{'Alice': 150, 'Bob': 120, 'Charlie': 175}, 130], [{'John': 200, 'Jane': 150}, 150], [{'Single Entry': 100}, 50], [{'Single Entry': 100}, 100], [{'No Entries': 0}, 10], [{}, 100], [{'Negative Values': -10, 'Zero Values': 0}, -5]]", "programs": ["def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {k: v for k, v in dict1.items() if v >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {k: v for k, v in dict1.items() if v >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}"], "clusters": [{"programs_str": ["def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {k: v for k, v in dict1.items() if v >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {k: v for k, v in dict1.items() if v >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}"], "outputs": "[[{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}], [{'Alice': 150, 'Charlie': 175}], [{'John': 200, 'Jane': 150}], [{'Single Entry': 100}], [{'Single Entry': 100}], [{}], [{}], [{'Zero Values': 0}]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/278", "requirement": "from typing import Tuple\n\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"", "llm_generated_inputs": "[[(1, 5, 7, (4, 6), 10)], [((1, 2, 3), (4, 5), (1, 2), 6)], [((1,), (1, 2), 3)], [((3, 2, 1, 1), 1)], [(1, 2, 3, 4, 5)], [((1, 1, 1), (1, 1), (2, 3))], [(((1,),), (2,))], [(5, 10, 15, (20,))]]", "programs": ["from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for index, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return index\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for idx, elem in enumerate(test_tup):\n        if isinstance(elem, tuple):\n            return idx\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for index, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return index\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for idx, elem in enumerate(test_tup):\n        if isinstance(elem, tuple):\n            return idx\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for idx, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return idx\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for index, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return index\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for index, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return index\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for index, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return index\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for index, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return index\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    target_element = test_tup[-1]\n    count = 0\n    for i in test_tup:\n        if i == target_element:\n            break\n        count += 1\n    return count", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    return len(test_tup) - 1 if test_tup else 0", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    first_element = test_tup[0]\n    count = 0\n    for element in test_tup:\n        if element == first_element:\n            break\n        count += 1\n    return count", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    if not test_tup:\n        return 0\n    first_element = test_tup[0]\n    count = 0\n    for element in test_tup:\n        if element == first_element:\n            break\n        count += 1\n    return count", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    first_element = test_tup[0]\n    count = 0\n    for element in test_tup:\n        if element == first_element:\n            break\n        count += 1\n    return count", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    count = 0\n    for elem in test_tup:\n        if elem == test_tup[0]:\n            break\n        count += 1\n    return count", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    first_elem = test_tup[0]\n    count = 0\n    for elem in test_tup:\n        if elem == first_elem:\n            break\n        count += 1\n    return count", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    first_element = test_tup[0]\n    count = 0\n    for element in test_tup:\n        if element == first_element:\n            break\n        count += 1\n    return count", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    return len(test_tup) - 1 - test_tup.index(test_tup[-1])", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for index, element in enumerate(test_tup):\n        if element == (4, 6):\n            return index\n    return -1", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    return len(test_tup) - test_tup.index(next((x for x in test_tup if isinstance(x, tuple))))"], "clusters": [{"programs_str": ["from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for index, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return index\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for idx, elem in enumerate(test_tup):\n        if isinstance(elem, tuple):\n            return idx\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for index, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return index\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for idx, elem in enumerate(test_tup):\n        if isinstance(elem, tuple):\n            return idx\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for idx, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return idx\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for index, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return index\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for index, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return index\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for index, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return index\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for index, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return index\n    return len(test_tup)"], "outputs": "[[3], [0], [0], [0], [5], [0], [0], [3]]", "probability": 0.45, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    target_element = test_tup[-1]\n    count = 0\n    for i in test_tup:\n        if i == target_element:\n            break\n        count += 1\n    return count", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    return len(test_tup) - 1 if test_tup else 0"], "outputs": "[[4], [3], [2], [1], [4], [2], [1], [3]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[(1, 5, 7, (4, 6), 10)], [4], [3]]]"}, {"programs_str": ["from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    first_element = test_tup[0]\n    count = 0\n    for element in test_tup:\n        if element == first_element:\n            break\n        count += 1\n    return count", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    if not test_tup:\n        return 0\n    first_element = test_tup[0]\n    count = 0\n    for element in test_tup:\n        if element == first_element:\n            break\n        count += 1\n    return count", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    first_element = test_tup[0]\n    count = 0\n    for element in test_tup:\n        if element == first_element:\n            break\n        count += 1\n    return count", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    count = 0\n    for elem in test_tup:\n        if elem == test_tup[0]:\n            break\n        count += 1\n    return count", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    first_elem = test_tup[0]\n    count = 0\n    for elem in test_tup:\n        if elem == first_elem:\n            break\n        count += 1\n    return count", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    first_element = test_tup[0]\n    count = 0\n    for element in test_tup:\n        if element == first_element:\n            break\n        count += 1\n    return count", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    return len(test_tup) - 1 - test_tup.index(test_tup[-1])"], "outputs": "[[0], [0], [0], [0], [0], [0], [0], [0]]", "probability": 0.35, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[(1, 5, 7, (4, 6), 10)], [0], [3]]]"}, {"programs_str": ["from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for index, element in enumerate(test_tup):\n        if element == (4, 6):\n            return index\n    return -1"], "outputs": "[[3], [-1], [-1], [-1], [-1], [-1], [-1], [-1]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    return len(test_tup) - test_tup.index(next((x for x in test_tup if isinstance(x, tuple))))"], "outputs": "[[2], [4], [3], [2], ['StopIteration'], [3], [2], [1]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[(1, 5, 7, (4, 6), 10)], [2], [3]]]"}]}
{"task_id": "Mbpp/279", "requirement": "def is_num_decagonal(n: int) -> int:\n\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [10], [15], [0], [-5], [100]]", "programs": ["def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 2)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 2)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 2)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 2)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 2)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 2)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 2)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 2)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 2)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 2)"], "clusters": [{"programs_str": ["def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)"], "outputs": "[[1], [10], [27], [370], [855], [0], [115], [39700]]", "probability": 0.5, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 2)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 2)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 2)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 2)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 2)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 2)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 2)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 2)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 2)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 2)"], "outputs": "[[2], [12], [30], [380], [870], [0], [110], [39800]]", "probability": 0.5, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3], [30], [27]]]"}]}
{"task_id": "Mbpp/280", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"", "llm_generated_inputs": "[[[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31], [[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 100], [[], 1], [[1, 2, 3, 4, 5], 1], [[1, 2, 3, 4, 5], 5], [[1, 2, 2, 3, 4, 5], 2], [[10, 20, 30], 20], [[10, 20, 30], 10], [[100, 200, 300, 400], 500], [[7], 7], [[10], 20]]", "programs": ["from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List\nfrom typing import Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List\nfrom typing import Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)", "from typing import List\nfrom typing import Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List\nfrom typing import Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, current_item in enumerate(dlist):\n        if current_item == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)"], "clusters": [{"programs_str": ["from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List\nfrom typing import Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List\nfrom typing import Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)", "from typing import List\nfrom typing import Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List\nfrom typing import Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, current_item in enumerate(dlist):\n        if current_item == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)"], "outputs": "[[(True, 3)], [(False, -1)], [(False, -1)], [(True, 0)], [(True, 4)], [(True, 1)], [(True, 1)], [(True, 0)], [(False, -1)], [(True, 0)], [(False, -1)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/281", "requirement": "from typing import List\n\n\ndef all_unique(test_list: List[int]) -> bool:\n\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3]], [[1, 2, 3, 2]], [[1, 1, 1]], [[10, 20, 30, 40, 50]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[]], [[1]], [[0, -1, 1]], [[100, 200, 300, 400, 500, 600, 700]], [[5, 5, 6, 6, 7, 8, 9]]]", "programs": ["from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))"], "clusters": [{"programs_str": ["from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))"], "outputs": "[[True], [False], [False], [True], [True], [True], [True], [True], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/282", "requirement": "from typing import List\n\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3], [4, 5, 6]], [[10, 20, 30], [5, 5, 5]], [[0, 0, 0], [1, 1, 1]], [[-1, -2, -3], [1, 2, 3]], [[100, 200, 300], [100, 200, 300]], [[], []], [[1, 2], []], [[], [1, 2]], [[5], [5]], [[0, 5, 10, 15], [5, 10, 15, 20]]]", "programs": ["from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]"], "clusters": [{"programs_str": ["from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]"], "outputs": "[[[-3, -3, -3]], [[5, 15, 25]], [[-1, -1, -1]], [[-2, -4, -6]], [[0, 0, 0]], [[]], [[]], [[]], [[0]], [[-5, -5, -5, -5]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/283", "requirement": "def validate(n: int) -> bool:\n\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"", "llm_generated_inputs": "[[1234], [112], [2001], [222], [3210], [1000], [9876543210], [111111], [5555], [0]]", "programs": ["def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if int(digit) < count:\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    str_n = str(n)\n    digit_count = Counter(str_n)\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    str_n = str(n)\n    digit_count = Counter(str_n)\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    str_n = str(n)\n    digit_count = Counter(str_n)\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    str_n = str(n)\n    digit_count = Counter(str_n)\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digits_count = Counter(str(n))\n    for digit, count in digits_count.items():\n        if count > int(digit):\n            return False\n    return True"], "clusters": [{"programs_str": ["def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if int(digit) < count:\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    str_n = str(n)\n    digit_count = Counter(str_n)\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    str_n = str(n)\n    digit_count = Counter(str_n)\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    str_n = str(n)\n    digit_count = Counter(str_n)\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    str_n = str(n)\n    digit_count = Counter(str_n)\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digits_count = Counter(str(n))\n    for digit, count in digits_count.items():\n        if count > int(digit):\n            return False\n    return True"], "outputs": "[[True], [False], [False], [False], [False], [False], [False], [False], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/284", "requirement": "from typing import List\n\n\ndef check_element(list1: List, element: Any) -> bool:\n\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"", "llm_generated_inputs": "[[['green', 'green', 'green'], 'green'], [['red', 'red', 'red'], 'red'], [['blue', 'blue', 'yellow'], 'blue'], [['apple'], 'apple'], [[], 'apple'], [['orange', 'orange', 'black', 'white'], 'orange'], [['apple', 'apple', 'banana'], 'apple'], [['apple', 'banana', 'banana'], 'banana'], [['1', '1', '1'], '1'], [[1, 1, 1], 1]]", "programs": ["from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List[Any], element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))"], "clusters": [{"programs_str": ["from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List[Any], element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))"], "outputs": "[[True], [True], [False], [True], [True], [False], [False], [False], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/285", "requirement": "def text_match_two_three(text: str) -> bool:\n\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"", "llm_generated_inputs": "[['abb'], ['abbb'], ['a'], ['ab'], ['abbbb'], ['cba'], ['aabbb'], ['abc'], ['bba'], ['abbc'], ['ababa'], ['a bbb']]", "programs": ["def text_match_two_three(text: str) -> bool:\n    import re\n    pattern = 'ab{2,3}'\n    return bool(re.search(pattern, text))", "def text_match_two_three(text: str) -> bool:\n    import re\n    return bool(re.search('a(b{2,3})', text))", "def text_match_two_three(text: str) -> bool:\n    import re\n    pattern = 'a(bb|bbb)'\n    return bool(re.search(pattern, text))", "def text_match_two_three(text: str) -> bool:\n    import re\n    return bool(re.search('a(b{2,3})', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('a(b{2,3})', text))", "def text_match_two_three(text: str) -> bool:\n    import re\n    return bool(re.search('a(b{2,3})', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('a(b{2,3})', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    pattern = 'a[b]{2,3}'\n    return bool(re.search(pattern, text))", "def text_match_two_three(text: str) -> bool:\n    import re\n    return bool(re.search('a(b{2,3})', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    pattern = 'a(b{2,3})'\n    return bool(re.search(pattern, text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('ab{2,3}', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('a(b{2,3})', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    pattern = 'a(b{2,3})'\n    return bool(re.search(pattern, text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('a(b{2,3})', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('a(b{2,3})', text))", "def text_match_two_three(text: str) -> bool:\n    import re\n    return bool(re.search('a(bb{2,3})', text))", "def text_match_two_three(text: str) -> bool:\n    import re\n    pattern = 'a(bb{2,3})'\n    return bool(re.search(pattern, text))", "def text_match_two_three(text: str) -> bool:\n    import re\n    pattern = 'a(bb{2,3})'\n    return bool(re.search(pattern, text))", "def text_match_two_three(text: str) -> bool:\n    import re\n    return bool(re.search('a(ba{2,3})', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('a bb{1,2}', text))"], "clusters": [{"programs_str": ["def text_match_two_three(text: str) -> bool:\n    import re\n    pattern = 'ab{2,3}'\n    return bool(re.search(pattern, text))", "def text_match_two_three(text: str) -> bool:\n    import re\n    return bool(re.search('a(b{2,3})', text))", "def text_match_two_three(text: str) -> bool:\n    import re\n    pattern = 'a(bb|bbb)'\n    return bool(re.search(pattern, text))", "def text_match_two_three(text: str) -> bool:\n    import re\n    return bool(re.search('a(b{2,3})', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('a(b{2,3})', text))", "def text_match_two_three(text: str) -> bool:\n    import re\n    return bool(re.search('a(b{2,3})', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('a(b{2,3})', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    pattern = 'a[b]{2,3}'\n    return bool(re.search(pattern, text))", "def text_match_two_three(text: str) -> bool:\n    import re\n    return bool(re.search('a(b{2,3})', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    pattern = 'a(b{2,3})'\n    return bool(re.search(pattern, text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('ab{2,3}', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('a(b{2,3})', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    pattern = 'a(b{2,3})'\n    return bool(re.search(pattern, text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('a(b{2,3})', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('a(b{2,3})', text))"], "outputs": "[[True], [True], [False], [False], [True], [False], [True], [False], [False], [True], [False], [False]]", "probability": 0.75, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def text_match_two_three(text: str) -> bool:\n    import re\n    return bool(re.search('a(bb{2,3})', text))", "def text_match_two_three(text: str) -> bool:\n    import re\n    pattern = 'a(bb{2,3})'\n    return bool(re.search(pattern, text))", "def text_match_two_three(text: str) -> bool:\n    import re\n    pattern = 'a(bb{2,3})'\n    return bool(re.search(pattern, text))"], "outputs": "[[False], [True], [False], [False], [True], [False], [True], [False], [False], [False], [False], [False]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def text_match_two_three(text: str) -> bool:\n    import re\n    return bool(re.search('a(ba{2,3})', text))"], "outputs": "[[False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('a bb{1,2}', text))"], "outputs": "[[False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [True]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/286", "requirement": "from typing import List\n\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"", "llm_generated_inputs": "[[[10, 20, -30, -1], 4, 3], [[-1, -2, -3, -4], 4, 2], [[1, 2, 3, 4], 4, 1], [[5, -1, 2, 3], 4, 5], [[0, 0, 0, 0], 4, 5], [[1, -1, 1, -1], 4, 10], [[7, -3, 5, 2], 4, 2], [[1], 1, 10], [[-10, -5, 0, -7], 4, 1], [[3, 4, -2, 1], 4, 3]]", "programs": ["from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_kadane = kadane(a)\n    total_sum = sum(a)\n    max_prefix_sum = float('-inf')\n    max_suffix_sum = float('-inf')\n    current_prefix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    current_suffix_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    if total_sum > 0:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_so_far = float('-inf')\n        max_ending_here = 0\n        for x in arr:\n            max_ending_here += x\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n            if max_ending_here < 0:\n                max_ending_here = 0\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_sum_one_pass = kadane(a)\n    total_sum = sum(a)\n    if total_sum > 0:\n        max_sum = max_sum_one_pass\n        max_sum_with_full_passes = max_sum_one_pass + (k - 1) * total_sum\n        max_sum = max(max_sum, max_sum_with_full_passes)\n    else:\n        max_sum = max_sum_one_pass\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_kadane = kadane(a)\n    total_sum = sum(a)\n    if k == 2:\n        return max(max_kadane, max_kadane + max(0, total_sum))\n    max_prefix_sum = float('-inf')\n    current_prefix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    max_suffix_sum = float('-inf')\n    current_suffix_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    if total_sum > 0:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(array):\n        max_ending_here = max_so_far = array[0]\n        for x in array[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_kadane = kadane(a)\n    total_sum = sum(a)\n    if total_sum <= 0:\n        return max_kadane\n    max_with_prefix = current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        max_with_prefix = max(max_with_prefix, current_sum)\n    max_with_suffix = current_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_sum += a[i]\n        max_with_suffix = max(max_with_suffix, current_sum)\n    return max(max_kadane, max_with_suffix + max_with_prefix + (k - 2) * total_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_so_far = max_ending_here = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_kadane = kadane(a)\n    total_sum = sum(a)\n    if total_sum <= 0:\n        return max_kadane\n    max_prefix_sum = float('-inf')\n    current_prefix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    max_suffix_sum = float('-inf')\n    current_suffix_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    return max(max_kadane, max_suffix_sum + max_prefix_sum + (k - 2) * total_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_kadane = kadane(a)\n    total_sum = sum(a)\n    if total_sum > 0:\n        return max(max_kadane, max_kadane + (k - 1) * total_sum)\n    else:\n        return max_kadane", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def max_kadane(arr):\n        max_current = max_global = arr[0]\n        for x in arr[1:]:\n            max_current = max(x, max_current + x)\n            if max_current > max_global:\n                max_global = max_current\n        return max_global\n    max_sum_single = max_kadane(a)\n    if k == 1:\n        return max_sum_single\n    total_sum = sum(a)\n    prefix_sum = 0\n    max_prefix_sum = float('-inf')\n    for x in a:\n        prefix_sum += x\n        max_prefix_sum = max(max_prefix_sum, prefix_sum)\n    suffix_sum = 0\n    max_suffix_sum = float('-inf')\n    for x in reversed(a):\n        suffix_sum += x\n        max_suffix_sum = max(max_suffix_sum, suffix_sum)\n    if total_sum > 0:\n        return max(max_sum_single, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_sum_single, max_prefix_sum + max_suffix_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    total_sum = sum(a)\n    max_kadane = kadane(a)\n    if k == 2:\n        return max(max_kadane, max_kadane + total_sum)\n    prefix_sum = 0\n    max_prefix_sum = float('-inf')\n    for i in range(n):\n        prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, prefix_sum)\n    suffix_sum = 0\n    max_suffix_sum = float('-inf')\n    for i in range(n - 1, -1, -1):\n        suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, suffix_sum)\n    return max(max_kadane, max_suffix_sum + max_prefix_sum + (k - 2) * total_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def max_sub_array_sum(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return max_sub_array_sum(a)\n    total_sum = sum(a)\n    max_sum_first = max_sub_array_sum(a)\n    if total_sum > 0:\n        max_sum_full = max_sum_first + (k - 1) * total_sum\n    else:\n        max_sum_full = max_sum_first\n    max_prefix_sum = float('-inf')\n    current_prefix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    max_suffix_sum = float('-inf')\n    current_suffix_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    return max(max_sum_full, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_sum = float('-inf')\n        current_sum = 0\n        for number in arr:\n            current_sum += number\n            max_sum = max(max_sum, current_sum)\n            current_sum = max(current_sum, 0)\n        return max_sum\n    if k == 1:\n        return kadane(a)\n    max_single = kadane(a)\n    total_sum = sum(a)\n    if total_sum > 0:\n        max_combined = max_single + (k - 1) * total_sum\n    else:\n        max_combined = max_single\n    return max(max_single, max_combined)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_kadane = kadane(a)\n    total_sum = sum(a)\n    if total_sum > 0:\n        max_with_full_repeats = max_kadane + (k - 1) * total_sum\n        return max(max_with_full_repeats, max_kadane)\n    else:\n        return max_kadane", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    total_sum = sum(a)\n    max_kadane = kadane(a)\n    if k == 2:\n        return max(max_kadane, max_kadane + total_sum)\n    max_sum = max(max_kadane, max_kadane + total_sum, max_kadane + 2 * total_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(array):\n        max_so_far = max_ending_here = array[0]\n        for x in array[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_sum_one = kadane(a)\n    total_sum = sum(a)\n    if k == 2:\n        return max(max_sum_one, max_sum_one + total_sum)\n    max_sum_two = max_sum_one + total_sum\n    return max(max_sum_one, max_sum_two, max_sum_two + total_sum, max_sum_two + total_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_kadane = kadane(a)\n    total_sum = sum(a)\n    if k > 2:\n        prefix_sum = 0\n        prefix_max = float('-inf')\n        for num in a:\n            prefix_sum += num\n            prefix_max = max(prefix_max, prefix_sum)\n        suffix_sum = 0\n        suffix_max = float('-inf')\n        for num in reversed(a):\n            suffix_sum += num\n            suffix_max = max(suffix_max, suffix_sum)\n        return max(max_kadane, prefix_max + suffix_max + (k - 2) * total_sum)\n    return max(max_kadane, a[0] + a[-1] if n > 1 else max_kadane)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_so_far = float('-inf')\n        max_ending_here = 0\n        for x in arr:\n            max_ending_here += x\n            if max_so_far < max_ending_here:\n                max_so_far = max_ending_here\n            if max_ending_here < 0:\n                max_ending_here = 0\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_sum_one = kadane(a)\n    total_sum = sum(a)\n    if total_sum > 0:\n        max_sum_multiple = max_sum_one + (k - 2) * total_sum\n    else:\n        max_sum_multiple = max_sum_one\n    return max(max_sum_one, max_sum_multiple)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_1 = kadane(a)\n    total_sum = sum(a)\n    max_2 = total_sum + max(kadane(a + a), 0)\n    if k > 2 and total_sum > 0:\n        max_2 += (k - 2) * total_sum\n    return max(max_1, max_2)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_kadane = kadane(a)\n    max_prefix_sum = total_sum = max_suffix_sum = a[0]\n    for i in range(1, n):\n        total_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, total_sum)\n    total_sum = a[-1]\n    for i in range(n - 2, -1, -1):\n        total_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, total_sum)\n    if total_sum > 0:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_kadane = kadane(a)\n    max_prefix_sum = curr_prefix_sum = 0\n    for i in range(n):\n        curr_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, curr_prefix_sum)\n    max_suffix_sum = curr_suffix_sum = 0\n    for i in range(n - 1, -1, -1):\n        curr_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, curr_suffix_sum)\n    total_sum = sum(a)\n    if total_sum > 0:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    total_sum = sum(a)\n    max_prefix_sum = max_suffix_sum = curr_prefix_sum = curr_suffix_sum = 0\n    for i in range(n):\n        curr_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, curr_prefix_sum)\n    for i in range(n - 1, -1, -1):\n        curr_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, curr_suffix_sum)\n    if total_sum > 0:\n        return max(max_prefix_sum + max_suffix_sum + (k - 2) * total_sum, max(kadane(a), max_prefix_sum + max_suffix_sum))\n    return max(max_prefix_sum + max_suffix_sum, kadane(a))", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_kadane = kadane(a)\n    total_sum = sum(a)\n    if k > 2 and total_sum > 0:\n        max_sum_with_wrap = sum(a) + kadane(a + a)\n        return max(max_kadane, max_sum_with_wrap)\n    return max(max_kadane, total_sum + (k - 2) * total_sum)"], "clusters": [{"programs_str": ["from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_kadane = kadane(a)\n    total_sum = sum(a)\n    max_prefix_sum = float('-inf')\n    max_suffix_sum = float('-inf')\n    current_prefix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    current_suffix_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    if total_sum > 0:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_so_far = float('-inf')\n        max_ending_here = 0\n        for x in arr:\n            max_ending_here += x\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n            if max_ending_here < 0:\n                max_ending_here = 0\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_sum_one_pass = kadane(a)\n    total_sum = sum(a)\n    if total_sum > 0:\n        max_sum = max_sum_one_pass\n        max_sum_with_full_passes = max_sum_one_pass + (k - 1) * total_sum\n        max_sum = max(max_sum, max_sum_with_full_passes)\n    else:\n        max_sum = max_sum_one_pass\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_kadane = kadane(a)\n    total_sum = sum(a)\n    if k == 2:\n        return max(max_kadane, max_kadane + max(0, total_sum))\n    max_prefix_sum = float('-inf')\n    current_prefix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    max_suffix_sum = float('-inf')\n    current_suffix_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    if total_sum > 0:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(array):\n        max_ending_here = max_so_far = array[0]\n        for x in array[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_kadane = kadane(a)\n    total_sum = sum(a)\n    if total_sum <= 0:\n        return max_kadane\n    max_with_prefix = current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        max_with_prefix = max(max_with_prefix, current_sum)\n    max_with_suffix = current_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_sum += a[i]\n        max_with_suffix = max(max_with_suffix, current_sum)\n    return max(max_kadane, max_with_suffix + max_with_prefix + (k - 2) * total_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_so_far = max_ending_here = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_kadane = kadane(a)\n    total_sum = sum(a)\n    if total_sum <= 0:\n        return max_kadane\n    max_prefix_sum = float('-inf')\n    current_prefix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    max_suffix_sum = float('-inf')\n    current_suffix_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    return max(max_kadane, max_suffix_sum + max_prefix_sum + (k - 2) * total_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_kadane = kadane(a)\n    total_sum = sum(a)\n    if total_sum > 0:\n        return max(max_kadane, max_kadane + (k - 1) * total_sum)\n    else:\n        return max_kadane", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def max_kadane(arr):\n        max_current = max_global = arr[0]\n        for x in arr[1:]:\n            max_current = max(x, max_current + x)\n            if max_current > max_global:\n                max_global = max_current\n        return max_global\n    max_sum_single = max_kadane(a)\n    if k == 1:\n        return max_sum_single\n    total_sum = sum(a)\n    prefix_sum = 0\n    max_prefix_sum = float('-inf')\n    for x in a:\n        prefix_sum += x\n        max_prefix_sum = max(max_prefix_sum, prefix_sum)\n    suffix_sum = 0\n    max_suffix_sum = float('-inf')\n    for x in reversed(a):\n        suffix_sum += x\n        max_suffix_sum = max(max_suffix_sum, suffix_sum)\n    if total_sum > 0:\n        return max(max_sum_single, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_sum_single, max_prefix_sum + max_suffix_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    total_sum = sum(a)\n    max_kadane = kadane(a)\n    if k == 2:\n        return max(max_kadane, max_kadane + total_sum)\n    prefix_sum = 0\n    max_prefix_sum = float('-inf')\n    for i in range(n):\n        prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, prefix_sum)\n    suffix_sum = 0\n    max_suffix_sum = float('-inf')\n    for i in range(n - 1, -1, -1):\n        suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, suffix_sum)\n    return max(max_kadane, max_suffix_sum + max_prefix_sum + (k - 2) * total_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def max_sub_array_sum(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return max_sub_array_sum(a)\n    total_sum = sum(a)\n    max_sum_first = max_sub_array_sum(a)\n    if total_sum > 0:\n        max_sum_full = max_sum_first + (k - 1) * total_sum\n    else:\n        max_sum_full = max_sum_first\n    max_prefix_sum = float('-inf')\n    current_prefix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    max_suffix_sum = float('-inf')\n    current_suffix_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    return max(max_sum_full, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_sum = float('-inf')\n        current_sum = 0\n        for number in arr:\n            current_sum += number\n            max_sum = max(max_sum, current_sum)\n            current_sum = max(current_sum, 0)\n        return max_sum\n    if k == 1:\n        return kadane(a)\n    max_single = kadane(a)\n    total_sum = sum(a)\n    if total_sum > 0:\n        max_combined = max_single + (k - 1) * total_sum\n    else:\n        max_combined = max_single\n    return max(max_single, max_combined)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_kadane = kadane(a)\n    total_sum = sum(a)\n    if total_sum > 0:\n        max_with_full_repeats = max_kadane + (k - 1) * total_sum\n        return max(max_with_full_repeats, max_kadane)\n    else:\n        return max_kadane"], "outputs": "[[30], [-1], [10], [45], [0], [1], [22], [10], [0], [19]]", "probability": 0.55, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    total_sum = sum(a)\n    max_kadane = kadane(a)\n    if k == 2:\n        return max(max_kadane, max_kadane + total_sum)\n    max_sum = max(max_kadane, max_kadane + total_sum, max_kadane + 2 * total_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(array):\n        max_so_far = max_ending_here = array[0]\n        for x in array[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_sum_one = kadane(a)\n    total_sum = sum(a)\n    if k == 2:\n        return max(max_sum_one, max_sum_one + total_sum)\n    max_sum_two = max_sum_one + total_sum\n    return max(max_sum_one, max_sum_two, max_sum_two + total_sum, max_sum_two + total_sum)"], "outputs": "[[30], [-1], [10], [27], [0], [1], [22], [3], [0], [19]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_kadane = kadane(a)\n    total_sum = sum(a)\n    if k > 2:\n        prefix_sum = 0\n        prefix_max = float('-inf')\n        for num in a:\n            prefix_sum += num\n            prefix_max = max(prefix_max, prefix_sum)\n        suffix_sum = 0\n        suffix_max = float('-inf')\n        for num in reversed(a):\n            suffix_sum += num\n            suffix_max = max(suffix_max, suffix_sum)\n        return max(max_kadane, prefix_max + suffix_max + (k - 2) * total_sum)\n    return max(max_kadane, a[0] + a[-1] if n > 1 else max_kadane)"], "outputs": "[[30], [-1], [10], [45], [0], [1], [11], [10], [0], [19]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_so_far = float('-inf')\n        max_ending_here = 0\n        for x in arr:\n            max_ending_here += x\n            if max_so_far < max_ending_here:\n                max_so_far = max_ending_here\n            if max_ending_here < 0:\n                max_ending_here = 0\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_sum_one = kadane(a)\n    total_sum = sum(a)\n    if total_sum > 0:\n        max_sum_multiple = max_sum_one + (k - 2) * total_sum\n    else:\n        max_sum_multiple = max_sum_one\n    return max(max_sum_one, max_sum_multiple)"], "outputs": "[[30], [-1], [10], [36], [0], [1], [11], [9], [0], [13]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_1 = kadane(a)\n    total_sum = sum(a)\n    max_2 = total_sum + max(kadane(a + a), 0)\n    if k > 2 and total_sum > 0:\n        max_2 += (k - 2) * total_sum\n    return max(max_1, max_2)"], "outputs": "[[30], [-1], [10], [54], [0], [1], [33], [11], [0], [25]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_kadane = kadane(a)\n    max_prefix_sum = total_sum = max_suffix_sum = a[0]\n    for i in range(1, n):\n        total_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, total_sum)\n    total_sum = a[-1]\n    for i in range(n - 2, -1, -1):\n        total_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, total_sum)\n    if total_sum > 0:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum)"], "outputs": "[[40], [-1], [10], [45], [0], [2], [22], [10], [0], [19]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[10, 20, -30, -1], 4, 3], [40], [30]]]"}, {"programs_str": ["from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_kadane = kadane(a)\n    max_prefix_sum = curr_prefix_sum = 0\n    for i in range(n):\n        curr_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, curr_prefix_sum)\n    max_suffix_sum = curr_suffix_sum = 0\n    for i in range(n - 1, -1, -1):\n        curr_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, curr_suffix_sum)\n    total_sum = sum(a)\n    if total_sum > 0:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    total_sum = sum(a)\n    max_prefix_sum = max_suffix_sum = curr_prefix_sum = curr_suffix_sum = 0\n    for i in range(n):\n        curr_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, curr_prefix_sum)\n    for i in range(n - 1, -1, -1):\n        curr_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, curr_suffix_sum)\n    if total_sum > 0:\n        return max(max_prefix_sum + max_suffix_sum + (k - 2) * total_sum, max(kadane(a), max_prefix_sum + max_suffix_sum))\n    return max(max_prefix_sum + max_suffix_sum, kadane(a))"], "outputs": "[[30], [0], [10], [45], [0], [1], [22], [10], [0], [19]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    max_kadane = kadane(a)\n    total_sum = sum(a)\n    if k > 2 and total_sum > 0:\n        max_sum_with_wrap = sum(a) + kadane(a + a)\n        return max(max_kadane, max_sum_with_wrap)\n    return max(max_kadane, total_sum + (k - 2) * total_sum)"], "outputs": "[[30], [-1], [10], [27], [0], [1], [11], [3], [0], [19]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/287", "requirement": "def square_Sum(n: int) -> float:\n\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [3], [10], [100], [-1]]", "programs": ["def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))"], "clusters": [{"programs_str": ["def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))"], "outputs": "[[0], [4], [20], [56], [1540], [1353400], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/290", "requirement": "from typing import List\n\n\ndef max_length(list1: List[List]) -> List:\n\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"", "llm_generated_inputs": "[[[[1], [2, 3], [4, 5, 6]]], [[[1, 2], [3], [4], [5, 6, 7, 8]]], [[[10], [20, 30, 40], [50]]], [[[], [], []]], [[[1], [], [2, 3, 4, 5]]], [[[100, 200], [300, 400], [500, 600, 700]]], [[[1, 2], [1, 2, 3], [1, 2, 3, 4], [1]]]]", "programs": ["from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "from typing import List\n\ndef max_length(list1: List[List]) -> List:\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List[int]]) -> Tuple[int, List[int]]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = -1\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return (max_len, max_list)", "from typing import List\n\ndef max_length(list1: List[List]) -> List:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)"], "clusters": [{"programs_str": ["from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "from typing import List\n\ndef max_length(list1: List[List]) -> List:\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List[int]]) -> Tuple[int, List[int]]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = -1\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return (max_len, max_list)", "from typing import List\n\ndef max_length(list1: List[List]) -> List:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)"], "outputs": "[[(3, [4, 5, 6])], [(4, [5, 6, 7, 8])], [(3, [20, 30, 40])], [(0, [])], [(4, [2, 3, 4, 5])], [(3, [500, 600, 700])], [(4, [1, 2, 3, 4])]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/292", "requirement": "def find(n: int, m: int) -> int:\n\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3\n\"\"\"", "llm_generated_inputs": "[[10, 3], [9, 3], [15, 2], [5, 0], [-10, 3], [10, -3], [0, 5], [0, 0], [-10, -3], [10, 1]]", "programs": ["def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m"], "clusters": [{"programs_str": ["def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m"], "outputs": "[[3], [3], [7], ['ZeroDivisionError'], [-4], [-4], [0], ['ZeroDivisionError'], [3], [10]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/293", "requirement": "def otherside_rightangle(w: float, h: float) -> float:\n\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"", "llm_generated_inputs": "[[7, 8], [3, 4], [5, 12], [8, 15], [1, 1], [0, 0], [0, 5], [5, 0], [10, 10], [100, 100]]", "programs": ["import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)"], "clusters": [{"programs_str": ["import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)"], "outputs": "[[10.63014581273465], [5.0], [13.0], [17.0], [1.4142135623730951], [0.0], [5.0], [5.0], [14.142135623730951], [141.4213562373095]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/294", "requirement": "def max_val(listval: list) -> int:\n\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 4, 5]], [['Python', 3, 2, 4, 5, 'version']], [[-1, -2, -3, -4, -5]], [['cat', 'apple', 'banana', 3, 4]], [[10.5, 8.2, 9.6, 'test', 3]], [['a', 'b', 'c', 'z', -1]], [['one', 'two', 'three', 1.0, 2.5, 3.7]], [['', 'non-empty', 42, None]], [['longest', 'word', 'short']], [[]]]", "programs": ["def max_val(listval: list) -> int:\n    from numbers import Number\n    return max((item for item in listval if isinstance(item, Number)), default=None)", "def max_val(listval: list) -> int:\n    max_value = None\n    for item in listval:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value", "def max_val(listval: list) -> int:\n    from numbers import Number\n    max_value = None\n    for item in listval:\n        if isinstance(item, Number):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value", "def max_val(listval: list) -> int:\n    return max(filter(lambda x: isinstance(x, (int, float)), listval))", "def max_val(listval: list) -> int:\n    return max((x for x in listval if isinstance(x, (int, float))))", "def max_val(listval: list) -> int:\n    return max((x for x in listval if isinstance(x, (int, float))))", "def max_val(listval: list) -> int:\n    return max((x for x in listval if isinstance(x, (int, float))))", "def max_val(listval: list) -> int:\n    return max((x for x in listval if isinstance(x, (int, float))))", "def max_val(listval: list) -> int:\n    return max((x for x in listval if isinstance(x, (int, float))))", "def max_val(listval: list) -> int:\n    return max((x for x in listval if isinstance(x, (int, float))))", "def max_val(listval: list) -> int:\n    return max((x for x in listval if isinstance(x, (int, float))))", "def max_val(listval: list) -> int:\n    return max((x for x in listval if isinstance(x, (int, float))))", "def max_val(listval: list) -> int:\n    return max((x for x in listval if isinstance(x, (int, float))))", "from typing import Any, List\n\ndef max_val(listval: List[Any]) -> int:\n    max_value = float('-inf')\n    for item in listval:\n        if isinstance(item, (int, float)) and item > max_value:\n            max_value = item\n    return max_value", "from typing import Any, List\n\ndef max_val(listval: List[Any]) -> int:\n    max_value = float('-inf')\n    for item in listval:\n        if isinstance(item, (int, float)) and item > max_value:\n            max_value = item\n    return max_value", "from typing import Any, List\n\ndef max_val(listval: List[Any]) -> int:\n    max_value = float('-inf')\n    for item in listval:\n        if isinstance(item, int) or isinstance(item, float):\n            if item > max_value:\n                max_value = item\n    return max_value", "def max_val(listval: list) -> int:\n    from numbers import Number\n    max_value = float('-inf')\n    for item in listval:\n        if isinstance(item, Number):\n            max_value = max(max_value, item)\n    return max_value", "def max_val(listval: list) -> int:\n    from typing import Union\n\n    def is_comparable(x: Union[int, float]) -> bool:\n        return isinstance(x, (int, float))\n    max_value = None\n    for value in listval:\n        if is_comparable(value):\n            if max_value is None or value > max_value:\n                max_value = value\n    return max_value if max_value is not None else 0", "def max_val(listval: list) -> int:\n    from typing import Union\n    max_value = float('-inf')\n    for item in listval:\n        if isinstance(item, (int, float)):\n            if item > max_value:\n                max_value = item\n    return int(max_value) if max_value != float('-inf') else None", "from typing import Union, List\n\ndef max_val(listval: List[Union[int, float, str]]) -> int:\n    max_value = float('-inf')\n    for item in listval:\n        if isinstance(item, (int, float)):\n            max_value = max(max_value, item)\n    return int(max_value)"], "clusters": [{"programs_str": ["def max_val(listval: list) -> int:\n    from numbers import Number\n    return max((item for item in listval if isinstance(item, Number)), default=None)", "def max_val(listval: list) -> int:\n    max_value = None\n    for item in listval:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value", "def max_val(listval: list) -> int:\n    from numbers import Number\n    max_value = None\n    for item in listval:\n        if isinstance(item, Number):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value"], "outputs": "[[5], [5], [-1], [4], [10.5], [-1], [3.7], [42], [None], [None]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def max_val(listval: list) -> int:\n    return max(filter(lambda x: isinstance(x, (int, float)), listval))", "def max_val(listval: list) -> int:\n    return max((x for x in listval if isinstance(x, (int, float))))", "def max_val(listval: list) -> int:\n    return max((x for x in listval if isinstance(x, (int, float))))", "def max_val(listval: list) -> int:\n    return max((x for x in listval if isinstance(x, (int, float))))", "def max_val(listval: list) -> int:\n    return max((x for x in listval if isinstance(x, (int, float))))", "def max_val(listval: list) -> int:\n    return max((x for x in listval if isinstance(x, (int, float))))", "def max_val(listval: list) -> int:\n    return max((x for x in listval if isinstance(x, (int, float))))", "def max_val(listval: list) -> int:\n    return max((x for x in listval if isinstance(x, (int, float))))", "def max_val(listval: list) -> int:\n    return max((x for x in listval if isinstance(x, (int, float))))", "def max_val(listval: list) -> int:\n    return max((x for x in listval if isinstance(x, (int, float))))"], "outputs": "[[5], [5], [-1], [4], [10.5], [-1], [3.7], [42], ['ValueError'], ['ValueError']]", "probability": 0.5, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Any, List\n\ndef max_val(listval: List[Any]) -> int:\n    max_value = float('-inf')\n    for item in listval:\n        if isinstance(item, (int, float)) and item > max_value:\n            max_value = item\n    return max_value", "from typing import Any, List\n\ndef max_val(listval: List[Any]) -> int:\n    max_value = float('-inf')\n    for item in listval:\n        if isinstance(item, (int, float)) and item > max_value:\n            max_value = item\n    return max_value", "from typing import Any, List\n\ndef max_val(listval: List[Any]) -> int:\n    max_value = float('-inf')\n    for item in listval:\n        if isinstance(item, int) or isinstance(item, float):\n            if item > max_value:\n                max_value = item\n    return max_value", "def max_val(listval: list) -> int:\n    from numbers import Number\n    max_value = float('-inf')\n    for item in listval:\n        if isinstance(item, Number):\n            max_value = max(max_value, item)\n    return max_value"], "outputs": "[[5], [5], [-1], [4], [10.5], [-1], [3.7], [42], [-inf], [-inf]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def max_val(listval: list) -> int:\n    from typing import Union\n\n    def is_comparable(x: Union[int, float]) -> bool:\n        return isinstance(x, (int, float))\n    max_value = None\n    for value in listval:\n        if is_comparable(value):\n            if max_value is None or value > max_value:\n                max_value = value\n    return max_value if max_value is not None else 0"], "outputs": "[[5], [5], [-1], [4], [10.5], [-1], [3.7], [42], [0], [0]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def max_val(listval: list) -> int:\n    from typing import Union\n    max_value = float('-inf')\n    for item in listval:\n        if isinstance(item, (int, float)):\n            if item > max_value:\n                max_value = item\n    return int(max_value) if max_value != float('-inf') else None"], "outputs": "[[5], [5], [-1], [4], [10], [-1], [3], [42], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Union, List\n\ndef max_val(listval: List[Union[int, float, str]]) -> int:\n    max_value = float('-inf')\n    for item in listval:\n        if isinstance(item, (int, float)):\n            max_value = max(max_value, item)\n    return int(max_value)"], "outputs": "[[5], [5], [-1], [4], [10], [-1], [3], [42], ['OverflowError'], ['OverflowError']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/296", "requirement": "from typing import List\n\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"", "llm_generated_inputs": "[[[1, 20, 6, 4, 5]], [[2, 3, 8, 6, 1]], [[5, 4, 3, 2, 1]], [[1, 1, 1, 1]], [[1, 3, 5, 2, 4, 6]], [[-1, -3, -2, 0, 1]], [[10, 10, 10, 10, 10]], [[1, 2, 3, 4, 5]], [[5, 2, 3, 1, 4]], [[2, 5, 3, 1, 4, 6]]]", "programs": ["from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef merge_and_count(arr: List[int], temp_arr: List[int], left: int, mid: int, right: int) -> int:\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += mid - i + 1\n            j += 1\n        k += 1\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n    return inv_count\n\ndef merge_sort_and_count(arr: List[int], temp_arr: List[int], left: int, right: int) -> int:\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n    return inv_count\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef merge_and_count(arr: List[int], temp_arr: List[int], left: int, mid: int, right: int) -> int:\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += mid - i + 1\n            j += 1\n        k += 1\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n    return inv_count\n\ndef merge_sort_and_count(arr: List[int], temp_arr: List[int], left: int, right: int) -> int:\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n    return inv_count\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_count_split_inv(left: List[int], right: List[int]) -> int:\n        i = j = 0\n        count = 0\n        merged = []\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                count += len(left) - i\n                j += 1\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return (merged, count)\n\n    def sort_and_count(arr: List[int]) -> int:\n        if len(arr) < 2:\n            return 0\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        inv_count = sort_and_count(left) + sort_and_count(right)\n        merged, split_inv = merge_count_split_inv(left, right)\n        arr[:] = merged\n        return inv_count + split_inv\n    return sort_and_count(arr)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_count_split_inv(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_count_split_inv(arr, temp_arr, left, mid, right)\n        return inv_count\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(left, right):\n        i = j = 0\n        merged = []\n        inv_count = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                inv_count += len(left) - i\n                j += 1\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return (merged, inv_count)\n\n    def sort_and_count(arr):\n        if len(arr) < 2:\n            return (arr, 0)\n        mid = len(arr) // 2\n        left, left_inv = sort_and_count(arr[:mid])\n        right, right_inv = sort_and_count(arr[mid:])\n        merged, split_inv = merge_and_count(left, right)\n        return (merged, left_inv + right_inv + split_inv)\n    _, total_inversions = sort_and_count(arr)\n    return total_inversions", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef merge_and_count(arr: List[int], temp_arr: List[int], left: int, mid: int, right: int) -> int:\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += mid - i + 1\n            j += 1\n        k += 1\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n    return inv_count\n\ndef _get_inv_count(arr: List[int], temp_arr: List[int], left: int, right: int) -> int:\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += _get_inv_count(arr, temp_arr, left, mid)\n        inv_count += _get_inv_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n    return inv_count\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    temp_arr = [0] * len(arr)\n    return _get_inv_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)"], "clusters": [{"programs_str": ["from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef merge_and_count(arr: List[int], temp_arr: List[int], left: int, mid: int, right: int) -> int:\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += mid - i + 1\n            j += 1\n        k += 1\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n    return inv_count\n\ndef merge_sort_and_count(arr: List[int], temp_arr: List[int], left: int, right: int) -> int:\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n    return inv_count\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef merge_and_count(arr: List[int], temp_arr: List[int], left: int, mid: int, right: int) -> int:\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += mid - i + 1\n            j += 1\n        k += 1\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n    return inv_count\n\ndef merge_sort_and_count(arr: List[int], temp_arr: List[int], left: int, right: int) -> int:\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n    return inv_count\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_count_split_inv(left: List[int], right: List[int]) -> int:\n        i = j = 0\n        count = 0\n        merged = []\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                count += len(left) - i\n                j += 1\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return (merged, count)\n\n    def sort_and_count(arr: List[int]) -> int:\n        if len(arr) < 2:\n            return 0\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        inv_count = sort_and_count(left) + sort_and_count(right)\n        merged, split_inv = merge_count_split_inv(left, right)\n        arr[:] = merged\n        return inv_count + split_inv\n    return sort_and_count(arr)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_count_split_inv(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_count_split_inv(arr, temp_arr, left, mid, right)\n        return inv_count\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(left, right):\n        i = j = 0\n        merged = []\n        inv_count = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                inv_count += len(left) - i\n                j += 1\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return (merged, inv_count)\n\n    def sort_and_count(arr):\n        if len(arr) < 2:\n            return (arr, 0)\n        mid = len(arr) // 2\n        left, left_inv = sort_and_count(arr[:mid])\n        right, right_inv = sort_and_count(arr[mid:])\n        merged, split_inv = merge_and_count(left, right)\n        return (merged, left_inv + right_inv + split_inv)\n    _, total_inversions = sort_and_count(arr)\n    return total_inversions", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef merge_and_count(arr: List[int], temp_arr: List[int], left: int, mid: int, right: int) -> int:\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += mid - i + 1\n            j += 1\n        k += 1\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n    return inv_count\n\ndef _get_inv_count(arr: List[int], temp_arr: List[int], left: int, right: int) -> int:\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += _get_inv_count(arr, temp_arr, left, mid)\n        inv_count += _get_inv_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n    return inv_count\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    temp_arr = [0] * len(arr)\n    return _get_inv_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)"], "outputs": "[[5], [5], [10], [0], [3], [2], [0], [0], [6], [5]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/297", "requirement": "from typing import List\nfrom typing import Union\n\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"", "llm_generated_inputs": "[[[0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]], [[[1, 2], [3, [4, 5]], 6]], [[[[]], [1], 2]], [[[], [], []]], [[1, [2, [3, 4]], 5]], [[10, [20, 30], [40, [50]], 60]], [[[1], [2, [3]], [4, [5, [6]]]]], [[1, 'text', [2, 3], [4.0]]], [[[[[7]]], 8, [9]]], [[[5, [10]], [15], [20, [25, [30]]]]]]", "programs": ["from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flat_list = []\n\n    def flatten(item):\n        if isinstance(item, list):\n            for sub_item in item:\n                flatten(sub_item)\n        else:\n            flat_list.append(item)\n    flatten(list1)\n    return flat_list", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flattened = []\n\n    def flatten(item):\n        if isinstance(item, list):\n            for sub_item in item:\n                flatten(sub_item)\n        else:\n            flattened.append(item)\n    flatten(list1)\n    return flattened", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for element in list1:\n        if isinstance(element, list):\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened"], "clusters": [{"programs_str": ["from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flat_list = []\n\n    def flatten(item):\n        if isinstance(item, list):\n            for sub_item in item:\n                flatten(sub_item)\n        else:\n            flat_list.append(item)\n    flatten(list1)\n    return flat_list", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flattened = []\n\n    def flatten(item):\n        if isinstance(item, list):\n            for sub_item in item:\n                flatten(sub_item)\n        else:\n            flattened.append(item)\n    flatten(list1)\n    return flattened", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for element in list1:\n        if isinstance(element, list):\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened"], "outputs": "[[[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]], [[1, 2, 3, 4, 5, 6]], [[1, 2]], [[]], [[1, 2, 3, 4, 5]], [[10, 20, 30, 40, 50, 60]], [[1, 2, 3, 4, 5, 6]], [[1, 'text', 2, 3, 4.0]], [[7, 8, 9]], [[5, 10, 15, 20, 25, 30]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/299", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"", "llm_generated_inputs": "[[[('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]], [[('Alice', 100), ('Bob', 200), ('Alice', 150), ('Charlie', 50)]], [[('Single Entry', 50)]], [[('Empty Entry', 0), ('Empty Entry', 0)]], [[('John Doe', 50), ('John Doe', 50), ('John Doe', 50)]], [[('Alice Smith', 75), ('Alice Smith', 75), ('Bob Brown', 100), ('Bob Brown', 100)]]]", "programs": ["from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    max_name = max(aggregates, key=aggregates.get)\n    max_score = aggregates[max_name]\n    return (max_name, max_score)", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    max_name = max(aggregates, key=aggregates.get)\n    return (max_name, aggregates[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    max_score = aggregate_scores[max_name]\n    return (max_name, max_score)", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    max_name = max(aggregates, key=aggregates.get)\n    return (max_name, aggregates[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    return max(aggregate_scores.items(), key=lambda x: x[1])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    max_name = max(aggregates, key=aggregates.get)\n    return (max_name, aggregates[max_name])", "from typing import List\nfrom typing import Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    max_name = max(aggregates, key=aggregates.get)\n    return (max_name, aggregates[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    max_score = aggregate_scores[max_name]\n    return (max_name, max_score)", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    return max(aggregates.items(), key=lambda x: x[1])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])"], "clusters": [{"programs_str": ["from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    max_name = max(aggregates, key=aggregates.get)\n    max_score = aggregates[max_name]\n    return (max_name, max_score)", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    max_name = max(aggregates, key=aggregates.get)\n    return (max_name, aggregates[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    max_score = aggregate_scores[max_name]\n    return (max_name, max_score)", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    max_name = max(aggregates, key=aggregates.get)\n    return (max_name, aggregates[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    return max(aggregate_scores.items(), key=lambda x: x[1])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    max_name = max(aggregates, key=aggregates.get)\n    return (max_name, aggregates[max_name])", "from typing import List\nfrom typing import Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    max_name = max(aggregates, key=aggregates.get)\n    return (max_name, aggregates[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    max_score = aggregate_scores[max_name]\n    return (max_name, max_score)", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    return max(aggregates.items(), key=lambda x: x[1])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])"], "outputs": "[[('Juan Whelan', 212)], [('Alice', 250)], [('Single Entry', 50)], [('Empty Entry', 0)], [('John Doe', 150)], [('Bob Brown', 200)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/300", "requirement": "def count_binary_seq(n: int) -> int:\n\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [0], [10]]", "programs": ["import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    total_count = 0\n    for k in range(n + 1):\n        total_count += comb(n, k) * comb(n, k)\n    return total_count", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n)", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    total_ways = 0\n    for i in range(n + 1):\n        total_ways += comb(n, i) * comb(n, i)\n    return total_ways", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n)", "import math\nfrom functools import lru_cache\n\ndef count_binary_seq(n: int) -> int:\n\n    def count_sum_pairs(sum_value, length):\n        if length == 0:\n            return 1 if sum_value == 0 else 0\n        return count_sum_pairs(sum_value, length - 1) + count_sum_pairs(sum_value - 1, length - 1)\n    total_count = 0\n    for s in range(n + 1):\n        total_count += count_sum_pairs(s, n) ** 2\n    return total_count", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    total_sequences = 2 ** (2 * n)\n    valid_sequences = 0\n    for i in range(n + 1):\n        valid_sequences += comb(n, i) * comb(n, i)\n    return valid_sequences", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n)", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n)", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    total_sequences = 0\n    for i in range(n + 1):\n        total_sequences += comb(n, i) * comb(n, i)\n    return total_sequences", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n)", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n)", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n)", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n)", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    total_count = 0\n    for i in range(n + 1):\n        total_count += comb(n, i) * comb(n, i)\n    return total_count", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    total_ways = 0\n    for k in range(n + 1):\n        total_ways += comb(n, k) * comb(n, k)\n    return total_ways", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n)", "import math\nfrom functools import lru_cache\n\ndef count_binary_seq(n: int) -> int:\n\n    def count_ways(k, s):\n        if k == 0:\n            return 1 if s == 0 else 0\n        return count_ways(k - 1, s) + count_ways(k - 1, s - 1)\n    total_count = 0\n    for i in range(n + 1):\n        total_count += count_ways(n, i) ** 2\n    return total_count", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    total_sequences = 2 ** (2 * n)\n    valid_sequences = 0\n    for i in range(n + 1):\n        valid_sequences += comb(n, i) * comb(n, i)\n    return valid_sequences", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n)", "import math\n\ndef count_binary_seq(n: int) -> int:\n    from math import comb\n    return comb(2 * n, n) // (n + 1)"], "clusters": [{"programs_str": ["import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    total_count = 0\n    for k in range(n + 1):\n        total_count += comb(n, k) * comb(n, k)\n    return total_count", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n)", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    total_ways = 0\n    for i in range(n + 1):\n        total_ways += comb(n, i) * comb(n, i)\n    return total_ways", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n)", "import math\nfrom functools import lru_cache\n\ndef count_binary_seq(n: int) -> int:\n\n    def count_sum_pairs(sum_value, length):\n        if length == 0:\n            return 1 if sum_value == 0 else 0\n        return count_sum_pairs(sum_value, length - 1) + count_sum_pairs(sum_value - 1, length - 1)\n    total_count = 0\n    for s in range(n + 1):\n        total_count += count_sum_pairs(s, n) ** 2\n    return total_count", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    total_sequences = 2 ** (2 * n)\n    valid_sequences = 0\n    for i in range(n + 1):\n        valid_sequences += comb(n, i) * comb(n, i)\n    return valid_sequences", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n)", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n)", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    total_sequences = 0\n    for i in range(n + 1):\n        total_sequences += comb(n, i) * comb(n, i)\n    return total_sequences", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n)", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n)", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n)", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n)", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    total_count = 0\n    for i in range(n + 1):\n        total_count += comb(n, i) * comb(n, i)\n    return total_count", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    total_ways = 0\n    for k in range(n + 1):\n        total_ways += comb(n, k) * comb(n, k)\n    return total_ways", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n)", "import math\nfrom functools import lru_cache\n\ndef count_binary_seq(n: int) -> int:\n\n    def count_ways(k, s):\n        if k == 0:\n            return 1 if s == 0 else 0\n        return count_ways(k - 1, s) + count_ways(k - 1, s - 1)\n    total_count = 0\n    for i in range(n + 1):\n        total_count += count_ways(n, i) ** 2\n    return total_count", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    total_sequences = 2 ** (2 * n)\n    valid_sequences = 0\n    for i in range(n + 1):\n        valid_sequences += comb(n, i) * comb(n, i)\n    return valid_sequences", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n)"], "outputs": "[[2], [6], [20], [1], [184756]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef count_binary_seq(n: int) -> int:\n    from math import comb\n    return comb(2 * n, n) // (n + 1)"], "outputs": "[[1], [2], [5], [1], [16796]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[1], [1], [2.0]]]"}]}
{"task_id": "Mbpp/301", "requirement": "def dict_depth(d: dict) -> int:\n\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"", "llm_generated_inputs": "[[{}], [{'a': 1}], [{'a': 1, 'b': 2}], [{'a': {'b': {'c': 3}}}], [{'x': {'y': {'z': {'w': {}}}}}], [{'nested': {'dict': {'with': {'multiple': {'levels': {}}}}}}], [{'a': {'b': {'c': {'d': 4}}, 'e': 5}}], [{'single_level': {'value': 10}}], [{'depth_1': {'depth_2': {'depth_3': {'depth_4': {'depth_5': {}}}}}}]]", "programs": ["def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values()))", "def dict_depth(d: dict) -> int:\n    if isinstance(d, dict) and d:\n        return 1 + max((dict_depth(v) for v in d.values()))\n    return 0", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values()))", "def dict_depth(d: dict) -> int:\n    if isinstance(d, dict) and d:\n        return 1 + max((dict_depth(v) for v in d.values()))\n    return 0", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max((dict_depth(value) for value in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max((dict_depth(v) for v in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max((dict_depth(value) for value in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max((dict_depth(v) for v in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max((dict_depth(value) for value in d.values()))", "def dict_depth(d: dict) -> int:\n    if isinstance(d, dict):\n        if not d:\n            return 1\n        return 1 + max((dict_depth(v) for v in d.values()))\n    return 0"], "clusters": [{"programs_str": ["def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values()))", "def dict_depth(d: dict) -> int:\n    if isinstance(d, dict) and d:\n        return 1 + max((dict_depth(v) for v in d.values()))\n    return 0", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values()))", "def dict_depth(d: dict) -> int:\n    if isinstance(d, dict) and d:\n        return 1 + max((dict_depth(v) for v in d.values()))\n    return 0", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values()))"], "outputs": "[[0], [1], [1], [3], [4], [5], [4], [2], [5]]", "probability": 0.7, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[{'a': 1, 'b': {'c': {'d': {}}}}], [3], [4]]]"}, {"programs_str": ["def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max((dict_depth(value) for value in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max((dict_depth(v) for v in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max((dict_depth(value) for value in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max((dict_depth(v) for v in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max((dict_depth(value) for value in d.values()))"], "outputs": "[[1], [2], [2], [4], [5], [6], [5], [3], [6]]", "probability": 0.25, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def dict_depth(d: dict) -> int:\n    if isinstance(d, dict):\n        if not d:\n            return 1\n        return 1 + max((dict_depth(v) for v in d.values()))\n    return 0"], "outputs": "[[1], [1], [1], [3], [5], [6], [4], [2], [6]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/305", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"", "llm_generated_inputs": "[[['Python PHP', 'Java JavaScript', 'c c++']], [['Pineapple', 'Peach', 'Apple', 'Banana']], [['pear', 'plum', 'grape']], [['pencil', 'paper', 'eraser']], [['panda', 'penguin', 'elephant']], [['P', 'p', 'p']], [['pomegranate']], [['hello world', 'pandas', 'Python']], [([],)]]", "programs": ["from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.startswith('p') or word.startswith('P'):\n                p_words.append(word)\n                if len(p_words) == 2:\n                    return (p_words[0], p_words[1])\n    return ('', '')", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                p_words.append(w)\n                if len(p_words) == 2:\n                    return (p_words[0], p_words[1])\n    return ('', '')", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                p_words.append(w)\n    return (p_words[0], p_words[1]) if len(p_words) >= 2 else ('', '')", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                result.append(w)\n                if len(result) == 2:\n                    return (result[0], result[1])\n    return ('', '')", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                result.append(w)\n    return tuple(result[:2]) if len(result) >= 2 else ('', '')", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                p_words.append(w)\n                if len(p_words) == 2:\n                    return (p_words[0], p_words[1])\n    return ('', '')", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                p_words.append(w)\n            if len(p_words) == 2:\n                return (p_words[0], p_words[1])\n    return ('', '')", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                p_words.append(w)\n                if len(p_words) == 2:\n                    return (p_words[0], p_words[1])\n    return ('', '')", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                result.append(w)\n                if len(result) == 2:\n                    return tuple(result)\n    return ()", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        for individual_word in word.split():\n            if individual_word.startswith('p') or individual_word.startswith('P'):\n                p_words.append(individual_word)\n            if len(p_words) == 2:\n                return tuple(p_words)\n    return tuple()", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    found_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                found_words.append(w)\n                if len(found_words) == 2:\n                    return tuple(found_words)\n    return tuple()", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                p_words.append(w)\n                if len(p_words) == 2:\n                    return tuple(p_words)\n    return ()", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    found_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                found_words.append(w)\n                if len(found_words) == 2:\n                    return tuple(found_words)\n    return tuple()", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('P') or w.startswith('p'):\n                p_words.append(w)\n                if len(p_words) == 2:\n                    return tuple(p_words)\n    return tuple()", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                result.append(w)\n            if len(result) == 2:\n                return tuple(result)\n    return tuple(result)", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('P') or w.startswith('p'):\n                result.append(w)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                p_words.append(w)\n            if len(p_words) == 2:\n                return tuple(p_words)\n    return tuple(p_words)", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                result.append(w)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for word_group in words:\n        for word in word_group.split():\n            if word.startswith('p') or word.startswith('P'):\n                result.append(word)\n            if len(result) == 2:\n                return tuple(result)\n    return None", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                p_words.append(w)\n                if len(p_words) == 2:\n                    return tuple(p_words)\n    return None"], "clusters": [{"programs_str": ["from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.startswith('p') or word.startswith('P'):\n                p_words.append(word)\n                if len(p_words) == 2:\n                    return (p_words[0], p_words[1])\n    return ('', '')", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                p_words.append(w)\n                if len(p_words) == 2:\n                    return (p_words[0], p_words[1])\n    return ('', '')", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                p_words.append(w)\n    return (p_words[0], p_words[1]) if len(p_words) >= 2 else ('', '')", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                result.append(w)\n                if len(result) == 2:\n                    return (result[0], result[1])\n    return ('', '')", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                result.append(w)\n    return tuple(result[:2]) if len(result) >= 2 else ('', '')", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                p_words.append(w)\n                if len(p_words) == 2:\n                    return (p_words[0], p_words[1])\n    return ('', '')", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                p_words.append(w)\n            if len(p_words) == 2:\n                return (p_words[0], p_words[1])\n    return ('', '')", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                p_words.append(w)\n                if len(p_words) == 2:\n                    return (p_words[0], p_words[1])\n    return ('', '')"], "outputs": "[[('Python', 'PHP')], [('Pineapple', 'Peach')], [('pear', 'plum')], [('pencil', 'paper')], [('panda', 'penguin')], [('P', 'p')], [('', '')], [('pandas', 'Python')], ['AttributeError']]", "probability": 0.4, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                result.append(w)\n                if len(result) == 2:\n                    return tuple(result)\n    return ()", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        for individual_word in word.split():\n            if individual_word.startswith('p') or individual_word.startswith('P'):\n                p_words.append(individual_word)\n            if len(p_words) == 2:\n                return tuple(p_words)\n    return tuple()", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    found_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                found_words.append(w)\n                if len(found_words) == 2:\n                    return tuple(found_words)\n    return tuple()", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                p_words.append(w)\n                if len(p_words) == 2:\n                    return tuple(p_words)\n    return ()", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    found_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                found_words.append(w)\n                if len(found_words) == 2:\n                    return tuple(found_words)\n    return tuple()", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('P') or w.startswith('p'):\n                p_words.append(w)\n                if len(p_words) == 2:\n                    return tuple(p_words)\n    return tuple()"], "outputs": "[[('Python', 'PHP')], [('Pineapple', 'Peach')], [('pear', 'plum')], [('pencil', 'paper')], [('panda', 'penguin')], [('P', 'p')], [()], [('pandas', 'Python')], ['AttributeError']]", "probability": 0.3, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                result.append(w)\n            if len(result) == 2:\n                return tuple(result)\n    return tuple(result)", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('P') or w.startswith('p'):\n                result.append(w)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                p_words.append(w)\n            if len(p_words) == 2:\n                return tuple(p_words)\n    return tuple(p_words)", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                result.append(w)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)"], "outputs": "[[('Python', 'PHP')], [('Pineapple', 'Peach')], [('pear', 'plum')], [('pencil', 'paper')], [('panda', 'penguin')], [('P', 'p')], [('pomegranate',)], [('pandas', 'Python')], ['AttributeError']]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for word_group in words:\n        for word in word_group.split():\n            if word.startswith('p') or word.startswith('P'):\n                result.append(word)\n            if len(result) == 2:\n                return tuple(result)\n    return None", "from typing import List\nfrom typing import Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                p_words.append(w)\n                if len(p_words) == 2:\n                    return tuple(p_words)\n    return None"], "outputs": "[[('Python', 'PHP')], [('Pineapple', 'Peach')], [('pear', 'plum')], [('pencil', 'paper')], [('panda', 'penguin')], [('P', 'p')], [None], [('pandas', 'Python')], ['AttributeError']]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/306", "requirement": "from typing import List\n\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"", "llm_generated_inputs": "[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [[3, 2, 5, 10, 7], 5, 2, 4], [[10, 5, 4, 3, 2, 1], 6, 0, 5], [[1, 3, 6, 7, 8, 4, 5], 7, 3, 5], [[10, 20, 30], 3, 0, 2], [[], 0, 0, 0], [[5], 1, 0, 0], [[2, 1, 5, 3, 4], 5, 1, 4], [[1, 2, 3, 4, 5], 5, 2, 4], [[7, 14, 3, 5, 10], 5, 1, 3]]", "programs": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    for i in range(index + 1):\n        current_sum = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                current_sum += a[j]\n        if a[index] < a[k]:\n            current_sum += a[k]\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    for i in range(index + 1):\n        current_sum = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                current_sum += a[j]\n        max_sum = max(max_sum, current_sum)\n    if k > index and a[k] > a[index]:\n        max_sum += a[k]\n    return max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if k <= index:\n        return 0\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = sum((x for j, x in enumerate(a[:index + 1]) if x < a[i]))\n            current_sum += a[k]\n            max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if k <= index:\n        return 0\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = sum((x for x in a[:index + 1] if x < a[i])) + a[k]\n            max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    dp = [0] * (index + 1)\n    for i in range(index + 1):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    max_sum = max(dp)\n    if k < n:\n        for i in range(index + 1):\n            if a[i] < a[k]:\n                max_sum = max(max_sum, dp[i] + a[k])\n    return max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    dp = [0] * n\n    for i in range(index + 1):\n        dp[i] = a[i]\n    for i in range(index + 1):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    max_sum_before_k = max(dp[:index + 1])\n    if a[index] < a[k]:\n        return max_sum_before_k + a[k]\n    else:\n        return max_sum_before_k", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = sum((x for x in a[:i + 1] if x < a[k])) + a[k]\n            max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            subseq_sum = sum((a[j] for j in range(i + 1) if a[j] < a[k]))\n            max_sum = max(max_sum, subseq_sum + a[k])\n    return max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    if k < n:\n        max_sum += a[k]\n    current_sum = 0\n    for i in range(index + 1):\n        if i == 0 or a[i] > a[i - 1]:\n            current_sum += a[i]\n    return current_sum + max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    prefix_sum = [0] * (n + 1)\n    for i in range(index + 1):\n        prefix_sum[i + 1] = max(prefix_sum[i], prefix_sum[i] + a[i])\n    for j in range(index + 1, k + 1):\n        if a[j] > a[index]:\n            max_sum = max(max_sum, prefix_sum[index + 1] + a[j])\n    return max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    current_sum = 0\n    for i in range(index + 1):\n        if i == 0 or a[i] > a[i - 1]:\n            current_sum += a[i]\n    max_sum = current_sum\n    for i in range(index + 1, k + 1):\n        if a[i] > a[index]:\n            max_sum = max(max_sum, current_sum + a[i])\n    return max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if index < 0 or k >= n:\n        return 0\n    max_sum = [0] * n\n    for i in range(index + 1):\n        max_sum[i] = a[i]\n        for j in range(i):\n            if a[i] > a[j]:\n                max_sum[i] = max(max_sum[i], max_sum[j] + a[i])\n    max_with_k = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            max_with_k = max(max_with_k, max_sum[i] + a[k])\n    return max_with_k", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    current_sum = 0\n    for i in range(index + 1):\n        if i == 0 or a[i] > a[i - 1]:\n            current_sum += a[i]\n    max_sum = current_sum\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            new_sum = current_sum - a[i] + a[k]\n            max_sum = max(max_sum, new_sum)\n    return max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = sum((a[j] for j in range(i + 1) if a[j] < a[k]))\n            max_sum = max(max_sum, current_sum)\n    return max_sum + a[k]", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if k <= index:\n        return 0\n    include_k = a[k]\n    max_sum = 0\n    for j in range(index + 1):\n        if a[j] < a[k]:\n            max_sum = max(max_sum, a[j])\n    return include_k + max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    current_sum = 0\n    for i in range(index + 1):\n        if i == 0 or a[i] > a[i - 1]:\n            current_sum += a[i]\n    if a[k] > a[index]:\n        contribution = a[k]\n        for i in range(index + 1):\n            if a[i] < a[k]:\n                contribution += a[i]\n        max_sum = current_sum + contribution\n    return max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if k <= index or index >= n:\n        return 0\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            max_sum = max(max_sum, a[i])\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            sum_so_far = a[i] + max_sum_increasing_subseq(a, n, i, k)\n            max_sum = max(max_sum, sum_so_far)\n    return max_sum + a[k]", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = sum((a[j] for j in range(i + 1) if a[j] < a[i])) + a[k]\n            max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = sum((x for x in a[:i + 1] if x < a[i])) + a[k]\n            max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = a[i]\n            for j in range(i + 1, n):\n                if a[j] > a[i]:\n                    current_sum += a[j]\n                    i = j\n            max_sum = max(max_sum, current_sum)\n    return max_sum + a[k]"], "clusters": [{"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    for i in range(index + 1):\n        current_sum = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                current_sum += a[j]\n        if a[index] < a[k]:\n            current_sum += a[k]\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    for i in range(index + 1):\n        current_sum = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                current_sum += a[j]\n        max_sum = max(max_sum, current_sum)\n    if k > index and a[k] > a[index]:\n        max_sum += a[k]\n    return max_sum"], "outputs": "[[106], [17], [10], [17], [40], ['IndexError'], [5], [6], [11], [21]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [106], [11]]]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if k <= index:\n        return 0\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = sum((x for j, x in enumerate(a[:index + 1]) if x < a[i]))\n            current_sum += a[k]\n            max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if k <= index:\n        return 0\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = sum((x for x in a[:index + 1] if x < a[i])) + a[k]\n            max_sum = max(max_sum, current_sum)\n    return max_sum"], "outputs": "[[8], [12], [0], [5], [30], [0], [0], [5], [8], [0]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [8], [11]]]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    dp = [0] * (index + 1)\n    for i in range(index + 1):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    max_sum = max(dp)\n    if k < n:\n        for i in range(index + 1):\n            if a[i] < a[k]:\n                max_sum = max(max_sum, dp[i] + a[k])\n    return max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    dp = [0] * n\n    for i in range(index + 1):\n        dp[i] = a[i]\n    for i in range(index + 1):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    max_sum_before_k = max(dp[:index + 1])\n    if a[index] < a[k]:\n        return max_sum_before_k + a[k]\n    else:\n        return max_sum_before_k"], "outputs": "[[106], [15], [10], [17], [40], ['IndexError'], [5], [6], [11], [21]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [106], [11]]]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = sum((x for x in a[:i + 1] if x < a[k])) + a[k]\n            max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            subseq_sum = sum((a[j] for j in range(i + 1) if a[j] < a[k]))\n            max_sum = max(max_sum, subseq_sum + a[k])\n    return max_sum"], "outputs": "[[11], [17], [0], [8], [40], ['IndexError'], [0], [7], [11], [0]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    if k < n:\n        max_sum += a[k]\n    current_sum = 0\n    for i in range(index + 1):\n        if i == 0 or a[i] > a[i - 1]:\n            current_sum += a[i]\n    return current_sum + max_sum"], "outputs": "[[210], [15], [11], [21], [40], ['IndexError'], [10], [6], [11], [26]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [210], [11]]]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    prefix_sum = [0] * (n + 1)\n    for i in range(index + 1):\n        prefix_sum[i + 1] = max(prefix_sum[i], prefix_sum[i] + a[i])\n    for j in range(index + 1, k + 1):\n        if a[j] > a[index]:\n            max_sum = max(max_sum, prefix_sum[index + 1] + a[j])\n    return max_sum"], "outputs": "[[0], [20], [0], [25], [40], ['IndexError'], [0], [8], [11], [0]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [0], [11]]]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    current_sum = 0\n    for i in range(index + 1):\n        if i == 0 or a[i] > a[i - 1]:\n            current_sum += a[i]\n    max_sum = current_sum\n    for i in range(index + 1, k + 1):\n        if a[i] > a[index]:\n            max_sum = max(max_sum, current_sum + a[i])\n    return max_sum"], "outputs": "[[205], [18], [10], [25], [40], ['IndexError'], [5], [7], [11], [21]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [205], [11]]]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if index < 0 or k >= n:\n        return 0\n    max_sum = [0] * n\n    for i in range(index + 1):\n        max_sum[i] = a[i]\n        for j in range(i):\n            if a[i] > a[j]:\n                max_sum[i] = max(max_sum[i], max_sum[j] + a[i])\n    max_with_k = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            max_with_k = max(max_with_k, max_sum[i] + a[k])\n    return max_with_k"], "outputs": "[[11], [15], [0], [8], [40], [0], [0], [6], [11], [0]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    current_sum = 0\n    for i in range(index + 1):\n        if i == 0 or a[i] > a[i - 1]:\n            current_sum += a[i]\n    max_sum = current_sum\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            new_sum = current_sum - a[i] + a[k]\n            max_sum = max(max_sum, new_sum)\n    return max_sum"], "outputs": "[[209], [13], [10], [20], [30], ['IndexError'], [5], [5], [10], [21]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [209], [11]]]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = sum((a[j] for j in range(i + 1) if a[j] < a[k]))\n            max_sum = max(max_sum, current_sum)\n    return max_sum + a[k]"], "outputs": "[[11], [17], [1], [8], [40], ['IndexError'], [5], [7], [11], [5]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if k <= index:\n        return 0\n    include_k = a[k]\n    max_sum = 0\n    for j in range(index + 1):\n        if a[j] < a[k]:\n            max_sum = max(max_sum, a[j])\n    return include_k + max_sum"], "outputs": "[[8], [12], [1], [7], [40], [0], [0], [6], [8], [5]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [8], [11]]]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    current_sum = 0\n    for i in range(index + 1):\n        if i == 0 or a[i] > a[i - 1]:\n            current_sum += a[i]\n    if a[k] > a[index]:\n        contribution = a[k]\n        for i in range(index + 1):\n            if a[i] < a[k]:\n                contribution += a[i]\n        max_sum = current_sum + contribution\n    return max_sum"], "outputs": "[[0], [25], [0], [0], [50], ['IndexError'], [0], [9], [17], [0]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [0], [11]]]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if k <= index or index >= n:\n        return 0\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            max_sum = max(max_sum, a[i])\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            sum_so_far = a[i] + max_sum_increasing_subseq(a, n, i, k)\n            max_sum = max(max_sum, sum_so_far)\n    return max_sum + a[k]"], "outputs": "[['RecursionError'], ['RecursionError'], [1], ['RecursionError'], ['RecursionError'], [0], [0], ['RecursionError'], ['RecursionError'], [5]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], ['RecursionError'], [11]]]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = sum((a[j] for j in range(i + 1) if a[j] < a[i])) + a[k]\n            max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = sum((x for x in a[:i + 1] if x < a[i])) + a[k]\n            max_sum = max(max_sum, current_sum)\n    return max_sum"], "outputs": "[[8], [12], [0], [5], [30], ['IndexError'], [0], [4], [8], [0]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [8], [11]]]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = a[i]\n            for j in range(i + 1, n):\n                if a[j] > a[i]:\n                    current_sum += a[j]\n                    i = j\n            max_sum = max(max_sum, current_sum)\n    return max_sum + a[k]"], "outputs": "[[110], [25], [1], [29], [90], ['IndexError'], [5], [11], [20], [5]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [110], [11]]]"}]}
{"task_id": "Mbpp/308", "requirement": "from typing import List\n\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 4, 5], [3, 6, 7, 8], 2], [[0, -1, -2, 5], [3, 6, 0], 2], [[10, 20, 30], [5, 10, 15], 3], [[-1, -2, -3, -4], [-5, -6, -7, -8], 2], [[1, 2, 3], [4, 5, 6], 1], [[10, 9, 8, 7], [1, 2, 3, 4], 0]]", "programs": ["from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = [a * b for a in nums1 for b in nums2]\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    products.sort(reverse=True)\n    return products[:N]", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)"], "clusters": [{"programs_str": ["from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = [a * b for a in nums1 for b in nums2]\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    products.sort(reverse=True)\n    return products[:N]", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return heapq.nlargest(N, products)"], "outputs": "[[[40, 35]], [[30, 15]], [[450, 300, 300]], [[32, 28]], [[18]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/309", "requirement": "def maximum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"", "llm_generated_inputs": "[[5, 10], [-5, 10], [0, 0], [7, 7], [-3, -1], [100, 1000], [-200, 50], [1, -1]]", "programs": ["def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b"], "clusters": [{"programs_str": ["def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b"], "outputs": "[[10], [10], [0], [7], [-1], [1000], [50], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/310", "requirement": "def string_to_tuple(str1: str) -> tuple:\n\"\"\"\nWrite a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"", "llm_generated_inputs": "[['python 3.0'], [''], ['Hello, World!'], ['12345'], ['Single'], ['abcdefg'], [' '], ['Special chars #@!'], ['Mixed 1234 @#$%']]", "programs": ["def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)"], "clusters": [{"programs_str": ["def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)"], "outputs": "[[('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')], [()], [('H', 'e', 'l', 'l', 'o', ',', ' ', 'W', 'o', 'r', 'l', 'd', '!')], [('1', '2', '3', '4', '5')], [('S', 'i', 'n', 'g', 'l', 'e')], [('a', 'b', 'c', 'd', 'e', 'f', 'g')], [(' ',)], [('S', 'p', 'e', 'c', 'i', 'a', 'l', ' ', 'c', 'h', 'a', 'r', 's', ' ', '#', '@', '!')], [('M', 'i', 'x', 'e', 'd', ' ', '1', '2', '3', '4', ' ', '@', '#', '$', '%')]]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['python 3.0'], [('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')], [('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')]]]"}]}
{"task_id": "Mbpp/311", "requirement": "def set_left_most_unset_bit(n: int) -> int:\n\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [10], [15], [31], [16], [255], [1023], [128]]", "programs": ["def set_left_most_unset_bit(n: int) -> int:\n    left_most_unset_bit = 1 << n.bit_length() - 1\n    while left_most_unset_bit & n:\n        left_most_unset_bit >>= 1\n    return n | left_most_unset_bit", "def set_left_most_unset_bit(n: int) -> int:\n    index = 0\n    while 1 << index <= n:\n        index += 1\n    return n | 1 << index - 1", "def set_left_most_unset_bit(n: int) -> int:\n    bit_position = 0\n    temp = n\n    while temp > 0:\n        temp >>= 1\n        bit_position += 1\n    result = n | 1 << bit_position - 1\n    return result", "def set_left_most_unset_bit(n: int) -> int:\n    leftmost_unset_bit = 1 << n.bit_length()\n    return n | leftmost_unset_bit", "def set_left_most_unset_bit(n: int) -> int:\n    left_most_unset_bit_position = 0\n    temp = n\n    while temp > 0:\n        temp >>= 1\n        left_most_unset_bit_position += 1\n    result = n | 1 << left_most_unset_bit_position\n    return result", "def set_left_most_unset_bit(n: int) -> int:\n    position = 0\n    temp = n\n    while temp > 0:\n        position += 1\n        temp >>= 1\n    mask = 1 << position\n    result = n | mask\n    return result", "def set_left_most_unset_bit(n: int) -> int:\n    highest_bit = 1\n    while highest_bit <= n:\n        highest_bit <<= 1\n    return n | highest_bit", "def set_left_most_unset_bit(n: int) -> int:\n    bit_length = n.bit_length()\n    left_most_unset_bit = 1 << bit_length\n    if n & left_most_unset_bit:\n        left_most_unset_bit <<= 1\n    return n | left_most_unset_bit", "def set_left_most_unset_bit(n: int) -> int:\n    bit_length = n.bit_length()\n    mask = 1 << bit_length\n    result = n | mask\n    return result", "def set_left_most_unset_bit(n: int) -> int:\n    position = 0\n    while 1 << position <= n:\n        position += 1\n    return n | 1 << position", "def set_left_most_unset_bit(n: int) -> int:\n    leftmost_unset_bit = 1 << n.bit_length()\n    return n | leftmost_unset_bit", "def set_left_most_unset_bit(n: int) -> int:\n    position = n.bit_length()\n    left_most_unset_bit = 1 << position\n    return n | left_most_unset_bit", "def set_left_most_unset_bit(n: int) -> int:\n    bit_length = n.bit_length()\n    leftmost_unset_bit = 1 << bit_length\n    return n | leftmost_unset_bit", "def set_left_most_unset_bit(n: int) -> int:\n    length = n.bit_length()\n    left_most_unset_bit = 1 << length\n    return n | left_most_unset_bit", "def set_left_most_unset_bit(n: int) -> int:\n    leftmost_unset_bit_pos = 0\n    temp = n\n    while temp != 0:\n        leftmost_unset_bit_pos += 1\n        temp >>= 1\n    return n | 1 << leftmost_unset_bit_pos", "def set_left_most_unset_bit(n: int) -> int:\n    if n == 0:\n        return 1\n    bit_length = n.bit_length()\n    left_most_unset_bit_position = bit_length\n    result = n | 1 << left_most_unset_bit_position\n    return result", "def set_left_most_unset_bit(n: int) -> int:\n    bit_length = n.bit_length()\n    left_most_unset_bit_position = bit_length\n    for i in range(bit_length - 1, -1, -1):\n        if n & 1 << i == 0:\n            left_most_unset_bit_position = i\n            break\n    return n | 1 << left_most_unset_bit_position", "def set_left_most_unset_bit(n: int) -> int:\n    bit_length = n.bit_length()\n    left_most_unset_bit_position = bit_length\n    if n == (1 << bit_length) - 1:\n        return n + 1\n    mask = 1 << left_most_unset_bit_position\n    return n | mask", "def set_left_most_unset_bit(n: int) -> int:\n    left_most_unset = 0\n    for i in range(31, -1, -1):\n        if n & 1 << i == 0:\n            left_most_unset = i\n            break\n    return n | 1 << left_most_unset", "def set_left_most_unset_bit(n: int) -> int:\n    leftmost_unset_bit_position = 0\n    bit_position = 0\n    while n > 0:\n        if n & 1 == 0:\n            leftmost_unset_bit_position = bit_position\n        n >>= 1\n        bit_position += 1\n    return 1 << leftmost_unset_bit_position | n << bit_position"], "clusters": [{"programs_str": ["def set_left_most_unset_bit(n: int) -> int:\n    left_most_unset_bit = 1 << n.bit_length() - 1\n    while left_most_unset_bit & n:\n        left_most_unset_bit >>= 1\n    return n | left_most_unset_bit"], "outputs": "[['ValueError'], [1], [3], [14], [15], [31], [24], [255], [1023], [192]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def set_left_most_unset_bit(n: int) -> int:\n    index = 0\n    while 1 << index <= n:\n        index += 1\n    return n | 1 << index - 1", "def set_left_most_unset_bit(n: int) -> int:\n    bit_position = 0\n    temp = n\n    while temp > 0:\n        temp >>= 1\n        bit_position += 1\n    result = n | 1 << bit_position - 1\n    return result"], "outputs": "[['ValueError'], [1], [2], [10], [15], [31], [16], [255], [1023], [128]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [10], [14]]]"}, {"programs_str": ["def set_left_most_unset_bit(n: int) -> int:\n    leftmost_unset_bit = 1 << n.bit_length()\n    return n | leftmost_unset_bit", "def set_left_most_unset_bit(n: int) -> int:\n    left_most_unset_bit_position = 0\n    temp = n\n    while temp > 0:\n        temp >>= 1\n        left_most_unset_bit_position += 1\n    result = n | 1 << left_most_unset_bit_position\n    return result", "def set_left_most_unset_bit(n: int) -> int:\n    position = 0\n    temp = n\n    while temp > 0:\n        position += 1\n        temp >>= 1\n    mask = 1 << position\n    result = n | mask\n    return result", "def set_left_most_unset_bit(n: int) -> int:\n    highest_bit = 1\n    while highest_bit <= n:\n        highest_bit <<= 1\n    return n | highest_bit", "def set_left_most_unset_bit(n: int) -> int:\n    bit_length = n.bit_length()\n    left_most_unset_bit = 1 << bit_length\n    if n & left_most_unset_bit:\n        left_most_unset_bit <<= 1\n    return n | left_most_unset_bit", "def set_left_most_unset_bit(n: int) -> int:\n    bit_length = n.bit_length()\n    mask = 1 << bit_length\n    result = n | mask\n    return result", "def set_left_most_unset_bit(n: int) -> int:\n    position = 0\n    while 1 << position <= n:\n        position += 1\n    return n | 1 << position", "def set_left_most_unset_bit(n: int) -> int:\n    leftmost_unset_bit = 1 << n.bit_length()\n    return n | leftmost_unset_bit", "def set_left_most_unset_bit(n: int) -> int:\n    position = n.bit_length()\n    left_most_unset_bit = 1 << position\n    return n | left_most_unset_bit", "def set_left_most_unset_bit(n: int) -> int:\n    bit_length = n.bit_length()\n    leftmost_unset_bit = 1 << bit_length\n    return n | leftmost_unset_bit", "def set_left_most_unset_bit(n: int) -> int:\n    length = n.bit_length()\n    left_most_unset_bit = 1 << length\n    return n | left_most_unset_bit", "def set_left_most_unset_bit(n: int) -> int:\n    leftmost_unset_bit_pos = 0\n    temp = n\n    while temp != 0:\n        leftmost_unset_bit_pos += 1\n        temp >>= 1\n    return n | 1 << leftmost_unset_bit_pos", "def set_left_most_unset_bit(n: int) -> int:\n    if n == 0:\n        return 1\n    bit_length = n.bit_length()\n    left_most_unset_bit_position = bit_length\n    result = n | 1 << left_most_unset_bit_position\n    return result"], "outputs": "[[1], [3], [6], [26], [31], [63], [48], [511], [2047], [384]]", "probability": 0.65, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [26], [14]]]"}, {"programs_str": ["def set_left_most_unset_bit(n: int) -> int:\n    bit_length = n.bit_length()\n    left_most_unset_bit_position = bit_length\n    for i in range(bit_length - 1, -1, -1):\n        if n & 1 << i == 0:\n            left_most_unset_bit_position = i\n            break\n    return n | 1 << left_most_unset_bit_position"], "outputs": "[[1], [3], [3], [14], [31], [63], [24], [511], [2047], [192]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def set_left_most_unset_bit(n: int) -> int:\n    bit_length = n.bit_length()\n    left_most_unset_bit_position = bit_length\n    if n == (1 << bit_length) - 1:\n        return n + 1\n    mask = 1 << left_most_unset_bit_position\n    return n | mask"], "outputs": "[[1], [2], [6], [26], [16], [32], [48], [256], [1024], [384]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [26], [14]]]"}, {"programs_str": ["def set_left_most_unset_bit(n: int) -> int:\n    left_most_unset = 0\n    for i in range(31, -1, -1):\n        if n & 1 << i == 0:\n            left_most_unset = i\n            break\n    return n | 1 << left_most_unset"], "outputs": "[[2147483648], [2147483649], [2147483650], [2147483658], [2147483663], [2147483679], [2147483664], [2147483903], [2147484671], [2147483776]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [2147483658], [14]]]"}, {"programs_str": ["def set_left_most_unset_bit(n: int) -> int:\n    leftmost_unset_bit_position = 0\n    bit_position = 0\n    while n > 0:\n        if n & 1 == 0:\n            leftmost_unset_bit_position = bit_position\n        n >>= 1\n        bit_position += 1\n    return 1 << leftmost_unset_bit_position | n << bit_position"], "outputs": "[[1], [1], [1], [4], [1], [1], [8], [1], [1], [64]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [4], [14]]]"}]}
{"task_id": "Mbpp/312", "requirement": "def volume_cone(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"", "llm_generated_inputs": "[[5, 12], [1, 1], [0, 10], [10, 0], [3.5, 7.2], [100, 300], [5.5, 9.9], [2.2, -5], [-3, 12], [-1, -1]]", "programs": ["import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h"], "clusters": [{"programs_str": ["import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h"], "outputs": "[[314.15926535897927], [1.0471975511965976], [0.0], [0.0], [92.36282401553991], [3141592.653589793], [313.6094866446011], [-25.342180738957666], [113.09733552923255], [-1.0471975511965976]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/388", "requirement": "def highest_Power_of_2(n: int) -> int:\n\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [15], [16], [20], [31], [32], [63], [64], [100], [1023], [1024]]", "programs": ["def highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"], "clusters": [{"programs_str": ["def highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"], "outputs": "[[0], [1], [2], [2], [4], [4], [4], [4], [8], [8], [8], [8], [16], [16], [16], [32], [32], [64], [64], [512], [1024]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/389", "requirement": "def find_lucas(n: int) -> int:\n\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [15], [20], [-1]]", "programs": ["def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n < 0:\n        raise ValueError('n must be a non-negative integer')\n    elif n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b"], "clusters": [{"programs_str": ["def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b"], "outputs": "[[2], [1], [3], [4], [7], [11], [18], [29], [47], [76], [123], [1364], [15127], [1]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def find_lucas(n: int) -> int:\n    if n < 0:\n        raise ValueError('n must be a non-negative integer')\n    elif n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b"], "outputs": "[[2], [1], [3], [4], [7], [11], [18], [29], [47], [76], [123], [1364], [15127], ['ValueError']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/390", "requirement": "from typing import List\n\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 4], 'temp{0}'], [[], 'item{0}'], [['apple', 'banana', 'cherry'], 'fruit_{0}'], [[0, 0, 0], 'number{0}'], [[-1, 0, 1], 'value{0}'], [[100, 200], 'code_{0}'], [['a', 'b', 'c'], 'letter_{0}'], [[True, False], 'bool_{0}']]", "programs": ["from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(x) for x in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(element) for element in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(x) for x in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(x) for x in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]"], "clusters": [{"programs_str": ["from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(x) for x in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(element) for element in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(x) for x in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(x) for x in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]"], "outputs": "[[['temp1', 'temp2', 'temp3', 'temp4']], [[]], [['fruit_apple', 'fruit_banana', 'fruit_cherry']], [['number0', 'number0', 'number0']], [['value-1', 'value0', 'value1']], [['code_100', 'code_200']], [['letter_a', 'letter_b', 'letter_c']], [['bool_True', 'bool_False']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/391", "requirement": "from typing import List\nfrom typing import Dict\n\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"", "llm_generated_inputs": "[[['S001', 'S002', 'S003', 'S004'], ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92]], [['S005', 'S006'], ['Alice Smith', 'Bob Johnson'], [75, 88]], [[], [], []], [['S007'], ['Charlie Brown'], [90]], [['S001', 'S002', 'S003'], ['Ann Lee', 'Ben Kim'], [80, 85]], [['S008', 'S009', 'S010', 'S011'], ['Zara White', 'Xander Blue', 'Yasmine Green', 'Winston Gray'], [100, 95, 90, 85]], [['S012', 'S013', 'S014'], ['Max Payne', 'John Doe', 'Jane Doe'], [70, 60, 80]]]", "programs": ["from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for item1, item2, item3 in zip(list1, list2, list3):\n        result.append({item1: {item2: item3}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for id, name, score in zip(list1, list2, list3):\n        result.append({id: {name: score}})\n    return result"], "clusters": [{"programs_str": ["from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result"], "outputs": "[[[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]], [[{'S005': {'Alice Smith': 75}}, {'S006': {'Bob Johnson': 88}}]], [[]], [[{'S007': {'Charlie Brown': 90}}]], ['IndexError'], [[{'S008': {'Zara White': 100}}, {'S009': {'Xander Blue': 95}}, {'S010': {'Yasmine Green': 90}}, {'S011': {'Winston Gray': 85}}]], [[{'S012': {'Max Payne': 70}}, {'S013': {'John Doe': 60}}, {'S014': {'Jane Doe': 80}}]]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for item1, item2, item3 in zip(list1, list2, list3):\n        result.append({item1: {item2: item3}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for id, name, score in zip(list1, list2, list3):\n        result.append({id: {name: score}})\n    return result"], "outputs": "[[[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]], [[{'S005': {'Alice Smith': 75}}, {'S006': {'Bob Johnson': 88}}]], [[]], [[{'S007': {'Charlie Brown': 90}}]], [[{'S001': {'Ann Lee': 80}}, {'S002': {'Ben Kim': 85}}]], [[{'S008': {'Zara White': 100}}, {'S009': {'Xander Blue': 95}}, {'S010': {'Yasmine Green': 90}}, {'S011': {'Winston Gray': 85}}]], [[{'S012': {'Max Payne': 70}}, {'S013': {'John Doe': 60}}, {'S014': {'Jane Doe': 80}}]]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/392", "requirement": "def get_max_sum(n: int) -> int:\n\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [5], [8], [10], [15], [30], [60], [100]]", "programs": ["def get_max_sum(n: int) -> int:\n    if n < 1:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    else:\n        return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)"], "clusters": [{"programs_str": ["def get_max_sum(n: int) -> int:\n    if n < 1:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    else:\n        return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)"], "outputs": "[[0], [1], [2], [5], [9], [12], [18], [44], [106], [200]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/394", "requirement": "def check_distinct(test_tup: tuple) -> bool:\n\"\"\"\nWrite a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"", "llm_generated_inputs": "[[(1, 2, 3, 4, 5)], [(True, False, True)], [(1, 1, 1, 1)], [(5, 5, 6, 7, 8)], [(100, 200, 300, 400)], [('', 'a', 'b', '')], [((1, 2, 3), (4, 5, 6), (1, 2))], [(1.1, 2.2, 3.3, 1.1)], [((), (1, 2))]]", "programs": ["def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))"], "clusters": [{"programs_str": ["def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))"], "outputs": "[[True], [False], [False], [False], [True], [False], [True], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/395", "requirement": "def first_non_repeating_character(str1: str) -> Optional[str]:\n\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"", "llm_generated_inputs": "[['abcabc'], ['abacabad'], ['aabbcc'], ['a'], [''], ['abcd'], ['aabbc'], ['aabbccddeeffg'], ['!@#$%^&*()'], ['1234567123']]", "programs": ["from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    character_count = {}\n    for char in str1:\n        character_count[char] = character_count.get(char, 0) + 1\n    for char in str1:\n        if character_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"], "clusters": [{"programs_str": ["from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    character_count = {}\n    for char in str1:\n        character_count[char] = character_count.get(char, 0) + 1\n    for char in str1:\n        if character_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"], "outputs": "[[None], ['c'], [None], ['a'], [None], ['a'], ['c'], ['g'], ['!'], ['4']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/397", "requirement": "def median_numbers(a: int, b: int, c: int) -> int:\n\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"", "llm_generated_inputs": "[[10, 20, 30], [5, 15, 10], [-10, -20, -15], [0, 0, 0], [100, 50, 75], [30, 10, 20], [14, 14, 14], [1, 2, 3], [25, 25, 25]]", "programs": ["def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> float:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> float:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    nums = [a, b, c]\n    nums.sort()\n    return nums[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> float:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]"], "clusters": [{"programs_str": ["def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> float:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> float:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    nums = [a, b, c]\n    nums.sort()\n    return nums[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> float:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]"], "outputs": "[[20], [10], [-15], [0], [75], [20], [14], [2], [25]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/398", "requirement": "from typing import List\n\n\ndef sum_of_digits(nums: List[int]) -> int:\n\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"", "llm_generated_inputs": "[[[10, 2, 56]], [[0, 1, 2, 3]], [[99, 100, 101]], [[123456789]], [[-1, -2]], [[0]], [[10, 20, 30]], [[9, 18, 27]], [[5, 12, 45, 99]]]", "programs": ["from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    total_sum = 0\n    for num in nums:\n        total_sum += sum((int(digit) for digit in str(num)))\n    return total_sum", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    total_sum = 0\n    for num in nums:\n        total_sum += sum((int(digit) for digit in str(num)))\n    return total_sum", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    total_sum = 0\n    for num in nums:\n        total_sum += sum((int(digit) for digit in str(num)))\n    return total_sum", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    total = 0\n    for num in nums:\n        total += sum((int(digit) for digit in str(num)))\n    return total", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    total_sum = 0\n    for num in nums:\n        total_sum += sum((int(digit) for digit in str(num)))\n    return total_sum", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    total_sum = 0\n    for num in nums:\n        total_sum += sum((int(digit) for digit in str(num)))\n    return total_sum", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    total_sum = 0\n    for num in nums:\n        total_sum += sum((int(digit) for digit in str(num)))\n    return total_sum", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    total_sum = 0\n    for num in nums:\n        total_sum += sum((int(digit) for digit in str(num)))\n    return total_sum", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    total_sum = 0\n    for num in nums:\n        total_sum += sum((int(digit) for digit in str(num)))\n    return total_sum", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))"], "clusters": [{"programs_str": ["from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    total_sum = 0\n    for num in nums:\n        total_sum += sum((int(digit) for digit in str(num)))\n    return total_sum", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    total_sum = 0\n    for num in nums:\n        total_sum += sum((int(digit) for digit in str(num)))\n    return total_sum", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    total_sum = 0\n    for num in nums:\n        total_sum += sum((int(digit) for digit in str(num)))\n    return total_sum", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    total = 0\n    for num in nums:\n        total += sum((int(digit) for digit in str(num)))\n    return total", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    total_sum = 0\n    for num in nums:\n        total_sum += sum((int(digit) for digit in str(num)))\n    return total_sum", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    total_sum = 0\n    for num in nums:\n        total_sum += sum((int(digit) for digit in str(num)))\n    return total_sum", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    total_sum = 0\n    for num in nums:\n        total_sum += sum((int(digit) for digit in str(num)))\n    return total_sum", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    total_sum = 0\n    for num in nums:\n        total_sum += sum((int(digit) for digit in str(num)))\n    return total_sum", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    total_sum = 0\n    for num in nums:\n        total_sum += sum((int(digit) for digit in str(num)))\n    return total_sum", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))"], "outputs": "[[14], [6], [21], [45], ['ValueError'], [0], [6], [27], [35]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/404", "requirement": "def minimum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"", "llm_generated_inputs": "[[1, 2], [2, 1], [-1, -5], [0, 0], [-10, 10], [100, 100], [3, 3], [5, 0], [0, 5], [32, 32]]", "programs": ["def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b"], "clusters": [{"programs_str": ["def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b"], "outputs": "[[1], [1], [-5], [0], [-10], [100], [3], [0], [0], [32]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/405", "requirement": "def check_tuplex(tuplex: tuple, element: object) -> bool:\n\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"", "llm_generated_inputs": "[[('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 'r'], [(1, 2, 3, 4, 5), 3], [(True, False, None), True], [(10, 20, 30), 40]]", "programs": ["def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex"], "clusters": [{"programs_str": ["def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex"], "outputs": "[[True], [True], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/406", "requirement": "def find_Parity(x: int) -> bool:\n\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [3], [10], [15], [-1], [-2], [-3], [100], [999999999]]", "programs": ["def find_Parity(x: int) -> bool:\n    return x % 2 == 1", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 == 1", "def find_Parity(x: int) -> bool:\n    return x % 2 == 1", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0"], "clusters": [{"programs_str": ["def find_Parity(x: int) -> bool:\n    return x % 2 == 1", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 == 1", "def find_Parity(x: int) -> bool:\n    return x % 2 == 1", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0", "def find_Parity(x: int) -> bool:\n    return x % 2 != 0"], "outputs": "[[False], [True], [False], [True], [False], [True], [True], [False], [True], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/409", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"", "llm_generated_inputs": "[[[(2, 7), (2, 6), (1, 8), (4, 9)]], [[(5, 5), (10, 0), (3, 6)]], [[(1, 1), (2, 2), (3, 3), (4, 4)]], [[(0, 0), (0, 5), (5, 5)]], [[(10, -2), (1, -1), (3, -3)]], [[]], [[(1, -1), (-1, 1), (2, -2)]]]", "programs": ["from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((x * y for x, y in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((x * y for x, y in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))"], "clusters": [{"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((x * y for x, y in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((x * y for x, y in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List\nfrom typing import Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))"], "outputs": "[[8], [0], [1], [0], [-20], ['ValueError'], [-4]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/410", "requirement": "from typing import List\nfrom typing import Union\n\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"", "llm_generated_inputs": "[[[3, 1, 2, 4, 5]], [['Python', 3, 2, 4, 5, 'version']], [[10, 20, -5, 0, 3]], [['a', 'b', 1, 2, 3]], [['test', 'string', 0, -1, 3.5]], [[None, 1, 2, 3]], [[False, 1, 2, 3]], [[1.1, 2.2, 0.5, 'not a number']], [['z', 'y', 'x', 10, 5]]]", "programs": ["from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    min_value = float('inf')\n    for value in listval:\n        if isinstance(value, int) and value < min_value:\n            min_value = value\n    return min_value if min_value != float('inf') else None", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, any]]) -> int:\n    min_value = float('inf')\n    for item in listval:\n        if isinstance(item, int) and item < min_value:\n            min_value = item\n    return min_value if min_value != float('inf') else None", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    min_value = float('inf')\n    for item in listval:\n        if isinstance(item, int) and item < min_value:\n            min_value = item\n    return min_value if min_value != float('inf') else None", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    min_value = float('inf')\n    for item in listval:\n        if isinstance(item, int) and item < min_value:\n            min_value = item\n    return min_value if min_value != float('inf') else None", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, any]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    numeric_values = [val for val in listval if isinstance(val, int)]\n    if not numeric_values:\n        raise ValueError('No integers in the list')\n    return min(numeric_values)", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, any]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, any]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, any]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, float]]) -> int:\n    return min((x for x in listval if isinstance(x, (int, float))))"], "clusters": [{"programs_str": ["from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    min_value = float('inf')\n    for value in listval:\n        if isinstance(value, int) and value < min_value:\n            min_value = value\n    return min_value if min_value != float('inf') else None", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, any]]) -> int:\n    min_value = float('inf')\n    for item in listval:\n        if isinstance(item, int) and item < min_value:\n            min_value = item\n    return min_value if min_value != float('inf') else None", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    min_value = float('inf')\n    for item in listval:\n        if isinstance(item, int) and item < min_value:\n            min_value = item\n    return min_value if min_value != float('inf') else None", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    min_value = float('inf')\n    for item in listval:\n        if isinstance(item, int) and item < min_value:\n            min_value = item\n    return min_value if min_value != float('inf') else None"], "outputs": "[[1], [2], [-5], [1], [-1], [1], [False], [None], [5]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, any]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    numeric_values = [val for val in listval if isinstance(val, int)]\n    if not numeric_values:\n        raise ValueError('No integers in the list')\n    return min(numeric_values)", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, any]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, any]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, any]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union\n\ndef min_val(listval: List[Union[int, str]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))"], "outputs": "[[1], [2], [-5], [1], [-1], [1], [False], ['ValueError'], [5]]", "probability": 0.75, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Union\n\ndef min_val(listval: List[Union[int, float]]) -> int:\n    return min((x for x in listval if isinstance(x, (int, float))))"], "outputs": "[[1], [2], [-5], [1], [-1], [1], [False], [0.5], [5]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/412", "requirement": "from typing import List\n\n\ndef remove_odd(l: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3]], [[2, 4, 6]], [[1, 3, 5]], [[0, 2, 4, 6, 8]], [[1, 1, 2, 2, 3, 3]], [[]], [[7, 8, 9, 10, 11]], [[0, -1, -2, -3]], [[-5, -4, -3, -2]], [[2, 3, 4, 5, 6, 7, 8]]]", "programs": ["from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]"], "clusters": [{"programs_str": ["from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]"], "outputs": "[[[2]], [[2, 4, 6]], [[]], [[0, 2, 4, 6, 8]], [[2, 2]], [[]], [[8, 10]], [[0, -2]], [[-4, -2]], [[2, 4, 6, 8]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/413", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List\n\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"", "llm_generated_inputs": "[[[], 0]]", "programs": ["from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [item[n] for item in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [item[n] for item in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List\nfrom typing import Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List\nfrom typing import Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [item[n] for item in list1]", "from typing import List\nfrom typing import Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List\nfrom typing import Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [item[n] for item in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List\nfrom typing import Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List\nfrom typing import Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [item[n] for item in list1]", "from typing import List\nfrom typing import Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [item[n] for item in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [item[n] for item in list1]", "from typing import List\nfrom typing import Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [item[n] for item in list1]"], "clusters": [{"programs_str": ["from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [item[n] for item in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [item[n] for item in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List\nfrom typing import Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List\nfrom typing import Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [item[n] for item in list1]", "from typing import List\nfrom typing import Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List\nfrom typing import Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [item[n] for item in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List\nfrom typing import Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List\nfrom typing import Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [item[n] for item in list1]", "from typing import List\nfrom typing import Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [item[n] for item in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [item[n] for item in list1]", "from typing import List\nfrom typing import Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [item[n] for item in list1]"], "outputs": "[[[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/414", "requirement": "from typing import List\n\n\ndef overlapping(list1: List, list2: List) -> bool:\n\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3], [4, 5, 6]], [['a', 'b', 'c'], ['d', 'e', 'f']], [[1, 2, 3], [3, 4, 5]], [['apple', 'banana'], ['banana', 'cherry']], [[], [1, 2, 3]], [[None], [None]], [[1.1, 2.2], [2.2, 3.3]], [['hello'], ['world', 'hello']], [[1, 2, 3, 4], []], [[5], [5, 10]]]", "programs": ["from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list1 for item in list2))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list1 for item in list2))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list1 for item in list2))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list1 for item in list2))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))"], "clusters": [{"programs_str": ["from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list1 for item in list2))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list1 for item in list2))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list1 for item in list2))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list1 for item in list2))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))"], "outputs": "[[False], [False], [True], [True], [False], [True], [True], [True], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/415", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 4, 7, 0, 8, 4]], [[5, -10, -2, 1, 6]], [[-1, -2, -3, -4]], [[0, 0, 0, 0]], [[-1, 1, -2, 2, -3, 3]], [[10, 20, 30]], [[1]], [[3, 5, 7, 9, 11, 0]], [[100, 99]], [[-1, 2, 4, 6, 5]]]", "programs": ["from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    first, second = sorted(arr[:2])\n    for number in arr[2:]:\n        if number > first:\n            first, second = (number, first)\n        elif number > second:\n            second = number\n    return (second, first)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max2, max1)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max2, max1)", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max2, max1)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements')\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return (max2, max1)", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements')\n    first_max = second_max = float('-inf')\n    for number in arr:\n        if number > first_max:\n            second_max = first_max\n            first_max = number\n        elif number > second_max:\n            second_max = number\n    return (second_max, first_max)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max2, max1)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('At least two elements are required to find a product.')\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max2, max1)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements')\n    first, second = (float('-inf'), float('-inf'))\n    for number in arr:\n        if number > first:\n            second = first\n            first = number\n        elif number > second:\n            second = number\n    return (second, first)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    first, second = (float('-inf'), float('-inf'))\n    for number in arr:\n        if number > first:\n            second = first\n            first = number\n        elif number > second:\n            second = number\n    return (second, first)", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements')\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max2, max1)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements')\n    first = second = float('-inf')\n    for number in arr:\n        if number > first:\n            second = first\n            first = number\n        elif number > second:\n            second = number\n    return (second, first)", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements')\n    first = second = float('-inf')\n    for number in arr:\n        if number > first:\n            second = first\n            first = number\n        elif number > second:\n            second = number\n    return (second, first)", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements')\n    first, second = (float('-inf'), float('-inf'))\n    for num in arr:\n        if num > first:\n            second = first\n            first = num\n        elif num > second:\n            second = num\n    return (second, first)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    first, second = (float('-inf'), float('-inf'))\n    for number in arr:\n        if number > first:\n            second = first\n            first = number\n        elif number > second:\n            second = number\n    return (second, first)", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    max1, max2 = (float('-inf'), float('-inf'))\n    for number in arr:\n        if number > max1:\n            max2 = max1\n            max1 = number\n        elif number > max2:\n            max2 = number\n    return (max2, max1)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max2, max1)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements')\n    first = second = float('-inf')\n    for number in arr:\n        if number > first:\n            second = first\n            first = number\n        elif number > second:\n            second = number\n    return (second, first)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max2, max1)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two integers.')\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return (max1, max2)"], "clusters": [{"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    first, second = sorted(arr[:2])\n    for number in arr[2:]:\n        if number > first:\n            first, second = (number, first)\n        elif number > second:\n            second = number\n    return (second, first)"], "outputs": "[[(7, 8)], [(1, 6)], [(-1, -2)], [(0, 0)], [(2, 3)], [(10, 30)], ['ValueError'], [(9, 11)], [(100, 99)], [(5, 6)]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max2, max1)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max2, max1)", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max2, max1)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements')\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return (max2, max1)", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements')\n    first_max = second_max = float('-inf')\n    for number in arr:\n        if number > first_max:\n            second_max = first_max\n            first_max = number\n        elif number > second_max:\n            second_max = number\n    return (second_max, first_max)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max2, max1)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('At least two elements are required to find a product.')\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max2, max1)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements')\n    first, second = (float('-inf'), float('-inf'))\n    for number in arr:\n        if number > first:\n            second = first\n            first = number\n        elif number > second:\n            second = number\n    return (second, first)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    first, second = (float('-inf'), float('-inf'))\n    for number in arr:\n        if number > first:\n            second = first\n            first = number\n        elif number > second:\n            second = number\n    return (second, first)", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements')\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max2, max1)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements')\n    first = second = float('-inf')\n    for number in arr:\n        if number > first:\n            second = first\n            first = number\n        elif number > second:\n            second = number\n    return (second, first)", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements')\n    first = second = float('-inf')\n    for number in arr:\n        if number > first:\n            second = first\n            first = number\n        elif number > second:\n            second = number\n    return (second, first)", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements')\n    first, second = (float('-inf'), float('-inf'))\n    for num in arr:\n        if num > first:\n            second = first\n            first = num\n        elif num > second:\n            second = num\n    return (second, first)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    first, second = (float('-inf'), float('-inf'))\n    for number in arr:\n        if number > first:\n            second = first\n            first = number\n        elif number > second:\n            second = number\n    return (second, first)", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    max1, max2 = (float('-inf'), float('-inf'))\n    for number in arr:\n        if number > max1:\n            max2 = max1\n            max1 = number\n        elif number > max2:\n            max2 = number\n    return (max2, max1)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max2, max1)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements')\n    first = second = float('-inf')\n    for number in arr:\n        if number > first:\n            second = first\n            first = number\n        elif number > second:\n            second = number\n    return (second, first)", "from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max2, max1)"], "outputs": "[[(7, 8)], [(5, 6)], [(-2, -1)], [(0, 0)], [(2, 3)], [(20, 30)], ['ValueError'], [(9, 11)], [(99, 100)], [(5, 6)]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two integers.')\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return (max1, max2)"], "outputs": "[[(8, 7)], [(6, 5)], [(-1, -2)], [(0, 0)], [(3, 2)], [(30, 20)], ['ValueError'], [(11, 9)], [(100, 99)], [(6, 5)]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 2, 3, 4, 7, 0, 8, 4]], [(8, 7)], [(7, 8)]]]"}]}
{"task_id": "Mbpp/418", "requirement": "from typing import List\n\n\ndef Find_Max(lst: List[str]) -> str:\n\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"", "llm_generated_inputs": "[[[['A'], ['A', 'B'], ['A', 'B', 'C']]], [[['A', 'B', 'C', 'D'], ['E', 'F'], ['G'], ['H', 'I', 'J', 'K', 'L']]], [['singleElement']], [[[], ['empty'], ['much', 'longer', 'list', 'than', 'others']]], [[['short'], ['longestList', 'ofWords', 'here'], ['medium']]], [['a', 'ab', 'abc', 'abcd', 'abcde']]]", "programs": ["from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)"], "clusters": [{"programs_str": ["from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)"], "outputs": "[[['A', 'B', 'C']], [['H', 'I', 'J', 'K', 'L']], ['singleElement'], [['much', 'longer', 'list', 'than', 'others']], [['longestList', 'ofWords', 'here']], ['abcde']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/419", "requirement": "from typing import List\n\n\ndef round_and_sum(list1: List[float]) -> float:\n\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"", "llm_generated_inputs": "[[[22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]], [[0.0, 0.0, 0.0]], [[-1.1, -2.2, -3.3, -4.4]], [[1.5, 2.5, 3.5, 4.5, 5.5]], [[100.9, 200.1, 300.0]], [[-10.5, 10.5]], [[5.0, 5.1, 5.2, 5.9, 6.0]], [[1000.1, 999.9, 1000.0]], [[-100.0, -200.0, -300.0]]]", "programs": ["from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    total_sum = sum((round(num) for num in list1))\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    total = sum((round(num) for num in list1))\n    return total * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(list1)\n    return result", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_sum = sum((round(num) for num in list1))\n    return rounded_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    total_sum = sum((round(num) for num in list1))\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    total_sum = sum((round(num) for num in list1))\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    total_sum = sum((round(num) for num in list1))\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    total_sum = sum((round(num) for num in list1))\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_sum = sum((round(num) for num in list1))\n    total = rounded_sum * len(list1)\n    return total", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    total_sum = sum((round(num) for num in list1))\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    total_sum = sum((round(num) for num in list1))\n    return total_sum * len(list1)"], "clusters": [{"programs_str": ["from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    total_sum = sum((round(num) for num in list1))\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    total = sum((round(num) for num in list1))\n    return total * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(list1)\n    return result", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_sum = sum((round(num) for num in list1))\n    return rounded_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    total_sum = sum((round(num) for num in list1))\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    total_sum = sum((round(num) for num in list1))\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    total_sum = sum((round(num) for num in list1))\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    total_sum = sum((round(num) for num in list1))\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_sum = sum((round(num) for num in list1))\n    total = rounded_sum * len(list1)\n    return total", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    total_sum = sum((round(num) for num in list1))\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    total_sum = sum((round(num) for num in list1))\n    return total_sum * len(list1)"], "outputs": "[[243], [0], [-40], [90], [1803], [0], [135], [9000], [-1800]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/420", "requirement": "def cube_Sum(n: int) -> int:\n\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [5], [10], [100]]", "programs": ["def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    even_numbers = [2 * i for i in range(1, n + 1)]\n    cube_sum = sum((x ** 3 for x in even_numbers))\n    return cube_sum", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))"], "clusters": [{"programs_str": ["def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    even_numbers = [2 * i for i in range(1, n + 1)]\n    cube_sum = sum((x ** 3 for x in even_numbers))\n    return cube_sum", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))"], "outputs": "[[0], [8], [72], [1800], [24200], [204020000]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/421", "requirement": "def concatenate_tuple(test_tup: tuple) -> str:\n\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"", "llm_generated_inputs": "[[(('ID', 'is', 4, 'UTS'),)], [(('Hello', 'World'),)], [(('Python', 'is', 'fun'),)], [(('One', 'Two', 'Three', 'Four', 'Five'),)], [((),)], [(('SingleElement',),)], [(('Tuple', 'with', 'mixed', 'types', 1, 2.5),)]]", "programs": ["def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))"], "clusters": [{"programs_str": ["def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))"], "outputs": "[[\"('ID', 'is', 4, 'UTS')\"], [\"('Hello', 'World')\"], [\"('Python', 'is', 'fun')\"], [\"('One', 'Two', 'Three', 'Four', 'Five')\"], ['()'], [\"('SingleElement',)\"], [\"('Tuple', 'with', 'mixed', 'types', 1, 2.5)\"]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/422", "requirement": "def find_Average_Of_Cube(n: int) -> float:\n\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [10], [0], [100], [-5]]", "programs": ["def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    total_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    average = total_cubes / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    total_sum = sum((i ** 3 for i in range(1, n + 1)))\n    average = total_sum / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    total_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    average = total_cubes / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    total_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    average = total_cubes / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    total_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    average = total_cubes / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    total_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    average = total_cubes / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    total_sum = sum((i ** 3 for i in range(1, n + 1)))\n    average = total_sum / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    total = sum((i ** 3 for i in range(1, n + 1)))\n    average = total / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    total = sum((i ** 3 for i in range(1, n + 1)))\n    average = total / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    total_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    average = total_cubes / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    total_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    average = total_cubes / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    return (n * (n + 1) // 2) ** 2 / n if n > 0 else 0.0"], "clusters": [{"programs_str": ["def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    total_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    average = total_cubes / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    total_sum = sum((i ** 3 for i in range(1, n + 1)))\n    average = total_sum / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    total_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    average = total_cubes / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    total_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    average = total_cubes / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    total_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    average = total_cubes / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    total_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    average = total_cubes / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    total_sum = sum((i ** 3 for i in range(1, n + 1)))\n    average = total_sum / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    total = sum((i ** 3 for i in range(1, n + 1)))\n    average = total / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    total = sum((i ** 3 for i in range(1, n + 1)))\n    average = total / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    total_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    average = total_cubes / n\n    return average", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    total_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    average = total_cubes / n\n    return average"], "outputs": "[[1.0], [4.5], [12.0], [302.5], ['ZeroDivisionError'], [255025.0], [-0.0]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def find_Average_Of_Cube(n: int) -> float:\n    return (n * (n + 1) // 2) ** 2 / n if n > 0 else 0.0"], "outputs": "[[1.0], [4.5], [12.0], [302.5], [0.0], [255025.0], [0.0]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/424", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"", "llm_generated_inputs": "[[(('Mers', 'for', 'Vers'),)], [(('Hello', 'World', 'Python'),)], [(('Single',),)], [((),)], [(('A', 'B', 'C', 'D', 'E'),)], [(('apple', 'banana', 'cherry'),)]]", "programs": ["from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]"], "clusters": [{"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List\nfrom typing import Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]"], "outputs": "[[['Vers']], [['Python']], [['Single']], ['IndexError'], [['E']], [['cherry']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/425", "requirement": "from typing import List\n\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"", "llm_generated_inputs": "[[[[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1], [[[2, 4, 6], [7, 8], [9, 2, 10]], 2], [[], 1], [[[5], [5], [5]], 5], [[[1, 2], [3, 4], [5, 6]], 7], [[[1, 'a'], ['b', 1], [1, 1]], 1], [[[None], [None, None], []], None], [[[True, False], [False, True]], True], [[[1, 2, 3], [2, 3, 4]], 2], [[[100], [200], [300]], 400]]", "programs": ["from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((x in sublist for sublist in list1))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((x in sublist for sublist in list1))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((x in sublist for sublist in list1))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((x in sublist for sublist in list1))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))"], "clusters": [{"programs_str": ["from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((x in sublist for sublist in list1))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((x in sublist for sublist in list1))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((x in sublist for sublist in list1))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((x in sublist for sublist in list1))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))"], "outputs": "[[3], [2], [0], [3], [0], [3], [2], [2], [2], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/426", "requirement": "from typing import List\n\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[11, 23, 36, 48, 50]], [[2, 4, 6, 8, 10]], [[101, 103, 105, 107, 109]], [[-1, -2, -3, -4, -5]], [[-100, 0, 100]], [[-7, 1, 2, 3]], [[]], [[0]], [[5, 5, 5, 5]]]", "programs": ["from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]"], "clusters": [{"programs_str": ["from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]"], "outputs": "[[[1, 3, 5, 7, 9]], [[11, 23]], [[]], [[101, 103, 105, 107, 109]], [[-1, -3, -5]], [[]], [[-7, 1, 3]], [[]], [[]], [[5, 5, 5, 5]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/427", "requirement": "def change_date_format(dt: str) -> str:\n\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"", "llm_generated_inputs": "[['2026-01-02'], ['1999-12-31'], ['2000-02-29'], ['2023-07-04'], ['2022-11-15'], ['2021-01-01'], ['0001-01-01'], ['9999-12-31'], ['2023-02-28'], ['2023-03-31'], ['2023-04-30']]", "programs": ["def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'"], "clusters": [{"programs_str": ["def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'"], "outputs": "[['02-01-2026'], ['31-12-1999'], ['29-02-2000'], ['04-07-2023'], ['15-11-2022'], ['01-01-2021'], ['01-01-0001'], ['31-12-9999'], ['28-02-2023'], ['31-03-2023'], ['30-04-2023']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/428", "requirement": "from typing import List\n\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"", "llm_generated_inputs": "[[[12, 23, 4, 5, 3, 2, 12, 81, 56, 95]], [[3, 1, 2, 4, 5]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[10]], [[]], [[5, 3, 8, 6, 2, 7, 4, 1]], [[1, 1, 1, 1]], [[0, -1, -2, 2, 1]]]", "programs": ["from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"], "clusters": [{"programs_str": ["from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"], "outputs": "[[[2, 3, 4, 5, 12, 12, 23, 56, 81, 95]], [[1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5]], [[10]], [[]], [[1, 2, 3, 4, 5, 6, 7, 8]], [[1, 1, 1, 1]], [[-2, -1, 0, 1, 2]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/429", "requirement": "from typing import Tuple\n\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"", "llm_generated_inputs": "[[(10, 4, 6, 9), (5, 2, 3, 3)], [(1, 2, 3), (4, 5, 6)], [(0, 0, 0), (0, 0, 0)]]", "programs": ["from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((x & y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))"], "clusters": [{"programs_str": ["from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((x & y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))"], "outputs": "[[(0, 0, 2, 1)], [(0, 0, 2)], [(0, 0, 0)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/430", "requirement": "def parabola_directrix(a: int, b: int, c: int) -> int:\n\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"", "llm_generated_inputs": "[[1, 2, 3], [5, 3, 2], [0, 0, 0], [-1, -2, -3], [0, 2, 5], [100, 200, 300], [5, 0, 0], [-5, 3, 1], [10, 10, 10], [7, -3, 4]]", "programs": ["def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(4 * a / (1 + b))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 - 4 * a * c) / (4 * a)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 - 4 * a * c) / (4 * a)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 - 4 * a * c) / (4 * a)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 - 4 * a * c) / (4 * a)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 - 4 * a * c) / (4 * a)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 - 4 * a * c) / (4 * a)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 - 4 * a * c) / (4 * a)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 - 4 * a * c) / (4 * a)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a)) if a != 0 else float('inf')", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a)) - 1 / (4 * a)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a)) if a != 0 else None", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a)) if a != 0 else None"], "clusters": [{"programs_str": ["def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(4 * a / (1 + b))"], "outputs": "[[-1.3333333333333333], [-5.0], [-0.0], [-4.0], [-0.0], [-1.9900497512437811], [-20.0], [5.0], [-3.6363636363636362], [14.0]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[5, 3, 2], [-5.0], [-198]]]"}, {"programs_str": ["def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 - 4 * a * c) / (4 * a)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 - 4 * a * c) / (4 * a)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 - 4 * a * c) / (4 * a)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 - 4 * a * c) / (4 * a)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 - 4 * a * c) / (4 * a)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 - 4 * a * c) / (4 * a)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 - 4 * a * c) / (4 * a)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 - 4 * a * c) / (4 * a)"], "outputs": "[[2.0], [1.55], ['ZeroDivisionError'], [-2.0], ['ZeroDivisionError'], [200.0], [0.0], [1.45], [7.5], [3.6785714285714284]]", "probability": 0.75, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[5, 3, 2], [1.55], [-198]]]"}, {"programs_str": ["def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a)) if a != 0 else float('inf')"], "outputs": "[[2.0], [1.55], [inf], [-2.0], [inf], [200.0], [-0.0], [1.45], [7.5], [3.6785714285714284]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[5, 3, 2], [1.55], [-198]]]"}, {"programs_str": ["def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a)) - 1 / (4 * a)"], "outputs": "[[1.75], [1.5], ['ZeroDivisionError'], [-1.75], ['ZeroDivisionError'], [199.9975], [-0.05], [1.5], [7.475], [3.642857142857143]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[5, 3, 2], [1.5], [-198]]]"}, {"programs_str": ["def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a)) if a != 0 else None", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c) / (4 * a)) if a != 0 else None"], "outputs": "[[2.0], [1.55], [None], [-2.0], [None], [200.0], [-0.0], [1.45], [7.5], [3.6785714285714284]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[5, 3, 2], [1.55], [-198]]]"}]}
{"task_id": "Mbpp/432", "requirement": "def median_trapezium(base1: float, base2: float, height: float) -> float:\n\"\"\"\nWrite a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"", "llm_generated_inputs": "[[15, 25, 35], [10, 20, 30], [5, 15, 25], [0, 0, 10], [100, 200, 50], [50, 50, 50], [-5, 5, 10], [10.5, 20.5, 30.0]]", "programs": ["def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2"], "clusters": [{"programs_str": ["def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2"], "outputs": "[[20.0], [15.0], [10.0], [0.0], [150.0], [50.0], [0.0], [15.5]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/433", "requirement": "from typing import List\n\n\ndef check_greater(arr: List[int], number: int) -> bool:\n\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 4, 5], 4], [[1, 2, 3, 4, 5], 5], [[1, 2, 3, 4, 5], 6], [[], 4], [[0, -1, -2], -3], [[10, 20, 30], 15], [[5], 5], [[-5, -10, -15], -6], [[3, 3, 3], 3]]", "programs": ["from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > elem for elem in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > elem for elem in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > elem for elem in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))"], "clusters": [{"programs_str": ["from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > elem for elem in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > elem for elem in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > elem for elem in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))"], "outputs": "[[False], [False], [True], [True], [False], [False], [False], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/435", "requirement": "def last_Digit(n: int) -> int:\n\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"", "llm_generated_inputs": "[[0], [5], [123], [1000], [-456], [-7890], [999999999], [10]]", "programs": ["def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return n % 10", "def last_Digit(n: int) -> int:\n    return n % 10", "def last_Digit(n: int) -> int:\n    return n % 10", "def last_Digit(n: int) -> int:\n    return n % 10", "def last_Digit(n: int) -> int:\n    return n % 10", "def last_Digit(n: int) -> int:\n    return n % 10", "def last_Digit(n: int) -> int:\n    return n % 10"], "clusters": [{"programs_str": ["def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10"], "outputs": "[[0], [5], [3], [0], [6], [0], [9], [0]]", "probability": 0.65, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def last_Digit(n: int) -> int:\n    return n % 10", "def last_Digit(n: int) -> int:\n    return n % 10", "def last_Digit(n: int) -> int:\n    return n % 10", "def last_Digit(n: int) -> int:\n    return n % 10", "def last_Digit(n: int) -> int:\n    return n % 10", "def last_Digit(n: int) -> int:\n    return n % 10", "def last_Digit(n: int) -> int:\n    return n % 10"], "outputs": "[[0], [5], [3], [0], [4], [0], [9], [0]]", "probability": 0.35, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/436", "requirement": "from typing import List\n\n\ndef neg_nos(list1: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"", "llm_generated_inputs": "[[[-1, 4, 5, -6]], [[0, 2, 3, 1]], [[-10, -20, 30, 40]], [[-1, -2, -3, -4]], [[-5, -10, 0, 5]], [[-1, -1, -1, 1]], [[1, 2, 3]], [[-3, -2, -1, 0]], [[-100, 0, 100]], [[10, -5, -15, 20]]]", "programs": ["from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]"], "clusters": [{"programs_str": ["from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]"], "outputs": "[[[-1, -6]], [[]], [[-10, -20]], [[-1, -2, -3, -4]], [[-5, -10]], [[-1, -1, -1]], [[]], [[-3, -2, -1]], [[-100]], [[-5, -15]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/437", "requirement": "def remove_odd(s: str) -> str:\n\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"", "llm_generated_inputs": "[['abcdef'], ['123456'], [''], ['a'], ['abcdefg'], ['aabbccddeeff'], ['!@#$%^&*()'], ['xyzabc']]", "programs": ["def remove_odd(s: str) -> str:\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])", "def remove_odd(s: str) -> str:\n    return s[1::2]", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return s[1::2]", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return s[1::2]", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return s[1::2]"], "clusters": [{"programs_str": ["def remove_odd(s: str) -> str:\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])", "def remove_odd(s: str) -> str:\n    return s[1::2]", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return s[1::2]", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return s[1::2]", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return s[1::2]"], "outputs": "[['bdf'], ['246'], [''], [''], ['bdf'], ['abcdef'], ['@$^*)'], ['yac']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/439", "requirement": "from typing import List\n\n\ndef multiple_to_single(L: List[int]) -> int:\n\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"", "llm_generated_inputs": "[[[11, 33, 50]], [[1, 2, 3, 4]], [[100, 200, 300]], [[0, 1, 2]], [[5]], [[]], [[9, 8, 7, 6, 5]], [[123, 456]], [[999, 0, 1]], [[12, 34, 56, 78, 90]]]", "programs": ["from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))"], "clusters": [{"programs_str": ["from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))"], "outputs": "[[113350], [1234], [100200300], [12], [5], ['ValueError'], [98765], [123456], [99901], [1234567890]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/440", "requirement": "from typing import Tuple\n\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"", "llm_generated_inputs": "[['quickly, they ran towards the finish line.'], ['He spoke softly during the presentation.'], ['The cat quietly observed the bird.'], ['Annoyingly, the children kept asking questions.'], ['She sings beautifully.'], ['He was late, obviously.'], ['Incredibly, they finished the project early!'], ['Very swiftly, the message was delivered.'], ['They did it, however.'], ['No adverb here.'], ['']]", "programs": ["from typing import Tuple\nimport nltk\nfrom nltk import pos_tag, word_tokenize\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    nltk.download('punkt', quiet=True)\n    nltk.download('averaged_perceptron_tagger', quiet=True)\n    tokens = word_tokenize(text)\n    tagged = pos_tag(tokens)\n    for index, (word, tag) in enumerate(tagged):\n        if tag in ['RB', 'RBR', 'RBS']:\n            return (index, index + len(word), word)\n    return (-1, -1, '')", "from typing import Tuple\nimport nltk\nfrom nltk import pos_tag\nfrom nltk.tokenize import word_tokenize\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    words = word_tokenize(text)\n    tagged_words = pos_tag(words)\n    for index, (word, tag) in enumerate(tagged_words):\n        if tag in ['RB', 'RBR', 'RBS']:\n            return (index, index + len(word), word)\n    return (-1, -1, '')", "from typing import Tuple\nimport nltk\nfrom nltk import pos_tag\nfrom nltk.tokenize import word_tokenize\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    nltk.download('punkt', quiet=True)\n    nltk.download('averaged_perceptron_tagger', quiet=True)\n    words = word_tokenize(text)\n    tagged = pos_tag(words)\n    for index, (word, tag) in enumerate(tagged):\n        if tag in ('RB', 'RBR', 'RBS'):\n            start_pos = text.find(word)\n            end_pos = start_pos + len(word)\n            return (start_pos, end_pos, word)\n    return (-1, -1, '')", "from typing import Tuple\nimport nltk\nnltk.download('averaged_perceptron_tagger')\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    words = text.split()\n    tagged = nltk.pos_tag(words)\n    for index, (word, tag) in enumerate(tagged):\n        if tag in {'RB', 'RBR', 'RBS'}:\n            start = text.index(word)\n            return (start, start + len(word), word)\n    return (-1, -1, '')", "from typing import Tuple\nimport nltk\nnltk.download('averaged_perceptron_tagger')\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    words = text.split()\n    tagged = nltk.pos_tag(words)\n    for index, (word, tag) in enumerate(tagged):\n        if tag in ['RB', 'RBR', 'RBS']:\n            return (index, index + len(word), word)\n    return (-1, -1, '')", "from typing import Tuple\nimport nltk\nfrom nltk import pos_tag, word_tokenize\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    words = word_tokenize(text)\n    tagged = pos_tag(words)\n    for index, (word, tag) in enumerate(tagged):\n        if tag in ('RB', 'RBR', 'RBS'):\n            start = text.index(word)\n            end = start + len(word)\n            return (start, end, word)\n    return (-1, -1, '')", "from typing import Tuple\nimport nltk\nfrom nltk import pos_tag, word_tokenize\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    tokens = word_tokenize(text)\n    tagged = pos_tag(tokens)\n    for index, (word, tag) in enumerate(tagged):\n        if tag in ('RB', 'RBR', 'RBS'):\n            start_pos = text.index(word)\n            end_pos = start_pos + len(word)\n            return (start_pos, end_pos, word)\n    return (-1, -1, '')", "from typing import Tuple\nimport nltk\nnltk.download('averaged_perceptron_tagger')\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    words = text.split()\n    tagged_words = nltk.pos_tag(words)\n    for index, (word, tag) in enumerate(tagged_words):\n        if tag in ['RB', 'RBR', 'RBS']:\n            start_pos = text.find(word)\n            end_pos = start_pos + len(word)\n            return (start_pos, end_pos, word)\n    return (-1, -1, '')", "from typing import Tuple\nimport nltk\nfrom nltk import pos_tag, word_tokenize\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    nltk.download('punkt', quiet=True)\n    nltk.download('averaged_perceptron_tagger', quiet=True)\n    tokens = word_tokenize(text)\n    tagged = pos_tag(tokens)\n    for i, (word, tag) in enumerate(tagged):\n        if tag in ['RB', 'RBR', 'RBS']:\n            start_index = text.index(word)\n            end_index = start_index + len(word)\n            return (start_index, end_index, word)\n    return (-1, -1, '')", "from typing import Tuple\nimport nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk import pos_tag\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    nltk.download('punkt', quiet=True)\n    nltk.download('averaged_perceptron_tagger', quiet=True)\n    words = word_tokenize(text)\n    tagged = pos_tag(words)\n    for index, (word, tag) in enumerate(tagged):\n        if tag in ['RB', 'RBR', 'RBS']:\n            start = text.index(word)\n            end = start + len(word)\n            return (start, end, word)\n    return (-1, -1, '')", "from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverbs = re.findall('\\\\b\\\\w+ly\\\\b', text)\n    if adverbs:\n        adverb = adverbs[0]\n        start_index = text.index(adverb)\n        return (start_index, start_index + len(adverb), adverb)\n    return (-1, -1, '')", "from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverb_pattern = '\\\\b\\\\w+ly\\\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        return (start, end, adverb)\n    return (-1, -1, '')", "from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverb_pattern = '\\\\b\\\\w+ly\\\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        return (start, end, adverb)\n    return (-1, -1, '')", "from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverb_pattern = '\\\\b\\\\w+ly\\\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        return (start, end, adverb)\n    return (-1, -1, '')", "from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverb_pattern = '\\\\b\\\\w*ly\\\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        adverb = match.group()\n        return (start_index, end_index, adverb)\n    return (-1, -1, '')", "from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverb_pattern = '\\\\b\\\\w+ly\\\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group(0)\n        return (start, end, adverb)\n    return (-1, -1, '')", "from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverb_pattern = '\\\\b\\\\w+ly\\\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        return (start, end, adverb)\n    return (-1, -1, '')", "from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverb_pattern = '\\\\b\\\\w+ly\\\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        return (start_index, end_index, match.group())\n    return (-1, -1, '')", "from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverb_pattern = '\\\\b\\\\w+ly\\\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        start, end = match.span()\n        return (start, end, match.group())\n    return (-1, -1, '')", "from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverbs = {'clearly', 'quickly', 'silently', 'happily'}\n    words = re.findall('\\\\w+', text)\n    for word in words:\n        if word in adverbs:\n            start = text.index(word)\n            end = start + len(word)\n            return (start, end, word)\n    return (-1, -1, '')"], "clusters": [{"programs_str": ["from typing import Tuple\nimport nltk\nfrom nltk import pos_tag, word_tokenize\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    nltk.download('punkt', quiet=True)\n    nltk.download('averaged_perceptron_tagger', quiet=True)\n    tokens = word_tokenize(text)\n    tagged = pos_tag(tokens)\n    for index, (word, tag) in enumerate(tagged):\n        if tag in ['RB', 'RBR', 'RBS']:\n            return (index, index + len(word), word)\n    return (-1, -1, '')", "from typing import Tuple\nimport nltk\nfrom nltk import pos_tag\nfrom nltk.tokenize import word_tokenize\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    words = word_tokenize(text)\n    tagged_words = pos_tag(words)\n    for index, (word, tag) in enumerate(tagged_words):\n        if tag in ['RB', 'RBR', 'RBS']:\n            return (index, index + len(word), word)\n    return (-1, -1, '')", "from typing import Tuple\nimport nltk\nfrom nltk import pos_tag\nfrom nltk.tokenize import word_tokenize\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    nltk.download('punkt', quiet=True)\n    nltk.download('averaged_perceptron_tagger', quiet=True)\n    words = word_tokenize(text)\n    tagged = pos_tag(words)\n    for index, (word, tag) in enumerate(tagged):\n        if tag in ('RB', 'RBR', 'RBS'):\n            start_pos = text.find(word)\n            end_pos = start_pos + len(word)\n            return (start_pos, end_pos, word)\n    return (-1, -1, '')", "from typing import Tuple\nimport nltk\nnltk.download('averaged_perceptron_tagger')\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    words = text.split()\n    tagged = nltk.pos_tag(words)\n    for index, (word, tag) in enumerate(tagged):\n        if tag in {'RB', 'RBR', 'RBS'}:\n            start = text.index(word)\n            return (start, start + len(word), word)\n    return (-1, -1, '')", "from typing import Tuple\nimport nltk\nnltk.download('averaged_perceptron_tagger')\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    words = text.split()\n    tagged = nltk.pos_tag(words)\n    for index, (word, tag) in enumerate(tagged):\n        if tag in ['RB', 'RBR', 'RBS']:\n            return (index, index + len(word), word)\n    return (-1, -1, '')", "from typing import Tuple\nimport nltk\nfrom nltk import pos_tag, word_tokenize\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    words = word_tokenize(text)\n    tagged = pos_tag(words)\n    for index, (word, tag) in enumerate(tagged):\n        if tag in ('RB', 'RBR', 'RBS'):\n            start = text.index(word)\n            end = start + len(word)\n            return (start, end, word)\n    return (-1, -1, '')", "from typing import Tuple\nimport nltk\nfrom nltk import pos_tag, word_tokenize\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    tokens = word_tokenize(text)\n    tagged = pos_tag(tokens)\n    for index, (word, tag) in enumerate(tagged):\n        if tag in ('RB', 'RBR', 'RBS'):\n            start_pos = text.index(word)\n            end_pos = start_pos + len(word)\n            return (start_pos, end_pos, word)\n    return (-1, -1, '')", "from typing import Tuple\nimport nltk\nnltk.download('averaged_perceptron_tagger')\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    words = text.split()\n    tagged_words = nltk.pos_tag(words)\n    for index, (word, tag) in enumerate(tagged_words):\n        if tag in ['RB', 'RBR', 'RBS']:\n            start_pos = text.find(word)\n            end_pos = start_pos + len(word)\n            return (start_pos, end_pos, word)\n    return (-1, -1, '')", "from typing import Tuple\nimport nltk\nfrom nltk import pos_tag, word_tokenize\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    nltk.download('punkt', quiet=True)\n    nltk.download('averaged_perceptron_tagger', quiet=True)\n    tokens = word_tokenize(text)\n    tagged = pos_tag(tokens)\n    for i, (word, tag) in enumerate(tagged):\n        if tag in ['RB', 'RBR', 'RBS']:\n            start_index = text.index(word)\n            end_index = start_index + len(word)\n            return (start_index, end_index, word)\n    return (-1, -1, '')", "from typing import Tuple\nimport nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk import pos_tag\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    nltk.download('punkt', quiet=True)\n    nltk.download('averaged_perceptron_tagger', quiet=True)\n    words = word_tokenize(text)\n    tagged = pos_tag(words)\n    for index, (word, tag) in enumerate(tagged):\n        if tag in ['RB', 'RBR', 'RBS']:\n            start = text.index(word)\n            end = start + len(word)\n            return (start, end, word)\n    return (-1, -1, '')"], "outputs": "[['AttributeError'], ['AttributeError'], ['AttributeError'], ['AttributeError'], ['AttributeError'], ['AttributeError'], ['AttributeError'], ['AttributeError'], ['AttributeError'], ['AttributeError'], ['AttributeError']]", "probability": 0.5, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['clearly!! we can see the sky'], ['AttributeError'], [(0, 7, 'clearly')]]]"}, {"programs_str": ["from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverbs = re.findall('\\\\b\\\\w+ly\\\\b', text)\n    if adverbs:\n        adverb = adverbs[0]\n        start_index = text.index(adverb)\n        return (start_index, start_index + len(adverb), adverb)\n    return (-1, -1, '')", "from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverb_pattern = '\\\\b\\\\w+ly\\\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        return (start, end, adverb)\n    return (-1, -1, '')", "from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverb_pattern = '\\\\b\\\\w+ly\\\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        return (start, end, adverb)\n    return (-1, -1, '')", "from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverb_pattern = '\\\\b\\\\w+ly\\\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        return (start, end, adverb)\n    return (-1, -1, '')", "from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverb_pattern = '\\\\b\\\\w*ly\\\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        adverb = match.group()\n        return (start_index, end_index, adverb)\n    return (-1, -1, '')", "from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverb_pattern = '\\\\b\\\\w+ly\\\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group(0)\n        return (start, end, adverb)\n    return (-1, -1, '')", "from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverb_pattern = '\\\\b\\\\w+ly\\\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        return (start, end, adverb)\n    return (-1, -1, '')", "from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverb_pattern = '\\\\b\\\\w+ly\\\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        return (start_index, end_index, match.group())\n    return (-1, -1, '')", "from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverb_pattern = '\\\\b\\\\w+ly\\\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        start, end = match.span()\n        return (start, end, match.group())\n    return (-1, -1, '')"], "outputs": "[[(0, 7, 'quickly')], [(9, 15, 'softly')], [(8, 15, 'quietly')], [(0, 10, 'Annoyingly')], [(10, 21, 'beautifully')], [(13, 22, 'obviously')], [(0, 10, 'Incredibly')], [(5, 12, 'swiftly')], [(-1, -1, '')], [(-1, -1, '')], [(-1, -1, '')]]", "probability": 0.45, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverbs = {'clearly', 'quickly', 'silently', 'happily'}\n    words = re.findall('\\\\w+', text)\n    for word in words:\n        if word in adverbs:\n            start = text.index(word)\n            end = start + len(word)\n            return (start, end, word)\n    return (-1, -1, '')"], "outputs": "[[(0, 7, 'quickly')], [(-1, -1, '')], [(-1, -1, '')], [(-1, -1, '')], [(-1, -1, '')], [(-1, -1, '')], [(-1, -1, '')], [(-1, -1, '')], [(-1, -1, '')], [(-1, -1, '')], [(-1, -1, '')]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/441", "requirement": "def surfacearea_cube(l: int) -> int:\n\"\"\"\nWrite a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150\n\"\"\"", "llm_generated_inputs": "[[1], [2], [5], [10], [0], [-5], [100], [999]]", "programs": ["def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2"], "clusters": [{"programs_str": ["def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2"], "outputs": "[[6], [24], [150], [600], [0], [150], [60000], [5988006]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/445", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"", "llm_generated_inputs": "[[[(1, 3), (4, 5), (2, 9), (1, 10)], [(6, 7), (3, 9), (1, 1), (7, 3)]], [[(0, 0), (0, 0)], [(1, 2), (3, 4)]], [[(1, 2), (3, 4)], [(0, 0), (5, 6)]], [[(1, 2)], [(3, 4)]], [[(2, 2), (3, 3), (4, 4)], [(1, 1), (2, 2), (3, 3)]], [[], []], [[(1,)], [(2,)]], [[(1, 2, 3)], [(4, 5, 6)]], [[(1, 0), (0, 1)], [(0, 1), (1, 0)]]]", "programs": ["from typing import List\nfrom typing import Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List\nfrom typing import Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List\nfrom typing import Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List\nfrom typing import Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List\nfrom typing import Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List\nfrom typing import Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    result = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        multiplied_tup = tuple((a * b for a, b in zip(tup1, tup2)))\n        result.append(multiplied_tup)\n    return tuple(result)", "from typing import List\nfrom typing import Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List\nfrom typing import Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))"], "clusters": [{"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List\nfrom typing import Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List\nfrom typing import Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List\nfrom typing import Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List\nfrom typing import Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List\nfrom typing import Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    result = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        multiplied_tup = tuple((a * b for a, b in zip(tup1, tup2)))\n        result.append(multiplied_tup)\n    return tuple(result)", "from typing import List\nfrom typing import Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List\nfrom typing import Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))"], "outputs": "[[((6, 21), (12, 45), (2, 9), (7, 30))], [((0, 0), (0, 0))], [((0, 0), (15, 24))], [((3, 8),)], [((2, 2), (6, 6), (12, 12))], [()], [((2,),)], [((4, 10, 18),)], [((0, 0), (0, 0))]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/446", "requirement": "def count_Occurrence(tup: tuple, lst: list) -> int:\n\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"", "llm_generated_inputs": "[[('a', 'a', 'c', 'b', 'd'), ['a', 'b']], [('x', 'y', 'z'), ['a', 'b']], [(), ['a', 'b']], [('a', 'b', 'c'), []], [(), []], [(1, 2, 2, 3, 4), [2, 3]], [('a', 'b', 'a', 'c'), ['a', 'a']], [(None, 'a', None), [None, 'a']], [('1', 1, 1, '1'), [1, '1']]]", "programs": ["def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(element) for element in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(element) for element in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(element) for element in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(x) for x in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))"], "clusters": [{"programs_str": ["def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(element) for element in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(element) for element in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(element) for element in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(x) for x in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))"], "outputs": "[[3], [0], [0], [0], [0], [3], [4], [3], [4]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/447", "requirement": "from typing import List\n\n\ndef cube_nums(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3]], [[0]], [[-1, -2, -3]], [[2, 3, 4]], [[10, 11, 12]], [[100]], [[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]], [[]], [[1, 2, -3, 0]], [[2.5, 3.5]]]", "programs": ["from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [num ** 3 for num in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]"], "clusters": [{"programs_str": ["from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [num ** 3 for num in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]"], "outputs": "[[[1, 8, 27]], [[0]], [[-1, -8, -27]], [[8, 27, 64]], [[1000, 1331, 1728]], [[1000000]], [[-125, -64, -27, -8, -1, 0, 1, 8, 27, 64, 125]], [[]], [[1, 8, -27, 0]], [[15.625, 42.875]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/448", "requirement": "def cal_sum(n: int) -> int:\n\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [3], [4], [5], [8], [9], [10], [15], [20], [30], [-1], [-5]]", "programs": ["def cal_sum(n: int) -> int:\n\n    def perrin(n):\n        if n == 0:\n            return 3\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        else:\n            return perrin(n - 2) + perrin(n - 1)\n    return sum((perrin(i) for i in range(n + 1)))", "def cal_sum(n: int) -> int:\n\n    def perrin(n):\n        if n == 0:\n            return 3\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        else:\n            return perrin(n - 2) + perrin(n - 1)\n    total = 0\n    for i in range(n + 1):\n        total += perrin(i)\n    return total", "def cal_sum(n: int) -> int:\n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 1])\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n\n    def perrin(n):\n        if n == 0:\n            return 3\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        else:\n            return perrin(n - 2) + perrin(n - 1)\n    total_sum = sum((perrin(i) for i in range(n + 1)))\n    return total_sum", "def cal_sum(n: int) -> int:\n    perrin = [3, 0, 2]\n    while len(perrin) < n:\n        perrin.append(perrin[-2] + perrin[-3])\n    return sum(perrin[:n])", "def cal_sum(n: int) -> int:\n    perrin_numbers = [3, 0, 2]\n    while len(perrin_numbers) < n:\n        next_number = perrin_numbers[-2] + perrin_numbers[-3]\n        perrin_numbers.append(next_number)\n    return sum(perrin_numbers[:n])", "def cal_sum(n: int) -> int:\n    perrin_numbers = [3, 0, 2]\n    while len(perrin_numbers) < n:\n        next_value = perrin_numbers[-2] + perrin_numbers[-3]\n        perrin_numbers.append(next_value)\n    return sum(perrin_numbers[:n])", "def cal_sum(n: int) -> int:\n    perrin = [3, 0, 2]\n    while len(perrin) < n:\n        next_perrin = perrin[-2] + perrin[-3]\n        perrin.append(next_perrin)\n    return sum(perrin[:n])", "def cal_sum(n: int) -> int:\n    perrin = [3, 0, 2]\n    for i in range(3, n):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n])", "def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    while len(perrin) <= n:\n        perrin.append(perrin[-2] + perrin[-3])\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n\n    def perrin(num):\n        if num == 0:\n            return 3\n        elif num == 1:\n            return 0\n        elif num == 2:\n            return 2\n        else:\n            return perrin(num - 2) + perrin(num - 1)\n    total = 0\n    for i in range(n):\n        total += perrin(i)\n    return total", "def cal_sum(n: int) -> int:\n\n    def perrin_number(m: int) -> int:\n        if m == 0:\n            return 3\n        elif m == 1:\n            return 0\n        elif m == 2:\n            return 2\n        else:\n            return perrin_number(m - 2) + perrin_number(m - 1)\n    return sum((perrin_number(i) for i in range(n)))", "def cal_sum(n: int) -> int:\n    perrin = [3, 0, 2]\n    total_sum = 0\n    if n < 1:\n        return 0\n    for i in range(n):\n        if i < 3:\n            total_sum += perrin[i]\n        else:\n            next_perrin = perrin[i - 2] + perrin[i - 3]\n            perrin.append(next_perrin)\n            total_sum += next_perrin\n    return total_sum", "def cal_sum(n: int) -> int:\n    perrin = [3, 0, 2]\n    if n < 3:\n        return perrin[n]\n    for i in range(3, n + 1):\n        next_term = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_term)\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n    perrin = [3, 0, 2]\n    if n < 3:\n        return perrin[n]\n    for i in range(3, n + 1):\n        next_perrin = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_perrin)\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n    perrin = [3, 0, 2]\n    if n < 3:\n        return perrin[n]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    perrin = [3, 0, 2]\n    sum_perrin = 5\n    for i in range(3, n + 1):\n        next_perrin = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_perrin)\n        sum_perrin += next_perrin\n    return sum_perrin", "def cal_sum(n: int) -> int:\n    perrin_numbers = [0, 1, 2]\n    for i in range(3, n):\n        next_perrin = perrin_numbers[i - 2] + perrin_numbers[i - 3]\n        perrin_numbers.append(next_perrin)\n    return sum(perrin_numbers[:n])", "def cal_sum(n: int) -> int:\n    perrin = [3, 0, 2]\n    for i in range(3, n):\n        next_perrin = perrin[i - 2] + perrin[i - 1]\n        perrin.append(next_perrin)\n    return sum(perrin[:n])"], "clusters": [{"programs_str": ["def cal_sum(n: int) -> int:\n\n    def perrin(n):\n        if n == 0:\n            return 3\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        else:\n            return perrin(n - 2) + perrin(n - 1)\n    return sum((perrin(i) for i in range(n + 1)))", "def cal_sum(n: int) -> int:\n\n    def perrin(n):\n        if n == 0:\n            return 3\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        else:\n            return perrin(n - 2) + perrin(n - 1)\n    total = 0\n    for i in range(n + 1):\n        total += perrin(i)\n    return total", "def cal_sum(n: int) -> int:\n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 1])\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n\n    def perrin(n):\n        if n == 0:\n            return 3\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        else:\n            return perrin(n - 2) + perrin(n - 1)\n    total_sum = sum((perrin(i) for i in range(n + 1)))\n    return total_sum"], "outputs": "[[3], [3], [5], [7], [11], [17], [69], [111], [179], [1975], [21893], [2692539], [0], [0]]", "probability": 0.2, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[9], [111], [49]]]"}, {"programs_str": ["def cal_sum(n: int) -> int:\n    perrin = [3, 0, 2]\n    while len(perrin) < n:\n        perrin.append(perrin[-2] + perrin[-3])\n    return sum(perrin[:n])", "def cal_sum(n: int) -> int:\n    perrin_numbers = [3, 0, 2]\n    while len(perrin_numbers) < n:\n        next_number = perrin_numbers[-2] + perrin_numbers[-3]\n        perrin_numbers.append(next_number)\n    return sum(perrin_numbers[:n])", "def cal_sum(n: int) -> int:\n    perrin_numbers = [3, 0, 2]\n    while len(perrin_numbers) < n:\n        next_value = perrin_numbers[-2] + perrin_numbers[-3]\n        perrin_numbers.append(next_value)\n    return sum(perrin_numbers[:n])", "def cal_sum(n: int) -> int:\n    perrin = [3, 0, 2]\n    while len(perrin) < n:\n        next_perrin = perrin[-2] + perrin[-3]\n        perrin.append(next_perrin)\n    return sum(perrin[:n])", "def cal_sum(n: int) -> int:\n    perrin = [3, 0, 2]\n    for i in range(3, n):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n])"], "outputs": "[[0], [3], [3], [5], [8], [10], [27], [37], [49], [207], [851], [14195], [3], [0]]", "probability": 0.25, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[9], [37], [49]]]"}, {"programs_str": ["def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    while len(perrin) <= n:\n        perrin.append(perrin[-2] + perrin[-3])\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])"], "outputs": "[[3], [3], [5], [8], [10], [15], [37], [49], [66], [275], [1128], [18805], [0], [0]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def cal_sum(n: int) -> int:\n\n    def perrin(num):\n        if num == 0:\n            return 3\n        elif num == 1:\n            return 0\n        elif num == 2:\n            return 2\n        else:\n            return perrin(num - 2) + perrin(num - 1)\n    total = 0\n    for i in range(n):\n        total += perrin(i)\n    return total", "def cal_sum(n: int) -> int:\n\n    def perrin_number(m: int) -> int:\n        if m == 0:\n            return 3\n        elif m == 1:\n            return 0\n        elif m == 2:\n            return 2\n        else:\n            return perrin_number(m - 2) + perrin_number(m - 1)\n    return sum((perrin_number(i) for i in range(n)))"], "outputs": "[[0], [3], [3], [5], [7], [11], [43], [69], [111], [1221], [13531], [1664081], [0], [0]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[9], [69], [49]]]"}, {"programs_str": ["def cal_sum(n: int) -> int:\n    perrin = [3, 0, 2]\n    total_sum = 0\n    if n < 1:\n        return 0\n    for i in range(n):\n        if i < 3:\n            total_sum += perrin[i]\n        else:\n            next_perrin = perrin[i - 2] + perrin[i - 3]\n            perrin.append(next_perrin)\n            total_sum += next_perrin\n    return total_sum"], "outputs": "[[0], [3], [3], [5], [8], [10], [27], [37], [49], [207], [851], [14195], [0], [0]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[9], [37], [49]]]"}, {"programs_str": ["def cal_sum(n: int) -> int:\n    perrin = [3, 0, 2]\n    if n < 3:\n        return perrin[n]\n    for i in range(3, n + 1):\n        next_term = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_term)\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n    perrin = [3, 0, 2]\n    if n < 3:\n        return perrin[n]\n    for i in range(3, n + 1):\n        next_perrin = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_perrin)\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n    perrin = [3, 0, 2]\n    if n < 3:\n        return perrin[n]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])"], "outputs": "[[3], [0], [2], [8], [10], [15], [37], [49], [66], [275], [1128], [18805], [2], ['IndexError']]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def cal_sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    perrin = [3, 0, 2]\n    sum_perrin = 5\n    for i in range(3, n + 1):\n        next_perrin = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_perrin)\n        sum_perrin += next_perrin\n    return sum_perrin"], "outputs": "[[0], [5], [5], [8], [10], [15], [37], [49], [66], [275], [1128], [18805], [0], [0]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def cal_sum(n: int) -> int:\n    perrin_numbers = [0, 1, 2]\n    for i in range(3, n):\n        next_perrin = perrin_numbers[i - 2] + perrin_numbers[i - 3]\n        perrin_numbers.append(next_perrin)\n    return sum(perrin_numbers[:n])"], "outputs": "[[0], [0], [1], [3], [4], [7], [20], [27], [37], [160], [662], [11065], [1], [0]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[9], [27], [49]]]"}, {"programs_str": ["def cal_sum(n: int) -> int:\n    perrin = [3, 0, 2]\n    for i in range(3, n):\n        next_perrin = perrin[i - 2] + perrin[i - 1]\n        perrin.append(next_perrin)\n    return sum(perrin[:n])"], "outputs": "[[0], [3], [3], [5], [7], [11], [43], [69], [111], [1221], [13531], [1664081], [3], [0]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[9], [69], [49]]]"}]}
{"task_id": "Mbpp/450", "requirement": "from typing import List\n\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"", "llm_generated_inputs": "[[['Python', 'list', 'exercises', 'practice', 'solution'], 8], [['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef'], 3], [['example', 'test', 'code', 'python', 'function'], 4], [[], 5], [['one', 'two', 'three', 'four', 'five'], 4], [['short', 'tiny', 'biggest', 'largest', 'small'], 6], [['single'], 6], [['longstring', 'verylongstring', 'short'], 10]]", "programs": ["from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]"], "clusters": [{"programs_str": ["from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]"], "outputs": "[[['exercises', 'practice', 'solution']], [['abc', 'abcd', 'abcde', 'abcdef']], [['example', 'test', 'code', 'python', 'function']], [[]], [['three', 'four', 'five']], [['biggest', 'largest']], [['single']], [['longstring', 'verylongstring']]]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[['Python', 'list', 'exercises', 'practice', 'solution'], 8], [['exercises', 'practice', 'solution']], [['practice', 'solution']]]]"}]}
{"task_id": "Mbpp/451", "requirement": "def remove_whitespaces(text1: str) -> str:\n\"\"\"\nWrite a function to remove all whitespaces from the given string.\n\n\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"", "llm_generated_inputs": "[[' Hello World '], ['   Leading and trailing spaces   '], ['NoSpacesHere'], ['   Multiple   spaces   in between   '], [''], ['          '], ['A b c d e f g']]", "programs": ["def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return text1.replace(' ', '')", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())"], "clusters": [{"programs_str": ["def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return text1.replace(' ', '')", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())"], "outputs": "[['HelloWorld'], ['Leadingandtrailingspaces'], ['NoSpacesHere'], ['Multiplespacesinbetween'], [''], [''], ['Abcdefg']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/453", "requirement": "def sumofFactors(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"", "llm_generated_inputs": "[[18], [12], [30], [1], [0], [7], [100], [36]]", "programs": ["def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    even_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            even_sum += i\n    return even_sum", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    sum_even_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    even_factors_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors_sum += i\n    return even_factors_sum", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))"], "clusters": [{"programs_str": ["def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    even_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            even_sum += i\n    return even_sum", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    sum_even_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    even_factors_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors_sum += i\n    return even_factors_sum", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0))"], "outputs": "[[26], [24], [48], [0], [0], [0], [186], [78]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/454", "requirement": "def text_match_wordz(text: str) -> bool:\n\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"", "llm_generated_inputs": "[['pythonz.'], ['zebra'], ['hello'], ['xyz'], ['noz'], ['pizza'], ['123z'], [''], ['no z here'], ['az'], ['wordz']]", "programs": ["def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    pattern = '\\\\b\\\\w*z\\\\w*\\\\b'\n    return bool(re.search(pattern, text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\bz\\\\w*', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\bz\\\\w*', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\bz\\\\w*', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\bz\\\\w*', text))"], "clusters": [{"programs_str": ["def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    pattern = '\\\\b\\\\w*z\\\\w*\\\\b'\n    return bool(re.search(pattern, text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))"], "outputs": "[[True], [True], [False], [True], [True], [True], [True], [False], [True], [True], [True]]", "probability": 0.8, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\bz\\\\w*', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\bz\\\\w*', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\bz\\\\w*', text))", "def text_match_wordz(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\bz\\\\w*', text))"], "outputs": "[[False], [True], [False], [False], [False], [False], [False], [False], [True], [False], [False]]", "probability": 0.2, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['pythonz.'], [False], [True]]]"}]}
{"task_id": "Mbpp/455", "requirement": "def check_monthnumb_number(monthnum2: int) -> bool:\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [0], [13], [-1]]", "programs": ["def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in (1, 3, 5, 7, 8, 10, 12)", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]"], "clusters": [{"programs_str": ["def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in (1, 3, 5, 7, 8, 10, 12)", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]"], "outputs": "[[True], [False], [True], [False], [True], [False], [True], [True], [False], [True], [False], [True], [False], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/456", "requirement": "from typing import List\n\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n\"\"\"\nWrite a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"", "llm_generated_inputs": "[[['Red', 'Green', 'Blue', 'White', 'Black']], [['Hello', 'World']], [['Python', 'Rocks']], [['Single']], [['', 'Empty', 'String']], [['123', '456', '789']], [['A', 'B', 'C']], [['!@#', '$%^', '&*()']], [['longstringtotestthefunction']]]", "programs": ["from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]"], "clusters": [{"programs_str": ["from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]"], "outputs": "[[['deR', 'neerG', 'eulB', 'etihW', 'kcalB']], [['olleH', 'dlroW']], [['nohtyP', 'skcoR']], [['elgniS']], [['', 'ytpmE', 'gnirtS']], [['321', '654', '987']], [['A', 'B', 'C']], [['#@!', '^%$', ')(*&']], [['noitcnufehttsetotgnirtsgnol']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/457", "requirement": "from typing import List\n\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"", "llm_generated_inputs": "[[[[1], [1, 2], [1, 2, 3]]], [[[5, 6], [2], [3, 4, 5, 6, 7]]], [[[10, 15, 20], [25], [30, 35]]], [[[1, 2, 3], [4, 5], []]], [[[], [], []]], [[[7, 8], [9, 10]]], [[[1], [2, 3, 4], [5, 6]]], [[[True], [False, True, False], [None]]]]", "programs": ["from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)"], "clusters": [{"programs_str": ["from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)"], "outputs": "[[[1]], [[2]], [[25]], [[]], [[]], [[7, 8]], [[1]], [[True]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/458", "requirement": "def rectangle_area(l: float, b: float) -> float:\n\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"", "llm_generated_inputs": "[[10, 20], [5, 5], [0, 10], [10, 0], [-5, 10], [15.5, 4.5], [10000000000.0, 10000000000.0]]", "programs": ["def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b"], "clusters": [{"programs_str": ["def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b"], "outputs": "[[200], [25], [0], [0], [-50], [69.75], [1e+20]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/459", "requirement": "def remove_uppercase(str1: str) -> str:\n\"\"\"\nWrite a function to remove uppercase substrings from a given string.\n\n\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"", "llm_generated_inputs": "[['cAstyoUrFavoRitETVshoWs'], ['ALLUPPERCASE'], ['nouppercase'], [''], ['MiXeDcaSe'], ['1234567890'], ['aBcDeFg'], ['lowerUPPERlower'], ['WHATaboutthis'], ['mIddLeCaSeChAllenge']]", "programs": ["def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))"], "clusters": [{"programs_str": ["def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))", "def remove_uppercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.isupper()))"], "outputs": "[['cstyoravoitshos'], [''], ['nouppercase'], [''], ['iecae'], ['1234567890'], ['aceg'], ['lowerlower'], ['aboutthis'], ['mddeaehllenge']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/460", "requirement": "from typing import List\n\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"", "llm_generated_inputs": "[[[[1, 2], [3, 4, 5], [6, 7, 8, 9]]], [[['a', 'b'], ['c', 'd', 'e'], ['f', 'g', 'h']]], [[[True, False], [False, True]]], [[[1], [2], [3]]], [[[], [1, 2], [3]]], [[[None, 1], [2, None], [3, 4]]], [[[1.1, 2.2], [3.3, 4.4, 5.5]]]]", "programs": ["from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]"], "clusters": [{"programs_str": ["from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]"], "outputs": "[[[1, 3, 6]], [['a', 'c', 'f']], [[True, False]], [[1, 2, 3]], [[1, 3]], [[None, 2, 3]], [[1.1, 3.3]]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]"], "outputs": "[[[1, 3, 6]], [['a', 'c', 'f']], [[True, False]], [[1, 2, 3]], ['IndexError'], [[None, 2, 3]], [[1.1, 3.3]]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/462", "requirement": "from typing import List\n\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3]], [['apple', 'banana', 'cherry']], [[True, False]], [[1, 1, 2]], [[]], [['red']], [['single_element']], [[10, 20, 30, 40, 50]], [[None, 'value', 3.14]]]", "programs": ["from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend(list(map(list, combinations(lst, r))))\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    from itertools import combinations\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend(combinations(lst, r))\n    return [list(combo) for combo in result]", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    from itertools import combinations\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend(combinations(lst, r))\n    return [list(comb) for comb in result]", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    from itertools import combinations\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend([list(comb) for comb in combinations(lst, r)])\n    return result", "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend(combinations(lst, r))\n    return [list(combo) for combo in result]", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    from itertools import combinations\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend(combinations(lst, r))\n    return [list(combo) for combo in result]", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    from itertools import combinations\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend(list(combinations(lst, r)))\n    return [list(comb) for comb in result]", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    from itertools import combinations\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend(list(combinations(lst, r)))\n    return [list(comb) for comb in result]", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    n = len(lst)\n\n    def backtrack(start: int, path: List[int]):\n        result.append(path)\n        for i in range(start, n):\n            backtrack(i + 1, path + [lst[i]])\n    backtrack(0, [])\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n\n    def backtrack(start: int, path: List[int]):\n        result.append(path)\n        for i in range(start, len(lst)):\n            backtrack(i + 1, path + [lst[i]])\n    backtrack(0, [])\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n\n    def backtrack(start: int, path: List[int]):\n        result.append(path)\n        for i in range(start, len(lst)):\n            backtrack(i + 1, path + [lst[i]])\n    result = []\n    backtrack(0, [])\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n\n    def backtrack(start: int, path: List[int]):\n        result.append(path)\n        for i in range(start, len(lst)):\n            backtrack(i + 1, path + [lst[i]])\n    result = []\n    backtrack(0, [])\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n\n    def backtrack(start: int, path: List[int]):\n        result.append(path)\n        for i in range(start, len(lst)):\n            backtrack(i + 1, path + [lst[i]])\n    backtrack(0, [])\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n\n    def backtrack(start: int, path: List[int]):\n        result.append(path)\n        for i in range(start, len(lst)):\n            backtrack(i + 1, path + [lst[i]])\n    result = []\n    backtrack(0, [])\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    n = len(lst)\n    for i in range(2 ** n):\n        combination = []\n        for j in range(n):\n            if i & 1 << j > 0:\n                combination.append(lst[j])\n        result.append(combination)\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    n = len(lst)\n    for i in range(1 << n):\n        combination = []\n        for j in range(n):\n            if i & 1 << j:\n                combination.append(lst[j])\n        result.append(combination)\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    n = len(lst)\n    for i in range(2 ** n):\n        combo = []\n        for j in range(n):\n            if i & 1 << j:\n                combo.append(lst[j])\n        result.append(combo)\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    n = len(lst)\n    for i in range(2 ** n):\n        combo = []\n        for j in range(n):\n            if i & 1 << j > 0:\n                combo.append(lst[j])\n        result.append(combo)\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    n = len(lst)\n    for i in range(1 << n):\n        combination = []\n        for j in range(n):\n            if i & 1 << j:\n                combination.append(lst[j])\n        result.append(combination)\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    if not lst:\n        return [[]]\n    result = []\n    for i in range(len(lst)):\n        elem = lst[i]\n        for subset in combinations_list(lst[i + 1:]):\n            result.append([elem] + subset)\n    return result + [[]]"], "clusters": [{"programs_str": ["from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend(list(map(list, combinations(lst, r))))\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    from itertools import combinations\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend(combinations(lst, r))\n    return [list(combo) for combo in result]", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    from itertools import combinations\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend(combinations(lst, r))\n    return [list(comb) for comb in result]", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    from itertools import combinations\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend([list(comb) for comb in combinations(lst, r)])\n    return result", "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend(combinations(lst, r))\n    return [list(combo) for combo in result]", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    from itertools import combinations\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend(combinations(lst, r))\n    return [list(combo) for combo in result]", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    from itertools import combinations\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend(list(combinations(lst, r)))\n    return [list(comb) for comb in result]", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    from itertools import combinations\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend(list(combinations(lst, r)))\n    return [list(comb) for comb in result]"], "outputs": "[[[[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]], [[[], ['apple'], ['banana'], ['cherry'], ['apple', 'banana'], ['apple', 'cherry'], ['banana', 'cherry'], ['apple', 'banana', 'cherry']]], [[[], [True], [False], [True, False]]], [[[], [1], [1], [2], [1, 1], [1, 2], [1, 2], [1, 1, 2]]], [[[]]], [[[], ['red']]], [[[], ['single_element']]], [[[], [10], [20], [30], [40], [50], [10, 20], [10, 30], [10, 40], [10, 50], [20, 30], [20, 40], [20, 50], [30, 40], [30, 50], [40, 50], [10, 20, 30], [10, 20, 40], [10, 20, 50], [10, 30, 40], [10, 30, 50], [10, 40, 50], [20, 30, 40], [20, 30, 50], [20, 40, 50], [30, 40, 50], [10, 20, 30, 40], [10, 20, 30, 50], [10, 20, 40, 50], [10, 30, 40, 50], [20, 30, 40, 50], [10, 20, 30, 40, 50]]], [[[], [None], ['value'], [3.14], [None, 'value'], [None, 3.14], ['value', 3.14], [None, 'value', 3.14]]]]", "probability": 0.4, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[['orange', 'red', 'green', 'blue']], [[[], ['orange'], ['red'], ['green'], ['blue'], ['orange', 'red'], ['orange', 'green'], ['orange', 'blue'], ['red', 'green'], ['red', 'blue'], ['green', 'blue'], ['orange', 'red', 'green'], ['orange', 'red', 'blue'], ['orange', 'green', 'blue'], ['red', 'green', 'blue'], ['orange', 'red', 'green', 'blue']]], [[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]]]]"}, {"programs_str": ["from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    n = len(lst)\n\n    def backtrack(start: int, path: List[int]):\n        result.append(path)\n        for i in range(start, n):\n            backtrack(i + 1, path + [lst[i]])\n    backtrack(0, [])\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n\n    def backtrack(start: int, path: List[int]):\n        result.append(path)\n        for i in range(start, len(lst)):\n            backtrack(i + 1, path + [lst[i]])\n    backtrack(0, [])\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n\n    def backtrack(start: int, path: List[int]):\n        result.append(path)\n        for i in range(start, len(lst)):\n            backtrack(i + 1, path + [lst[i]])\n    result = []\n    backtrack(0, [])\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n\n    def backtrack(start: int, path: List[int]):\n        result.append(path)\n        for i in range(start, len(lst)):\n            backtrack(i + 1, path + [lst[i]])\n    result = []\n    backtrack(0, [])\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n\n    def backtrack(start: int, path: List[int]):\n        result.append(path)\n        for i in range(start, len(lst)):\n            backtrack(i + 1, path + [lst[i]])\n    backtrack(0, [])\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n\n    def backtrack(start: int, path: List[int]):\n        result.append(path)\n        for i in range(start, len(lst)):\n            backtrack(i + 1, path + [lst[i]])\n    result = []\n    backtrack(0, [])\n    return result"], "outputs": "[[[[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]]], [[[], ['apple'], ['apple', 'banana'], ['apple', 'banana', 'cherry'], ['apple', 'cherry'], ['banana'], ['banana', 'cherry'], ['cherry']]], [[[], [True], [True, False], [False]]], [[[], [1], [1, 1], [1, 1, 2], [1, 2], [1], [1, 2], [2]]], [[[]]], [[[], ['red']]], [[[], ['single_element']]], [[[], [10], [10, 20], [10, 20, 30], [10, 20, 30, 40], [10, 20, 30, 40, 50], [10, 20, 30, 50], [10, 20, 40], [10, 20, 40, 50], [10, 20, 50], [10, 30], [10, 30, 40], [10, 30, 40, 50], [10, 30, 50], [10, 40], [10, 40, 50], [10, 50], [20], [20, 30], [20, 30, 40], [20, 30, 40, 50], [20, 30, 50], [20, 40], [20, 40, 50], [20, 50], [30], [30, 40], [30, 40, 50], [30, 50], [40], [40, 50], [50]]], [[[], [None], [None, 'value'], [None, 'value', 3.14], [None, 3.14], ['value'], ['value', 3.14], [3.14]]]]", "probability": 0.3, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[['orange', 'red', 'green', 'blue']], [[[], ['orange'], ['orange', 'red'], ['orange', 'red', 'green'], ['orange', 'red', 'green', 'blue'], ['orange', 'red', 'blue'], ['orange', 'green'], ['orange', 'green', 'blue'], ['orange', 'blue'], ['red'], ['red', 'green'], ['red', 'green', 'blue'], ['red', 'blue'], ['green'], ['green', 'blue'], ['blue']]], [[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]]]]"}, {"programs_str": ["from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    n = len(lst)\n    for i in range(2 ** n):\n        combination = []\n        for j in range(n):\n            if i & 1 << j > 0:\n                combination.append(lst[j])\n        result.append(combination)\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    n = len(lst)\n    for i in range(1 << n):\n        combination = []\n        for j in range(n):\n            if i & 1 << j:\n                combination.append(lst[j])\n        result.append(combination)\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    n = len(lst)\n    for i in range(2 ** n):\n        combo = []\n        for j in range(n):\n            if i & 1 << j:\n                combo.append(lst[j])\n        result.append(combo)\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    n = len(lst)\n    for i in range(2 ** n):\n        combo = []\n        for j in range(n):\n            if i & 1 << j > 0:\n                combo.append(lst[j])\n        result.append(combo)\n    return result", "from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    n = len(lst)\n    for i in range(1 << n):\n        combination = []\n        for j in range(n):\n            if i & 1 << j:\n                combination.append(lst[j])\n        result.append(combination)\n    return result"], "outputs": "[[[[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]], [[[], ['apple'], ['banana'], ['apple', 'banana'], ['cherry'], ['apple', 'cherry'], ['banana', 'cherry'], ['apple', 'banana', 'cherry']]], [[[], [True], [False], [True, False]]], [[[], [1], [1], [1, 1], [2], [1, 2], [1, 2], [1, 1, 2]]], [[[]]], [[[], ['red']]], [[[], ['single_element']]], [[[], [10], [20], [10, 20], [30], [10, 30], [20, 30], [10, 20, 30], [40], [10, 40], [20, 40], [10, 20, 40], [30, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40], [50], [10, 50], [20, 50], [10, 20, 50], [30, 50], [10, 30, 50], [20, 30, 50], [10, 20, 30, 50], [40, 50], [10, 40, 50], [20, 40, 50], [10, 20, 40, 50], [30, 40, 50], [10, 30, 40, 50], [20, 30, 40, 50], [10, 20, 30, 40, 50]]], [[[], [None], ['value'], [None, 'value'], [3.14], [None, 3.14], ['value', 3.14], [None, 'value', 3.14]]]]", "probability": 0.25, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[['orange', 'red', 'green', 'blue']], [[[], ['orange'], ['red'], ['orange', 'red'], ['green'], ['orange', 'green'], ['red', 'green'], ['orange', 'red', 'green'], ['blue'], ['orange', 'blue'], ['red', 'blue'], ['orange', 'red', 'blue'], ['green', 'blue'], ['orange', 'green', 'blue'], ['red', 'green', 'blue'], ['orange', 'red', 'green', 'blue']]], [[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]]]]"}, {"programs_str": ["from typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    if not lst:\n        return [[]]\n    result = []\n    for i in range(len(lst)):\n        elem = lst[i]\n        for subset in combinations_list(lst[i + 1:]):\n            result.append([elem] + subset)\n    return result + [[]]"], "outputs": "[[[[1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []]], [[['apple', 'banana', 'cherry'], ['apple', 'banana'], ['apple', 'cherry'], ['apple'], ['banana', 'cherry'], ['banana'], ['cherry'], []]], [[[True, False], [True], [False], []]], [[[1, 1, 2], [1, 1], [1, 2], [1], [1, 2], [1], [2], []]], [[[]]], [[['red'], []]], [[['single_element'], []]], [[[10, 20, 30, 40, 50], [10, 20, 30, 40], [10, 20, 30, 50], [10, 20, 30], [10, 20, 40, 50], [10, 20, 40], [10, 20, 50], [10, 20], [10, 30, 40, 50], [10, 30, 40], [10, 30, 50], [10, 30], [10, 40, 50], [10, 40], [10, 50], [10], [20, 30, 40, 50], [20, 30, 40], [20, 30, 50], [20, 30], [20, 40, 50], [20, 40], [20, 50], [20], [30, 40, 50], [30, 40], [30, 50], [30], [40, 50], [40], [50], []]], [[[None, 'value', 3.14], [None, 'value'], [None, 3.14], [None], ['value', 3.14], ['value'], [3.14], []]]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[['orange', 'red', 'green', 'blue']], [[['orange', 'red', 'green', 'blue'], ['orange', 'red', 'green'], ['orange', 'red', 'blue'], ['orange', 'red'], ['orange', 'green', 'blue'], ['orange', 'green'], ['orange', 'blue'], ['orange'], ['red', 'green', 'blue'], ['red', 'green'], ['red', 'blue'], ['red'], ['green', 'blue'], ['green'], ['blue'], []]], [[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]]]]"}]}
{"task_id": "Mbpp/463", "requirement": "from typing import List\n\n\ndef max_subarray_product(arr: List[int]) -> int:\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"", "llm_generated_inputs": "[[[1, -2, -3, 0, 7, -8, -2]], [[-1, -2, -3, -4]], [[0, 0, 0]], [[1, 2, 3, 4]], [[-1, 2, -3, 4, -5]], [[-2, -3, 0, -2, -40]], [[2, 3, -2, 4]], [[-4, -3, -2]], [[5]], [[-1, 0, 1, 0]]]", "programs": ["from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = float('-inf')\n    current_max = 1\n    current_min = 1\n    for num in arr:\n        if num < 0:\n            current_max, current_min = (current_min, current_max)\n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = float('-inf')\n    current_max = 1\n    current_min = 1\n    for num in arr:\n        if num == 0:\n            current_max = 1\n            current_min = 1\n            continue\n        temp = current_max * num\n        current_max = max(num, temp, current_min * num)\n        current_min = min(num, temp, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = float('-inf')\n    current_max = 1\n    current_min = 1\n    for num in arr:\n        if num == 0:\n            current_max = 1\n            current_min = 1\n            continue\n        temp = current_max\n        current_max = max(num, current_max * num, current_min * num)\n        current_min = min(num, temp * num, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product"], "clusters": [{"programs_str": ["from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = float('-inf')\n    current_max = 1\n    current_min = 1\n    for num in arr:\n        if num < 0:\n            current_max, current_min = (current_min, current_max)\n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product"], "outputs": "[[112], [24], [0], [24], [120], [80], [6], [12], [5], [1]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = float('-inf')\n    current_max = 1\n    current_min = 1\n    for num in arr:\n        if num == 0:\n            current_max = 1\n            current_min = 1\n            continue\n        temp = current_max * num\n        current_max = max(num, temp, current_min * num)\n        current_min = min(num, temp, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = float('-inf')\n    current_max = 1\n    current_min = 1\n    for num in arr:\n        if num == 0:\n            current_max = 1\n            current_min = 1\n            continue\n        temp = current_max\n        current_max = max(num, current_max * num, current_min * num)\n        current_min = min(num, temp * num, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product"], "outputs": "[[112], [24], [-inf], [24], [120], [80], [6], [12], [5], [1]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/465", "requirement": "def drop_empty(dict1: dict) -> dict:\n\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\n\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"", "llm_generated_inputs": "[[{'a': 1, 'b': '', 'c': None}], [{'x': [], 'y': 'hello', 'z': {}}], [{'key1': 'value1', 'key2': 'value2', 'key3': ' '}], [{'empty1': None, 'empty2': None, 'filled': 42}], [{}], [{'only_empty': None}], [{'data': [1, 2, 3], 'empty_list': [], 'empty_string': ''}], [{'k1': 'some value', 'k2': '', 'k3': None, 'k4': 'another value'}]]", "programs": ["def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None and value != ''}"], "clusters": [{"programs_str": ["def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}"], "outputs": "[[{'a': 1, 'b': ''}], [{'x': [], 'y': 'hello', 'z': {}}], [{'key1': 'value1', 'key2': 'value2', 'key3': ' '}], [{'filled': 42}], [{}], [{}], [{'data': [1, 2, 3], 'empty_list': [], 'empty_string': ''}], [{'k1': 'some value', 'k2': '', 'k4': 'another value'}]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None and value != ''}"], "outputs": "[[{'a': 1}], [{'x': [], 'y': 'hello', 'z': {}}], [{'key1': 'value1', 'key2': 'value2', 'key3': ' '}], [{'filled': 42}], [{}], [{}], [{'data': [1, 2, 3], 'empty_list': []}], [{'k1': 'some value', 'k4': 'another value'}]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/468", "requirement": "from typing import List\n\n\ndef max_product(arr: List[int]) -> int:\n\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"", "llm_generated_inputs": "[[[3, 100, 4, 5, 150, 6]], [[1, 2, 3, 4]], [[10, 3, 2, 1, 20]], [[9, 10, 5, 1, 2]], [[5, 10, 15, 20]], [[1]], [[-1, -2, -3, -4]], [[1, 2, 3, 0, 4]], [[-1, 2, 3, -4, 0, 5]]]", "programs": ["from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_prod = [0] * n\n    for i in range(n):\n        max_prod[i] = arr[i]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n    return max(max_prod)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_product = [0] * n\n    for i in range(n):\n        max_product[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_product[i] = max(max_product[i], max_product[j] * arr[i])\n    return max(max_product)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_prod = [0] * n\n    for i in range(n):\n        max_prod[i] = arr[i]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n    return max(max_prod)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_prod = [0] * n\n    for i in range(n):\n        max_prod[i] = arr[i]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n    return max(max_prod)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_prod = [0] * n\n    for i in range(n):\n        max_prod[i] = arr[i]\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n    return max(max_prod)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_prod = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n    return max(max_prod)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\nimport numpy as np\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_products = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_products[i] = max(max_products[i], max_products[j] * arr[i])\n    return max(max_products)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_prod = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n    return max(max_prod)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_prod = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n    return max(max_prod)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [1] * n\n    max_product_value = 0\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    max_product_value = max(dp)\n    return max_product_value if max_product_value > 1 else 0", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n        dp[i] = max(dp[i], arr[i])\n    return max(dp)"], "clusters": [{"programs_str": ["from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_prod = [0] * n\n    for i in range(n):\n        max_prod[i] = arr[i]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n    return max(max_prod)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_product = [0] * n\n    for i in range(n):\n        max_product[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_product[i] = max(max_product[i], max_product[j] * arr[i])\n    return max(max_product)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_prod = [0] * n\n    for i in range(n):\n        max_prod[i] = arr[i]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n    return max(max_prod)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_prod = [0] * n\n    for i in range(n):\n        max_prod[i] = arr[i]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n    return max(max_prod)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_prod = [0] * n\n    for i in range(n):\n        max_prod[i] = arr[i]\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n    return max(max_prod)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_prod = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n    return max(max_prod)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\nimport numpy as np\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_products = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_products[i] = max(max_products[i], max_products[j] * arr[i])\n    return max(max_products)"], "outputs": "[[45000], [24], [200], [90], [15000], [1], [-1], [24], [30]]", "probability": 0.6, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[3, 100, 4, 5, 150, 6]], [45000], [3000]]]"}, {"programs_str": ["from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_prod = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n    return max(max_prod)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_prod = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n    return max(max_prod)"], "outputs": "[[15000], [24], [20], [10], [3000], [1], [1], [24], [30]]", "probability": 0.3, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[3, 100, 4, 5, 150, 6]], [15000], [3000]]]"}, {"programs_str": ["from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [1] * n\n    max_product_value = 0\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    max_product_value = max(dp)\n    return max_product_value if max_product_value > 1 else 0"], "outputs": "[[15000], [24], [20], [10], [3000], [0], [0], [24], [30]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[3, 100, 4, 5, 150, 6]], [15000], [3000]]]"}, {"programs_str": ["from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n        dp[i] = max(dp[i], arr[i])\n    return max(dp)"], "outputs": "[[45000], [24], [200], [90], [15000], [1], [0], [24], [30]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[3, 100, 4, 5, 150, 6]], [45000], [3000]]]"}]}
{"task_id": "Mbpp/470", "requirement": "from typing import Tuple\n\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"", "llm_generated_inputs": "[[(1, 5, 7, 8, 10)], [(0, 0, 0)], [(-1, -2, -3, -4)], [(10, 20)], [(-5, 5, -5, 5, -5)], [(1,)], [()], [(5, 10, 15, 20, 25, 30)]]", "programs": ["from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((sum(test_tup[i:i + 2]) for i in range(0, len(test_tup) - 1, 2)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((sum(test_tup[i:i + 2]) for i in range(0, len(test_tup) - 1, 2)))"], "clusters": [{"programs_str": ["from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))"], "outputs": "[[(6, 12, 15, 18)], [(0, 0)], [(-3, -5, -7)], [(30,)], [(0, 0, 0, 0)], [()], [()], [(15, 25, 35, 45, 55)]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((sum(test_tup[i:i + 2]) for i in range(0, len(test_tup) - 1, 2)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((sum(test_tup[i:i + 2]) for i in range(0, len(test_tup) - 1, 2)))"], "outputs": "[[(6, 15)], [(0,)], [(-3, -7)], [(30,)], [(0, 0)], [()], [()], [(15, 35, 55)]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[(1, 5, 7, 8, 10)], [(6, 15)], [(6, 12, 15, 18)]]]"}]}
{"task_id": "Mbpp/471", "requirement": "from typing import List\n\n\ndef find_remainder(arr: List[int], n: int) -> int:\n\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"", "llm_generated_inputs": "[[[100, 10, 5, 25, 35, 14], 11], [[1, 2, 3, 4], 2], [[10, 20, 30], 15], [[0, 0, 0], 5], [[1, 1, 1], 3], [[50, 25, 75], 100], [[100, 200, 300, 400, 500], 1000], [[1], 1], [[], 1], [[100, 30, 25], 0]]", "programs": ["from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for number in arr:\n        product = product * number % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for number in arr:\n        product = product * number % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for number in arr:\n        product = product * number % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for number in arr:\n        product = product * number % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for number in arr:\n        product = product * number % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for number in arr:\n        product = product * number % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for number in arr:\n        product = product * number % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for number in arr:\n        product = product * number % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for number in arr:\n        product = product * number % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product"], "clusters": [{"programs_str": ["from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for number in arr:\n        product = product * number % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for number in arr:\n        product = product * number % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for number in arr:\n        product = product * number % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for number in arr:\n        product = product * number % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for number in arr:\n        product = product * number % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for number in arr:\n        product = product * number % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for number in arr:\n        product = product * number % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for number in arr:\n        product = product * number % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for number in arr:\n        product = product * number % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product"], "outputs": "[[9], [0], [0], [0], [1], [50], [0], [0], [1], ['ZeroDivisionError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/472", "requirement": "from typing import List\n\n\ndef check_Consecutive(l: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 4, 5]], [[10, 11, 12, 13, 14]], [[7, 8, 9, 10, 11]], [[1, 3, 4, 5]], [[5, 6, 8]], [[100]], [[-2, -1, 0, 1]], [[1, 0, 2, 3, 4]], [[3, 1, 2, 4, 5]], [[2, 5, 3, 4, 6]]]", "programs": ["from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        return False\n    return max(l) - min(l) + 1 == len(l) and len(set(l)) == len(l)", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        return False\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else True", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        return False\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else False", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        return False\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        return False\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else False", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        return False\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        return False\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else False", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else True", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else True", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else False", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else False", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else False", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else True", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else False", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else False", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        return False\n    return max(l) - min(l) + 1 == len(set(l))"], "clusters": [{"programs_str": ["from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        return False\n    return max(l) - min(l) + 1 == len(l) and len(set(l)) == len(l)", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        return False\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else True", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        return False\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else False", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        return False\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        return False\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else False", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        return False\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        return False\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else False", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else True", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else True", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else False", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else False", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else False", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else True", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else False", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1)) if l else False", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        return False\n    return max(l) - min(l) + 1 == len(set(l))"], "outputs": "[[True], [True], [True], [False], [False], [True], [True], [True], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/473", "requirement": "from typing import List\nfrom typing import Set\nfrom typing import Tuple\n\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"", "llm_generated_inputs": "[[[(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]], [[(1, 2), (2, 1), (3, 4)], [(4, 3), (1, 2)]], [[], [(1, 2), (2, 1)]], [[(1, 2)], []], [[(0, 0), (1, 1), (2, 2)], [(2, 2), (1, 1)]], [[(1, 2), (3, 4)], [(5, 6), (7, 8)]], [[(10, 20)], [(20, 10), (30, 40)]], [[(3, 4), (5, 6)], [(3, 4), (5, 6)]], [[(1, 2), (3, 3)], [(3, 3), (1, 1)]]]", "programs": ["from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tup)) for tup in test_list1}\n    set2 = {tuple(sorted(tup)) for tup in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tup)) for tup in test_list1}\n    set2 = {tuple(sorted(tup)) for tup in test_list2}\n    return set1.intersection(set2)", "from typing import List\nfrom typing import Set\nfrom typing import Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tup)) for tup in test_list1}\n    set2 = {tuple(sorted(tup)) for tup in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tup)) for tup in test_list1}\n    set2 = {tuple(sorted(tup)) for tup in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tup)) for tup in test_list1}\n    set2 = {tuple(sorted(tup)) for tup in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List\nfrom typing import Set\nfrom typing import Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tup)) for tup in test_list1}\n    set2 = {tuple(sorted(tup)) for tup in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tup)) for tup in test_list1}\n    set2 = {tuple(sorted(tup)) for tup in test_list2}\n    return set1.intersection(set2)", "from typing import List\nfrom typing import Set\nfrom typing import Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tup)) for tup in test_list1}\n    set2 = {tuple(sorted(tup)) for tup in test_list2}\n    return set1.intersection(set2)", "from typing import List\nfrom typing import Set\nfrom typing import Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = set((tuple(sorted(t)) for t in test_list1))\n    set2 = set((tuple(sorted(t)) for t in test_list2))\n    intersection = set1.intersection(set2)\n    return intersection", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tup)) for tup in test_list1}\n    set2 = {tuple(sorted(tup)) for tup in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    intersection = set()\n    for t1 in test_list1:\n        for t2 in test_list2:\n            if set(t1) == set(t2):\n                intersection.add(t1)\n    return intersection"], "clusters": [{"programs_str": ["from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tup)) for tup in test_list1}\n    set2 = {tuple(sorted(tup)) for tup in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tup)) for tup in test_list1}\n    set2 = {tuple(sorted(tup)) for tup in test_list2}\n    return set1.intersection(set2)", "from typing import List\nfrom typing import Set\nfrom typing import Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tup)) for tup in test_list1}\n    set2 = {tuple(sorted(tup)) for tup in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tup)) for tup in test_list1}\n    set2 = {tuple(sorted(tup)) for tup in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tup)) for tup in test_list1}\n    set2 = {tuple(sorted(tup)) for tup in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List\nfrom typing import Set\nfrom typing import Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tup)) for tup in test_list1}\n    set2 = {tuple(sorted(tup)) for tup in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tup)) for tup in test_list1}\n    set2 = {tuple(sorted(tup)) for tup in test_list2}\n    return set1.intersection(set2)", "from typing import List\nfrom typing import Set\nfrom typing import Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tup)) for tup in test_list1}\n    set2 = {tuple(sorted(tup)) for tup in test_list2}\n    return set1.intersection(set2)", "from typing import List\nfrom typing import Set\nfrom typing import Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = set((tuple(sorted(t)) for t in test_list1))\n    set2 = set((tuple(sorted(t)) for t in test_list2))\n    intersection = set1.intersection(set2)\n    return intersection", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tup)) for tup in test_list1}\n    set2 = {tuple(sorted(tup)) for tup in test_list2}\n    return set1.intersection(set2)"], "outputs": "[[{(4, 5), (5, 6), (3, 4)}], [{(1, 2), (3, 4)}], [set()], [set()], [{(1, 1), (2, 2)}], [set()], [{(10, 20)}], [{(5, 6), (3, 4)}], [{(3, 3)}]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    intersection = set()\n    for t1 in test_list1:\n        for t2 in test_list2:\n            if set(t1) == set(t2):\n                intersection.add(t1)\n    return intersection"], "outputs": "[[{(4, 5), (5, 6), (3, 4)}], [{(1, 2), (2, 1), (3, 4)}], [set()], [set()], [{(1, 1), (2, 2)}], [set()], [{(10, 20)}], [{(5, 6), (3, 4)}], [{(3, 3)}]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/474", "requirement": "def replace_char(str1: str, ch: str, newch: str) -> str:\n\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"", "llm_generated_inputs": "[['polygon', 'y', 'l'], ['hello world', 'o', '0'], ['test case', 't', 'T'], ['single character', 's', 'S'], ['no match here', 'x', 'y'], ['replace multiple', 'e', '3'], ['', 'a', 'b'], ['same character', 'a', 'a']]", "programs": ["def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)"], "clusters": [{"programs_str": ["def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)"], "outputs": "[['pollgon'], ['hell0 w0rld'], ['TesT case'], ['Single character'], ['no match here'], ['r3plac3 multipl3'], [''], ['same character']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/475", "requirement": "def sort_counter(dict1: dict) -> list:\n\"\"\"\nWrite a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"", "llm_generated_inputs": "[[{'Math': 81, 'Physics': 83, 'Chemistry': 87}], [{'A': 5, 'B': 3, 'C': 8}], [{'Apple': 10, 'Banana': 10, 'Cherry': 5}], [{'Single': 1}], [{'Item1': 100, 'Item2': 200, 'Item3': 50}], [{'Key1': -1, 'Key2': -2, 'Key3': -3}], [{'P': 999, 'Q': 1000, 'R': 998}], [{}]]", "programs": ["def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "from typing import Dict, List, Tuple\n\ndef sort_counter(dict1: Dict) -> List[Tuple[str, int]]:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "from typing import dict, list, tuple\n\ndef sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)"], "clusters": [{"programs_str": ["def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "from typing import Dict, List, Tuple\n\ndef sort_counter(dict1: Dict) -> List[Tuple[str, int]]:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)"], "outputs": "[[[('Chemistry', 87), ('Physics', 83), ('Math', 81)]], [[('C', 8), ('A', 5), ('B', 3)]], [[('Apple', 10), ('Banana', 10), ('Cherry', 5)]], [[('Single', 1)]], [[('Item2', 200), ('Item1', 100), ('Item3', 50)]], [[('Key1', -1), ('Key2', -2), ('Key3', -3)]], [[('Q', 1000), ('P', 999), ('R', 998)]], [[]]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import dict, list, tuple\n\ndef sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)"], "outputs": "[['Timeout'], ['ModuleNotFoundError'], ['ModuleNotFoundError'], ['ModuleNotFoundError'], ['ModuleNotFoundError'], ['ModuleNotFoundError'], ['ModuleNotFoundError'], ['ModuleNotFoundError']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[{'Math': 81, 'Physics': 83, 'Chemistry': 87}], ['ModuleNotFoundError'], [[('Chemistry', 87), ('Physics', 83), ('Math', 81)]]]]"}]}
{"task_id": "Mbpp/476", "requirement": "from typing import List\n\n\ndef big_sum(nums: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3]], [[5, 1, 4, 2]], [[-1, -2, -3, -4]], [[10, 20, 30, 40, 50]], [[-5, 0, 5]], [[0]], [[-10, 10]], [[3, 3, 3]]]", "programs": ["from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)"], "clusters": [{"programs_str": ["from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)"], "outputs": "[[4], [6], [-5], [60], [0], [0], [0], [6]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/477", "requirement": "def is_lower(string: str) -> str:\n\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"", "llm_generated_inputs": "[['HELLO'], ['world'], ['Python 3.8'], ['12345'], ['MixedCaseString'], ['SINGLEWORD'], ['special_characters!@#'], ['']]", "programs": ["def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()"], "clusters": [{"programs_str": ["def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()"], "outputs": "[['hello'], ['world'], ['python 3.8'], ['12345'], ['mixedcasestring'], ['singleword'], ['special_characters!@#'], ['']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/478", "requirement": "def remove_lowercase(str1: str) -> str:\n\"\"\"\nWrite a function to remove lowercase substrings from a given string.\n\n\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"", "llm_generated_inputs": "[['Hello World!'], ['Python is FUN!'], ['1234abcd!@#'], ['UPPERCASE ONLY'], [''], ['lowercase'], ['MIXed CASE 1234'], ['!!!!!!!'], ['NoLowerHERE!'], ['PYTHon and JAVA are here.']]", "programs": ["def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join([char for char in str1 if not char.islower()])", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join([char for char in str1 if not char.islower()])", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join(filter(str.isupper, str1))"], "clusters": [{"programs_str": ["def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join([char for char in str1 if not char.islower()])", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join([char for char in str1 if not char.islower()])", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))"], "outputs": "[['H W!'], ['P  FUN!'], ['1234!@#'], ['UPPERCASE ONLY'], [''], [''], ['MIX CASE 1234'], ['!!!!!!!'], ['NLHERE!'], ['PYTH  JAVA  .']]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def remove_lowercase(str1: str) -> str:\n    return ''.join(filter(str.isupper, str1))"], "outputs": "[['HW'], ['PFUN'], [''], ['UPPERCASEONLY'], [''], [''], ['MIXCASE'], [''], ['NLHERE'], ['PYTHJAVA']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/479", "requirement": "def first_Digit(n: int) -> int:\n\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"", "llm_generated_inputs": "[[123], [0], [-456], [7], [8901], [-300], [10000], [999]]", "programs": ["def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])"], "clusters": [{"programs_str": ["def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n"], "outputs": "[[1], [0], [-456], [7], [8], [-300], [1], [9]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def first_Digit(n: int) -> int:\n    return int(str(n)[0])"], "outputs": "[[1], [0], ['ValueError'], [7], [8], ['ValueError'], [1], [9]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/554", "requirement": "from typing import List\n\n\ndef Split(l: List[int]) -> List[int]:\n\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 4, 5, 6]], [[10, 15, 20, 25, 30]], [[0, -1, -2, -3, -4]], [[2, 4, 6, 8, 10]], [[1, 3, 5, 7, 9]], [[-5, -4, -3, -2, -1]], [[2, 2, 2, 2, 2]], [[-1, 0, 1]], [[-7, -6, -5, -4, -3, -2, -1]], [[]]]", "programs": ["from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]"], "clusters": [{"programs_str": ["from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]"], "outputs": "[[[1, 3, 5]], [[15, 25]], [[-1, -3]], [[]], [[1, 3, 5, 7, 9]], [[-5, -3, -1]], [[]], [[-1, 1]], [[-7, -5, -3, -1]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/555", "requirement": "def difference(n: int) -> int:\n\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30\n\"\"\"", "llm_generated_inputs": "[[1], [3], [5], [10], [0], [-1], [100]]", "programs": ["def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_of_natural_numbers = n * (n + 1) // 2\n    sum_of_cubes = sum_of_natural_numbers ** 2\n    return sum_of_cubes - sum_of_natural_numbers", "def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_of_first_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_first_n ** 2\n    return sum_of_cubes - sum_of_first_n", "def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_n = n * (n + 1) // 2\n    sum_cubes = sum_n ** 2\n    return sum_cubes - sum_n", "def difference(n: int) -> int:\n    sum_n = n * (n + 1) // 2\n    sum_cubes = sum_n ** 2\n    return sum_cubes - sum_n", "def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_natural = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_natural", "def difference(n: int) -> int:\n    sum_n = n * (n + 1) // 2\n    sum_cubes = sum_n ** 2\n    return sum_cubes - sum_n", "def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_n = n * (n + 1) // 2\n    sum_cubes = sum_n ** 2\n    return sum_cubes - n * (n + 1) // 2", "def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_of_numbers = n * (n + 1) // 2\n    sum_of_cubes = sum_of_numbers ** 2\n    return sum_of_cubes - sum_of_numbers", "def difference(n: int) -> int:\n    sum_n = n * (n + 1) // 2\n    sum_cubes = sum_n ** 2\n    return sum_cubes - n * (n + 1) * (2 * n + 1) // 6"], "clusters": [{"programs_str": ["def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_of_natural_numbers = n * (n + 1) // 2\n    sum_of_cubes = sum_of_natural_numbers ** 2\n    return sum_of_cubes - sum_of_natural_numbers", "def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_of_first_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_first_n ** 2\n    return sum_of_cubes - sum_of_first_n", "def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_n = n * (n + 1) // 2\n    sum_cubes = sum_n ** 2\n    return sum_cubes - sum_n", "def difference(n: int) -> int:\n    sum_n = n * (n + 1) // 2\n    sum_cubes = sum_n ** 2\n    return sum_cubes - sum_n", "def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_natural = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_natural", "def difference(n: int) -> int:\n    sum_n = n * (n + 1) // 2\n    sum_cubes = sum_n ** 2\n    return sum_cubes - sum_n", "def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_n = n * (n + 1) // 2\n    sum_cubes = sum_n ** 2\n    return sum_cubes - n * (n + 1) // 2", "def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n", "def difference(n: int) -> int:\n    sum_of_numbers = n * (n + 1) // 2\n    sum_of_cubes = sum_of_numbers ** 2\n    return sum_of_cubes - sum_of_numbers"], "outputs": "[[0], [30], [210], [2970], [0], [0], [25497450]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def difference(n: int) -> int:\n    sum_n = n * (n + 1) // 2\n    sum_cubes = sum_n ** 2\n    return sum_cubes - n * (n + 1) * (2 * n + 1) // 6"], "outputs": "[[0], [22], [170], [2640], [0], [0], [25164150]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3], [22], [30]]]"}]}
{"task_id": "Mbpp/556", "requirement": "from typing import List\n\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"", "llm_generated_inputs": "[[[5, 4, 7, 2, 1], 5], [[1, 2, 3, 4], 4], [[0, 0, 0, 0], 4], [[], 0], [[1, 1, 1, 1, 1], 5], [[2, 4, 6, 8], 4], [[1, 1, 2, 2, 3, 3], 6], [[10, 15, 20, 25], 4], [[8, 5, 3, 2, 1], 5]]", "programs": ["from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                odd_count += 1\n    return odd_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = 0\n    even_count = 0\n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for x in A if x % 2 != 0))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for x in A if x % 2 != 0))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = 0\n    even_count = 0\n    for number in A:\n        if number % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for x in A if x % 2 == 1))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for x in A if x % 2 != 0))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for x in A if x % 2 != 0))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count"], "clusters": [{"programs_str": ["from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                odd_count += 1\n    return odd_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = 0\n    even_count = 0\n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for x in A if x % 2 != 0))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for x in A if x % 2 != 0))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = 0\n    even_count = 0\n    for number in A:\n        if number % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for x in A if x % 2 == 1))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for x in A if x % 2 != 0))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for x in A if x % 2 != 0))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count"], "outputs": "[[6], [4], [0], [0], [0], [0], [8], [4], [6]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/557", "requirement": "def toggle_string(string: str) -> str:\n\"\"\"\nWrite a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"", "llm_generated_inputs": "[['Hello World'], ['python programming'], ['TOGGLE CASE'], ['12345'], ['Mixed CASE 123'], [''], ['single'], ['UPPERCASE'], ['lowercase'], ['!@#$%^&*()']]", "programs": ["def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()"], "clusters": [{"programs_str": ["def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()"], "outputs": "[['hELLO wORLD'], ['PYTHON PROGRAMMING'], ['toggle case'], ['12345'], ['mIXED case 123'], [''], ['SINGLE'], ['uppercase'], ['LOWERCASE'], ['!@#$%^&*()']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/558", "requirement": "def digit_distance_nums(n1: int, n2: int) -> int:\n\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1\n\"\"\"", "llm_generated_inputs": "[[1, 2], [10, 20], [123, 456], [0, 0], [9999, 1000], [-1, 1], [100, 200], [45, 54], [12345, 54321], [1000, 0]]", "programs": ["def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    total_distance = sum((abs(int(d1) - int(d2)) for d1, d2 in zip(n1_str, n2_str)))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    total_distance = 0\n    for digit1, digit2 in zip(n1_str, n2_str):\n        total_distance += abs(int(digit1) - int(digit2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    total_distance = 0\n    for digit1, digit2 in zip(n1_str, n2_str):\n        total_distance += abs(int(digit1) - int(digit2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    total_distance = 0\n    for digit1, digit2 in zip(n1_str, n2_str):\n        total_distance += abs(int(digit1) - int(digit2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    total_distance = sum((abs(int(d1) - int(d2)) for d1, d2 in zip(str_n1, str_n2)))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    total_distance = sum((abs(int(d1) - int(d2)) for d1, d2 in zip(str_n1, str_n2)))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    total_distance = 0\n    for digit1, digit2 in zip(n1_str, n2_str):\n        total_distance += abs(int(digit1) - int(digit2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str, n2_str = (str(n1), str(n2))\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    total_distance = 0\n    for digit1, digit2 in zip(n1_str, n2_str):\n        total_distance += abs(int(digit1) - int(digit2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    total_distance = sum((abs(int(d1) - int(d2)) for d1, d2 in zip(n1_str, n2_str)))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_len = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_len)\n    n2_str = n2_str.zfill(max_len)\n    total_distance = 0\n    for digit1, digit2 in zip(n1_str, n2_str):\n        total_distance += abs(int(digit1) - int(digit2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_len = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_len)\n    n2_str = n2_str.zfill(max_len)\n    total_distance = 0\n    for digit1, digit2 in zip(n1_str, n2_str):\n        total_distance += abs(int(digit1) - int(digit2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_len = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_len)\n    n2_str = n2_str.zfill(max_len)\n    distance_sum = sum((abs(int(d1) - int(d2)) for d1, d2 in zip(n1_str, n2_str)))\n    return distance_sum", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    distance_sum = 0\n    for digit1, digit2 in zip(str_n1, str_n2):\n        distance_sum += abs(int(digit1) - int(digit2))\n    return distance_sum", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    distance_sum = 0\n    for digit1, digit2 in zip(n1_str, n2_str):\n        distance_sum += abs(int(digit1) - int(digit2))\n    return distance_sum", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    distance_sum = 0\n    for digit1, digit2 in zip(str_n1, str_n2):\n        distance_sum += abs(int(digit1) - int(digit2))\n    return distance_sum", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    total_distance = 0\n    for d1, d2 in zip(n1_str, n2_str):\n        total_distance += abs(int(d1) - int(d2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    total_distance = 0\n    for d1, d2 in zip(n1_str, n2_str):\n        total_distance += abs(int(d1) - int(d2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_len = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_len)\n    n2_str = n2_str.zfill(max_len)\n    total_distance = 0\n    for digit1, digit2 in zip(n1_str, n2_str):\n        total_distance += abs(int(digit1) - int(digit2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    total_distance = sum((abs(int(digit1) - int(digit2)) for digit1, digit2 in zip(n1_str, n2_str)))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    return sum((abs(int(d1) - int(d2)) for d1, d2 in zip(str(n1)[::-1], str(n2)[::-1])))"], "clusters": [{"programs_str": ["def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    total_distance = sum((abs(int(d1) - int(d2)) for d1, d2 in zip(n1_str, n2_str)))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    total_distance = 0\n    for digit1, digit2 in zip(n1_str, n2_str):\n        total_distance += abs(int(digit1) - int(digit2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    total_distance = 0\n    for digit1, digit2 in zip(n1_str, n2_str):\n        total_distance += abs(int(digit1) - int(digit2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    total_distance = 0\n    for digit1, digit2 in zip(n1_str, n2_str):\n        total_distance += abs(int(digit1) - int(digit2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    total_distance = sum((abs(int(d1) - int(d2)) for d1, d2 in zip(str_n1, str_n2)))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    total_distance = sum((abs(int(d1) - int(d2)) for d1, d2 in zip(str_n1, str_n2)))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    total_distance = 0\n    for digit1, digit2 in zip(n1_str, n2_str):\n        total_distance += abs(int(digit1) - int(digit2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str, n2_str = (str(n1), str(n2))\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    total_distance = 0\n    for digit1, digit2 in zip(n1_str, n2_str):\n        total_distance += abs(int(digit1) - int(digit2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    total_distance = sum((abs(int(d1) - int(d2)) for d1, d2 in zip(n1_str, n2_str)))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_len = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_len)\n    n2_str = n2_str.zfill(max_len)\n    total_distance = 0\n    for digit1, digit2 in zip(n1_str, n2_str):\n        total_distance += abs(int(digit1) - int(digit2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_len = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_len)\n    n2_str = n2_str.zfill(max_len)\n    total_distance = 0\n    for digit1, digit2 in zip(n1_str, n2_str):\n        total_distance += abs(int(digit1) - int(digit2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_len = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_len)\n    n2_str = n2_str.zfill(max_len)\n    distance_sum = sum((abs(int(d1) - int(d2)) for d1, d2 in zip(n1_str, n2_str)))\n    return distance_sum", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    distance_sum = 0\n    for digit1, digit2 in zip(str_n1, str_n2):\n        distance_sum += abs(int(digit1) - int(digit2))\n    return distance_sum", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    distance_sum = 0\n    for digit1, digit2 in zip(n1_str, n2_str):\n        distance_sum += abs(int(digit1) - int(digit2))\n    return distance_sum", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    distance_sum = 0\n    for digit1, digit2 in zip(str_n1, str_n2):\n        distance_sum += abs(int(digit1) - int(digit2))\n    return distance_sum", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    total_distance = 0\n    for d1, d2 in zip(n1_str, n2_str):\n        total_distance += abs(int(d1) - int(d2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    total_distance = 0\n    for d1, d2 in zip(n1_str, n2_str):\n        total_distance += abs(int(d1) - int(d2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_len = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_len)\n    n2_str = n2_str.zfill(max_len)\n    total_distance = 0\n    for digit1, digit2 in zip(n1_str, n2_str):\n        total_distance += abs(int(digit1) - int(digit2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    total_distance = sum((abs(int(digit1) - int(digit2)) for digit1, digit2 in zip(n1_str, n2_str)))\n    return total_distance"], "outputs": "[[1], [1], [9], [0], [35], ['ValueError'], [1], [2], [12], [1]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def digit_distance_nums(n1: int, n2: int) -> int:\n    return sum((abs(int(d1) - int(d2)) for d1, d2 in zip(str(n1)[::-1], str(n2)[::-1])))"], "outputs": "[[1], [1], [9], [0], [35], [0], [1], [2], [12], [0]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/559", "requirement": "from typing import List\n\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"", "llm_generated_inputs": "[[[-2, -3, 4, -1, -2, 1, 5, -3], 8], [[1, 2, 3, 4, 5], 5], [[-1, -2, -3, -4], 4], [[10, 20, -10, -20, 30], 5], [[], 0], [[0, 0, 0, 0], 4], [[5], 1], [[-1, 2, -1, 2, -1, 2], 6]]", "programs": ["from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_current = max_global = a[0]\n    for i in range(1, size):\n        max_current = max(a[i], max_current + a[i])\n        if max_current > max_global:\n            max_global = max_current\n    return max_global", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    current_max = a[0]\n    for i in range(1, size):\n        current_max = max(a[i], current_max + a[i])\n        max_so_far = max(max_so_far, current_max)\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in a:\n        current_sum += num\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in a:\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in a:\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"], "clusters": [{"programs_str": ["from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_current = max_global = a[0]\n    for i in range(1, size):\n        max_current = max(a[i], max_current + a[i])\n        if max_current > max_global:\n            max_global = max_current\n    return max_global", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    current_max = a[0]\n    for i in range(1, size):\n        current_max = max(a[i], current_max + a[i])\n        max_so_far = max(max_so_far, current_max)\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"], "outputs": "[[7], [15], [-1], [30], ['IndexError'], [0], [5], [4]]", "probability": 0.4, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in a:\n        current_sum += num\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in a:\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in a:\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"], "outputs": "[[7], [15], [-1], [30], [-inf], [0], [5], [4]]", "probability": 0.6, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/560", "requirement": "from typing import Tuple\n\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"", "llm_generated_inputs": "[[(3, 4, 5, 6), (5, 7, 4, 10)]]", "programs": ["from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1).union(set(test_tup2))))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1).union(set(test_tup2))))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1).union(set(test_tup2))))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))"], "clusters": [{"programs_str": ["from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1).union(set(test_tup2))))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1).union(set(test_tup2))))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1).union(set(test_tup2))))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))"], "outputs": "[[(3, 4, 5, 6, 7, 10)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/562", "requirement": "from typing import List\n\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"", "llm_generated_inputs": "[[[[1], [1, 4], [5, 6, 7, 8]]], [[[5], [3, 4], [9, 10, 12, 13, 14]]], [[[1, 2], [3, 4, 5], [6, 7, 8, 9]]], [[[1, 2, 3], [], [4]]], [[[], [], []]], [[[True], [False, True], [None]]], [[[1, 2, 3], [4, 5, 6], [7, 8]]], [[[1, 2, 3, 4, 5], [6]]], [[[1, 2], [1, 2, 3, 4], [1]]], [[[10, 20], [30], [40, 50, 60, 70]]]]", "programs": ["from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))"], "clusters": [{"programs_str": ["from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))"], "outputs": "[[4], [5], [4], [3], [0], [2], [3], [5], [4], [4]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/563", "requirement": "from typing import List\n\n\ndef extract_values(text: str) -> List[str]:\n\"\"\"\nWrite a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"", "llm_generated_inputs": "[['\"Python\", \"PHP\", \"Java\"'], ['\"SingleValue\"'], ['\"Value1\", \"Value2\", \"Value3\", \"Value4\"'], ['\"\"'], ['\"Mixed \"Quotes\" Inside\"'], ['\"Escape \\\\\"This\\\\\" Value\"'], ['\"Value with space\", \"Another value\"']]", "programs": ["from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    import re\n    return re.findall('\"(.*?)\"', text)", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    import re\n    return re.findall('\"(.*?)\"', text)", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    import re\n    return re.findall('\"(.*?)\"', text)", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    import re\n    return re.findall('\"(.*?)\"', text)", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    import re\n    return re.findall('\"(.*?)\"', text)", "from typing import List\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "from typing import List\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"([^\"]*)\"', text)", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    import re\n    return re.findall('\"(.*?)\"', text)", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    import re\n    return re.findall('\"(.*?)\"', text)", "from typing import List\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "from typing import List\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"([^\"]*)\"', text)", "from typing import List\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    import re\n    return re.findall('\"(.*?)\"', text)", "from typing import List\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return [value.strip('\"') for value in text.split(',') if value.strip().startswith('\"') and value.strip().endswith('\"')]", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return [value.strip('\"') for value in text.split(',')]", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return [value.strip('\"') for value in text.split(',') if value.strip().startswith('\"') and value.strip().endswith('\"')]", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return [value.strip('\"') for value in text.split(',') if value.strip()]", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return [value.strip('\"') for value in text.split(',') if value.startswith('\"') and value.endswith('\"')]", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return [value.strip('\"') for value in text.split(',') if value.startswith('\"') and value.endswith('\"')]"], "clusters": [{"programs_str": ["from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    import re\n    return re.findall('\"(.*?)\"', text)", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    import re\n    return re.findall('\"(.*?)\"', text)", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    import re\n    return re.findall('\"(.*?)\"', text)", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    import re\n    return re.findall('\"(.*?)\"', text)", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    import re\n    return re.findall('\"(.*?)\"', text)", "from typing import List\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "from typing import List\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"([^\"]*)\"', text)", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    import re\n    return re.findall('\"(.*?)\"', text)", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    import re\n    return re.findall('\"(.*?)\"', text)", "from typing import List\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "from typing import List\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"([^\"]*)\"', text)", "from typing import List\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    import re\n    return re.findall('\"(.*?)\"', text)", "from typing import List\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)"], "outputs": "[[['Python', 'PHP', 'Java']], [['SingleValue']], [['Value1', 'Value2', 'Value3', 'Value4']], [['']], [['Mixed ', ' Inside']], [['Escape \\\\', ' Value']], [['Value with space', 'Another value']]]", "probability": 0.7, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return [value.strip('\"') for value in text.split(',') if value.strip().startswith('\"') and value.strip().endswith('\"')]", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return [value.strip('\"') for value in text.split(',')]", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return [value.strip('\"') for value in text.split(',') if value.strip().startswith('\"') and value.strip().endswith('\"')]", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return [value.strip('\"') for value in text.split(',') if value.strip()]"], "outputs": "[[['Python', ' \"PHP', ' \"Java']], [['SingleValue']], [['Value1', ' \"Value2', ' \"Value3', ' \"Value4']], [['']], [['Mixed \"Quotes\" Inside']], [['Escape \\\\\"This\\\\\" Value']], [['Value with space', ' \"Another value']]]", "probability": 0.2, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['\"Python\", \"PHP\", \"Java\"'], [['Python', ' \"PHP', ' \"Java']], [['Python', 'PHP', 'Java']]]]"}, {"programs_str": ["from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return [value.strip('\"') for value in text.split(',') if value.startswith('\"') and value.endswith('\"')]", "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return [value.strip('\"') for value in text.split(',') if value.startswith('\"') and value.endswith('\"')]"], "outputs": "[[['Python']], [['SingleValue']], [['Value1']], [['']], [['Mixed \"Quotes\" Inside']], [['Escape \\\\\"This\\\\\" Value']], [['Value with space']]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['\"Python\", \"PHP\", \"Java\"'], [['Python']], [['Python', 'PHP', 'Java']]]]"}]}
{"task_id": "Mbpp/564", "requirement": "from typing import List\n\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 1], 3], [[1, 2, 3, 4], 4], [[5, 5, 5, 5], 4], [[1, 2, 3, 3, 4], 5], [[], 0], [[1], 1], [[1, 2, 3], 3], [[1, 1, 2, 2, 3, 3], 6]]", "programs": ["from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    unique_count = len(unique_elements)\n    count = unique_count * (unique_count - 1) // 2\n    return count", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    unique_count = len(unique_elements)\n    if unique_count < 2:\n        return 0\n    return unique_count * (unique_count - 1) // 2", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    size = len(unique_elements)\n    if size < 2:\n        return 0\n    count = size * (size - 1) // 2\n    return count", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    unique_list = list(unique_elements)\n    for i in range(len(unique_list)):\n        for j in range(i + 1, len(unique_list)):\n            count += 1\n    return count", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    unique_count = len(unique_elements)\n    count = unique_count * (unique_count - 1) // 2\n    return count", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_pairs = len(unique_elements) * (len(unique_elements) - 1) // 2\n    return total_pairs", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    unique_list = list(unique_elements)\n    for i in range(len(unique_list)):\n        for j in range(i + 1, len(unique_list)):\n            count += 1\n    return count", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    unique_count = len(unique_elements)\n    if unique_count >= 2:\n        count = unique_count * (unique_count - 1) // 2\n    return count", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = len(unique_elements)\n    return count * (count - 1) // 2", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = len(unique_elements)\n    return count * (count - 1) // 2", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    unique_list = list(unique_elements)\n    length = len(unique_list)\n    return length * (length - 1) // 2", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    return len(unique_elements) * (len(unique_elements) - 1) // 2", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    for e1 in unique_elements:\n        for e2 in unique_elements:\n            if e1 != e2:\n                count += 1\n    return count // 2", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_pairs = 0\n    for element in unique_elements:\n        count_of_element = arr.count(element)\n        total_pairs += count_of_element * (n - count_of_element)\n    return total_pairs // 2", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_pairs = n * (n - 1) // 2\n    equal_pairs = 0\n    for element in unique_elements:\n        count = arr.count(element)\n        if count > 1:\n            equal_pairs += count * (count - 1) // 2\n    return total_pairs - equal_pairs", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_pairs = n * (n - 1) // 2\n    same_element_pairs = sum((arr.count(x) * (arr.count(x) - 1) // 2 for x in unique_elements))\n    unequal_pairs = total_pairs - same_element_pairs\n    return unequal_pairs", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    for element in unique_elements:\n        count += arr.count(element) * (n - arr.count(element))\n    return count // 2", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_pairs = 0\n    for elem in unique_elements:\n        total_pairs += arr.count(elem) * (n - arr.count(elem))\n    return total_pairs // 2", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_elements = len(arr)\n    count = 0\n    for element in unique_elements:\n        count += total_elements - arr.count(element)\n    return count // 2"], "clusters": [{"programs_str": ["from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    unique_count = len(unique_elements)\n    count = unique_count * (unique_count - 1) // 2\n    return count", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    unique_count = len(unique_elements)\n    if unique_count < 2:\n        return 0\n    return unique_count * (unique_count - 1) // 2", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    size = len(unique_elements)\n    if size < 2:\n        return 0\n    count = size * (size - 1) // 2\n    return count", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    unique_list = list(unique_elements)\n    for i in range(len(unique_list)):\n        for j in range(i + 1, len(unique_list)):\n            count += 1\n    return count", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    unique_count = len(unique_elements)\n    count = unique_count * (unique_count - 1) // 2\n    return count", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_pairs = len(unique_elements) * (len(unique_elements) - 1) // 2\n    return total_pairs", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    unique_list = list(unique_elements)\n    for i in range(len(unique_list)):\n        for j in range(i + 1, len(unique_list)):\n            count += 1\n    return count", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    unique_count = len(unique_elements)\n    if unique_count >= 2:\n        count = unique_count * (unique_count - 1) // 2\n    return count", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = len(unique_elements)\n    return count * (count - 1) // 2", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = len(unique_elements)\n    return count * (count - 1) // 2", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    unique_list = list(unique_elements)\n    length = len(unique_list)\n    return length * (length - 1) // 2", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    return len(unique_elements) * (len(unique_elements) - 1) // 2", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    for e1 in unique_elements:\n        for e2 in unique_elements:\n            if e1 != e2:\n                count += 1\n    return count // 2"], "outputs": "[[1], [6], [0], [6], [0], [0], [3], [3]]", "probability": 0.65, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 2, 1], 3], [1], [2]]]"}, {"programs_str": ["from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_pairs = 0\n    for element in unique_elements:\n        count_of_element = arr.count(element)\n        total_pairs += count_of_element * (n - count_of_element)\n    return total_pairs // 2", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_pairs = n * (n - 1) // 2\n    equal_pairs = 0\n    for element in unique_elements:\n        count = arr.count(element)\n        if count > 1:\n            equal_pairs += count * (count - 1) // 2\n    return total_pairs - equal_pairs", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_pairs = n * (n - 1) // 2\n    same_element_pairs = sum((arr.count(x) * (arr.count(x) - 1) // 2 for x in unique_elements))\n    unequal_pairs = total_pairs - same_element_pairs\n    return unequal_pairs", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    for element in unique_elements:\n        count += arr.count(element) * (n - arr.count(element))\n    return count // 2", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_pairs = 0\n    for elem in unique_elements:\n        total_pairs += arr.count(elem) * (n - arr.count(elem))\n    return total_pairs // 2"], "outputs": "[[2], [6], [0], [9], [0], [0], [3], [12]]", "probability": 0.3, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_elements = len(arr)\n    count = 0\n    for element in unique_elements:\n        count += total_elements - arr.count(element)\n    return count // 2"], "outputs": "[[1], [6], [0], [7], [0], [0], [3], [6]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 2, 1], 3], [1], [2]]]"}]}
{"task_id": "Mbpp/565", "requirement": "from typing import List\n\n\ndef split(word: str) -> List[str]:\n\"\"\"\nWrite a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"", "llm_generated_inputs": "[['python'], ['a'], ['hello world'], ['12345'], ['!@#$%'], [''], ['split'], ['abcdefghijklmnopqrstuvwxyz']]", "programs": ["from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)"], "clusters": [{"programs_str": ["from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)"], "outputs": "[[['p', 'y', 't', 'h', 'o', 'n']], [['a']], [['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']], [['1', '2', '3', '4', '5']], [['!', '@', '#', '$', '%']], [[]], [['s', 'p', 'l', 'i', 't']], [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/566", "requirement": "def sum_digits(n: int) -> int:\n\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12\n\"\"\"", "llm_generated_inputs": "[[0], [5], [123], [9999], [1000000], [456789], [7], [10]]", "programs": ["def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))"], "clusters": [{"programs_str": ["def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))"], "outputs": "[[0], [5], [6], [36], [1], [39], [7], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/567", "requirement": "from typing import List\n\n\ndef issort_list(lst: List[int]) -> bool:\n\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[1, 2, 2, 3, 4]], [[]], [[1]], [[1, 3, 2]], [[2, 2, 2, 2]], [[1, 2, 3, 3, 4, 5]], [[100, 200, 300, 400]], [[-5, 0, 5, 10]]]", "programs": ["from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)"], "clusters": [{"programs_str": ["from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)"], "outputs": "[[True], [False], [True], [True], [True], [False], [True], [True], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/568", "requirement": "from typing import List\n\n\ndef empty_list(length: int) -> List[dict]:\n\"\"\"\nWrite a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"", "llm_generated_inputs": "[[0], [1], [3], [5], [10], [100], [-1]]", "programs": ["from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]"], "clusters": [{"programs_str": ["from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]"], "outputs": "[[[]], [[{}]], [[{}, {}, {}]], [[{}, {}, {}, {}, {}]], [[{}, {}, {}, {}, {}, {}, {}, {}, {}, {}]], [[{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/569", "requirement": "from typing import List\n\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"", "llm_generated_inputs": "[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]], [[[], ['a', 'b', 'c'], ['c', 'b', 'a']]], [[['dog', 'cat'], ['apple', 'banana', 'grape']]], [[['zebra', 'lion'], ['tiger', 'elephant', 'bear']]], [[['banana', 'apple', 'cherry'], ['x', 'y', 'z', 'a']]], [[['single']]], [[['car'], ['bike'], ['plane']]], [[['aaa', 'aab', 'abb', 'aba'], ['zzz', 'zyy', 'zyz']]], [[['']]], [[['z', 'y', 'x'], ['c', 'b', 'a']]]]", "programs": ["from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]"], "clusters": [{"programs_str": ["from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]"], "outputs": "[[[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]], [[[], ['a', 'b', 'c'], ['a', 'b', 'c']]], [[['cat', 'dog'], ['apple', 'banana', 'grape']]], [[['lion', 'zebra'], ['bear', 'elephant', 'tiger']]], [[['apple', 'banana', 'cherry'], ['a', 'x', 'y', 'z']]], [[['single']]], [[['car'], ['bike'], ['plane']]], [[['aaa', 'aab', 'aba', 'abb'], ['zyy', 'zyz', 'zzz']]], [[['']]], [[['x', 'y', 'z'], ['a', 'b', 'c']]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/572", "requirement": "from typing import List\n\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 2, 3, 4, 5]], [[5, 5, 5, 5, 5]], [[1, 1, 1, 1]], [[10, 10, 20, 30, 20, 30]], [[8, 7, 8, 6, 9, 6]], [[1, 2, 3, 4, 5]], [[-1, 2, -1, -2, 2]], [[-5, -5, -5, 0, 1, 2, 2, 1]], [[0, 0, 0]], [[]]]", "programs": ["from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    from collections import Counter\n    num_count = Counter(nums)\n    return [num for num, count in num_count.items() if count == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n    return [num for num, cnt in count.items() if cnt == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    from collections import Counter\n    count = Counter(nums)\n    return [num for num, cnt in count.items() if cnt == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    return [num for num, count in num_count.items() if count == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    from collections import Counter\n    count = Counter(nums)\n    return [num for num, freq in count.items() if freq == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n    return [num for num, c in count.items() if c == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    count_map = {}\n    for num in nums:\n        count_map[num] = count_map.get(num, 0) + 1\n    return [num for num, count in count_map.items() if count == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    from collections import Counter\n    count = Counter(nums)\n    return [num for num, freq in count.items() if freq == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    counts = {}\n    for num in nums:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num, count in counts.items() if count == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    num_count = {}\n    for num in nums:\n        num_count[num] = num_count.get(num, 0) + 1\n    return [num for num, count in num_count.items() if count == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    num_count = {}\n    for num in nums:\n        num_count[num] = num_count.get(num, 0) + 1\n    return [num for num, count in num_count.items() if count == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    from collections import Counter\n    count = Counter(nums)\n    return [num for num, cnt in count.items() if cnt == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n    return [num for num, cnt in count.items() if cnt == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    counts = {}\n    for num in nums:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num, count in counts.items() if count == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    from collections import Counter\n    count = Counter(nums)\n    return [num for num, freq in count.items() if freq == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    from collections import Counter\n    count = Counter(nums)\n    return [num for num, cnt in count.items() if cnt == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    from collections import Counter\n    counts = Counter(nums)\n    return [num for num, count in counts.items() if count == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n    return [num for num, cnt in count.items() if cnt == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    from collections import Counter\n    counts = Counter(nums)\n    return [num for num, count in counts.items() if count == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    num_count = {}\n    for num in nums:\n        num_count[num] = num_count.get(num, 0) + 1\n    return [num for num, count in num_count.items() if count == 1]"], "clusters": [{"programs_str": ["from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    from collections import Counter\n    num_count = Counter(nums)\n    return [num for num, count in num_count.items() if count == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n    return [num for num, cnt in count.items() if cnt == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    from collections import Counter\n    count = Counter(nums)\n    return [num for num, cnt in count.items() if cnt == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    return [num for num, count in num_count.items() if count == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    from collections import Counter\n    count = Counter(nums)\n    return [num for num, freq in count.items() if freq == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n    return [num for num, c in count.items() if c == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    count_map = {}\n    for num in nums:\n        count_map[num] = count_map.get(num, 0) + 1\n    return [num for num, count in count_map.items() if count == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    from collections import Counter\n    count = Counter(nums)\n    return [num for num, freq in count.items() if freq == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    counts = {}\n    for num in nums:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num, count in counts.items() if count == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    num_count = {}\n    for num in nums:\n        num_count[num] = num_count.get(num, 0) + 1\n    return [num for num, count in num_count.items() if count == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    num_count = {}\n    for num in nums:\n        num_count[num] = num_count.get(num, 0) + 1\n    return [num for num, count in num_count.items() if count == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    from collections import Counter\n    count = Counter(nums)\n    return [num for num, cnt in count.items() if cnt == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n    return [num for num, cnt in count.items() if cnt == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    counts = {}\n    for num in nums:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num, count in counts.items() if count == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    from collections import Counter\n    count = Counter(nums)\n    return [num for num, freq in count.items() if freq == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    from collections import Counter\n    count = Counter(nums)\n    return [num for num, cnt in count.items() if cnt == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    from collections import Counter\n    counts = Counter(nums)\n    return [num for num, count in counts.items() if count == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n    return [num for num, cnt in count.items() if cnt == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    from collections import Counter\n    counts = Counter(nums)\n    return [num for num, count in counts.items() if count == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    num_count = {}\n    for num in nums:\n        num_count[num] = num_count.get(num, 0) + 1\n    return [num for num, count in num_count.items() if count == 1]"], "outputs": "[[[1, 4, 5]], [[]], [[]], [[]], [[7, 9]], [[1, 2, 3, 4, 5]], [[-2]], [[0]], [[]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/573", "requirement": "from typing import List\n\n\ndef unique_product(list_data: List[int]) -> int:\n\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"", "llm_generated_inputs": "[[[10, 20, 30, 40, 20, 50, 60, 40]], [[1, 2, 3, 4, 5]], [[5, 5, 5, 5, 5]], [[0, 1, 2, 3, 4]], [[-1, -2, -3, -4, -1]], [[100, -100, 100, 200]], [[10]], [[]], [[1, 2, 2, 3, 4, 4, 5, 1]], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]]]", "programs": ["from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"], "clusters": [{"programs_str": ["from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"], "outputs": "[[720000000], [120], [5], [0], [24], [-2000000], [10], [1], [120], [36288000000000000]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/576", "requirement": "from typing import List\n\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"", "llm_generated_inputs": "[[[1, 4, 3, 5], [1, 2]], [[1, 4, 3, 5], [4, 3]], [[1, 4, 3, 5], []], [[], [1, 2]], [[1, 2, 3, 4, 5], [2, 3]], [[], []], [[1, 2, 3], [1, 2, 3]], [[1, 2, 3, 4, 5], [5]], [[1, 2, 3], [2, 3, 4]], [[1, 1, 2, 3, 1, 1], [1, 2]]]", "programs": ["from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    n, m = (len(A), len(B))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    return any((B == A[i:i + len(B)] for i in range(len(A) - len(B) + 1)))", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    len_A, len_B = (len(A), len(B))\n    if len_B == 0:\n        return True\n    if len_A < len_B:\n        return False\n    for i in range(len_A - len_B + 1):\n        if A[i:i + len_B] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    n, m = (len(A), len(B))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    n, m = (len(A), len(B))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    n, m = (len(A), len(B))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if not A or len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    n, m = (len(A), len(B))\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    n, m = (len(A), len(B))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    n, m = (len(A), len(B))\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    n, m = (len(A), len(B))\n    if m > n:\n        return False\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    return False"], "clusters": [{"programs_str": ["from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    n, m = (len(A), len(B))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    return any((B == A[i:i + len(B)] for i in range(len(A) - len(B) + 1)))", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    len_A, len_B = (len(A), len(B))\n    if len_B == 0:\n        return True\n    if len_A < len_B:\n        return False\n    for i in range(len_A - len_B + 1):\n        if A[i:i + len_B] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    n, m = (len(A), len(B))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    n, m = (len(A), len(B))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    n, m = (len(A), len(B))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if not A or len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    n, m = (len(A), len(B))\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    n, m = (len(A), len(B))\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    n, m = (len(A), len(B))\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    n, m = (len(A), len(B))\n    if m > n:\n        return False\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    return False"], "outputs": "[[False], [True], [True], [False], [True], [True], [True], [True], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/577", "requirement": "def last_Digit_Factorial(n: int) -> int:\n\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [3], [4], [5], [10], [20], [25], [100], [5], [9], [7], [12]]", "programs": ["def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10"], "clusters": [{"programs_str": ["def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10"], "outputs": "[[1], [1], [2], [6], [4], [0], [0], [0], [0], [0], [0], [0], [0], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/578", "requirement": "from typing import List\n\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3], ['a', 'b', 'c'], [True, False, True]], [[], [], []], [[1, 2], [10, 20], [100, 200]], [['x', 'y', 'z'], [1, 2, 3], [True, False, True]], [[5, 6, 7, 8], ['alpha', 'beta', 'gamma', 'delta'], [10.0, 20.0, 30.0, 40.0]], [['apple', 'banana', 'cherry'], [10, 20, 30], [1000, 2000, 3000]], [[1, 2, 3, 4], ['A', 'B', 'C', 'D'], [None, None, None, None]]]", "programs": ["from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for a, b, c in zip(list1, list2, list3):\n        result.extend([a, b, c])\n    return result", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for a, b, c in zip(list1, list2, list3):\n        result.extend([a, b, c])\n    return result", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    interleaved = []\n    for a, b, c in zip(list1, list2, list3):\n        interleaved.append(a)\n        interleaved.append(b)\n        interleaved.append(c)\n    return interleaved", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for a, b, c in zip(list1, list2, list3):\n        result.extend([a, b, c])\n    return result", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for i in range(len(list1)):\n        result.extend([list1[i], list2[i], list3[i]])\n    return result", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    interleaved = []\n    for a, b, c in zip(list1, list2, list3):\n        interleaved.extend([a, b, c])\n    return interleaved", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for a, b, c in zip(list1, list2, list3):\n        result.extend([a, b, c])\n    return result", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [elem for triplet in zip(list1, list2, list3) for elem in triplet]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [item for sublist in zip(list1, list2, list3) for item in sublist]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for i in range(len(list1)):\n        result.extend([list1[i], list2[i], list3[i]])\n    return result", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"], "clusters": [{"programs_str": ["from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for a, b, c in zip(list1, list2, list3):\n        result.extend([a, b, c])\n    return result", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for a, b, c in zip(list1, list2, list3):\n        result.extend([a, b, c])\n    return result", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    interleaved = []\n    for a, b, c in zip(list1, list2, list3):\n        interleaved.append(a)\n        interleaved.append(b)\n        interleaved.append(c)\n    return interleaved", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for a, b, c in zip(list1, list2, list3):\n        result.extend([a, b, c])\n    return result", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for i in range(len(list1)):\n        result.extend([list1[i], list2[i], list3[i]])\n    return result", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    interleaved = []\n    for a, b, c in zip(list1, list2, list3):\n        interleaved.extend([a, b, c])\n    return interleaved", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for a, b, c in zip(list1, list2, list3):\n        result.extend([a, b, c])\n    return result", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [elem for triplet in zip(list1, list2, list3) for elem in triplet]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [item for sublist in zip(list1, list2, list3) for item in sublist]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for i in range(len(list1)):\n        result.extend([list1[i], list2[i], list3[i]])\n    return result", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"], "outputs": "[[[1, 'a', True, 2, 'b', False, 3, 'c', True]], [[]], [[1, 10, 100, 2, 20, 200]], [['x', 1, True, 'y', 2, False, 'z', 3, True]], [[5, 'alpha', 10.0, 6, 'beta', 20.0, 7, 'gamma', 30.0, 8, 'delta', 40.0]], [['apple', 10, 1000, 'banana', 20, 2000, 'cherry', 30, 3000]], [[1, 'A', None, 2, 'B', None, 3, 'C', None, 4, 'D', None]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/579", "requirement": "from typing import Tuple\n\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"", "llm_generated_inputs": "[[(3, 4, 5, 6), (5, 7, 4, 10)], [('apple', 'banana'), ('banana', 'cherry')]]", "programs": ["from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(dissimilar)", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(dissimilar)", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    dissimilar = set(test_tup1).symmetric_difference(set(test_tup2))\n    return tuple(dissimilar)", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(dissimilar)", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(dissimilar)", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))"], "clusters": [{"programs_str": ["from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(dissimilar)", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(dissimilar)", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    dissimilar = set(test_tup1).symmetric_difference(set(test_tup2))\n    return tuple(dissimilar)", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(dissimilar)", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(dissimilar)", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))"], "outputs": "[[(3, 6, 7, 10)], [('cherry', 'apple')]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/580", "requirement": "def extract_even(test_tuple: tuple) -> tuple:\n\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"", "llm_generated_inputs": "[[(4, 5, (7, 6, (2, 4)), 6, 8)], [((1, 2), (3, 4), (5, (6, 7, (8, 9))))], [((1, 3), (5, 7), (9, (11, 12)))], [(9, 3, (4, (5, 6), 8), 10)], [((2, (3, (4, 5))), 6)], [((0, 2, 4, 6, 8), (1, 3, 5, 7, 9))], [()], [((3,), (4, (5,)))]]", "programs": ["def extract_even(test_tuple: tuple) -> tuple:\n\n    def remove_uneven(nested_tuple):\n        if isinstance(nested_tuple, tuple):\n            return tuple((remove_uneven(item) for item in nested_tuple if item % 2 == 0 or not isinstance(item, int)))\n        return nested_tuple\n    return remove_uneven(test_tuple)", "def extract_even(test_tuple: tuple) -> tuple:\n    if isinstance(test_tuple, tuple):\n        return tuple((extract_even(item) for item in test_tuple if isinstance(item, int) and item % 2 == 0 or (isinstance(item, tuple) and any((i % 2 == 0 for i in item)))))\n    return test_tuple", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def helper(tup):\n        result = []\n        for item in tup:\n            if isinstance(item, tuple):\n                nested_result = helper(item)\n                if nested_result:\n                    result.append(nested_result)\n            elif item % 2 == 0:\n                result.append(item)\n        return tuple(result)\n    return helper(test_tuple)", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def even_filter(t):\n        if isinstance(t, tuple):\n            return tuple((even_filter(x) for x in t if isinstance(x, int) and x % 2 == 0 or (isinstance(x, tuple) and even_filter(x))))\n        elif isinstance(t, int) and t % 2 == 0:\n            return t\n        return ()\n    return even_filter(test_tuple)", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def remove_uneven_elements(item):\n        if isinstance(item, tuple):\n            return tuple((remove_uneven_elements(i) for i in item if isinstance(i, int) and i % 2 == 0 or (isinstance(i, tuple) and remove_uneven_elements(i))))\n        return item if isinstance(item, int) and item % 2 == 0 else None\n    result = remove_uneven_elements(test_tuple)\n    return tuple(filter(lambda x: x is not None, result))", "def extract_even(test_tuple: tuple) -> tuple:\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            nested_result = extract_even(item)\n            if nested_result:\n                result.append(nested_result)\n        elif item % 2 == 0:\n            result.append(item)\n    return tuple(result)", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def _extract_even(tup):\n        result = []\n        for item in tup:\n            if isinstance(item, tuple):\n                nested_result = _extract_even(item)\n                if nested_result:\n                    result.append(nested_result)\n            elif item % 2 == 0:\n                result.append(item)\n        return tuple(result)\n    return _extract_even(test_tuple)", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def is_even(n):\n        return isinstance(n, int) and n % 2 == 0\n\n    def filter_tuple(t):\n        result = []\n        for item in t:\n            if isinstance(item, tuple):\n                filtered_item = filter_tuple(item)\n                if filtered_item:\n                    result.append(filtered_item)\n            elif is_even(item):\n                result.append(item)\n        return tuple(result)\n    return filter_tuple(test_tuple)", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def helper(t):\n        if isinstance(t, tuple):\n            return tuple((helper(x) for x in t if isinstance(x, int) and x % 2 == 0 or isinstance(x, tuple)))\n        return t if isinstance(t, int) and t % 2 == 0 else None\n    return tuple(filter(lambda x: x is not None, helper(test_tuple)))", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def remove_uneven_elements(t):\n        if isinstance(t, tuple):\n            return tuple((remove_uneven_elements(x) for x in t if isinstance(x, int) and x % 2 == 0 or isinstance(x, tuple)))\n        return t\n    return remove_uneven_elements(test_tuple)", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def recursive_extract(tup):\n        if isinstance(tup, tuple):\n            return tuple((recursive_extract(x) for x in tup if isinstance(x, int) and x % 2 == 0 or isinstance(x, tuple)))\n        return tup if isinstance(tup, int) and tup % 2 == 0 else None\n    result = recursive_extract(test_tuple)\n    return tuple((x for x in result if x is not None))", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def _extract_even(t):\n        if isinstance(t, tuple):\n            return tuple((_extract_even(i) for i in t if isinstance(i, int) and i % 2 == 0 or isinstance(i, tuple)))\n        return t if isinstance(t, int) and t % 2 == 0 else None\n    return _extract_even(test_tuple)", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def _extract_even(t):\n        if isinstance(t, tuple):\n            return tuple((_extract_even(x) for x in t if isinstance(x, int) and x % 2 == 0 or isinstance(x, tuple)))\n        return t if isinstance(t, int) and t % 2 == 0 else None\n    return tuple(filter(lambda x: x is not None, _extract_even(test_tuple)))", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def helper(t):\n        if isinstance(t, tuple):\n            return tuple((helper(el) for el in t if isinstance(el, int) and el % 2 == 0 or isinstance(el, tuple)))\n        return t if isinstance(t, int) and t % 2 == 0 else None\n    return tuple(filter(lambda x: x is not None, helper(test_tuple)))", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def helper(tup):\n        if isinstance(tup, tuple):\n            return tuple((helper(item) for item in tup if isinstance(item, int) and item % 2 == 0 or isinstance(item, tuple)))\n        return tup if tup % 2 == 0 else None\n    return helper(test_tuple)", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def recursive_extract(t):\n        if isinstance(t, tuple):\n            return tuple((recursive_extract(i) for i in t if isinstance(i, int) and i % 2 == 0 or isinstance(i, tuple)))\n        return t if isinstance(t, int) and t % 2 == 0 else ()\n    return recursive_extract(test_tuple)", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def helper(tup):\n        if isinstance(tup, tuple):\n            return tuple((helper(item) for item in tup if isinstance(item, int) and item % 2 == 0 or not isinstance(item, int)))\n        return tup\n    return helper(test_tuple)", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def filter_even(data):\n        if isinstance(data, tuple):\n            return tuple((filter_even(item) for item in data if isinstance(item, int) and item % 2 == 0 or isinstance(item, tuple)))\n        return data if isinstance(data, int) and data % 2 == 0 else None\n    result = filter_even(test_tuple)\n    return tuple(filter(item is not None, result))", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def inner_extract(t):\n        if isinstance(t, tuple):\n            return tuple((inner_extract(x) for x in t if isinstance(x, int) and x % 2 == 0 or (isinstance(x, tuple) and any((isinstance(y, int) and y % 2 == 0 for y in x)))))\n        return t if isinstance(t, int) and t % 2 == 0 else ()\n    return inner_extract(test_tuple)", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def recursive_extract(t):\n        if isinstance(t, tuple):\n            return tuple((recursive_extract(item) for item in t if isinstance(item, int) and item % 2 == 0 or (isinstance(item, tuple) and any((isinstance(i, int) and i % 2 == 0 for i in item)))))\n        return t if isinstance(t, int) and t % 2 == 0 else None\n    return recursive_extract(test_tuple)"], "clusters": [{"programs_str": ["def extract_even(test_tuple: tuple) -> tuple:\n\n    def remove_uneven(nested_tuple):\n        if isinstance(nested_tuple, tuple):\n            return tuple((remove_uneven(item) for item in nested_tuple if item % 2 == 0 or not isinstance(item, int)))\n        return nested_tuple\n    return remove_uneven(test_tuple)"], "outputs": "[['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], [()], ['TypeError']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[(4, 5, (7, 6, (2, 4)), 6, 8)], ['TypeError'], [(4, (6, (2, 4)), 6, 8)]]]"}, {"programs_str": ["def extract_even(test_tuple: tuple) -> tuple:\n    if isinstance(test_tuple, tuple):\n        return tuple((extract_even(item) for item in test_tuple if isinstance(item, int) and item % 2 == 0 or (isinstance(item, tuple) and any((i % 2 == 0 for i in item)))))\n    return test_tuple"], "outputs": "[[(4, (6, (2, 4)), 6, 8)], ['TypeError'], ['TypeError'], [((4, (6,), 8), 10)], ['TypeError'], [((0, 2, 4, 6, 8),)], [()], [((4,),)]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def extract_even(test_tuple: tuple) -> tuple:\n\n    def helper(tup):\n        result = []\n        for item in tup:\n            if isinstance(item, tuple):\n                nested_result = helper(item)\n                if nested_result:\n                    result.append(nested_result)\n            elif item % 2 == 0:\n                result.append(item)\n        return tuple(result)\n    return helper(test_tuple)", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def even_filter(t):\n        if isinstance(t, tuple):\n            return tuple((even_filter(x) for x in t if isinstance(x, int) and x % 2 == 0 or (isinstance(x, tuple) and even_filter(x))))\n        elif isinstance(t, int) and t % 2 == 0:\n            return t\n        return ()\n    return even_filter(test_tuple)", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def remove_uneven_elements(item):\n        if isinstance(item, tuple):\n            return tuple((remove_uneven_elements(i) for i in item if isinstance(i, int) and i % 2 == 0 or (isinstance(i, tuple) and remove_uneven_elements(i))))\n        return item if isinstance(item, int) and item % 2 == 0 else None\n    result = remove_uneven_elements(test_tuple)\n    return tuple(filter(lambda x: x is not None, result))", "def extract_even(test_tuple: tuple) -> tuple:\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            nested_result = extract_even(item)\n            if nested_result:\n                result.append(nested_result)\n        elif item % 2 == 0:\n            result.append(item)\n    return tuple(result)", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def _extract_even(tup):\n        result = []\n        for item in tup:\n            if isinstance(item, tuple):\n                nested_result = _extract_even(item)\n                if nested_result:\n                    result.append(nested_result)\n            elif item % 2 == 0:\n                result.append(item)\n        return tuple(result)\n    return _extract_even(test_tuple)", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def is_even(n):\n        return isinstance(n, int) and n % 2 == 0\n\n    def filter_tuple(t):\n        result = []\n        for item in t:\n            if isinstance(item, tuple):\n                filtered_item = filter_tuple(item)\n                if filtered_item:\n                    result.append(filtered_item)\n            elif is_even(item):\n                result.append(item)\n        return tuple(result)\n    return filter_tuple(test_tuple)"], "outputs": "[[(4, (6, (2, 4)), 6, 8)], [((2,), (4,), ((6, (8,)),))], [(((12,),),)], [((4, (6,), 8), 10)], [((2, ((4,),)), 6)], [((0, 2, 4, 6, 8),)], [()], [((4,),)]]", "probability": 0.3, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def extract_even(test_tuple: tuple) -> tuple:\n\n    def helper(t):\n        if isinstance(t, tuple):\n            return tuple((helper(x) for x in t if isinstance(x, int) and x % 2 == 0 or isinstance(x, tuple)))\n        return t if isinstance(t, int) and t % 2 == 0 else None\n    return tuple(filter(lambda x: x is not None, helper(test_tuple)))", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def remove_uneven_elements(t):\n        if isinstance(t, tuple):\n            return tuple((remove_uneven_elements(x) for x in t if isinstance(x, int) and x % 2 == 0 or isinstance(x, tuple)))\n        return t\n    return remove_uneven_elements(test_tuple)", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def recursive_extract(tup):\n        if isinstance(tup, tuple):\n            return tuple((recursive_extract(x) for x in tup if isinstance(x, int) and x % 2 == 0 or isinstance(x, tuple)))\n        return tup if isinstance(tup, int) and tup % 2 == 0 else None\n    result = recursive_extract(test_tuple)\n    return tuple((x for x in result if x is not None))", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def _extract_even(t):\n        if isinstance(t, tuple):\n            return tuple((_extract_even(i) for i in t if isinstance(i, int) and i % 2 == 0 or isinstance(i, tuple)))\n        return t if isinstance(t, int) and t % 2 == 0 else None\n    return _extract_even(test_tuple)", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def _extract_even(t):\n        if isinstance(t, tuple):\n            return tuple((_extract_even(x) for x in t if isinstance(x, int) and x % 2 == 0 or isinstance(x, tuple)))\n        return t if isinstance(t, int) and t % 2 == 0 else None\n    return tuple(filter(lambda x: x is not None, _extract_even(test_tuple)))", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def helper(t):\n        if isinstance(t, tuple):\n            return tuple((helper(el) for el in t if isinstance(el, int) and el % 2 == 0 or isinstance(el, tuple)))\n        return t if isinstance(t, int) and t % 2 == 0 else None\n    return tuple(filter(lambda x: x is not None, helper(test_tuple)))", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def helper(tup):\n        if isinstance(tup, tuple):\n            return tuple((helper(item) for item in tup if isinstance(item, int) and item % 2 == 0 or isinstance(item, tuple)))\n        return tup if tup % 2 == 0 else None\n    return helper(test_tuple)", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def recursive_extract(t):\n        if isinstance(t, tuple):\n            return tuple((recursive_extract(i) for i in t if isinstance(i, int) and i % 2 == 0 or isinstance(i, tuple)))\n        return t if isinstance(t, int) and t % 2 == 0 else ()\n    return recursive_extract(test_tuple)", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def helper(tup):\n        if isinstance(tup, tuple):\n            return tuple((helper(item) for item in tup if isinstance(item, int) and item % 2 == 0 or not isinstance(item, int)))\n        return tup\n    return helper(test_tuple)"], "outputs": "[[(4, (6, (2, 4)), 6, 8)], [((2,), (4,), ((6, (8,)),))], [((), (), ((12,),))], [((4, (6,), 8), 10)], [((2, ((4,),)), 6)], [((0, 2, 4, 6, 8), ())], [()], [((), (4, ()))]]", "probability": 0.45, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def extract_even(test_tuple: tuple) -> tuple:\n\n    def filter_even(data):\n        if isinstance(data, tuple):\n            return tuple((filter_even(item) for item in data if isinstance(item, int) and item % 2 == 0 or isinstance(item, tuple)))\n        return data if isinstance(data, int) and data % 2 == 0 else None\n    result = filter_even(test_tuple)\n    return tuple(filter(item is not None, result))"], "outputs": "[['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[(4, 5, (7, 6, (2, 4)), 6, 8)], ['NameError'], [(4, (6, (2, 4)), 6, 8)]]]"}, {"programs_str": ["def extract_even(test_tuple: tuple) -> tuple:\n\n    def inner_extract(t):\n        if isinstance(t, tuple):\n            return tuple((inner_extract(x) for x in t if isinstance(x, int) and x % 2 == 0 or (isinstance(x, tuple) and any((isinstance(y, int) and y % 2 == 0 for y in x)))))\n        return t if isinstance(t, int) and t % 2 == 0 else ()\n    return inner_extract(test_tuple)", "def extract_even(test_tuple: tuple) -> tuple:\n\n    def recursive_extract(t):\n        if isinstance(t, tuple):\n            return tuple((recursive_extract(item) for item in t if isinstance(item, int) and item % 2 == 0 or (isinstance(item, tuple) and any((isinstance(i, int) and i % 2 == 0 for i in item)))))\n        return t if isinstance(t, int) and t % 2 == 0 else None\n    return recursive_extract(test_tuple)"], "outputs": "[[(4, (6, (2, 4)), 6, 8)], [((2,), (4,))], [()], [((4, (6,), 8), 10)], [((2,), 6)], [((0, 2, 4, 6, 8),)], [()], [((4,),)]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/581", "requirement": "def surface_Area(b: float, s: float) -> float:\n\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33\n\"\"\"", "llm_generated_inputs": "[[3, 4], [0, 2], [5, 0], [1, 1], [2.5, 4.5], [10, 10], [100, 50], [-3, 4], [3, -4], [0, 0]]", "programs": ["def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    total_surface_area = base_area + lateral_area\n    return total_surface_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (b / 2) ** 2 + s ** 2\n    slant_height = slant_height ** 0.5\n    lateral_area = 2 * b * slant_height\n    total_area = base_area + lateral_area\n    return total_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    total_surface_area = base_area + lateral_area\n    return total_surface_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    triangular_area = b * slant_height / 2\n    total_surface_area = base_area + 4 * triangular_area\n    return total_surface_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, h: float) -> float:\n    base_area = b * b\n    slant_height = (h ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = ((b / 2) ** 2 + s ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (b / 2) ** 2 + s ** 2\n    slant_height = slant_height ** 0.5\n    lateral_area = 2 * b * slant_height\n    total_surface_area = base_area + lateral_area\n    return total_surface_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    side_area = 2 * b * s\n    total_surface_area = base_area + side_area\n    return total_surface_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    lateral_area = 2 * b * s\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    lateral_area = 2 * b * (s ** 2 + (b / 2) ** 2) ** 0.5 / 2\n    return base_area + lateral_area"], "clusters": [{"programs_str": ["def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    total_surface_area = base_area + lateral_area\n    return total_surface_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (b / 2) ** 2 + s ** 2\n    slant_height = slant_height ** 0.5\n    lateral_area = 2 * b * slant_height\n    total_area = base_area + lateral_area\n    return total_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    total_surface_area = base_area + lateral_area\n    return total_surface_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    triangular_area = b * slant_height / 2\n    total_surface_area = base_area + 4 * triangular_area\n    return total_surface_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, h: float) -> float:\n    base_area = b * b\n    slant_height = (h ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = ((b / 2) ** 2 + s ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (s ** 2 + (b / 2) ** 2) ** 0.5\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = (b / 2) ** 2 + s ** 2\n    slant_height = slant_height ** 0.5\n    lateral_area = 2 * b * slant_height\n    total_surface_area = base_area + lateral_area\n    return total_surface_area"], "outputs": "[[34.63201123595259], [0.0], [50.0], [3.23606797749979], [29.601927115336757], [323.60679774997897], [24142.135623730952], [-16.63201123595259], [34.63201123595259], [0.0]]", "probability": 0.85, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 4], [34.63201123595259], [33]]]"}, {"programs_str": ["def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    side_area = 2 * b * s\n    total_surface_area = base_area + side_area\n    return total_surface_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    lateral_area = 2 * b * s\n    return base_area + lateral_area"], "outputs": "[[33], [0], [25], [3], [28.75], [300], [20000], [-15], [-15], [0]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    lateral_area = 2 * b * (s ** 2 + (b / 2) ** 2) ** 0.5 / 2\n    return base_area + lateral_area"], "outputs": "[[21.816005617976295], [0.0], [37.5], [2.118033988749895], [17.92596355766838], [211.80339887498948], [17071.067811865476], [-3.8160056179762947], [21.816005617976295], [0.0]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 4], [21.816005617976295], [33]]]"}]}
{"task_id": "Mbpp/583", "requirement": "def catalan_number(num: int) -> int:\n\"\"\"\nWrite a function which returns nth catalan number.\nassert catalan_number(10)==16796\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [3], [4], [5], [10], [15], [20], [-1], [100]]", "programs": ["def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    import math\n    return math.comb(2 * num, num) // (num + 1)", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    from math import factorial\n\n    def binomial_coefficient(n: int, k: int) -> int:\n        return factorial(n) // (factorial(k) * factorial(n - k))\n    return binomial_coefficient(2 * num, num) // (num + 1)", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    import math\n    return math.comb(2 * num, num) // (num + 1)", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    from math import comb\n    return comb(2 * num, num) // (num + 1)", "def catalan_number(num: int) -> int:\n    from math import comb\n    return comb(2 * num, num) // (num + 1)", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    from math import comb\n    return comb(2 * num, num) // (num + 1)", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    if num == 0:\n        return 1\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    for i in range(1, num + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - 1 - j]\n    return catalan[num]"], "clusters": [{"programs_str": ["def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    import math\n    return math.comb(2 * num, num) // (num + 1)", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    from math import factorial\n\n    def binomial_coefficient(n: int, k: int) -> int:\n        return factorial(n) // (factorial(k) * factorial(n - k))\n    return binomial_coefficient(2 * num, num) // (num + 1)", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    import math\n    return math.comb(2 * num, num) // (num + 1)", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    from math import comb\n    return comb(2 * num, num) // (num + 1)", "def catalan_number(num: int) -> int:\n    from math import comb\n    return comb(2 * num, num) // (num + 1)", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    from math import comb\n    return comb(2 * num, num) // (num + 1)", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))", "def catalan_number(num: int) -> int:\n    from math import factorial\n    return factorial(2 * num) // (factorial(num + 1) * factorial(num))"], "outputs": "[[1], [1], [2], [5], [14], [42], [16796], [9694845], [6564120420], ['ValueError'], [896519947090131496687170070074100632420837521538745909320]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def catalan_number(num: int) -> int:\n    if num == 0:\n        return 1\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    for i in range(1, num + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - 1 - j]\n    return catalan[num]"], "outputs": "[[1], [1], [2], [5], [14], [42], [16796], [9694845], [6564120420], ['IndexError'], [896519947090131496687170070074100632420837521538745909320]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/585", "requirement": "from typing import List\nfrom typing import Dict\n\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"", "llm_generated_inputs": "[[[{'name': 'Item-1', 'price': 20.0}, {'name': 'Item-2', 'price': 40.5}, {'name': 'Item-3', 'price': 15.99}], 1], [[{'name': 'Item-A', 'price': 500.0}, {'name': 'Item-B', 'price': 300.75}, {'name': 'Item-C', 'price': 150.99}], 2], [[{'name': 'Item-Alpha', 'price': 99.99}, {'name': 'Item-Beta', 'price': 99.99}, {'name': 'Item-Gamma', 'price': 0.99}], 1], [[], 0], [[{'name': 'Item-Only', 'price': 100.0}], 1], [[{'name': 'Cheap', 'price': 5.0}, {'name': 'Expensive', 'price': 15.0}], 2]]", "programs": ["from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]"], "clusters": [{"programs_str": ["from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]"], "outputs": "[[[{'name': 'Item-2', 'price': 40.5}]], [[{'name': 'Item-A', 'price': 500.0}, {'name': 'Item-B', 'price': 300.75}]], [[{'name': 'Item-Alpha', 'price': 99.99}]], [[]], [[{'name': 'Item-Only', 'price': 100.0}]], [[{'name': 'Expensive', 'price': 15.0}, {'name': 'Cheap', 'price': 5.0}]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/586", "requirement": "from typing import List\n\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"", "llm_generated_inputs": "[[[12, 10, 5, 6, 52, 36], 2], [[1, 2, 3, 4, 5], 3], [[10, 20, 30, 40], 1], [[10, 20, 30, 40], 0], [[1], 0], [[], 0], [[1, 2, 3, 4, 5], 5], [[5, 4, 3, 2, 1], 2], [[100, 200, 300], 1], [[7, 14, 21, 28, 35, 42], 6]]", "programs": ["from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]"], "clusters": [{"programs_str": ["from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]"], "outputs": "[[[5, 6, 52, 36, 12, 10]], [[4, 5, 1, 2, 3]], [[20, 30, 40, 10]], [[10, 20, 30, 40]], [[1]], [[]], [[1, 2, 3, 4, 5]], [[3, 2, 1, 5, 4]], [[200, 300, 100]], [[7, 14, 21, 28, 35, 42]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/587", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"", "llm_generated_inputs": "[[[5, 10, 7, 4, 15, 3]], [[1, 2, 3]], [['a', 'b', 'c']], [[True, False, True]], [[None]], [([],)], [(['single_element'],)], [([1, 'a', 3.14, None],)]]", "programs": ["from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)"], "clusters": [{"programs_str": ["from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)"], "outputs": "[[(5, 10, 7, 4, 15, 3)], [(1, 2, 3)], [('a', 'b', 'c')], [(True, False, True)], [(None,)], [([],)], [(['single_element'],)], [([1, 'a', 3.14, None],)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/588", "requirement": "from typing import List\n\n\ndef big_diff(nums: List[int]) -> int:\n\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 4]], [[10, 15, 2, 7, 1, 11]], [[-10, -1, -5, -20]], [[5, 5, 5, 5]], [[-1, 0, 1]], [[100]], [[0, 0, 0, 0, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]", "programs": ["from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)"], "clusters": [{"programs_str": ["from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)"], "outputs": "[[3], [14], [19], [0], [2], [0], [0], [9]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/589", "requirement": "from typing import List\n\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"", "llm_generated_inputs": "[[1, 30], [0, 16], [10, 50], [100, 150], [25, 25], [15, 16], [-10, 10], [1, 1]]", "programs": ["from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(math.ceil(math.sqrt(a))), int(math.floor(math.sqrt(b))) + 1)]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(math.ceil(math.sqrt(a)), math.floor(math.sqrt(b)) + 1) if i * i >= a and i * i <= b]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(math.ceil(math.sqrt(a)), math.floor(math.sqrt(b)) + 1) if i * i >= a and i * i <= b]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(math.ceil(math.sqrt(a))), int(math.floor(math.sqrt(b))) + 1)]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(math.ceil(math.sqrt(a)), math.floor(math.sqrt(b)) + 1) if i * i >= a and i * i <= b]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(math.ceil(math.sqrt(a))), int(math.floor(math.sqrt(b))) + 1)]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(math.ceil(math.sqrt(a)), math.floor(math.sqrt(b)) + 1)]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(math.ceil(math.sqrt(a))), int(math.floor(math.sqrt(b))) + 1)]"], "clusters": [{"programs_str": ["from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]"], "outputs": "[[[1, 4, 9, 16, 25]], [[0, 1, 4, 9, 16]], [[16, 25, 36, 49]], [[100, 121, 144]], [[25]], [[16]], ['TypeError'], [[1]]]", "probability": 0.6, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(math.ceil(math.sqrt(a))), int(math.floor(math.sqrt(b))) + 1)]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(math.ceil(math.sqrt(a)), math.floor(math.sqrt(b)) + 1) if i * i >= a and i * i <= b]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(math.ceil(math.sqrt(a)), math.floor(math.sqrt(b)) + 1) if i * i >= a and i * i <= b]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(math.ceil(math.sqrt(a))), int(math.floor(math.sqrt(b))) + 1)]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(math.ceil(math.sqrt(a)), math.floor(math.sqrt(b)) + 1) if i * i >= a and i * i <= b]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(math.ceil(math.sqrt(a))), int(math.floor(math.sqrt(b))) + 1)]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(math.ceil(math.sqrt(a)), math.floor(math.sqrt(b)) + 1)]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(math.ceil(math.sqrt(a))), int(math.floor(math.sqrt(b))) + 1)]"], "outputs": "[[[1, 4, 9, 16, 25]], [[0, 1, 4, 9, 16]], [[16, 25, 36, 49]], [[100, 121, 144]], [[25]], [[16]], ['ValueError'], [[1]]]", "probability": 0.4, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/590", "requirement": "from typing import Tuple\n\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"", "llm_generated_inputs": "[[3, 4], [1, 1], [0, 0], [5, 0], [0, 5], [-3, -4], [3, -4], [-3, 4], [0, -5], [4, 3]]", "programs": ["from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    return ((r, theta), complex(x, y))", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rect_coords = (r, theta)\n    complex_form = complex(x, y)\n    return (rect_coords, complex_form)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rect_coords = (r, theta)\n    complex_num = complex(x, y)\n    return (rect_coords, complex_num)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rect_coords = (r, theta)\n    complex_number = complex(x, y)\n    return (rect_coords, complex_number)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rect_coords = (r, theta)\n    complex_coord = complex(x, y)\n    return (rect_coords, complex_coord)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rect_coords = (r, theta)\n    complex_number = complex(x, y)\n    return (rect_coords, complex_number)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rect_coords = (r, theta)\n    complex_num = complex(x, y)\n    return (rect_coords, complex_num)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.hypot(x, y)\n    theta = math.atan2(y, x)\n    return ((r, theta), complex(x, y))", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    complex_number = complex(x, y)\n    return ((r, theta), complex_number)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    return ((r, theta), complex(x, y))", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    complex_number = complex(x, y)\n    return ((r, theta), complex_number)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    complex_number = complex(x, y)\n    return ((r, theta), complex_number)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    return ((r, theta), complex(x, y))", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rect_coords = (r, theta)\n    complex_num = complex(x, y)\n    return (rect_coords, complex_num)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rect_coords = (r, theta)\n    complex_num = complex(x, y)\n    return (rect_coords, complex_num)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    complex_number = complex(x, y)\n    return ((r, theta), complex_number)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rect_coords = (r, theta)\n    complex_representation = complex(x, y)\n    return (rect_coords, complex_representation)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(r: float, theta: float) -> Tuple[Tuple[float, float], complex]:\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    rect_coords = (x, y)\n    complex_num = complex(x, y)\n    return (rect_coords, complex_num)", "from typing import Tuple\nimport math\ncomplex = complex\n\ndef polar_rect(r: float, theta: float) -> Tuple[Tuple[float, float], complex]:\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    rectangular_coordinates = (x, y)\n    complex_number = complex(x, y)\n    return (rectangular_coordinates, complex_number)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rect_coords = (r, theta)\n    complex_rep = complex(r * math.cos(theta), r * math.sin(theta))\n    return (rect_coords, complex_rep)"], "clusters": [{"programs_str": ["from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    return ((r, theta), complex(x, y))", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rect_coords = (r, theta)\n    complex_form = complex(x, y)\n    return (rect_coords, complex_form)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rect_coords = (r, theta)\n    complex_num = complex(x, y)\n    return (rect_coords, complex_num)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rect_coords = (r, theta)\n    complex_number = complex(x, y)\n    return (rect_coords, complex_number)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rect_coords = (r, theta)\n    complex_coord = complex(x, y)\n    return (rect_coords, complex_coord)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rect_coords = (r, theta)\n    complex_number = complex(x, y)\n    return (rect_coords, complex_number)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rect_coords = (r, theta)\n    complex_num = complex(x, y)\n    return (rect_coords, complex_num)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.hypot(x, y)\n    theta = math.atan2(y, x)\n    return ((r, theta), complex(x, y))", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    complex_number = complex(x, y)\n    return ((r, theta), complex_number)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    return ((r, theta), complex(x, y))", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    complex_number = complex(x, y)\n    return ((r, theta), complex_number)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    complex_number = complex(x, y)\n    return ((r, theta), complex_number)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    return ((r, theta), complex(x, y))", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rect_coords = (r, theta)\n    complex_num = complex(x, y)\n    return (rect_coords, complex_num)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rect_coords = (r, theta)\n    complex_num = complex(x, y)\n    return (rect_coords, complex_num)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    complex_number = complex(x, y)\n    return ((r, theta), complex_number)", "from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rect_coords = (r, theta)\n    complex_representation = complex(x, y)\n    return (rect_coords, complex_representation)"], "outputs": "[[((5.0, 0.9272952180016122), (3+4j))], [((1.4142135623730951, 0.7853981633974483), (1+1j))], [((0.0, 0.0), 0j)], [((5.0, 0.0), (5+0j))], [((5.0, 1.5707963267948966), 5j)], [((5.0, -2.214297435588181), (-3-4j))], [((5.0, -0.9272952180016122), (3-4j))], [((5.0, 2.214297435588181), (-3+4j))], [((5.0, -1.5707963267948966), -5j)], [((5.0, 0.6435011087932844), (4+3j))]]", "probability": 0.85, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 4], [((5.0, 0.9272952180016122), (3+4j))], [((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))]]]"}, {"programs_str": ["from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(r: float, theta: float) -> Tuple[Tuple[float, float], complex]:\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    rect_coords = (x, y)\n    complex_num = complex(x, y)\n    return (rect_coords, complex_num)", "from typing import Tuple\nimport math\ncomplex = complex\n\ndef polar_rect(r: float, theta: float) -> Tuple[Tuple[float, float], complex]:\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    rectangular_coordinates = (x, y)\n    complex_number = complex(x, y)\n    return (rectangular_coordinates, complex_number)"], "outputs": "[[((-1.960930862590836, -2.270407485923785), (-1.960930862590836-2.270407485923785j))], [((0.5403023058681398, 0.8414709848078965), (0.5403023058681398+0.8414709848078965j))], [((0.0, 0.0), 0j)], [((5.0, 0.0), (5+0j))], [((0.0, -0.0), -0j)], [((1.960930862590836, -2.270407485923785), (1.960930862590836-2.270407485923785j))], [((-1.960930862590836, 2.270407485923785), (-1.960930862590836+2.270407485923785j))], [((1.960930862590836, 2.270407485923785), (1.960930862590836+2.270407485923785j))], [((0.0, 0.0), 0j)], [((-3.9599699864017817, 0.5644800322394689), (-3.9599699864017817+0.5644800322394689j))]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 4], [((-1.960930862590836, -2.270407485923785), (-1.960930862590836-2.270407485923785j))], [((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))]]]"}, {"programs_str": ["from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rect_coords = (r, theta)\n    complex_rep = complex(r * math.cos(theta), r * math.sin(theta))\n    return (rect_coords, complex_rep)"], "outputs": "[[((5.0, 0.9272952180016122), (3+3.9999999999999996j))], [((1.4142135623730951, 0.7853981633974483), (1.0000000000000002+1j))], [((0.0, 0.0), 0j)], [((5.0, 0.0), (5+0j))], [((5.0, 1.5707963267948966), (3.061616997868383e-16+5j))], [((5.0, -2.214297435588181), (-2.999999999999999-4.000000000000001j))], [((5.0, -0.9272952180016122), (3-3.9999999999999996j))], [((5.0, 2.214297435588181), (-2.999999999999999+4.000000000000001j))], [((5.0, -1.5707963267948966), (3.061616997868383e-16-5j))], [((5.0, 0.6435011087932844), (4+3j))]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 4], [((5.0, 0.9272952180016122), (3+3.9999999999999996j))], [((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))]]]"}]}
{"task_id": "Mbpp/591", "requirement": "from typing import List\n\n\ndef swap_List(newList: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"", "llm_generated_inputs": "[[[12, 35, 9, 56, 24]], [[1, 2, 3]], [[5]], [[10, 20]], [[100, 200, 300, 400, 500]], [[-1, -2, -3, -4]]]", "programs": ["from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList"], "clusters": [{"programs_str": ["from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList"], "outputs": "[[[24, 35, 9, 56, 12]], [[3, 2, 1]], [[5]], [[20, 10]], [[500, 200, 300, 400, 100]], [[-4, -2, -3, -1]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/592", "requirement": "def sum_Of_product(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [10], [0], [-1], [5], [100]]", "programs": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    result = 0\n    for k in range(n):\n        result += comb(n, k) * comb(n, k + 1)\n    return result", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    return sum((comb(n, i) * comb(n, i + 1) for i in range(n)))", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total = 0\n    for k in range(n):\n        total += comb(n, k) * comb(n, k + 1)\n    return total", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total = 0\n    for k in range(n):\n        total += comb(n, k) * comb(n, k + 1)\n    return total", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total = 0\n    for k in range(n):\n        total += comb(n, k) * comb(n, k + 1)\n    return total", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total = 0\n    for k in range(n):\n        total += comb(n, k) * comb(n, k + 1)\n    return total", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total = 0\n    for k in range(n):\n        total += comb(n, k) * comb(n, k + 1)\n    return total", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total = 0\n    for k in range(n):\n        total += comb(n, k) * comb(n, k + 1)\n    return total", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum"], "clusters": [{"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    result = 0\n    for k in range(n):\n        result += comb(n, k) * comb(n, k + 1)\n    return result", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    return sum((comb(n, i) * comb(n, i + 1) for i in range(n)))", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total = 0\n    for k in range(n):\n        total += comb(n, k) * comb(n, k + 1)\n    return total", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total = 0\n    for k in range(n):\n        total += comb(n, k) * comb(n, k + 1)\n    return total", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total = 0\n    for k in range(n):\n        total += comb(n, k) * comb(n, k + 1)\n    return total", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total = 0\n    for k in range(n):\n        total += comb(n, k) * comb(n, k + 1)\n    return total", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total = 0\n    for k in range(n):\n        total += comb(n, k) * comb(n, k + 1)\n    return total", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total = 0\n    for k in range(n):\n        total += comb(n, k) * comb(n, k + 1)\n    return total", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum", "from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum"], "outputs": "[[1], [4], [15], [167960], [0], [0], [210], [89651994709013149668717007007410063242083752153874590932000]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/593", "requirement": "def removezero_ip(ip: str) -> str:\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\n\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"", "llm_generated_inputs": "[['192.168.001.001'], ['10.0.0.1'], ['0.0.0.0'], ['127.000.0.1'], ['255.255.255.255'], ['001.002.003.004'], ['123.456.789.000'], ['1.2.3.4'], ['01.02.03.04'], ['10.0.0.00001']]", "programs": ["def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    octets = ip.split('.')\n    cleaned_octets = [str(int(octet)) for octet in octets]\n    return '.'.join(cleaned_octets)", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(octet)) for octet in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    octets = ip.split('.')\n    return '.'.join((str(int(octet)) for octet in octets))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))"], "clusters": [{"programs_str": ["def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    octets = ip.split('.')\n    cleaned_octets = [str(int(octet)) for octet in octets]\n    return '.'.join(cleaned_octets)", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(octet)) for octet in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    octets = ip.split('.')\n    return '.'.join((str(int(octet)) for octet in octets))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))"], "outputs": "[['192.168.1.1'], ['10.0.0.1'], ['0.0.0.0'], ['127.0.0.1'], ['255.255.255.255'], ['1.2.3.4'], ['123.456.789.0'], ['1.2.3.4'], ['1.2.3.4'], ['10.0.0.1']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/594", "requirement": "from typing import List\n\n\ndef diff_even_odd(list1: List[int]) -> int:\n\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"", "llm_generated_inputs": "[[[1, 3, 5, 7, 4, 1, 6, 8]], [[2, 4, 6, 8]], [[1, 2, 3, 4]], [[10, 12, 14, 1]], [[3, 5, 7]], [[-2, -4, 3, 5]], [[10, 8, 6, 4, 1]], [[1, 3, 5, 9]], [[0]], [[-1, -3, -5, -2]], [[1, 2]]]", "programs": ["from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    if first_even is None or first_odd is None:\n        return 0\n    return first_even - first_odd", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for number in list1:\n        if number % 2 == 0 and first_even is None:\n            first_even = number\n        elif number % 2 != 0 and first_odd is None:\n            first_odd = number\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even - first_odd if first_even is not None and first_odd is not None else 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for number in list1:\n        if number % 2 == 0 and first_even is None:\n            first_even = number\n        elif number % 2 != 0 and first_odd is None:\n            first_odd = number\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even - first_odd if first_even is not None and first_odd is not None else 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even - odd if even is not None and odd is not None else 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for number in list1:\n        if number % 2 == 0 and first_even is None:\n            first_even = number\n        elif number % 2 != 0 and first_odd is None:\n            first_odd = number\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even - first_odd if first_even is not None and first_odd is not None else 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for number in list1:\n        if number % 2 == 0 and first_even is None:\n            first_even = number\n        elif number % 2 != 0 and first_odd is None:\n            first_odd = number\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even - first_odd if first_even is not None and first_odd is not None else 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for number in list1:\n        if number % 2 == 0 and first_even is None:\n            first_even = number\n        elif number % 2 != 0 and first_odd is None:\n            first_odd = number\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for number in list1:\n        if number % 2 == 0 and first_even is None:\n            first_even = number\n        elif number % 2 != 0 and first_odd is None:\n            first_odd = number\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        raise ValueError('The list must contain both even and odd numbers.')\n    return first_even - first_odd", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        if num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        raise ValueError('The list must contain at least one even and one odd number.')"], "clusters": [{"programs_str": ["from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    if first_even is None or first_odd is None:\n        return 0\n    return first_even - first_odd", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for number in list1:\n        if number % 2 == 0 and first_even is None:\n            first_even = number\n        elif number % 2 != 0 and first_odd is None:\n            first_odd = number\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even - first_odd if first_even is not None and first_odd is not None else 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for number in list1:\n        if number % 2 == 0 and first_even is None:\n            first_even = number\n        elif number % 2 != 0 and first_odd is None:\n            first_odd = number\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even - first_odd if first_even is not None and first_odd is not None else 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even - odd if even is not None and odd is not None else 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for number in list1:\n        if number % 2 == 0 and first_even is None:\n            first_even = number\n        elif number % 2 != 0 and first_odd is None:\n            first_odd = number\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even - first_odd if first_even is not None and first_odd is not None else 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for number in list1:\n        if number % 2 == 0 and first_even is None:\n            first_even = number\n        elif number % 2 != 0 and first_odd is None:\n            first_odd = number\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even - first_odd if first_even is not None and first_odd is not None else 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for number in list1:\n        if number % 2 == 0 and first_even is None:\n            first_even = number\n        elif number % 2 != 0 and first_odd is None:\n            first_odd = number\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    return 0", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for number in list1:\n        if number % 2 == 0 and first_even is None:\n            first_even = number\n        elif number % 2 != 0 and first_odd is None:\n            first_odd = number\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return 0"], "outputs": "[[3], [0], [1], [9], [0], [-5], [9], [0], [0], [-1], [1]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        raise ValueError('The list must contain both even and odd numbers.')\n    return first_even - first_odd", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        if num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        raise ValueError('The list must contain at least one even and one odd number.')"], "outputs": "[[3], ['ValueError'], [1], [9], ['ValueError'], [-5], [9], ['ValueError'], ['ValueError'], [-1], [1]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/596", "requirement": "def tuple_size(tuple_list: tuple) -> int:\n\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"", "llm_generated_inputs": "[[(1, 2, 3)], [(1, 'a', 3.14, None)], [(True, False, True)], [((), (1, 2), (3, 4))], [(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)], [(-1, -2, -3)], [((1, 2), (3, 4), (5, 6))], [(1, 2, 'three', 'four', None)]]", "programs": ["import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)"], "clusters": [{"programs_str": ["import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)"], "outputs": "[[64], [72], [64], [64], [120], [64], [64], [80]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/597", "requirement": "from typing import List\n\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"", "llm_generated_inputs": "[[[2, 3, 6, 7, 9], [1, 4, 8, 10], 5], [[1, 2, 3], [4, 5, 6], 4], [[], [1, 2, 3], 2], [[1, 2, 3], [], 2], [[1], [2], 1], [[1], [2], 2], [[1, 3], [2, 4], 3], [[], [], 1], [[5, 10, 15], [1, 2, 3, 4], 6]]", "programs": ["from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = k - i\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = k - i\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = min(len2, k // 2)\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = k - i\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\n    def kth_helper(a_start, b_start, k):\n        if a_start >= len(arr1):\n            return arr2[b_start + k - 1]\n        if b_start >= len(arr2):\n            return arr1[a_start + k - 1]\n        if k == 1:\n            return min(arr1[a_start], arr2[b_start])\n        mid_a = min(a_start + k // 2 - 1, len(arr1) - 1)\n        mid_b = min(b_start + k // 2 - 1, len(arr2) - 1)\n        if arr1[mid_a] <= arr2[mid_b]:\n            return kth_helper(mid_a + 1, b_start, k - (mid_a - a_start + 1))\n        else:\n            return kth_helper(a_start, mid_b + 1, k - (mid_b - b_start + 1))\n    return kth_helper(0, 0, k)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = min(len2, k // 2)\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = k - i\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = k - i\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    index1 = min(len1, k // 2)\n    index2 = k - index1\n    if arr1[index1 - 1] < arr2[index2 - 1]:\n        return find_kth(arr1[index1:], arr2, k - index1)\n    else:\n        return find_kth(arr1, arr2[index2:], k - index2)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = k - i\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = k - i\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    if len1 == 0:\n        return arr2[k - 1]\n    left, right = (0, len1)\n    while left < right:\n        mid1 = (left + right) // 2\n        mid2 = k - mid1 - 1\n        if mid2 >= 0 and mid2 < len2 and (arr1[mid1] <= arr2[mid2]):\n            left = mid1 + 1\n        else:\n            right = mid1\n    mid1 = left\n    mid2 = k - mid1 - 1\n    if mid2 < 0:\n        return arr1[mid1 - 1]\n    if mid1 >= len1:\n        return arr2[mid2]\n    return max(arr1[mid1 - 1] if mid1 > 0 else float('-inf'), arr2[mid2] if mid2 >= 0 else float('-inf'))", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    if len1 == 0:\n        return arr2[k - 1]\n    low, high = (0, len1)\n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = k - partition1\n        max_left1 = float('-inf') if partition1 == 0 else arr1[partition1 - 1]\n        min_right1 = float('inf') if partition1 == len1 else arr1[partition1]\n        max_left2 = float('-inf') if partition2 == 0 else arr2[partition2 - 1]\n        min_right2 = float('inf') if partition2 == len2 else arr2[partition2]\n        if max_left1 <= min_right2 and max_left2 <= min_right1:\n            return max(max_left1, max_left2)\n        elif max_left1 > min_right2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1\n    raise ValueError('k is out of bounds')", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    low, high = (0, len1)\n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = k - partition1\n        max_left1 = float('-inf') if partition1 == 0 else arr1[partition1 - 1]\n        min_right1 = float('inf') if partition1 == len1 else arr1[partition1]\n        max_left2 = float('-inf') if partition2 == 0 else arr2[partition2 - 1]\n        min_right2 = float('inf') if partition2 == len2 else arr2[partition2]\n        if max_left1 <= min_right2 and max_left2 <= min_right1:\n            return max(max_left1, max_left2)\n        elif max_left1 > min_right2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1\n    raise ValueError('The value of k is out of bounds.')", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    if len1 == 0:\n        return arr2[k - 1]\n    low, high = (0, len1)\n    while low < high:\n        mid1 = (low + high) // 2\n        mid2 = k - mid1 - 1\n        if mid2 < 0 or (mid1 < len1 and arr1[mid1] <= arr2[mid2]):\n            low = mid1 + 1\n        else:\n            high = mid1\n    mid1 = low\n    mid2 = k - mid1 - 1\n    a = arr1[mid1 - 1] if mid1 > 0 else float('-inf')\n    b = arr2[mid2] if mid2 >= 0 else float('-inf')\n    return max(a, b)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    low, high = (0, len1)\n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = k - partition1\n        maxLeft1 = float('-inf') if partition1 == 0 else arr1[partition1 - 1]\n        minRight1 = float('inf') if partition1 == len1 else arr1[partition1]\n        maxLeft2 = float('-inf') if partition2 == 0 else arr2[partition2 - 1]\n        minRight2 = float('inf') if partition2 == len2 else arr2[partition2]\n        if maxLeft1 <= minRight2 and maxLeft2 <= minRight1:\n            return max(maxLeft1, maxLeft2)\n        elif maxLeft1 > minRight2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1\n    raise ValueError('k is out of bounds')", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    low, high = (0, len1)\n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = k - partition1\n        maxLeft1 = float('-inf') if partition1 == 0 else arr1[partition1 - 1]\n        minRight1 = float('inf') if partition1 == len1 else arr1[partition1]\n        maxLeft2 = float('-inf') if partition2 == 0 else arr2[partition2 - 1]\n        minRight2 = float('inf') if partition2 == len2 else arr2[partition2]\n        if maxLeft1 <= minRight2 and maxLeft2 <= minRight1:\n            return max(maxLeft1, maxLeft2)\n        elif maxLeft1 > minRight2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1\n    raise ValueError('Input arrays are not valid')", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    if len1 == 0:\n        return arr2[k - 1]\n    low, high = (0, len1)\n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = k - partition1\n        maxLeft1 = float('-inf') if partition1 == 0 else arr1[partition1 - 1]\n        minRight1 = float('inf') if partition1 == len1 else arr1[partition1]\n        maxLeft2 = float('-inf') if partition2 == 0 else arr2[partition2 - 1]\n        minRight2 = float('inf') if partition2 == len2 else arr2[partition2]\n        if maxLeft1 <= minRight2 and maxLeft2 <= minRight1:\n            return max(maxLeft1, maxLeft2)\n        elif maxLeft1 > minRight2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1\n    raise ValueError('Input arrays are not valid')", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    low, high = (0, len1)\n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = k - partition1\n        maxLeft1 = float('-inf') if partition1 == 0 else arr1[partition1 - 1]\n        minRight1 = float('inf') if partition1 == len1 else arr1[partition1]\n        maxLeft2 = float('-inf') if partition2 == 0 else arr2[partition2 - 1]\n        minRight2 = float('inf') if partition2 == len2 else arr2[partition2]\n        if maxLeft1 <= minRight2 and maxLeft2 <= minRight1:\n            return max(maxLeft1, maxLeft2)\n        elif maxLeft1 > minRight2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1\n    raise ValueError('k is out of bounds')"], "clusters": [{"programs_str": ["from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = k - i\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = k - i\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = min(len2, k // 2)\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = k - i\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\n    def kth_helper(a_start, b_start, k):\n        if a_start >= len(arr1):\n            return arr2[b_start + k - 1]\n        if b_start >= len(arr2):\n            return arr1[a_start + k - 1]\n        if k == 1:\n            return min(arr1[a_start], arr2[b_start])\n        mid_a = min(a_start + k // 2 - 1, len(arr1) - 1)\n        mid_b = min(b_start + k // 2 - 1, len(arr2) - 1)\n        if arr1[mid_a] <= arr2[mid_b]:\n            return kth_helper(mid_a + 1, b_start, k - (mid_a - a_start + 1))\n        else:\n            return kth_helper(a_start, mid_b + 1, k - (mid_b - b_start + 1))\n    return kth_helper(0, 0, k)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = min(len2, k // 2)\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = k - i\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = k - i\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    index1 = min(len1, k // 2)\n    index2 = k - index1\n    if arr1[index1 - 1] < arr2[index2 - 1]:\n        return find_kth(arr1[index1:], arr2, k - index1)\n    else:\n        return find_kth(arr1, arr2[index2:], k - index2)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = k - i\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = k - i\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)"], "outputs": "[[6], [4], [2], [2], [1], [2], [3], ['IndexError'], [10]]", "probability": 0.5789473684210527, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    if len1 == 0:\n        return arr2[k - 1]\n    left, right = (0, len1)\n    while left < right:\n        mid1 = (left + right) // 2\n        mid2 = k - mid1 - 1\n        if mid2 >= 0 and mid2 < len2 and (arr1[mid1] <= arr2[mid2]):\n            left = mid1 + 1\n        else:\n            right = mid1\n    mid1 = left\n    mid2 = k - mid1 - 1\n    if mid2 < 0:\n        return arr1[mid1 - 1]\n    if mid1 >= len1:\n        return arr2[mid2]\n    return max(arr1[mid1 - 1] if mid1 > 0 else float('-inf'), arr2[mid2] if mid2 >= 0 else float('-inf'))"], "outputs": "[[6], [4], [2], [2], [1], ['IndexError'], [2], ['IndexError'], ['IndexError']]", "probability": 0.05263157894736842, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    if len1 == 0:\n        return arr2[k - 1]\n    low, high = (0, len1)\n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = k - partition1\n        max_left1 = float('-inf') if partition1 == 0 else arr1[partition1 - 1]\n        min_right1 = float('inf') if partition1 == len1 else arr1[partition1]\n        max_left2 = float('-inf') if partition2 == 0 else arr2[partition2 - 1]\n        min_right2 = float('inf') if partition2 == len2 else arr2[partition2]\n        if max_left1 <= min_right2 and max_left2 <= min_right1:\n            return max(max_left1, max_left2)\n        elif max_left1 > min_right2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1\n    raise ValueError('k is out of bounds')", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    low, high = (0, len1)\n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = k - partition1\n        max_left1 = float('-inf') if partition1 == 0 else arr1[partition1 - 1]\n        min_right1 = float('inf') if partition1 == len1 else arr1[partition1]\n        max_left2 = float('-inf') if partition2 == 0 else arr2[partition2 - 1]\n        min_right2 = float('inf') if partition2 == len2 else arr2[partition2]\n        if max_left1 <= min_right2 and max_left2 <= min_right1:\n            return max(max_left1, max_left2)\n        elif max_left1 > min_right2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1\n    raise ValueError('The value of k is out of bounds.')", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    if len1 == 0:\n        return arr2[k - 1]\n    low, high = (0, len1)\n    while low < high:\n        mid1 = (low + high) // 2\n        mid2 = k - mid1 - 1\n        if mid2 < 0 or (mid1 < len1 and arr1[mid1] <= arr2[mid2]):\n            low = mid1 + 1\n        else:\n            high = mid1\n    mid1 = low\n    mid2 = k - mid1 - 1\n    a = arr1[mid1 - 1] if mid1 > 0 else float('-inf')\n    b = arr2[mid2] if mid2 >= 0 else float('-inf')\n    return max(a, b)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    low, high = (0, len1)\n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = k - partition1\n        maxLeft1 = float('-inf') if partition1 == 0 else arr1[partition1 - 1]\n        minRight1 = float('inf') if partition1 == len1 else arr1[partition1]\n        maxLeft2 = float('-inf') if partition2 == 0 else arr2[partition2 - 1]\n        minRight2 = float('inf') if partition2 == len2 else arr2[partition2]\n        if maxLeft1 <= minRight2 and maxLeft2 <= minRight1:\n            return max(maxLeft1, maxLeft2)\n        elif maxLeft1 > minRight2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1\n    raise ValueError('k is out of bounds')", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    low, high = (0, len1)\n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = k - partition1\n        maxLeft1 = float('-inf') if partition1 == 0 else arr1[partition1 - 1]\n        minRight1 = float('inf') if partition1 == len1 else arr1[partition1]\n        maxLeft2 = float('-inf') if partition2 == 0 else arr2[partition2 - 1]\n        minRight2 = float('inf') if partition2 == len2 else arr2[partition2]\n        if maxLeft1 <= minRight2 and maxLeft2 <= minRight1:\n            return max(maxLeft1, maxLeft2)\n        elif maxLeft1 > minRight2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1\n    raise ValueError('Input arrays are not valid')", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    if len1 == 0:\n        return arr2[k - 1]\n    low, high = (0, len1)\n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = k - partition1\n        maxLeft1 = float('-inf') if partition1 == 0 else arr1[partition1 - 1]\n        minRight1 = float('inf') if partition1 == len1 else arr1[partition1]\n        maxLeft2 = float('-inf') if partition2 == 0 else arr2[partition2 - 1]\n        minRight2 = float('inf') if partition2 == len2 else arr2[partition2]\n        if maxLeft1 <= minRight2 and maxLeft2 <= minRight1:\n            return max(maxLeft1, maxLeft2)\n        elif maxLeft1 > minRight2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1\n    raise ValueError('Input arrays are not valid')", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        arr1, arr2, len1, len2 = (arr2, arr1, len2, len1)\n    low, high = (0, len1)\n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = k - partition1\n        maxLeft1 = float('-inf') if partition1 == 0 else arr1[partition1 - 1]\n        minRight1 = float('inf') if partition1 == len1 else arr1[partition1]\n        maxLeft2 = float('-inf') if partition2 == 0 else arr2[partition2 - 1]\n        minRight2 = float('inf') if partition2 == len2 else arr2[partition2]\n        if maxLeft1 <= minRight2 and maxLeft2 <= minRight1:\n            return max(maxLeft1, maxLeft2)\n        elif maxLeft1 > minRight2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1\n    raise ValueError('k is out of bounds')"], "outputs": "[[6], [4], [2], [2], [1], ['IndexError'], [3], ['IndexError'], ['IndexError']]", "probability": 0.3684210526315789, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/598", "requirement": "def armstrong_number(number: int) -> bool:\n\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"", "llm_generated_inputs": "[[153], [370], [371], [9474], [5], [0], [999], [1000], [-153], [1]]", "programs": ["def armstrong_number(number: int) -> bool:\n    power = len(str(number))\n    sum_of_powers = sum((int(digit) ** power for digit in str(number)))\n    return sum_of_powers == number", "def armstrong_number(number: int) -> bool:\n    digits = [int(d) for d in str(number)]\n    power = len(digits)\n    return sum((d ** power for d in digits)) == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    power = len(num_str)\n    total = sum((int(digit) ** power for digit in num_str))\n    return total == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    power = len(num_str)\n    return number == sum((int(digit) ** power for digit in num_str))", "def armstrong_number(number: int) -> bool:\n    digits = str(number)\n    power = len(digits)\n    return sum((int(digit) ** power for digit in digits)) == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    power = len(num_str)\n    return sum((int(digit) ** power for digit in num_str)) == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    num_length = len(num_str)\n    sum_of_powers = sum((int(digit) ** num_length for digit in num_str))\n    return sum_of_powers == number", "def armstrong_number(number: int) -> bool:\n    digits = [int(d) for d in str(number)]\n    power = len(digits)\n    return sum((d ** power for d in digits)) == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    power = len(num_str)\n    return sum((int(digit) ** power for digit in num_str)) == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    power = len(num_str)\n    total = sum((int(digit) ** power for digit in num_str))\n    return total == number", "def armstrong_number(number: int) -> bool:\n    digits = str(number)\n    length = len(digits)\n    total = sum((int(digit) ** length for digit in digits))\n    return total == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    power = len(num_str)\n    return sum((int(digit) ** power for digit in num_str)) == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    power = len(num_str)\n    total = sum((int(digit) ** power for digit in num_str))\n    return total == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    power = len(num_str)\n    return sum((int(digit) ** power for digit in num_str)) == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    power = len(num_str)\n    total = sum((int(digit) ** power for digit in num_str))\n    return total == number", "def armstrong_number(number: int) -> bool:\n    digits = str(number)\n    power = len(digits)\n    return sum((int(digit) ** power for digit in digits)) == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    num_length = len(num_str)\n    armstrong_sum = sum((int(digit) ** num_length for digit in num_str))\n    return armstrong_sum == number", "def armstrong_number(number: int) -> bool:\n    digits = str(number)\n    power = len(digits)\n    total = sum((int(digit) ** power for digit in digits))\n    return total == number", "def armstrong_number(number: int) -> bool:\n    order = len(str(number))\n    sum_of_powers = sum((int(digit) ** order for digit in str(number)))\n    return sum_of_powers == number", "def armstrong_number(number: int) -> bool:\n    digits = [int(d) for d in str(number)]\n    power = len(digits)\n    return sum((d ** power for d in digits)) == number"], "clusters": [{"programs_str": ["def armstrong_number(number: int) -> bool:\n    power = len(str(number))\n    sum_of_powers = sum((int(digit) ** power for digit in str(number)))\n    return sum_of_powers == number", "def armstrong_number(number: int) -> bool:\n    digits = [int(d) for d in str(number)]\n    power = len(digits)\n    return sum((d ** power for d in digits)) == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    power = len(num_str)\n    total = sum((int(digit) ** power for digit in num_str))\n    return total == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    power = len(num_str)\n    return number == sum((int(digit) ** power for digit in num_str))", "def armstrong_number(number: int) -> bool:\n    digits = str(number)\n    power = len(digits)\n    return sum((int(digit) ** power for digit in digits)) == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    power = len(num_str)\n    return sum((int(digit) ** power for digit in num_str)) == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    num_length = len(num_str)\n    sum_of_powers = sum((int(digit) ** num_length for digit in num_str))\n    return sum_of_powers == number", "def armstrong_number(number: int) -> bool:\n    digits = [int(d) for d in str(number)]\n    power = len(digits)\n    return sum((d ** power for d in digits)) == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    power = len(num_str)\n    return sum((int(digit) ** power for digit in num_str)) == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    power = len(num_str)\n    total = sum((int(digit) ** power for digit in num_str))\n    return total == number", "def armstrong_number(number: int) -> bool:\n    digits = str(number)\n    length = len(digits)\n    total = sum((int(digit) ** length for digit in digits))\n    return total == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    power = len(num_str)\n    return sum((int(digit) ** power for digit in num_str)) == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    power = len(num_str)\n    total = sum((int(digit) ** power for digit in num_str))\n    return total == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    power = len(num_str)\n    return sum((int(digit) ** power for digit in num_str)) == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    power = len(num_str)\n    total = sum((int(digit) ** power for digit in num_str))\n    return total == number", "def armstrong_number(number: int) -> bool:\n    digits = str(number)\n    power = len(digits)\n    return sum((int(digit) ** power for digit in digits)) == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    num_length = len(num_str)\n    armstrong_sum = sum((int(digit) ** num_length for digit in num_str))\n    return armstrong_sum == number", "def armstrong_number(number: int) -> bool:\n    digits = str(number)\n    power = len(digits)\n    total = sum((int(digit) ** power for digit in digits))\n    return total == number", "def armstrong_number(number: int) -> bool:\n    order = len(str(number))\n    sum_of_powers = sum((int(digit) ** order for digit in str(number)))\n    return sum_of_powers == number", "def armstrong_number(number: int) -> bool:\n    digits = [int(d) for d in str(number)]\n    power = len(digits)\n    return sum((d ** power for d in digits)) == number"], "outputs": "[[True], [True], [True], [True], [True], [True], [False], [False], ['ValueError'], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/599", "requirement": "from typing import Tuple\n\n\ndef sum_average(number: int) -> Tuple[int, float]:\n\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"", "llm_generated_inputs": "[[1], [10], [100], [0], [-5], [50], [1000]]", "programs": ["from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = number * (number + 1) // 2\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = number * (number + 1) // 2\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)"], "clusters": [{"programs_str": ["from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = number * (number + 1) // 2\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = number * (number + 1) // 2\n    average = total_sum / number\n    return (total_sum, average)"], "outputs": "[[(1, 1.0)], [(55, 5.5)], [(5050, 50.5)], ['ZeroDivisionError'], [(10, -2.0)], [(1275, 25.5)], [(500500, 500.5)]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)"], "outputs": "[[(1, 1.0)], [(55, 5.5)], [(5050, 50.5)], ['ZeroDivisionError'], [(0, -0.0)], [(1275, 25.5)], [(500500, 500.5)]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/600", "requirement": "def is_Even(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given number is even or not.\nassert is_Even(1) == False\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [-1], [-2], [1000], [-1000], [999999], [1000000]]", "programs": ["def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0"], "clusters": [{"programs_str": ["def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0"], "outputs": "[[True], [False], [True], [False], [True], [True], [True], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/602", "requirement": "def first_repeated_char(str1: str) -> str:\n\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"", "llm_generated_inputs": "[['abcabc'], ['hello'], ['no repeats'], ['123123'], ['abcdefg'], ['aabbcc'], [''], ['a'], ['abca'], ['aabb']]", "programs": ["def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen_chars = set()\n    for char in str1:\n        if char in seen_chars:\n            return char\n        seen_chars.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''"], "clusters": [{"programs_str": ["def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen_chars = set()\n    for char in str1:\n        if char in seen_chars:\n            return char\n        seen_chars.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''"], "outputs": "[['a'], ['l'], ['e'], ['1'], [''], ['a'], [''], [''], ['a'], ['a']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/603", "requirement": "from typing import List\n\n\ndef get_ludic(n: int) -> List[int]:\n\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"", "llm_generated_inputs": "[[1], [5], [10], [15], [0], [3], [20], [-5]]", "programs": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    if n >= 1:\n        ludic_numbers.append(1)\n    for i in range(2, n + 1):\n        if i % 2 != 0:\n            if all((i % p != 0 for p in ludic_numbers if p * p <= i)):\n                ludic_numbers.append(i)\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    sieve = [True] * (n + 1)\n    for num in range(1, n + 1):\n        if sieve[num]:\n            ludic_numbers.append(num)\n            for multiple in range(num * 2, n + 1, num):\n                sieve[multiple] = False\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludics = []\n    for i in range(1, n + 1):\n        if i == 1 or all((i % p != 0 for p in ludics)):\n            ludics.append(i)\n    return ludics", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        if i == 1 or i == 2 or i == 3 or (i % 2 != 0 and i % 3 != 0):\n            ludic_numbers.append(i)\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    lucids = []\n    for i in range(1, n + 1):\n        if i == 1 or all((i % j != 0 for j in range(2, int(i ** 0.5) + 1))):\n            lucids.append(i)\n    return lucids", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n\n    def is_ludic(num: int) -> bool:\n        return num == 1 or (num > 1 and all((num % i != 0 for i in range(2, int(num ** 0.5) + 1))))\n    return [i for i in range(1, n + 1) if is_ludic(i)]", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    current = 1\n    while current <= n:\n        if current == 1 or ((current - 1) % 2 == 0 and (current - 1) // 2 not in ludic_numbers):\n            ludic_numbers.append(current)\n        current += 1\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n\n    def is_ludic(num):\n        return num == 1 or (num % 2 != 0 and (num - 1) % 3 == 0)\n    return [i for i in range(1, n + 1) if is_ludic(i)]", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    lucas_numbers = []\n    a, b = (2, 1)\n    lucas_numbers.append(a)\n    lucas_numbers.append(b)\n    while True:\n        c = a + b\n        if c > n:\n            break\n        lucas_numbers.append(c)\n        a, b = (b, c)\n    lucid_numbers = [num for num in lucas_numbers if num % 2 == 1]\n    return sorted([num for num in lucid_numbers if num <= n])", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n\n    def is_ludic(num: int) -> bool:\n        if num == 1:\n            return True\n        nums = list(range(1, num + 1))\n        index = 1\n        while index < len(nums):\n            step = nums[index]\n            nums = [nums[i] for i in range(len(nums)) if (i + 1) % step != 0]\n            index += 1\n            if index >= len(nums):\n                break\n        return num in nums\n    return [i for i in range(1, n + 1) if is_ludic(i)]", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        if i <= 3 or (i % 2 != 0 and (i - 1) % 3 != 0):\n            ludic_numbers.append(i)\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    lucids = []\n    for i in range(1, n + 1):\n        if i == 1 or i % 2 != 0:\n            lucids.append(i)\n    return lucids", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        if i == 1 or (not i % 2 == 0 and all((i % p != 0 for p in range(3, int(i ** 0.5) + 1, 2)))):\n            ludic_numbers.append(i)\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        binary = bin(i)[2:]\n        if binary.count('1') % 2 != 0:\n            ludic_numbers.append(i)\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        if i == 1 or i == 2 or i == 3:\n            ludic_numbers.append(i)\n        elif i > 3 and i % 2 != 0 and (i != 5):\n            if all((i % p != 0 for p in ludic_numbers)):\n                ludic_numbers.append(i)\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    result = []\n    if n >= 1:\n        result.append(1)\n    if n >= 2:\n        result.append(2)\n    for i in range(3, n + 1):\n        if all((i % p != 0 for p in result)):\n            result.append(i)\n    return result", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    for num in range(1, n + 1):\n        if num % 2 != 0 or num in {1, 2, 3, 5, 7}:\n            ludic_numbers.append(num)\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n\n    def is_ludic(num: int) -> bool:\n        if num < 1:\n            return False\n        return num % 2 == 1 or num in (1, 2, 3)\n    return [i for i in range(1, n + 1) if is_ludic(i)]", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        if i % 2 != 0 or (i > 2 and (not is_prime(i))):\n            continue\n        ludic_numbers.append(i)\n    return ludic_numbers\n\ndef is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"], "clusters": [{"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    if n >= 1:\n        ludic_numbers.append(1)\n    for i in range(2, n + 1):\n        if i % 2 != 0:\n            if all((i % p != 0 for p in ludic_numbers if p * p <= i)):\n                ludic_numbers.append(i)\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    sieve = [True] * (n + 1)\n    for num in range(1, n + 1):\n        if sieve[num]:\n            ludic_numbers.append(num)\n            for multiple in range(num * 2, n + 1, num):\n                sieve[multiple] = False\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludics = []\n    for i in range(1, n + 1):\n        if i == 1 or all((i % p != 0 for p in ludics)):\n            ludics.append(i)\n    return ludics"], "outputs": "[[[1]], [[1]], [[1]], [[1]], [[]], [[1]], [[1]], [[]]]", "probability": 0.15789473684210525, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [[1]], [[1, 2, 3, 5, 7]]]]"}, {"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        if i == 1 or i == 2 or i == 3 or (i % 2 != 0 and i % 3 != 0):\n            ludic_numbers.append(i)\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    lucids = []\n    for i in range(1, n + 1):\n        if i == 1 or all((i % j != 0 for j in range(2, int(i ** 0.5) + 1))):\n            lucids.append(i)\n    return lucids", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n\n    def is_ludic(num: int) -> bool:\n        return num == 1 or (num > 1 and all((num % i != 0 for i in range(2, int(num ** 0.5) + 1))))\n    return [i for i in range(1, n + 1) if is_ludic(i)]"], "outputs": "[[[1]], [[1, 2, 3, 5]], [[1, 2, 3, 5, 7]], [[1, 2, 3, 5, 7, 11, 13]], [[]], [[1, 2, 3]], [[1, 2, 3, 5, 7, 11, 13, 17, 19]], [[]]]", "probability": 0.15789473684210525, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    current = 1\n    while current <= n:\n        if current == 1 or ((current - 1) % 2 == 0 and (current - 1) // 2 not in ludic_numbers):\n            ludic_numbers.append(current)\n        current += 1\n    return ludic_numbers"], "outputs": "[[[1]], [[1, 5]], [[1, 5, 7, 9]], [[1, 5, 7, 9, 13]], [[]], [[1]], [[1, 5, 7, 9, 13, 17]], [[]]]", "probability": 0.05263157894736842, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [[1, 5, 7, 9]], [[1, 2, 3, 5, 7]]]]"}, {"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n\n    def is_ludic(num):\n        return num == 1 or (num % 2 != 0 and (num - 1) % 3 == 0)\n    return [i for i in range(1, n + 1) if is_ludic(i)]"], "outputs": "[[[1]], [[1]], [[1, 7]], [[1, 7, 13]], [[]], [[1]], [[1, 7, 13, 19]], [[]]]", "probability": 0.05263157894736842, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [[1, 7]], [[1, 2, 3, 5, 7]]]]"}, {"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    lucas_numbers = []\n    a, b = (2, 1)\n    lucas_numbers.append(a)\n    lucas_numbers.append(b)\n    while True:\n        c = a + b\n        if c > n:\n            break\n        lucas_numbers.append(c)\n        a, b = (b, c)\n    lucid_numbers = [num for num in lucas_numbers if num % 2 == 1]\n    return sorted([num for num in lucid_numbers if num <= n])"], "outputs": "[[[1]], [[1, 3]], [[1, 3, 7]], [[1, 3, 7, 11]], [[]], [[1, 3]], [[1, 3, 7, 11]], [[]]]", "probability": 0.05263157894736842, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [[1, 3, 7]], [[1, 2, 3, 5, 7]]]]"}, {"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n\n    def is_ludic(num: int) -> bool:\n        if num == 1:\n            return True\n        nums = list(range(1, num + 1))\n        index = 1\n        while index < len(nums):\n            step = nums[index]\n            nums = [nums[i] for i in range(len(nums)) if (i + 1) % step != 0]\n            index += 1\n            if index >= len(nums):\n                break\n        return num in nums\n    return [i for i in range(1, n + 1) if is_ludic(i)]"], "outputs": "[[[1]], [[1, 3, 5]], [[1, 3, 5, 7]], [[1, 3, 5, 7, 11, 13]], [[]], [[1, 3]], [[1, 3, 5, 7, 11, 13, 17]], [[]]]", "probability": 0.05263157894736842, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [[1, 3, 5, 7]], [[1, 2, 3, 5, 7]]]]"}, {"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        if i <= 3 or (i % 2 != 0 and (i - 1) % 3 != 0):\n            ludic_numbers.append(i)\n    return ludic_numbers"], "outputs": "[[[1]], [[1, 2, 3, 5]], [[1, 2, 3, 5, 9]], [[1, 2, 3, 5, 9, 11, 15]], [[]], [[1, 2, 3]], [[1, 2, 3, 5, 9, 11, 15, 17]], [[]]]", "probability": 0.05263157894736842, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [[1, 2, 3, 5, 9]], [[1, 2, 3, 5, 7]]]]"}, {"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    lucids = []\n    for i in range(1, n + 1):\n        if i == 1 or i % 2 != 0:\n            lucids.append(i)\n    return lucids"], "outputs": "[[[1]], [[1, 3, 5]], [[1, 3, 5, 7, 9]], [[1, 3, 5, 7, 9, 11, 13, 15]], [[]], [[1, 3]], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]], [[]]]", "probability": 0.05263157894736842, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [[1, 3, 5, 7, 9]], [[1, 2, 3, 5, 7]]]]"}, {"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        if i == 1 or (not i % 2 == 0 and all((i % p != 0 for p in range(3, int(i ** 0.5) + 1, 2)))):\n            ludic_numbers.append(i)\n    return ludic_numbers"], "outputs": "[[[1]], [[1, 3, 5]], [[1, 3, 5, 7]], [[1, 3, 5, 7, 11, 13]], [[]], [[1, 3]], [[1, 3, 5, 7, 11, 13, 17, 19]], [[]]]", "probability": 0.05263157894736842, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [[1, 3, 5, 7]], [[1, 2, 3, 5, 7]]]]"}, {"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        binary = bin(i)[2:]\n        if binary.count('1') % 2 != 0:\n            ludic_numbers.append(i)\n    return ludic_numbers"], "outputs": "[[[1]], [[1, 2, 4]], [[1, 2, 4, 7, 8]], [[1, 2, 4, 7, 8, 11, 13, 14]], [[]], [[1, 2]], [[1, 2, 4, 7, 8, 11, 13, 14, 16, 19]], [[]]]", "probability": 0.05263157894736842, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [[1, 2, 4, 7, 8]], [[1, 2, 3, 5, 7]]]]"}, {"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        if i == 1 or i == 2 or i == 3:\n            ludic_numbers.append(i)\n        elif i > 3 and i % 2 != 0 and (i != 5):\n            if all((i % p != 0 for p in ludic_numbers)):\n                ludic_numbers.append(i)\n    return ludic_numbers"], "outputs": "[[[1]], [[1, 2, 3]], [[1, 2, 3]], [[1, 2, 3]], [[]], [[1, 2, 3]], [[1, 2, 3]], [[]]]", "probability": 0.05263157894736842, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [[1, 2, 3]], [[1, 2, 3, 5, 7]]]]"}, {"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    result = []\n    if n >= 1:\n        result.append(1)\n    if n >= 2:\n        result.append(2)\n    for i in range(3, n + 1):\n        if all((i % p != 0 for p in result)):\n            result.append(i)\n    return result"], "outputs": "[[[1]], [[1, 2]], [[1, 2]], [[1, 2]], [[]], [[1, 2]], [[1, 2]], [[]]]", "probability": 0.05263157894736842, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [[1, 2]], [[1, 2, 3, 5, 7]]]]"}, {"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    for num in range(1, n + 1):\n        if num % 2 != 0 or num in {1, 2, 3, 5, 7}:\n            ludic_numbers.append(num)\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n\n    def is_ludic(num: int) -> bool:\n        if num < 1:\n            return False\n        return num % 2 == 1 or num in (1, 2, 3)\n    return [i for i in range(1, n + 1) if is_ludic(i)]"], "outputs": "[[[1]], [[1, 2, 3, 5]], [[1, 2, 3, 5, 7, 9]], [[1, 2, 3, 5, 7, 9, 11, 13, 15]], [[]], [[1, 2, 3]], [[1, 2, 3, 5, 7, 9, 11, 13, 15, 17, 19]], [[]]]", "probability": 0.10526315789473684, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [[1, 2, 3, 5, 7, 9]], [[1, 2, 3, 5, 7]]]]"}, {"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        if i % 2 != 0 or (i > 2 and (not is_prime(i))):\n            continue\n        ludic_numbers.append(i)\n    return ludic_numbers\n\ndef is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"], "outputs": "[[[]], [[2]], [[2]], [[2]], [[]], [[2]], [[2]], [[]]]", "probability": 0.05263157894736842, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [[2]], [[1, 2, 3, 5, 7]]]]"}]}
{"task_id": "Mbpp/604", "requirement": "def reverse_words(s: str) -> str:\n\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"", "llm_generated_inputs": "[['hello world'], ['python program'], ['reverse this string'], ['  leading and trailing spaces  '], ['multiple    spaces'], [''], ['singleword'], ['   '], ['word1 word2 word3']]", "programs": ["def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])"], "clusters": [{"programs_str": ["def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])"], "outputs": "[['world hello'], ['program python'], ['string this reverse'], ['spaces trailing and leading'], ['spaces multiple'], [''], ['singleword'], [''], ['word3 word2 word1']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/605", "requirement": "def prime_num(num: int) -> bool:\n\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert prime_num(13)==True\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [4], [13], [17], [25], [100], [-5], [0], [97], [99], [1000000]]", "programs": ["def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"], "clusters": [{"programs_str": ["def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"], "outputs": "[[False], [True], [True], [False], [True], [True], [False], [False], [False], [False], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/606", "requirement": "def radian_degree(degree: float) -> float:\n\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"", "llm_generated_inputs": "[[0], [90], [180], [360], [-90], [45.0], [1.5], [100.0], [270], [3.141592653589793]]", "programs": ["import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return math.radians(degree)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return math.radians(degree)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "from math import pi\n\ndef radian_degree(degree: float) -> float:\n    return degree * (pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return math.radians(degree)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)"], "clusters": [{"programs_str": ["import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return math.radians(degree)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return math.radians(degree)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "from math import pi\n\ndef radian_degree(degree: float) -> float:\n    return degree * (pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return math.radians(degree)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)"], "outputs": "[[0.0], [1.5707963267948966], [3.141592653589793], [6.283185307179586], [-1.5707963267948966], [0.7853981633974483], [0.026179938779914945], [1.7453292519943295], [4.71238898038469], [0.05483113556160755]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/607", "requirement": "from typing import Tuple\n\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"", "llm_generated_inputs": "[['The quick brown fox jumps over the lazy dog.', 'fox'], ['The quick brown fox jumps over the lazy dog.', 'jumps'], ['The quick brown fox jumps over the lazy dog.', 'lazy'], ['The quick brown fox jumps over the lazy dog.', 'cat'], ['', 'fox'], ['The quick brown fox jumps over the lazy dog.', ''], ['abcabcabc', 'abc'], ['abcabcabc', 'xyz'], ['a', 'a'], ['a', 'b']]", "programs": ["from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Optional, Tuple\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None", "from typing import Optional, Tuple\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None", "from typing import Optional, Tuple\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        start, end = (match.start(), match.end())\n        return (match.group(), start, end)\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None"], "clusters": [{"programs_str": ["from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Optional, Tuple\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None", "from typing import Optional, Tuple\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None", "from typing import Optional, Tuple\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        start, end = (match.start(), match.end())\n        return (match.group(), start, end)\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None"], "outputs": "[[('fox', 16, 19)], [('jumps', 20, 25)], [('lazy', 35, 39)], [None], [None], [('', 0, 0)], [('abc', 0, 3)], [None], [('a', 0, 1)], [None]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/608", "requirement": "def bell_Number(n: int) -> int:\n\"\"\"\nWrite a python function to find nth bell number.\nassert bell_Number(2) == 2\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [3], [4], [5], [10], [15]]", "programs": ["def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    if n == 0:\n        return 1\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    if n == 0:\n        return 1\n    bell = [[0 for j in range(n + 1)] for i in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for j in range(n + 1)] for i in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]"], "clusters": [{"programs_str": ["def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    if n == 0:\n        return 1\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    if n == 0:\n        return 1\n    bell = [[0 for j in range(n + 1)] for i in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for j in range(n + 1)] for i in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]"], "outputs": "[[1], [1], [2], [5], [15], [52], [115975], [1382958545]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/610", "requirement": "from typing import List\n\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"", "llm_generated_inputs": "[[[1, 1, 2, 3, 4, 4, 5, 1], 3], [[10, 20, 30, 40, 50], 1], [[5], 0], [[], 0], [[1, 2, 3, 4, 5], 0], [[1, 2, 3, 4, 5], 4], [[7, 8, 9, 10, 11, 12], 5], [[-1, -2, -3, -4], 2], [[5, 5, 5, 5, 5], 2], [[1, 2, 3], 3]]", "programs": ["from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 0 or k >= len(list1):\n        return list1\n    return list1[:k] + list1[k + 1:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 0 or k >= len(list1):\n        return list1\n    return list1[:k] + list1[k + 1:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 0 or k >= len(list1):\n        return list1\n    return list1[:k] + list1[k + 1:]"], "clusters": [{"programs_str": ["from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(list1):\n        return list1\n    return list1[:k - 1] + list1[k:]"], "outputs": "[[[1, 1, 3, 4, 4, 5, 1]], [[20, 30, 40, 50]], [[5]], [[]], [[1, 2, 3, 4, 5]], [[1, 2, 3, 5]], [[7, 8, 9, 10, 12]], [[-1, -3, -4]], [[5, 5, 5, 5]], [[1, 2]]]", "probability": 0.85, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 0 or k >= len(list1):\n        return list1\n    return list1[:k] + list1[k + 1:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 0 or k >= len(list1):\n        return list1\n    return list1[:k] + list1[k + 1:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if k < 0 or k >= len(list1):\n        return list1\n    return list1[:k] + list1[k + 1:]"], "outputs": "[[[1, 1, 2, 4, 4, 5, 1]], [[10, 30, 40, 50]], [[]], [[]], [[2, 3, 4, 5]], [[1, 2, 3, 4]], [[7, 8, 9, 10, 11]], [[-1, -2, -4]], [[5, 5, 5, 5]], [[1, 2, 3]]]", "probability": 0.15, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 1, 2, 3, 4, 4, 5, 1], 3], [[1, 1, 2, 4, 4, 5, 1]], [[1, 1, 3, 4, 4, 5, 1]]]]"}]}
{"task_id": "Mbpp/611", "requirement": "from typing import List\n\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"", "llm_generated_inputs": "[[[[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2], [[[1, 2], [3, 4], [5, 6]], 1], [[[10]], 0], [[[1, 2], [3, 4], [5, 0]], 0], [[[15, 25, 35], [10, 20, 30], [5, 6, 7]], 2], [[], 0], [[[1, 2, 3]], 2], [[[1, 3], [2], [4, 5, 6]], 0]]", "programs": ["from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))"], "clusters": [{"programs_str": ["from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))"], "outputs": "[[19], [6], [10], [5], [35], ['ValueError'], [3], [4]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/612", "requirement": "from typing import List\n\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"", "llm_generated_inputs": "[[[['x', 'y'], ['a', 'b'], ['m', 'n']]], [[['1', '2'], ['3', '4'], ['5', '6']]], [[['a', 'd'], ['b', 'e'], ['c', 'f']]], [[[], []]], [[['single']]], [[['apple', 'banana'], ['cherry', 'date'], ['fig', 'grape']]], [[['1', 'a'], ['2', 'b'], ['3', 'c'], ['4', 'd']]], [[['x1', 'y1'], ['x2', 'y2']]], [[['test1', 'test2']]]]", "programs": ["from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    return [[sublist[0] for sublist in lst], [sublist[1] for sublist in lst]]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    return [[sublist[0] for sublist in lst], [sublist[1] for sublist in lst]]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]"], "clusters": [{"programs_str": ["from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    return [[sublist[0] for sublist in lst], [sublist[1] for sublist in lst]]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    return [[sublist[0] for sublist in lst], [sublist[1] for sublist in lst]]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]"], "outputs": "[[[['x', 'a', 'm'], ['y', 'b', 'n']]], [[['1', '3', '5'], ['2', '4', '6']]], [[['a', 'b', 'c'], ['d', 'e', 'f']]], ['IndexError'], ['IndexError'], [[['apple', 'cherry', 'fig'], ['banana', 'date', 'grape']]], [[['1', '2', '3', '4'], ['a', 'b', 'c', 'd']]], [[['x1', 'x2'], ['y1', 'y2']]], [[['test1'], ['test2']]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/614", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"", "llm_generated_inputs": "[[[(1, 2), (3, 4)]], [[(10, 20), (30,)]], [[(0, 0), (0, 0)]], [[(1, 1, 1), (1, 1)]], [[(5, 5, 5), (5, 5, 5)]], [[(1,), (2,), (3,)]], [[(1, -1), (-2, 2)]], [[(999,), (1, 0), (0, 999)]], [[(0,)]], [[(1, 2, 3), (4, 5, 6), (7, 8, 9)]]]", "programs": ["from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(t) for t in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(t) for t in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))"], "clusters": [{"programs_str": ["from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(t) for t in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(t) for t in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))"], "outputs": "[[10], [60], [0], [5], [30], [6], [0], [1999], [0], [45]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/615", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"", "llm_generated_inputs": "[[((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))], [((1, 2), (3, 4), (5, 6))], [((5,), (10,), (15,))], [((-1, -2, -3), (-4, -5, -6), (-7, -8, -9))], [((0, 0, 0), (0, 0, 0))], [((10.5, 20.5), (30.5, 40.5), (50.5, 60.5))], [((-10.5, -20.5), (-30.5, -40.5), (-50.5, -60.5))], [()]]", "programs": ["from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(tup) / len(tup) for tup in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(tup) / len(tup) for tup in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(tup) / len(tup) for tup in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(tup) / len(tup) for tup in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(tup) / len(tup) for tup in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(tup) / len(tup) for tup in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(tup) / len(tup) for tup in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    averages = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        averages.append(avg)\n    return averages"], "clusters": [{"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(tup) / len(tup) for tup in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(tup) / len(tup) for tup in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(tup) / len(tup) for tup in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(tup) / len(tup) for tup in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(tup) / len(tup) for tup in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(tup) / len(tup) for tup in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(tup) / len(tup) for tup in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List\nfrom typing import Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    averages = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        averages.append(avg)\n    return averages"], "outputs": "[[[10.5, 44.0, 58.0, 2.5]], [[1.5, 3.5, 5.5]], [[5.0, 10.0, 15.0]], [[-2.0, -5.0, -8.0]], [[0.0, 0.0]], [[15.5, 35.5, 55.5]], [[-15.5, -35.5, -55.5]], [[]]]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))], [[10.5, 44.0, 58.0, 2.5]], [[30.5, 34.25, 27.0, 23.25]]]]"}]}
{"task_id": "Mbpp/616", "requirement": "from typing import Tuple\n\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"", "llm_generated_inputs": "[[(10, 4, 5, 6), (5, 6, 7, 5)], [(20, 15, 10, 5), (7, 5, 2, 10)], [(1, 2, 3), (1, 2, 3)]]", "programs": ["from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((x % y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((x % y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))"], "clusters": [{"programs_str": ["from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((x % y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((x % y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))"], "outputs": "[[(0, 4, 5, 1)], [(6, 0, 0, 5)], [(0, 0, 0)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/618", "requirement": "from typing import List\n\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n\"\"\"\nWrite a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"", "llm_generated_inputs": "[[[4, 5, 6], [1, 2, 3]], [[10, 20, 30], [2, 5, 3]], [[0, 0, 0], [1, 2, 3]], [[1, 2, 3], [0, 1, 2]], [[], []], [[1, 2], [1, 0]], [[5], [2]], [[100, 200], [10, 0]], [[100.0, 200.0], [10.0, 20.0]]]", "programs": ["from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [x / y for x, y in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [x / y for x, y in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]"], "clusters": [{"programs_str": ["from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [x / y for x, y in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [x / y for x, y in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]"], "outputs": "[[[4.0, 2.5, 2.0]], [[5.0, 4.0, 10.0]], [[0.0, 0.0, 0.0]], ['ZeroDivisionError'], [[]], ['ZeroDivisionError'], [[2.5]], ['ZeroDivisionError'], [[10.0, 10.0]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/619", "requirement": "def move_num(test_str: str) -> str:\n\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"", "llm_generated_inputs": "[['I1love143you55three3000thousand'], ['Hello123World'], ['NoNumbersHere'], ['12345'], ['abcde12345'], ['!@#$%^&*()1234567890'], [''], ['OnlyNumbers%&*(^%$#@!12345']]", "programs": ["def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join((c for c in test_str if not c.isdigit()))\n    numbers = ''.join((c for c in test_str if c.isdigit()))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join((char for char in test_str if not char.isdigit()))\n    numbers = ''.join((char for char in test_str if char.isdigit()))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join((ch for ch in test_str if not ch.isdigit()))\n    numbers = ''.join((ch for ch in test_str if ch.isdigit()))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join((c for c in test_str if not c.isdigit()))\n    numbers = ''.join((c for c in test_str if c.isdigit()))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join((c for c in test_str if not c.isdigit()))\n    numbers = ''.join((c for c in test_str if c.isdigit()))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join((c for c in test_str if not c.isdigit()))\n    numbers = ''.join((c for c in test_str if c.isdigit()))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join((c for c in test_str if not c.isdigit()))\n    numbers = ''.join((c for c in test_str if c.isdigit()))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join((char for char in test_str if not char.isdigit()))\n    numbers = ''.join((char for char in test_str if char.isdigit()))\n    return letters + numbers"], "clusters": [{"programs_str": ["def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers"], "outputs": "[['Iloveyouthreethousand1143553000'], ['HelloWorld123'], ['NoNumbersHere'], ['12345'], ['abcde12345'], ['1234567890'], [''], ['OnlyNumbers12345']]", "probability": 0.6, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def move_num(test_str: str) -> str:\n    letters = ''.join((c for c in test_str if not c.isdigit()))\n    numbers = ''.join((c for c in test_str if c.isdigit()))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join((char for char in test_str if not char.isdigit()))\n    numbers = ''.join((char for char in test_str if char.isdigit()))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join((ch for ch in test_str if not ch.isdigit()))\n    numbers = ''.join((ch for ch in test_str if ch.isdigit()))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join((c for c in test_str if not c.isdigit()))\n    numbers = ''.join((c for c in test_str if c.isdigit()))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join((c for c in test_str if not c.isdigit()))\n    numbers = ''.join((c for c in test_str if c.isdigit()))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join((c for c in test_str if not c.isdigit()))\n    numbers = ''.join((c for c in test_str if c.isdigit()))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join((c for c in test_str if not c.isdigit()))\n    numbers = ''.join((c for c in test_str if c.isdigit()))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    letters = ''.join((char for char in test_str if not char.isdigit()))\n    numbers = ''.join((char for char in test_str if char.isdigit()))\n    return letters + numbers"], "outputs": "[['Iloveyouthreethousand1143553000'], ['HelloWorld123'], ['NoNumbersHere'], ['12345'], ['abcde12345'], ['!@#$%^&*()1234567890'], [''], ['OnlyNumbers%&*(^%$#@!12345']]", "probability": 0.4, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/620", "requirement": "from typing import List\n\n\ndef largest_subset(a: List[int]) -> int:\n\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 4, 8]], [[3, 6, 12, 24]], [[1, 3, 6, 13, 17, 18]], [[5, 10, 15, 20, 25]], [[3, 5, 7, 11]], [[2, 4, 6, 8, 10]], [[0, 0, 0]], [[1]], [[1, 2, 3, 5, 7]], [[8, 4, 2, 1]], [[10, 9, 8, 7, 6]]]", "programs": ["from typing import List\nimport math\n\ndef largest_subset(a: List[int]) -> int:\n    n = len(a)\n    if n == 0:\n        return 0\n    a.sort()\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp) if dp else 0", "from typing import List\nfrom math import gcd\nfrom functools import reduce\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    n = len(a)\n    a.sort()\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\nfrom math import gcd\nfrom functools import reduce\n\ndef largest_subset(a: List[int]) -> int:\n\n    def lcm(x, y):\n        return abs(x * y) // gcd(x, y)\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if lcm(a[i], a[j]) == a[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    n = len(a)\n    a.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\nfrom math import gcd\nfrom functools import reduce\n\ndef largest_subset(a: List[int]) -> int:\n\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\nfrom itertools import combinations\n\ndef largest_subset(a: List[int]) -> int:\n\n    def is_divisible_subset(subset):\n        for x, y in combinations(subset, 2):\n            if x % y != 0 and y % x != 0:\n                return False\n        return True\n    max_size = 0\n    n = len(a)\n    for i in range(1, n + 1):\n        for subset in combinations(a, i):\n            if is_divisible_subset(subset):\n                max_size = max(max_size, len(subset))\n    return max_size", "from typing import List\nfrom math import gcd\nfrom functools import reduce\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    n = len(a)\n    a.sort()\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    n = len(a)\n    a.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    n = len(a)\n    a.sort()\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\nfrom math import gcd\nfrom functools import lru_cache\n\ndef largest_subset(a: List[int]) -> int:\n\n    def dp(index, size):\n        if index == len(a):\n            return size\n        include = 0\n        if all((num % a[index] == 0 for num in a if num != a[index])):\n            include = dp(index + 1, size + 1)\n        exclude = dp(index + 1, size)\n        return max(include, exclude)\n    return dp(0, 0)"], "clusters": [{"programs_str": ["from typing import List\nimport math\n\ndef largest_subset(a: List[int]) -> int:\n    n = len(a)\n    if n == 0:\n        return 0\n    a.sort()\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp) if dp else 0", "from typing import List\nfrom math import gcd\nfrom functools import reduce\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    n = len(a)\n    a.sort()\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\nfrom math import gcd\nfrom functools import reduce\n\ndef largest_subset(a: List[int]) -> int:\n\n    def lcm(x, y):\n        return abs(x * y) // gcd(x, y)\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if lcm(a[i], a[j]) == a[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    n = len(a)\n    a.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\nfrom math import gcd\nfrom functools import reduce\n\ndef largest_subset(a: List[int]) -> int:\n\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\nfrom itertools import combinations\n\ndef largest_subset(a: List[int]) -> int:\n\n    def is_divisible_subset(subset):\n        for x, y in combinations(subset, 2):\n            if x % y != 0 and y % x != 0:\n                return False\n        return True\n    max_size = 0\n    n = len(a)\n    for i in range(1, n + 1):\n        for subset in combinations(a, i):\n            if is_divisible_subset(subset):\n                max_size = max(max_size, len(subset))\n    return max_size", "from typing import List\nfrom math import gcd\nfrom functools import reduce\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    n = len(a)\n    a.sort()\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    n = len(a)\n    a.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    n = len(a)\n    a.sort()\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"], "outputs": "[[4], [4], [4], [3], [1], [3], ['ZeroDivisionError'], [1], [2], [4], [1]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nfrom math import gcd\nfrom functools import lru_cache\n\ndef largest_subset(a: List[int]) -> int:\n\n    def dp(index, size):\n        if index == len(a):\n            return size\n        include = 0\n        if all((num % a[index] == 0 for num in a if num != a[index])):\n            include = dp(index + 1, size + 1)\n        exclude = dp(index + 1, size)\n        return max(include, exclude)\n    return dp(0, 0)"], "outputs": "[[1], [1], [1], [1], [0], [1], [3], [1], [1], [1], [0]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 3, 6, 13, 17, 18]], [1], [4]]]"}]}
{"task_id": "Mbpp/622", "requirement": "from typing import List\n\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n\"\"\"\nWrite a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"", "llm_generated_inputs": "[[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5], [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5], [[], [], 0], [[1], [1], 1], [[1, 3], [2, 4], 2], [[10, 20, 30], [5, 15, 25], 3], [[5, 6, 7], [1, 2, 3], 3], [[1, 1, 1, 1, 1], [2, 2, 2, 2, 2], 5], [[100, 200, 300, 400], [50, 150, 250, 350], 4]]", "programs": ["from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    combined = nums1 + nums2\n    combined.sort()\n    mid = n * 2\n    if mid % 2 == 0:\n        return (combined[mid // 2 - 1] + combined[mid // 2]) / 2.0\n    else:\n        return combined[mid // 2]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = []\n    i, j = (0, 0)\n    while i < n and j < n:\n        if nums1[i] < nums2[j]:\n            merged.append(nums1[i])\n            i += 1\n        else:\n            merged.append(nums2[j])\n            j += 1\n    while i < n:\n        merged.append(nums1[i])\n        i += 1\n    while j < n:\n        merged.append(nums2[j])\n        j += 1\n    mid = n\n    return (merged[mid - 1] + merged[mid]) / 2.0", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n\n    return (merged[mid - 1] + merged[mid]) / 2.0", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n\n    median = (merged[mid - 1] + merged[mid]) / 2\n    return median", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if n <= 0:\n        raise ValueError('The size of the arrays must be greater than zero.')\n    merged = []\n    i, j = (0, 0)\n    while i < n and j < n:\n        if nums1[i] < nums2[j]:\n            merged.append(nums1[i])\n            i += 1\n        else:\n            merged.append(nums2[j])\n            j += 1\n    while i < n:\n        merged.append(nums1[i])\n        i += 1\n    while j < n:\n        merged.append(nums2[j])\n        j += 1\n    mid = n\n    if mid % 2 == 0:\n        return (merged[mid // 2 - 1] + merged[mid // 2]) / 2.0\n    else:\n        return merged[mid // 2]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n\n    if mid % 2 == 0:\n        return (merged[mid // 2 - 1] + merged[mid // 2]) / 2.0\n    else:\n        return merged[mid // 2]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n\n    if mid % 2 == 0:\n        return (merged[mid // 2 - 1] + merged[mid // 2]) / 2.0\n    else:\n        return merged[mid // 2]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    combined = sorted(nums1 + nums2)\n    mid = n\n    if mid % 2 == 0:\n        return (combined[mid // 2 - 1] + combined[mid // 2]) / 2.0\n    else:\n        return float(combined[mid // 2])", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n\n    if mid % 2 == 0:\n        return (merged[mid // 2 - 1] + merged[mid // 2]) / 2\n    else:\n        return merged[mid // 2]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n\n    if mid % 2 == 0:\n        return (merged[mid // 2 - 1] + merged[mid // 2]) / 2.0\n    else:\n        return merged[mid // 2]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n\n    if mid % 2 == 0:\n        return (merged[mid // 2 - 1] + merged[mid // 2]) / 2.0\n    else:\n        return merged[mid // 2]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n // 2\n    if n % 2 == 0:\n        return (merged[mid - 1] + merged[mid]) / 2.0\n    else:\n        return merged[mid]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n\n    if mid % 2 == 0:\n        return (merged[mid // 2 - 1] + merged[mid // 2]) / 2\n    else:\n        return merged[mid // 2]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    if n % 2 == 0:\n        return (merged[n - 1] + merged[n]) / 2.0\n    else:\n        return merged[n // 2]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    if n % 2 == 0:\n        return (merged[n - 1] + merged[n]) / 2.0\n    else:\n        return float(merged[n // 2])", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n\n    if n % 2 == 0:\n        return (merged[mid - 1] + merged[mid]) / 2.0\n    else:\n        return merged[mid]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = []\n    i = j = 0\n    while i < n and j < n:\n        if nums1[i] < nums2[j]:\n            merged.append(nums1[i])\n            i += 1\n        else:\n            merged.append(nums2[j])\n            j += 1\n    while i < n:\n        merged.append(nums1[i])\n        i += 1\n    while j < n:\n        merged.append(nums2[j])\n        j += 1\n    mid = n\n    if n % 2 == 0:\n        return (merged[mid - 1] + merged[mid]) / 2.0\n    else:\n        return merged[mid]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    combined = sorted(nums1 + nums2)\n    mid = n\n    if n % 2 == 0:\n        return (combined[mid - 1] + combined[mid]) / 2.0\n    else:\n        return float(combined[mid])", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n * 2 // 2\n    if n % 2 == 0:\n        return (merged[mid - 1] + merged[mid]) / 2.0\n    else:\n        return merged[mid]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if n <= 0:\n        return 0.0\n    merged = []\n    i, j = (0, 0)\n    while i < n and j < n:\n        if nums1[i] < nums2[j]:\n            merged.append(nums1[i])\n            i += 1\n        else:\n            merged.append(nums2[j])\n            j += 1\n    while i < n:\n        merged.append(nums1[i])\n        i += 1\n    while j < n:\n        merged.append(nums2[j])\n        j += 1\n    mid = n\n    if mid % 2 == 0:\n        return (merged[mid // 2 - 1] + merged[mid // 2]) / 2.0\n    else:\n        return merged[mid // 2]"], "clusters": [{"programs_str": ["from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    combined = nums1 + nums2\n    combined.sort()\n    mid = n * 2\n    if mid % 2 == 0:\n        return (combined[mid // 2 - 1] + combined[mid // 2]) / 2.0\n    else:\n        return combined[mid // 2]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = []\n    i, j = (0, 0)\n    while i < n and j < n:\n        if nums1[i] < nums2[j]:\n            merged.append(nums1[i])\n            i += 1\n        else:\n            merged.append(nums2[j])\n            j += 1\n    while i < n:\n        merged.append(nums1[i])\n        i += 1\n    while j < n:\n        merged.append(nums2[j])\n        j += 1\n    mid = n\n    return (merged[mid - 1] + merged[mid]) / 2.0", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n\n    return (merged[mid - 1] + merged[mid]) / 2.0", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n\n    median = (merged[mid - 1] + merged[mid]) / 2\n    return median"], "outputs": "[[16.0], [5.5], ['IndexError'], [1.0], [2.5], [17.5], [4.0], [1.5], [225.0]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if n <= 0:\n        raise ValueError('The size of the arrays must be greater than zero.')\n    merged = []\n    i, j = (0, 0)\n    while i < n and j < n:\n        if nums1[i] < nums2[j]:\n            merged.append(nums1[i])\n            i += 1\n        else:\n            merged.append(nums2[j])\n            j += 1\n    while i < n:\n        merged.append(nums1[i])\n        i += 1\n    while j < n:\n        merged.append(nums2[j])\n        j += 1\n    mid = n\n    if mid % 2 == 0:\n        return (merged[mid // 2 - 1] + merged[mid // 2]) / 2.0\n    else:\n        return merged[mid // 2]"], "outputs": "[[12], [3], ['ValueError'], [1], [1.5], [10], [2], [1], [125.0]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5], [12], [16.0]]]"}, {"programs_str": ["from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n\n    if mid % 2 == 0:\n        return (merged[mid // 2 - 1] + merged[mid // 2]) / 2.0\n    else:\n        return merged[mid // 2]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n\n    if mid % 2 == 0:\n        return (merged[mid // 2 - 1] + merged[mid // 2]) / 2.0\n    else:\n        return merged[mid // 2]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    combined = sorted(nums1 + nums2)\n    mid = n\n    if mid % 2 == 0:\n        return (combined[mid // 2 - 1] + combined[mid // 2]) / 2.0\n    else:\n        return float(combined[mid // 2])", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n\n    if mid % 2 == 0:\n        return (merged[mid // 2 - 1] + merged[mid // 2]) / 2\n    else:\n        return merged[mid // 2]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n\n    if mid % 2 == 0:\n        return (merged[mid // 2 - 1] + merged[mid // 2]) / 2.0\n    else:\n        return merged[mid // 2]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n\n    if mid % 2 == 0:\n        return (merged[mid // 2 - 1] + merged[mid // 2]) / 2.0\n    else:\n        return merged[mid // 2]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n // 2\n    if n % 2 == 0:\n        return (merged[mid - 1] + merged[mid]) / 2.0\n    else:\n        return merged[mid]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n\n    if mid % 2 == 0:\n        return (merged[mid // 2 - 1] + merged[mid // 2]) / 2\n    else:\n        return merged[mid // 2]"], "outputs": "[[12], [3], ['IndexError'], [1], [1.5], [10], [2], [1], [125.0]]", "probability": 0.4, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5], [12], [16.0]]]"}, {"programs_str": ["from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    if n % 2 == 0:\n        return (merged[n - 1] + merged[n]) / 2.0\n    else:\n        return merged[n // 2]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    if n % 2 == 0:\n        return (merged[n - 1] + merged[n]) / 2.0\n    else:\n        return float(merged[n // 2])"], "outputs": "[[12], [3], ['IndexError'], [1], [2.5], [10], [2], [1], [225.0]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5], [12], [16.0]]]"}, {"programs_str": ["from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n\n    if n % 2 == 0:\n        return (merged[mid - 1] + merged[mid]) / 2.0\n    else:\n        return merged[mid]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = []\n    i = j = 0\n    while i < n and j < n:\n        if nums1[i] < nums2[j]:\n            merged.append(nums1[i])\n            i += 1\n        else:\n            merged.append(nums2[j])\n            j += 1\n    while i < n:\n        merged.append(nums1[i])\n        i += 1\n    while j < n:\n        merged.append(nums2[j])\n        j += 1\n    mid = n\n    if n % 2 == 0:\n        return (merged[mid - 1] + merged[mid]) / 2.0\n    else:\n        return merged[mid]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    combined = sorted(nums1 + nums2)\n    mid = n\n    if n % 2 == 0:\n        return (combined[mid - 1] + combined[mid]) / 2.0\n    else:\n        return float(combined[mid])", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = n * 2 // 2\n    if n % 2 == 0:\n        return (merged[mid - 1] + merged[mid]) / 2.0\n    else:\n        return merged[mid]"], "outputs": "[[17], [6], ['IndexError'], [1], [2.5], [20], [5], [2], [225.0]]", "probability": 0.2, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5], [17], [16.0]]]"}, {"programs_str": ["from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if n <= 0:\n        return 0.0\n    merged = []\n    i, j = (0, 0)\n    while i < n and j < n:\n        if nums1[i] < nums2[j]:\n            merged.append(nums1[i])\n            i += 1\n        else:\n            merged.append(nums2[j])\n            j += 1\n    while i < n:\n        merged.append(nums1[i])\n        i += 1\n    while j < n:\n        merged.append(nums2[j])\n        j += 1\n    mid = n\n    if mid % 2 == 0:\n        return (merged[mid // 2 - 1] + merged[mid // 2]) / 2.0\n    else:\n        return merged[mid // 2]"], "outputs": "[[12], [3], [0.0], [1], [1.5], [10], [2], [1], [125.0]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5], [12], [16.0]]]"}]}
{"task_id": "Mbpp/623", "requirement": "from typing import List\n\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n\"\"\"\nWrite a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 4, 5], 2], [[10, 0, -1], 3], [[], 4], [[5, 6, 7], 0], [[-3, -2, -1], 2], [[2, 3, 4], 1], [[5], 5]]", "programs": ["from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]"], "clusters": [{"programs_str": ["from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]"], "outputs": "[[[1, 4, 9, 16, 25]], [[1000, 0, -1]], [[]], [[1, 1, 1]], [[9, 4, 1]], [[2, 3, 4]], [[3125]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/624", "requirement": "def is_upper(string: str) -> str:\n\"\"\"\nWrite a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"", "llm_generated_inputs": "[['hello'], ['WORLD'], [''], ['123abc!'], ['Python 3.8'], ['mixedCASEString']]", "programs": ["def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()"], "clusters": [{"programs_str": ["def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()"], "outputs": "[['HELLO'], ['WORLD'], [''], ['123ABC!'], ['PYTHON 3.8'], ['MIXEDCASESTRING']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/626", "requirement": "def triangle_area(radius: float) -> float:\n\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None\n\"\"\"", "llm_generated_inputs": "[[-1.0], [0.0], [1.0], [5.0], [100.0], [1.5], [3.14], [2.0]]", "programs": ["def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * (3.14159 / 2)", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * (3.14159 / 2)", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * (3.14159 / 2)", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * (3.14 / 2)", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * (3.14159 / 2)", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * (3.141592653589793 / 2)", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * (3.14 / 2)", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * (3.14159 / 2)", "def triangle_area(radius: float) -> float:\n    if radius <= 0:\n        return None\n    return radius ** 2 * (3.14159 / 2)", "def triangle_area(radius: float) -> float:\n    if radius <= 0:\n        return None\n    return radius ** 2 * (3.141592653589793 / 2)", "def triangle_area(radius: float) -> float:\n    if radius <= 0:\n        return None\n    return radius ** 2 * (3.141592653589793 / 2)", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * 3 ** 0.5 / 4", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius * radius / 2", "def triangle_area(radius: float) -> float:\n    if radius <= 0:\n        return None\n    return radius ** 2 * (3.14159 / 4)", "def triangle_area(radius: float) -> float:\n    if radius <= 0:\n        return None\n    return radius ** 2 * (3.141592653589793 / 4)", "def triangle_area(radius: float) -> float:\n    if radius <= 0:\n        return None\n    return radius ** 2 * (3.14159 / 4)", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * (3.14159265359 / 4)", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * (3.14159 / 2) / 2", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * 3.14159 / 4", "def triangle_area(radius: float) -> float:\n    if radius <= 0:\n        return None\n    return radius ** 2 * (1.73205080757 / 4)"], "clusters": [{"programs_str": ["def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * (3.14159 / 2)", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * (3.14159 / 2)", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * (3.14159 / 2)", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * (3.14 / 2)", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * (3.14159 / 2)", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * (3.141592653589793 / 2)", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * (3.14 / 2)", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * (3.14159 / 2)"], "outputs": "[[None], [0.0], [1.570795], [39.269875], [15707.949999999999], [3.53428875], [15.487410382], [6.28318]]", "probability": 0.4, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def triangle_area(radius: float) -> float:\n    if radius <= 0:\n        return None\n    return radius ** 2 * (3.14159 / 2)", "def triangle_area(radius: float) -> float:\n    if radius <= 0:\n        return None\n    return radius ** 2 * (3.141592653589793 / 2)", "def triangle_area(radius: float) -> float:\n    if radius <= 0:\n        return None\n    return radius ** 2 * (3.141592653589793 / 2)"], "outputs": "[[None], [None], [1.570795], [39.269875], [15707.949999999999], [3.53428875], [15.487410382], [6.28318]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * 3 ** 0.5 / 4"], "outputs": "[[None], [0.0], [0.4330127018922193], [10.825317547305483], [4330.127018922193], [0.9742785792574934], [4.269332035576525], [1.7320508075688772]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius * radius / 2"], "outputs": "[[None], [0.0], [0.5], [12.5], [5000.0], [1.125], [4.9298], [2.0]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def triangle_area(radius: float) -> float:\n    if radius <= 0:\n        return None\n    return radius ** 2 * (3.14159 / 4)", "def triangle_area(radius: float) -> float:\n    if radius <= 0:\n        return None\n    return radius ** 2 * (3.141592653589793 / 4)", "def triangle_area(radius: float) -> float:\n    if radius <= 0:\n        return None\n    return radius ** 2 * (3.14159 / 4)"], "outputs": "[[None], [None], [0.7853975], [19.6349375], [7853.974999999999], [1.767144375], [7.743705191], [3.14159]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * (3.14159265359 / 4)", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * (3.14159 / 2) / 2", "def triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius ** 2 * 3.14159 / 4"], "outputs": "[[None], [0.0], [0.7853981633975], [19.6349540849375], [7853.9816339750005], [1.767145867644375], [7.743711731833992], [3.14159265359]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def triangle_area(radius: float) -> float:\n    if radius <= 0:\n        return None\n    return radius ** 2 * (1.73205080757 / 4)"], "outputs": "[[None], [None], [0.4330127018925], [10.825317547312501], [4330.127018925], [0.974278579258125], [4.269332035579294], [1.73205080757]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/628", "requirement": "def replace_spaces(string: str) -> str:\n\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"", "llm_generated_inputs": "[['Hello World'], ['    Leading spaces'], ['Trailing spaces    '], ['   Multiple    spaces   '], [''], ['SingleSpace'], ['   '], ['Spaces   in between   words'], ['NoSpacesAtAll'], ['A B C D']]", "programs": ["def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')"], "clusters": [{"programs_str": ["def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')"], "outputs": "[['Hello%20World'], ['%20%20%20%20Leading%20spaces'], ['Trailing%20spaces%20%20%20%20'], ['%20%20%20Multiple%20%20%20%20spaces%20%20%20'], [''], ['SingleSpace'], ['%20%20%20'], ['Spaces%20%20%20in%20between%20%20%20words'], ['NoSpacesAtAll'], ['A%20B%20C%20D']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/629", "requirement": "from typing import List\n\n\ndef Split(l: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 4, 5]], [[10, 15, 20, 25, 30]], [[0, -2, -4, 3, 5]], [[-1, -3, -5]], [[2, 4, 6, 8, 10]], [[-2, 0, 2, 4]], [[7, 9, 11, 13]], [[1, 3, 5, 7, 9]], [[]], [[4]], [[1, 3, 5, 7, 8, 10, 12]]]", "programs": ["from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]"], "clusters": [{"programs_str": ["from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]"], "outputs": "[[[2, 4]], [[10, 20, 30]], [[0, -2, -4]], [[]], [[2, 4, 6, 8, 10]], [[-2, 0, 2, 4]], [[]], [[]], [[]], [[4]], [[8, 10, 12]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/630", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"", "llm_generated_inputs": "[[(3, 4)], [(0, 0)], [(-1, -1)], [(5, 5)], [(1, 1)], [(-3, 0)], [(2, -2)], [(100, 100)]]", "programs": ["from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    results = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            results.append([i, j])\n    return results", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    coordinates = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            coordinates.append([i, j])\n    return coordinates", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    coordinates = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            coordinates.append([i, j])\n    return coordinates", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    coordinates = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            coordinates.append([i, j])\n    return coordinates", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    result = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            result.append([i, j])\n    return result", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    coordinates = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            coordinates.append([i, j])\n    return coordinates", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    coordinates = [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]\n    return coordinates", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    adjacent_coordinates = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if not (i == 0 and j == 0):\n                adjacent_coordinates.append([x + i, y + j])\n    return adjacent_coordinates"], "clusters": [{"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    results = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            results.append([i, j])\n    return results", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    coordinates = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            coordinates.append([i, j])\n    return coordinates", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    coordinates = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            coordinates.append([i, j])\n    return coordinates", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    coordinates = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            coordinates.append([i, j])\n    return coordinates", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    result = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            result.append([i, j])\n    return result", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    coordinates = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            coordinates.append([i, j])\n    return coordinates", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    coordinates = [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]\n    return coordinates", "from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]"], "outputs": "[[[[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]], [[[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 0], [0, 1], [1, -1], [1, 0], [1, 1]]], [[[-2, -2], [-2, -1], [-2, 0], [-1, -2], [-1, -1], [-1, 0], [0, -2], [0, -1], [0, 0]]], [[[4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6], [6, 4], [6, 5], [6, 6]]], [[[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]], [[[-4, -1], [-4, 0], [-4, 1], [-3, -1], [-3, 0], [-3, 1], [-2, -1], [-2, 0], [-2, 1]]], [[[1, -3], [1, -2], [1, -1], [2, -3], [2, -2], [2, -1], [3, -3], [3, -2], [3, -1]]], [[[99, 99], [99, 100], [99, 101], [100, 99], [100, 100], [100, 101], [101, 99], [101, 100], [101, 101]]]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nfrom typing import Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    adjacent_coordinates = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if not (i == 0 and j == 0):\n                adjacent_coordinates.append([x + i, y + j])\n    return adjacent_coordinates"], "outputs": "[[[[2, 3], [2, 4], [2, 5], [3, 3], [3, 5], [4, 3], [4, 4], [4, 5]]], [[[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]]], [[[-2, -2], [-2, -1], [-2, 0], [-1, -2], [-1, 0], [0, -2], [0, -1], [0, 0]]], [[[4, 4], [4, 5], [4, 6], [5, 4], [5, 6], [6, 4], [6, 5], [6, 6]]], [[[0, 0], [0, 1], [0, 2], [1, 0], [1, 2], [2, 0], [2, 1], [2, 2]]], [[[-4, -1], [-4, 0], [-4, 1], [-3, -1], [-3, 1], [-2, -1], [-2, 0], [-2, 1]]], [[[1, -3], [1, -2], [1, -1], [2, -3], [2, -1], [3, -3], [3, -2], [3, -1]]], [[[99, 99], [99, 100], [99, 101], [100, 99], [100, 101], [101, 99], [101, 100], [101, 101]]]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[(3, 4)], [[[2, 3], [2, 4], [2, 5], [3, 3], [3, 5], [4, 3], [4, 4], [4, 5]]], [[[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]]]]"}]}
{"task_id": "Mbpp/631", "requirement": "def replace_spaces(text: str) -> str:\n\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"", "llm_generated_inputs": "[['Hello World'], ['  Leading and trailing spaces  '], ['Multiple   spaces'], ['NoSpacesHere'], ['Spaces_at_the_end_   '], ['_Starts_with_underscore'], [''], ['One space'], ['Tab\\tand\\nnewline']]", "programs": ["def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')"], "clusters": [{"programs_str": ["def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')"], "outputs": "[['Hello World'], ['  Leading and trailing spaces  '], ['Multiple   spaces'], ['NoSpacesHere'], ['Spaces at the end    '], [' Starts with underscore'], [''], ['One space'], ['Tab\\tand\\nnewline']]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['Jumanji The Jungle'], ['Jumanji The Jungle'], ['Jumanji_The_Jungle']]]"}]}
{"task_id": "Mbpp/632", "requirement": "from typing import List\n\n\ndef move_zero(num_list: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"", "llm_generated_inputs": "[[[1, 0, 2, 0, 3, 4]], [[0, 0, 0, 1, 2, 3]], [[1, 2, 3, 4, 0, 0]], [[0, 1, 0, 2, 0, 3]], [[1, 2, 3]], [[0]], [[1, 0, 0, 0, 2]], [[0, 0, 0, 0]], [[-1, 0, 2, 0, 3]], [[0, 1, 2, 3, 4, 5]], [[1, 2, 0, 0, 3, 4]], [[5, 0, 0, 0, 1, 0, 2, 0]]]", "programs": ["from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    result = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    result.extend([0] * zero_count)\n    return result", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    result = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    result.extend([0] * zero_count)\n    return result", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    non_zeroes = [num for num in num_list if num != 0]\n    zeroes = [0] * (len(num_list) - len(non_zeroes))\n    return non_zeroes + zeroes", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    non_zero_elements = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    return non_zero_elements + [0] * zero_count", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    non_zeroes = [num for num in num_list if num != 0]\n    zeroes = [0] * (len(num_list) - len(non_zeroes))\n    return non_zeroes + zeroes", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    count = 0\n    for num in num_list:\n        if num != 0:\n            num_list[count] = num\n            count += 1\n    while count < len(num_list):\n        num_list[count] = 0\n        count += 1\n    return num_list", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    result = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    return result + [0] * zero_count", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    result = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    result.extend([0] * zero_count)\n    return result", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [num for num in num_list if num != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [num for num in num_list if num != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    result = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    result.extend([0] * zero_count)\n    return result", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [num for num in num_list if num != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    non_zeroes = [num for num in num_list if num != 0]\n    zeroes = [0] * (len(num_list) - len(non_zeroes))\n    return non_zeroes + zeroes", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    result = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    result.extend([0] * zero_count)\n    return result", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [num for num in num_list if num != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    zero_count = num_list.count(0)\n    return [num for num in num_list if num != 0] + [0] * zero_count", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    result = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    result.extend([0] * zero_count)\n    return result", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    result = [num for num in num_list if num != 0]\n    zeros = [0] * (len(num_list) - len(result))\n    return result + zeros", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    result = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    return result + [0] * zero_count", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    non_zeroes = [num for num in num_list if num != 0]\n    zeroes = [0] * (len(num_list) - len(non_zeroes))\n    return non_zeroes + zeroes"], "clusters": [{"programs_str": ["from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    result = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    result.extend([0] * zero_count)\n    return result", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    result = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    result.extend([0] * zero_count)\n    return result", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    non_zeroes = [num for num in num_list if num != 0]\n    zeroes = [0] * (len(num_list) - len(non_zeroes))\n    return non_zeroes + zeroes", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    non_zero_elements = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    return non_zero_elements + [0] * zero_count", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    non_zeroes = [num for num in num_list if num != 0]\n    zeroes = [0] * (len(num_list) - len(non_zeroes))\n    return non_zeroes + zeroes", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    count = 0\n    for num in num_list:\n        if num != 0:\n            num_list[count] = num\n            count += 1\n    while count < len(num_list):\n        num_list[count] = 0\n        count += 1\n    return num_list", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    result = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    return result + [0] * zero_count", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    result = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    result.extend([0] * zero_count)\n    return result", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [num for num in num_list if num != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [num for num in num_list if num != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    result = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    result.extend([0] * zero_count)\n    return result", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [num for num in num_list if num != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    non_zeroes = [num for num in num_list if num != 0]\n    zeroes = [0] * (len(num_list) - len(non_zeroes))\n    return non_zeroes + zeroes", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    result = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    result.extend([0] * zero_count)\n    return result", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [num for num in num_list if num != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    zero_count = num_list.count(0)\n    return [num for num in num_list if num != 0] + [0] * zero_count", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    result = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    result.extend([0] * zero_count)\n    return result", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    result = [num for num in num_list if num != 0]\n    zeros = [0] * (len(num_list) - len(result))\n    return result + zeros", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    result = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    return result + [0] * zero_count", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    non_zeroes = [num for num in num_list if num != 0]\n    zeroes = [0] * (len(num_list) - len(non_zeroes))\n    return non_zeroes + zeroes"], "outputs": "[[[1, 2, 3, 4, 0, 0]], [[1, 2, 3, 0, 0, 0]], [[1, 2, 3, 4, 0, 0]], [[1, 2, 3, 0, 0, 0]], [[1, 2, 3]], [[0]], [[1, 2, 0, 0, 0]], [[0, 0, 0, 0]], [[-1, 2, 3, 0, 0]], [[1, 2, 3, 4, 5, 0]], [[1, 2, 3, 4, 0, 0]], [[5, 1, 2, 0, 0, 0, 0, 0]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/633", "requirement": "from typing import List\n\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"", "llm_generated_inputs": "[[[5, 9, 7, 6], 4], [[1, 2, 3, 4], 4], [[0, 0, 0, 0], 4], [[10, 20, 30], 3], [[], 0], [[1], 1], [[100, 200, 300, 400, 500], 5], [[1, 2], 2]]", "programs": ["from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum"], "clusters": [{"programs_str": ["from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum"], "outputs": "[[47], [24], [0], [60], [0], [0], [3048], [3]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/635", "requirement": "from typing import List\n\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"", "llm_generated_inputs": "[[[1, 3, 5, 7, 9, 2, 4, 6, 8, 0]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[5, 2, 9, 1, 5, 6]], [[0]], [[]], [[7, 7, 7, 7]], [[-1, -3, -2, -4, -5]], [[1, 0, 0, 1, 0, 1]]]", "programs": ["from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable[:]\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable[:]\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable[:]\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n    for i in range(n - 1, 0, -1):\n        iterable[i], iterable[0] = (iterable[0], iterable[i])\n        heapify(iterable, i, 0)\n    return iterable", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable.copy()\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] < arr[left]:\n            largest = left\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable[:]\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable[:]\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n    for i in range(n - 1, 0, -1):\n        iterable[i], iterable[0] = (iterable[0], iterable[i])\n        heapify(iterable, i, 0)\n    return iterable", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n    for i in range(n - 1, 0, -1):\n        iterable[i], iterable[0] = (iterable[0], iterable[i])\n        heapify(iterable, i, 0)\n    return iterable", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable[:]\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable.copy()\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[largest] < arr[left]:\n            largest = left\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable[:]\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n    for i in range(n - 1, 0, -1):\n        iterable[i], iterable[0] = (iterable[0], iterable[i])\n        heapify(iterable, i, 0)\n    return iterable", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable.copy()\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable[:]\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable.copy()\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable.copy()\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n    for i in range(n - 1, 0, -1):\n        iterable[i], iterable[0] = (iterable[0], iterable[i])\n        heapify(iterable, i, 0)\n    return iterable", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable.copy()\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable.copy()\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr"], "clusters": [{"programs_str": ["from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable[:]\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable[:]\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable[:]\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n    for i in range(n - 1, 0, -1):\n        iterable[i], iterable[0] = (iterable[0], iterable[i])\n        heapify(iterable, i, 0)\n    return iterable", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable.copy()\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] < arr[left]:\n            largest = left\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable[:]\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable[:]\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n    for i in range(n - 1, 0, -1):\n        iterable[i], iterable[0] = (iterable[0], iterable[i])\n        heapify(iterable, i, 0)\n    return iterable", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n    for i in range(n - 1, 0, -1):\n        iterable[i], iterable[0] = (iterable[0], iterable[i])\n        heapify(iterable, i, 0)\n    return iterable", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable[:]\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable.copy()\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[largest] < arr[left]:\n            largest = left\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable[:]\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n    for i in range(n - 1, 0, -1):\n        iterable[i], iterable[0] = (iterable[0], iterable[i])\n        heapify(iterable, i, 0)\n    return iterable", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable.copy()\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable[:]\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable.copy()\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable.copy()\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n    for i in range(n - 1, 0, -1):\n        iterable[i], iterable[0] = (iterable[0], iterable[i])\n        heapify(iterable, i, 0)\n    return iterable", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable.copy()\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr", "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr: List[int], n: int, i: int) -> None:\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = (arr[largest], arr[i])\n            heapify(arr, n, largest)\n    n = len(iterable)\n    arr = iterable.copy()\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = (arr[0], arr[i])\n        heapify(arr, i, 0)\n    return arr"], "outputs": "[[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 5, 5, 6, 9]], [[0]], [[]], [[7, 7, 7, 7]], [[-5, -4, -3, -2, -1]], [[0, 0, 0, 1, 1, 1]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/637", "requirement": "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False\n\"\"\"", "llm_generated_inputs": "[[1500, 1500], [1500, 1200], [1500, 1800], [0, 0], [1000, 0], [0, 1000], [-500, -500], [1000, 1000], [2500, 2500], [1000, 500]]", "programs": ["def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount"], "clusters": [{"programs_str": ["def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount"], "outputs": "[[True], [False], [False], [True], [False], [False], [True], [True], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/638", "requirement": "def wind_chill(v: float, t: float) -> int:\n\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert wind_chill(120,35)==40\n\"\"\"", "llm_generated_inputs": "[[120, 35], [0, 0], [10, -10], [25.5, 15.3], [80, -5], [5, 30], [150, -20], [200, 0], [50.7, 10.2], [0, -40]]", "programs": ["import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wc_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wc_index)", "def wind_chill(v: float, t: float) -> int:\n    import math\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wind_chill_index)", "def wind_chill(v: float, t: float) -> int:\n    from math import ceil\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return ceil(wind_chill_index)", "def wind_chill(v: float, t: float) -> int:\n    import math\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wind_chill_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wc_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wc_index)", "def wind_chill(v: float, t: float) -> int:\n    import math\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wci)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wci)", "def wind_chill(v: float, t: float) -> int:\n    import math\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wind_chill_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wc_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wc_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wci)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wci)", "def wind_chill(v: float, t: float) -> int:\n    from math import floor\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return floor(wci) + (wci % 1 > 0)", "def wind_chill(v: float, t: float) -> int:\n    import math\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wci)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wci)", "def wind_chill(v: float, t: float) -> int:\n    import math\n    wc = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wc)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(chill_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wci)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    if v < 0 or t > 50 or t < -50:\n        raise ValueError('Wind speed must be >= 0 and temperature must be between -50 and 50 Celsius.')\n    wc = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wc)", "def wind_chill(v: float, t: float) -> int:\n    import math\n    if v < 0 or t < -50 or t > 10:\n        raise ValueError('Invalid input values for wind velocity or temperature.')\n    wci = 13.12 + 0.6215 * t - 35.75 * v ** 0.16 + 0.4275 * t * v ** 0.16\n    return math.ceil(wci)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wci = 13.12 + 0.6215 * t - 35.75 * v ** 0.16 + 0.4275 * t * v ** 0.16\n    return math.ceil(wci)"], "clusters": [{"programs_str": ["import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wc_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wc_index)", "def wind_chill(v: float, t: float) -> int:\n    import math\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wind_chill_index)", "def wind_chill(v: float, t: float) -> int:\n    from math import ceil\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return ceil(wind_chill_index)", "def wind_chill(v: float, t: float) -> int:\n    import math\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wind_chill_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wc_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wc_index)", "def wind_chill(v: float, t: float) -> int:\n    import math\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wci)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wci)", "def wind_chill(v: float, t: float) -> int:\n    import math\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wind_chill_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wc_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wc_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wci)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wci)", "def wind_chill(v: float, t: float) -> int:\n    from math import floor\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return floor(wci) + (wci % 1 > 0)", "def wind_chill(v: float, t: float) -> int:\n    import math\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wci)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wci)", "def wind_chill(v: float, t: float) -> int:\n    import math\n    wc = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wc)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(chill_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wci)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    if v < 0 or t > 50 or t < -50:\n        raise ValueError('Wind speed must be >= 0 and temperature must be between -50 and 50 Celsius.')\n    wc = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wc)"], "outputs": "[[41], [14], [-15], [14], [-16], [33], [-42], [-13], [6], [-11]]", "probability": 0.9, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[120, 35], [41], [40]]]"}, {"programs_str": ["def wind_chill(v: float, t: float) -> int:\n    import math\n    if v < 0 or t < -50 or t > 10:\n        raise ValueError('Invalid input values for wind velocity or temperature.')\n    wci = 13.12 + 0.6215 * t - 35.75 * v ** 0.16 + 0.4275 * t * v ** 0.16\n    return math.ceil(wci)"], "outputs": "[['ValueError'], [14], [-50], ['ValueError'], [-66], ['ValueError'], [-98], [-70], ['ValueError'], [-11]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[120, 35], ['ValueError'], [40]]]"}, {"programs_str": ["import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wci = 13.12 + 0.6215 * t - 35.75 * v ** 0.16 + 0.4275 * t * v ** 0.16\n    return math.ceil(wci)"], "outputs": "[[-9], [14], [-50], [-26], [-66], [3], [-98], [-70], [-39], [-11]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[120, 35], [-9], [40]]]"}]}
{"task_id": "Mbpp/639", "requirement": "from typing import List\n\n\ndef sample_nam(sample_names: List[str]) -> int:\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"", "llm_generated_inputs": "[[['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']], [['alice', 'Bob', 'charlie', 'Dave']], [['Eve', 'frank', 'George', 'Hannah']], [['i', 'have', 'No', 'lowercase', 'names']], [['Absolutely', 'no', 'lowercase', 'start', 'here']], [['SingleName']], [['', 'CAPITAL', '']], [['John', 'doe', 'Jane', 'smith', 'Eli']]]", "programs": ["from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))"], "clusters": [{"programs_str": ["from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if not name[0].islower()))"], "outputs": "[[16], [7], [15], [2], [10], [10], ['IndexError'], [11]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/641", "requirement": "def is_nonagonal(n: int) -> int:\n\"\"\"\nWrite a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [10], [50], [100], [-1], [0], [1000]]", "programs": ["def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return (7 * n * n - 1) // 2"], "clusters": [{"programs_str": ["def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2"], "outputs": "[[1], [9], [24], [325], [8625], [34750], [6], [0], [3497500]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def is_nonagonal(n: int) -> int:\n    return (7 * n * n - 1) // 2"], "outputs": "[[3], [13], [31], [349], [8749], [34999], [3], [-1], [3499999]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [349], [325]]]"}]}
{"task_id": "Mbpp/643", "requirement": "def text_match_wordz_middle(text: str) -> bool:\n\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"", "llm_generated_inputs": "[['zpython'], ['pythonz'], ['abcz'], ['abc'], ['hello world'], ['midzpoint'], ['zstartendz'], ['zmiddlez'], ['abzcd'], ['no z here'], ['test z again']]", "programs": ["def text_match_wordz_middle(text: str) -> bool:\n    import re\n    pattern = '\\\\b\\\\w*z\\\\w*\\\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        if match[0] != 'z' and match[-1] != 'z':\n            return True\n    return False", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    pattern = '\\\\b\\\\w*z\\\\w*\\\\b'\n    match = re.search(pattern, text)\n    if match:\n        word = match.group()\n        return len(word) > 1 and word[0] != 'z' and (word[-1] != 'z')\n    return False", "def text_match_wordz_middle(text: str) -> bool:\n    return any(('z' in word[1:-1] for word in text.split()))", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    pattern = '\\\\b\\\\w*z\\\\w*\\\\b'\n    matches = re.findall(pattern, text)\n    for word in matches:\n        if word[0] != 'z' and word[-1] != 'z':\n            return True\n    return False", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    pattern = '\\\\b\\\\w*z\\\\w*\\\\b'\n    matches = re.findall(pattern, text)\n    return any((word[0] != 'z' and word[-1] != 'z' for word in matches))", "def text_match_wordz_middle(text: str) -> bool:\n    return any(('z' in word[1:-1] for word in text.split()))", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    pattern = '\\\\b\\\\w*z\\\\w*\\\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        if match[0] != 'z' and match[-1] != 'z':\n            return True\n    return False", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    pattern = '\\\\bz\\\\w*|\\\\w*z\\\\b'\n    return bool(re.search('z', text)) and (not re.search(pattern, text))", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    pattern = '\\\\b\\\\w*z\\\\w*\\\\b'\n    matches = re.findall(pattern, text)\n    for word in matches:\n        if word[0] != 'z' and word[-1] != 'z':\n            return True\n    return False", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\Bz\\\\B', text))", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\bz\\\\w*|\\\\w*z\\\\b|\\\\bz\\\\w*\\\\w*z\\\\w*', text))", "def text_match_wordz_middle(text: str) -> bool:\n    return any((word[1:-1] == 'z' for word in text.split() if len(word) > 2))", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    pattern = '\\\\b\\\\w*z\\\\w*\\\\b'\n    return bool(re.search(pattern, text))", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\bz[^\\\\s]*\\\\b', text))", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    pattern = '\\\\bz[a-zA-Z0-9._%+-]*\\\\b'\n    return bool(re.search(pattern, text))", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\bz\\\\w*|\\\\w*z\\\\b', text)) and (not text.startswith('z')) and (not text.endswith('z'))", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\bz\\\\B', text))", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\bz\\\\w+|\\\\\\\\w+z\\\\b', text))"], "clusters": [{"programs_str": ["def text_match_wordz_middle(text: str) -> bool:\n    import re\n    pattern = '\\\\b\\\\w*z\\\\w*\\\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        if match[0] != 'z' and match[-1] != 'z':\n            return True\n    return False", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    pattern = '\\\\b\\\\w*z\\\\w*\\\\b'\n    match = re.search(pattern, text)\n    if match:\n        word = match.group()\n        return len(word) > 1 and word[0] != 'z' and (word[-1] != 'z')\n    return False", "def text_match_wordz_middle(text: str) -> bool:\n    return any(('z' in word[1:-1] for word in text.split()))", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    pattern = '\\\\b\\\\w*z\\\\w*\\\\b'\n    matches = re.findall(pattern, text)\n    for word in matches:\n        if word[0] != 'z' and word[-1] != 'z':\n            return True\n    return False", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    pattern = '\\\\b\\\\w*z\\\\w*\\\\b'\n    matches = re.findall(pattern, text)\n    return any((word[0] != 'z' and word[-1] != 'z' for word in matches))", "def text_match_wordz_middle(text: str) -> bool:\n    return any(('z' in word[1:-1] for word in text.split()))", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    pattern = '\\\\b\\\\w*z\\\\w*\\\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        if match[0] != 'z' and match[-1] != 'z':\n            return True\n    return False", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    pattern = '\\\\bz\\\\w*|\\\\w*z\\\\b'\n    return bool(re.search('z', text)) and (not re.search(pattern, text))", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    pattern = '\\\\b\\\\w*z\\\\w*\\\\b'\n    matches = re.findall(pattern, text)\n    for word in matches:\n        if word[0] != 'z' and word[-1] != 'z':\n            return True\n    return False", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\Bz\\\\B', text))"], "outputs": "[[False], [False], [False], [False], [False], [True], [False], [False], [True], [False], [False]]", "probability": 0.5, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def text_match_wordz_middle(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\bz\\\\w*|\\\\w*z\\\\b|\\\\bz\\\\w*\\\\w*z\\\\w*', text))"], "outputs": "[[True], [True], [True], [False], [False], [False], [True], [True], [False], [True], [True]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['pythonzabc.'], [False], [True]]]"}, {"programs_str": ["def text_match_wordz_middle(text: str) -> bool:\n    return any((word[1:-1] == 'z' for word in text.split() if len(word) > 2))"], "outputs": "[[False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['pythonzabc.'], [False], [True]]]"}, {"programs_str": ["def text_match_wordz_middle(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    pattern = '\\\\b\\\\w*z\\\\w*\\\\b'\n    return bool(re.search(pattern, text))", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))"], "outputs": "[[True], [True], [True], [False], [False], [True], [True], [True], [True], [True], [True]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def text_match_wordz_middle(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\bz[^\\\\s]*\\\\b', text))", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    pattern = '\\\\bz[a-zA-Z0-9._%+-]*\\\\b'\n    return bool(re.search(pattern, text))"], "outputs": "[[True], [False], [False], [False], [False], [False], [True], [True], [False], [True], [True]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['pythonzabc.'], [False], [True]]]"}, {"programs_str": ["def text_match_wordz_middle(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\bz\\\\w*|\\\\w*z\\\\b', text)) and (not text.startswith('z')) and (not text.endswith('z'))"], "outputs": "[[False], [False], [False], [False], [False], [False], [False], [False], [False], [True], [True]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['pythonzabc.'], [False], [True]]]"}, {"programs_str": ["def text_match_wordz_middle(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\bz\\\\B', text))", "def text_match_wordz_middle(text: str) -> bool:\n    import re\n    return bool(re.search('\\\\bz\\\\w+|\\\\\\\\w+z\\\\b', text))"], "outputs": "[[True], [False], [False], [False], [False], [False], [True], [True], [False], [False], [False]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['pythonzabc.'], [False], [True]]]"}]}
{"task_id": "Mbpp/644", "requirement": "from typing import List\n\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 4, 5, 6], 4], [[10, 20, 30, 40, 50], 3], [[7, 14, 21, 28], 2], [[1], 1], [[], 0], [[1, 2, 3, 4], 0], [[4, 3, 2, 1, 6, 5], 6], [[1, 2, 3, 4, 5, 6], 1]]", "programs": ["from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k > len(input) or k < 1:\n        return input\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k > len(input) or k < 1:\n        return input\n    reversed_part = input[:k][::-1]\n    return reversed_part + input[k:]"], "clusters": [{"programs_str": ["from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k > len(input) or k < 1:\n        return input\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k > len(input) or k < 1:\n        return input\n    reversed_part = input[:k][::-1]\n    return reversed_part + input[k:]"], "outputs": "[[[4, 3, 2, 1, 5, 6]], [[30, 20, 10, 40, 50]], [[14, 7, 21, 28]], [[1]], [[]], [[1, 2, 3, 4]], [[5, 6, 1, 2, 3, 4]], [[1, 2, 3, 4, 5, 6]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/720", "requirement": "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"", "llm_generated_inputs": "[[(4, 5, 6), {'MSAM': 1, 'is': 2, 'best': 3}], [(), {'a': 1, 'b': 2}], [(1,), {}], [(), {}], [(True, None), {1: 'one', (2, 3): 'tuple'}]]", "programs": ["def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)"], "clusters": [{"programs_str": ["def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)"], "outputs": "[[(4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})], [({'a': 1, 'b': 2},)], [(1, {})], [({},)], [(True, None, {1: 'one', (2, 3): 'tuple'})]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/721", "requirement": "from typing import List\n\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"", "llm_generated_inputs": "[[[[1, 2, 3], [6, 5, 4], [7, 3, 9]]], [[[1]]], [[[5, 4], [9, 8]]], [[[1, 2], [3, 4]]], [[[10, 20], [15, 25]]], [[[0, 0], [0, 0]]], [[[100, 200, 300], [400, 500, 600], [700, 800, 900]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1, -1], [-1, 1]]], [[[3, 2], [1, 0]]]]", "programs": ["from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[N - 1][N - 1]\n    num_cells = 2 * (N - 1) + 1\n    return total_cost / num_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            up = dp[i - 1][j] if i > 0 else float('-inf')\n            left = dp[i][j - 1] if j > 0 else float('-inf')\n            dp[i][j] = max(up, left) + cost[i][j]\n    total_cost = dp[N - 1][N - 1]\n    path_length = N + N - 1\n    return total_cost / path_length", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[n - 1][n - 1]\n    path_length = 2 * (n - 1) + 1\n    return total_cost / path_length", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    max_cost = dp[n - 1][n - 1]\n    path_length = 2 * n - 1\n    return max_cost / path_length", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[n - 1][n - 1]\n    num_cells = 2 * (n - 1) + 1\n    return total_cost / num_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[n - 1][n - 1]\n    num_cells = 2 * (n - 1) + 1\n    return total_cost / num_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + cost[i][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j - 1] + cost[i][j])\n    total_cost = dp[n - 1][n - 1]\n    path_length = 2 * (n - 1) + 1\n    return total_cost / path_length", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + cost[i][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j - 1] + cost[i][j])\n    total_cost = dp[n - 1][n - 1]\n    path_length = 2 * (n - 1)\n    max_average = total_cost / (path_length + 1)\n    return max_average", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    if n == 0:\n        return 0.0\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[n - 1][n - 1]\n    number_of_cells = 2 * (n - 1) + 1\n    max_average = total_cost / number_of_cells\n    return max_average", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            from_top = dp[i - 1][j] if i > 0 else float('-inf')\n            from_left = dp[i][j - 1] if j > 0 else float('-inf')\n            dp[i][j] = max(from_top, from_left) + cost[i][j]\n    total_cost = dp[n - 1][n - 1]\n    num_cells = 2 * (n - 1) + 1\n    return total_cost / num_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + cost[i][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j - 1] + cost[i][j])\n    total_cost = dp[n - 1][n - 1]\n    num_cells = n + n - 1\n    return total_cost / num_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[n - 1][n - 1]\n    number_of_cells = 2 * n - 1\n    return total_cost / number_of_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[n - 1][n - 1]\n    total_steps = 2 * n - 1\n    return total_cost / total_steps", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i - 1][j], dp[i][j - 1])\n    total_cost = dp[N - 1][N - 1]\n    num_cells = 2 * (N - 1) + 1\n    return total_cost / num_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            up = dp[i - 1][j] if i > 0 else float('-inf')\n            left = dp[i][j - 1] if j > 0 else float('-inf')\n            dp[i][j] = max(up, left) + cost[i][j]\n    max_sum = dp[n - 1][n - 1]\n    path_length = 2 * (n - 1) + 1\n    return max_sum / path_length", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    max_cost = dp[n - 1][n - 1]\n    path_length = 2 * (n - 1) + 1\n    return max_cost / path_length", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    max_cost = dp[N - 1][N - 1]\n    path_length = 2 * (N - 1) + 1\n    return max_cost / path_length", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[(0, 0) for _ in range(n)] for _ in range(n)]\n    dp[0][0] = (cost[0][0], 1)\n    for j in range(1, n):\n        dp[0][j] = (dp[0][j - 1][0] + cost[0][j], dp[0][j - 1][1] + 1)\n    for i in range(1, n):\n        dp[i][0] = (dp[i - 1][0][0] + cost[i][0], dp[i - 1][0][1] + 1)\n    for i in range(1, n):\n        for j in range(1, n):\n            from_top = (dp[i - 1][j][0] + cost[i][j], dp[i - 1][j][1] + 1)\n            from_left = (dp[i][j - 1][0] + cost[i][j], dp[i][j - 1][1] + 1)\n            if from_top[0] / from_top[1] > from_left[0] / from_left[1]:\n                dp[i][j] = from_top\n            else:\n                dp[i][j] = from_left\n    max_total_cost, cell_count = dp[n - 1][n - 1]\n    return max_total_cost / cell_count", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[n - 1][n - 1]\n    path_length = 2 * n - 1\n    return total_cost / path_length", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            from_top = dp[i - 1][j] if i > 0 else float('-inf')\n            from_left = dp[i][j - 1] if j > 0 else float('-inf')\n            dp[i][j] = max(from_top, from_left) + cost[i][j]\n    total_cost = dp[n - 1][n - 1]\n    path_length = 2 * (n - 1) + 1\n    return total_cost / path_length"], "clusters": [{"programs_str": ["from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[N - 1][N - 1]\n    num_cells = 2 * (N - 1) + 1\n    return total_cost / num_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            up = dp[i - 1][j] if i > 0 else float('-inf')\n            left = dp[i][j - 1] if j > 0 else float('-inf')\n            dp[i][j] = max(up, left) + cost[i][j]\n    total_cost = dp[N - 1][N - 1]\n    path_length = N + N - 1\n    return total_cost / path_length", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[n - 1][n - 1]\n    path_length = 2 * (n - 1) + 1\n    return total_cost / path_length", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    max_cost = dp[n - 1][n - 1]\n    path_length = 2 * n - 1\n    return max_cost / path_length", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[n - 1][n - 1]\n    num_cells = 2 * (n - 1) + 1\n    return total_cost / num_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[n - 1][n - 1]\n    num_cells = 2 * (n - 1) + 1\n    return total_cost / num_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + cost[i][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j - 1] + cost[i][j])\n    total_cost = dp[n - 1][n - 1]\n    path_length = 2 * (n - 1) + 1\n    return total_cost / path_length", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + cost[i][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j - 1] + cost[i][j])\n    total_cost = dp[n - 1][n - 1]\n    path_length = 2 * (n - 1)\n    max_average = total_cost / (path_length + 1)\n    return max_average", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    if n == 0:\n        return 0.0\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[n - 1][n - 1]\n    number_of_cells = 2 * (n - 1) + 1\n    max_average = total_cost / number_of_cells\n    return max_average", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            from_top = dp[i - 1][j] if i > 0 else float('-inf')\n            from_left = dp[i][j - 1] if j > 0 else float('-inf')\n            dp[i][j] = max(from_top, from_left) + cost[i][j]\n    total_cost = dp[n - 1][n - 1]\n    num_cells = 2 * (n - 1) + 1\n    return total_cost / num_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + cost[i][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j - 1] + cost[i][j])\n    total_cost = dp[n - 1][n - 1]\n    num_cells = n + n - 1\n    return total_cost / num_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[n - 1][n - 1]\n    number_of_cells = 2 * n - 1\n    return total_cost / number_of_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[n - 1][n - 1]\n    total_steps = 2 * n - 1\n    return total_cost / total_steps", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i - 1][j], dp[i][j - 1])\n    total_cost = dp[N - 1][N - 1]\n    num_cells = 2 * (N - 1) + 1\n    return total_cost / num_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            up = dp[i - 1][j] if i > 0 else float('-inf')\n            left = dp[i][j - 1] if j > 0 else float('-inf')\n            dp[i][j] = max(up, left) + cost[i][j]\n    max_sum = dp[n - 1][n - 1]\n    path_length = 2 * (n - 1) + 1\n    return max_sum / path_length", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    max_cost = dp[n - 1][n - 1]\n    path_length = 2 * (n - 1) + 1\n    return max_cost / path_length", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    max_cost = dp[N - 1][N - 1]\n    path_length = 2 * (N - 1) + 1\n    return max_cost / path_length", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[(0, 0) for _ in range(n)] for _ in range(n)]\n    dp[0][0] = (cost[0][0], 1)\n    for j in range(1, n):\n        dp[0][j] = (dp[0][j - 1][0] + cost[0][j], dp[0][j - 1][1] + 1)\n    for i in range(1, n):\n        dp[i][0] = (dp[i - 1][0][0] + cost[i][0], dp[i - 1][0][1] + 1)\n    for i in range(1, n):\n        for j in range(1, n):\n            from_top = (dp[i - 1][j][0] + cost[i][j], dp[i - 1][j][1] + 1)\n            from_left = (dp[i][j - 1][0] + cost[i][j], dp[i][j - 1][1] + 1)\n            if from_top[0] / from_top[1] > from_left[0] / from_left[1]:\n                dp[i][j] = from_top\n            else:\n                dp[i][j] = from_left\n    max_total_cost, cell_count = dp[n - 1][n - 1]\n    return max_total_cost / cell_count", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[n - 1][n - 1]\n    path_length = 2 * n - 1\n    return total_cost / path_length", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            from_top = dp[i - 1][j] if i > 0 else float('-inf')\n            from_left = dp[i][j - 1] if j > 0 else float('-inf')\n            dp[i][j] = max(from_top, from_left) + cost[i][j]\n    total_cost = dp[n - 1][n - 1]\n    path_length = 2 * (n - 1) + 1\n    return total_cost / path_length"], "outputs": "[[5.2], [1.0], [7.333333333333333], [2.6666666666666665], [18.333333333333332], [0.0], [580.0], [5.8], [0.3333333333333333], [1.6666666666666667]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/722", "requirement": "from typing import Dict\nfrom typing import Tuple\n\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"", "llm_generated_inputs": "[[{'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70], [{'Alice': (5.4, 120), 'Bob': (5.5, 130), 'Charlie': (6.1, 160)}, 5.5, 125], [{'Dan': (5.0, 150)}, 5.0, 150], [{'Eve': (5.8, 100), 'Frank': (5.9, 100)}, 5.7, 90], [{}, 5.0, 50], [{'Gina': (7.0, 250)}, 6.5, 200], [{'Hank': (6.1, 200)}, 6.1, 200], [{'Igor': (5.5, 120), 'Jake': (5.5, 130)}, 5.5, 130], [{'Lina': (5.9, 140), 'Mona': (5.6, 135)}, 5.7, 130]]", "programs": ["from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: values for name, values in students.items() if values[0] > h and values[1] > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}"], "clusters": [{"programs_str": ["from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: values for name, values in students.items() if values[0] > h and values[1] > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict\nfrom typing import Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}"], "outputs": "[[{}], [{'Charlie': (6.1, 160)}], [{}], [{'Eve': (5.8, 100), 'Frank': (5.9, 100)}], [{}], [{'Gina': (7.0, 250)}], [{}], [{}], [{'Lina': (5.9, 140)}]]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[{'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70], [{}], [{'Cierra Vega': (6.2, 70)}]]]"}]}
{"task_id": "Mbpp/723", "requirement": "from typing import List\n\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 4, 5], [1, 0, 3, 0, 5]], [[], []], [[1, 1, 1], [1, 1, 1]], [[10, 20, 30], [10, 30, 30]], [[-1, -2, -3, -4], [-1, -2, -3, -5]], [[100, 200, 300], [100, 300, 300]], [[5, 5, 5], [5, 5, 5, 5]], [[1, 2, 3, 4, 5], [2, 2, 3, 4, 4]]]", "programs": ["from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for x, y in zip(nums1, nums2) if x == y))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for i in range(len(nums1)) if nums1[i] == nums2[i]))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for x, y in zip(nums1, nums2) if x == y))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for i in range(len(nums1)) if nums1[i] == nums2[i]))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for i in range(len(nums1)) if nums1[i] == nums2[i]))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for x, y in zip(nums1, nums2) if x == y))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for i in range(len(nums1)) if nums1[i] == nums2[i]))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for x, y in zip(nums1, nums2) if x == y))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for x, y in zip(nums1, nums2) if x == y))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for x, y in zip(nums1, nums2) if x == y))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))"], "clusters": [{"programs_str": ["from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for x, y in zip(nums1, nums2) if x == y))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for i in range(len(nums1)) if nums1[i] == nums2[i]))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for x, y in zip(nums1, nums2) if x == y))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for i in range(len(nums1)) if nums1[i] == nums2[i]))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for i in range(len(nums1)) if nums1[i] == nums2[i]))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for x, y in zip(nums1, nums2) if x == y))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for i in range(len(nums1)) if nums1[i] == nums2[i]))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for x, y in zip(nums1, nums2) if x == y))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for x, y in zip(nums1, nums2) if x == y))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for x, y in zip(nums1, nums2) if x == y))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))"], "outputs": "[[3], [0], [3], [2], [3], [2], [3], [3]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/724", "requirement": "def power_base_sum(base: int, power: int) -> int:\n\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115\n\"\"\"", "llm_generated_inputs": "[[2, 100], [3, 3], [4, 4], [5, 2], [0, 5], [1, 5], [-2, 3], [10, 2], [9, 1], [7, 0]]", "programs": ["def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    return sum((int(digit) for digit in str(base ** power)))", "def power_base_sum(base: int, power: int) -> int:\n    num = base ** power\n    return sum((int(digit) for digit in str(num)))", "def power_base_sum(base: int, power: int) -> int:\n    result = str(base ** power)\n    return sum((int(digit) for digit in result))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    digit_sum = sum((int(digit) for digit in str(result)))\n    return digit_sum", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    digit_sum = sum((int(digit) for digit in str(result)))\n    return digit_sum", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    digit_sum = sum((int(digit) for digit in str(result)))\n    return digit_sum", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))"], "clusters": [{"programs_str": ["def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    return sum((int(digit) for digit in str(base ** power)))", "def power_base_sum(base: int, power: int) -> int:\n    num = base ** power\n    return sum((int(digit) for digit in str(num)))", "def power_base_sum(base: int, power: int) -> int:\n    result = str(base ** power)\n    return sum((int(digit) for digit in result))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    digit_sum = sum((int(digit) for digit in str(result)))\n    return digit_sum", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    digit_sum = sum((int(digit) for digit in str(result)))\n    return digit_sum", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    digit_sum = sum((int(digit) for digit in str(result)))\n    return digit_sum", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))"], "outputs": "[[115], [9], [13], [7], [0], [1], ['ValueError'], [1], [9], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/725", "requirement": "from typing import List\n\n\ndef extract_quotation(text1: str) -> List[str]:\n\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"", "llm_generated_inputs": "[['Cortex \"A53\" Based \"multi\" tasking \"Processor\"'], ['She said \"Hello\" and then left.'], ['\"Single\" quoted \"words\" should work too.'], ['No quotations here.'], ['\"One\" \"Two\" \"Three\" \"Four\"'], ['\"This is a test with quotation marks\" included in the text.'], ['\"   Leading and trailing spaces   \"'], ['\"Quotes within quotes: \"inner quotes\" must be handled correctly.\"'], ['Escape characters like \\\\\" should not break the function.'], ['Text with nested quotations is tricky: \"outer \"inner\"\".']]", "programs": ["from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\n\ndef extract_quotation(text1: str) -> List[str]:\n    result = []\n    in_quotes = False\n    current_quote = ''\n    for char in text1:\n        if char == '\"':\n            if in_quotes:\n                result.append(current_quote)\n                current_quote = ''\n                in_quotes = False\n            else:\n                in_quotes = True\n        elif in_quotes:\n            current_quote += char\n    return result", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"([^\"]*)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\n\ndef extract_quotation(text1: str) -> List[str]:\n    import re\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)"], "clusters": [{"programs_str": ["from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\n\ndef extract_quotation(text1: str) -> List[str]:\n    result = []\n    in_quotes = False\n    current_quote = ''\n    for char in text1:\n        if char == '\"':\n            if in_quotes:\n                result.append(current_quote)\n                current_quote = ''\n                in_quotes = False\n            else:\n                in_quotes = True\n        elif in_quotes:\n            current_quote += char\n    return result", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"([^\"]*)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\n\ndef extract_quotation(text1: str) -> List[str]:\n    import re\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)"], "outputs": "[[['A53', 'multi', 'Processor']], [['Hello']], [['Single', 'words']], [[]], [['One', 'Two', 'Three', 'Four']], [['This is a test with quotation marks']], [['   Leading and trailing spaces   ']], [['Quotes within quotes: ', ' must be handled correctly.']], [[]], [['outer ', '']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/726", "requirement": "from typing import Tuple\n\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"", "llm_generated_inputs": "[[(1, 5, 7, 8, 10)], [(2, 3, 4)], [(0, 1, 2, 3)], [(-1, -2, -3)], [(10, 20, 30, 40, 50)], [(100,)], [(5,)], [(1, 2, 3, 4, 5, 6)], [((1, 2, 3), (4, 5))]]", "programs": ["from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))"], "clusters": [{"programs_str": ["from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))"], "outputs": "[[(5, 35, 56, 80)], [(6, 12)], [(0, 2, 6)], [(2, 6)], [(200, 600, 1200, 2000)], [()], [()], [(2, 6, 12, 20, 30)], ['TypeError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/728", "requirement": "from typing import List\n\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"", "llm_generated_inputs": "[[[10, 20, 30], [15, 25, 35]], [[1, 2, 3], [4, 5, 6]], [[0, 0, 0], [0, 0, 0]], [[], []], [[5], [10]], [[-1, -2, -3], [1, 2, 3]], [[100], [200]], [[1, -1, 2], [2, -2, 3]], [[3, 5], [4, 6, 8]]]", "programs": ["from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]"], "clusters": [{"programs_str": ["from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]"], "outputs": "[[[25, 45, 65]], [[5, 7, 9]], [[0, 0, 0]], [[]], [[15]], [[0, 0, 0]], [[300]], [[3, -3, 5]], [[7, 11]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/730", "requirement": "from typing import List\n\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"", "llm_generated_inputs": "[[[0, 0, 1, 1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 4, 4]], [[1, 1, 1, 1, 1]], [[1, 2, 3, 4, 5]], [[5, 4, 4, 4, 3, 2, 1]], [[2, 2, 3, 3, 3, 3, 4, 5, 5]], [[0]], [[]], [[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]]]", "programs": ["from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for i in range(1, len(nums)):\n        if nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for i in range(1, len(nums)):\n        if nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for i in range(1, len(nums)):\n        if nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result"], "clusters": [{"programs_str": ["from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for i in range(1, len(nums)):\n        if nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for i in range(1, len(nums)):\n        if nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for i in range(1, len(nums)):\n        if nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result"], "outputs": "[[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]], [[1]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[2, 3, 4, 5]], [[0]], [[]], [[1, 2, 3, 4]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/731", "requirement": "def lateralsurface_cone(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"", "llm_generated_inputs": "[[5, 12], [3, 7], [10, 15], [0, 10], [5, 0], [1, 1], [100, 200], [1.5, 4.5], [10.5, 25.3], [3.14, 10]]", "programs": ["import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    l = math.sqrt(r ** 2 + h ** 2)\n    return math.pi * r * l", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_area = math.pi * r * slant_height\n    return lateral_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    l = math.sqrt(r ** 2 + h ** 2)\n    return math.pi * r * l", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    l = math.sqrt(r ** 2 + h ** 2)\n    return math.pi * r * l", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_area = math.pi * r * slant_height\n    return lateral_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    l = math.sqrt(r ** 2 + h ** 2)\n    return math.pi * r * l", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    l = math.sqrt(r ** 2 + h ** 2)\n    return math.pi * r * l", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)"], "clusters": [{"programs_str": ["import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    l = math.sqrt(r ** 2 + h ** 2)\n    return math.pi * r * l", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_area = math.pi * r * slant_height\n    return lateral_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    l = math.sqrt(r ** 2 + h ** 2)\n    return math.pi * r * l", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    l = math.sqrt(r ** 2 + h ** 2)\n    return math.pi * r * l", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_area = math.pi * r * slant_height\n    return lateral_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    l = math.sqrt(r ** 2 + h ** 2)\n    return math.pi * r * l", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    l = math.sqrt(r ** 2 + h ** 2)\n    return math.pi * r * l", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)"], "outputs": "[[204.20352248333654], [71.77697052236633], [566.3586699569488], [0.0], [78.53981633974483], [4.442882938158366], [70248.14731040726], [22.352823598041226], [903.5833531202593], [103.39475952614733]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/732", "requirement": "def replace_specialchar(text: str) -> str:\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"", "llm_generated_inputs": "[['Hello, world. This is a test.'], ['No special characters here'], ['Multiple   spaces   and, commas,, and.. dots.'], ['Edge cases:   ,  .   '], ['Just a string with a lot of.. dots...'], [''], ['    '], [','], ['.'], [' , . ']]", "programs": ["def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"], "clusters": [{"programs_str": ["def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"], "outputs": "[['Hello::world::This:is:a:test:'], ['No:special:characters:here'], ['Multiple:::spaces:::and::commas:::and:::dots:'], ['Edge:cases:::::::::::'], ['Just:a:string:with:a:lot:of:::dots:::'], [''], ['::::'], [':'], [':'], [':::::']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/733", "requirement": "from typing import List\n\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"", "llm_generated_inputs": "[[[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5], [[1, 2, 2, 3, 4, 5], 2], [[1, 1, 1, 1, 1], 1], [[2, 3, 4, 5, 6], 2], [[], 1], [[1, 1, 2, 2, 2, 3], 3], [[1, 2, 3, 4], 5], [[1, 2, 3, 3, 3, 4, 5], 3], [[5, 6, 7, 8, 9, 10], 10], [[2, 4, 6, 8, 10], 6]]", "programs": ["from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    index = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            index = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return index", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    first_occurrence = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            first_occurrence = mid\n            right = mid - 1\n    return first_occurrence", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    low, high = (0, len(A) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            result = mid\n            high = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    index = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            index = mid\n            right = mid - 1\n    return index", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    index = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            index = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return index", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    low, high = (0, len(A) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            result = mid\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    low, high = (0, len(A) - 1)\n    first_index = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            first_index = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return first_index", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            result = mid\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    low, high = (0, len(A) - 1)\n    first_index = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            first_index = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return first_index", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    low, high = (0, len(A) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    low, high = (0, len(A) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            result = mid\n            high = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            result = mid\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    first_occurrence = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            first_occurrence = mid\n            right = mid - 1\n    return first_occurrence", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"], "clusters": [{"programs_str": ["from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    index = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            index = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return index", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    first_occurrence = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            first_occurrence = mid\n            right = mid - 1\n    return first_occurrence", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    low, high = (0, len(A) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            result = mid\n            high = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    index = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            index = mid\n            right = mid - 1\n    return index", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    index = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            index = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return index", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    low, high = (0, len(A) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            result = mid\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    low, high = (0, len(A) - 1)\n    first_index = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            first_index = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return first_index", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            result = mid\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    low, high = (0, len(A) - 1)\n    first_index = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            first_index = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return first_index", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    low, high = (0, len(A) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    low, high = (0, len(A) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            result = mid\n            high = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            result = mid\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    first_occurrence = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            first_occurrence = mid\n            right = mid - 1\n    return first_occurrence", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"], "outputs": "[[1], [1], [0], [0], [-1], [5], [-1], [2], [5], [2]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/734", "requirement": "from typing import List\n\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. \nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3]], [[0, 1, 2]], [[-1, 2, 3]], [[5]], [[-5, -3, -2]], [[1, 0, -1]], [[2, 2, 2]], [[-1, 0, 1]], [[-2, 0, 2]], [[1, 2, 3, 4]], [[0]], [[1, 1, 1, 1]], [[1, 0]], [[1, 2, 3, 4, 5]], [[-1]]]", "programs": ["from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        current_prod = 1\n        for j in range(i, n):\n            current_prod *= arr[j]\n            total_sum += current_prod\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for start in range(n):\n        current_product = 1\n        for end in range(start, n):\n            current_product *= arr[end]\n            total_sum += current_product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for start in range(n):\n        product = 1\n        for end in range(start, n):\n            product *= arr[end]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for start in range(n):\n        prod = 1\n        for end in range(start, n):\n            prod *= arr[end]\n            total_sum += prod\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            total_sum += prod\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        current_product = 1\n        for j in range(i, n):\n            current_product *= arr[j]\n            total_sum += current_product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        current_product = 1\n        for j in range(i, n):\n            current_product *= arr[j]\n            total_sum += current_product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        current_product = 1\n        for j in range(i, n):\n            current_product *= arr[j]\n            total_sum += current_product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            total_sum += prod\n    return total_sum"], "clusters": [{"programs_str": ["from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        current_prod = 1\n        for j in range(i, n):\n            current_prod *= arr[j]\n            total_sum += current_prod\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for start in range(n):\n        current_product = 1\n        for end in range(start, n):\n            current_product *= arr[end]\n            total_sum += current_product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for start in range(n):\n        product = 1\n        for end in range(start, n):\n            product *= arr[end]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for start in range(n):\n        prod = 1\n        for end in range(start, n):\n            prod *= arr[end]\n            total_sum += prod\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            total_sum += prod\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        current_product = 1\n        for j in range(i, n):\n            current_product *= arr[j]\n            total_sum += current_product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        current_product = 1\n        for j in range(i, n):\n            current_product *= arr[j]\n            total_sum += current_product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        current_product = 1\n        for j in range(i, n):\n            current_product *= arr[j]\n            total_sum += current_product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            total_sum += prod\n    return total_sum"], "outputs": "[[20], [5], [2], [5], [-19], [0], [22], [0], [0], [84], [0], [10], [1], [409], [-1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/735", "requirement": "def toggle_middle_bits(n: int) -> int:\n\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. \nassert toggle_middle_bits(9) == 15\n\"\"\"", "llm_generated_inputs": "[[9], [10], [3], [8], [15], [0], [1], [2]]", "programs": ["def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    if len(binary) <= 2:\n        return n\n    toggled = binary[0]\n    for bit in binary[1:-1]:\n        toggled += '1' if bit == '0' else '0'\n    toggled += binary[-1]\n    return int(toggled, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    if len(binary) <= 2:\n        return n\n    middle_bits = ''.join(('1' if bit == '0' else '0' for bit in binary[1:-1]))\n    new_binary = binary[0] + middle_bits + binary[-1]\n    return int(new_binary, 2)", "def toggle_middle_bits(n: int) -> int:\n    if n < 3:\n        return n\n    bin_str = bin(n)[2:]\n    first_bit = bin_str[0]\n    last_bit = bin_str[-1]\n    middle_bits = bin_str[1:-1]\n    toggled_middle = ''.join(('1' if bit == '0' else '0' for bit in middle_bits))\n    new_bin_str = first_bit + toggled_middle + last_bit\n    return int(new_bin_str, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary_str = bin(n)[2:]\n    length = len(binary_str)\n    if length <= 2:\n        return n\n    toggled_bits = []\n    for i in range(length):\n        if i == 0 or i == length - 1:\n            toggled_bits.append(binary_str[i])\n        else:\n            toggled_bits.append('1' if binary_str[i] == '0' else '0')\n    toggled_binary_str = ''.join(toggled_bits)\n    return int(toggled_binary_str, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary_str = bin(n)[2:]\n    length = len(binary_str)\n    if length <= 2:\n        return n\n    toggled_str = binary_str[0]\n    for bit in binary_str[1:length - 1]:\n        toggled_str += '1' if bit == '0' else '0'\n    toggled_str += binary_str[-1]\n    return int(toggled_str, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    if len(binary) <= 2:\n        return n\n    middle_bits = list(binary[1:-1])\n    for i in range(len(middle_bits)):\n        middle_bits[i] = '1' if middle_bits[i] == '0' else '0'\n    toggled_binary = binary[0] + ''.join(middle_bits) + binary[-1]\n    return int(toggled_binary, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary_str = bin(n)[2:]\n    length = len(binary_str)\n    if length < 3:\n        return n\n    toggled_bits = []\n    for i in range(length):\n        if i == 0 or i == length - 1:\n            toggled_bits.append(binary_str[i])\n        else:\n            toggled_bits.append('1' if binary_str[i] == '0' else '0')\n    toggled_binary_str = ''.join(toggled_bits)\n    return int(toggled_binary_str, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    if len(binary) <= 2:\n        return n\n    middle_bits = binary[1:-1]\n    toggled_middle = ''.join(('1' if bit == '0' else '0' for bit in middle_bits))\n    new_binary = binary[0] + toggled_middle + binary[-1]\n    return int(new_binary, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary_str = bin(n)[2:]\n    length = len(binary_str)\n    if length <= 2:\n        return n\n    toggled_binary = binary_str[0]\n    for bit in binary_str[1:length - 1]:\n        toggled_binary += '1' if bit == '0' else '0'\n    toggled_binary += binary_str[-1]\n    return int(toggled_binary, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    if len(binary) < 3:\n        return n\n    middle_bits = ''.join(('1' if bit == '0' else '0' for bit in binary[1:-1]))\n    new_binary = binary[0] + middle_bits + binary[-1]\n    return int(new_binary, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    if len(binary) < 3:\n        return n\n    first_bit = binary[0]\n    last_bit = binary[-1]\n    middle_bits = ''.join(('1' if bit == '0' else '0' for bit in binary[1:-1]))\n    toggled_binary = first_bit + middle_bits + last_bit\n    return int(toggled_binary, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    if len(binary) <= 2:\n        return n\n    middle_bits = ''.join(('1' if bit == '0' else '0' for bit in binary[1:-1]))\n    new_binary = binary[0] + middle_bits + binary[-1]\n    return int(new_binary, 2)", "def toggle_middle_bits(n: int) -> int:\n    if n < 3:\n        return n\n    bin_str = bin(n)[2:]\n    first_bit = bin_str[0]\n    last_bit = bin_str[-1]\n    middle_bits = bin_str[1:-1]\n    toggled_middle_bits = ''.join(('1' if bit == '0' else '0' for bit in middle_bits))\n    toggled_bin_str = first_bit + toggled_middle_bits + last_bit\n    return int(toggled_bin_str, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    length = len(binary)\n    if length <= 2:\n        return n\n    result = [binary[0]]\n    for bit in binary[1:length - 1]:\n        result.append('0' if bit == '1' else '1')\n    result.append(binary[-1])\n    return int(''.join(result), 2)", "def toggle_middle_bits(n: int) -> int:\n    binary_str = bin(n)[2:]\n    length = len(binary_str)\n    if length < 3:\n        return n\n    binary_list = list(binary_str)\n    for i in range(1, length - 1):\n        binary_list[i] = '0' if binary_list[i] == '1' else '1'\n    toggled_binary_str = ''.join(binary_list)\n    return int(toggled_binary_str, 2)", "def toggle_middle_bits(n: int) -> int:\n    bin_n = bin(n)[2:]\n    length = len(bin_n)\n    if length <= 2:\n        return n\n    toggled_bits = [bin_n[0]]\n    for bit in bin_n[1:length - 1]:\n        toggled_bits.append('1' if bit == '0' else '0')\n    toggled_bits.append(bin_n[-1])\n    toggled_bin_str = ''.join(toggled_bits)\n    return int(toggled_bin_str, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    if len(binary) <= 2:\n        return n\n    toggled_bits = binary[0]\n    for bit in binary[1:-1]:\n        toggled_bits += '0' if bit == '1' else '1'\n    toggled_bits += binary[-1]\n    return int(toggled_bits, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    if len(binary) <= 2:\n        return n\n    first_bit = binary[0]\n    last_bit = binary[-1]\n    middle_bits = ''.join(('1' if bit == '0' else '0' for bit in binary[1:-1]))\n    new_binary = first_bit + middle_bits + last_bit\n    return int(new_binary, 2)", "def toggle_middle_bits(n: int) -> int:\n    if n < 4:\n        return n\n    mask = (1 << n.bit_length() - 2) - 1 - 1\n    return n ^ mask", "def toggle_middle_bits(n: int) -> int:\n    bin_n = bin(n)[2:]\n    toggled_bin = bin_n[0] + ''.join(('1' if bit == '0' else '0' for bit in bin_n[1:-1])) + bin_n[-1]\n    return int(toggled_bin, 2)"], "clusters": [{"programs_str": ["def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    if len(binary) <= 2:\n        return n\n    toggled = binary[0]\n    for bit in binary[1:-1]:\n        toggled += '1' if bit == '0' else '0'\n    toggled += binary[-1]\n    return int(toggled, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    if len(binary) <= 2:\n        return n\n    middle_bits = ''.join(('1' if bit == '0' else '0' for bit in binary[1:-1]))\n    new_binary = binary[0] + middle_bits + binary[-1]\n    return int(new_binary, 2)", "def toggle_middle_bits(n: int) -> int:\n    if n < 3:\n        return n\n    bin_str = bin(n)[2:]\n    first_bit = bin_str[0]\n    last_bit = bin_str[-1]\n    middle_bits = bin_str[1:-1]\n    toggled_middle = ''.join(('1' if bit == '0' else '0' for bit in middle_bits))\n    new_bin_str = first_bit + toggled_middle + last_bit\n    return int(new_bin_str, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary_str = bin(n)[2:]\n    length = len(binary_str)\n    if length <= 2:\n        return n\n    toggled_bits = []\n    for i in range(length):\n        if i == 0 or i == length - 1:\n            toggled_bits.append(binary_str[i])\n        else:\n            toggled_bits.append('1' if binary_str[i] == '0' else '0')\n    toggled_binary_str = ''.join(toggled_bits)\n    return int(toggled_binary_str, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary_str = bin(n)[2:]\n    length = len(binary_str)\n    if length <= 2:\n        return n\n    toggled_str = binary_str[0]\n    for bit in binary_str[1:length - 1]:\n        toggled_str += '1' if bit == '0' else '0'\n    toggled_str += binary_str[-1]\n    return int(toggled_str, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    if len(binary) <= 2:\n        return n\n    middle_bits = list(binary[1:-1])\n    for i in range(len(middle_bits)):\n        middle_bits[i] = '1' if middle_bits[i] == '0' else '0'\n    toggled_binary = binary[0] + ''.join(middle_bits) + binary[-1]\n    return int(toggled_binary, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary_str = bin(n)[2:]\n    length = len(binary_str)\n    if length < 3:\n        return n\n    toggled_bits = []\n    for i in range(length):\n        if i == 0 or i == length - 1:\n            toggled_bits.append(binary_str[i])\n        else:\n            toggled_bits.append('1' if binary_str[i] == '0' else '0')\n    toggled_binary_str = ''.join(toggled_bits)\n    return int(toggled_binary_str, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    if len(binary) <= 2:\n        return n\n    middle_bits = binary[1:-1]\n    toggled_middle = ''.join(('1' if bit == '0' else '0' for bit in middle_bits))\n    new_binary = binary[0] + toggled_middle + binary[-1]\n    return int(new_binary, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary_str = bin(n)[2:]\n    length = len(binary_str)\n    if length <= 2:\n        return n\n    toggled_binary = binary_str[0]\n    for bit in binary_str[1:length - 1]:\n        toggled_binary += '1' if bit == '0' else '0'\n    toggled_binary += binary_str[-1]\n    return int(toggled_binary, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    if len(binary) < 3:\n        return n\n    middle_bits = ''.join(('1' if bit == '0' else '0' for bit in binary[1:-1]))\n    new_binary = binary[0] + middle_bits + binary[-1]\n    return int(new_binary, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    if len(binary) < 3:\n        return n\n    first_bit = binary[0]\n    last_bit = binary[-1]\n    middle_bits = ''.join(('1' if bit == '0' else '0' for bit in binary[1:-1]))\n    toggled_binary = first_bit + middle_bits + last_bit\n    return int(toggled_binary, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    if len(binary) <= 2:\n        return n\n    middle_bits = ''.join(('1' if bit == '0' else '0' for bit in binary[1:-1]))\n    new_binary = binary[0] + middle_bits + binary[-1]\n    return int(new_binary, 2)", "def toggle_middle_bits(n: int) -> int:\n    if n < 3:\n        return n\n    bin_str = bin(n)[2:]\n    first_bit = bin_str[0]\n    last_bit = bin_str[-1]\n    middle_bits = bin_str[1:-1]\n    toggled_middle_bits = ''.join(('1' if bit == '0' else '0' for bit in middle_bits))\n    toggled_bin_str = first_bit + toggled_middle_bits + last_bit\n    return int(toggled_bin_str, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    length = len(binary)\n    if length <= 2:\n        return n\n    result = [binary[0]]\n    for bit in binary[1:length - 1]:\n        result.append('0' if bit == '1' else '1')\n    result.append(binary[-1])\n    return int(''.join(result), 2)", "def toggle_middle_bits(n: int) -> int:\n    binary_str = bin(n)[2:]\n    length = len(binary_str)\n    if length < 3:\n        return n\n    binary_list = list(binary_str)\n    for i in range(1, length - 1):\n        binary_list[i] = '0' if binary_list[i] == '1' else '1'\n    toggled_binary_str = ''.join(binary_list)\n    return int(toggled_binary_str, 2)", "def toggle_middle_bits(n: int) -> int:\n    bin_n = bin(n)[2:]\n    length = len(bin_n)\n    if length <= 2:\n        return n\n    toggled_bits = [bin_n[0]]\n    for bit in bin_n[1:length - 1]:\n        toggled_bits.append('1' if bit == '0' else '0')\n    toggled_bits.append(bin_n[-1])\n    toggled_bin_str = ''.join(toggled_bits)\n    return int(toggled_bin_str, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    if len(binary) <= 2:\n        return n\n    toggled_bits = binary[0]\n    for bit in binary[1:-1]:\n        toggled_bits += '0' if bit == '1' else '1'\n    toggled_bits += binary[-1]\n    return int(toggled_bits, 2)", "def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    if len(binary) <= 2:\n        return n\n    first_bit = binary[0]\n    last_bit = binary[-1]\n    middle_bits = ''.join(('1' if bit == '0' else '0' for bit in binary[1:-1]))\n    new_binary = first_bit + middle_bits + last_bit\n    return int(new_binary, 2)"], "outputs": "[[15], [12], [3], [14], [9], [0], [1], [2]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def toggle_middle_bits(n: int) -> int:\n    if n < 4:\n        return n\n    mask = (1 << n.bit_length() - 2) - 1 - 1\n    return n ^ mask"], "outputs": "[[11], [8], [3], [10], [13], [0], [1], [2]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[9], [11], [15]]]"}, {"programs_str": ["def toggle_middle_bits(n: int) -> int:\n    bin_n = bin(n)[2:]\n    toggled_bin = bin_n[0] + ''.join(('1' if bit == '0' else '0' for bit in bin_n[1:-1])) + bin_n[-1]\n    return int(toggled_bin, 2)"], "outputs": "[[15], [12], [3], [14], [9], [0], [3], [2]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/736", "requirement": "from typing import List\n\n\ndef left_insertion(a: List[int], x: int) -> int:\n\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order. \nassert left_insertion([1,2,4,5],6)==4\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 4, 5], 6], [[1, 2, 4, 5], 0], [[1, 2, 4, 5], 1], [[1, 2, 4, 5], 3], [[1, 2, 4, 5], 5], [[], 3], [[5], 3], [[1, 2, 3], 2], [[-5, -3, -1, 0, 1, 2], -2], [[2, 4, 6, 8], 10]]", "programs": ["from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    left, right = (0, len(a))\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    left, right = (0, len(a))\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    left, right = (0, len(a))\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low"], "clusters": [{"programs_str": ["from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    left, right = (0, len(a))\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    left, right = (0, len(a))\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    left, right = (0, len(a))\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low, high = (0, len(a))\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low"], "outputs": "[[4], [0], [0], [2], [3], [0], [0], [1], [2], [4]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/737", "requirement": "def check_str(s: str) -> bool:\n\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"", "llm_generated_inputs": "[['apple'], ['banana'], ['umbrella'], ['grape'], ['orange'], ['Elephant'], ['Aardvark'], ['xyz'], ['123'], ['!@#'], [''], ['a'], ['z']]", "programs": ["import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiou]', s, re.I))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))"], "clusters": [{"programs_str": ["import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiou]', s, re.I))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))"], "outputs": "[[True], [False], [True], [False], [True], [True], [True], [False], [False], [False], [False], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/739", "requirement": "def find_Index(n: int) -> int:\n\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. \nassert find_Index(2) == 4\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [5], [10], [20], [50], [100]]", "programs": ["def find_Index(n: int) -> int:\n\n    def triangular_number(k: int) -> int:\n        return k * (k + 1) // 2\n    index = 1\n    while True:\n        t_number = triangular_number(index)\n        if len(str(t_number)) == n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(index: int) -> int:\n        return index * (index + 1) // 2\n    index = 1\n    while True:\n        t_number = triangular_number(index)\n        if len(str(t_number)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(index: int) -> int:\n        return index * (index + 1) // 2\n    index = 1\n    while True:\n        t_num = triangular_number(index)\n        if len(str(t_num)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number_index(k: int) -> int:\n        return k * (k + 1) // 2\n    index = 1\n    while True:\n        triangular_number = triangular_number_index(index)\n        if len(str(triangular_number)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(k: int) -> int:\n        return k * (k + 1) // 2\n    index = 1\n    while True:\n        t_number = triangular_number(index)\n        if len(str(t_number)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(index: int) -> int:\n        return index * (index + 1) // 2\n    index = 1\n    while True:\n        t_number = triangular_number(index)\n        if len(str(t_number)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def is_triangle(num):\n        k = (8 * num + 1) ** 0.5\n        return k.is_integer()\n    index = 1\n    triangular_number = 0\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if len(str(triangular_number)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n    triangular_number = 0\n    index = 0\n    while True:\n        index += 1\n        triangular_number = index * (index + 1) // 2\n        if len(str(triangular_number)) >= n:\n            return index", "def find_Index(n: int) -> int:\n\n    def triangular_number(index: int) -> int:\n        return index * (index + 1) // 2\n    index = 1\n    while True:\n        tn = triangular_number(index)\n        if len(str(tn)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(k: int) -> int:\n        return k * (k + 1) // 2\n    k = 1\n    while True:\n        t_num = triangular_number(k)\n        if len(str(t_num)) >= n:\n            return k\n        k += 1", "def find_Index(n: int) -> int:\n\n    def is_triangular(num):\n        if num < 0:\n            return False\n        x = (8 * num + 1) ** 0.5\n        return x == int(x)\n\n    def triangular_number(index):\n        return index * (index + 1) // 2\n    index = 1\n    while True:\n        t_number = triangular_number(index)\n        if len(str(t_number)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(k: int) -> int:\n        return k * (k + 1) // 2\n    k = 1\n    while True:\n        t_number = triangular_number(k)\n        if len(str(t_number)) >= n:\n            return k\n        k += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(k: int) -> int:\n        return k * (k + 1) // 2\n    count = 0\n    k = 1\n    while True:\n        tn = triangular_number(k)\n        if len(str(tn)) >= n:\n            return k\n        k += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(k: int) -> int:\n        return k * (k + 1) // 2\n    index = 1\n    while True:\n        tri_num = triangular_number(index)\n        if len(str(tri_num)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def is_triangular(num):\n        k = (-1 + (1 + 8 * num) ** 0.5) / 2\n        return k.is_integer()\n    index = 1\n    triangular_number = 0\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if len(str(triangular_number)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(k: int) -> int:\n        return k * (k + 1) // 2\n    count = 0\n    while True:\n        count += 1\n        t_number = triangular_number(count)\n        if len(str(t_number)) >= n:\n            return count", "def find_Index(n: int) -> int:\n    from math import sqrt\n\n    def is_triangular(x):\n        k = (sqrt(8 * x + 1) - 1) / 2\n        return k.is_integer()\n    index = 1\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if len(str(triangular_number)) == n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(index: int) -> int:\n        return index * (index + 1) // 2\n    index = 1\n    while True:\n        tri_num = triangular_number(index)\n        if len(str(tri_num)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n    import math\n\n    def triangular_number(k: int) -> int:\n        return k * (k + 1) // 2\n    index = 1\n    while True:\n        t_number = triangular_number(index)\n        if len(str(t_number)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(k: int) -> int:\n        return k * (k + 1) // 2\n    k = 1\n    while True:\n        if len(str(triangular_number(k))) >= n:\n            return k\n        k += 1"], "clusters": [{"programs_str": ["def find_Index(n: int) -> int:\n\n    def triangular_number(k: int) -> int:\n        return k * (k + 1) // 2\n    index = 1\n    while True:\n        t_number = triangular_number(index)\n        if len(str(t_number)) == n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(index: int) -> int:\n        return index * (index + 1) // 2\n    index = 1\n    while True:\n        t_number = triangular_number(index)\n        if len(str(t_number)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(index: int) -> int:\n        return index * (index + 1) // 2\n    index = 1\n    while True:\n        t_num = triangular_number(index)\n        if len(str(t_num)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number_index(k: int) -> int:\n        return k * (k + 1) // 2\n    index = 1\n    while True:\n        triangular_number = triangular_number_index(index)\n        if len(str(triangular_number)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(k: int) -> int:\n        return k * (k + 1) // 2\n    index = 1\n    while True:\n        t_number = triangular_number(index)\n        if len(str(t_number)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(index: int) -> int:\n        return index * (index + 1) // 2\n    index = 1\n    while True:\n        t_number = triangular_number(index)\n        if len(str(t_number)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def is_triangle(num):\n        k = (8 * num + 1) ** 0.5\n        return k.is_integer()\n    index = 1\n    triangular_number = 0\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if len(str(triangular_number)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n    triangular_number = 0\n    index = 0\n    while True:\n        index += 1\n        triangular_number = index * (index + 1) // 2\n        if len(str(triangular_number)) >= n:\n            return index", "def find_Index(n: int) -> int:\n\n    def triangular_number(index: int) -> int:\n        return index * (index + 1) // 2\n    index = 1\n    while True:\n        tn = triangular_number(index)\n        if len(str(tn)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(k: int) -> int:\n        return k * (k + 1) // 2\n    k = 1\n    while True:\n        t_num = triangular_number(k)\n        if len(str(t_num)) >= n:\n            return k\n        k += 1", "def find_Index(n: int) -> int:\n\n    def is_triangular(num):\n        if num < 0:\n            return False\n        x = (8 * num + 1) ** 0.5\n        return x == int(x)\n\n    def triangular_number(index):\n        return index * (index + 1) // 2\n    index = 1\n    while True:\n        t_number = triangular_number(index)\n        if len(str(t_number)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(k: int) -> int:\n        return k * (k + 1) // 2\n    k = 1\n    while True:\n        t_number = triangular_number(k)\n        if len(str(t_number)) >= n:\n            return k\n        k += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(k: int) -> int:\n        return k * (k + 1) // 2\n    count = 0\n    k = 1\n    while True:\n        tn = triangular_number(k)\n        if len(str(tn)) >= n:\n            return k\n        k += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(k: int) -> int:\n        return k * (k + 1) // 2\n    index = 1\n    while True:\n        tri_num = triangular_number(index)\n        if len(str(tri_num)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def is_triangular(num):\n        k = (-1 + (1 + 8 * num) ** 0.5) / 2\n        return k.is_integer()\n    index = 1\n    triangular_number = 0\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if len(str(triangular_number)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(k: int) -> int:\n        return k * (k + 1) // 2\n    count = 0\n    while True:\n        count += 1\n        t_number = triangular_number(count)\n        if len(str(t_number)) >= n:\n            return count", "def find_Index(n: int) -> int:\n    from math import sqrt\n\n    def is_triangular(x):\n        k = (sqrt(8 * x + 1) - 1) / 2\n        return k.is_integer()\n    index = 1\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if len(str(triangular_number)) == n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(index: int) -> int:\n        return index * (index + 1) // 2\n    index = 1\n    while True:\n        tri_num = triangular_number(index)\n        if len(str(tri_num)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n    import math\n\n    def triangular_number(k: int) -> int:\n        return k * (k + 1) // 2\n    index = 1\n    while True:\n        t_number = triangular_number(index)\n        if len(str(t_number)) >= n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n\n    def triangular_number(k: int) -> int:\n        return k * (k + 1) // 2\n    k = 1\n    while True:\n        if len(str(triangular_number(k))) >= n:\n            return k\n        k += 1"], "outputs": "[[1], [4], [14], [141], [44721], ['Timeout'], ['Timeout'], ['Timeout']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/740", "requirement": "from typing import Dict\nfrom typing import Tuple\n\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. \nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"", "llm_generated_inputs": "[[(1, 5, 7, 10, 13, 5)], [((1, 2), (3, 4), (5, 6))], [(1, 2, 3, 4)], [(100, 200, 300)], [('a', 'b', 'c', 'd')], [((1, 'a'), (2, 'b'), (1, 'c'))], [(1,)], [(2, 3)], [()], [(1, 2, 3)]]", "programs": ["from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}"], "clusters": [{"programs_str": ["from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}"], "outputs": "[[{1: 5, 7: 10, 13: 5}], [{(1, 2): (3, 4)}], [{1: 2, 3: 4}], [{100: 200}], [{'a': 'b', 'c': 'd'}], [{(1, 'a'): (2, 'b')}], [{}], [{2: 3}], [{}], [{1: 2}]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/741", "requirement": "def all_Characters_Same(s: str) -> bool:\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False\n\"\"\"", "llm_generated_inputs": "[['aaaaaa'], ['bbbbbb'], ['ccccccc'], ['abc'], ['A'], [''], ['12345'], ['1111111'], [' '], ['aA']]", "programs": ["def all_Characters_Same(s: str) -> bool:\n    return all((c == s[0] for c in s))", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1"], "clusters": [{"programs_str": ["def all_Characters_Same(s: str) -> bool:\n    return all((c == s[0] for c in s))"], "outputs": "[[True], [True], [True], [False], [True], [True], [False], [True], [True], [False]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1"], "outputs": "[[True], [True], [True], [False], [True], [False], [False], [True], [True], [False]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/742", "requirement": "def area_tetrahedron(side: float) -> float:\n\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"", "llm_generated_inputs": "[[3], [1], [0], [-5], [2.5], [100]]", "programs": ["import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(2) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(2) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(2) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(2) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(2) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(2) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(2) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(2) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(2) * side ** 2"], "clusters": [{"programs_str": ["import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2"], "outputs": "[[15.588457268119894], [1.7320508075688772], [0.0], [43.30127018922193], [10.825317547305483], [17320.508075688773]]", "probability": 0.55, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(2) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(2) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(2) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(2) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(2) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(2) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(2) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(2) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(2) * side ** 2"], "outputs": "[[12.727922061357857], [1.4142135623730951], [0.0], [35.35533905932738], [8.838834764831844], [14142.135623730952]]", "probability": 0.45, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3], [12.727922061357857], [15.588457268119894]]]"}]}
{"task_id": "Mbpp/743", "requirement": "from typing import List\n\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction. \nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3], [['a', 'b', 'c'], 1], [[10, 20, 30, 40], 2], [[1], 3], [[], 5], [[1, 2, 3, 4, 5], 0], [[5, 4, 3, 2, 1], 5], [[-1, -2, -3, -4], 2]]", "programs": ["from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        return l\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        return l\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        return l\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    if n == 0:\n        return l\n    m = m % n\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        return l\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        return l\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        return l\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        return l\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        return l\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    m = m % n\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    m = m % n\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    m = m % n\n    return l[-m:] + l[:-m]"], "clusters": [{"programs_str": ["from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        return l\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        return l\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        return l\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    if n == 0:\n        return l\n    m = m % n\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        return l\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        return l\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        return l\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        return l\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        return l\n    m = m % len(l)\n    return l[-m:] + l[:-m]"], "outputs": "[[[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]], [['c', 'a', 'b']], [[30, 40, 10, 20]], [[1]], [[]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[-3, -4, -1, -2]]]", "probability": 0.45, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    m = m % n\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    m = m % n\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    m = m % n\n    return l[-m:] + l[:-m]"], "outputs": "[[[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]], [['c', 'a', 'b']], [[30, 40, 10, 20]], [[1]], ['ZeroDivisionError'], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[-3, -4, -1, -2]]]", "probability": 0.55, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/744", "requirement": "from typing import Tuple\n\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"", "llm_generated_inputs": "[[(10, 4, 5, 6, None)], [((1, 2), (3, None), (4, 5))], [(None, 'string', 10)], [(1, 2, 3, 4)], [(None, None, None)], [(None, 5, 3, 8, 2)], [()], [(1, 'test', 3.5)]]", "programs": ["from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((x is None for x in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((item is None for item in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((el is None for el in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((item is None for item in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((elem is None for elem in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((x is None for x in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((x is None for x in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((elem is None for elem in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((elem is None for elem in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return None in test_tup", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((x is None for x in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((value is None for value in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((value is None for value in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((elem is None for elem in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((element is None for element in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((x is None for x in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((elem is None for elem in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((x is None for x in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((x is None for x in test_tup))", "from typing import Any, Tuple\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((x is None for x in test_tup))"], "clusters": [{"programs_str": ["from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((x is None for x in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((item is None for item in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((el is None for el in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((item is None for item in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((elem is None for elem in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((x is None for x in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((x is None for x in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((elem is None for elem in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((elem is None for elem in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return None in test_tup", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((x is None for x in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((value is None for value in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((value is None for value in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((elem is None for elem in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((element is None for element in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((x is None for x in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((elem is None for elem in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((x is None for x in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((x is None for x in test_tup))", "from typing import Any, Tuple\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((x is None for x in test_tup))"], "outputs": "[[True], [False], [True], [False], [True], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/745", "requirement": "from typing import List\n\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\"\"\"\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"", "llm_generated_inputs": "[[1, 22], [10, 30], [5, 15], [1, 1], [0, 10], [100, 200], [50, 100], [21, 30], [-10, 10], [99, 105]]", "programs": ["from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        divisible = True\n        for digit in str_num:\n            if digit == '0' or num % int(digit) != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        divisible = True\n        for digit in str_num:\n            if digit == '0' or num % int(digit) != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num and all((num % int(digit) == 0 for digit in str_num)):\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if all((digit != '0' and num % int(digit) == 0 for digit in str_num)):\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num and all((num % int(digit) == 0 for digit in str_num)):\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for number in range(startnum, endnum + 1):\n        str_num = str(number)\n        is_divisible = True\n        for digit in str_num:\n            if digit == '0' or number % int(digit) != 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(number)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num:\n            if all((num % int(digit) == 0 for digit in str_num)):\n                result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num and all((num % int(digit) == 0 for digit in str_num)):\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num:\n            if all((num % int(digit) == 0 for digit in str_num)):\n                result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num:\n            if all((num % int(digit) == 0 for digit in str_num)):\n                result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num and all((num % int(digit) == 0 for digit in str_num)):\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num and all((num % int(digit) == 0 for digit in str_num)):\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num:\n            if all((num % int(digit) == 0 for digit in str_num)):\n                result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num:\n            if all((num % int(digit) == 0 for digit in str_num)):\n                result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        is_divisible = True\n        for digit in str_num:\n            int_digit = int(digit)\n            if int_digit == 0 or num % int_digit != 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num and all((num % int(digit) == 0 for digit in str_num)):\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num:\n            if all((num % int(digit) == 0 for digit in str_num)):\n                result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(num: int) -> bool:\n        digits = [int(d) for d in str(num) if d != '0']\n        return all((num % d == 0 for d in digits))\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num) if d != '0']\n        if all((num % d == 0 for d in digits)):\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num) if d != '0']\n        if all((num % digit == 0 for digit in digits)):\n            result.append(num)\n    return result"], "clusters": [{"programs_str": ["from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        divisible = True\n        for digit in str_num:\n            if digit == '0' or num % int(digit) != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        divisible = True\n        for digit in str_num:\n            if digit == '0' or num % int(digit) != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num and all((num % int(digit) == 0 for digit in str_num)):\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if all((digit != '0' and num % int(digit) == 0 for digit in str_num)):\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num and all((num % int(digit) == 0 for digit in str_num)):\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for number in range(startnum, endnum + 1):\n        str_num = str(number)\n        is_divisible = True\n        for digit in str_num:\n            if digit == '0' or number % int(digit) != 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(number)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num:\n            if all((num % int(digit) == 0 for digit in str_num)):\n                result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num and all((num % int(digit) == 0 for digit in str_num)):\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num:\n            if all((num % int(digit) == 0 for digit in str_num)):\n                result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num:\n            if all((num % int(digit) == 0 for digit in str_num)):\n                result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num and all((num % int(digit) == 0 for digit in str_num)):\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num and all((num % int(digit) == 0 for digit in str_num)):\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num:\n            if all((num % int(digit) == 0 for digit in str_num)):\n                result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num:\n            if all((num % int(digit) == 0 for digit in str_num)):\n                result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        is_divisible = True\n        for digit in str_num:\n            int_digit = int(digit)\n            if int_digit == 0 or num % int_digit != 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num and all((num % int(digit) == 0 for digit in str_num)):\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num:\n            if all((num % int(digit) == 0 for digit in str_num)):\n                result.append(num)\n    return result"], "outputs": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]], [[11, 12, 15, 22, 24]], [[5, 6, 7, 8, 9, 11, 12, 15]], [[1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[111, 112, 115, 122, 124, 126, 128, 132, 135, 144, 155, 162, 168, 175, 184]], [[55, 66, 77, 88, 99]], [[22, 24]], ['ValueError'], [[99]]]", "probability": 0.85, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(num: int) -> bool:\n        digits = [int(d) for d in str(num) if d != '0']\n        return all((num % d == 0 for d in digits))\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num) if d != '0']\n        if all((num % d == 0 for d in digits)):\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num) if d != '0']\n        if all((num % digit == 0 for digit in digits)):\n            result.append(num)\n    return result"], "outputs": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]], [[10, 11, 12, 15, 20, 22, 24, 30]], [[5, 6, 7, 8, 9, 10, 11, 12, 15]], [[1]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[100, 101, 102, 104, 105, 110, 111, 112, 115, 120, 122, 124, 126, 128, 132, 135, 140, 144, 150, 155, 162, 168, 175, 184, 200]], [[50, 55, 60, 66, 70, 77, 80, 88, 90, 99, 100]], [[22, 24, 30]], ['ValueError'], [[99, 100, 101, 102, 104, 105]]]", "probability": 0.15, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[1, 22], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]]]]"}]}
{"task_id": "Mbpp/748", "requirement": "def capital_words_spaces(str1: str) -> str:\n\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"", "llm_generated_inputs": "[['HelloWorld'], ['ThisIsATest'], ['NoSpacesHere'], ['SingleWord'], ['MultipleWordsInAString'], ['PythonIsFun'], ['AnotherTestCase'], ['OneMoreExample'], ['AlreadyCasedExample'], [''], ['A'], ['XAndY'], ['TestCaseWith1Number'], ['SpecialChar!Test']]", "programs": ["def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*|[a-z]+', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*|[a-z]+', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][^A-Z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][^A-Z]*', str1))"], "clusters": [{"programs_str": ["def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*|[a-z]+', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*|[a-z]+', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][a-z]*', str1))"], "outputs": "[['Hello World'], ['This Is A Test'], ['No Spaces Here'], ['Single Word'], ['Multiple Words In A String'], ['Python Is Fun'], ['Another Test Case'], ['One More Example'], ['Already Cased Example'], [''], ['A'], ['X And Y'], ['Test Case With Number'], ['Special Char Test']]", "probability": 0.85, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][^A-Z]*', str1))", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return ' '.join(re.findall('[A-Z][^A-Z]*', str1))"], "outputs": "[['Hello World'], ['This Is A Test'], ['No Spaces Here'], ['Single Word'], ['Multiple Words In A String'], ['Python Is Fun'], ['Another Test Case'], ['One More Example'], ['Already Cased Example'], [''], ['A'], ['X And Y'], ['Test Case With1 Number'], ['Special Char! Test']]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/749", "requirement": "from typing import List\n\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n\"\"\"\nWrite a function to sort a given list of strings of numbers numerically. \nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"", "llm_generated_inputs": "[[['4', '12', '45', '7', '0', '100', '200', '-12', '-500']], [['10', '2', '30', '21']], [['-10', '-50', '-1', '0', '1']], [['5']], [['3', '3', '3']], [['-1', '1', '0']], [['-10', '10', '-5', '5']], [['']], [['-100', '1000', '50', '0', '-50', '500']]]", "programs": ["from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))"], "clusters": [{"programs_str": ["from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted((int(num) for num in nums_str))"], "outputs": "[[[-500, -12, 0, 4, 7, 12, 45, 100, 200]], [[2, 10, 21, 30]], [[-50, -10, -1, 0, 1]], [[5]], [[3, 3, 3]], [[-1, 0, 1]], [[-10, -5, 5, 10]], ['ValueError'], [[-100, -50, 0, 50, 500, 1000]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/750", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n\"\"\"\nWrite a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3], (4, 5)], [[], (1, 2, 3)], [[10], (20,)], [[True, False], (None,)], [[1, 2], ()], [[100, 200], (300, 400, 500)]]", "programs": ["from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)"], "clusters": [{"programs_str": ["from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)"], "outputs": "[[[1, 2, 3, 4, 5]], [[1, 2, 3]], [[10, 20]], [[True, False, None]], [[1, 2]], [[100, 200, 300, 400, 500]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/751", "requirement": "from typing import List\n\n\ndef check_min_heap(arr: List[int]) -> bool:\n\"\"\"\nWrite a function to check if the given array represents min heap or not. \nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 4, 5, 6]], [[1]], [[]], [[2, 3, 4, 5, 1]], [[3, 9, 8, 5, 6, 7]], [[10, 20, 30, 40, 50]], [[1, 2, 3, 4, 0]], [[1, 3, 2]], [[0, -1, -2, -3]], [[1, 0]]]", "programs": ["from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < n and arr[i] > arr[left_child]:\n            return False\n        if right_child < n and arr[i] > arr[right_child]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < n and arr[i] > arr[left_child]:\n            return False\n        if right_child < n and arr[i] > arr[right_child]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < n and arr[i] > arr[left_child]:\n            return False\n        if right_child < n and arr[i] > arr[right_child]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True"], "clusters": [{"programs_str": ["from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < n and arr[i] > arr[left_child]:\n            return False\n        if right_child < n and arr[i] > arr[right_child]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < n and arr[i] > arr[left_child]:\n            return False\n        if right_child < n and arr[i] > arr[right_child]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < n and arr[i] > arr[left_child]:\n            return False\n        if right_child < n and arr[i] > arr[right_child]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True"], "outputs": "[[True], [True], [True], [False], [False], [True], [False], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/752", "requirement": "def jacobsthal_num(n: int) -> int:\n\"\"\"\nWrite a function to find the nth jacobsthal number.  0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nassert jacobsthal_num(5) == 11\n\"\"\"", "llm_generated_inputs": "[[0], [1], [2], [5], [10], [15], [20], [30]]", "programs": ["def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)"], "clusters": [{"programs_str": ["def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 1)"], "outputs": "[[0], [1], [2], [29], [2378], [195025], [15994428], [107578520350]]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[5], [29], [11]]]"}]}
{"task_id": "Mbpp/753", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n\"\"\"\nWrite a function to find minimum k records from tuple list.  - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"", "llm_generated_inputs": "[[[('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2], [[('Alice', 5), ('Bob', 5), ('Charlie', 5), ('David', 5)], 3], [[('John', 15), ('Doe', 25), ('Jane', 10)], 2], [[('Zoe', 12)], 1], [[('A', 1), ('B', 2), ('C', 5), ('D', 8), ('E', 3)], 0], [[(), ()], 1]]", "programs": ["from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List\nfrom typing import Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]"], "clusters": [{"programs_str": ["from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List\nfrom typing import Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]"], "outputs": "[[[('Akash', 2), ('Akshat', 4)]], [[('Alice', 5), ('Bob', 5), ('Charlie', 5)]], [[('Jane', 10), ('John', 15)]], [[('Zoe', 12)]], [[]], ['IndexError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/754", "requirement": "from typing import List\n\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"", "llm_generated_inputs": "[[[1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]], [[1, 2, 3], [1, 2, 3], [1, 2, 3]], [[1, 2, 3, 4], [1, 2, 0, 4], [1, 2, 5, 4]], [[], [], []], [[1, 2, 3], [], [2, 3, 4]], [[0, 1], [1, 0], [0, 1]], [[10, 20, 30], [10, 20, 30], [10, 21, 30]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]]]", "programs": ["from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]"], "clusters": [{"programs_str": ["from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]"], "outputs": "[[[1, 7]], [[1, 2, 3]], [[1, 2, 4]], [[]], [[]], [[]], [[10, 30]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/755", "requirement": "from typing import List\n\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"", "llm_generated_inputs": "[[[1, 2, -8, -2, 0, -2]], [[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]], [[-5, -1, -10, -2]], [[10]], [[-1, -1, -1]], [[2, 2, 2, 1]], [[0, 0, 0, 1]], [[5, None, 3, 3, 3]], [([],)]]", "programs": ["from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            second = first\n            first = number\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            first, second = (number, first)\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            second = first\n            first = number\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            first, second = (number, first)\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            first, second = (number, first)\n        elif first < number < second:\n            second = number\n    return second if second < float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    smallest = float('inf')\n    second = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second = smallest\n            smallest = num\n        elif smallest < num < second:\n            second = num\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            second = first\n            first = number\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            second = first\n            first = number\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            first, second = (number, first)\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            first, second = (number, first)\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            second = first\n            first = number\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            first, second = (number, first)\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for num in numbers:\n        if num < first:\n            second = first\n            first = num\n        elif first < num < second:\n            second = num\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[1]", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[1]", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[1]", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[1]", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[1]", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[1]", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[1]"], "clusters": [{"programs_str": ["from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            second = first\n            first = number\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            first, second = (number, first)\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            second = first\n            first = number\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            first, second = (number, first)\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            first, second = (number, first)\n        elif first < number < second:\n            second = number\n    return second if second < float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    smallest = float('inf')\n    second = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second = smallest\n            smallest = num\n        elif smallest < num < second:\n            second = num\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            second = first\n            first = number\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            second = first\n            first = number\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            first, second = (number, first)\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            first, second = (number, first)\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            second = first\n            first = number\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            first, second = (number, first)\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for num in numbers:\n        if num < first:\n            second = first\n            first = num\n        elif first < num < second:\n            second = num\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[1]"], "outputs": "[[-2], [2], [-5], [None], [None], [2], [1], ['TypeError'], [None]]", "probability": 0.7, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[1]", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[1]", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[1]", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[1]", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[1]", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[1]"], "outputs": "[[-2], [2], [-5], [None], [None], [2], [1], ['TypeError'], ['TypeError']]", "probability": 0.3, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/757", "requirement": "from typing import List\n\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list. \nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"", "llm_generated_inputs": "[[['julia', 'best', 'tseb', 'for', 'ailuj']], [['abc', 'cba', 'xyz', 'zyx', 'def']], [['hello', 'olleh', 'world', 'dlrow']], [['test', 'sett', 'hello', 'world', 'abc', 'cba']], [['one', 'no', 'two', 'owt', 'three', 'xeert']], [['a', 'b', 'c', 'd']], [['', '']], [['single']], [['qwerty', 'ytrewq', 'asdf', 'fdsa', 'not', 'reverse']], [['xyz', 'zyx', 'zyx', 'xyz']]]", "programs": ["from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_pairs_count = 0\n    seen = set()\n    for string in test_list:\n        reverse_string = string[::-1]\n        if reverse_string in seen:\n            reverse_pairs_count += 1\n        seen.add(string)\n    return reverse_pairs_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set()\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen:\n            reverse_count += 1\n        seen.add(string)\n    return reverse_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set()\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen:\n            reverse_count += 1\n        seen.add(string)\n    return reverse_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen_strings = set()\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen_strings:\n            reverse_count += 1\n        seen_strings.add(string)\n    return reverse_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_pairs = 0\n    seen = set()\n    for s in test_list:\n        reversed_s = s[::-1]\n        if reversed_s in seen:\n            reverse_pairs += 1\n        seen.add(s)\n    return reverse_pairs", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    count = 0\n    seen = set()\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen:\n            count += 1\n        seen.add(string)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_pairs_count = 0\n    seen = set()\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen:\n            reverse_pairs_count += 1\n        seen.add(string)\n    return reverse_pairs_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set()\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen:\n            reverse_count += 1\n        seen.add(string)\n    return reverse_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_pairs_count = 0\n    seen = set()\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen:\n            reverse_pairs_count += 1\n        seen.add(string)\n    return reverse_pairs_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set()\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen:\n            reverse_count += 1\n        seen.add(string)\n    return reverse_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set(test_list)\n    for string in test_list:\n        if string[::-1] in seen:\n            reverse_count += 1\n    return reverse_count // 2", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set(test_list)\n    for word in test_list:\n        if word[::-1] in seen:\n            reverse_count += 1\n    return reverse_count // 2", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set(test_list)\n    for string in test_list:\n        if string[::-1] in seen:\n            reverse_count += 1\n    return reverse_count // 2", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set(test_list)\n    for word in test_list:\n        if word[::-1] in seen:\n            reverse_count += 1\n    return reverse_count // 2", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_pairs = 0\n    seen = set(test_list)\n    for s in test_list:\n        if s[::-1] in seen:\n            reverse_pairs += 1\n    return reverse_pairs // 2", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set(test_list)\n    for word in test_list:\n        if word[::-1] in seen:\n            reverse_count += 1\n    return reverse_count // 2", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set(test_list)\n    for s in test_list:\n        if s[::-1] in seen:\n            reverse_count += 1\n    return reverse_count // 2", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reversed_strings = set((s[::-1] for s in test_list))\n    count = 0\n    for s in test_list:\n        if s in reversed_strings:\n            count += 1\n            reversed_strings.remove(s[::-1])\n    return count // 2", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set(test_list)\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen and reversed_string != string:\n            reverse_count += 1\n    return reverse_count // 2", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_dict = {}\n    count = 0\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in reverse_dict:\n            count += reverse_dict[reversed_string]\n        if string in reverse_dict:\n            reverse_dict[string] += 1\n        else:\n            reverse_dict[string] = 1\n    return count"], "clusters": [{"programs_str": ["from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_pairs_count = 0\n    seen = set()\n    for string in test_list:\n        reverse_string = string[::-1]\n        if reverse_string in seen:\n            reverse_pairs_count += 1\n        seen.add(string)\n    return reverse_pairs_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set()\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen:\n            reverse_count += 1\n        seen.add(string)\n    return reverse_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set()\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen:\n            reverse_count += 1\n        seen.add(string)\n    return reverse_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen_strings = set()\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen_strings:\n            reverse_count += 1\n        seen_strings.add(string)\n    return reverse_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_pairs = 0\n    seen = set()\n    for s in test_list:\n        reversed_s = s[::-1]\n        if reversed_s in seen:\n            reverse_pairs += 1\n        seen.add(s)\n    return reverse_pairs", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    count = 0\n    seen = set()\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen:\n            count += 1\n        seen.add(string)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_pairs_count = 0\n    seen = set()\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen:\n            reverse_pairs_count += 1\n        seen.add(string)\n    return reverse_pairs_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set()\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen:\n            reverse_count += 1\n        seen.add(string)\n    return reverse_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_pairs_count = 0\n    seen = set()\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen:\n            reverse_pairs_count += 1\n        seen.add(string)\n    return reverse_pairs_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set()\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen:\n            reverse_count += 1\n        seen.add(string)\n    return reverse_count"], "outputs": "[[2], [2], [2], [1], [1], [0], [1], [0], [2], [3]]", "probability": 0.5, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set(test_list)\n    for string in test_list:\n        if string[::-1] in seen:\n            reverse_count += 1\n    return reverse_count // 2", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set(test_list)\n    for word in test_list:\n        if word[::-1] in seen:\n            reverse_count += 1\n    return reverse_count // 2", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set(test_list)\n    for string in test_list:\n        if string[::-1] in seen:\n            reverse_count += 1\n    return reverse_count // 2", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set(test_list)\n    for word in test_list:\n        if word[::-1] in seen:\n            reverse_count += 1\n    return reverse_count // 2", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_pairs = 0\n    seen = set(test_list)\n    for s in test_list:\n        if s[::-1] in seen:\n            reverse_pairs += 1\n    return reverse_pairs // 2", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set(test_list)\n    for word in test_list:\n        if word[::-1] in seen:\n            reverse_count += 1\n    return reverse_count // 2", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set(test_list)\n    for s in test_list:\n        if s[::-1] in seen:\n            reverse_count += 1\n    return reverse_count // 2"], "outputs": "[[2], [2], [2], [1], [1], [2], [1], [0], [2], [2]]", "probability": 0.35, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reversed_strings = set((s[::-1] for s in test_list))\n    count = 0\n    for s in test_list:\n        if s in reversed_strings:\n            count += 1\n            reversed_strings.remove(s[::-1])\n    return count // 2"], "outputs": "[[1], [1], [1], [0], [0], [2], [0], [0], [1], ['KeyError']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[['julia', 'best', 'tseb', 'for', 'ailuj']], [1], [2]]]"}, {"programs_str": ["from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    seen = set(test_list)\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen and reversed_string != string:\n            reverse_count += 1\n    return reverse_count // 2"], "outputs": "[[2], [2], [2], [1], [1], [0], [0], [0], [2], [2]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_dict = {}\n    count = 0\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in reverse_dict:\n            count += reverse_dict[reversed_string]\n        if string in reverse_dict:\n            reverse_dict[string] += 1\n        else:\n            reverse_dict[string] = 1\n    return count"], "outputs": "[[2], [2], [2], [1], [1], [0], [1], [0], [2], [4]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/758", "requirement": "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"", "llm_generated_inputs": "[[[[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]], [[[1], [1], [1]]], [[[2, 4], [2, 4], [3, 6], [2, 4]]], [[[5, 5, 5], [5, 5]]], [[[], [], []]], [[[1, 2], [2, 1], [1, 2]]], [[[100]]], [[[1, 2, 3], [1, 2, 3], [1]]], [[[0], [1], [2], [0]]], [[[1, 2, 2], [1, 2], [1]]]]", "programs": ["from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\nfrom collections import Counter\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    tuple_list = [tuple(sublist) for sublist in list1]\n    counts = Counter(tuple_list)\n    return dict(counts)", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List, Dict, Tuple\nfrom collections import Counter\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    tuple_list = [tuple(sublist) for sublist in list1]\n    count = Counter(tuple_list)\n    return dict(count)", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        key = tuple(sublist)\n        count_dict[key] = count_dict.get(key, 0) + 1\n    return count_dict", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\nfrom collections import defaultdict\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = defaultdict(int)\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        count_dict[tuple_sublist] += 1\n    return dict(count_dict)", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    occurrences = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in occurrences:\n            occurrences[tuple_sublist] += 1\n        else:\n            occurrences[tuple_sublist] = 1\n    return occurrences", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\nfrom collections import Counter\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    tuple_list = [tuple(sublist) for sublist in list1]\n    count = Counter(tuple_list)\n    return dict(count)", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict"], "clusters": [{"programs_str": ["from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\nfrom collections import Counter\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    tuple_list = [tuple(sublist) for sublist in list1]\n    counts = Counter(tuple_list)\n    return dict(counts)", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List, Dict, Tuple\nfrom collections import Counter\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    tuple_list = [tuple(sublist) for sublist in list1]\n    count = Counter(tuple_list)\n    return dict(count)", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        key = tuple(sublist)\n        count_dict[key] = count_dict.get(key, 0) + 1\n    return count_dict", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\nfrom collections import defaultdict\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = defaultdict(int)\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        count_dict[tuple_sublist] += 1\n    return dict(count_dict)", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    occurrences = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in occurrences:\n            occurrences[tuple_sublist] += 1\n        else:\n            occurrences[tuple_sublist] = 1\n    return occurrences", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\nfrom collections import Counter\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    tuple_list = [tuple(sublist) for sublist in list1]\n    count = Counter(tuple_list)\n    return dict(count)", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict", "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict"], "outputs": "[[{(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}], [{(1,): 3}], [{(2, 4): 3, (3, 6): 1}], [{(5, 5, 5): 1, (5, 5): 1}], [{(): 3}], [{(1, 2): 2, (2, 1): 1}], [{(100,): 1}], [{(1, 2, 3): 2, (1,): 1}], [{(0,): 2, (1,): 1, (2,): 1}], [{(1, 2, 2): 1, (1, 2): 1, (1,): 1}]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/759", "requirement": "def is_decimal(num: str) -> bool:\n\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"", "llm_generated_inputs": "[['123.11'], ['0.99'], ['-123.45'], ['123.'], ['.12'], ['123.1'], ['123.456'], ['abc.12'], ['12abc'], ['12.34.56'], ['-0.98'], ['0.00'], ['-0.'], [''], ['123']]", "programs": ["def is_decimal(num: str) -> bool:\n    try:\n        parts = num.split('.')\n        if len(parts) != 2:\n            return False\n        int_part, decimal_part = parts\n        return (int_part.isdigit() or (int_part.startswith('-') and int_part[1:].isdigit())) and len(decimal_part) == 2 and decimal_part.isdigit()\n    except Exception:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        parts = num.split('.')\n        if len(parts) != 2:\n            return False\n        integer_part, decimal_part = parts\n        return integer_part.isdigit() and len(decimal_part) == 2 and decimal_part.isdigit()\n    except Exception:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        value = float(num)\n        if '.' in num:\n            integer_part, decimal_part = num.split('.')\n            return len(decimal_part) == 2 and integer_part.isdigit() and decimal_part.isdigit()\n        return False\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        value = float(num)\n        if '.' in num:\n            integer_part, decimal_part = num.split('.')\n            return len(decimal_part) == 2 and integer_part.isdigit() and decimal_part.isdigit()\n        return False\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        if num.count('.') == 1:\n            whole, fraction = num.split('.')\n            return whole.isdigit() and len(fraction) == 2 and fraction.isdigit()\n        return False\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        value = float(num)\n        if '.' in num:\n            integer_part, decimal_part = num.split('.')\n            return len(decimal_part) == 2 and integer_part.isdigit() and decimal_part.isdigit()\n        return False\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        float_num = float(num)\n        if '.' in num:\n            integer_part, decimal_part = num.split('.')\n            if len(decimal_part) == 2 and integer_part.isdigit():\n                return True\n        return False\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        float_num = float(num)\n        if '.' in num:\n            integer_part, decimal_part = num.split('.')\n            return len(decimal_part) == 2 and integer_part.isdigit() and decimal_part.isdigit()\n        return False\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        value = float(num)\n        if '.' in num:\n            integer_part, decimal_part = num.split('.')\n            return len(decimal_part) == 2 and integer_part.isdigit() and (decimal_part.isdigit() or decimal_part == '00')\n        return False\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        parts = num.split('.')\n        if len(parts) != 2:\n            return False\n        integer_part, decimal_part = parts\n        return integer_part.isdigit() and decimal_part.isdigit() and (len(decimal_part) == 2)\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        parts = num.split('.')\n        if len(parts) != 2:\n            return False\n        integer_part, decimal_part = parts\n        return len(decimal_part) == 2 and integer_part.isdigit() and decimal_part.isdigit()\n    except Exception:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        parts = num.split('.')\n        if len(parts) != 2:\n            return False\n        integer_part, decimal_part = parts\n        if not integer_part.isdigit() or len(decimal_part) != 2 or (not decimal_part.isdigit()):\n            return False\n        return True\n    except Exception:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        float_num = float(num)\n        return '.' in num and len(num.split('.')[1]) == 2\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        value = float(num)\n        if '.' in num:\n            decimal_part = num.split('.')[1]\n            return len(decimal_part) == 2\n        return False\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        value = float(num)\n        if '.' in num:\n            decimal_part = num.split('.')[1]\n            return len(decimal_part) == 2\n        return False\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        float_num = float(num)\n        return num.count('.') == 1 and len(num.split('.')[1]) == 2 and (float_num == round(float_num, 2))\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        a = float(num)\n        if '.' in num:\n            return len(num.split('.')[1]) == 2\n        return False\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        parts = num.split('.')\n        if len(parts) != 2:\n            return False\n        if len(parts[1]) != 2:\n            return False\n        float(num)\n        return True\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        float_num = float(num)\n        return num.count('.') == 1 and len(num.split('.')[1]) == 2\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        parts = num.split('.')\n        if len(parts) != 2:\n            return False\n        if len(parts[1]) != 2:\n            return False\n        float(num)\n        return True\n    except ValueError:\n        return False"], "clusters": [{"programs_str": ["def is_decimal(num: str) -> bool:\n    try:\n        parts = num.split('.')\n        if len(parts) != 2:\n            return False\n        int_part, decimal_part = parts\n        return (int_part.isdigit() or (int_part.startswith('-') and int_part[1:].isdigit())) and len(decimal_part) == 2 and decimal_part.isdigit()\n    except Exception:\n        return False"], "outputs": "[[True], [True], [True], [False], [False], [False], [False], [False], [False], [False], [True], [True], [False], [False], [False]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def is_decimal(num: str) -> bool:\n    try:\n        parts = num.split('.')\n        if len(parts) != 2:\n            return False\n        integer_part, decimal_part = parts\n        return integer_part.isdigit() and len(decimal_part) == 2 and decimal_part.isdigit()\n    except Exception:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        value = float(num)\n        if '.' in num:\n            integer_part, decimal_part = num.split('.')\n            return len(decimal_part) == 2 and integer_part.isdigit() and decimal_part.isdigit()\n        return False\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        value = float(num)\n        if '.' in num:\n            integer_part, decimal_part = num.split('.')\n            return len(decimal_part) == 2 and integer_part.isdigit() and decimal_part.isdigit()\n        return False\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        if num.count('.') == 1:\n            whole, fraction = num.split('.')\n            return whole.isdigit() and len(fraction) == 2 and fraction.isdigit()\n        return False\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        value = float(num)\n        if '.' in num:\n            integer_part, decimal_part = num.split('.')\n            return len(decimal_part) == 2 and integer_part.isdigit() and decimal_part.isdigit()\n        return False\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        float_num = float(num)\n        if '.' in num:\n            integer_part, decimal_part = num.split('.')\n            if len(decimal_part) == 2 and integer_part.isdigit():\n                return True\n        return False\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        float_num = float(num)\n        if '.' in num:\n            integer_part, decimal_part = num.split('.')\n            return len(decimal_part) == 2 and integer_part.isdigit() and decimal_part.isdigit()\n        return False\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        value = float(num)\n        if '.' in num:\n            integer_part, decimal_part = num.split('.')\n            return len(decimal_part) == 2 and integer_part.isdigit() and (decimal_part.isdigit() or decimal_part == '00')\n        return False\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        parts = num.split('.')\n        if len(parts) != 2:\n            return False\n        integer_part, decimal_part = parts\n        return integer_part.isdigit() and decimal_part.isdigit() and (len(decimal_part) == 2)\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        parts = num.split('.')\n        if len(parts) != 2:\n            return False\n        integer_part, decimal_part = parts\n        return len(decimal_part) == 2 and integer_part.isdigit() and decimal_part.isdigit()\n    except Exception:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        parts = num.split('.')\n        if len(parts) != 2:\n            return False\n        integer_part, decimal_part = parts\n        if not integer_part.isdigit() or len(decimal_part) != 2 or (not decimal_part.isdigit()):\n            return False\n        return True\n    except Exception:\n        return False"], "outputs": "[[True], [True], [False], [False], [False], [False], [False], [False], [False], [False], [False], [True], [False], [False], [False]]", "probability": 0.55, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def is_decimal(num: str) -> bool:\n    try:\n        float_num = float(num)\n        return '.' in num and len(num.split('.')[1]) == 2\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        value = float(num)\n        if '.' in num:\n            decimal_part = num.split('.')[1]\n            return len(decimal_part) == 2\n        return False\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        value = float(num)\n        if '.' in num:\n            decimal_part = num.split('.')[1]\n            return len(decimal_part) == 2\n        return False\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        float_num = float(num)\n        return num.count('.') == 1 and len(num.split('.')[1]) == 2 and (float_num == round(float_num, 2))\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        a = float(num)\n        if '.' in num:\n            return len(num.split('.')[1]) == 2\n        return False\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        parts = num.split('.')\n        if len(parts) != 2:\n            return False\n        if len(parts[1]) != 2:\n            return False\n        float(num)\n        return True\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        float_num = float(num)\n        return num.count('.') == 1 and len(num.split('.')[1]) == 2\n    except ValueError:\n        return False", "def is_decimal(num: str) -> bool:\n    try:\n        parts = num.split('.')\n        if len(parts) != 2:\n            return False\n        if len(parts[1]) != 2:\n            return False\n        float(num)\n        return True\n    except ValueError:\n        return False"], "outputs": "[[True], [True], [True], [False], [True], [False], [False], [False], [False], [False], [True], [True], [False], [False], [False]]", "probability": 0.4, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/760", "requirement": "from typing import List\n\n\ndef unique_Element(arr: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"", "llm_generated_inputs": "[[[1, 1, 1]], [[2, 2, 2, 2]], [[3]], [[1, 1, 2]], [[5, 5, 5, 5, 6]], [[0, 0, 0, 0]], [[-1, -1, -1]], [[10, 10, 10, 10]], [[7, 7]], [[1, 2, 1, 2]]]", "programs": ["from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1"], "clusters": [{"programs_str": ["from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1"], "outputs": "[[True], [True], [True], [False], [False], [True], [True], [True], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/762", "requirement": "def check_monthnumber_number(month_number: int) -> bool:\n\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n\nassert check_monthnumber_number(6)==True\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [0], [13], [-1]]", "programs": ["def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in {4, 6, 9, 11}", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in {4, 6, 9, 11}", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in (4, 6, 9, 11)", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in {4, 6, 9, 11}", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in {4, 6, 9, 11}", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in {4, 6, 9, 11}", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in {4, 6, 9, 11}", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]"], "clusters": [{"programs_str": ["def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in {4, 6, 9, 11}", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in {4, 6, 9, 11}", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in (4, 6, 9, 11)", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in {4, 6, 9, 11}", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in {4, 6, 9, 11}", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in {4, 6, 9, 11}", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in {4, 6, 9, 11}", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]"], "outputs": "[[False], [False], [False], [True], [False], [True], [False], [False], [True], [False], [True], [False], [False], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/763", "requirement": "from typing import List\n\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. \nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"", "llm_generated_inputs": "[[[1, 5, 3, 19, 18, 25], 6], [[10, 20, 30, 40, 50], 5], [[1, 1, 1, 1], 4], [[-1, -5, 2, 0], 4], [[7], 1], [[], 0], [[1, 2, 3, 4, 5], 5], [[5, 10, 15, 20, 25], 5], [[100, 200, 300, 400], 4]]", "programs": ["from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, arr[i] - arr[i - 1])\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, arr[i] - arr[i - 1])\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, arr[i] - arr[i - 1])\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        min_diff = min(min_diff, diff)\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"], "clusters": [{"programs_str": ["from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, arr[i] - arr[i - 1])\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, arr[i] - arr[i - 1])\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, arr[i] - arr[i - 1])\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        min_diff = min(min_diff, diff)\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"], "outputs": "[[1], [10], [0], [1], [inf], [inf], [1], [5], [100]]", "probability": 0.9, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[(1, 5, 3, 19, 18, 25), 6], ['AttributeError'], [1]]]"}, {"programs_str": ["from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"], "outputs": "[[1], [10], [0], [1], [0], [0], [1], [5], [100]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[(1, 5, 3, 19, 18, 25), 6], ['AttributeError'], [1]]]"}]}
{"task_id": "Mbpp/764", "requirement": "def number_ctr(s: str) -> int:\n\"\"\"\nWrite a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1\n\"\"\"", "llm_generated_inputs": "[['program2bedone'], ['123abc'], ['no_digits_here'], ['2023 is the year'], ['0test1test2'], [''], ['abcdef'], ['numbers 1, 2, 3, 4']]", "programs": ["def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))"], "clusters": [{"programs_str": ["def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))"], "outputs": "[[1], [3], [0], [4], [3], [0], [0], [4]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/765", "requirement": "def is_polite(n: int) -> int:\n\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert is_polite(7) == 11\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [4], [5], [6], [7], [10], [15], [20], [50], [100]]", "programs": ["def is_polite(n: int) -> int:\n\n    def is_even(num):\n        return num % 2 == 0\n    politely_counted = 0\n    current_number = 1\n    while politely_counted < n:\n        if not is_even(current_number) and current_number % 3 != 0:\n            politely_counted += 1\n        current_number += 1\n    return current_number - 1", "def is_polite(n: int) -> int:\n\n    def is_even(num: int) -> bool:\n        return num % 2 == 0\n    count = 0\n    current = 1\n    while True:\n        if not is_even(current) and current % 3 != 0:\n            count += 1\n            if count == n:\n                return current\n        current += 1", "def is_polite(n: int) -> int:\n\n    def is_even(num):\n        return num % 2 == 0\n    polite_numbers = []\n    cnt = 1\n    while len(polite_numbers) < n:\n        if not is_even(cnt) and cnt % 3 != 0:\n            polite_numbers.append(cnt)\n        cnt += 1\n    return polite_numbers[-1]", "def is_polite(n: int) -> int:\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_power_of_two(n):\n        return n & n - 1 == 0\n    polite_count = 0\n    current_number = 1\n    while True:\n        if not is_power_of_two(current_number):\n            polite_count += 1\n            if polite_count == n:\n                return current_number\n        current_number += 1", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x):\n        return x & x - 1 == 0\n    count = 0\n    num = 1\n    while True:\n        if not is_power_of_two(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x: int) -> bool:\n        return x & x - 1 == 0\n    polite_count = 0\n    current_number = 1\n    while True:\n        if not is_power_of_two(current_number):\n            polite_count += 1\n            if polite_count == n:\n                return current_number\n        current_number += 1", "def is_polite(n: int) -> int:\n\n    def is_even(num):\n        return num % 2 == 0\n\n    def is_polite_number(num):\n        while num > 0 and is_even(num):\n            num //= 2\n        return num != 1\n    count = 0\n    current = 0\n    while count < n:\n        current += 1\n        if is_polite_number(current):\n            count += 1\n    return current", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x):\n        return x & x - 1 == 0\n    count = 0\n    num = 1\n    while True:\n        if not is_power_of_two(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x):\n        return x & x - 1 == 0\n    polite_numbers = []\n    number = 1\n    while len(polite_numbers) < n:\n        if not is_power_of_two(number):\n            polite_numbers.append(number)\n        number += 1\n    return polite_numbers[-1]", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x):\n        return x & x - 1 == 0\n    polite_count = 0\n    current = 1\n    while True:\n        if not is_power_of_two(current):\n            polite_count += 1\n            if polite_count == n:\n                return current\n        current += 1", "def is_polite(n: int) -> int:\n\n    def is_not_polite(num):\n        return num & num - 1 == 0\n    count = 0\n    num = 1\n    while count < n:\n        if not is_not_polite(num):\n            count += 1\n        num += 1\n    return num - 1", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x):\n        return x & x - 1 == 0\n    polite_count = 0\n    num = 1\n    while polite_count < n:\n        if not is_power_of_two(num):\n            polite_count += 1\n        num += 1\n    return num - 1", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x):\n        return x & x - 1 == 0\n    count = 0\n    current = 1\n    while count < n:\n        if not is_power_of_two(current):\n            count += 1\n        current += 1\n    return current - 1", "def is_polite(n: int) -> int:\n\n    def is_even(num):\n        return num % 2 == 0\n\n    def is_polite_number(num):\n        while num % 2 == 0:\n            num //= 2\n        return num > 1\n    count = 0\n    number = 1\n    while True:\n        if is_polite_number(number):\n            count += 1\n            if count == n:\n                return number\n        number += 1", "def is_polite(n: int) -> int:\n\n    def is_even(x):\n        return x % 2 == 0\n    polite_count = 0\n    current_number = 1\n    while True:\n        if current_number == 1:\n            polite_count += 1\n        elif current_number > 2 and is_even(current_number):\n            pass\n        elif not any((current_number % 2 ** i == 0 for i in range(1, current_number))):\n            polite_count += 1\n        if polite_count == n:\n            return current_number\n        current_number += 1", "def is_polite(n: int) -> int:\n\n    def is_even_number(num: int) -> bool:\n        return num % 2 == 0\n    polite_count = 0\n    current = 1\n    while True:\n        if not is_even_number(current):\n            polite_count += 1\n        if polite_count == n:\n            return current\n        current += 1", "def is_polite(n: int) -> int:\n\n    def is_even(k: int) -> bool:\n        return k % 2 == 0\n    polite_count = 0\n    num = 1\n    while True:\n        if not is_even(num) or num & num - 1 != 0:\n            polite_count += 1\n            if polite_count == n:\n                return num\n        num += 1", "def is_polite(n: int) -> int:\n\n    def is_even(num):\n        return num % 2 == 0\n    polite_count = 0\n    num = 1\n    while True:\n        if not is_even(num) or num & num - 1 != 0:\n            polite_count += 1\n            if polite_count == n:\n                return num\n        num += 1", "def is_polite(n: int) -> int:\n\n    def is_even(x):\n        return x % 2 == 0\n\n    def is_polite_number(x):\n        if is_even(x):\n            return False\n        return not x & x - 1\n    count = 0\n    candidate = 1\n    while True:\n        if not is_polite_number(candidate):\n            count += 1\n        if count == n:\n            return candidate\n        candidate += 1", "def is_polite(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    polite_count = 0\n    number = 1\n    while True:\n        if number % 2 == 1 or not number & number - 1:\n            polite_count += 1\n            if polite_count == n:\n                return number\n        number += 1"], "clusters": [{"programs_str": ["def is_polite(n: int) -> int:\n\n    def is_even(num):\n        return num % 2 == 0\n    politely_counted = 0\n    current_number = 1\n    while politely_counted < n:\n        if not is_even(current_number) and current_number % 3 != 0:\n            politely_counted += 1\n        current_number += 1\n    return current_number - 1", "def is_polite(n: int) -> int:\n\n    def is_even(num: int) -> bool:\n        return num % 2 == 0\n    count = 0\n    current = 1\n    while True:\n        if not is_even(current) and current % 3 != 0:\n            count += 1\n            if count == n:\n                return current\n        current += 1", "def is_polite(n: int) -> int:\n\n    def is_even(num):\n        return num % 2 == 0\n    polite_numbers = []\n    cnt = 1\n    while len(polite_numbers) < n:\n        if not is_even(cnt) and cnt % 3 != 0:\n            polite_numbers.append(cnt)\n        cnt += 1\n    return polite_numbers[-1]"], "outputs": "[[1], [5], [7], [11], [13], [17], [19], [29], [43], [59], [149], [299]]", "probability": 0.15, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[7], [19], [11]]]"}, {"programs_str": ["def is_polite(n: int) -> int:\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_power_of_two(n):\n        return n & n - 1 == 0\n    polite_count = 0\n    current_number = 1\n    while True:\n        if not is_power_of_two(current_number):\n            polite_count += 1\n            if polite_count == n:\n                return current_number\n        current_number += 1", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x):\n        return x & x - 1 == 0\n    count = 0\n    num = 1\n    while True:\n        if not is_power_of_two(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x: int) -> bool:\n        return x & x - 1 == 0\n    polite_count = 0\n    current_number = 1\n    while True:\n        if not is_power_of_two(current_number):\n            polite_count += 1\n            if polite_count == n:\n                return current_number\n        current_number += 1", "def is_polite(n: int) -> int:\n\n    def is_even(num):\n        return num % 2 == 0\n\n    def is_polite_number(num):\n        while num > 0 and is_even(num):\n            num //= 2\n        return num != 1\n    count = 0\n    current = 0\n    while count < n:\n        current += 1\n        if is_polite_number(current):\n            count += 1\n    return current", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x):\n        return x & x - 1 == 0\n    count = 0\n    num = 1\n    while True:\n        if not is_power_of_two(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x):\n        return x & x - 1 == 0\n    polite_numbers = []\n    number = 1\n    while len(polite_numbers) < n:\n        if not is_power_of_two(number):\n            polite_numbers.append(number)\n        number += 1\n    return polite_numbers[-1]", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x):\n        return x & x - 1 == 0\n    polite_count = 0\n    current = 1\n    while True:\n        if not is_power_of_two(current):\n            polite_count += 1\n            if polite_count == n:\n                return current\n        current += 1", "def is_polite(n: int) -> int:\n\n    def is_not_polite(num):\n        return num & num - 1 == 0\n    count = 0\n    num = 1\n    while count < n:\n        if not is_not_polite(num):\n            count += 1\n        num += 1\n    return num - 1", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x):\n        return x & x - 1 == 0\n    polite_count = 0\n    num = 1\n    while polite_count < n:\n        if not is_power_of_two(num):\n            polite_count += 1\n        num += 1\n    return num - 1", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x):\n        return x & x - 1 == 0\n    count = 0\n    current = 1\n    while count < n:\n        if not is_power_of_two(current):\n            count += 1\n        current += 1\n    return current - 1", "def is_polite(n: int) -> int:\n\n    def is_even(num):\n        return num % 2 == 0\n\n    def is_polite_number(num):\n        while num % 2 == 0:\n            num //= 2\n        return num > 1\n    count = 0\n    number = 1\n    while True:\n        if is_polite_number(number):\n            count += 1\n            if count == n:\n                return number\n        number += 1"], "outputs": "[[3], [5], [6], [7], [9], [10], [11], [14], [20], [25], [56], [107]]", "probability": 0.55, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def is_polite(n: int) -> int:\n\n    def is_even(x):\n        return x % 2 == 0\n    polite_count = 0\n    current_number = 1\n    while True:\n        if current_number == 1:\n            polite_count += 1\n        elif current_number > 2 and is_even(current_number):\n            pass\n        elif not any((current_number % 2 ** i == 0 for i in range(1, current_number))):\n            polite_count += 1\n        if polite_count == n:\n            return current_number\n        current_number += 1", "def is_polite(n: int) -> int:\n\n    def is_even_number(num: int) -> bool:\n        return num % 2 == 0\n    polite_count = 0\n    current = 1\n    while True:\n        if not is_even_number(current):\n            polite_count += 1\n        if polite_count == n:\n            return current\n        current += 1"], "outputs": "[[1], [3], [5], [7], [9], [11], [13], [19], [29], [39], [99], [199]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[7], [13], [11]]]"}, {"programs_str": ["def is_polite(n: int) -> int:\n\n    def is_even(k: int) -> bool:\n        return k % 2 == 0\n    polite_count = 0\n    num = 1\n    while True:\n        if not is_even(num) or num & num - 1 != 0:\n            polite_count += 1\n            if polite_count == n:\n                return num\n        num += 1", "def is_polite(n: int) -> int:\n\n    def is_even(num):\n        return num % 2 == 0\n    polite_count = 0\n    num = 1\n    while True:\n        if not is_even(num) or num & num - 1 != 0:\n            polite_count += 1\n            if polite_count == n:\n                return num\n        num += 1"], "outputs": "[[1], [3], [5], [6], [7], [9], [10], [13], [19], [24], [55], [106]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[7], [10], [11]]]"}, {"programs_str": ["def is_polite(n: int) -> int:\n\n    def is_even(x):\n        return x % 2 == 0\n\n    def is_polite_number(x):\n        if is_even(x):\n            return False\n        return not x & x - 1\n    count = 0\n    candidate = 1\n    while True:\n        if not is_polite_number(candidate):\n            count += 1\n        if count == n:\n            return candidate\n        candidate += 1"], "outputs": "[[2], [3], [4], [5], [6], [7], [8], [11], [16], [21], [51], [101]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[7], [8], [11]]]"}, {"programs_str": ["def is_polite(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    polite_count = 0\n    number = 1\n    while True:\n        if number % 2 == 1 or not number & number - 1:\n            polite_count += 1\n            if polite_count == n:\n                return number\n        number += 1"], "outputs": "[[1], [2], [3], [4], [5], [7], [8], [13], [21], [31], [87], [185]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[7], [8], [11]]]"}]}
{"task_id": "Mbpp/766", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"", "llm_generated_inputs": "[[[1, 1, 2, 3, 3, 4, 4, 5]], [[5, 5, 5, 5]], [[10]], [[-1, 0, 1]], [[1, 2]], [[]], [[1, 2, 3, 4, 5]]]", "programs": ["from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List\nfrom typing import Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i + 1]))\n    return pairs", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List\nfrom typing import Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List\nfrom typing import Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List\nfrom typing import Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List\nfrom typing import Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]"], "clusters": [{"programs_str": ["from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List\nfrom typing import Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i + 1]))\n    return pairs", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List\nfrom typing import Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List\nfrom typing import Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List\nfrom typing import Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List\nfrom typing import Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]"], "outputs": "[[[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]], [[(5, 5), (5, 5), (5, 5)]], [[]], [[(-1, 0), (0, 1)]], [[(1, 2)]], [[]], [[(1, 2), (2, 3), (3, 4), (4, 5)]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/767", "requirement": "from typing import List\n\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"", "llm_generated_inputs": "[[[1, 1, 1, 1], 2], [[1, 2, 3, 4], 5], [[1, 5, 2, 3, 4], 6], [[], 1], [[2, 1, 1, 2], 3], [[1, 2, 3, 4, 5], 10], [[0, 0, 0, 0], 0], [[10, 5, 1, 6, 5], 11], [[3, 3, 3, 3], 6], [[1, 2, 3, 3, 4, 4, 5], 6]]", "programs": ["from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    num_dict = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in num_dict:\n            count += num_dict[complement]\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    return count", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    num_count = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in num_count:\n            count += num_count[complement]\n        num_count[num] = num_count.get(num, 0) + 1\n    return count", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    num_count = Counter(arr)\n    for num in arr:\n        complement = sum_ - num\n        if complement in num_count:\n            count += num_count[complement]\n            if complement == num:\n                count -= 1\n    return count // 2", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = Counter(arr)\n    for num in freq:\n        complement = sum_ - num\n        if complement in freq:\n            if num == complement:\n                count += freq[num] * (freq[num] - 1) // 2\n            elif num < complement:\n                count += freq[num] * freq[complement]\n    return count", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in freq:\n            count += freq[complement]\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return count", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    num_counts = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in num_counts:\n            count += num_counts[complement]\n        if num in num_counts:\n            num_counts[num] += 1\n        else:\n            num_counts[num] = 1\n    return count", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = {}\n    for number in arr:\n        complement = sum_ - number\n        if complement in freq:\n            count += freq[complement]\n        if number in freq:\n            freq[number] += 1\n        else:\n            freq[number] = 1\n    return count", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    num_count = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in num_count:\n            count += num_count[complement]\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    return count", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    num_count = Counter(arr)\n    for num in num_count:\n        complement = sum_ - num\n        if complement in num_count:\n            if num == complement:\n                count += num_count[num] * (num_count[num] - 1) // 2\n            elif num < complement:\n                count += num_count[num] * num_count[complement]\n    return count", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    num_map = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in num_map:\n            count += num_map[complement]\n        if num in num_map:\n            num_map[num] += 1\n        else:\n            num_map[num] = 1\n    return count", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in freq:\n            count += freq[complement]\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return count", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = {}\n    for number in arr:\n        complement = sum_ - number\n        if complement in freq:\n            count += freq[complement]\n        if number in freq:\n            freq[number] += 1\n        else:\n            freq[number] = 1\n    return float(count)", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = Counter(arr)\n    for num in freq:\n        complement = sum_ - num\n        if complement in freq:\n            if num == complement:\n                count += freq[num] * (freq[num] - 1) // 2\n            elif num < complement:\n                count += freq[num] * freq[complement]\n    return count", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = Counter(arr)\n    for num in freq:\n        complement = sum_ - num\n        if complement in freq:\n            if num == complement:\n                count += freq[num] * (freq[num] - 1) // 2\n            elif num < complement:\n                count += freq[num] * freq[complement]\n    return count", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    frequency = Counter(arr)\n    for num in frequency:\n        complement = sum_ - num\n        if complement in frequency:\n            if num == complement:\n                count += frequency[num] * (frequency[num] - 1) // 2\n            elif num < complement:\n                count += frequency[num] * frequency[complement]\n    return count", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = Counter(arr)\n    for number in freq:\n        complement = sum_ - number\n        if complement in freq:\n            if number == complement:\n                count += freq[number] * (freq[number] - 1) // 2\n            else:\n                count += freq[number] * freq[complement] // 2\n    return count", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    num_count = Counter(arr)\n    for num in num_count:\n        complement = sum_ - num\n        if complement in num_count:\n            if num == complement:\n                count += num_count[num] * (num_count[num] - 1) // 2\n            else:\n                count += num_count[num] * num_count[complement] // 2\n    return count", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    num_count = Counter(arr)\n    for num in num_count:\n        complement = sum_ - num\n        if complement in num_count:\n            if num == complement:\n                count += num_count[num] * (num_count[num] - 1) // 2\n            else:\n                count += num_count[num] * num_count[complement] // 2\n    return count", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = Counter(arr)\n    for num in freq:\n        complement = sum_ - num\n        if complement in freq:\n            if num == complement:\n                count += freq[num] * (freq[num] - 1) // 2\n            else:\n                count += freq[num] * freq[complement]\n    return count", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    counter = Counter(arr)\n    for num in counter:\n        complement = sum_ - num\n        if complement in counter:\n            if num == complement:\n                count += counter[num] * (counter[num] - 1) // 2\n            else:\n                count += counter[num] * counter[complement]\n    return count"], "clusters": [{"programs_str": ["from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    num_dict = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in num_dict:\n            count += num_dict[complement]\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    return count", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    num_count = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in num_count:\n            count += num_count[complement]\n        num_count[num] = num_count.get(num, 0) + 1\n    return count", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    num_count = Counter(arr)\n    for num in arr:\n        complement = sum_ - num\n        if complement in num_count:\n            count += num_count[complement]\n            if complement == num:\n                count -= 1\n    return count // 2", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = Counter(arr)\n    for num in freq:\n        complement = sum_ - num\n        if complement in freq:\n            if num == complement:\n                count += freq[num] * (freq[num] - 1) // 2\n            elif num < complement:\n                count += freq[num] * freq[complement]\n    return count", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in freq:\n            count += freq[complement]\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return count", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    num_counts = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in num_counts:\n            count += num_counts[complement]\n        if num in num_counts:\n            num_counts[num] += 1\n        else:\n            num_counts[num] = 1\n    return count", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = {}\n    for number in arr:\n        complement = sum_ - number\n        if complement in freq:\n            count += freq[complement]\n        if number in freq:\n            freq[number] += 1\n        else:\n            freq[number] = 1\n    return count", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    num_count = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in num_count:\n            count += num_count[complement]\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    return count", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    num_count = Counter(arr)\n    for num in num_count:\n        complement = sum_ - num\n        if complement in num_count:\n            if num == complement:\n                count += num_count[num] * (num_count[num] - 1) // 2\n            elif num < complement:\n                count += num_count[num] * num_count[complement]\n    return count", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    num_map = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in num_map:\n            count += num_map[complement]\n        if num in num_map:\n            num_map[num] += 1\n        else:\n            num_map[num] = 1\n    return count", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in freq:\n            count += freq[complement]\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return count", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = {}\n    for number in arr:\n        complement = sum_ - number\n        if complement in freq:\n            count += freq[complement]\n        if number in freq:\n            freq[number] += 1\n        else:\n            freq[number] = 1\n    return float(count)", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = Counter(arr)\n    for num in freq:\n        complement = sum_ - num\n        if complement in freq:\n            if num == complement:\n                count += freq[num] * (freq[num] - 1) // 2\n            elif num < complement:\n                count += freq[num] * freq[complement]\n    return count", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = Counter(arr)\n    for num in freq:\n        complement = sum_ - num\n        if complement in freq:\n            if num == complement:\n                count += freq[num] * (freq[num] - 1) // 2\n            elif num < complement:\n                count += freq[num] * freq[complement]\n    return count", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    frequency = Counter(arr)\n    for num in frequency:\n        complement = sum_ - num\n        if complement in frequency:\n            if num == complement:\n                count += frequency[num] * (frequency[num] - 1) // 2\n            elif num < complement:\n                count += frequency[num] * frequency[complement]\n    return count"], "outputs": "[[6], [2], [2], [0], [4], [0], [6], [3], [6], [4]]", "probability": 0.75, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = Counter(arr)\n    for number in freq:\n        complement = sum_ - number\n        if complement in freq:\n            if number == complement:\n                count += freq[number] * (freq[number] - 1) // 2\n            else:\n                count += freq[number] * freq[complement] // 2\n    return count", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    num_count = Counter(arr)\n    for num in num_count:\n        complement = sum_ - num\n        if complement in num_count:\n            if num == complement:\n                count += num_count[num] * (num_count[num] - 1) // 2\n            else:\n                count += num_count[num] * num_count[complement] // 2\n    return count", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    num_count = Counter(arr)\n    for num in num_count:\n        complement = sum_ - num\n        if complement in num_count:\n            if num == complement:\n                count += num_count[num] * (num_count[num] - 1) // 2\n            else:\n                count += num_count[num] * num_count[complement] // 2\n    return count"], "outputs": "[[6], [0], [0], [0], [4], [0], [6], [2], [6], [3]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = Counter(arr)\n    for num in freq:\n        complement = sum_ - num\n        if complement in freq:\n            if num == complement:\n                count += freq[num] * (freq[num] - 1) // 2\n            else:\n                count += freq[num] * freq[complement]\n    return count", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    counter = Counter(arr)\n    for num in counter:\n        complement = sum_ - num\n        if complement in counter:\n            if num == complement:\n                count += counter[num] * (counter[num] - 1) // 2\n            else:\n                count += counter[num] * counter[complement]\n    return count"], "outputs": "[[6], [4], [4], [0], [8], [0], [6], [6], [6], [7]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/769", "requirement": "from typing import List\n\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"", "llm_generated_inputs": "[[[10, 15, 20, 25, 30, 35, 40], [25, 40, 35]], [[1, 2, 3], [3, 4, 5]], [[], [1, 2, 3]], [[1, 2, 3], []], [[], []], [[10, 20, 30, 40], [10, 20]], [[100, 200, 300], [100, 400]], [[5, 5, 5, 5], [5]], [[1], [1]], [[7, 8, 9], [7, 8, 9]]]", "programs": ["from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]"], "clusters": [{"programs_str": ["from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]"], "outputs": "[[[10, 15, 20, 30]], [[1, 2, 4, 5]], [[1, 2, 3]], [[1, 2, 3]], [[]], [[30, 40]], [[200, 300, 400]], [[]], [[]], [[]]]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[10, 15, 20, 25, 30, 35, 40], [25, 40, 35]], [[10, 15, 20, 30]], [[10, 20, 30, 15]]]]"}]}
{"task_id": "Mbpp/770", "requirement": "def odd_num_sum(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [0], [-1], [5], [10]]", "programs": ["def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))"], "clusters": [{"programs_str": ["def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i + 1) ** 4 for i in range(n)))"], "outputs": "[[1], [82], [707], [0], [0], [9669], [317338]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/771", "requirement": "def check_expression(expression: str) -> bool:\n\"\"\"\nWrite a function to check if the given expression is balanced or not. \nassert check_expression(\"{()}[{}]\") == True\n\"\"\"", "llm_generated_inputs": "[['{()}[{}]'], ['{[()]}'], ['{[}'], [''], ['({[]})'], ['((()))'], ['{(})'], ['{[((()))]}'], ['{[}]'], ['{()}(())']]", "programs": ["def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', ']': '[', '}': '{'}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []", "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack and stack[-1] == mapping[char]:\n                stack.pop()\n            else:\n                return False\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack or stack.pop() != bracket_map[char]:\n                return False\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []", "def check_expression(expression: str) -> bool:\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack or stack.pop() != bracket_map[char]:\n                return False\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []", "def check_expression(expression: str) -> bool:\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    open_brackets = set(bracket_map.values())\n    for char in expression:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in bracket_map:\n            if not stack or stack.pop() != bracket_map[char]:\n                return False\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    open_brackets = bracket_map.values()\n    for char in expression:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in bracket_map:\n            if not stack or stack.pop() != bracket_map[char]:\n                return False\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    brackets_map = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in brackets_map.values():\n            stack.append(char)\n        elif char in brackets_map.keys():\n            if not stack or stack.pop() != brackets_map[char]:\n                return False\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []", "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', ']': '[', '}': '{'}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []", "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []", "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []", "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []", "def check_expression(expression: str) -> bool:\n    stack = []\n    brackets = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in brackets.values():\n            stack.append(char)\n        elif char in brackets.keys():\n            if stack == [] or stack.pop() != brackets[char]:\n                return False\n    return stack == []", "def check_expression(expression: str) -> bool:\n    stack = []\n    brackets = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in brackets.values():\n            stack.append(char)\n        elif char in brackets.keys():\n            if not stack or stack.pop() != brackets[char]:\n                return False\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', ']': '[', '}': '{'}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack and stack[-1] == mapping[char]:\n                stack.pop()\n            else:\n                return False\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []", "def check_expression(expression: str) -> bool:\n    stack = []\n    matching_brackets = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in matching_brackets.values():\n            stack.append(char)\n        elif char in matching_brackets.keys():\n            if not stack or stack.pop() != matching_brackets[char]:\n                return False\n    return len(stack) == 0", "def check_expression(expression: str) -> bool:\n    stack = []\n    brackets = {'(': ')', '{': '}', '[': ']'}\n    for char in expression:\n        if char in brackets:\n            stack.append(char)\n        elif char in brackets.values():\n            if not stack or brackets[stack.pop()] != char:\n                return False\n    return len(stack) == 0"], "clusters": [{"programs_str": ["def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', ']': '[', '}': '{'}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []", "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack and stack[-1] == mapping[char]:\n                stack.pop()\n            else:\n                return False\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack or stack.pop() != bracket_map[char]:\n                return False\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []", "def check_expression(expression: str) -> bool:\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack or stack.pop() != bracket_map[char]:\n                return False\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []", "def check_expression(expression: str) -> bool:\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    open_brackets = set(bracket_map.values())\n    for char in expression:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in bracket_map:\n            if not stack or stack.pop() != bracket_map[char]:\n                return False\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    open_brackets = bracket_map.values()\n    for char in expression:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in bracket_map:\n            if not stack or stack.pop() != bracket_map[char]:\n                return False\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    brackets_map = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in brackets_map.values():\n            stack.append(char)\n        elif char in brackets_map.keys():\n            if not stack or stack.pop() != brackets_map[char]:\n                return False\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []", "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', ']': '[', '}': '{'}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []", "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []", "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []", "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []", "def check_expression(expression: str) -> bool:\n    stack = []\n    brackets = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in brackets.values():\n            stack.append(char)\n        elif char in brackets.keys():\n            if stack == [] or stack.pop() != brackets[char]:\n                return False\n    return stack == []", "def check_expression(expression: str) -> bool:\n    stack = []\n    brackets = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in brackets.values():\n            stack.append(char)\n        elif char in brackets.keys():\n            if not stack or stack.pop() != brackets[char]:\n                return False\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', ']': '[', '}': '{'}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack and stack[-1] == mapping[char]:\n                stack.pop()\n            else:\n                return False\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []", "def check_expression(expression: str) -> bool:\n    stack = []\n    matching_brackets = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in matching_brackets.values():\n            stack.append(char)\n        elif char in matching_brackets.keys():\n            if not stack or stack.pop() != matching_brackets[char]:\n                return False\n    return len(stack) == 0", "def check_expression(expression: str) -> bool:\n    stack = []\n    brackets = {'(': ')', '{': '}', '[': ']'}\n    for char in expression:\n        if char in brackets:\n            stack.append(char)\n        elif char in brackets.values():\n            if not stack or brackets[stack.pop()] != char:\n                return False\n    return len(stack) == 0"], "outputs": "[[True], [True], [False], [True], [True], [True], [False], [True], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/772", "requirement": "def remove_length(test_str: str, K: int) -> str:\n\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"", "llm_generated_inputs": "[['The quick brown fox jumps over the lazy dog', 3], ['This is a simple test string', 2], ['Remove all short words', 4], ['Lengthy words should remain', 5], ['A B C D E F G H I', 1], ['Exactly five word length', 5], ['Single', 6], ['', 0]]", "programs": ["def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))"], "clusters": [{"programs_str": ["def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))"], "outputs": "[['quick brown jumps over lazy'], ['This a simple test string'], ['Remove all short words'], ['Lengthy should remain'], [''], ['Exactly five word length'], [''], ['']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/773", "requirement": "from typing import Tuple\n\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"", "llm_generated_inputs": "[['python programming, python language', 'python'], ['hello world', 'world'], ['test case with no match', 'absent'], ['multiple occurrences of word word', 'word'], ['exact match', 'exact'], ['beginning match', 'begin'], ['ending match', 'match'], ['repeated pattern: abcabcabc', 'abc'], ['text with special characters @#$', '@#$'], ['text without pattern at all', 'notfound'], ['Case Sensitivity', 'case']]", "programs": ["from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    end = start + len(pattern)\n    return (pattern, start, end)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (pattern, index, index + len(pattern))", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    end = start + len(pattern)\n    return (pattern, start, end)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    return (pattern, start_index, start_index + len(pattern))", "from typing import Optional, Tuple\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    return (pattern, start, start + len(pattern))", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    end = start + len(pattern)\n    return (pattern, start, end)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    return (pattern, start, start + len(pattern))", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    end = start + len(pattern)\n    return (pattern, start, end)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    return (pattern, start, start + len(pattern))", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)"], "clusters": [{"programs_str": ["from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    end = start + len(pattern)\n    return (pattern, start, end)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (pattern, index, index + len(pattern))", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    end = start + len(pattern)\n    return (pattern, start, end)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    return (pattern, start_index, start_index + len(pattern))", "from typing import Optional, Tuple\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    return (pattern, start, start + len(pattern))", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    end = start + len(pattern)\n    return (pattern, start, end)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    return (pattern, start, start + len(pattern))", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    end = start + len(pattern)\n    return (pattern, start, end)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    return (pattern, start, start + len(pattern))", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)"], "outputs": "[[('python', 0, 6)], [('world', 6, 11)], [None], [('word', 24, 28)], [('exact', 0, 5)], [('begin', 0, 5)], [('match', 7, 12)], [('abc', 18, 21)], [('@#$', 29, 32)], [None], [None]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/775", "requirement": "from typing import List\n\n\ndef odd_position(nums: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"", "llm_generated_inputs": "[[[2, 1, 4, 3, 6, 7, 6, 3]], [[1, 3, 5, 7, 9]], [[2, 4, 6, 8, 10]], [[1, 2, 3, 4, 5, 6]], [[0, 1, 2, 3, 4]], [[1, 1, 1, 1, 1]], [[2, 3, 6, 5, 8, 9]], [[7, 5, 3, 1, 9, 11, 13]], [[-1, -3, -5, -7]], [[-2, -1, 4, 3, 6, 7]], [[]]]", "programs": ["from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((num % 2 != 0 for i, num in enumerate(nums) if i % 2 != 0))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((num % 2 != 0 for i, num in enumerate(nums) if i % 2 != 0))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((num % 2 != 0 for i, num in enumerate(nums) if i % 2 == 1))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((num % 2 == 1 for i, num in enumerate(nums) if i % 2 == 1))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((num % 2 != 0 for i, num in enumerate(nums) if i % 2 != 0))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((num % 2 == 1 for i, num in enumerate(nums) if i % 2 == 1))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 1 for i in range(1, len(nums), 2)))"], "clusters": [{"programs_str": ["from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((num % 2 != 0 for i, num in enumerate(nums) if i % 2 != 0))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((num % 2 != 0 for i, num in enumerate(nums) if i % 2 != 0))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((num % 2 != 0 for i, num in enumerate(nums) if i % 2 == 1))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((num % 2 == 1 for i, num in enumerate(nums) if i % 2 == 1))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((num % 2 != 0 for i, num in enumerate(nums) if i % 2 != 0))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((num % 2 == 1 for i, num in enumerate(nums) if i % 2 == 1))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 1 for i in range(1, len(nums), 2)))"], "outputs": "[[True], [True], [False], [False], [True], [True], [True], [True], [True], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/777", "requirement": "from typing import List\n\n\ndef find_sum(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3, 1, 1, 4, 5, 6]], [[10, 20, 30, 10, 20]], [[-1, -2, -3, -1, -2]], [[1, 1, 1, 1]], [[0, 1, 1, 2]], [[5, 5, 7, 8]], [[1, 2, 3]], [[100, 200, 100, 300]], [[]], [[42]]]", "programs": ["from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((num for num in arr if arr.count(num) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in set(arr) if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    return sum((num for num, count in element_count.items() if count == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    element_count = {}\n    for num in arr:\n        element_count[num] = element_count.get(num, 0) + 1\n    return sum((num for num, count in element_count.items() if count == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in set(arr) if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in set(arr) if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in set(arr) if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    return sum((num for num, count in element_count.items() if count == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in set(arr) if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in set(arr) if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in set(arr) if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in set(arr) if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in set(arr) if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((num for num in set(arr) if arr.count(num) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((num for num in arr if arr.count(num) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((num for num in set(arr) if arr.count(num) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in set(arr) if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((num for num in set(arr) if arr.count(num) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    from collections import Counter\n    count = Counter(arr)\n    return sum((num for num, freq in count.items() if freq == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))"], "clusters": [{"programs_str": ["from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((num for num in arr if arr.count(num) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in set(arr) if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    return sum((num for num, count in element_count.items() if count == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    element_count = {}\n    for num in arr:\n        element_count[num] = element_count.get(num, 0) + 1\n    return sum((num for num, count in element_count.items() if count == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in set(arr) if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in set(arr) if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in set(arr) if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    return sum((num for num, count in element_count.items() if count == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in set(arr) if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in set(arr) if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in set(arr) if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in set(arr) if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in set(arr) if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((num for num in set(arr) if arr.count(num) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((num for num in arr if arr.count(num) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((num for num in set(arr) if arr.count(num) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in set(arr) if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((num for num in set(arr) if arr.count(num) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    from collections import Counter\n    count = Counter(arr)\n    return sum((num for num, freq in count.items() if freq == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))"], "outputs": "[[20], [30], [-3], [0], [2], [15], [6], [500], [0], [42]]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 2, 3, 1, 1, 4, 5, 6]], [20], [21]]]"}]}
{"task_id": "Mbpp/778", "requirement": "from typing import List\n\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"", "llm_generated_inputs": "[[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]], [[1, 1, 1, 2, 2, 3, 3, 3, 3]], [[5, 6, 7, 8]], [[1]], [[]], [[1, 1, 1, 1, 1]], [[3, 3, 3, 2, 2, 1, 1, 1]], [[9, 9, 9, 8, 8, 7, 6, 6]]]", "programs": ["from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_pack = [list1[0]]\n    for item in list1[1:]:\n        if item == current_pack[-1]:\n            current_pack.append(item)\n        else:\n            packed.append(current_pack)\n            current_pack = [item]\n    packed.append(current_pack)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current.append(list1[i])\n        else:\n            packed.append(current)\n            current = [list1[i]]\n    packed.append(current)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_pack = [list1[0]]\n    for item in list1[1:]:\n        if item == current_pack[-1]:\n            current_pack.append(item)\n        else:\n            packed.append(current_pack)\n            current_pack = [item]\n    packed.append(current_pack)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    packed_list = []\n    if not list1:\n        return packed_list\n    current_sublist = [list1[0]]\n    for element in list1[1:]:\n        if element == current_sublist[-1]:\n            current_sublist.append(element)\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [element]\n    packed_list.append(current_sublist)\n    return packed_list", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_pack = [list1[0]]\n    for item in list1[1:]:\n        if item == current_pack[-1]:\n            current_pack.append(item)\n        else:\n            packed.append(current_pack)\n            current_pack = [item]\n    packed.append(current_pack)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current.append(list1[i])\n        else:\n            packed.append(current)\n            current = [list1[i]]\n    packed.append(current)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed_list = []\n    current_sublist = [list1[0]]\n    for item in list1[1:]:\n        if item == current_sublist[-1]:\n            current_sublist.append(item)\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [item]\n    packed_list.append(current_sublist)\n    return packed_list", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_pack = [list1[0]]\n    for item in list1[1:]:\n        if item == current_pack[-1]:\n            current_pack.append(item)\n        else:\n            packed.append(current_pack)\n            current_pack = [item]\n    packed.append(current_pack)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed_list = []\n    current_pack = [list1[0]]\n    for item in list1[1:]:\n        if item == current_pack[-1]:\n            current_pack.append(item)\n        else:\n            packed_list.append(current_pack)\n            current_pack = [item]\n    packed_list.append(current_pack)\n    return packed_list", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_pack = [list1[0]]\n    for element in list1[1:]:\n        if element == current_pack[-1]:\n            current_pack.append(element)\n        else:\n            packed.append(current_pack)\n            current_pack = [element]\n    packed.append(current_pack)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_pack = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_pack.append(list1[i])\n        else:\n            packed.append(current_pack)\n            current_pack = [list1[i]]\n    packed.append(current_pack)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_pack = [list1[0]]\n    for num in list1[1:]:\n        if num == current_pack[-1]:\n            current_pack.append(num)\n        else:\n            packed.append(current_pack)\n            current_pack = [num]\n    packed.append(current_pack)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_pack = [list1[0]]\n    for item in list1[1:]:\n        if item == current_pack[-1]:\n            current_pack.append(item)\n        else:\n            packed.append(current_pack)\n            current_pack = [item]\n    packed.append(current_pack)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_pack = [list1[0]]\n    for item in list1[1:]:\n        if item == current_pack[-1]:\n            current_pack.append(item)\n        else:\n            packed.append(current_pack)\n            current_pack = [item]\n    packed.append(current_pack)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed_list = []\n    current_sublist = [list1[0]]\n    for element in list1[1:]:\n        if element == current_sublist[-1]:\n            current_sublist.append(element)\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [element]\n    packed_list.append(current_sublist)\n    return packed_list", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = [[list1[0]]]\n    for item in list1[1:]:\n        if item == packed[-1][-1]:\n            packed[-1].append(item)\n        else:\n            packed.append([item])\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed_list = []\n    current_pack = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_pack.append(list1[i])\n        else:\n            packed_list.append(current_pack)\n            current_pack = [list1[i]]\n    packed_list.append(current_pack)\n    return packed_list", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_pack = [list1[0]]\n    for item in list1[1:]:\n        if item == current_pack[-1]:\n            current_pack.append(item)\n        else:\n            packed.append(current_pack)\n            current_pack = [item]\n    packed.append(current_pack)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed_list = []\n    current_pack = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_pack.append(list1[i])\n        else:\n            packed_list.append(current_pack)\n            current_pack = [list1[i]]\n    packed_list.append(current_pack)\n    return packed_list", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    result = []\n    current_pack = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_pack.append(list1[i])\n        else:\n            result.append(current_pack)\n            current_pack = [list1[i]]\n    result.append(current_pack)\n    return result"], "clusters": [{"programs_str": ["from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_pack = [list1[0]]\n    for item in list1[1:]:\n        if item == current_pack[-1]:\n            current_pack.append(item)\n        else:\n            packed.append(current_pack)\n            current_pack = [item]\n    packed.append(current_pack)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current.append(list1[i])\n        else:\n            packed.append(current)\n            current = [list1[i]]\n    packed.append(current)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_pack = [list1[0]]\n    for item in list1[1:]:\n        if item == current_pack[-1]:\n            current_pack.append(item)\n        else:\n            packed.append(current_pack)\n            current_pack = [item]\n    packed.append(current_pack)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    packed_list = []\n    if not list1:\n        return packed_list\n    current_sublist = [list1[0]]\n    for element in list1[1:]:\n        if element == current_sublist[-1]:\n            current_sublist.append(element)\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [element]\n    packed_list.append(current_sublist)\n    return packed_list", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_pack = [list1[0]]\n    for item in list1[1:]:\n        if item == current_pack[-1]:\n            current_pack.append(item)\n        else:\n            packed.append(current_pack)\n            current_pack = [item]\n    packed.append(current_pack)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current.append(list1[i])\n        else:\n            packed.append(current)\n            current = [list1[i]]\n    packed.append(current)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed_list = []\n    current_sublist = [list1[0]]\n    for item in list1[1:]:\n        if item == current_sublist[-1]:\n            current_sublist.append(item)\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [item]\n    packed_list.append(current_sublist)\n    return packed_list", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_pack = [list1[0]]\n    for item in list1[1:]:\n        if item == current_pack[-1]:\n            current_pack.append(item)\n        else:\n            packed.append(current_pack)\n            current_pack = [item]\n    packed.append(current_pack)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed_list = []\n    current_pack = [list1[0]]\n    for item in list1[1:]:\n        if item == current_pack[-1]:\n            current_pack.append(item)\n        else:\n            packed_list.append(current_pack)\n            current_pack = [item]\n    packed_list.append(current_pack)\n    return packed_list", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_pack = [list1[0]]\n    for element in list1[1:]:\n        if element == current_pack[-1]:\n            current_pack.append(element)\n        else:\n            packed.append(current_pack)\n            current_pack = [element]\n    packed.append(current_pack)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_pack = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_pack.append(list1[i])\n        else:\n            packed.append(current_pack)\n            current_pack = [list1[i]]\n    packed.append(current_pack)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_pack = [list1[0]]\n    for num in list1[1:]:\n        if num == current_pack[-1]:\n            current_pack.append(num)\n        else:\n            packed.append(current_pack)\n            current_pack = [num]\n    packed.append(current_pack)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_pack = [list1[0]]\n    for item in list1[1:]:\n        if item == current_pack[-1]:\n            current_pack.append(item)\n        else:\n            packed.append(current_pack)\n            current_pack = [item]\n    packed.append(current_pack)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_pack = [list1[0]]\n    for item in list1[1:]:\n        if item == current_pack[-1]:\n            current_pack.append(item)\n        else:\n            packed.append(current_pack)\n            current_pack = [item]\n    packed.append(current_pack)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed_list = []\n    current_sublist = [list1[0]]\n    for element in list1[1:]:\n        if element == current_sublist[-1]:\n            current_sublist.append(element)\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [element]\n    packed_list.append(current_sublist)\n    return packed_list", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = [[list1[0]]]\n    for item in list1[1:]:\n        if item == packed[-1][-1]:\n            packed[-1].append(item)\n        else:\n            packed.append([item])\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed_list = []\n    current_pack = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_pack.append(list1[i])\n        else:\n            packed_list.append(current_pack)\n            current_pack = [list1[i]]\n    packed_list.append(current_pack)\n    return packed_list", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_pack = [list1[0]]\n    for item in list1[1:]:\n        if item == current_pack[-1]:\n            current_pack.append(item)\n        else:\n            packed.append(current_pack)\n            current_pack = [item]\n    packed.append(current_pack)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed_list = []\n    current_pack = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_pack.append(list1[i])\n        else:\n            packed_list.append(current_pack)\n            current_pack = [list1[i]]\n    packed_list.append(current_pack)\n    return packed_list", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    result = []\n    current_pack = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_pack.append(list1[i])\n        else:\n            result.append(current_pack)\n            current_pack = [list1[i]]\n    result.append(current_pack)\n    return result"], "outputs": "[[[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]], [[[1, 1, 1], [2, 2], [3, 3, 3, 3]]], [[[5], [6], [7], [8]]], [[[1]]], [[]], [[[1, 1, 1, 1, 1]]], [[[3, 3, 3], [2, 2], [1, 1, 1]]], [[[9, 9, 9], [8, 8], [7], [6, 6]]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/780", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. \nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"", "llm_generated_inputs": "[[[(2, 4), (6, 7), (5, 1), (6, 10)]], [[(1, 1), (1, 1), (1, 1)]], [[(0, 0), (0, 0)]], [[(10, 20), (30, 40)]], [[(1, 2), (-1, -2)]], [[(7, 3), (2, 5), (4, 6)]], [[(100, 200), (300, 400), (500, 600)]], [[(1, 2), (3, 4), (5, 6), (7, 8)]], [[(1000, 2000), (3000, 4000), (5000, 6000)]], [[(-2, -4), (-6, -7)]]]", "programs": ["from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.add((a1 + a2, b1 + b2))\n        result.add((a1 + b2, b1 + a2))\n    return sorted(result)", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a1, a2), (b1, b2) in combinations(test_list, 2):\n        result.add((a1 + b1, a2 + b2))\n        result.add((a1 + b2, a2 + b1))\n    return sorted(result)", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a1, a2), (b1, b2) in combinations(test_list, 2):\n        result.add((a1 + b1, a2 + b2))\n        result.add((a1 + b2, a2 + b1))\n    return sorted(list(result))", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (x1, y1), (x2, y2) in combinations(test_list, 2):\n        result.add((x1 + x2, y1 + y2))\n        result.add((x1 + y2, y1 + x2))\n    return sorted(result)", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.add((a1 + a2, b1 + b2))\n        result.add((a1 + b2, b1 + a2))\n    return sorted(result)", "from typing import List, Tuple\nimport itertools\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    combinations = []\n    for (a1, b1), (a2, b2) in itertools.combinations(test_list, 2):\n        combinations.append((a1 + a2, b1 + b2))\n        combinations.append((a1 + b2, b1 + a2))\n    return combinations", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.append((a1 + a2, b1 + b2))\n        result.append((a1 + b2, b1 + a2))\n        result.append((b1 + a2, a1 + b2))\n        result.append((b1 + b2, a1 + a2))\n    return result", "from typing import List, Tuple\nimport itertools\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    combinations = []\n    for (a1, b1), (a2, b2) in itertools.combinations(test_list, 2):\n        combinations.append((a1 + a2, b1 + b2))\n        combinations.append((a1 + b2, b1 + a2))\n        combinations.append((b1 + a2, a1 + b2))\n        combinations.append((b1 + b2, a1 + a2))\n    return combinations", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.append((a1 + a2, b1 + b2))\n        result.append((a1 + b2, b1 + a2))\n        result.append((b1 + a2, a1 + b2))\n        result.append((b1 + b2, a1 + a2))\n    return result", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.append((a1 + a2, b1 + b2))\n        result.append((a1 + b2, b1 + a2))\n        result.append((b1 + a2, a1 + b2))\n        result.append((b1 + b2, a1 + a2))\n    return result", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.append((a1 + a2, b1 + b2))\n        result.append((a1 + b2, b1 + a2))\n        result.append((b1 + a2, a1 + b2))\n        result.append((b1 + b2, a1 + a2))\n    return list(set(result))", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.add((a1 + a2, b1 + b2))\n        result.add((a1 + b2, b1 + a2))\n        result.add((b1 + a2, a1 + b2))\n        result.add((b1 + b1, a1 + a1))\n    return sorted(result)", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.add((a1 + a2, b1 + b2))\n        result.add((a1 + b2, b1 + a2))\n        result.add((b1 + a2, a1 + b2))\n        result.add((b1 + b1, a1 + a1))\n    return sorted(result)", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.add((a1 + a2, b1 + b2))\n        result.add((a1 + b2, b1 + a2))\n        result.add((b1 + a2, a1 + b2))\n        result.add((b1 + b1, a1 + a1))\n    return sorted(result)", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    results = set()\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        results.add((a1 + a2, b1 + b2))\n        results.add((a1 + b2, b1 + a2))\n        results.add((b1 + a2, a1 + b2))\n        results.add((b1 + b2, a1 + a2))\n    return sorted(results)", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.add((a1 + a2, b1 + b2))\n        result.add((a1 + b2, b1 + a2))\n        result.add((b1 + a2, a1 + b2))\n        result.add((b1 + b2, a1 + a2))\n    return sorted(result)", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for (a, b), (c, d) in combinations(test_list, 2):\n        result.append((a + c, b + d))\n    return result", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.add((a1 + a2, b1 + b2))\n        result.add((a1 + b2, b1 + a2))\n        result.add((b1 + a2, a1 + b2))\n        result.add((b1 + b1, a2 + a2))\n    return sorted(result)", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a, b), (c, d) in combinations(test_list, 2):\n        result.add((a + c, b + d))\n    return sorted(result)", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a, b), (c, d) in combinations(test_list, 2):\n        result.add((a + c, b + d))\n        result.add((a + d, b + c))\n        result.add((a + c, b + b))\n        result.add((a + b, b + d))\n    return sorted(result)"], "clusters": [{"programs_str": ["from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.add((a1 + a2, b1 + b2))\n        result.add((a1 + b2, b1 + a2))\n    return sorted(result)", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a1, a2), (b1, b2) in combinations(test_list, 2):\n        result.add((a1 + b1, a2 + b2))\n        result.add((a1 + b2, a2 + b1))\n    return sorted(result)", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a1, a2), (b1, b2) in combinations(test_list, 2):\n        result.add((a1 + b1, a2 + b2))\n        result.add((a1 + b2, a2 + b1))\n    return sorted(list(result))", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (x1, y1), (x2, y2) in combinations(test_list, 2):\n        result.add((x1 + x2, y1 + y2))\n        result.add((x1 + y2, y1 + x2))\n    return sorted(result)", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.add((a1 + a2, b1 + b2))\n        result.add((a1 + b2, b1 + a2))\n    return sorted(result)"], "outputs": "[[[(3, 9), (7, 5), (7, 12), (8, 11), (8, 14), (9, 10), (11, 8), (11, 11), (12, 10), (12, 17), (15, 7), (16, 13)]], [[(2, 2)]], [[(0, 0)]], [[(40, 60), (50, 50)]], [[(-1, 1), (0, 0)]], [[(6, 11), (8, 9), (9, 8), (11, 9), (12, 5), (13, 7)]], [[(400, 600), (500, 500), (600, 800), (700, 700), (800, 1000), (900, 900)]], [[(4, 6), (5, 5), (6, 8), (7, 7), (8, 10), (9, 9), (10, 12), (11, 11), (12, 14), (13, 13)]], [[(4000, 6000), (5000, 5000), (6000, 8000), (7000, 7000), (8000, 10000), (9000, 9000)]], [[(-9, -10), (-8, -11)]]]", "probability": 0.25, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[(2, 4), (6, 7), (5, 1), (6, 10)]], [[(3, 9), (7, 5), (7, 12), (8, 11), (8, 14), (9, 10), (11, 8), (11, 11), (12, 10), (12, 17), (15, 7), (16, 13)]], [[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]]]]"}, {"programs_str": ["from typing import List, Tuple\nimport itertools\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    combinations = []\n    for (a1, b1), (a2, b2) in itertools.combinations(test_list, 2):\n        combinations.append((a1 + a2, b1 + b2))\n        combinations.append((a1 + b2, b1 + a2))\n    return combinations"], "outputs": "[[[(8, 11), (9, 10), (7, 5), (3, 9), (8, 14), (12, 10), (11, 8), (7, 12), (12, 17), (16, 13), (11, 11), (15, 7)]], [[(2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2)]], [[(0, 0), (0, 0)]], [[(40, 60), (50, 50)]], [[(0, 0), (-1, 1)]], [[(9, 8), (12, 5), (11, 9), (13, 7), (6, 11), (8, 9)]], [[(400, 600), (500, 500), (600, 800), (700, 700), (800, 1000), (900, 900)]], [[(4, 6), (5, 5), (6, 8), (7, 7), (8, 10), (9, 9), (8, 10), (9, 9), (10, 12), (11, 11), (12, 14), (13, 13)]], [[(4000, 6000), (5000, 5000), (6000, 8000), (7000, 7000), (8000, 10000), (9000, 9000)]], [[(-8, -11), (-9, -10)]]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[(2, 4), (6, 7), (5, 1), (6, 10)]], [[(8, 11), (9, 10), (7, 5), (3, 9), (8, 14), (12, 10), (11, 8), (7, 12), (12, 17), (16, 13), (11, 11), (15, 7)]], [[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]]]]"}, {"programs_str": ["from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.append((a1 + a2, b1 + b2))\n        result.append((a1 + b2, b1 + a2))\n        result.append((b1 + a2, a1 + b2))\n        result.append((b1 + b2, a1 + a2))\n    return result", "from typing import List, Tuple\nimport itertools\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    combinations = []\n    for (a1, b1), (a2, b2) in itertools.combinations(test_list, 2):\n        combinations.append((a1 + a2, b1 + b2))\n        combinations.append((a1 + b2, b1 + a2))\n        combinations.append((b1 + a2, a1 + b2))\n        combinations.append((b1 + b2, a1 + a2))\n    return combinations", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.append((a1 + a2, b1 + b2))\n        result.append((a1 + b2, b1 + a2))\n        result.append((b1 + a2, a1 + b2))\n        result.append((b1 + b2, a1 + a2))\n    return result", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.append((a1 + a2, b1 + b2))\n        result.append((a1 + b2, b1 + a2))\n        result.append((b1 + a2, a1 + b2))\n        result.append((b1 + b2, a1 + a2))\n    return result"], "outputs": "[[[(8, 11), (9, 10), (10, 9), (11, 8), (7, 5), (3, 9), (9, 3), (5, 7), (8, 14), (12, 10), (10, 12), (14, 8), (11, 8), (7, 12), (12, 7), (8, 11), (12, 17), (16, 13), (13, 16), (17, 12), (11, 11), (15, 7), (7, 15), (11, 11)]], [[(2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2)]], [[(0, 0), (0, 0), (0, 0), (0, 0)]], [[(40, 60), (50, 50), (50, 50), (60, 40)]], [[(0, 0), (-1, 1), (1, -1), (0, 0)]], [[(9, 8), (12, 5), (5, 12), (8, 9), (11, 9), (13, 7), (7, 13), (9, 11), (6, 11), (8, 9), (9, 8), (11, 6)]], [[(400, 600), (500, 500), (500, 500), (600, 400), (600, 800), (700, 700), (700, 700), (800, 600), (800, 1000), (900, 900), (900, 900), (1000, 800)]], [[(4, 6), (5, 5), (5, 5), (6, 4), (6, 8), (7, 7), (7, 7), (8, 6), (8, 10), (9, 9), (9, 9), (10, 8), (8, 10), (9, 9), (9, 9), (10, 8), (10, 12), (11, 11), (11, 11), (12, 10), (12, 14), (13, 13), (13, 13), (14, 12)]], [[(4000, 6000), (5000, 5000), (5000, 5000), (6000, 4000), (6000, 8000), (7000, 7000), (7000, 7000), (8000, 6000), (8000, 10000), (9000, 9000), (9000, 9000), (10000, 8000)]], [[(-8, -11), (-9, -10), (-10, -9), (-11, -8)]]]", "probability": 0.2, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[(2, 4), (6, 7), (5, 1), (6, 10)]], [[(8, 11), (9, 10), (10, 9), (11, 8), (7, 5), (3, 9), (9, 3), (5, 7), (8, 14), (12, 10), (10, 12), (14, 8), (11, 8), (7, 12), (12, 7), (8, 11), (12, 17), (16, 13), (13, 16), (17, 12), (11, 11), (15, 7), (7, 15), (11, 11)]], [[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]]]]"}, {"programs_str": ["from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.append((a1 + a2, b1 + b2))\n        result.append((a1 + b2, b1 + a2))\n        result.append((b1 + a2, a1 + b2))\n        result.append((b1 + b2, a1 + a2))\n    return list(set(result))"], "outputs": "[[[(12, 7), (12, 10), (5, 7), (17, 12), (10, 9), (11, 8), (10, 12), (11, 11), (16, 13), (3, 9), (8, 11), (9, 10), (8, 14), (13, 16), (15, 7), (7, 12), (7, 15), (14, 8), (12, 17), (9, 3), (7, 5)]], [[(2, 2)]], [[(0, 0)]], [[(40, 60), (50, 50), (60, 40)]], [[(-1, 1), (1, -1), (0, 0)]], [[(13, 7), (6, 11), (9, 11), (11, 9), (7, 13), (11, 6), (8, 9), (9, 8), (12, 5), (5, 12)]], [[(800, 1000), (900, 900), (400, 600), (600, 800), (800, 600), (1000, 800), (500, 500), (700, 700), (600, 400)]], [[(5, 5), (7, 7), (10, 8), (9, 9), (12, 10), (6, 8), (4, 6), (8, 10), (6, 4), (13, 13), (12, 14), (8, 6), (14, 12), (10, 12), (11, 11)]], [[(6000, 4000), (5000, 5000), (8000, 6000), (10000, 8000), (6000, 8000), (9000, 9000), (8000, 10000), (7000, 7000), (4000, 6000)]], [[(-8, -11), (-11, -8), (-10, -9), (-9, -10)]]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[(2, 4), (6, 7), (5, 1), (6, 10)]], [[(12, 7), (12, 10), (5, 7), (17, 12), (10, 9), (11, 8), (10, 12), (11, 11), (16, 13), (3, 9), (8, 11), (9, 10), (8, 14), (13, 16), (15, 7), (7, 12), (7, 15), (14, 8), (12, 17), (9, 3), (7, 5)]], [[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]]]]"}, {"programs_str": ["from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.add((a1 + a2, b1 + b2))\n        result.add((a1 + b2, b1 + a2))\n        result.add((b1 + a2, a1 + b2))\n        result.add((b1 + b1, a1 + a1))\n    return sorted(result)", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.add((a1 + a2, b1 + b2))\n        result.add((a1 + b2, b1 + a2))\n        result.add((b1 + a2, a1 + b2))\n        result.add((b1 + b1, a1 + a1))\n    return sorted(result)", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.add((a1 + a2, b1 + b2))\n        result.add((a1 + b2, b1 + a2))\n        result.add((b1 + a2, a1 + b2))\n        result.add((b1 + b1, a1 + a1))\n    return sorted(result)"], "outputs": "[[[(2, 10), (3, 9), (7, 5), (7, 12), (7, 15), (8, 4), (8, 11), (8, 14), (9, 3), (9, 10), (10, 9), (10, 12), (11, 8), (11, 11), (12, 7), (12, 10), (12, 17), (13, 16), (14, 12), (15, 7), (16, 13)]], [[(2, 2)]], [[(0, 0)]], [[(40, 20), (40, 60), (50, 50)]], [[(-1, 1), (0, 0), (1, -1), (4, 2)]], [[(5, 12), (6, 11), (6, 14), (7, 13), (8, 9), (9, 8), (10, 4), (11, 9), (12, 5), (13, 7)]], [[(400, 200), (400, 600), (500, 500), (600, 800), (700, 700), (800, 600), (800, 1000), (900, 900)]], [[(4, 2), (4, 6), (5, 5), (6, 8), (7, 7), (8, 6), (8, 10), (9, 9), (10, 12), (11, 11), (12, 10), (12, 14), (13, 13)]], [[(4000, 2000), (4000, 6000), (5000, 5000), (6000, 8000), (7000, 7000), (8000, 6000), (8000, 10000), (9000, 9000)]], [[(-10, -9), (-9, -10), (-8, -11), (-8, -4)]]]", "probability": 0.15, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[(2, 4), (6, 7), (5, 1), (6, 10)]], [[(2, 10), (3, 9), (7, 5), (7, 12), (7, 15), (8, 4), (8, 11), (8, 14), (9, 3), (9, 10), (10, 9), (10, 12), (11, 8), (11, 11), (12, 7), (12, 10), (12, 17), (13, 16), (14, 12), (15, 7), (16, 13)]], [[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]]]]"}, {"programs_str": ["from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    results = set()\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        results.add((a1 + a2, b1 + b2))\n        results.add((a1 + b2, b1 + a2))\n        results.add((b1 + a2, a1 + b2))\n        results.add((b1 + b2, a1 + a2))\n    return sorted(results)", "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.add((a1 + a2, b1 + b2))\n        result.add((a1 + b2, b1 + a2))\n        result.add((b1 + a2, a1 + b2))\n        result.add((b1 + b2, a1 + a2))\n    return sorted(result)"], "outputs": "[[[(3, 9), (5, 7), (7, 5), (7, 12), (7, 15), (8, 11), (8, 14), (9, 3), (9, 10), (10, 9), (10, 12), (11, 8), (11, 11), (12, 7), (12, 10), (12, 17), (13, 16), (14, 8), (15, 7), (16, 13), (17, 12)]], [[(2, 2)]], [[(0, 0)]], [[(40, 60), (50, 50), (60, 40)]], [[(-1, 1), (0, 0), (1, -1)]], [[(5, 12), (6, 11), (7, 13), (8, 9), (9, 8), (9, 11), (11, 6), (11, 9), (12, 5), (13, 7)]], [[(400, 600), (500, 500), (600, 400), (600, 800), (700, 700), (800, 600), (800, 1000), (900, 900), (1000, 800)]], [[(4, 6), (5, 5), (6, 4), (6, 8), (7, 7), (8, 6), (8, 10), (9, 9), (10, 8), (10, 12), (11, 11), (12, 10), (12, 14), (13, 13), (14, 12)]], [[(4000, 6000), (5000, 5000), (6000, 4000), (6000, 8000), (7000, 7000), (8000, 6000), (8000, 10000), (9000, 9000), (10000, 8000)]], [[(-11, -8), (-10, -9), (-9, -10), (-8, -11)]]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[(2, 4), (6, 7), (5, 1), (6, 10)]], [[(3, 9), (5, 7), (7, 5), (7, 12), (7, 15), (8, 11), (8, 14), (9, 3), (9, 10), (10, 9), (10, 12), (11, 8), (11, 11), (12, 7), (12, 10), (12, 17), (13, 16), (14, 8), (15, 7), (16, 13), (17, 12)]], [[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]]]]"}, {"programs_str": ["from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for (a, b), (c, d) in combinations(test_list, 2):\n        result.append((a + c, b + d))\n    return result"], "outputs": "[[[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]], [[(2, 2), (2, 2), (2, 2)]], [[(0, 0)]], [[(40, 60)]], [[(0, 0)]], [[(9, 8), (11, 9), (6, 11)]], [[(400, 600), (600, 800), (800, 1000)]], [[(4, 6), (6, 8), (8, 10), (8, 10), (10, 12), (12, 14)]], [[(4000, 6000), (6000, 8000), (8000, 10000)]], [[(-8, -11)]]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a1, b1), (a2, b2) in combinations(test_list, 2):\n        result.add((a1 + a2, b1 + b2))\n        result.add((a1 + b2, b1 + a2))\n        result.add((b1 + a2, a1 + b2))\n        result.add((b1 + b1, a2 + a2))\n    return sorted(result)"], "outputs": "[[[(2, 12), (3, 9), (7, 5), (7, 12), (7, 15), (8, 10), (8, 11), (8, 12), (8, 14), (9, 3), (9, 10), (10, 9), (10, 12), (11, 8), (11, 11), (12, 7), (12, 10), (12, 17), (13, 16), (14, 10), (14, 12), (15, 7), (16, 13)]], [[(2, 2)]], [[(0, 0)]], [[(40, 60), (50, 50)]], [[(-1, 1), (0, 0), (1, -1), (4, -2)]], [[(5, 12), (6, 4), (6, 8), (6, 11), (7, 13), (8, 9), (9, 8), (10, 8), (11, 9), (12, 5), (13, 7)]], [[(400, 600), (400, 1000), (500, 500), (600, 800), (700, 700), (800, 1000), (900, 900)]], [[(4, 6), (4, 10), (4, 14), (5, 5), (6, 8), (7, 7), (8, 10), (8, 14), (9, 9), (10, 12), (11, 11), (12, 14), (13, 13)]], [[(4000, 6000), (4000, 10000), (5000, 5000), (6000, 8000), (7000, 7000), (8000, 10000), (9000, 9000)]], [[(-10, -9), (-9, -10), (-8, -12), (-8, -11)]]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[(2, 4), (6, 7), (5, 1), (6, 10)]], [[(2, 12), (3, 9), (7, 5), (7, 12), (7, 15), (8, 10), (8, 11), (8, 12), (8, 14), (9, 3), (9, 10), (10, 9), (10, 12), (11, 8), (11, 11), (12, 7), (12, 10), (12, 17), (13, 16), (14, 10), (14, 12), (15, 7), (16, 13)]], [[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]]]]"}, {"programs_str": ["from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a, b), (c, d) in combinations(test_list, 2):\n        result.add((a + c, b + d))\n    return sorted(result)"], "outputs": "[[[(7, 5), (8, 11), (8, 14), (11, 8), (11, 11), (12, 17)]], [[(2, 2)]], [[(0, 0)]], [[(40, 60)]], [[(0, 0)]], [[(6, 11), (9, 8), (11, 9)]], [[(400, 600), (600, 800), (800, 1000)]], [[(4, 6), (6, 8), (8, 10), (10, 12), (12, 14)]], [[(4000, 6000), (6000, 8000), (8000, 10000)]], [[(-8, -11)]]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[(2, 4), (6, 7), (5, 1), (6, 10)]], [[(7, 5), (8, 11), (8, 14), (11, 8), (11, 11), (12, 17)]], [[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]]]]"}, {"programs_str": ["from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = set()\n    for (a, b), (c, d) in combinations(test_list, 2):\n        result.add((a + c, b + d))\n        result.add((a + d, b + c))\n        result.add((a + c, b + b))\n        result.add((a + b, b + d))\n    return sorted(result)"], "outputs": "[[[(3, 9), (6, 5), (6, 11), (6, 14), (7, 5), (7, 8), (7, 12), (8, 8), (8, 11), (8, 14), (9, 10), (11, 2), (11, 8), (11, 11), (11, 14), (12, 10), (12, 14), (12, 17), (13, 8), (13, 17), (15, 7), (16, 13)]], [[(2, 2)]], [[(0, 0)]], [[(30, 60), (40, 40), (40, 60), (50, 50)]], [[(-1, 1), (0, 0), (0, 4), (3, 0)]], [[(6, 10), (6, 11), (7, 11), (8, 9), (9, 6), (9, 8), (10, 8), (10, 9), (11, 6), (11, 9), (12, 5), (13, 7)]], [[(300, 600), (300, 800), (400, 400), (400, 600), (500, 500), (600, 400), (600, 800), (700, 700), (700, 1000), (800, 800), (800, 1000), (900, 900)]], [[(3, 6), (3, 8), (3, 10), (4, 4), (4, 6), (5, 5), (6, 4), (6, 8), (7, 7), (7, 10), (7, 12), (8, 4), (8, 8), (8, 10), (9, 9), (10, 8), (10, 12), (11, 11), (11, 14), (12, 12), (12, 14), (13, 13)]], [[(3000, 6000), (3000, 8000), (4000, 4000), (4000, 6000), (5000, 5000), (6000, 4000), (6000, 8000), (7000, 7000), (7000, 10000), (8000, 8000), (8000, 10000), (9000, 9000)]], [[(-9, -10), (-8, -11), (-8, -8), (-6, -11)]]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[(2, 4), (6, 7), (5, 1), (6, 10)]], [[(3, 9), (6, 5), (6, 11), (6, 14), (7, 5), (7, 8), (7, 12), (8, 8), (8, 11), (8, 14), (9, 10), (11, 2), (11, 8), (11, 11), (11, 14), (12, 10), (12, 14), (12, 17), (13, 8), (13, 17), (15, 7), (16, 13)]], [[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]]]]"}]}
{"task_id": "Mbpp/781", "requirement": "def count_divisors(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the count of divisors is even. \nassert count_divisors(10)\n\"\"\"", "llm_generated_inputs": "[[1], [2], [3], [4], [10], [12], [15], [16], [25], [36], [100], [0], [-5], [-10]]", "programs": ["def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    divisor_count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count % 2 == 0", "def count_divisors(n: int) -> bool:\n    divisors_count = sum((1 for i in range(1, n + 1) if n % i == 0))\n    return divisors_count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count % 2 == 0"], "clusters": [{"programs_str": ["def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    divisor_count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count % 2 == 0", "def count_divisors(n: int) -> bool:\n    divisors_count = sum((1 for i in range(1, n + 1) if n % i == 0))\n    return divisors_count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"], "outputs": "[[False], [True], [True], [False], [True], [True], [True], [False], [False], [False], [False], [True], [True], [True]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count % 2 == 0"], "outputs": "[[False], [True], [True], [False], [True], [True], [True], [False], [False], [False], [False], [True], ['TypeError'], ['TypeError']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/782", "requirement": "from typing import List\n\n\ndef odd_length_sum(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of all odd length subarrays. \nassert odd_length_sum([1,2,4]) == 14\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 4]], [[1, 3, 5, 7]], [[2, 4, 6, 8, 10]], [[5]], [[]], [[10, 20, 30, 40, 50, 60, 70]], [[1, 2, 3, 4, 5]], [[0, 0, 0, 0]]]", "programs": ["from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            subarray = arr[start:start + length]\n            total_sum += sum(subarray)\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            subarray_sum = sum(arr[start:start + length])\n            total_sum += subarray_sum\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for start in range(n):\n        for end in range(start + 1, n + 1):\n            if (end - start) % 2 == 1:\n                total_sum += sum(arr[start:end])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            subarray = arr[start:start + length]\n            total_sum += sum(subarray)\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            subarray_sum = sum(arr[start:start + length])\n            total_sum += subarray_sum\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum"], "clusters": [{"programs_str": ["from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            subarray = arr[start:start + length]\n            total_sum += sum(subarray)\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            subarray_sum = sum(arr[start:start + length])\n            total_sum += subarray_sum\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for start in range(n):\n        for end in range(start + 1, n + 1):\n            if (end - start) % 2 == 1:\n                total_sum += sum(arr[start:end])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            subarray = arr[start:start + length]\n            total_sum += sum(subarray)\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            subarray_sum = sum(arr[start:start + length])\n            total_sum += subarray_sum\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum"], "outputs": "[[14], [40], [114], [5], [0], [1760], [57], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/784", "requirement": "from typing import List\n\n\ndef mul_even_odd(list1: List[int]) -> int:\n\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"", "llm_generated_inputs": "[[[1, 3, 5, 7, 4, 1, 6, 8]], [[2, 4, 6, 8, 1, 3, 5]], [[1, 1, 1, 1, 1]], [[2, 2, 2, 2, 2]], [[0, 1, 3, 5, 9]], [[1, 2, 3]], [[4, 6, 8, 10]], [[-2, -4, -6, 1, 3]], [[5]], [[8]], [[1, 3]]]", "programs": ["from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for number in list1:\n        if number % 2 == 0 and even is None:\n            even = number\n        if number % 2 != 0 and odd is None:\n            odd = number\n        if even is not None and odd is not None:\n            break\n    return even * odd if even is not None and odd is not None else 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0), None)\n    odd = next((x for x in list1 if x % 2 != 0), None)\n    if even is not None and odd is not None:\n        return even * odd\n    return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd if even is not None and odd is not None else 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        if num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is not None and odd is not None:\n        return even * odd\n    return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even_num = next((num for num in list1 if num % 2 == 0), None)\n    odd_num = next((num for num in list1 if num % 2 != 0), None)\n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        if num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even * first_odd if first_even is not None and first_odd is not None else 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd if even is not None and odd is not None else 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0), None)\n    odd = next((x for x in list1 if x % 2 != 0), None)\n    if even is not None and odd is not None:\n        return even * odd\n    return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is not None and odd is not None:\n        return even * odd\n    return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is not None and odd is not None:\n        return even * odd\n    return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for number in list1:\n        if number % 2 == 0 and even is None:\n            even = number\n        elif number % 2 != 0 and odd is None:\n            odd = number\n        if even is not None and odd is not None:\n            break\n    return even * odd if even is not None and odd is not None else 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is not None and odd is not None:\n        return even * odd\n    return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0), None)\n    odd = next((x for x in list1 if x % 2 != 0), None)\n    if even is not None and odd is not None:\n        return even * odd\n    return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = next((num for num in list1 if num % 2 == 0), None)\n    odd = next((num for num in list1 if num % 2 != 0), None)\n    if even is not None and odd is not None:\n        return even * odd\n    return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even * first_odd if first_even is not None and first_odd is not None else 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        if num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even * first_odd if first_even is not None and first_odd is not None else 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        if num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd if even is not None and odd is not None else 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    else:\n        raise ValueError('The list must contain at least one even and one odd number.')"], "clusters": [{"programs_str": ["from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for number in list1:\n        if number % 2 == 0 and even is None:\n            even = number\n        if number % 2 != 0 and odd is None:\n            odd = number\n        if even is not None and odd is not None:\n            break\n    return even * odd if even is not None and odd is not None else 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0), None)\n    odd = next((x for x in list1 if x % 2 != 0), None)\n    if even is not None and odd is not None:\n        return even * odd\n    return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd if even is not None and odd is not None else 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        if num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is not None and odd is not None:\n        return even * odd\n    return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even_num = next((num for num in list1 if num % 2 == 0), None)\n    odd_num = next((num for num in list1 if num % 2 != 0), None)\n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        if num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even * first_odd if first_even is not None and first_odd is not None else 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd if even is not None and odd is not None else 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0), None)\n    odd = next((x for x in list1 if x % 2 != 0), None)\n    if even is not None and odd is not None:\n        return even * odd\n    return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is not None and odd is not None:\n        return even * odd\n    return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is not None and odd is not None:\n        return even * odd\n    return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for number in list1:\n        if number % 2 == 0 and even is None:\n            even = number\n        elif number % 2 != 0 and odd is None:\n            odd = number\n        if even is not None and odd is not None:\n            break\n    return even * odd if even is not None and odd is not None else 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is not None and odd is not None:\n        return even * odd\n    return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0), None)\n    odd = next((x for x in list1 if x % 2 != 0), None)\n    if even is not None and odd is not None:\n        return even * odd\n    return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = next((num for num in list1 if num % 2 == 0), None)\n    odd = next((num for num in list1 if num % 2 != 0), None)\n    if even is not None and odd is not None:\n        return even * odd\n    return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        return 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even * first_odd if first_even is not None and first_odd is not None else 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        if num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even * first_odd if first_even is not None and first_odd is not None else 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        if num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd if even is not None and odd is not None else 0"], "outputs": "[[4], [2], [0], [0], [0], [2], [0], [-2], [0], [0], [0]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    else:\n        raise ValueError('The list must contain at least one even and one odd number.')"], "outputs": "[[4], [2], ['ValueError'], ['ValueError'], [0], [2], ['ValueError'], [-2], ['ValueError'], ['ValueError'], ['ValueError']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/785", "requirement": "def tuple_str_int(test_str: str) -> tuple:\n\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"", "llm_generated_inputs": "[['(1, 2, 3)'], ['(0, 0, 0)'], ['(10, -5, 3)'], ['(-1, -2, -3)'], ['(5,)'], ['(42, 13, 77, 99)'], ['(3, 1, 4, 1, 5, 9, 2)'], ['(7, 8, 9)'], ['(10, 20)'], ['(100, 200, 300)'], ['()']]", "programs": ["def tuple_str_int(test_str: str) -> tuple:\n    import ast\n    return tuple(ast.literal_eval(test_str))", "def tuple_str_int(test_str: str) -> tuple:\n    import ast\n    return tuple(ast.literal_eval(test_str))", "def tuple_str_int(test_str: str) -> tuple:\n    import ast\n    return tuple(ast.literal_eval(test_str))", "def tuple_str_int(test_str: str) -> tuple:\n    import ast\n    return tuple(ast.literal_eval(test_str))", "def tuple_str_int(test_str: str) -> tuple:\n    import ast\n    return tuple(ast.literal_eval(test_str))", "def tuple_str_int(test_str: str) -> tuple:\n    import ast\n    return tuple(ast.literal_eval(test_str))", "def tuple_str_int(test_str: str) -> tuple:\n    import ast\n    return tuple(ast.literal_eval(test_str))", "def tuple_str_int(test_str: str) -> tuple:\n    import ast\n    return tuple(ast.literal_eval(test_str))", "def tuple_str_int(test_str: str) -> tuple:\n    import ast\n    return tuple(ast.literal_eval(test_str))", "def tuple_str_int(test_str: str) -> tuple:\n    import ast\n    return tuple(ast.literal_eval(test_str))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(',')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(',')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(',')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(',')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(', ')))"], "clusters": [{"programs_str": ["def tuple_str_int(test_str: str) -> tuple:\n    import ast\n    return tuple(ast.literal_eval(test_str))", "def tuple_str_int(test_str: str) -> tuple:\n    import ast\n    return tuple(ast.literal_eval(test_str))", "def tuple_str_int(test_str: str) -> tuple:\n    import ast\n    return tuple(ast.literal_eval(test_str))", "def tuple_str_int(test_str: str) -> tuple:\n    import ast\n    return tuple(ast.literal_eval(test_str))", "def tuple_str_int(test_str: str) -> tuple:\n    import ast\n    return tuple(ast.literal_eval(test_str))", "def tuple_str_int(test_str: str) -> tuple:\n    import ast\n    return tuple(ast.literal_eval(test_str))", "def tuple_str_int(test_str: str) -> tuple:\n    import ast\n    return tuple(ast.literal_eval(test_str))", "def tuple_str_int(test_str: str) -> tuple:\n    import ast\n    return tuple(ast.literal_eval(test_str))", "def tuple_str_int(test_str: str) -> tuple:\n    import ast\n    return tuple(ast.literal_eval(test_str))", "def tuple_str_int(test_str: str) -> tuple:\n    import ast\n    return tuple(ast.literal_eval(test_str))"], "outputs": "[[(1, 2, 3)], [(0, 0, 0)], [(10, -5, 3)], [(-1, -2, -3)], [(5,)], [(42, 13, 77, 99)], [(3, 1, 4, 1, 5, 9, 2)], [(7, 8, 9)], [(10, 20)], [(100, 200, 300)], [()]]", "probability": 0.5, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(',')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(',')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(',')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(',')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(', ')))"], "outputs": "[[(1, 2, 3)], [(0, 0, 0)], [(10, -5, 3)], [(-1, -2, -3)], ['ValueError'], [(42, 13, 77, 99)], [(3, 1, 4, 1, 5, 9, 2)], [(7, 8, 9)], [(10, 20)], [(100, 200, 300)], ['ValueError']]", "probability": 0.5, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/786", "requirement": "def right_insertion(a: list, x: int) -> int:\n\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 4, 5], 6], [[1, 2, 4, 5], 0], [[1, 2, 4, 5], 3], [[1, 2, 4, 5], 1], [[1, 2, 4, 5], 5], [[], 3], [[1], 0], [[1], 2], [[1, 3, 5, 7], 4], [[2, 2, 2, 2], 2]]", "programs": ["def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    import bisect\n    return bisect.bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "from typing import List\n\ndef right_insertion(a: List[int], x: int) -> int:\n    left, right = (0, len(a))\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid\n    return left", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "from typing import List\n\ndef right_insertion(a: List[int], x: int) -> int:\n    left, right = (0, len(a))\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid\n    return left", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "from typing import List\n\ndef right_insertion(a: List[int], x: int) -> int:\n    left, right = (0, len(a))\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"], "clusters": [{"programs_str": ["def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    import bisect\n    return bisect.bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "from typing import List\n\ndef right_insertion(a: List[int], x: int) -> int:\n    left, right = (0, len(a))\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid\n    return left", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "from typing import List\n\ndef right_insertion(a: List[int], x: int) -> int:\n    left, right = (0, len(a))\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid\n    return left", "def right_insertion(a: list, x: int) -> int:\n    from bisect import bisect_right\n    return bisect_right(a, x)", "from typing import List\n\ndef right_insertion(a: List[int], x: int) -> int:\n    left, right = (0, len(a))\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"], "outputs": "[[4], [0], [2], [1], [4], [0], [0], [1], [2], [4]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/787", "requirement": "def text_match_three(text: str) -> re.Match:\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"", "llm_generated_inputs": "[['abbb'], ['abbbb'], ['ac'], ['aabbb'], ['abbba'], ['abababbbb'], ['abb'], ['abbbbba'], ['bbb'], ['a bbb']]", "programs": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a[0-9]?b{3}'\n    match = re.fullmatch(pattern, text)\n    return match", "import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(b{3})'\n    return re.fullmatch(pattern, text)", "import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(?:b{3})'\n    return re.fullmatch(pattern, text)", "import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a[b]{3}'\n    return re.match(pattern, text)", "import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(b{3})'\n    return re.fullmatch(pattern, text)", "import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a b{3}'\n    return re.fullmatch(pattern, text)", "import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a[b]{3}'\n    return re.fullmatch(pattern, text)", "import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(b{3})'\n    return re.fullmatch(pattern, text)", "import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(b{3})'\n    return re.fullmatch(pattern, text)", "import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a{1}b{3}'\n    return re.fullmatch(pattern, text)", "import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(b{3})'\n    return re.fullmatch(pattern, text)", "import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a[b]{3}'\n    return re.fullmatch(pattern, text)", "import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a[b]{3}'\n    return re.fullmatch(pattern, text)", "import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(b{3})'\n    return re.match(pattern, text)", "import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(b{3})'\n    return re.fullmatch(pattern, text)", "import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'abb'\n    return re.fullmatch(pattern, text)", "import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a-b{3}'\n    return re.match(pattern, text)", "import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(b{3})'\n    return re.fullmatch(pattern, text)", "import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a b{3}'\n    return re.fullmatch(pattern, text)", "import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(b{3})'\n    return re.fullmatch(pattern, text)"], "clusters": [{"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a[0-9]?b{3}'\n    match = re.fullmatch(pattern, text)\n    return match"], "outputs": "[[<re.Match object; span=(0, 4), match='abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(b{3})'\n    return re.fullmatch(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match='abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(?:b{3})'\n    return re.fullmatch(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match='abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a[b]{3}'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match='abbb'>], [<re.Match object; span=(0, 4), match='abbb'>], [None], [None], [<re.Match object; span=(0, 4), match='abbb'>], [None], [None], [<re.Match object; span=(0, 4), match='abbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(b{3})'\n    return re.fullmatch(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match='abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a b{3}'\n    return re.fullmatch(pattern, text)"], "outputs": "[[None], [None], [None], [None], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 5), match='a bbb'>]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a[b]{3}'\n    return re.fullmatch(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match='abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(b{3})'\n    return re.fullmatch(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match='abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(b{3})'\n    return re.fullmatch(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match='abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a{1}b{3}'\n    return re.fullmatch(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match='abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(b{3})'\n    return re.fullmatch(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match='abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a[b]{3}'\n    return re.fullmatch(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match='abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a[b]{3}'\n    return re.fullmatch(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match='abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(b{3})'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match='abbb'>], [<re.Match object; span=(0, 4), match='abbb'>], [None], [None], [<re.Match object; span=(0, 4), match='abbb'>], [None], [None], [<re.Match object; span=(0, 4), match='abbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(b{3})'\n    return re.fullmatch(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match='abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'abb'\n    return re.fullmatch(pattern, text)"], "outputs": "[[None], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a-b{3}'\n    return re.match(pattern, text)"], "outputs": "[[None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(b{3})'\n    return re.fullmatch(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match='abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a b{3}'\n    return re.fullmatch(pattern, text)"], "outputs": "[[None], [None], [None], [None], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 5), match='a bbb'>]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(b{3})'\n    return re.fullmatch(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match='abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/788", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"", "llm_generated_inputs": "[[['WEB', 'is'], 'best'], [[], 'empty'], [['single'], 'item'], [['A', 'B', 'C'], 'D'], [['Hello', 'World'], ''], [['item1', 'item2', 'item3'], 'name']]", "programs": ["from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Any, Tuple\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)"], "clusters": [{"programs_str": ["from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Any, Tuple\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)"], "outputs": "[[('WEB', 'is', 'best')], [('empty',)], [('single', 'item')], [('A', 'B', 'C', 'D')], [('Hello', 'World', '')], [('item1', 'item2', 'item3', 'name')]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/790", "requirement": "from typing import List\n\n\ndef even_position(nums: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"", "llm_generated_inputs": "[[[2, 1, 4, 3]], [[2, 4, 6, 8]], [[1, 2, 3, 4, 5]], [[0, 1, 2, 3, 4, 5]], [[]], [[4]], [[4, 2, 6, 8, 10]], [[3, 2, 1]]]", "programs": ["from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((num % 2 == 0 for i, num in enumerate(nums) if i % 2 == 0))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((num % 2 == 0 for i, num in enumerate(nums) if i % 2 == 0))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((num % 2 == 0 for i, num in enumerate(nums) if i % 2 == 0))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for index in range(0, len(nums), 2):\n        if nums[index] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for index in range(0, len(nums), 2):\n        if nums[index] % 2 != 0:\n            return False\n    return True"], "clusters": [{"programs_str": ["from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((num % 2 == 0 for i, num in enumerate(nums) if i % 2 == 0))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((num % 2 == 0 for i, num in enumerate(nums) if i % 2 == 0))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((num % 2 == 0 for i, num in enumerate(nums) if i % 2 == 0))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for index in range(0, len(nums), 2):\n        if nums[index] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for index in range(0, len(nums), 2):\n        if nums[index] % 2 != 0:\n            return False\n    return True"], "outputs": "[[True], [True], [False], [True], [True], [True], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/791", "requirement": "def remove_nested(test_tup: tuple) -> tuple:\n\"\"\"\nWrite a function to remove tuples from the given tuple.\n\n\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"", "llm_generated_inputs": "[[(1, 5, 7, (4, 6), 10)], [((2, 3), (4, 5, (6, 7)), 8, 9)], [(1, 2, (3, 4), (5, (6, 7)), 8)], [(10, 20, (30, (40, 50)), 60)], [((1, 2, 3), (4, 5, 6))], [((), (1, 2), (3, (4,)))], [(((), ()), ((1, 2), (3,)))]]", "programs": ["def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((x for x in test_tup if not isinstance(x, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((x for x in test_tup if not isinstance(x, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((x for x in test_tup if not isinstance(x, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((x for x in test_tup if not isinstance(x, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((x for x in test_tup if not isinstance(x, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((elem for elem in test_tup if not isinstance(elem, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((x for x in test_tup if not isinstance(x, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((x for x in test_tup if not isinstance(x, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((x for x in test_tup if not isinstance(x, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))"], "clusters": [{"programs_str": ["def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((x for x in test_tup if not isinstance(x, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((x for x in test_tup if not isinstance(x, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((x for x in test_tup if not isinstance(x, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((x for x in test_tup if not isinstance(x, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((x for x in test_tup if not isinstance(x, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((elem for elem in test_tup if not isinstance(elem, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((x for x in test_tup if not isinstance(x, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((x for x in test_tup if not isinstance(x, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((x for x in test_tup if not isinstance(x, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))"], "outputs": "[[(1, 5, 7, 10)], [(8, 9)], [(1, 2, 8)], [(10, 20, 60)], [()], [()], [()]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/792", "requirement": "from typing import List\n\n\ndef count_list(input_list: List[Any]) -> int:\n\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"", "llm_generated_inputs": "[[[[1, 2], [3, 4, 5], [6]]], [[[42], [], [1, 2, 3, 4]]], [[[], [], []]], [[[1], [2], [3], [4], [5]]], [[[5, 6]]], [[]], [[[None], [None, None], [None, None, None]]], [[[True], [False], [True, False]]], [[[1, 2], [3, 4], [5, 6], [7, 8]]]]", "programs": ["from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)"], "clusters": [{"programs_str": ["from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return len(input_list)"], "outputs": "[[3], [3], [3], [5], [1], [0], [3], [3], [4]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/793", "requirement": "from typing import List\n\n\ndef last(arr: List[int], x: int) -> int:\n\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3], 1], [[1, 2, 3, 4, 5, 5], 5], [[1, 2, 2, 3], 2], [[10, 20, 30, 40, 50], 60], [[], 1], [[1], 1], [[2, 2, 2, 2], 2], [[5, 5, 5, 5, 6], 5]]", "programs": ["from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    last_position = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            last_position = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return last_position"], "clusters": [{"programs_str": ["from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    last_position = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            last_position = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return last_position"], "outputs": "[[0], [5], [2], [-1], [-1], [0], [3], [3]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/794", "requirement": "def text_starta_endb(text: str) -> re.Match:\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"", "llm_generated_inputs": "[['aabbbb'], ['ab'], ['a123b'], ['a___b'], ['acdb'], ['baba'], ['1ab'], ['ab123'], ['anexampleb'], ['AandB']]", "programs": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)", "import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)", "import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)", "import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    match = re.match(pattern, text)\n    return match", "import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)", "import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)", "import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)", "import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)", "import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)", "import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)", "import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)", "import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)", "import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)", "import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)", "import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)", "import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)", "import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)", "import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)", "import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)", "import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    if re.match(pattern, text):\n        return re.match(pattern, text)\n    return None"], "clusters": [{"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 6), match='aabbbb'>], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 5), match='a___b'>], [<re.Match object; span=(0, 4), match='acdb'>], [None], [None], [None], [<re.Match object; span=(0, 10), match='anexampleb'>], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match='aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 6), match='aabbbb'>], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 5), match='a___b'>], [<re.Match object; span=(0, 4), match='acdb'>], [None], [None], [None], [<re.Match object; span=(0, 10), match='anexampleb'>], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match='aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 6), match='aabbbb'>], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 5), match='a___b'>], [<re.Match object; span=(0, 4), match='acdb'>], [None], [None], [None], [<re.Match object; span=(0, 10), match='anexampleb'>], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match='aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    match = re.match(pattern, text)\n    return match"], "outputs": "[[<re.Match object; span=(0, 6), match='aabbbb'>], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 5), match='a___b'>], [<re.Match object; span=(0, 4), match='acdb'>], [None], [None], [None], [<re.Match object; span=(0, 10), match='anexampleb'>], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match='aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 6), match='aabbbb'>], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 5), match='a___b'>], [<re.Match object; span=(0, 4), match='acdb'>], [None], [None], [None], [<re.Match object; span=(0, 10), match='anexampleb'>], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match='aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 6), match='aabbbb'>], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 5), match='a___b'>], [<re.Match object; span=(0, 4), match='acdb'>], [None], [None], [None], [<re.Match object; span=(0, 10), match='anexampleb'>], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match='aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 6), match='aabbbb'>], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 5), match='a___b'>], [<re.Match object; span=(0, 4), match='acdb'>], [None], [None], [None], [<re.Match object; span=(0, 10), match='anexampleb'>], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match='aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 6), match='aabbbb'>], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 5), match='a___b'>], [<re.Match object; span=(0, 4), match='acdb'>], [None], [None], [None], [<re.Match object; span=(0, 10), match='anexampleb'>], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match='aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 6), match='aabbbb'>], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 5), match='a___b'>], [<re.Match object; span=(0, 4), match='acdb'>], [None], [None], [None], [<re.Match object; span=(0, 10), match='anexampleb'>], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match='aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 6), match='aabbbb'>], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 5), match='a___b'>], [<re.Match object; span=(0, 4), match='acdb'>], [None], [None], [None], [<re.Match object; span=(0, 10), match='anexampleb'>], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match='aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 6), match='aabbbb'>], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 5), match='a___b'>], [<re.Match object; span=(0, 4), match='acdb'>], [None], [None], [None], [<re.Match object; span=(0, 10), match='anexampleb'>], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match='aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 6), match='aabbbb'>], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 5), match='a___b'>], [<re.Match object; span=(0, 4), match='acdb'>], [None], [None], [None], [<re.Match object; span=(0, 10), match='anexampleb'>], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match='aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 6), match='aabbbb'>], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 5), match='a___b'>], [<re.Match object; span=(0, 4), match='acdb'>], [None], [None], [None], [<re.Match object; span=(0, 10), match='anexampleb'>], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match='aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 6), match='aabbbb'>], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 5), match='a___b'>], [<re.Match object; span=(0, 4), match='acdb'>], [None], [None], [None], [<re.Match object; span=(0, 10), match='anexampleb'>], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match='aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 6), match='aabbbb'>], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 5), match='a___b'>], [<re.Match object; span=(0, 4), match='acdb'>], [None], [None], [None], [<re.Match object; span=(0, 10), match='anexampleb'>], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match='aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 6), match='aabbbb'>], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 5), match='a___b'>], [<re.Match object; span=(0, 4), match='acdb'>], [None], [None], [None], [<re.Match object; span=(0, 10), match='anexampleb'>], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match='aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 6), match='aabbbb'>], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 5), match='a___b'>], [<re.Match object; span=(0, 4), match='acdb'>], [None], [None], [None], [<re.Match object; span=(0, 10), match='anexampleb'>], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match='aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 6), match='aabbbb'>], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 5), match='a___b'>], [<re.Match object; span=(0, 4), match='acdb'>], [None], [None], [None], [<re.Match object; span=(0, 10), match='anexampleb'>], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match='aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 6), match='aabbbb'>], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 5), match='a___b'>], [<re.Match object; span=(0, 4), match='acdb'>], [None], [None], [None], [<re.Match object; span=(0, 10), match='anexampleb'>], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match='aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    if re.match(pattern, text):\n        return re.match(pattern, text)\n    return None"], "outputs": "[[<re.Match object; span=(0, 6), match='aabbbb'>], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 5), match='a___b'>], [<re.Match object; span=(0, 4), match='acdb'>], [None], [None], [None], [<re.Match object; span=(0, 10), match='anexampleb'>], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match='aabbbb'>], [None]]]"}]}
{"task_id": "Mbpp/796", "requirement": "def return_sum(d: dict) -> int:\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"", "llm_generated_inputs": "[[{'a': 100, 'b': 200, 'c': 300}], [{'x': 1, 'y': 2, 'z': 3}], [{}], [{'key1': 0, 'key2': 0}], [{'alpha': 123, 'beta': -123}], [{'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5}], [{'float': 1.5, 'integer': 2}]]", "programs": ["def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())"], "clusters": [{"programs_str": ["def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())"], "outputs": "[[600], [6], [0], [0], [0], [15], [3.5]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/797", "requirement": "def sum_in_range(l: int, r: int) -> int:\n\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"", "llm_generated_inputs": "[[1, 10], [2, 5], [0, 0], [-5, 5], [3, 7], [10, 20], [15, 15], [7, 7]]", "programs": ["def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((num for num in range(l, r + 1) if num % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((x for x in range(l, r + 1) if x % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))"], "clusters": [{"programs_str": ["def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((num for num in range(l, r + 1) if num % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((x for x in range(l, r + 1) if x % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))"], "outputs": "[[25], [8], [0], [0], [15], [75], [15], [7]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/798", "requirement": "from typing import List\n\n\ndef _sum(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"", "llm_generated_inputs": "[[[1, 2, 3]], [[0, 0, 0]], [[100, -50, -50]], [[-1, -2, -3]], [[5]], [[]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[-1, 1]]]", "programs": ["from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)"], "clusters": [{"programs_str": ["from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)"], "outputs": "[[6], [0], [0], [-6], [5], [0], [55], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/799", "requirement": "def left_rotate(n: int, d: int) -> int:\n\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64\n\"\"\"", "llm_generated_inputs": "[[16, 2], [1, 1], [0, 5], [15, 4], [32, 3], [2147483648, 1], [4294967295, 1], [7, 7]]", "programs": ["def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d | n >> 32 - d", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d | n >> 32 - d", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d | n >> 32 - d & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    return n << d | n >> 32 - d & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d | n >> 32 - d & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d | n >> 32 - d", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d | n >> 32 - d", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d | n >> 32 - d", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d | n >> 32 - d", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d | n >> 32 - d", "def left_rotate(n: int, d: int) -> int:\n    return n << d | n >> 32 - d & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d | n >> 32 - d & 4294967295"], "clusters": [{"programs_str": ["def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return (n << d | n >> 32 - d) & 4294967295"], "outputs": "[[64], [2], [0], [240], [256], [1], [4294967295], [896]]", "probability": 0.4, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d | n >> 32 - d", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d | n >> 32 - d", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d | n >> 32 - d & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    return n << d | n >> 32 - d & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d | n >> 32 - d & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d | n >> 32 - d", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d | n >> 32 - d", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d | n >> 32 - d", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d | n >> 32 - d", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d | n >> 32 - d", "def left_rotate(n: int, d: int) -> int:\n    return n << d | n >> 32 - d & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d | n >> 32 - d & 4294967295"], "outputs": "[[64], [2], [0], [240], [256], [4294967297], [8589934591], [896]]", "probability": 0.6, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/800", "requirement": "def remove_all_spaces(text: str) -> str:\n\"\"\"\nWrite a function to remove all whitespaces from a string.\n\n\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"", "llm_generated_inputs": "[['python  program'], ['   leading and trailing spaces   '], ['noSpacesHere'], ['multiple    spaces    between    words'], [''], ['single_space '], ['   '], ['\\tThis should also\\tremove tabs'], ['New\\nLine\\testing'], ['a b c d e f g']]", "programs": ["def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return ''.join(text.split())", "def remove_all_spaces(text: str) -> str:\n    return ''.join(text.split())"], "clusters": [{"programs_str": ["def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')"], "outputs": "[['pythonprogram'], ['leadingandtrailingspaces'], ['noSpacesHere'], ['multiplespacesbetweenwords'], [''], ['single_space'], [''], ['\\tThisshouldalso\\tremovetabs'], ['New\\nLine\\testing'], ['abcdefg']]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def remove_all_spaces(text: str) -> str:\n    return ''.join(text.split())", "def remove_all_spaces(text: str) -> str:\n    return ''.join(text.split())"], "outputs": "[['pythonprogram'], ['leadingandtrailingspaces'], ['noSpacesHere'], ['multiplespacesbetweenwords'], [''], ['single_space'], [''], ['Thisshouldalsoremovetabs'], ['NewLineesting'], ['abcdefg']]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/801", "requirement": "def test_three_equal(x: int, y: int, z: int) -> int:\n\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\n\nassert test_three_equal(1,1,1) == 3\n\"\"\"", "llm_generated_inputs": "[[1, 1, 1], [1, 2, 3], [2, 2, 3], [5, 5, 5], [-1, -1, -1], [0, 0, 0], [3, 3, 3], [4, 4, 5]]", "programs": ["def test_three_equal(x: int, y: int, z: int) -> int:\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    if count == 3:\n        return 3\n    return count", "def test_three_equal(x: int, y: int, z: int) -> int:\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    if count == 3:\n        return 3\n    return count", "def test_three_equal(x: int, y: int, z: int) -> int:\n    return len(set([x, y, z])) == 1 and 3 or (x == y) + (y == z) + (x == z)", "def test_three_equal(x: int, y: int, z: int) -> int:\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    if count == 3:\n        return 3\n    return count", "def test_three_equal(x: int, y: int, z: int) -> int:\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    if count == 3:\n        return 3\n    return count", "def test_three_equal(x: int, y: int, z: int) -> int:\n    equal_count = 0\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n    if equal_count == 3:\n        return 3\n    return equal_count", "def test_three_equal(x: int, y: int, z: int) -> int:\n    return len(set([x, y, z])) == 1 and 3 or (x == y) + (y == z) + (x == z)", "def test_three_equal(x: int, y: int, z: int) -> int:\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    if count == 3:\n        return 3\n    return count", "def test_three_equal(x: int, y: int, z: int) -> int:\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    if count == 3:\n        return 3\n    return count", "def test_three_equal(x: int, y: int, z: int) -> int:\n    return len(set([x, y, z])) == 1 and 3 or (x == y) + (y == z) + (x == z)", "def test_three_equal(x: int, y: int, z: int) -> int:\n    equal_count = 0\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n    return equal_count + (1 if equal_count > 0 else 0)", "def test_three_equal(x: int, y: int, z: int) -> int:\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count + (1 if count == 3 else 0)", "def test_three_equal(x: int, y: int, z: int) -> int:\n    equal_count = 0\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n    return equal_count + (1 if equal_count == 3 else 0)", "def test_three_equal(x: int, y: int, z: int) -> int:\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count + (1 if count == 3 else 0)", "def test_three_equal(x: int, y: int, z: int) -> int:\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count + (1 if count == 3 else 0)", "def test_three_equal(x: int, y: int, z: int) -> int:\n    equal_count = 0\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n    return equal_count + (1 if equal_count == 3 else 0)", "def test_three_equal(x: int, y: int, z: int) -> int:\n    equal_count = 0\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n    return equal_count + (1 if x == y == z else 0)", "def test_three_equal(x: int, y: int, z: int) -> int:\n    equal_count = 0\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n    return equal_count + (3 if equal_count == 3 else 0)", "def test_three_equal(x: int, y: int, z: int) -> int:\n    return len(set([x, y, z])) == 1 and 3 or (len(set([x, y, z])) == 2 and 2 or 0)", "def test_three_equal(x: int, y: int, z: int) -> int:\n    return len({x, y, z})"], "clusters": [{"programs_str": ["def test_three_equal(x: int, y: int, z: int) -> int:\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    if count == 3:\n        return 3\n    return count", "def test_three_equal(x: int, y: int, z: int) -> int:\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    if count == 3:\n        return 3\n    return count", "def test_three_equal(x: int, y: int, z: int) -> int:\n    return len(set([x, y, z])) == 1 and 3 or (x == y) + (y == z) + (x == z)", "def test_three_equal(x: int, y: int, z: int) -> int:\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    if count == 3:\n        return 3\n    return count", "def test_three_equal(x: int, y: int, z: int) -> int:\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    if count == 3:\n        return 3\n    return count", "def test_three_equal(x: int, y: int, z: int) -> int:\n    equal_count = 0\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n    if equal_count == 3:\n        return 3\n    return equal_count", "def test_three_equal(x: int, y: int, z: int) -> int:\n    return len(set([x, y, z])) == 1 and 3 or (x == y) + (y == z) + (x == z)", "def test_three_equal(x: int, y: int, z: int) -> int:\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    if count == 3:\n        return 3\n    return count", "def test_three_equal(x: int, y: int, z: int) -> int:\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    if count == 3:\n        return 3\n    return count", "def test_three_equal(x: int, y: int, z: int) -> int:\n    return len(set([x, y, z])) == 1 and 3 or (x == y) + (y == z) + (x == z)"], "outputs": "[[3], [0], [1], [3], [3], [3], [3], [1]]", "probability": 0.5, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def test_three_equal(x: int, y: int, z: int) -> int:\n    equal_count = 0\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n    return equal_count + (1 if equal_count > 0 else 0)"], "outputs": "[[4], [0], [2], [4], [4], [4], [4], [2]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[1, 1, 1], [4], [3]]]"}, {"programs_str": ["def test_three_equal(x: int, y: int, z: int) -> int:\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count + (1 if count == 3 else 0)", "def test_three_equal(x: int, y: int, z: int) -> int:\n    equal_count = 0\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n    return equal_count + (1 if equal_count == 3 else 0)", "def test_three_equal(x: int, y: int, z: int) -> int:\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count + (1 if count == 3 else 0)", "def test_three_equal(x: int, y: int, z: int) -> int:\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count + (1 if count == 3 else 0)", "def test_three_equal(x: int, y: int, z: int) -> int:\n    equal_count = 0\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n    return equal_count + (1 if equal_count == 3 else 0)", "def test_three_equal(x: int, y: int, z: int) -> int:\n    equal_count = 0\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n    return equal_count + (1 if x == y == z else 0)"], "outputs": "[[4], [0], [1], [4], [4], [4], [4], [1]]", "probability": 0.3, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[1, 1, 1], [4], [3]]]"}, {"programs_str": ["def test_three_equal(x: int, y: int, z: int) -> int:\n    equal_count = 0\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n    return equal_count + (3 if equal_count == 3 else 0)"], "outputs": "[[6], [0], [1], [6], [6], [6], [6], [1]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[1, 1, 1], [6], [3]]]"}, {"programs_str": ["def test_three_equal(x: int, y: int, z: int) -> int:\n    return len(set([x, y, z])) == 1 and 3 or (len(set([x, y, z])) == 2 and 2 or 0)"], "outputs": "[[3], [0], [2], [3], [3], [3], [3], [2]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def test_three_equal(x: int, y: int, z: int) -> int:\n    return len({x, y, z})"], "outputs": "[[1], [3], [2], [1], [1], [1], [1], [2]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[1, 1, 1], [1], [3]]]"}]}
{"task_id": "Mbpp/803", "requirement": "def is_perfect_square(n: int) -> bool:\n\"\"\"\nWrite a function to check whether the given number is a perfect square or not. \nassert not is_perfect_square(10)\n\"\"\"", "llm_generated_inputs": "[[0], [1], [4], [9], [16], [25], [10], [15], [27], [36], [-1], [2], [8]]", "programs": ["import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = int(math.sqrt(n))\n    return root * root == n", "from math import isqrt\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = int(math.sqrt(n))\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = int(math.isqrt(n))\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    return n >= 0 and math.isqrt(n) ** 2 == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = int(math.sqrt(n))\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "def is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    return int(n ** 0.5) ** 2 == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "from math import isqrt\n\ndef is_perfect_square(n: int) -> bool:\n    return isqrt(n) ** 2 == n"], "clusters": [{"programs_str": ["import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = int(math.sqrt(n))\n    return root * root == n", "from math import isqrt\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = int(math.sqrt(n))\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = int(math.isqrt(n))\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    return n >= 0 and math.isqrt(n) ** 2 == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = int(math.sqrt(n))\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "def is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    return int(n ** 0.5) ** 2 == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n"], "outputs": "[[True], [True], [True], [True], [True], [True], [False], [False], [False], [True], [False], [False], [False]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import isqrt\n\ndef is_perfect_square(n: int) -> bool:\n    return isqrt(n) ** 2 == n"], "outputs": "[[True], [True], [True], [True], [True], [True], [False], [False], [False], [True], ['ValueError'], [False], [False]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/804", "requirement": "from typing import List\n\n\ndef is_product_even(arr: List[int]) -> bool:\n\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"", "llm_generated_inputs": "[[[2, 4, 6]], [[1, 3, 5]], [[1, 2, 3]], [[0, 1, 2]], [[7, 9, 11]], [[-2, 5, 1]], [[2, -3, 4]], [[1]], [[]], [[1, 3, 0]]]", "programs": ["from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for number in arr:\n        product *= number\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for number in arr:\n        product *= number\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for number in arr:\n        product *= number\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n        if product % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    return any((x % 2 == 0 for x in arr))", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n        if product % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for number in arr:\n        product *= number\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"], "clusters": [{"programs_str": ["from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for number in arr:\n        product *= number\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for number in arr:\n        product *= number\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for number in arr:\n        product *= number\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n        if product % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    return any((x % 2 == 0 for x in arr))", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n        if product % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for number in arr:\n        product *= number\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"], "outputs": "[[True], [False], [True], [True], [False], [True], [True], [False], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/805", "requirement": "from typing import List\n\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"", "llm_generated_inputs": "[[[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[1], [2], [3]]], [[[0, 0, 0], [0, 0, 1], [0, 1, 0]]], [[[5, -1, 3], [-10, 20, 1], [0]]], [[[1, 1, 1], [1, 1, 1], [1, 1, 1]]], [[[100], [-100], [200]]], [[[1, 2], [2, 3, 4, 5, 6], [10, 10], [6, 5, 4, 3, 2, 1]]], [[[3, 3, 3], [3, 3, 3, 3], [3, 3]]], [[[], [], []]], [[[7, 9], [], [8, 6], [5, 6]]]]", "programs": ["from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)"], "clusters": [{"programs_str": ["from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)"], "outputs": "[[[10, 11, 12]], [[3]], [[0, 0, 1]], [[-10, 20, 1]], [[1, 1, 1]], [[200]], [[6, 5, 4, 3, 2, 1]], [[3, 3, 3, 3]], [[]], [[7, 9]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/806", "requirement": "def max_run_uppercase(test_str: str) -> int:\n\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"", "llm_generated_inputs": "[['GeMKSForGERksISBESt'], ['HELLOworld'], ['abcDEFghIJKLmnopQRstUVWXYZ'], ['noUPPERCASEHERE'], ['AAAAAAAAA'], ['abc123XYZABCD'], ['singleuppercase'], ['A'], [''], ['lowercaseonly']]", "programs": ["def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_count = 0\n    current_count = 0\n    for char in test_str:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n    return max_count", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_count = 0\n    current_count = 0\n    for char in test_str:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n    return max_count", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_count = 0\n    current_count = 0\n    for char in test_str:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n    return max_count", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_count = 0\n    current_count = 0\n    for char in test_str:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n    return max_count", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"], "clusters": [{"programs_str": ["def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_count = 0\n    current_count = 0\n    for char in test_str:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n    return max_count", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_count = 0\n    current_count = 0\n    for char in test_str:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n    return max_count", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_count = 0\n    current_count = 0\n    for char in test_str:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n    return max_count", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_count = 0\n    current_count = 0\n    for char in test_str:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n    return max_count", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"], "outputs": "[[5], [5], [6], [13], [9], [7], [0], [1], [0], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/807", "requirement": "from typing import List\n\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1\n\"\"\"", "llm_generated_inputs": "[[[1, 3, 5]], [[2, 4, 6, 1]], [[0, 2, 4, 6, 8]], [[9, 2, 4, 8, 11]], [[]], [[2, 2, 2, 2]], [[10, 13, 14, 15]], [[7]], [[14, 3]]]", "programs": ["from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None"], "clusters": [{"programs_str": ["from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None"], "outputs": "[[1], [1], [None], [9], [None], [None], [13], [7], [3]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/808", "requirement": "def check_K(test_tup: tuple, K: any) -> bool:\n\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"", "llm_generated_inputs": "[[(10, 4, 5, 6, 8), 6]]", "programs": ["def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup"], "clusters": [{"programs_str": ["def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup"], "outputs": "[[True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
{"task_id": "Mbpp/809", "requirement": "from typing import Tuple\n\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"", "llm_generated_inputs": "[[(1, 2, 3), (2, 3, 4)]]", "programs": ["from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((a > b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((a > b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((b < a for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((a > b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((a > b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((b < a for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((b < a for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((b < a for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((a > b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((a > b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((a > b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))"], "clusters": [{"programs_str": ["from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((a > b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((a > b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((b < a for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((a > b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((a > b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((b < a for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((b < a for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((b < a for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((a > b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((a > b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((a > b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))"], "outputs": "[[False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}]}
