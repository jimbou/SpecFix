{"task_id": "HumanEval/50", "requirement": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])"], "outputs": "[['abcde'], ['vwxyz'], ['stuvw'], [''], ['fghij'], ['klmno'], ['pqrst'], ['uvwxy']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['fghij'], ['abcde'], ['xyzab'], [''], ['klmno'], ['pqrst'], ['uvwxy'], ['zabcd']]", "input_output_examples": "[[], []]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/51", "requirement": "def remove_vowels(text: str) -> str:\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"], "outputs": "[[''], ['bcdf\\nghjklm'], ['bcdf'], [''], ['B'], ['zbcd'], ['Hll Wrld!'], [''], ['12345!@#$%'], ['Th qck brwn fx jmps vr th lzy dg.']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[''], ['abcdef\\nghijklm'], ['abcdef'], ['aaaaa'], ['aaBAA'], ['zbcd'], ['Hello World!'], ['AEIOUaeiou'], ['12345!@#$%'], ['The quick brown fox jumps over the lazy dog.']]", "input_output_examples": "[[[''], ['abcdef\\nghijklm'], ['abcdef'], ['aaaaa'], ['aaBAA'], ['zbcd']], [[''], ['bcdf\\nghjklm'], ['bcdf'], [''], ['B'], ['zbcd']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/52", "requirement": "from typing import List\n\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((num < t for num in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))"], "outputs": "[[True], [True], [False], [True], [False], [False], [True], [False], [False], [False]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4], 5], [[10, 20, 30, 40], 50], [[1, 2, 3, 4], 4], [[-1, -2, -3, -4], 0], [[100, 200, 300, 400], 100], [[1, 2, 3, 4], 1], [[], 5], [[5, 5, 5, 5], 5], [[1, 2, 3, 4], 0], [[1, 2, 3, 4], -1]]", "input_output_examples": "[[[[1, 2, 4, 10], 100], [[1, 20, 4, 10], 5]], [[True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/53", "requirement": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y.\"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y"], "outputs": "[[5], [12], [0], [0], [-12], [2147483648], [-2147483649], [-2147483648], [4294967294]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[2, 3], [5, 7], [0, 0], [-1, 1], [-5, -7], [2147483647, 1], [-2147483648, -1], [0, -2147483648], [2147483647, 2147483647]]", "input_output_examples": "[[[2, 3], [5, 7]], [[5], [12]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/54", "requirement": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"", "repaired_requirement": "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two strings contain the exact same set of characters, regardless of their order or frequency.\n    \n    Args:\n        s0 (str): The first string to compare.\n        s1 (str): The second string to compare.\n    \n    Returns:\n        bool: True if the sets of characters in `s0` and `s1` are identical, False otherwise.\n    \n    Examples:\n        >>> same_chars(\"abc\", \"bca\")\n        True\n        >>> same_chars(\"abc\", \"abcd\")\n        False\n        >>> same_chars(\"aabb\", \"ab\")\n        True\n    \"\"\"", "original_clusters": {"cluster_list": [{"programs_str": ["def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)", "from collections import Counter\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)", "from collections import Counter\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)", "from collections import Counter\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)", "from collections import Counter\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)", "from collections import Counter\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)", "from collections import Counter\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)", "from typing import Dict\n\ndef same_chars(s0: str, s1: str) -> bool:\n\n    def count_chars(s: str) -> Dict[str, int]:\n        char_count = {}\n        for char in s:\n            char_count[char] = char_count.get(char, 0) + 1\n        return char_count\n    return count_chars(s0) == count_chars(s1)", "from collections import Counter\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)", "from collections import Counter\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)", "from collections import Counter\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)", "from collections import Counter\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)", "from typing import Dict\n\ndef same_chars(s0: str, s1: str) -> bool:\n\n    def count_chars(s: str) -> Dict[str, int]:\n        count = {}\n        for char in s:\n            count[char] = count.get(char, 0) + 1\n        return count\n    return count_chars(s0) == count_chars(s1)"], "outputs": "[[False], [False], [False], [False], [False], [False], [True], [True], [False], [True], [False], [False], [False], [False], [False], [True], [False], [False], [False], [False], [False]]", "probability": 0.9, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[['eabcdzzzz', 'dddzzzzzzzddeddabc'], [False], [True]], [['abcd', 'dddddddabc'], [False], [True]], [['dddddddabc', 'abcd'], [False], [True]]]"}, {"programs_str": ["from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)"], "outputs": "[[True], [True], [True], [False], [False], [False], [True], [True], [False], [True], [False], [False], [True], [True], [False], [True], [False], [False], [True], [True], [False]]", "probability": 0.1, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.46899559358928117, "llm_generated_inputs": "[['eabcdzzzz', 'dddzzzzzzzddeddabc'], ['abcd', 'dddddddabc'], ['dddddddabc', 'abcd'], ['eabcd', 'dddddddabc'], ['abcd', 'dddddddabce'], ['eabcdzzzz', 'dddzzzzzzzddddabc'], ['', ''], ['a', 'a'], ['a', 'b'], ['ab', 'ba'], ['abc', 'abcd'], ['abc', 'ab'], ['abc', 'aabbcc'], ['abc', 'aaabbbccc'], ['abc', 'xyz'], ['123', '321'], ['123', '1234'], ['123', '12'], ['123', '112233'], ['123', '111222333'], ['123', 'xyz']]", "input_output_examples": "[[['eabcdzzzz', 'dddzzzzzzzddeddabc'], ['abcd', 'dddddddabc'], ['dddddddabc', 'abcd'], ['eabcd', 'dddddddabc'], ['abcd', 'dddddddabce'], ['eabcdzzzz', 'dddzzzzzzzddddabc']], [[True], [True], [True], [False], [False], [False]]]", "weighted_test_consistency": 0.55, "at_least_one_align": true, "ambiguity": 0.45949779679464053}, "repaired_clusters": {"cluster_list": [{"programs_str": ["from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)"], "outputs": "[[True], [True], [True], [False], [False], [False], [True], [True], [False], [True], [False], [False], [True], [True], [False], [True], [False], [False], [True], [True], [False]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['eabcdzzzz', 'dddzzzzzzzddeddabc'], ['abcd', 'dddddddabc'], ['dddddddabc', 'abcd'], ['eabcd', 'dddddddabc'], ['abcd', 'dddddddabce'], ['eabcdzzzz', 'dddzzzzzzzddddabc'], ['', ''], ['a', 'a'], ['a', 'b'], ['ab', 'ba'], ['abc', 'abcd'], ['abc', 'ab'], ['abc', 'aabbcc'], ['abc', 'aaabbbccc'], ['abc', 'xyz'], ['123', '321'], ['123', '1234'], ['123', '12'], ['123', '112233'], ['123', '111222333'], ['123', 'xyz']]", "input_output_examples": "[[['eabcdzzzz', 'dddzzzzzzzddeddabc'], ['abcd', 'dddddddabc'], ['dddddddabc', 'abcd'], ['eabcd', 'dddddddabc'], ['abcd', 'dddddddabce'], ['eabcdzzzz', 'dddzzzzzzzddddabc']], [[True], [True], [True], [False], [False], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "original_passk": 0.0, "repaired_passk": 1.0, "generated_programs": ["from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "from typing import Set\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)"], "failed_inputs_outputs": "[[], [], [], [], [], [], [], [], [], []]"}
{"task_id": "HumanEval/55", "requirement": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import Callable\n\ndef fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "from typing import Callable\n\ndef fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "from typing import Callable\n\ndef fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "from typing import Callable\n\ndef fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "from typing import Callable\n\ndef fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "from typing import Callable\n\ndef fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "from typing import Callable\n\ndef fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "from typing import Callable\n\ndef fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "from typing import Callable\n\ndef fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b"], "outputs": "[[0], [1], [1], [5], [55], [6765], [0], [0]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [5], [10], [20], [-1], [-5]]", "input_output_examples": "[[[10], [1], [8]], [[55], [1], [21]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/56", "requirement": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack[-1] != '<':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack[-1] != '<':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack[-1] != '<':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack[-1] != '<':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '<':\n            balance += 1\n        elif bracket == '>':\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack[-1] != '<':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack[-1] != '<':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack[-1] != '<':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack[-1] != '<':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack[-1] != '<':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack[-1] != '<':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"], "outputs": "[[False], [True], [True], [False], [True], [False], [True], [True], [True], [False]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['<'], ['<>'], ['<<><>>'], ['><><'], [''], ['><'], ['<<>>'], ['<><><><>'], ['<<<<<<<<<<>>>>>>>>>>'], ['<<<<<<<<<<>>>>>>>>>>><']]", "input_output_examples": "[[['<'], ['<>'], ['<<><>>'], ['><<>']], [[False], [True], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/57", "requirement": "from typing import List\n\n\ndef monotonic(l: List[int]) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if len(l) <= 1:\n        return True\n    increasing = all((l[i] <= l[i + 1] for i in range(len(l) - 1)))\n    decreasing = all((l[i] >= l[i + 1] for i in range(len(l) - 1)))\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    increasing = all((l[i] <= l[i + 1] for i in range(len(l) - 1)))\n    decreasing = all((l[i] >= l[i + 1] for i in range(len(l) - 1)))\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    increasing = all((l[i] <= l[i + 1] for i in range(len(l) - 1)))\n    decreasing = all((l[i] >= l[i + 1] for i in range(len(l) - 1)))\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    increasing = all((l[i] <= l[i + 1] for i in range(len(l) - 1)))\n    decreasing = all((l[i] >= l[i + 1] for i in range(len(l) - 1)))\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    increasing = all((l[i] <= l[i + 1] for i in range(len(l) - 1)))\n    decreasing = all((l[i] >= l[i + 1] for i in range(len(l) - 1)))\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if len(l) <= 1:\n        return True\n    increasing = all((l[i] <= l[i + 1] for i in range(len(l) - 1)))\n    decreasing = all((l[i] >= l[i + 1] for i in range(len(l) - 1)))\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    increasing = all((l[i] <= l[i + 1] for i in range(len(l) - 1)))\n    decreasing = all((l[i] >= l[i + 1] for i in range(len(l) - 1)))\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if len(l) <= 1:\n        return True\n    increasing = all((l[i] <= l[i + 1] for i in range(len(l) - 1)))\n    decreasing = all((l[i] >= l[i + 1] for i in range(len(l) - 1)))\n    return increasing or decreasing"], "outputs": "[[True], [True], [True], [False], [True], [True], [True], [True], [True], [False]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[1, 1, 1, 1, 1]], [[1, 3, 2, 4, 5]], [[10, 9, 8, 7, 6]], [[1]], [[]], [[1, 2, 2, 3, 4]], [[5, 4, 4, 3, 2]], [[1, 2, 3, 2, 1]]]", "input_output_examples": "[[[[1, 2, 4, 20]], [[1, 20, 4, 10]], [[4, 1, 0, -10]]], [[True], [False], [True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/58", "requirement": "from typing import List\n\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1) & set(l2)))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1) & set(l2)))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1) & set(l2)))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1) & set(l2)))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1) & set(l2)))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1) & set(l2)))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1) & set(l2)))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1).intersection(set(l2))))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1) & set(l2)))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1).intersection(set(l2))))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(set(l2)))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1) & set(l2)))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1) & set(l2)))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1) & set(l2)))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1).intersection(set(l2))))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1).intersection(set(l2))))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1).intersection(set(l2))))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1) & set(l2)))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1).intersection(set(l2))))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(list(set(l1) & set(l2)))"], "outputs": "[[[1, 5, 653]], [[2, 3]], [[]], [[]], [[]], [[1]], [[10, 20, 30]], [[-3, -2, -1]], [[3, 4, 5]], [[2, 3]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]], [[5, 3, 2, 8], [3, 2]], [[], [1, 2, 3]], [[1, 2, 3], []], [[1, 2, 3], [4, 5, 6]], [[1, 1, 1, 1], [1, 1, 1]], [[10, 20, 30], [30, 20, 10]], [[-1, -2, -3], [-3, -2, -1]], [[1, 2, 3, 4, 5], [3, 4, 5, 6, 7]], [[1, 2, 2, 3], [2, 3, 3, 4]]]", "input_output_examples": "[[[[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]], [[5, 3, 2, 8], [3, 2]]], [[[1, 5, 653]], [[2, 3]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/59", "requirement": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest_factor = -1\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    if n > 2:\n        largest_factor = n\n    return largest_factor", "import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest_prime = -1\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    if n > 2:\n        largest_prime = n\n    return largest_prime", "import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest_prime = -1\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    if n > 2:\n        largest_prime = n\n    return largest_prime", "import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest_factor = -1\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    if n > 2:\n        largest_factor = n\n    return largest_factor", "import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest = -1\n    while n % 2 == 0:\n        largest = 2\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest = i\n            n //= i\n    if n > 2:\n        largest = n\n    return largest", "import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest_factor = -1\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    if n > 2:\n        largest_factor = n\n    return largest_factor", "import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest_prime = -1\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    if n > 2:\n        largest_prime = n\n    return largest_prime", "import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest = -1\n    while n % 2 == 0:\n        largest = 2\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest = i\n            n //= i\n    if n > 2:\n        largest = n\n    return largest", "import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest_prime = -1\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    if n > 2:\n        largest_prime = n\n    return largest_prime", "import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest_factor = 1\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    if n > 2:\n        largest_factor = n\n    return largest_factor", "import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest_prime = -1\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    if n > 2:\n        largest_prime = n\n    return largest_prime", "import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest_factor = -1\n    while n % 2 == 0:\n        largest_factor = 2\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n = n // i\n    if n > 2:\n        largest_factor = n\n    return largest_factor", "import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest_factor = -1\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    if n > 2:\n        largest_factor = n\n    return largest_factor", "import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest_factor = -1\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    if n > 2:\n        largest_factor = n\n    return largest_factor", "import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest_factor = 1\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    if n > 2:\n        largest_factor = n\n    return largest_factor", "import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest_factor = -1\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    if n > 2:\n        largest_factor = n\n    return largest_factor", "import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest_prime = -1\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n    if n > 2:\n        largest_prime = n\n    return largest_prime", "import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest = -1\n    while n % 2 == 0:\n        largest = 2\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest = i\n            n //= i\n    if n > 2:\n        largest = n\n    return largest", "import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest_factor = -1\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    if n > 2:\n        largest_factor = n\n    return largest_factor", "import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest_factor = -1\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    if n > 2:\n        largest_factor = n\n    return largest_factor"], "outputs": "[[29], [2], [5], [643], [2], [5]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[13195], [2048], [15], [123456], [2], [100]]", "input_output_examples": "[[[13195], [2048]], [[29], [2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/60", "requirement": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"", "repaired_requirement": "def sum_to_n(n: int) -> int:\n    \"\"\"Calculate the sum of all integers from 1 to n, inclusive, using the formula n * (n + 1) // 2.\n\n    Args:\n        n (int): The upper limit of the range of integers to sum. Must be a non-negative integer.\n\n    Returns:\n        int: The sum of integers from 1 to n.\n    \"\"\"", "original_clusters": {"cluster_list": [{"programs_str": ["def sum_to_n(n: int) -> int:\n    return sum(range(1, n + 1))", "def sum_to_n(n: int) -> int:\n    return sum(range(1, n + 1))", "def sum_to_n(n: int) -> int:\n    return sum(range(1, n + 1))", "def sum_to_n(n: int) -> int:\n    return sum(range(1, n + 1))", "def sum_to_n(n: int) -> int:\n    return sum(range(1, n + 1))", "def sum_to_n(n: int) -> int:\n    return sum(range(1, n + 1))"], "outputs": "[[15], [55], [465], [5050], [1], [0], [0], [50005000]]", "probability": 0.3, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2"], "outputs": "[[15], [55], [465], [5050], [1], [0], [10], [50005000]]", "probability": 0.7, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8812908992306927, "llm_generated_inputs": "[[5], [10], [30], [100], [1], [0], [-5], [10000]]", "input_output_examples": "[[[30], [100], [5], [10], [1]], [[465], [5050], [15], [55], [1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.44064544961534635}, "repaired_clusters": {"cluster_list": [{"programs_str": ["def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2"], "outputs": "[[15], [55], [465], [5050], [1], [0], [10], [50005000]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[5], [10], [30], [100], [1], [0], [-5], [10000]]", "input_output_examples": "[[[30], [100], [5], [10], [1]], [[465], [5050], [15], [55], [1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": ["def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2"], "failed_inputs_outputs": "[[], [], [], [], [], [], [], [], [], []]"}
{"task_id": "HumanEval/61", "requirement": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack", "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack"], "outputs": "[[False], [False], [True], [True], [False], [True], [True], [True], [False], [False], [False], [False], [True], [True], [True]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['('], [')'], ['()'], ['(()())'], [')(()'], [''], ['((()))'], ['()()()'], ['(()'], ['())'], ['((()()())'], ['()()()())'], ['(((((())))))'], ['(()()()()()())'], ['(()()(()))']]", "input_output_examples": "[[['('], ['()'], ['(()())'], [')(()']], [[False], [True], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/62", "requirement": "from typing import List\n\n\ndef derivative(xs: List[int]) -> List[int]:\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [xs[i] * i for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [xs[i] * i for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * x for i, x in enumerate(xs) if i != 0]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [xs[i] * i for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [xs[i] * i for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [xs[i] * i for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * coeff for i, coeff in enumerate(xs)][1:]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * x for i, x in enumerate(xs)][1:]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * coeff for i, coeff in enumerate(xs) if i > 0]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [xs[i] * i for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * x for i, x in enumerate(xs)][1:]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [xs[i] * i for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [xs[i] * i for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [xs[i] * i for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [xs[i] * i for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [xs[i] * i for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * coeff for i, coeff in enumerate(xs) if i != 0]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * x for i, x in enumerate(xs) if i != 0]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * x for i, x in enumerate(xs)][1:]"], "outputs": "[[[1, 4, 12, 20]], [[2, 6]], [[]], [[]], [[-2, -2, 0, 4, 10, 18]], [[0, 0, 0, 0, 5]], [[0, 0, 0, 40]], [[]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[3, 1, 2, 4, 5]], [[1, 2, 3]], [[0]], [[7]], [[-3, -2, -1, 0, 1, 2, 3]], [[1, 0, 0, 0, 0, 1]], [[10, 0, 0, 0, 10]], [[]]]", "input_output_examples": "[[[[3, 1, 2, 4, 5]], [[1, 2, 3]]], [[[1, 4, 12, 20]], [[2, 6]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/63", "requirement": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c"], "outputs": "[[0], [0], [1], [1], [2], [4], [7], [13], [24], [44], [81], [1]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [-1]]", "input_output_examples": "[[[1], [5], [8]], [[0], [4], [24]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/64", "requirement": "def vowels_count(s: str) -> int:\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in vowels or (char == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = set('aeiou')\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = sum((1 for char in s.lower() if char in vowels))\n    if s.lower().endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in vowels or (char == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = set('aeiou')\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in vowels or (char == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = set('aeiou')\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in vowels or (char == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in vowels or (char == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in vowels or (char == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    return count"], "outputs": "[[2], [3], [2], [1], [0], [5], [1], [0], [3], [1], [0], [1], [1], [1], [1], [1], [1], [1], [6], [1], [3]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['abcde'], ['ACEDY'], ['hello'], ['sky'], ['rhythm'], ['aeiou'], ['y'], ['xyz'], ['quickly'], ['PYTHON'], [''], ['a'], ['e'], ['i'], ['o'], ['u'], ['y'], ['Y'], ['AeIoUy'], ['yYy'], ['hello world']]", "input_output_examples": "[[['abcde'], ['ACEDY']], [[2], [3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/65", "requirement": "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    n = len(digits)\n    if shift > n:\n        return digits[::-1]\n    shift = shift % n\n    return digits[-shift:] + digits[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    n = len(digits)\n    if shift > n:\n        return digits[::-1]\n    shift = shift % n\n    return digits[-shift:] + digits[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    n = len(digits)\n    if shift > n:\n        return digits[::-1]\n    shift = shift % n\n    return digits[-shift:] + digits[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    n = len(digits)\n    if shift > n:\n        return digits[::-1]\n    shift = shift % n\n    return digits[-shift:] + digits[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    n = len(digits)\n    if shift > n:\n        return digits[::-1]\n    shift = shift % n\n    return digits[-shift:] + digits[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    n = len(digits)\n    if shift > n:\n        return digits[::-1]\n    shift = shift % n\n    return digits[-shift:] + digits[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    n = len(digits)\n    if shift > n:\n        return digits[::-1]\n    shift = shift % n\n    return digits[-shift:] + digits[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    n = len(digits)\n    if shift > n:\n        return digits[::-1]\n    shift = shift % n\n    return digits[-shift:] + digits[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    n = len(digits)\n    if shift > n:\n        return digits[::-1]\n    shift = shift % n\n    return digits[-shift:] + digits[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]"], "outputs": "[['51234'], ['34512'], ['12345'], ['54321'], ['12345'], ['219876543'], ['987654321'], ['123456789'], ['010'], ['001'], ['100'], ['001'], ['0'], ['0'], ['231']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[12345, 1], [12345, 3], [12345, 5], [12345, 6], [12345, 0], [987654321, 2], [987654321, 9], [987654321, 10], [100, 1], [100, 2], [100, 3], [100, 4], [0, 1], [0, 0], [123, -1]]", "input_output_examples": "[[[12, 1], [12, 2]], [['21'], ['12']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/66", "requirement": "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def digitSum(s: str) -> int:\n    return sum((ord(char) for char in s if char.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(char) for char in s if char.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(char) for char in s if char.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(char) for char in s if char.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(char) for char in s if char.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(char) for char in s if char.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(char) for char in s if char.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(char) for char in s if char.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(char) for char in s if char.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(char) for char in s if char.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(char) for char in s if char.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(char) for char in s if char.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(char) for char in s if char.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(char) for char in s if char.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(char) for char in s if char.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(char) for char in s if char.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(char) for char in s if char.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(char) for char in s if char.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(char) for char in s if char.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(char) for char in s if char.isupper()))"], "outputs": "[[0], [131], [67], [69], [131], [153], [0], [476], [267], [228]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[''], ['abAB'], ['abcCd'], ['helloE'], ['woArBld'], ['aAaaaXa'], ['1234!@# $'], ['ABCDEFG'], ['XYZxyz'], ['NoNumbersHere']]", "input_output_examples": "[[[''], ['abAB'], ['abcCd'], ['helloE'], ['woArBld'], ['aAaaaXa']], [[0], [131], [67], [69], [131], [153]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/67", "requirement": "def fruit_distribution(s: str, n: int) -> int:\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit. This basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represents the total number of the fruits \n    in the basket, return the number of the mango fruits in the basket.\n    \"\"\"", "repaired_requirement": "def fruit_distribution(s: str, n: int) -> int:\n    \"\"\"\n    Given a string `s` that contains words representing the number of apples and oranges in a basket,\n    and an integer `n` representing the total number of fruits in the basket, return the number of mango fruits.\n    \n    The string `s` may contain non-numeric words, but only numeric words represent the count of apples and oranges.\n    The function should extract all numeric words from `s`, sum them to get the total count of apples and oranges,\n    and subtract this sum from `n` to determine the number of mango fruits.\n    \n    Example:\n    >>> fruit_distribution(\"5 apples and 3 oranges\", 10)\n    2\n    \"\"\"", "original_clusters": {"cluster_list": [{"programs_str": ["def fruit_distribution(s: str, n: int) -> int:\n    apples_oranges = sum(map(int, s.split()))\n    return n - apples_oranges", "def fruit_distribution(s: str, n: int) -> int:\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[2])\n    return n - (apples + oranges)", "def fruit_distribution(s: str, n: int) -> int:\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[2])\n    return n - (apples + oranges)"], "outputs": "[['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError']]", "probability": 0.15, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['5 apples and 6 oranges', 19], ['ValueError'], [8]], [['0 apples and 1 oranges', 3], ['ValueError'], [2]], [['2 apples and 3 oranges', 100], ['ValueError'], [95]], [['100 apples and 1 oranges', 120], ['ValueError'], [19]]]"}, {"programs_str": ["def fruit_distribution(s: str, n: int) -> int:\n    apple_orange = sum((int(word) for word in s.split() if word.isdigit()))\n    return n - apple_orange", "def fruit_distribution(s: str, n: int) -> int:\n    apple_orange_count = sum((int(word) for word in s.split() if word.isdigit()))\n    return n - apple_orange_count", "def fruit_distribution(s: str, n: int) -> int:\n    apples_and_oranges = sum((int(num) for num in s.split() if num.isdigit()))\n    return n - apples_and_oranges", "def fruit_distribution(s: str, n: int) -> int:\n    apple_orange = sum((int(word) for word in s.split() if word.isdigit()))\n    return n - apple_orange", "def fruit_distribution(s: str, n: int) -> int:\n    apple_orange = sum((int(num) for num in s.split() if num.isdigit()))\n    return n - apple_orange", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    total_apples_oranges = sum(numbers)\n    return n - total_apples_oranges", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    total_apples_oranges = sum(numbers)\n    mangoes = n - total_apples_oranges\n    return mangoes", "def fruit_distribution(s: str, n: int) -> int:\n    apple_orange_count = sum((int(word) for word in s.split() if word.isdigit()))\n    return n - apple_orange_count", "def fruit_distribution(s: str, n: int) -> int:\n    apples_oranges = sum((int(num) for num in s.split() if num.isdigit()))\n    return n - apples_oranges", "def fruit_distribution(s: str, n: int) -> int:\n    apple_orange = sum((int(word) for word in s.split() if word.isdigit()))\n    return n - apple_orange", "def fruit_distribution(s: str, n: int) -> int:\n    apple_orange = sum((int(word) for word in s.split() if word.isdigit()))\n    return n - apple_orange", "def fruit_distribution(s: str, n: int) -> int:\n    apples_oranges = sum((int(num) for num in s.split() if num.isdigit()))\n    return n - apples_oranges", "def fruit_distribution(s: str, n: int) -> int:\n    apple_orange = sum((int(word) for word in s.split() if word.isdigit()))\n    return n - apple_orange", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    total_apples_oranges = sum(numbers)\n    return n - total_apples_oranges", "def fruit_distribution(s: str, n: int) -> int:\n    apples_oranges = sum((int(word) for word in s.split() if word.isdigit()))\n    return n - apples_oranges", "def fruit_distribution(s: str, n: int) -> int:\n    import re\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    total_apples_oranges = sum(numbers)\n    mangoes = n - total_apples_oranges\n    return mangoes", "def fruit_distribution(s: str, n: int) -> int:\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    return n - (apples + oranges)"], "outputs": "[[8], [2], [95], [19], [0], [0], [9], [10], [25], [15]]", "probability": 0.85, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.6098403047164005, "llm_generated_inputs": "[['5 apples and 6 oranges', 19], ['0 apples and 1 oranges', 3], ['2 apples and 3 oranges', 100], ['100 apples and 1 oranges', 120], ['0 apples and 0 oranges', 0], ['10 apples and 10 oranges', 20], ['1 apples and 0 oranges', 10], ['0 apples and 5 oranges', 15], ['50 apples and 25 oranges', 100], ['7 apples and 8 oranges', 30]]", "input_output_examples": "[[['5 apples and 6 oranges', 19], ['0 apples and 1 oranges', 3], ['2 apples and 3 oranges', 100], ['100 apples and 1 oranges', 120]], [[8], [2], [95], [19]]]", "weighted_test_consistency": 0.85, "at_least_one_align": true, "ambiguity": 0.37992015235820026}, "repaired_clusters": {"cluster_list": [{"programs_str": ["import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)"], "outputs": "[[8], [2], [95], [19], [0], [0], [9], [10], [25], [15]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['5 apples and 6 oranges', 19], ['0 apples and 1 oranges', 3], ['2 apples and 3 oranges', 100], ['100 apples and 1 oranges', 120], ['0 apples and 0 oranges', 0], ['10 apples and 10 oranges', 20], ['1 apples and 0 oranges', 10], ['0 apples and 5 oranges', 15], ['50 apples and 25 oranges', 100], ['7 apples and 8 oranges', 30]]", "input_output_examples": "[[['5 apples and 6 oranges', 19], ['0 apples and 1 oranges', 3], ['2 apples and 3 oranges', 100], ['100 apples and 1 oranges', 120]], [[8], [2], [95], [19]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": ["import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)"], "failed_inputs_outputs": "[[], [], [], [], [], [], [], [], [], []]"}
{"task_id": "HumanEval/68", "requirement": "from typing import List\n\n\ndef pluck(arr: List[int]) -> List[int]:\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_value = float('inf')\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_value:\n            smallest_value = num\n            smallest_index = i\n    return [smallest_value, smallest_index] if smallest_index != -1 else []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_value = None\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_value is None or num < smallest_value:\n                smallest_value = num\n                smallest_index = i\n    return [smallest_value, smallest_index] if smallest_value is not None else []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_value = float('inf')\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_value:\n            smallest_value = num\n            smallest_index = i\n    return [smallest_value, smallest_index] if smallest_index != -1 else []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_value = None\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_value is None or num < smallest_value:\n                smallest_value = num\n                smallest_index = i\n    if smallest_value is not None:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_value = None\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_value is None or num < smallest_value:\n                smallest_value = num\n                smallest_index = i\n    if smallest_value is not None:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_even is None or num < smallest_even:\n                smallest_even = num\n                smallest_index = i\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_even is None or num < smallest_even:\n                smallest_even = num\n                smallest_index = i\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_even is None or num < smallest_even:\n                smallest_even = num\n                smallest_index = i\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_even is None or num < smallest_even:\n                smallest_even = num\n                smallest_index = i\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_value = None\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_value is None or num < smallest_value:\n                smallest_value = num\n                smallest_index = i\n    if smallest_value is not None:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_value = float('inf')\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_value:\n            smallest_value = num\n            smallest_index = i\n    return [smallest_value, smallest_index] if smallest_index != -1 else []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_even is None or num < smallest_even:\n                smallest_even = num\n                smallest_index = i\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_even is None or num < smallest_even:\n                smallest_even = num\n                smallest_index = i\n    return [smallest_even, smallest_index] if smallest_even is not None else []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_value = float('inf')\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_value:\n            smallest_value = num\n            smallest_index = i\n    return [smallest_value, smallest_index] if smallest_index != -1 else []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_value = float('inf')\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_value:\n            smallest_value = num\n            smallest_index = i\n    return [smallest_value, smallest_index] if smallest_index != -1 else []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_even is None or num < smallest_even:\n                smallest_even = num\n                smallest_index = i\n    return [smallest_even, smallest_index] if smallest_even is not None else []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_even is None or num < smallest_even:\n                smallest_even = num\n                smallest_index = i\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_value = None\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_value is None or num < smallest_value:\n                smallest_value = num\n                smallest_index = i\n    if smallest_value is not None:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_even is None or num < smallest_even:\n                smallest_even = num\n                smallest_index = i\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_even is None or num < smallest_even:\n                smallest_even = num\n                smallest_index = i\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []"], "outputs": "[[[2, 1]], [[2, 1]], [[]], [[0, 1]], [[]], [[2, 0]], [[0, 0]], [[10, 0]], [[]], [[2, 1]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[4, 2, 3]], [[1, 2, 3]], [[]], [[5, 0, 3, 0, 4, 2]], [[1, 3, 5]], [[2, 4, 6, 8]], [[0, 0, 0]], [[10, 20, 30, 40, 50]], [[7, 9, 11]], [[6, 2, 8, 4]]]", "input_output_examples": "[[[[4, 2, 3]], [[1, 2, 3]], [[]], [[5, 0, 3, 0, 4, 2]]], [[[2, 1]], [[2, 1]], [[]], [[0, 1]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/69", "requirement": "from typing import List\n\n\ndef search(lst: List[int]) -> int:\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    '''", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    counter = Counter(lst)\n    result = -1\n    for num, freq in counter.items():\n        if freq >= num and num > result:\n            result = num\n    return result", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    count = Counter(lst)\n    max_num = -1\n    for num, freq in count.items():\n        if freq >= num and num > max_num:\n            max_num = num\n    return max_num", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    count = Counter(lst)\n    max_num = -1\n    for num, freq in count.items():\n        if freq >= num and num > max_num:\n            max_num = num\n    return max_num", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    counter = Counter(lst)\n    max_num = -1\n    for num, freq in counter.items():\n        if freq >= num and num > max_num:\n            max_num = num\n    return max_num", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    counter = Counter(lst)\n    result = -1\n    for num, freq in counter.items():\n        if num > 0 and freq >= num:\n            if num > result:\n                result = num\n    return result", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    counter = Counter(lst)\n    result = -1\n    for num, freq in counter.items():\n        if freq >= num and num > result:\n            result = num\n    return result", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    counter = Counter(lst)\n    max_num = -1\n    for num, freq in counter.items():\n        if num > 0 and freq >= num:\n            if num > max_num:\n                max_num = num\n    return max_num", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    counter = Counter(lst)\n    max_num = -1\n    for num, freq in counter.items():\n        if freq >= num and num > max_num:\n            max_num = num\n    return max_num", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    count = Counter(lst)\n    max_num = -1\n    for num, freq in count.items():\n        if freq >= num and num > max_num:\n            max_num = num\n    return max_num", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    max_num = -1\n    for num, count in freq.items():\n        if num > 0 and count >= num and (num > max_num):\n            max_num = num\n    return max_num", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    counter = Counter(lst)\n    result = -1\n    for num, freq in counter.items():\n        if freq >= num and num > result:\n            result = num\n    return result", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    count = Counter(lst)\n    result = -1\n    for num in count:\n        if num > 0 and count[num] >= num:\n            if num > result:\n                result = num\n    return result", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    count = Counter(lst)\n    result = -1\n    for num, freq in count.items():\n        if freq >= num and num > result:\n            result = num\n    return result", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    result = -1\n    for num, count in freq.items():\n        if num > 0 and count >= num:\n            if num > result:\n                result = num\n    return result", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    counter = Counter(lst)\n    max_val = -1\n    for num, freq in counter.items():\n        if freq >= num and num > max_val:\n            max_val = num\n    return max_val", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    counter = Counter(lst)\n    result = -1\n    for num, freq in counter.items():\n        if freq >= num and num > result:\n            result = num\n    return result", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    result = -1\n    for num, count in freq.items():\n        if num > 0 and count >= num:\n            if num > result:\n                result = num\n    return result", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    counter = Counter(lst)\n    result = -1\n    for num, freq in counter.items():\n        if freq >= num and num > result:\n            result = num\n    return result", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    count = Counter(lst)\n    result = -1\n    for num, freq in count.items():\n        if num > 0 and freq >= num:\n            if num > result:\n                result = num\n    return result", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    count = Counter(lst)\n    result = -1\n    for num, freq in count.items():\n        if freq >= num and num > result:\n            result = num\n    return result"], "outputs": "[[2], [3], [-1], [1], [3], [7], [1], [10], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [1], [2], [3], [4], [5], [5]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[4, 1, 2, 2, 3, 1]], [[1, 2, 2, 3, 3, 3, 4, 4, 4]], [[5, 5, 4, 4, 4]], [[1, 1, 1, 1]], [[2, 2, 2, 3, 3, 3, 3]], [[7, 7, 7, 7, 7, 7, 7]], [[1, 2, 3, 4, 5]], [[10, 10, 10, 10, 10, 10, 10, 10, 10, 10]], [[1]], [[2, 2]], [[3, 3, 3]], [[4, 4, 4, 4]], [[5, 5, 5, 5, 5]], [[6, 6, 6, 6, 6, 6]], [[7, 7, 7, 7, 7, 7, 7]], [[8, 8, 8, 8, 8, 8, 8, 8]], [[9, 9, 9, 9, 9, 9, 9, 9, 9]], [[10, 10, 10, 10, 10, 10, 10, 10, 10, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5]], [[1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]], [[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]], [[1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5]], [[1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5]]]", "input_output_examples": "[[[[4, 1, 2, 2, 3, 1]], [[1, 2, 2, 3, 3, 3, 4, 4, 4]], [[5, 5, 4, 4, 4]]], [[2], [3], [-1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/70", "requirement": "from typing import List\n\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = []\n    lst_copy = sorted(lst.copy())\n    while lst_copy:\n        sorted_lst.append(lst_copy.pop(0))\n        if lst_copy:\n            sorted_lst.append(lst_copy.pop())\n    return sorted_lst", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = []\n    lst_copy = sorted(lst)\n    while lst_copy:\n        sorted_lst.append(lst_copy.pop(0))\n        if lst_copy:\n            sorted_lst.append(lst_copy.pop())\n    return sorted_lst", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = []\n    lst_copy = sorted(lst)\n    while lst_copy:\n        sorted_lst.append(lst_copy.pop(0))\n        if lst_copy:\n            sorted_lst.append(lst_copy.pop(-1))\n    return sorted_lst", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = []\n    lst_copy = sorted(lst)\n    while lst_copy:\n        sorted_lst.append(lst_copy.pop(0))\n        if lst_copy:\n            sorted_lst.append(lst_copy.pop(-1))\n    return sorted_lst", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    result = []\n    lst_sorted = sorted(lst)\n    left, right = (0, len(lst_sorted) - 1)\n    while left <= right:\n        if left == right:\n            result.append(lst_sorted[left])\n        else:\n            result.append(lst_sorted[left])\n            result.append(lst_sorted[right])\n        left += 1\n        right -= 1\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = []\n    lst_copy = sorted(lst.copy())\n    left, right = (0, len(lst_copy) - 1)\n    while left <= right:\n        sorted_lst.append(lst_copy[left])\n        if left != right:\n            sorted_lst.append(lst_copy[right])\n        left += 1\n        right -= 1\n    return sorted_lst", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    result = []\n    lst_sorted = sorted(lst)\n    left, right = (0, len(lst_sorted) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(lst_sorted[left])\n            left += 1\n        else:\n            result.append(lst_sorted[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = []\n    lst_copy = sorted(lst)\n    left, right = (0, len(lst_copy) - 1)\n    while left <= right:\n        sorted_lst.append(lst_copy[left])\n        if left != right:\n            sorted_lst.append(lst_copy[right])\n        left += 1\n        right -= 1\n    return sorted_lst", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    result = []\n    lst_sorted = sorted(lst)\n    left, right = (0, len(lst_sorted) - 1)\n    while left <= right:\n        result.append(lst_sorted[left])\n        if left != right:\n            result.append(lst_sorted[right])\n        left += 1\n        right -= 1\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = []\n    lst_sorted = sorted(lst)\n    left, right = (0, len(lst_sorted) - 1)\n    while left <= right:\n        if left == right:\n            sorted_lst.append(lst_sorted[left])\n        else:\n            sorted_lst.append(lst_sorted[left])\n            sorted_lst.append(lst_sorted[right])\n        left += 1\n        right -= 1\n    return sorted_lst", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    result = []\n    while lst:\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            result.append(max_val)\n            lst.remove(max_val)\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = []\n    lst_sorted = sorted(lst)\n    left, right = (0, len(lst_sorted) - 1)\n    while left <= right:\n        sorted_lst.append(lst_sorted[left])\n        if left != right:\n            sorted_lst.append(lst_sorted[right])\n        left += 1\n        right -= 1\n    return sorted_lst", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    result = []\n    lst_sorted = sorted(lst)\n    left, right = (0, len(lst_sorted) - 1)\n    while left <= right:\n        result.append(lst_sorted[left])\n        if left != right:\n            result.append(lst_sorted[right])\n        left += 1\n        right -= 1\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    result = []\n    lst_sorted = sorted(lst)\n    left, right = (0, len(lst_sorted) - 1)\n    while left <= right:\n        if left == right:\n            result.append(lst_sorted[left])\n        else:\n            result.append(lst_sorted[left])\n            result.append(lst_sorted[right])\n        left += 1\n        right -= 1\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    result = []\n    lst_sorted = sorted(lst)\n    left, right = (0, len(lst_sorted) - 1)\n    while left <= right:\n        result.append(lst_sorted[left])\n        if left != right:\n            result.append(lst_sorted[right])\n        left += 1\n        right -= 1\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = []\n    lst_sorted = sorted(lst)\n    left, right = (0, len(lst_sorted) - 1)\n    while left <= right:\n        sorted_lst.append(lst_sorted[left])\n        if left != right:\n            sorted_lst.append(lst_sorted[right])\n        left += 1\n        right -= 1\n    return sorted_lst", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = []\n    lst_sorted = sorted(lst)\n    left, right = (0, len(lst_sorted) - 1)\n    while left <= right:\n        sorted_lst.append(lst_sorted[left])\n        if left != right:\n            sorted_lst.append(lst_sorted[right])\n        left += 1\n        right -= 1\n    return sorted_lst", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    result = []\n    lst_sorted = sorted(lst)\n    left, right = (0, len(lst_sorted) - 1)\n    while left <= right:\n        if left == right:\n            result.append(lst_sorted[left])\n        else:\n            result.append(lst_sorted[left])\n            result.append(lst_sorted[right])\n        left += 1\n        right -= 1\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = []\n    lst_copy = sorted(lst)\n    left, right = (0, len(lst_copy) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            sorted_lst.append(lst_copy[left])\n            left += 1\n        else:\n            sorted_lst.append(lst_copy[right])\n            right -= 1\n        toggle = not toggle\n    return sorted_lst", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    result = []\n    lst_sorted = sorted(lst)\n    left, right = (0, len(lst_sorted) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(lst_sorted[left])\n            left += 1\n        else:\n            result.append(lst_sorted[right])\n            right -= 1\n        toggle = not toggle\n    return result"], "outputs": "[[[1, 4, 2, 3]], [[5, 5, 5, 5]], [[]], [[10]], [[1, 9, 2, 7, 3]], [[2, 2, 2, 2, 2]], [[1, 9, 2, 8, 3, 7, 4, 6, 5]], [[-4, -1, -3, -2]], [[0, 0, 0, 0]], [[1, 1000, 10, 100]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4]], [[5, 5, 5, 5]], [[]], [[10]], [[7, 3, 1, 9, 2]], [[2, 2, 2, 2, 2]], [[1, 3, 5, 7, 9, 2, 4, 6, 8]], [[-1, -2, -3, -4]], [[0, 0, 0, 0]], [[100, 1, 10, 1000]]]", "input_output_examples": "[[[[1, 2, 3, 4]], [[5, 5, 5, 5]], [[]]], [[[1, 4, 2, 3]], [[5, 5, 5, 5]], [[]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/71", "requirement": "def triangle_area(a: float, b: float, c: float) -> float:\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    '''", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"], "outputs": "[[6.0], [-1], [10.83], [84.0], [-1], [-1], [1.62], [-1], [4330.13]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[3.0, 4.0, 5.0], [1.0, 2.0, 10.0], [5.0, 5.0, 5.0], [7.0, 24.0, 25.0], [0.0, 0.0, 0.0], [-1.0, 2.0, 3.0], [1.5, 2.5, 3.5], [1.0, 1.0, 2.0], [100.0, 100.0, 100.0]]", "input_output_examples": "[[[3, 4, 5], [1, 2, 10]], [[6.0], [-1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/72", "requirement": "from typing import List\n\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    '''", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    is_palindromic = q == q[::-1]\n    sum_elements = sum(q)\n    return is_palindromic and sum_elements <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    is_palindromic = q == q[::-1]\n    sum_elements = sum(q)\n    return is_palindromic and sum_elements <= w"], "outputs": "[[True], [False], [True], [False], [True], [False], [True], [True], [True], [False], [True], [True], [False]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 2, 1], 10], [[1, 2, 3, 4, 5], 15], [[5, 5, 5, 5], 20], [[5, 5, 5, 5], 19], [[1, 2, 1], 5], [[1, 2, 1], 3], [[1], 1], [[1], 2], [[1, 2, 2, 1], 6], [[1, 2, 2, 1], 5], [[], 0], [[], 1], [[1, 3, 1], 0]]", "input_output_examples": "[[[[1, 2], 5], [[3, 2, 3], 1], [[3, 2, 3], 9], [[3], 5]], [[False], [False], [True], [True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/73", "requirement": "from typing import List\n\n\ndef smallest_change(arr: List[int]) -> int:\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes"], "outputs": "[[4], [1], [0], [0], [0], [0], [0], [5], [4], [0], [0], [1], [1], [0], [7], [0], [8], [8], [9], [9]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 5, 4, 7, 9, 6]], [[1, 2, 3, 4, 3, 2, 2]], [[1, 2, 3, 2, 1]], [[1]], [[1, 1]], [[1, 2, 2, 1]], [[1, 2, 3, 4, 5, 5, 4, 3, 2, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 2, 3, 4, 5, 4, 3, 2, 1]], [[1, 2, 1, 2, 1]], [[1, 2, 1, 3, 1]], [[1, 2, 3, 2, 3]], [[1, 2, 3, 4, 4, 3, 2, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [[1, 1, 1, 1, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]]", "input_output_examples": "[[[[1, 2, 3, 5, 4, 7, 9, 6]], [[1, 2, 3, 4, 3, 2, 2]], [[1, 2, 3, 2, 1]]], [[4], [1], [0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/74", "requirement": "from typing import List\n\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    total1 = sum((len(s) for s in lst1))\n    total2 = sum((len(s) for s in lst2))\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    total1 = sum((len(s) for s in lst1))\n    total2 = sum((len(s) for s in lst2))\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    total1 = sum((len(s) for s in lst1))\n    total2 = sum((len(s) for s in lst2))\n    return lst1 if total1 <= total2 else lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    count1 = sum((len(s) for s in lst1))\n    count2 = sum((len(s) for s in lst2))\n    if count1 <= count2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    total1 = sum((len(s) for s in lst1))\n    total2 = sum((len(s) for s in lst2))\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    total1 = sum((len(s) for s in lst1))\n    total2 = sum((len(s) for s in lst2))\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    total1 = sum((len(s) for s in lst1))\n    total2 = sum((len(s) for s in lst2))\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    total1 = sum((len(s) for s in lst1))\n    total2 = sum((len(s) for s in lst2))\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    count1 = sum((len(s) for s in lst1))\n    count2 = sum((len(s) for s in lst2))\n    if count1 <= count2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    total1 = sum((len(s) for s in lst1))\n    total2 = sum((len(s) for s in lst2))\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    total1 = sum((len(s) for s in lst1))\n    total2 = sum((len(s) for s in lst2))\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    total1 = sum((len(s) for s in lst1))\n    total2 = sum((len(s) for s in lst2))\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    count1 = sum((len(s) for s in lst1))\n    count2 = sum((len(s) for s in lst2))\n    return lst1 if count1 <= count2 else lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    total1 = sum((len(s) for s in lst1))\n    total2 = sum((len(s) for s in lst2))\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n\n    def count_chars(lst: List[str]) -> int:\n        return sum((len(s) for s in lst))\n    total1 = count_chars(lst1)\n    total2 = count_chars(lst2)\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    total1 = sum((len(s) for s in lst1))\n    total2 = sum((len(s) for s in lst2))\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    total1 = sum((len(s) for s in lst1))\n    total2 = sum((len(s) for s in lst2))\n    return lst1 if total1 <= total2 else lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    total1 = sum((len(s) for s in lst1))\n    total2 = sum((len(s) for s in lst2))\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    count1 = sum((len(s) for s in lst1))\n    count2 = sum((len(s) for s in lst2))\n    if count1 <= count2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    total1 = sum((len(s) for s in lst1))\n    total2 = sum((len(s) for s in lst2))\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2"], "outputs": "[[[]], [['hI', 'Hi']], [['hi', 'admin']], [['hI', 'hi', 'hi']], [['4']], [['a', 'bb', 'ccc']], [['short']], [['equal', 'chars']], [['a']], [['python']]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[], []], [['hi', 'admin'], ['hI', 'Hi']], [['hi', 'admin'], ['hi', 'hi', 'admin', 'project']], [['hi', 'admin'], ['hI', 'hi', 'hi']], [['4'], ['1', '2', '3', '4', '5']], [['a', 'bb', 'ccc'], ['x', 'yy', 'zzz']], [['short'], ['longer', 'strings']], [['equal', 'chars'], ['same', 'length']], [['a'], ['b']], [['python'], ['java', 'c++']]]", "input_output_examples": "[[[[], []], [['hi', 'admin'], ['hI', 'Hi']], [['hi', 'admin'], ['hi', 'hi', 'admin', 'project']], [['hi', 'admin'], ['hI', 'hi', 'hi']], [['4'], ['1', '2', '3', '4', '5']]], [[[]], [['hI', 'Hi']], [['hi', 'admin']], [['hI', 'hi', 'hi']], [['4']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/75", "requirement": "def is_multiply_prime(a: int) -> bool:\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [x for x in range(2, 100) if is_prime(x)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [x for x in range(2, 100) if is_prime(x)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [x for x in range(2, 100) if is_prime(x)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [x for x in range(2, 100) if is_prime(x)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [x for x in range(2, 100) if is_prime(x)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            for j in range(i, a // i + 1):\n                if a % j == 0 and is_prime(j):\n                    k = a // (i * j)\n                    if is_prime(k) and i * j * k == a:\n                        return True\n    return False", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [x for x in range(2, 100) if is_prime(x)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [x for x in range(2, 100) if is_prime(x)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [x for x in range(2, 100) if is_prime(x)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [x for x in range(2, 100) if is_prime(x)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [x for x in range(2, 100) if is_prime(x)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [x for x in range(2, 100) if is_prime(x)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"], "outputs": "[[True], [True], [False], [False], [True], [True], [True], [False], [False], [False]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[30], [105], [6], [14], [70], [99], [8], [2], [15], [77]]", "input_output_examples": "[[[30]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/76", "requirement": "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    \"\"\"", "repaired_requirement": "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Determine if x is a simple power of n.\n    \n    A number x is a simple power of n if there exists an integer k such that n^k = x.\n    The function handles edge cases where x or n is 1. Specifically:\n    - If x is 1, it is considered a simple power of any n (since n^0 = 1 for any n).\n    - If n is 1, x is a simple power of n only if x is also 1 (since 1^k = 1 for any k).\n    \n    The function uses logarithmic calculations to determine if x is a simple power of n,\n    with a tolerance for floating-point inaccuracies.\n    \n    Args:\n        x (int): The number to check.\n        n (int): The base to check against.\n    \n    Returns:\n        bool: True if x is a simple power of n, False otherwise.\n    \"\"\"", "original_clusters": {"cluster_list": [{"programs_str": ["import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return n == 1\n    if n == 1:\n        return x == 1\n    power = math.log(x, n)\n    return abs(power - round(power)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return n == 1\n    if n == 1:\n        return x == 1\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return n == 1\n    if n == 1:\n        return x == 1\n    power = math.log(x, n)\n    return abs(power - round(power)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return n == 1\n    if n == 1:\n        return x == 1\n    power = math.log(x, n)\n    return abs(power - round(power)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return n == 1\n    if n == 1:\n        return x == 1\n    power = math.log(x, n)\n    return abs(power - round(power)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return n == 1\n    if n == 1:\n        return x == 1\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return n == 1\n    if n == 1:\n        return x == 1\n    power = math.log(x, n)\n    return abs(power - round(power)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return n == 1\n    if n == 1:\n        return x == 1\n    power = math.log(x, n)\n    return abs(power - round(power)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return n == 1\n    if n == 1:\n        return x == 1\n    power = math.log(x, n)\n    return abs(power - round(power)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return n == 1\n    if n == 1:\n        return x == 1\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return n == 1\n    if n == 1:\n        return x == 1\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return n == 1\n    if n == 1:\n        return x == 1\n    power = math.log(x, n)\n    return abs(power - round(power)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return n == 1\n    if n == 1:\n        return x == 1\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10"], "outputs": "[[False], [True], [True], [False], [False], [False], [True], [True], [True], ['ValueError'], [True], [True], [False], [True], [True], [True], [True], [True], [True], [True]]", "probability": 0.65, "is_align_req": false, "test_consistency": 0.8333333333333334, "failed_input_output_examples": "[[[1, 4], [False], [True]]]"}, {"programs_str": ["import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return n == 1\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return n == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x"], "outputs": "[[False], [True], [True], [False], [False], [False], [True], [True], [True], [False], [True], [True], [False], [True], [True], [True], [True], [True], [True], [True]]", "probability": 0.1, "is_align_req": false, "test_consistency": 0.8333333333333334, "failed_input_output_examples": "[[[1, 4], [False], [True]]]"}, {"programs_str": ["import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    power = math.log(x, n)\n    return abs(power - round(power)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    power = math.log(x, n)\n    return abs(power - round(power)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    power = math.log(x, n)\n    return abs(power - round(power)) < 1e-10"], "outputs": "[[True], [True], [True], [False], [False], [False], [True], [True], [True], ['ValueError'], [True], [True], [False], [True], [True], [True], [True], [True], [True], [True]]", "probability": 0.15, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def is_simple_power(x: int, n: int) -> bool:\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x"], "outputs": "[[True], [True], [True], [False], [False], [False], [True], [True], [True], [False], [True], [True], [False], [True], [True], [True], [True], [True], [True], [True]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10"], "outputs": "[[True], [True], [True], [False], ['ZeroDivisionError'], [False], [True], [True], [True], [False], ['ZeroDivisionError'], [True], [False], [True], [True], [True], [True], [True], [True], [True]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.8333333333333334, "failed_input_output_examples": "[[[3, 1], ['ZeroDivisionError'], [False]]]"}], "entropy": 0.6799943144079456, "llm_generated_inputs": "[[1, 4], [2, 2], [8, 2], [3, 2], [3, 1], [5, 3], [16, 2], [27, 3], [64, 4], [0, 2], [1, 1], [9, 3], [10, 3], [100, 10], [81, 9], [256, 2], [1024, 2], [1000, 10], [625, 5], [49, 7]]", "input_output_examples": "[[[1, 4], [2, 2], [8, 2], [3, 2], [3, 1], [5, 3]], [[True], [True], [True], [False], [False], [False]]]", "weighted_test_consistency": 0.8666666666666667, "at_least_one_align": true, "ambiguity": 0.40666382387063943}, "repaired_clusters": {"cluster_list": [{"programs_str": ["import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    log = math.log(x, n)\n    k = round(log)\n    return abs(n ** k - x) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    k = math.log(x, n)\n    return abs(k - round(k)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    log = math.log(x, n)\n    k = round(log)\n    return abs(n ** k - x) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    k = math.log(x, n)\n    return abs(k - round(k)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    log = math.log(x, n)\n    k = round(log)\n    return abs(log - k) < 1e-10 and n ** k == x"], "outputs": "[[True], [True], [True], [False], [False], [False], [True], [True], [True], ['ValueError'], [True], [True], [False], [True], [True], [True], [True], [True], [True], [True]]", "probability": 0.35, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    k = round(log)\n    return abs(log - k) < 1e-10 and n ** k == x", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    k = round(log)\n    return abs(log - k) < 1e-10 and n ** k == x", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    k = round(log)\n    return abs(n ** k - x) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    k = round(log)\n    return abs(n ** k - x) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10"], "outputs": "[[True], [True], [True], [False], [False], [False], [True], [True], [True], [False], [True], [True], [False], [True], [True], [True], [True], [True], [True], [True]]", "probability": 0.65, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.9340680553754911, "llm_generated_inputs": "[[1, 4], [2, 2], [8, 2], [3, 2], [3, 1], [5, 3], [16, 2], [27, 3], [64, 4], [0, 2], [1, 1], [9, 3], [10, 3], [100, 10], [81, 9], [256, 2], [1024, 2], [1000, 10], [625, 5], [49, 7]]", "input_output_examples": "[[[1, 4], [2, 2], [8, 2], [3, 2], [3, 1], [5, 3]], [[True], [True], [True], [False], [False], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.46703402768774555}, "original_passk": 0.0, "repaired_passk": 0.0, "generated_programs": ["import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    k = round(log)\n    return abs(log - k) < 1e-10 and n ** k == x", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    k = math.log(x, n)\n    return abs(k - round(k)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    log = math.log(x, n)\n    k = round(log)\n    return abs(n ** k - x) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    k = round(log)\n    return abs(log - k) < 1e-10 and n ** k == x", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    log = math.log(x, n)\n    k = round(log)\n    return abs(n ** k - x) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    return abs(log - round(log)) < 1e-10", "import math\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if x < 1 or n < 1:\n        return False\n    log = math.log(x, n)\n    k = round(log)\n    return abs(log - k) < 1e-10 and n ** k == x"], "failed_inputs_outputs": "[[[[-2, -2], [False], [True]], [[16, -2], [False], [True]], [[0, 0], [False], [True]], [[-99, -99], [False], [True]]], [[[4722366482869645213695, 4722366482869645213696], [True], [False]], [[4722366482869645213695, 4], [True], [False]], [[4722366482869645213695, 4722366482869645213697], [True], [False]], [[4722366482869645213696, 4722366482869645213695], [True], [False]], [[1099511627776, 1099511627777], [True], [False]], [[1099511627775, 1099511627776], [True], [False]], [[4722366482869645213697, 4722366482869645213695], [True], [False]], [[4722366482869645213695, 2], [True], [False]], [[4722366482869645213698, 4722366482869645213695], [True], [False]], [[1099511627778, 1099511627777], [True], [False]], [[1099511627777, 1099511627776], [True], [False]], [[1099511627775, 1099511627774], [True], [False]], [[1099511627775, 2], [True], [False]], [[1099511627778, 1099511627779], [True], [False]], [[-1, 0], ['ValueError'], [False]], [[-1, -2], ['ValueError'], [False]], [[1099511627774, -2], ['ValueError'], [False]], [[-2, 0], ['ValueError'], [False]], [[6, -2], ['ValueError'], [False]], [[4722366482869645213695, 4722366482869645213694], [True], [False]], [[-2, -2], ['ValueError'], [True]], [[-1, 1099511627775], ['ValueError'], [False]], [[26, -2], ['ValueError'], [False]], [[-2, 5], ['ValueError'], [False]], [[-1, 67], ['ValueError'], [False]], [[4722366482869645213694, 4722366482869645213693], [True], [False]], [[4722366482869645213699, 4722366482869645213695], [True], [False]], [[1099511627777, 1099511627778], [True], [False]], [[0, 2], ['ValueError'], [False]], [[-8, 2], ['ValueError'], [False]], [[16, -2], ['ValueError'], [True]], [[0, 0], ['ValueError'], [True]], [[-1, 2], ['ValueError'], [False]], [[10, -3], ['ValueError'], [False]], [[4722366482869645213695, 16777216], [True], [False]], [[4722366482869645213694, 4722366482869645213695], [True], [False]], [[1099511627777, 2], [True], [False]], [[0, 3], ['ValueError'], [False]], [[4722366482869645213694, 4722366482869645213696], [True], [False]], [[4722366482869645213694, 16777216], [True], [False]], [[2187, -99], ['ValueError'], [False]], [[0, 82], ['ValueError'], [False]], [[-99, -99], ['ValueError'], [True]], [[4722366482869645213695, 8], [True], [False]], [[-99, 4722366482869645213695], ['ValueError'], [False]], [[-75, -73], ['ValueError'], [False]], [[-100, 4722366482869645213695], ['ValueError'], [False]], [[-74, -75], ['ValueError'], [False]], [[4722366482869645213693, 4722366482869645213694], [True], [False]], [[-100, -99], ['ValueError'], [False]], [[10, -73], ['ValueError'], [False]], [[3, -74], ['ValueError'], [False]], [[2, -73], ['ValueError'], [False]], [[1099511627780, -99], ['ValueError'], [False]], [[-100, 4722366482869645213694], ['ValueError'], [False]], [[1099511627780, -100], ['ValueError'], [False]], [[-56, 81], ['ValueError'], [False]], [[-74, 8192], ['ValueError'], [False]], [[-72, -73], ['ValueError'], [False]], [[245, -72], ['ValueError'], [False]], [[8193, -16], ['ValueError'], [False]], [[241, -99], ['ValueError'], [False]], [[1099511627779, 1099511627780], [True], [False]], [[-101, 4722366482869645213695], ['ValueError'], [False]], [[-71, -73], ['ValueError'], [False]], [[8191, -100], ['ValueError'], [False]], [[-72, 6], ['ValueError'], [False]], [[-99, 65535], ['ValueError'], [False]], [[2188, -99], ['ValueError'], [False]], [[-71, 2187], ['ValueError'], [False]], [[2187, -72], ['ValueError'], [False]], [[-56, 245], ['ValueError'], [False]], [[1099511627780, -16], ['ValueError'], [False]], [[243, -70], ['ValueError'], [False]]], [[[4722366482869645213695, 4722366482869645213696], [True], [False]], [[4722366482869645213695, 4], [True], [False]], [[4722366482869645213695, 4722366482869645213697], [True], [False]], [[4722366482869645213696, 4722366482869645213695], [True], [False]], [[1099511627776, 1099511627777], [True], [False]], [[1099511627775, 1099511627776], [True], [False]], [[4722366482869645213697, 4722366482869645213695], [True], [False]], [[4722366482869645213695, 2], [True], [False]], [[4722366482869645213698, 4722366482869645213695], [True], [False]], [[1099511627778, 1099511627777], [True], [False]], [[1099511627777, 1099511627776], [True], [False]], [[1099511627775, 1099511627774], [True], [False]], [[1099511627775, 2], [True], [False]], [[1099511627778, 1099511627779], [True], [False]], [[4722366482869645213695, 4722366482869645213694], [True], [False]], [[-2, -2], [False], [True]], [[4722366482869645213694, 4722366482869645213693], [True], [False]], [[4722366482869645213699, 4722366482869645213695], [True], [False]], [[1099511627777, 1099511627778], [True], [False]], [[16, -2], [False], [True]], [[0, 0], [False], [True]], [[4722366482869645213695, 16777216], [True], [False]], [[4722366482869645213694, 4722366482869645213695], [True], [False]], [[1099511627777, 2], [True], [False]], [[4722366482869645213694, 4722366482869645213696], [True], [False]], [[4722366482869645213694, 16777216], [True], [False]], [[-99, -99], [False], [True]], [[4722366482869645213695, 8], [True], [False]], [[4722366482869645213693, 4722366482869645213694], [True], [False]], [[1099511627779, 1099511627780], [True], [False]]], [[[-1, 0], ['ValueError'], [False]], [[-1, -2], ['ValueError'], [False]], [[1099511627774, -2], ['ValueError'], [False]], [[-2, 0], ['ValueError'], [False]], [[6, -2], ['ValueError'], [False]], [[-2, -2], ['ValueError'], [True]], [[-1, 1099511627775], ['ValueError'], [False]], [[26, -2], ['ValueError'], [False]], [[-2, 5], ['ValueError'], [False]], [[-1, 67], ['ValueError'], [False]], [[0, 2], ['ValueError'], [False]], [[-8, 2], ['ValueError'], [False]], [[16, -2], ['ValueError'], [True]], [[0, 0], ['ValueError'], [True]], [[-1, 2], ['ValueError'], [False]], [[10, -3], ['ValueError'], [False]], [[0, 3], ['ValueError'], [False]], [[2187, -99], ['ValueError'], [False]], [[0, 82], ['ValueError'], [False]], [[-99, -99], ['ValueError'], [True]], [[-99, 4722366482869645213695], ['ValueError'], [False]], [[-75, -73], ['ValueError'], [False]], [[-100, 4722366482869645213695], ['ValueError'], [False]], [[-74, -75], ['ValueError'], [False]], [[-100, -99], ['ValueError'], [False]], [[10, -73], ['ValueError'], [False]], [[3, -74], ['ValueError'], [False]], [[2, -73], ['ValueError'], [False]], [[1099511627780, -99], ['ValueError'], [False]], [[-100, 4722366482869645213694], ['ValueError'], [False]], [[1099511627780, -100], ['ValueError'], [False]], [[-56, 81], ['ValueError'], [False]], [[-74, 8192], ['ValueError'], [False]], [[-72, -73], ['ValueError'], [False]], [[245, -72], ['ValueError'], [False]], [[8193, -16], ['ValueError'], [False]], [[241, -99], ['ValueError'], [False]], [[-101, 4722366482869645213695], ['ValueError'], [False]], [[-71, -73], ['ValueError'], [False]], [[8191, -100], ['ValueError'], [False]], [[-72, 6], ['ValueError'], [False]], [[-99, 65535], ['ValueError'], [False]], [[2188, -99], ['ValueError'], [False]], [[-71, 2187], ['ValueError'], [False]], [[2187, -72], ['ValueError'], [False]], [[-56, 245], ['ValueError'], [False]], [[1099511627780, -16], ['ValueError'], [False]], [[243, -70], ['ValueError'], [False]]], [[[-2, -2], [False], [True]], [[16, -2], [False], [True]], [[0, 0], [False], [True]], [[-99, -99], [False], [True]]], [[[4722366482869645213695, 4722366482869645213696], [True], [False]], [[4722366482869645213695, 4], [True], [False]], [[4722366482869645213695, 4722366482869645213697], [True], [False]], [[4722366482869645213696, 4722366482869645213695], [True], [False]], [[1099511627776, 1099511627777], [True], [False]], [[1099511627775, 1099511627776], [True], [False]], [[4722366482869645213697, 4722366482869645213695], [True], [False]], [[4722366482869645213695, 2], [True], [False]], [[4722366482869645213698, 4722366482869645213695], [True], [False]], [[1099511627778, 1099511627777], [True], [False]], [[1099511627777, 1099511627776], [True], [False]], [[1099511627775, 1099511627774], [True], [False]], [[1099511627775, 2], [True], [False]], [[1099511627778, 1099511627779], [True], [False]], [[4722366482869645213695, 4722366482869645213694], [True], [False]], [[-2, -2], [False], [True]], [[4722366482869645213694, 4722366482869645213693], [True], [False]], [[4722366482869645213699, 4722366482869645213695], [True], [False]], [[1099511627777, 1099511627778], [True], [False]], [[16, -2], [False], [True]], [[0, 0], [False], [True]], [[4722366482869645213695, 16777216], [True], [False]], [[4722366482869645213694, 4722366482869645213695], [True], [False]], [[1099511627777, 2], [True], [False]], [[4722366482869645213694, 4722366482869645213696], [True], [False]], [[4722366482869645213694, 16777216], [True], [False]], [[-99, -99], [False], [True]], [[4722366482869645213695, 8], [True], [False]], [[4722366482869645213693, 4722366482869645213694], [True], [False]], [[1099511627779, 1099511627780], [True], [False]]], [[[4722366482869645213695, 4722366482869645213696], [True], [False]], [[4722366482869645213695, 4], [True], [False]], [[4722366482869645213695, 4722366482869645213697], [True], [False]], [[4722366482869645213696, 4722366482869645213695], [True], [False]], [[1099511627776, 1099511627777], [True], [False]], [[1099511627775, 1099511627776], [True], [False]], [[4722366482869645213697, 4722366482869645213695], [True], [False]], [[4722366482869645213695, 2], [True], [False]], [[4722366482869645213698, 4722366482869645213695], [True], [False]], [[1099511627778, 1099511627777], [True], [False]], [[1099511627777, 1099511627776], [True], [False]], [[1099511627775, 1099511627774], [True], [False]], [[1099511627775, 2], [True], [False]], [[1099511627778, 1099511627779], [True], [False]], [[4722366482869645213695, 4722366482869645213694], [True], [False]], [[-2, -2], [False], [True]], [[4722366482869645213694, 4722366482869645213693], [True], [False]], [[4722366482869645213699, 4722366482869645213695], [True], [False]], [[1099511627777, 1099511627778], [True], [False]], [[16, -2], [False], [True]], [[0, 0], [False], [True]], [[4722366482869645213695, 16777216], [True], [False]], [[4722366482869645213694, 4722366482869645213695], [True], [False]], [[1099511627777, 2], [True], [False]], [[4722366482869645213694, 4722366482869645213696], [True], [False]], [[4722366482869645213694, 16777216], [True], [False]], [[-99, -99], [False], [True]], [[4722366482869645213695, 8], [True], [False]], [[4722366482869645213693, 4722366482869645213694], [True], [False]], [[1099511627779, 1099511627780], [True], [False]]], [[[-1, 0], ['ValueError'], [False]], [[-1, -2], ['ValueError'], [False]], [[1099511627774, -2], ['ValueError'], [False]], [[-2, 0], ['ValueError'], [False]], [[6, -2], ['ValueError'], [False]], [[-2, -2], ['ValueError'], [True]], [[-1, 1099511627775], ['ValueError'], [False]], [[26, -2], ['ValueError'], [False]], [[-2, 5], ['ValueError'], [False]], [[-1, 67], ['ValueError'], [False]], [[0, 2], ['ValueError'], [False]], [[-8, 2], ['ValueError'], [False]], [[16, -2], ['ValueError'], [True]], [[0, 0], ['ValueError'], [True]], [[-1, 2], ['ValueError'], [False]], [[10, -3], ['ValueError'], [False]], [[0, 3], ['ValueError'], [False]], [[2187, -99], ['ValueError'], [False]], [[0, 82], ['ValueError'], [False]], [[-99, -99], ['ValueError'], [True]], [[-99, 4722366482869645213695], ['ValueError'], [False]], [[-75, -73], ['ValueError'], [False]], [[-100, 4722366482869645213695], ['ValueError'], [False]], [[-74, -75], ['ValueError'], [False]], [[-100, -99], ['ValueError'], [False]], [[10, -73], ['ValueError'], [False]], [[3, -74], ['ValueError'], [False]], [[2, -73], ['ValueError'], [False]], [[1099511627780, -99], ['ValueError'], [False]], [[-100, 4722366482869645213694], ['ValueError'], [False]], [[1099511627780, -100], ['ValueError'], [False]], [[-56, 81], ['ValueError'], [False]], [[-74, 8192], ['ValueError'], [False]], [[-72, -73], ['ValueError'], [False]], [[245, -72], ['ValueError'], [False]], [[8193, -16], ['ValueError'], [False]], [[241, -99], ['ValueError'], [False]], [[-101, 4722366482869645213695], ['ValueError'], [False]], [[-71, -73], ['ValueError'], [False]], [[8191, -100], ['ValueError'], [False]], [[-72, 6], ['ValueError'], [False]], [[-99, 65535], ['ValueError'], [False]], [[2188, -99], ['ValueError'], [False]], [[-71, 2187], ['ValueError'], [False]], [[2187, -72], ['ValueError'], [False]], [[-56, 245], ['ValueError'], [False]], [[1099511627780, -16], ['ValueError'], [False]], [[243, -70], ['ValueError'], [False]]], [[[4722366482869645213695, 4722366482869645213696], [True], [False]], [[4722366482869645213695, 4], [True], [False]], [[4722366482869645213695, 4722366482869645213697], [True], [False]], [[4722366482869645213696, 4722366482869645213695], [True], [False]], [[1099511627776, 1099511627777], [True], [False]], [[1099511627775, 1099511627776], [True], [False]], [[4722366482869645213697, 4722366482869645213695], [True], [False]], [[4722366482869645213695, 2], [True], [False]], [[4722366482869645213698, 4722366482869645213695], [True], [False]], [[1099511627778, 1099511627777], [True], [False]], [[1099511627777, 1099511627776], [True], [False]], [[1099511627775, 1099511627774], [True], [False]], [[1099511627775, 2], [True], [False]], [[1099511627778, 1099511627779], [True], [False]], [[4722366482869645213695, 4722366482869645213694], [True], [False]], [[-2, -2], [False], [True]], [[4722366482869645213694, 4722366482869645213693], [True], [False]], [[4722366482869645213699, 4722366482869645213695], [True], [False]], [[1099511627777, 1099511627778], [True], [False]], [[16, -2], [False], [True]], [[0, 0], [False], [True]], [[4722366482869645213695, 16777216], [True], [False]], [[4722366482869645213694, 4722366482869645213695], [True], [False]], [[1099511627777, 2], [True], [False]], [[4722366482869645213694, 4722366482869645213696], [True], [False]], [[4722366482869645213694, 16777216], [True], [False]], [[-99, -99], [False], [True]], [[4722366482869645213695, 8], [True], [False]], [[4722366482869645213693, 4722366482869645213694], [True], [False]], [[1099511627779, 1099511627780], [True], [False]]], [[[-2, -2], [False], [True]], [[16, -2], [False], [True]], [[0, 0], [False], [True]], [[-99, -99], [False], [True]]]]"}
{"task_id": "HumanEval/77", "requirement": "def iscube(a: int) -> bool:\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    '''", "repaired_requirement": "def iscube(a: int) -> bool:\n    \"\"\"\n    Determine if the integer `a` is a perfect cube of some integer.\n\n    Args:\n        a (int): The integer to check. Can be positive, negative, or zero.\n\n    Returns:\n        bool: True if `a` is a perfect cube, False otherwise.\n\n    Notes:\n        - The function handles negative inputs by first converting them to positive,\n          computing the cube root, and then negating the result to maintain the correct sign.\n        - The cube root is rounded to the nearest integer to account for floating-point inaccuracies.\n    \"\"\"", "original_clusters": {"cluster_list": [{"programs_str": ["import math\n\ndef iscube(a: int) -> bool:\n    cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a"], "outputs": "[[True], [False], ['TypeError'], [True], [True], [False], [True], ['TypeError'], [True], ['TypeError'], [True], ['TypeError'], [True], ['TypeError'], [True], ['TypeError'], [False], ['TypeError']]", "probability": 0.8, "is_align_req": false, "test_consistency": 0.8333333333333334, "failed_input_output_examples": "[[[-1], ['TypeError'], [True]]]"}, {"programs_str": ["import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -(-a) ** (1 / 3)\n    else:\n        cube_root = a ** (1 / 3)\n    return round(cube_root) ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -(-a) ** (1 / 3)\n    else:\n        cube_root = a ** (1 / 3)\n    return round(cube_root) ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a"], "outputs": "[[True], [False], [True], [True], [True], [False], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [False], [False]]", "probability": 0.2, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7219280948873623, "llm_generated_inputs": "[[1], [2], [-1], [64], [0], [180], [27], [-27], [1000], [-1000], [8], [-8], [125], [-125], [1000000], [-1000000], [123456789], [-123456789]]", "input_output_examples": "[[[1], [2], [-1], [64], [0], [180]], [[True], [False], [True], [True], [True], [False]]]", "weighted_test_consistency": 0.8666666666666667, "at_least_one_align": true, "ambiguity": 0.4276307141103478}, "repaired_clusters": {"cluster_list": [{"programs_str": ["import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a"], "outputs": "[[True], [False], [True], [True], [True], [False], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [False], [False]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [-1], [64], [0], [180], [27], [-27], [1000], [-1000], [8], [-8], [125], [-125], [1000000], [-1000000], [123456789], [-123456789]]", "input_output_examples": "[[[1], [2], [-1], [64], [0], [180]], [[True], [False], [True], [True], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "original_passk": 0.4, "repaired_passk": 1.0, "generated_programs": ["import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a", "import math\n\ndef iscube(a: int) -> bool:\n    if a < 0:\n        cube_root = -round(abs(a) ** (1 / 3))\n    else:\n        cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a"], "failed_inputs_outputs": "[[], [], [], [], [], [], [], [], [], []]"}
{"task_id": "HumanEval/78", "requirement": "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def hex_key(num: str) -> int:\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))", "def hex_key(num: str) -> int:\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))", "def hex_key(num: str) -> int:\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))", "def hex_key(num: str) -> int:\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))", "def hex_key(num: str) -> int:\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))", "def hex_key(num: str) -> int:\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))", "def hex_key(num: str) -> int:\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))", "def hex_key(num: str) -> int:\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))", "def hex_key(num: str) -> int:\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))", "def hex_key(num: str) -> int:\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))", "def hex_key(num: str) -> int:\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))", "def hex_key(num: str) -> int:\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))", "def hex_key(num: str) -> int:\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))", "def hex_key(num: str) -> int:\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))", "def hex_key(num: str) -> int:\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))", "def hex_key(num: str) -> int:\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))", "def hex_key(num: str) -> int:\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))", "def hex_key(num: str) -> int:\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))", "def hex_key(num: str) -> int:\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))", "def hex_key(num: str) -> int:\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for digit in num if digit in primes))"], "outputs": "[[1], [2], [4], [6], [2], [3], [2], [2], [0], [0], [0], [0]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['AB'], ['1077E'], ['ABED1A33'], ['123456789ABCDEF0'], ['2020'], ['2F5A3C'], ['B0B1E'], ['D7A9'], ['0'], ['1'], ['F'], ['']]", "input_output_examples": "[[['AB'], ['1077E'], ['ABED1A33'], ['123456789ABCDEF0'], ['2020']], [[1], [2], [4], [6], [2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/79", "requirement": "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def decimal_to_binary(decimal: int) -> str:\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'", "def decimal_to_binary(decimal: int) -> str:\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'", "def decimal_to_binary(decimal: int) -> str:\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'", "def decimal_to_binary(decimal: int) -> str:\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'", "def decimal_to_binary(decimal: int) -> str:\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'", "def decimal_to_binary(decimal: int) -> str:\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'", "def decimal_to_binary(decimal: int) -> str:\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'", "def decimal_to_binary(decimal: int) -> str:\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'", "def decimal_to_binary(decimal: int) -> str:\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'", "def decimal_to_binary(decimal: int) -> str:\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'", "def decimal_to_binary(decimal: int) -> str:\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'", "def decimal_to_binary(decimal: int) -> str:\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'", "def decimal_to_binary(decimal: int) -> str:\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'", "def decimal_to_binary(decimal: int) -> str:\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'", "def decimal_to_binary(decimal: int) -> str:\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'", "def decimal_to_binary(decimal: int) -> str:\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'", "def decimal_to_binary(decimal: int) -> str:\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'", "def decimal_to_binary(decimal: int) -> str:\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'", "def decimal_to_binary(decimal: int) -> str:\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'", "def decimal_to_binary(decimal: int) -> str:\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'"], "outputs": "[['db0db'], ['db1db'], ['db10db'], ['db1111db'], ['db100000db'], ['db11111111db'], ['db10000000000db'], ['dbb1db'], ['dbb1111db']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [15], [32], [255], [1024], [-1], [-15]]", "input_output_examples": "[[[15], [32]], [['db1111db'], ['db100000db']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/80", "requirement": "def is_happy(s: str) -> bool:\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"], "outputs": "[[False], [False], [True], [False], [True], [False], [True], [False], [True], [False], [True], [False], [True], [False], [False], [True], [False], [True]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['a'], ['aa'], ['abcd'], ['aabb'], ['adb'], ['xyy'], ['abcdef'], ['aabcc'], ['xyzxyz'], ['xxyz'], ['abcabc'], ['aaa'], ['abcde'], ['aabbcc'], ['ababab'], ['xyzxy'], ['abacaba'], ['abcdefgh']]", "input_output_examples": "[[['a'], ['aa'], ['abcd'], ['aabb'], ['adb'], ['xyy']], [[False], [False], [True], [False], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/81", "requirement": "from typing import List\n\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"], "outputs": "[[['A+']], [['A']], [['A-']], [['B+']], [['B']], [['B-']], [['C+']], [['C']], [['C-']], [['D+']], [['D']], [['D-']], [['E']], [['A+', 'B', 'C-', 'C', 'A-']], [['D-', 'D', 'C+', 'A-', 'A+']], [['E', 'E', 'E', 'E', 'E']], [['D+', 'B-', 'B+', 'A+', 'D-']], [[]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[4.0]], [[3.8]], [[3.5]], [[3.2]], [[2.9]], [[2.5]], [[2.2]], [[1.9]], [[1.5]], [[1.2]], [[0.9]], [[0.5]], [[0.0]], [[4.0, 3.0, 1.7, 2.0, 3.5]], [[0.1, 1.0, 2.3, 3.7, 4.0]], [[0.0, 0.0, 0.0, 0.0, 0.0]], [[1.3, 2.7, 3.3, 4.0, 0.7]], [[]]]", "input_output_examples": "[[[[4.0, 3, 1.7, 2, 3.5]]], [[['A+', 'B', 'C-', 'C', 'A-']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/82", "requirement": "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["import math\n\ndef prime_length(string: str) -> bool:\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string: str) -> bool:\n    return is_prime(len(string))", "import math\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string: str) -> bool:\n    return is_prime(len(string))", "import math\n\ndef prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))", "import math\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string: str) -> bool:\n    return is_prime(len(string))", "import math\n\ndef prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))", "import math\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string: str) -> bool:\n    return is_prime(len(string))", "import math\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string: str) -> bool:\n    return is_prime(len(string))", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string: str) -> bool:\n    return is_prime(len(string))", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string: str) -> bool:\n    return is_prime(len(string))", "import math\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string: str) -> bool:\n    return is_prime(len(string))", "import math\n\ndef prime_length(string: str) -> bool:\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True", "import math\n\ndef prime_length(string: str) -> bool:\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string: str) -> bool:\n    return is_prime(len(string))", "import math\n\ndef prime_length(string: str) -> bool:\n    n = len(string)\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string: str) -> bool:\n    return is_prime(len(string))", "import math\n\ndef prime_length(string: str) -> bool:\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string: str) -> bool:\n    return is_prime(len(string))", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string: str) -> bool:\n    return is_prime(len(string))", "import math\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string: str) -> bool:\n    return is_prime(len(string))"], "outputs": "[[True], [True], [True], [False], [False], [True], [False], [False], [False], [False]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Hello'], ['abcdcba'], ['kittens'], ['orange'], ['a'], ['aa'], [''], ['abcdefghijklmno'], ['abcdefghijklmnopqrstuvwxyz'], ['abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ']]", "input_output_examples": "[[['Hello'], ['abcdcba'], ['kittens'], ['orange']], [[True], [True], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/83", "requirement": "def starts_one_ends(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"", "repaired_requirement": "def starts_one_ends(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n\n    The function calculates the count using the formula:\n    - If n == 1, return 1.\n    - Otherwise, return 2 * 10 ** (n - 1) - 10 ** (n - 2).\n\n    This formula ensures that the count includes all n-digit numbers that start with 1,\n    all n-digit numbers that end with 1, and subtracts the overlap where numbers both start\n    and end with 1 to avoid double-counting.\n\n    Examples:\n    - For n = 1, the result is 1.\n    - For n = 2, the result is 19.\n    - For n = 3, the result is 190.\n    \"\"\"", "original_clusters": {"cluster_list": [{"programs_str": ["import math\n\ndef starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 0\n    total += 10 ** (n - 1)\n    total += 10 ** (n - 1)\n    total -= 10 ** (n - 2)\n    return total", "import math\n\ndef starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "import math\n\ndef starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 10 ** (n - 1) + 10 ** (n - 1) - 10 ** (n - 2)", "import math\n\ndef starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 10 ** (n - 1)\n    total += 10 ** (n - 1)\n    total -= 10 ** (n - 2)\n    return total"], "outputs": "[[1], [19], [190], [190000000], [1900000000], [0.19], [0.019]]", "probability": 0.3, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 9 * 10 ** (n - 2) + 9 * 10 ** (n - 2) - 9 * 10 ** (n - 2) // 10"], "outputs": "[[1], [18], [171], [171000000], [1710000000], [0.18], [0.018000000000000002]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    starts_with_one = 1 * 10 ** (n - 1)\n    ends_with_one = 9 * 10 ** (n - 2)\n    return starts_with_one + ends_with_one - 1"], "outputs": "[[1], [18], [189], [189999999], [1899999999], [-0.81], [-0.981]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    starts_with_one = 1 * 10 ** (n - 1)\n    ends_with_one = 9 * 10 ** (n - 2)\n    return starts_with_one + ends_with_one - 1 * 10 ** (n - 2)", "import math\n\ndef starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    starts_with_one = 1 * 10 ** (n - 1)\n    ends_with_one = 9 * 10 ** (n - 2)\n    both = 1 * 10 ** (n - 2)\n    return starts_with_one + ends_with_one - both", "import math\n\ndef starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    starts_with_one = 1 * 10 ** (n - 1)\n    ends_with_one = 9 * 10 ** (n - 2)\n    starts_and_ends_with_one = 1 * 10 ** (n - 2)\n    return starts_with_one + ends_with_one - starts_and_ends_with_one", "import math\n\ndef starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    starts_with_one = 1 * 10 ** (n - 1)\n    ends_with_one = 9 * 10 ** (n - 2)\n    both = 1 * 10 ** (n - 2)\n    return starts_with_one + ends_with_one - both", "import math\n\ndef starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    starts_with_one = 1 * 10 ** (n - 1)\n    ends_with_one = 9 * 10 ** (n - 2)\n    overlap = 1 * 10 ** (n - 2)\n    return starts_with_one + ends_with_one - overlap", "import math\n\ndef starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_numbers = 9 * 10 ** (n - 1)\n    starts_with_one = 1 * 10 ** (n - 1)\n    ends_with_one = 9 * 10 ** (n - 2)\n    both_start_and_end_with_one = 1 * 10 ** (n - 2)\n    return starts_with_one + ends_with_one - both_start_and_end_with_one"], "outputs": "[[1], [18], [180], [180000000], [1800000000], [0.18], [0.018000000000000002]]", "probability": 0.3, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 10 ** n\n    not_start_with_1 = 9 * 10 ** (n - 1)\n    not_end_with_1 = 9 * 10 ** (n - 1)\n    not_start_and_not_end_with_1 = 9 * 9 * 10 ** (n - 2)\n    return total - not_start_with_1 - not_end_with_1 + not_start_and_not_end_with_1"], "outputs": "[[1], [1], [10], [10000000], [100000000], [0.010000000000000009], [0.0010000000000000148]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def starts_one_ends(n: int) -> int:\n    if n < 1:\n        return 0\n    total_numbers = 9 * 10 ** (n - 1)\n    starts_with_one = 1 * 10 ** (n - 1)\n    ends_with_one = 9 * 10 ** (n - 2)\n    overlap = 1 * 10 ** (n - 2)\n    return starts_with_one + ends_with_one - overlap"], "outputs": "[[1.7999999999999998], [18], [180], [180000000], [1800000000], [0], [0]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_numbers = 9 * 10 ** (n - 1)\n    numbers_not_starting_with_1 = 8 * 10 ** (n - 1)\n    numbers_not_ending_with_1 = 9 * 10 ** (n - 1) - 1\n    numbers_neither_starting_nor_ending_with_1 = 8 * 9 ** (n - 1)\n    return total_numbers - numbers_neither_starting_nor_ending_with_1", "import math\n\ndef starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_numbers = 9 * 10 ** (n - 1)\n    numbers_not_starting_with_1 = 8 * 10 ** (n - 1)\n    numbers_not_ending_with_1 = 9 * 10 ** (n - 1) - 9 ** (n - 1)\n    numbers_not_starting_or_ending_with_1 = 8 * 9 ** (n - 1)\n    result = total_numbers - numbers_not_starting_or_ending_with_1\n    return result"], "outputs": "[[1], [18], [252], [555626232], [5900636088], [0.011111111111111183], [-0.00876543209876543]]", "probability": 0.1, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 10 ** (n - 1)\n    return 2 * total - 1"], "outputs": "[[1], [19], [199], [199999999], [1999999999], [-0.8], [-0.98]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 10 ** n\n    not_start_not_end = 8 * 9 ** (n - 1)\n    return total - not_start_not_end"], "outputs": "[[1], [28], [352], [655626232], [6900636088], [0.11111111111111116], [0.001234567901234579]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8425911001804108, "llm_generated_inputs": "[[1], [2], [3], [9], [10], [0], [-1]]", "input_output_examples": "[[], []]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.4212955500902054}, "repaired_clusters": {"cluster_list": [{"programs_str": ["def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)"], "outputs": "[[1], [19], [190], [190000000], [1900000000], [0.19], [0.019]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [3], [9], [10], [0], [-1]]", "input_output_examples": "[[], []]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "original_passk": 0.0, "repaired_passk": 0.0, "generated_programs": ["def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)"], "failed_inputs_outputs}
{"task_id": "HumanEval/84", "requirement": "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def solve(N: int) -> str:\n    total_sum = sum((int(digit) for digit in str(N)))\n    return bin(total_sum)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(digit) for digit in str(N)))\n    return bin(digit_sum)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(digit) for digit in str(N)))\n    return bin(digit_sum)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(digit) for digit in str(N)))\n    return bin(digit_sum)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(digit) for digit in str(N)))\n    return bin(digit_sum)[2:]", "def solve(N: int) -> str:\n    total_sum = sum((int(digit) for digit in str(N)))\n    return bin(total_sum)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(digit) for digit in str(N)))\n    return bin(digit_sum)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(digit) for digit in str(N)))\n    return bin(digit_sum)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(digit) for digit in str(N)))\n    return bin(digit_sum)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(digit) for digit in str(N)))\n    return bin(digit_sum)[2:]", "def solve(N: int) -> str:\n    total_sum = sum((int(digit) for digit in str(N)))\n    return bin(total_sum)[2:]", "def solve(N: int) -> str:\n    sum_digits = sum((int(digit) for digit in str(N)))\n    return bin(sum_digits)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(digit) for digit in str(N)))\n    return bin(digit_sum)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(digit) for digit in str(N)))\n    return bin(digit_sum)[2:]", "def solve(N: int) -> str:\n    total = sum((int(digit) for digit in str(N)))\n    return bin(total)[2:]", "def solve(N: int) -> str:\n    total = sum((int(digit) for digit in str(N)))\n    return bin(total)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(digit) for digit in str(N)))\n    return bin(digit_sum)[2:]", "def solve(N: int) -> str:\n    total_sum = sum((int(digit) for digit in str(N)))\n    return bin(total_sum)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(digit) for digit in str(N)))\n    return bin(digit_sum)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(digit) for digit in str(N)))\n    return bin(digit_sum)[2:]"], "outputs": "[['1'], ['110'], ['1100'], ['0'], ['1'], ['100100'], ['1111'], ['1'], ['10'], ['1']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1000], [150], [147], [0], [1], [9999], [12345], [10], [101], [10000]]", "input_output_examples": "[[[1000], [150], [147]], [['1'], ['110'], ['1100']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/85", "requirement": "from typing import List\n\n\ndef add(lst: List[int]) -> int:\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))"], "outputs": "[[2], [0], [12], [0], [30], [42], [0], [0], [0]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[4, 2, 6, 7]], [[1, 3, 5, 7]], [[2, 4, 6, 8]], [[0, 0, 0, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[11, 12, 13, 14, 15, 16]], [[100, 101, 102, 103, 104]], [[1]], [[2]]]", "input_output_examples": "[[[[4, 2, 6, 7]]], [[2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/86", "requirement": "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def anti_shuffle(s: str) -> str:\n    return ' '.join((''.join(sorted(word)) for word in s.split(' ')))", "def anti_shuffle(s: str) -> str:\n    return ' '.join((''.join(sorted(word)) for word in s.split(' ')))", "def anti_shuffle(s: str) -> str:\n    return ' '.join((''.join(sorted(word)) for word in s.split(' ')))", "def anti_shuffle(s: str) -> str:\n    return ' '.join((''.join(sorted(word)) for word in s.split(' ')))", "def anti_shuffle(s: str) -> str:\n    return ' '.join((''.join(sorted(word)) for word in s.split(' ')))", "def anti_shuffle(s: str) -> str:\n    return ' '.join((''.join(sorted(word)) for word in s.split(' ')))", "def anti_shuffle(s: str) -> str:\n    return ' '.join((''.join(sorted(word)) for word in s.split(' ')))", "def anti_shuffle(s: str) -> str:\n    return ' '.join((''.join(sorted(word)) for word in s.split(' ')))", "def anti_shuffle(s: str) -> str:\n    return ' '.join((''.join(sorted(word)) for word in s.split(' ')))", "def anti_shuffle(s: str) -> str:\n    return ' '.join((''.join(sorted(word)) for word in s.split(' ')))", "def anti_shuffle(s: str) -> str:\n    return ' '.join((''.join(sorted(word)) for word in s.split(' ')))", "def anti_shuffle(s: str) -> str:\n    return ' '.join((''.join(sorted(word)) for word in s.split(' ')))", "def anti_shuffle(s: str) -> str:\n    return ' '.join((''.join(sorted(word)) for word in s.split(' ')))", "def anti_shuffle(s: str) -> str:\n    return ' '.join((''.join(sorted(word)) for word in s.split(' ')))", "def anti_shuffle(s: str) -> str:\n    return ' '.join((''.join(sorted(word)) for word in s.split(' ')))", "def anti_shuffle(s: str) -> str:\n    return ' '.join((''.join(sorted(word)) for word in s.split(' ')))", "def anti_shuffle(s: str) -> str:\n    return ' '.join((''.join(sorted(word)) for word in s.split(' ')))", "def anti_shuffle(s: str) -> str:\n    return ' '.join((''.join(sorted(word)) for word in s.split(' ')))", "def anti_shuffle(s: str) -> str:\n    return ' '.join((''.join(sorted(word)) for word in s.split(' ')))", "def anti_shuffle(s: str) -> str:\n    return ' '.join((''.join(sorted(word)) for word in s.split(' ')))"], "outputs": "[['Hi'], ['ehllo'], ['Hello !!!Wdlor'], ['a b c d e'], ['123 456 789'], ['!#@ $%^ &(*'], ['   eillmptu   acepss   '], [''], ['z y x w v u t s r q p o n m l k j i h g f e d c b a'], ['Teh cikqu bnorw fox jmpsu eorv eht alyz dgo']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Hi'], ['hello'], ['Hello World!!!'], ['a b c d e'], ['123 456 789'], ['!@# $%^ &*('], ['   multiple   spaces   '], [''], ['z y x w v u t s r q p o n m l k j i h g f e d c b a'], ['The quick brown fox jumps over the lazy dog']]", "input_output_examples": "[[['Hi'], ['hello'], ['Hello World!!!']], [['Hi'], ['ehllo'], ['Hello !!!Wdlor']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/87", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, value in enumerate(row):\n            if value == x:\n                result.append((row_idx, col_idx))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, value in enumerate(row):\n            if value == x:\n                result.append((row_idx, col_idx))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, value in enumerate(row):\n            if value == x:\n                result.append((row_idx, col_idx))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, value in enumerate(row):\n            if value == x:\n                result.append((row_idx, col_idx))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, value in enumerate(row):\n            if value == x:\n                result.append((row_idx, col_idx))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, value in enumerate(row):\n            if value == x:\n                result.append((row_idx, col_idx))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, value in enumerate(row):\n            if value == x:\n                result.append((row_idx, col_idx))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, val in enumerate(row):\n            if val == x:\n                result.append((row_idx, col_idx))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, value in enumerate(row):\n            if value == x:\n                result.append((row_idx, col_idx))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result"], "outputs": "[[[(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]], [[]], [[(2, 2)]], [[]], [[(0, 2), (0, 1), (0, 0), (1, 2), (1, 1), (1, 0), (2, 2), (2, 1), (2, 0)]], [[(0, 2), (0, 0), (1, 1), (2, 2), (2, 0)]], [[(0, 2), (0, 1), (0, 0), (1, 2), (1, 1), (1, 0)]], [[(0, 0)]], [[(2, 2)]], [[(0, 3), (1, 0)]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1], [[], 1], [[[], [1], [1, 2, 3]], 3], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10], [[[1, 1, 1], [1, 1, 1], [1, 1, 1]], 1], [[[2, 3, 2], [3, 2, 3], [2, 3, 2]], 2], [[[5, 5, 5], [5, 5, 5]], 5], [[[10], [20], [30]], 10], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9], [[[1, 2, 3, 4], [4, 3, 2, 1]], 4]]", "input_output_examples": "[[[[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1], [[], 1], [[[], [1], [1, 2, 3]], 3]], [[[(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]], [[]], [[(2, 2)]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/88", "requirement": "from typing import List\n\n\ndef sort_array(array: List[int]) -> List[int]:\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    first = array[0]\n    last = array[-1]\n    if (first + last) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    first = array[0]\n    last = array[-1]\n    if (first + last) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return array.copy()\n    first, last = (array[0], array[-1])\n    if (first + last) % 2 == 1:\n        return sorted(array.copy())\n    else:\n        return sorted(array.copy(), reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return array.copy()\n    first, last = (array[0], array[-1])\n    if (first + last) % 2 != 0:\n        return sorted(array.copy())\n    else:\n        return sorted(array.copy(), reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return array.copy()\n    first, last = (array[0], array[-1])\n    if (first + last) % 2 != 0:\n        return sorted(array.copy())\n    else:\n        return sorted(array.copy(), reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    first, last = (array[0], array[-1])\n    if (first + last) % 2 != 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    first = array[0]\n    last = array[-1]\n    total = first + last\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    first, last = (array[0], array[-1])\n    if (first + last) % 2 != 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    first = array[0]\n    last = array[-1]\n    if (first + last) % 2 != 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return array\n    first = array[0]\n    last = array[-1]\n    if (first + last) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return array\n    first = array[0]\n    last = array[-1]\n    if (first + last) % 2 != 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return array.copy()\n    first = array[0]\n    last = array[-1]\n    if (first + last) % 2 != 0:\n        return sorted(array.copy())\n    else:\n        return sorted(array.copy(), reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return array\n    first = array[0]\n    last = array[-1]\n    if (first + last) % 2 != 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    first, last = (array[0], array[-1])\n    if (first + last) % 2 != 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return array.copy()\n    first = array[0]\n    last = array[-1]\n    if (first + last) % 2 == 1:\n        return sorted(array.copy())\n    else:\n        return sorted(array.copy(), reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return array.copy()\n    first, last = (array[0], array[-1])\n    if (first + last) % 2 != 0:\n        return sorted(array.copy())\n    else:\n        return sorted(array.copy(), reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return array.copy()\n    first = array[0]\n    last = array[-1]\n    if (first + last) % 2 != 0:\n        return sorted(array.copy())\n    else:\n        return sorted(array.copy(), reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    first, last = (array[0], array[-1])\n    if (first + last) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return array\n    first = array[0]\n    last = array[-1]\n    if (first + last) % 2 != 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return array\n    first, last = (array[0], array[-1])\n    if (first + last) % 2 != 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"], "outputs": "[[[]], [[5]], [[0, 1, 2, 3, 4, 5]], [[6, 5, 4, 3, 2, 1, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[0, 0, 0, 0, 0]], [[9, 7, 5, 3, 1]], [[10, 8, 6, 4, 2]], [[500, 400, 300, 200, 100]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[]], [[5]], [[2, 4, 3, 0, 1, 5]], [[2, 4, 3, 0, 1, 5, 6]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[0, 0, 0, 0, 0]], [[1, 3, 5, 7, 9]], [[2, 4, 6, 8, 10]], [[100, 200, 300, 400, 500]]]", "input_output_examples": "[[[[]], [[5]], [[2, 4, 3, 0, 1, 5]], [[2, 4, 3, 0, 1, 5, 6]]], [[[]], [[5]], [[0, 1, 2, 3, 4, 5]], [[6, 5, 4, 3, 2, 1, 0]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/89", "requirement": "def encrypt(s: str) -> str:\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    \"\"\"", "repaired_requirement": "def encrypt(s: str) -> str:\n    \"\"\"Encrypts the input string by shifting each alphabetic character down by 4 positions in the alphabet.\n    The shift wraps around the alphabet, meaning after 'z' it continues from 'a' and similarly for 'Z' to 'A'.\n    Non-alphabetic characters remain unchanged.\n    \n    Args:\n        s (str): The input string to be encrypted.\n    \n    Returns:\n        str: The encrypted string with each alphabetic character shifted by 4 positions.\n    \"\"\"", "original_clusters": {"cluster_list": [{"programs_str": ["def encrypt(s: str) -> str:\n    return ''.join([chr(ord(char) + 4) if char.isalpha() else char for char in s])", "def encrypt(s: str) -> str:\n    return ''.join([chr(ord(c) + 4) if c.isalpha() else c for c in s])", "def encrypt(s: str) -> str:\n    return ''.join((chr(ord(c) + 4) if c.isalpha() else c for c in s))"], "outputs": "[['lm'], ['ewhjklnop'], ['kj'], ['ix'], ['e'], ['~'], ['efg'], ['|}~'], [''], ['EFGHIJ'], ['123'], ['!@#']]", "probability": 0.15, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import string\n\ndef encrypt(s: str) -> str:\n    shift = 2 * 2\n    alphabet = string.ascii_lowercase\n    shifted_alphabet = alphabet[shift:] + alphabet[:shift]\n    translation_table = str.maketrans(alphabet, shifted_alphabet)\n    return s.translate(translation_table)"], "outputs": "[['lm'], ['ewhjklnop'], ['kj'], ['ix'], ['e'], ['d'], ['efg'], ['bcd'], [''], ['ABCDEF'], ['123'], ['!@#']]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    return ''.join([chr((ord(char) - ord('a') + 4) % 26 + ord('a')) if char.islower() else chr((ord(char) - ord('A') + 4) % 26 + ord('A')) if char.isupper() else char for char in s])", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        elif 'A' <= char <= 'Z':\n            shifted = chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n\n    def rotate_char(c: str) -> str:\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= c <= 'Z':\n            return chr((ord(c) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            return c\n    return ''.join((rotate_char(c) for c in s))", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if char.isalpha():\n            shift = 4 if char.islower() else 4\n            if char.islower():\n                result.append(chr((ord(char) - ord('a') + shift) % 26 + ord('a')))\n            else:\n                result.append(chr((ord(char) - ord('A') + shift) % 26 + ord('A')))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            result.append(chr((ord(char) - ord('a') + 4) % 26 + ord('a')))\n        elif 'A' <= char <= 'Z':\n            result.append(chr((ord(char) - ord('A') + 4) % 26 + ord('A')))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    return ''.join([chr((ord(c) - ord('a') + 4) % 26 + ord('a')) if c.islower() else chr((ord(c) - ord('A') + 4) % 26 + ord('A')) if c.isupper() else c for c in s])", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            result += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            result += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            result += char\n    return result", "def encrypt(s: str) -> str:\n    encrypted = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            encrypted.append(shifted)\n        elif 'A' <= char <= 'Z':\n            shifted = chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n            encrypted.append(shifted)\n        else:\n            encrypted.append(char)\n    return ''.join(encrypted)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)"], "outputs": "[['lm'], ['ewhjklnop'], ['kj'], ['ix'], ['e'], ['d'], ['efg'], ['bcd'], [''], ['EFGHIJ'], ['123'], ['!@#']]", "probability": 0.75, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import string\n\ndef encrypt(s: str) -> str:\n    alphabet = string.ascii_lowercase\n    shifted_alphabet = alphabet[4:] + alphabet[:4]\n    translation_table = str.maketrans(alphabet, shifted_alphabet)\n    return s.lower().translate(translation_table)"], "outputs": "[['lm'], ['ewhjklnop'], ['kj'], ['ix'], ['e'], ['d'], ['efg'], ['bcd'], [''], ['efghij'], ['123'], ['!@#']]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.5770078865364, "llm_generated_inputs": "[['hi'], ['asdfghjkl'], ['gf'], ['et'], ['a'], ['z'], ['abc'], ['xyz'], [''], ['ABCDEF'], ['123'], ['!@#']]", "input_output_examples": "[[['hi'], ['asdfghjkl'], ['gf'], ['et']], [['lm'], ['ewhjklnop'], ['kj'], ['ix']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.2885039432682}, "repaired_clusters": {"cluster_list": [{"programs_str": ["def encrypt(s: str) -> str:\n    encrypted = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted_char = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted_char = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n        else:\n            encrypted_char = char\n        encrypted.append(encrypted_char)\n    return ''.join(encrypted)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            result.append(chr((ord(char) - ord('a') - 4) % 26 + ord('a')))\n        elif 'A' <= char <= 'Z':\n            result.append(chr((ord(char) - ord('A') - 4) % 26 + ord('A')))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            result.append(chr((ord(char) - ord('a') - 4) % 26 + ord('a')))\n        elif 'A' <= char <= 'Z':\n            result.append(chr((ord(char) - ord('A') - 4) % 26 + ord('A')))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    encrypted = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted_char = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n            encrypted.append(encrypted_char)\n        elif 'A' <= char <= 'Z':\n            encrypted_char = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n            encrypted.append(encrypted_char)\n        else:\n            encrypted.append(char)\n    return ''.join(encrypted)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            result.append(chr((ord(char) - ord('a') - 4) % 26 + ord('a')))\n        elif 'A' <= char <= 'Z':\n            result.append(chr((ord(char) - ord('A') - 4) % 26 + ord('A')))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    encrypted = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted_char = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n            encrypted.append(encrypted_char)\n        elif 'A' <= char <= 'Z':\n            encrypted_char = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n            encrypted.append(encrypted_char)\n        else:\n            encrypted.append(char)\n    return ''.join(encrypted)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n            result.append(shifted)\n        elif 'A' <= char <= 'Z':\n            shifted = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            result.append(chr((ord(char) - ord('a') - 4) % 26 + ord('a')))\n        elif 'A' <= char <= 'Z':\n            result.append(chr((ord(char) - ord('A') - 4) % 26 + ord('A')))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            result.append(chr((ord(char) - ord('a') - 4) % 26 + ord('a')))\n        elif 'A' <= char <= 'Z':\n            result.append(chr((ord(char) - ord('A') - 4) % 26 + ord('A')))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    encrypted = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted_char = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted_char = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n        else:\n            encrypted_char = char\n        encrypted.append(encrypted_char)\n    return ''.join(encrypted)"], "outputs": "[['de'], ['wozbcdfgh'], ['cb'], ['ap'], ['w'], ['v'], ['wxy'], ['tuv'], [''], ['WXYZAB'], ['123'], ['!@#']]", "probability": 0.95, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['hi'], ['de'], ['lm']], [['asdfghjkl'], ['wozbcdfgh'], ['ewhjklnop']], [['gf'], ['cb'], ['kj']], [['et'], ['ap'], ['ix']]]"}, {"programs_str": ["def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            result.append(chr((ord(char) - ord('a') - 4) % 26 + ord('a')))\n        elif 'A' <= char <= 'A':\n            result.append(chr((ord(char) - ord('A') - 4) % 26 + ord('A')))\n        else:\n            result.append(char)\n    return ''.join(result)"], "outputs": "[['de'], ['wozbcdfgh'], ['cb'], ['ap'], ['w'], ['v'], ['wxy'], ['tuv'], [''], ['WBCDEF'], ['123'], ['!@#']]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['hi'], ['de'], ['lm']], [['asdfghjkl'], ['wozbcdfgh'], ['ewhjklnop']], [['gf'], ['cb'], ['kj']], [['et'], ['ap'], ['ix']]]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[['hi'], ['asdfghjkl'], ['gf'], ['et'], ['a'], ['z'], ['abc'], ['xyz'], [''], ['ABCDEF'], ['123'], ['!@#']]", "input_output_examples": "[[['hi'], ['asdfghjkl'], ['gf'], ['et']], [['lm'], ['ewhjklnop'], ['kj'], ['ix']]]", "weighted_test_consistency": 0.0, "at_least_one_align": false, "ambiguity": 0.6431984785579781}, "original_passk": 0.8, "repaired_passk": 0.0, "generated_programs": ["def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            result.append(chr((ord(char) - ord('a') - 4) % 26 + ord('a')))\n        elif 'A' <= char <= 'Z':\n            result.append(chr((ord(char) - ord('A') - 4) % 26 + ord('A')))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    encrypted = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted_char = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n            encrypted.append(encrypted_char)\n        elif 'A' <= char <= 'Z':\n            encrypted_char = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n            encrypted.append(encrypted_char)\n        else:\n            encrypted.append(char)\n    return ''.join(encrypted)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            result.append(chr((ord(char) - ord('a') - 4) % 26 + ord('a')))\n        elif 'A' <= char <= 'Z':\n            result.append(chr((ord(char) - ord('A') - 4) % 26 + ord('A')))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            result.append(chr((ord(char) - ord('a') - 4) % 26 + ord('a')))\n        elif 'A' <= char <= 'Z':\n            result.append(chr((ord(char) - ord('A') - 4) % 26 + ord('A')))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted_char = chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n            result.append(shifted_char)\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr((ord(char) - ord('A') - 4) % 26 + ord('A'))\n            result.append(shifted_char)\n        else:\n            result.append(char)\n    return ''.join(result)"], "failed_inputs_outputs": "[[[['hi'], ['de'], ['lm']], [['asdfghjkl'], ['wozbcdfgh'], ['ewhjklnop']], [['gf'], ['cb'], ['kj']], [['et'], ['ap'], ['ix']], [['faewfawefaewg'], ['bwasbwsabwasc'], ['jeiajeaijeiak']], [['hellomyfriend'], ['dahhkiubneajz'], ['lippsqcjvmirh']], [['dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'], ['ztvzhijehbqdiehqbdhedqbjiheijqbdheijqbdbqyqbd'], ['hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl']], [['a'], ['w'], ['e']], [['abcde'], ['wxyza'], ['efghi']], [['uvwxyz'], ['qrstuv'], ['yzabcd']], [['test123'], ['paop123'], ['xiwx123']], [['1a2b3c'], ['1w2x3y'], ['1e2f3g']], [['hello world'], ['dahhk sknhz'], ['lipps asvph']], [['monitor'], ['ikjepkn'], ['qsrmxsv']], [['abc'], ['wxy'], ['efg']], [['kmt'], ['gip'], ['oqx']], [['park'], ['lwng'], ['tevo']], [['mtkmt'], ['ipgip'], ['qxoqx']], [['testpark123'], ['paoplwng123'], ['xiwxtevo123']], [['uvuvwxyzwxyz'], ['qrqrstuvstuv'], ['yzyzabcdabcd']], [['abcdetest123'], ['wxyzapaop123'], ['efghixiwx123']], [['testpark1233'], ['paoplwng1233'], ['xiwxtevo1233']], [['parrte1a2b3cstpark123'], ['lwnnpa1w2x3yoplwng123'], ['tevvxi1e2f3gwxtevo123']], [['pamonitork'], ['lwikjepkng'], ['teqsrmxsvo']], [['uvwabcxyuz'], ['qrswxytuqv'], ['yzaefgbcyd']], [['uvuvwxyzwxz'], ['qrqrstuvstv'], ['yzyzabcdabd']], [['t'], ['p'], ['x']], [['uvz'], ['qrv'], ['yzd']], [['kuvz'], ['gqrv'], ['oyzd']], [['kkuvz'], ['ggqrv'], ['ooyzd']], [['abct'], ['wxyp'], ['efgx']], [['tes2tpark1233'], ['pao2plwng1233'], ['xiw2xtevo1233']], [['at'], ['wp'], ['ex']], [['tkmtkmtuvwabcxyuzmt'], ['pgipgipqrswxytuqvip'], ['xoqxoqxyzaefgbcydqx']], [['uvuvwxyzwxzyz'], ['qrqrstuvstvuv'], ['yzyzabcdabdcd']], [['tkmtkmtuvwabuvuvwxyzwxzcxyuzmt'], ['pgipgipqrswxqrqrstuvstvytuqvip'], ['xoqxoqxyzaefyzyzabcdabdgbcydqx']], [['tsest123'], ['poaop123'], ['xwiwx123']], [['uvutvwxyzwxzyz'], ['qrqprstuvstvuv'], ['yzyxzabcdabdcd']], [['uvwparrkxyz'], ['qrslwnngtuv'], ['yzatevvobcd']], [['tsest123aparrte1a2b3cstpark123'], ['poaop123wlwnnpa1w2x3yoplwng123'], ['xwiwx123etevvxi1e2f3gwxtevo123']], [['abctabcde'], ['wxypwxyza'], ['efgxefghi']], [['tes2testpark123tpark1233'], ['pao2paoplwng123plwng1233'], ['xiw2xiwxtevo123xtevo1233']], [['uvwabbczxyuz'], ['qrswxxyvtuqv'], ['yzaeffgdbcyd']], [['uvvz'], ['qrrv'], ['yzzd']], [['tsest123aparrte1a2b3cstpatrk123'], ['poaop123wlwnnpa1w2x3yoplwpng123'], ['xwiwx123etevvxi1e2f3gwxtexvo123']], [['paabctak'], ['lwwxypwg'], ['teefgxeo']], [['zz'], ['vv'], ['dd']], [['pararte1a2b3cstpark123'], ['lwnwnpa1w2x3yoplwng123'], ['tevevxi1e2f3gwxtevo123']], [['pamonintork'], ['lwikjejpkng'], ['teqsrmrxsvo']], [['uvutvwxyzwxzyzabckuvz'], ['qrqprstuvstvuvwxygqrv'], ['yzyxzabcdabdcdefgoyzd']], [['uvutvwzzxyzwxzyz'], ['qrqprsvvtuvstvuv'], ['yzyxzaddbcdabdcd']], [['tabcdtabcde'], ['pwxyzpwxyza'], ['xefghxefghi']], [['uvwxwyz'], ['qrstsuv'], ['yzabacd']], [['aabcde'], ['wwxyza'], ['eefghi']], [['cpararte1a2b3cstpark1abct23'], ['ylwnwnpa1w2x3yoplwng1wxyp23'], ['gtevevxi1e2f3gwxtevo1efgx23']], [['tse3st23'], ['poa3op23'], ['xwi3wx23']], [['mtuvwxyzkmt'], ['ipqrstuvgip'], ['qxyzabcdoqx']], [['tsest123aparrte1a2b3cstapark123'], ['poaop123wlwnnpa1w2x3yopwlwng123'], ['xwiwx123etevvxi1e2f3gwxetevo123']], [['cpaararuvvzte1a2b3cstpark1abct23'], ['ylwwnwnqrrvpa1w2x3yoplwng1wxyp23'], ['gteevevyzzdxi1e2f3gwxtevo1efgx23']], [['tse32st23'], ['poa32op23'], ['xwi32wx23']], [['uvutvwxyzwxzyzabckumtkmtvz'], ['qrqprstuvstvuvwxygqipgiprv'], ['yzyxzabcdabdcdefgoyqxoqxzd']], [['uvwaubcxyuz'], ['qrswqxytuqv'], ['yzaeyfgbcyd']], [['abuvutvwxyzwxzyzabckuvzct'], ['wxqrqprstuvstvuvwxygqrvyp'], ['efyzyxzabcdabdcdefgoyzdgx']], [['tes2testppark1233'], ['pao2paopllwng1233'], ['xiw2xiwxttevo1233']], [['uvwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz'], ['qrstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv'], ['yzabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad']], [['xuvuvwxyzwxzyz'], ['tqrqrstuvstvuv'], ['byzyzabcdabdcd']], [['wuvwxyz'], ['sqrstuv'], ['ayzabcd']], [['aabdcde'], ['wwxzyza'], ['eefhghi']], [['uvwxyzwxyz'], ['qrstuvstuv'], ['yzabcdabcd']], [['cpararte1a2b3cstpark1abctuvwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz23'], ['ylwnwnpa1w2x3yoplwng1wxypqrstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv23'], ['gtevevxi1e2f3gwxtevo1efgxyzabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad23']], [['tkumtkmtuvwabuvuvwxyzwxzcxyuzmt'], ['pgqipgipqrswxqrqrstuvstvytuqvip'], ['xoyqxoqxyzaefyzyzabcdabdgbcydqx']], [['uvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywz'], ['qrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusv'], ['yzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcad']], [['wuvwxyzz'], ['sqrstuvv'], ['ayzabcdd']], [['xzyzabckumtkmtvz'], ['tvuvwxygqipgiprv'], ['bdcdefgoyqxoqxzd']], [['zzz'], ['vvv'], ['ddd']], [['ts2e3st23'], ['po2a3op23'], ['xw2i3wx23']], [['uvzmonitorz'], ['qrvikjepknv'], ['yzdqsrmxsvd']], [['t3se3'], ['p3oa3'], ['x3wi3']], [['uvutvwzzxz'], ['qrqprsvvtv'], ['yzyxzaddbd']], [['uvuvzwxyzwxz'], ['qrqrvstuvstv'], ['yzyzdabcdabd']], [['cpararteuvwxwyz1a2b3cstpark1abct23'], ['ylwnwnpaqrstsuv1w2x3yoplwng1wxyp23'], ['gtevevxiyzabacd1e2f3gwxtevo1efgx23']], [['stsest123'], ['opoaop123'], ['wxwiwx123']], [['tsest123aparrte1a2b3cstapark1213'], ['poaop123wlwnnpa1w2x3yopwlwng1213'], ['xwiwx123etevvxi1e2f3gwxetevo1213']], [['uvutvwvxyzwxzuvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywz'], ['qrqprsrtuvstvqrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusv'], ['yzyxzazbcdabdyzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcad']], [['kparrte1a2b3cstpark123'], ['glwnnpa1w2x3yoplwng123'], ['otevvxi1e2f3gwxtevo123']], [['pamonintorkpamonitoork'], ['lwikjejpknglwikjepkkng'], ['teqsrmrxsvoteqsrmxssvo']], [['tsestcpararte1a2b3cstpark1abct23123apa3'], ['poaopylwnwnpa1w2x3yoplwng1wxyp23123wlw3'], ['xwiwxgtevevxi1e2f3gwxtevo1efgx23123ete3']], [['abctest123'], ['wxypaop123'], ['efgxiwx123']], [['xzyzauvwxyzwxyzbckumtzkmtvz'], ['tvuvwqrstuvstuvxygqipvgiprv'], ['bdcdeyzabcdabcdfgoyqxdoqxzd']], [['1testpark1233'], ['1paoplwng1233'], ['1xiwxtevo1233']], [['tse32st233'], ['poa32op233'], ['xwi32wx233']], [['testtpark'], ['paopplwng'], ['xiwxxtevo']], [['abuvutvwxystsest123zwxzyzabckuvzct'], ['wxqrqprstuopoaop123vstvuvwxygqrvyp'], ['efyzyxzabcwxwiwx123dabdcdefgoyzdgx']], [['kmuvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywzt'], ['giqrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusvp'], ['oqyzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcadx']], [['xzyzabckumtkmtvzz'], ['tvuvwxygqipgiprvv'], ['bdcdefgoyqxoqxzdd']], [['uvuvwxyzzyzpamonitork'], ['qrqrstuvvuvlwikjepkng'], ['yzyzabcddcdteqsrmxsvo']], [['ut3se3vwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz'], ['qp3oa3rstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv'], ['yx3wi3zabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad']], [['abuvutvwxyzwxvzyzabckuvzct'], ['wxqrqprstuvstrvuvwxygqrvyp'], ['efyzyxzabcdabzdcdefgoyzdgx']], [['monitormuvvztkmt'], ['ikjepkniqrrvpgip'], ['qsrmxsvqyzzdxoqx']], [['uvxwpuvuvwxyzwxyzarrkxyz'], ['qrtslqrqrstuvstuvwnngtuv'], ['yzbatyzyzabcdabcdevvobcd']], [['uvwxzwyz'], ['qrstvsuv'], ['yzabdacd']], [['monitomrmuvvztkmt'], ['ikjepkiniqrrvpgip'], ['qsrmxsqvqyzzdxoqx']], [['parrte1a2b3cstpark123uvwabcxyuzuvwaxbbczxyuz'], ['lwnnpa1w2x3yoplwng123qrswxytuqvqrswtxxyvtuqv'], ['tevvxi1e2f3gwxtevo123yzaefgbcydyzaebffgdbcyd']], [['uvutvwxyzwxzyzabckuvzabctest123'], ['qrqprstuvstvuvwxygqrvwxypaop123'], ['yzyxzabcdabdcdefgoyzdefgxiwx123']], [['parkk'], ['lwngg'], ['tevoo']], [['uvwabbcxzxyuz'], ['qrswxxytvtuqv'], ['yzaeffgbdbcyd']], [['parrte1a2b3cst2park123'], ['lwnnpa1w2x3yop2lwng123'], ['tevvxi1e2f3gwx2tevo123']], [['bcd&^%'], ['xyz&^%'], ['fgh&^%']], [['thequickbrownfoxjumpsoverthelazydog'], ['pdamqeygxnksjbktfqilokranpdahwvuzkc'], ['xliuymgofvsarjsbnyqtwszivxlipedchsk']], [['abcdefghijklmnopqrstuvwxyz'], ['wxyzabcdefghijklmnopqrstuv'], ['efghijklmnopqrstuvwxyzabcd']], [['wxy'], ['stu'], ['abc']], [['yzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cddddddddddddddddddddddddd']], [['hi    et a gf hellomyfriend'], ['de    ap w cb dahhkiubneajz'], ['lm    ix e kj lippsqcjvmirh']], [['thequickbrownfoxjumpsoverthelazydo'], ['pdamqeygxnksjbktfqilokranpdahwvuzk'], ['xliuymgofvsarjsbnyqtwszivxlipedchs']], [['hi    et a gf hellomyfrienhellod'], ['de    ap w cb dahhkiubneajdahhkz'], ['lm    ix e kj lippsqcjvmirlippsh']], [['et'], ['ap'], ['ix']], [['hello'], ['dahhk'], ['lipps']], [['wxxy'], ['sttu'], ['abbc']], [['ho'], ['dk'], ['ls']], [['helo'], ['dahk'], ['lips']], [['heti    get a gf hellomyfrienhellod'], ['dape    cap w cb dahhkiubneajdahhkz'], ['lixm    kix e kj lippsqcjvmirlippsh']], [['helothequickbrownfoxjumpsoverthelazydo'], ['dahkpdamqeygxnksjbktfqilokranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwszivxlipedchs']], [['yzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdddddddddddddddddddddddddd']], [['hbcd&^%elo'], ['dxyz&^%ahk'], ['lfgh&^%ips']], [['b&cd&^'], ['x&yz&^'], ['f&gh&^']], [['ythequickbrownfoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszivxlipedchs']], [['hello heloworld'], ['dahhk dahksknhz'], ['lipps lipsasvph']], [['heloworld'], ['dahksknhz'], ['lipsasvph']], [['abcdefghijklmnopqrstuvwxyzythequickbrownfoxjumpsoverthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqilokranpdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqtwszivxlipedchs']], [['hi    et a rgf hellomyfrienhellod'], ['de    ap w ncb dahhkiubneajdahhkz'], ['lm    ix e vkj lippsqcjvmirlippsh']], [['heti    get a gf hellomyferienhellod'], ['dape    cap w cb dahhkiubaneajdahhkz'], ['lixm    kix e kj lippsqcjivmirlippsh']], [['hi    et a gf helloetmyfrienhellod'], ['de    ap w cb dahhkapiubneajdahhkz'], ['lm    ix e kj lippsixqcjvmirlippsh']], [['hi'], ['de'], ['lm']], [['thi    et a gf helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydog'], ['pde    ap w cb dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkc'], ['xlm    ix e kj lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchsk']], [['rgf'], ['ncb'], ['vkj']], [['abcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['helothequickbrownfoxumpsoverthelazydo'], ['dahkpdamqeygxnksjbktqilokranpdahwvuzk'], ['lipsxliuymgofvsarjsbyqtwszivxlipedchs']], [['abcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoe'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsi']], [['helothequickbrownfoxumpsovekrthelazydo'], ['dahkpdamqeygxnksjbktqilokragnpdahwvuzk'], ['lipsxliuymgofvsarjsbyqtwsziovxlipedchs']], [['helothequickbrownfoxjumpsgetoverthelazydo'], ['dahkpdamqeygxnksjbktfqilocapkranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkixszivxlipedchs']], [['hi    et  a gf hellomyfrienhellod'], ['de    ap  w cb dahhkiubneajdahhkz'], ['lm    ix  e kj lippsqcjvmirlippsh']], [['yywxy'], ['uustu'], ['ccabc']], [['ythequickbrownfhi    et a gf hellomyfriendoxjumpsoverthelazydo'], ['updamqeygxnksjbde    ap w cb dahhkiubneajzktfqilokranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lippsqcjvmirhsbnyqtwszivxlipedchs']], [['hi    etrgf hhellomyfrienhellod'], ['de    apncb ddahhkiubneajdahhkz'], ['lm    ixvkj llippsqcjvmirlippsh']], [['hhellomyfrienhellod'], ['ddahhkiubneajdahhkz'], ['llippsqcjvmirlippsh']], [['abcdefghijfklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefbghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnjopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['hellomyfriendoxjumpsoverthelazydo'], ['dahhkiubneajzktfqilokranpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszivxlipedchs']], [['thequickbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['heti    get a gf hellomyfrieonhellod'], ['dape    cap w cb dahhkiubneakjdahhkz'], ['lixm    kix e kj lippsqcjvmisrlippsh']], [['hi    et a gf hellomyfrienhellood'], ['de    ap w cb dahhkiubneajdahhkkz'], ['lm    ix e kj lippsqcjvmirlippssh']], [['yywx'], ['uust'], ['ccab']], [['ythequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['updamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['helowythequickbrownfhiorld'], ['dahksupdamqeygxnksjbdeknhz'], ['lipsacxliuymgofvsarjlmsvph']], [['wxxyy'], ['sttuu'], ['abbcc']], [['hi    let a gf hellomyfriend'], ['de    hap w cb dahhkiubneajz'], ['lm    pix e kj lippsqcjvmirh']], [['yzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdddddddddddddddddddddddd']], [['hhellomyfrinhellod'], ['ddahhkiubnejdahhkz'], ['llippsqcjvmrlippsh']], [['hellomyfrienhellodrownfoxjumpsoverthelazydojumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwszivxlipedchs']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogod'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckz'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchsksh']], [['hi    et a gf hellomyfrie'], ['de    ap w cb dahhkiubnea'], ['lm    ix e kj lippsqcjvmi']], [['ythequickbrownfhi'], ['updamqeygxnksjbde'], ['cxliuymgofvsarjlm']], [['heti    get a gf hellomyfrieonhello d'], ['dape    cap w cb dahhkiubneakjdahhk z'], ['lixm    kix e kj lippsqcjvmisrlipps h']], [['gf'], ['cb'], ['kj']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsibcc']], [['heti    get a mgf hellomyfrienhellod'], ['dape    cap w icb dahhkiubneajdahhkz'], ['lixm    kix e qkj lippsqcjvmirlippsh']], [['hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['eetrgft'], ['aapncbp'], ['iixvkjx']], [['eetrgf'], ['aapncb'], ['iixvkj']], [['hellomyferienhellod'], ['dahhkiubaneajdahhkz'], ['lippsqcjivmirlippsh']], [['b&helothequickbrownfoxjumpsgetoverthelazydocd&^'], ['x&dahkpdamqeygxnksjbktfqilocapkranpdahwvuzkyz&^'], ['f&lipsxliuymgofvsarjsbnyqtwkixszivxlipedchsgh&^']], [['hi    et a gf helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellod'], ['de    ap w cb dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['hi    et a gf hellomyfrienheod'], ['de    ap w cb dahhkiubneajdakz'], ['lm    ix e kj lippsqcjvmirlish']], [['yywxxy'], ['uusttu'], ['ccabbc']], [['helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['ohhellomyfrienhellod'], ['kddahhkiubneajdahhkz'], ['sllippsqcjvmirlippsh']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupmpsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytqtwszivxlipedchsibcc']], [['a'], ['w'], ['e']], [['hello heloworlthequickbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['dahhk dahksknhpdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['lipps lipsasvpxliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['ohhellomyfriend'], ['kddahhkiubneajz'], ['sllippsqcjvmirh']], [['hellomyfrienheod'], ['dahhkiubneajdakz'], ['lippsqcjvmirlish']], [['wolrld'], ['skhnhz'], ['aspvph']], [['hi    et a gf helloetmthelquickbrownfoxjumpsoverthelazydoyfrienhellod'], ['de    ap w cb dahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['heloworlthequickbheti'], ['dahksknhpdamqeygxdape'], ['lipsasvpxliuymgoflixm']], [['ergft'], ['ancbp'], ['ivkjx']], [['hel'], ['dah'], ['lip']], [['tlet'], ['phap'], ['xpix']], [['hi    letheti    get a gf hellomyfrieonhello df hellomyfriend'], ['de    hapdape    cap w cb dahhkiubneakjdahhk zb dahhkiubneajz'], ['lm    pixlixm    kix e kj lippsqcjvmisrlipps hj lippsqcjvmirh']], [['abcdefghijfklmnopeetrgftqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefbghijklaapncbpmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnjopqrstiixvkjxuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['hi    et a rgf hellomyfrienhelb&cd&^lod'], ['de    ap w ncb dahhkiubneajdahx&yz&^hkz'], ['lm    ix e vkj lippsqcjvmirlipf&gh&^psh']], [['hellomyfrienhelb&cd&^lod'], ['dahhkiubneajdahx&yz&^hkz'], ['lippsqcjvmirlipf&gh&^psh']], [['helowythehquickbrownfhhiorld'], ['dahksupdadmqeygxnksjbddeknhz'], ['lipsacxliluymgofvsarjllmsvph']], [['ohhelyfrienhellod'], ['kddahubneajdahhkz'], ['sllipcjvmirlippsh']], [['hi    ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de    ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['bythequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo&cd&d^'], ['xupdamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk&yz&z^'], ['fcxliuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs&gh&h^']], [['hellomyfrienhellod'], ['dahhkiubneajdahhkz'], ['lippsqcjvmirlippsh']], [['hi    et a ohhellomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['eeetrgft'], ['aaapncbp'], ['iiixvkjx']], [['hellomyfriendoxjumpsovelrthelazydo'], ['dahhkiubneajzktfqilokrahnpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszipvxlipedchs']], [['hellomyfrienhellood'], ['dahhkiubneajdahhkkz'], ['lippsqcjvmirlippssh']], [['ythequickbrownfoxthequickbheti'], ['updamqeygxnksjbktpdamqeygxdape'], ['cxliuymgofvsarjsbxliuymgoflixm']], [['hellomyfrietrgf'], ['dahhkiubneapncb'], ['lippsqcjvmixvkj']], [['hellomyfrieonhello'], ['dahhkiubneakjdahhk'], ['lippsqcjvmisrlipps']], [['ehel'], ['adah'], ['ilip']], [['helflomyfrietrgf'], ['dahbhkiubneapncb'], ['lipjpsqcjvmixvkj']], [['hhellyomyfrienhellod'], ['ddahhukiubneajdahhkz'], ['llippcsqcjvmirlippsh']], [['helloetmthelquickbrownfoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['ythehelloetmthelquickbrownfoxjumpsoverthelazydoyienhellodnfhi'], ['updadahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkueajdahhkzjbde'], ['cxlilippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscmirlippshrjlm']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsovierthi'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokreanpde'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszmivxlm']], [['heti    get a gfrieonhello d'], ['dape    cap w cbneakjdahhk z'], ['lixm    kix e kjvmisrlipps h']], [['eeet'], ['aaap'], ['iiix']], [['hi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellod'], ['de    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippsh']], [['hi    et ehia rgf hellomyfrienhellod'], ['de    ap adew ncb dahhkiubneajdahhkz'], ['lm    ix ilme vkj lippsqcjvmirlippsh']], [['let'], ['hap'], ['pix']], [['hellomyfriendoxjumpsovelrathelazydo'], ['dahhkiubneajzktfqilokrahnwpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszipvexlipedchs']], [['hi    et a gf helloetmyfrienhellothequickbhetid'], ['de    ap w cb dahhkapiubneajdahhkpdamqeygxdapez'], ['lm    ix e kj lippsixqcjvmirlippsxliuymgoflixmh']], [['heti    get a mgf hehi    et ehia rgf hellomyfrienhellodllomyfrienhellod'], ['dape    cap w icb dade    ap adew ncb dahhkiubneajdahhkzhhkiubneajdahhkz'], ['lixm    kix e qkj lilm    ix ilme vkj lippsqcjvmirlippshppsqcjvmirlippsh']], [['helloomyfrienheod'], ['dahhkkiubneajdakz'], ['lippssqcjvmirlish']], [['hi   helowythehquickbrownfhhiorld ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de   dahksupdadmqeygxnksjbddeknhz ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm   lipsacxliluymgofvsarjllmsvph ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['hello heloworlthequickbheti    get a gf hellomyfrienhellodrownfoxjumpsothequickbhetiverthelazydo'], ['dahhk dahksknhpdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokpdamqeygxdaperanpdahwvuzk'], ['lipps lipsasvpxliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwsxliuymgoflixmzivxlipedchs']], [['abcdefghijklmnopqrstuvwxyzythequickbrownfoxjumpsoveletthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqilokrahappdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqtwszipixxlipedchs']], [['d'], ['z'], ['h']], [['hi    et a ohhelolomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w kddahkhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e sllipspsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['hellomyfrienhellodllomyfrienhellod'], ['dahhkiubneajdahhkzhhkiubneajdahhkz'], ['lippsqcjvmirlippshppsqcjvmirlippsh']], [['hhelothequickbrownfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksjbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsarjsbyqtwsziovxlipedchs']], [['heti    get a mgf hehi   e et ehia rgf hellomyfrienhellodllomyfrhoienhellod'], ['dape    cap w icb dade   a ap adew ncb dahhkiubneajdahhkzhhkiubndkeajdahhkz'], ['lixm    kix e qkj lilm   i ix ilme vkj lippsqcjvmirlippshppsqcjvlsmirlippsh']], [['helll'], ['dahhh'], ['lippp']], [['helothequickbrownfoxjumpsgetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqilocapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkixszilvxlipedchs']], [['hellthi'], ['dahhpde'], ['lippxlm']], [['hellomyfrrienhelb&cd&^lod'], ['dahhkiubnneajdahx&yz&^hkz'], ['lippsqcjvvmirlipf&gh&^psh']], [['yzzzzzzzzzzzzzzzzzzzzzzzzhel'], ['uvvvvvvvvvvvvvvvvvvvvvvvvdah'], ['cddddddddddddddddddddddddlip']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmirlippsh']], [['hellomyfrieendoxjumpsovelrthelazydo'], ['dahhkiubneaajzktfqilokrahnpdahwvuzk'], ['lippsqcjvmiirhsbnyqtwszipvxlipedchs']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogodoworld'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhz'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchskshsasvph']], [['ythequickbrownfhi    et a gf hellomyfriendoxjumpsojverthelazydo'], ['updamqeygxnksjbde    ap w cb dahhkiubneajzktfqilokfranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lippsqcjvmirhsbnyqtwsnzivxlipedchs']], [['hellomyfrienhellodllomyfrhoienhellod'], ['dahhkiubneajdahhkzhhkiubndkeajdahhkz'], ['lippsqcjvmirlippshppsqcjvlsmirlippsh']], [['woolrld'], ['skkhnhz'], ['asspvph']], [['bcd'], ['xyz'], ['fgh']], [['hellomyfergetienhellod'], ['dahhkiubancapeajdahhkz'], ['lippsqcjivkixmirlippsh']], [['bcdhellomyfrienhelb&cd&^lod'], ['xyzdahhkiubneajdahx&yz&^hkz'], ['fghlippsqcjvmirlipf&gh&^psh']], [['helothequickbrowonfoxumpsovekrthelazydo'], ['dahkpdamqeygxnkskjbktqilokragnpdahwvuzk'], ['lipsxliuymgofvsasrjsbyqtwsziovxlipedchs']], [['hhellomyfriod'], ['ddahhkiubnekz'], ['llippsqcjvmsh']], [['mgf'], ['icb'], ['qkj']], [['etrf'], ['apnb'], ['ixvj']], [['helhi'], ['dahde'], ['liplm']], [['bcd&%'], ['xyz&%'], ['fgh&%']], [['hhi    et a ohhellomyfrienhellodrgf hellomyfrienhellodellomyfrienhellood'], ['dde    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkzahhkiubneajdahhkkz'], ['llm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippshippsqcjvmirlippssh']], [['e'], ['a'], ['i']], [['hi    et a rgf hellomyfrienhelb&cd&^llod'], ['de    ap w ncb dahhkiubneajdahx&yz&^hhkz'], ['lm    ix e vkj lippsqcjvmirlipf&gh&^ppsh']], [['bcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lod'], ['xyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkz'], ['fghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^psh']], [['wwxy'], ['sstu'], ['aabc']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoi    t a gf hellomyfrieonhello d'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzke    p w cb dahhkiubneakjdahhk z'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsm    x e kj lippsqcjvmisrlipps h']], [['hlelll'], ['dhahhh'], ['lpippp']], [['eheel'], ['adaah'], ['iliip']], [['heti    get a gfrieonhello helothequickbrownfoxumpsovekrthelazydod'], ['dape    cap w cbneakjdahhk dahkpdamqeygxnksjbktqilokragnpdahwvuzkz'], ['lixm    kix e kjvmisrlipps lipsxliuymgofvsarjsbyqtwsziovxlipedchsh']], [['heolo'], ['dakhk'], ['lisps']], [['ehelhellomyfrienhelb&cd&^lod'], ['adahdahhkiubneajdahx&yz&^hkz'], ['iliplippsqcjvmirlipf&gh&^psh']], [['helloetmyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthigfthequickbhetid'], ['dahhkapiubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdecbpdamqeygxdapez'], ['lippsixqcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmkjxliuymgoflixmh']], [['ehelloetmyfrthirgft'], ['adahhkapiubnpdencbp'], ['ilippsixqcjvxlmvkjx']], [['helbcd&^%lomyfriendoxhi    etrgf hhellomyfrienhellodjumpsoverthelawwxyzydo&cd&d^'], ['dahxyz&^%hkiubneajzktde    apncb ddahhkiubneajdahhkzfqilokranpdahwsstuvuzk&yz&z^'], ['lipfgh&^%psqcjvmirhsblm    ixvkj llippsqcjvmirlippshnyqtwszivxlipeaabcdchs&gh&h^']], [['ohhelolomyfrienhellodrgf'], ['kddahkhkiubneajdahhkzncb'], ['sllipspsqcjvmirlippshvkj']], [['thequickbrownfoxjumpsoverthi    et a gf helloetmyfrienhellodhelazydo'], ['pdamqeygxnksjbktfqilokranpde    ap w cb dahhkapiubneajdahhkzdahwvuzk'], ['xliuymgofvsarjsbnyqtwszivxlm    ix e kj lippsixqcjvmirlippshlipedchs']], [['helloetmyfrienhellothequickbhetid'], ['dahhkapiubneajdahhkpdamqeygxdapez'], ['lippsixqcjvmirlippsxliuymgoflixmh']], [['trhequickbrownfoxjumpsoverthelazydog'], ['pndamqeygxnksjbktfqilokranpdahwvuzkc'], ['xvliuymgofvsarjsbnyqtwszivxlipedchsk']], [['hellomyfriendoxjumpsojverthelazydo'], ['dahhkiubneajzktfqilokfranpdahwvuzk'], ['lippsqcjvmirhsbnyqtwsnzivxlipedchs']], [['eeetrgfthellomyfrienhellodrownfoxjumpsoverthelazydo'], ['aaapncbpdahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['iiixvkjxlippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['gfrieonhello'], ['cbneakjdahhk'], ['kjvmisrlipps']], [['heloo'], ['dahkk'], ['lipss']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrienhellodget'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneajdahhkzcap'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmirlippshkix']], [['helloomyfrienhhi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellodeod'], ['dahhkkiubneajdde    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkzakz'], ['lippssqcjvmirllm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippshish']], [['ehellgft'], ['adahhcbp'], ['ilippkjx']], [['hehi    et a ohhelolomyfrienhellodrgf hellomyfrienhellodlflomyfrietrgf'], ['dade    ap w kddahkhkiubneajdahhkzncb dahhkiubneajdahhkzhbhkiubneapncb'], ['lilm    ix e sllipspsqcjvmirlippshvkj lippsqcjvmirlippshpjpsqcjvmixvkj']], [['hello wlorld'], ['dahhk shknhz'], ['lipps apsvph']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodhelazydoexyy'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzdahwvuzkatuu'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshlipedchsibcc']], [['abcdefghijklmnopqrsquickbrownfoxjumpsovferthelazydo'], ['wxyzabcdefghijklmnomqeygxnksjbktfqilokrbanpdahwvuzk'], ['efghijklmnopqrstuvwuymgofvsarjsbnyqtwszjivxlipedchs']], [['helloetmyfrienhellod'], ['dahhkapiubneajdahhkz'], ['lippsixqcjvmirlippsh']], [['hi    helotheqolod'], ['de    dahkpdamkhkz'], ['lm    lipsxliuspsh']], [['wxabcdefghijklmoxjumpsoverthelazydoexyy'], ['stwxyzabcdefghiktfqilokranpdahwvuzkatuu'], ['abefghijklmnopqsbnyqtwszivxlipedchsibcc']], [['thequickbrownfoxjumpsovertheazydo'], ['pdamqeygxnksjbktfqilokranpdawvuzk'], ['xliuymgofvsarjsbnyqtwszivxliedchs']], [['hi    et ehia rgf hfrienhehellomyfrienhellodrownfoxjumpsoverthelazydojumpsoverthelazydollod'], ['de    ap adew ncb dbneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilokranpdahwvuzkhhkz'], ['lm    ix ilme vkj ljvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwszivxlipedchsppsh']], [['abcdefghijfklmnopeetrgftqazydo'], ['wxyzabcdefbghijklaapncbpmwvuzk'], ['efghijklmnjopqrstiixvkjxuedchs']], [['helothequickbrownfonxjumpsgetoverthelazydo'], ['dahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzk'], ['lipsxliuymgofvsarjsrbnyqtwkixszivxlipedchs']], [['hellomyfrie'], ['dahhkiubnea'], ['lippsqcjvmi']], [['eehia'], ['aadew'], ['iilme']], [['bcohhellomyfrienhellodd'], ['xykddahhkiubneajdahhkzz'], ['fgsllippsqcjvmirlippshh']], [['helbcdhhellyomyfrienhellod&^%lomyfriendoxjumpsoverthelazydo&cd&d^'], ['dahxyzddahhukiubneajdahhkz&^%hkiubneajzktfqilokranpdahwvuzk&yz&z^'], ['lipfghllippcsqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxlipedchs&gh&h^']], [['hellomyfergetienhelllod'], ['dahhkiubancapeajdahhhkz'], ['lippsqcjivkixmirlipppsh']], [['helbcd&^%lomyfriendoxhihhello'], ['dahxyz&^%hkiubneajzktdeddahhk'], ['lipfgh&^%psqcjvmirhsblmllipps']], [['aa'], ['ww'], ['ee']], [['hi    ehi    et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de    ade    ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupompsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlkilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytsqtwszivxlipedchsibcc']], [['hello heti    get a gf hellomyfrieonhello dd'], ['dahhk dape    cap w cb dahhkiubneakjdahhk zz'], ['lipps lixm    kix e kj lippsqcjvmisrlipps hh']], [['helothequickbrownfoxjuhielazydo'], ['dahkpdamqeygxnksjbktfqdeahwvuzk'], ['lipsxliuymgofvsarjsbnylmipedchs']], [['hello heti    get a gf hellomyfheti    get a mgf hellomyfrienhellodo dd'], ['dahhk dape    cap w cb dahhkiubdape    cap w icb dahhkiubneajdahhkzk zz'], ['lipps lixm    kix e kj lippsqcjlixm    kix e qkj lippsqcjvmirlippshs hh']], [['hello helowhellomyfrrienhelb&cd&^lodorld'], ['dahhk dahksdahhkiubnneajdahx&yz&^hkzknhz'], ['lipps lipsalippsqcjvvmirlipf&gh&^pshsvph']], [['yzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cddddddddddddddiliipddddddddddd']], [['bcohhellomyfrieythequickbrownfoxthequickbhetinhellodd'], ['xykddahhkiubneaupdamqeygxnksjbktpdamqeygxdapejdahhkzz'], ['fgsllippsqcjvmicxliuymgofvsarjsbxliuymgoflixmrlippshh']], [['hhellomyffrienhellod'], ['ddahhkiubbneajdahhkz'], ['llippsqcjjvmirlippsh']], [['ef'], ['ab'], ['ij']], [['helloetmyfrienhellodhequicokbrownfoxjumpsoverthelzazydogod'], ['dahhkapiubneajdahhkzdamqeykgxnksjbktfqilokranpdahvwvuzkckz'], ['lippsixqcjvmirlippshliuymgsofvsarjsbnyqtwszivxlipdedchsksh']], [['erghi'], ['ancde'], ['ivklm']], [['hhellomyfriengfrieonhellohellodnhellodlod'], ['ddahhkiubneajcbneakjdahhkdahhkzjdahhkzhkz'], ['llippsqcjvmirkjvmisrlippslippshrlippshpsh']], [['helothequickbrownfoxjumpsgmetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqilociapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkqixszilvxlipedchs']], [['hellb&helothequickbrownfoxjumpsgetoverthelazydocd&^frietrogf'], ['dahhx&dahkpdamqeygxnksjbktfqilocapkranpdahwvuzkyz&^bneapnkcb'], ['lippf&lipsxliuymgofvsarjsbnyqtwkixszivxlipedchsgh&^jvmixvskj']], [['hi    et a gfi hellomyfrie'], ['de    ap w cbe dahhkiubnea'], ['lm    ix e kjm lippsqcjvmi']], [['hello helowhellomyhellomyfrienhelb&cd&^lodfrrienhelb&cd&^lodorld'], ['dahhk dahksdahhkiudahhkiubneajdahx&yz&^hkzbnneajdahx&yz&^hkzknhz'], ['lipps lipsalippsqclippsqcjvmirlipf&gh&^pshjvvmirlipf&gh&^pshsvph']], [['hi    et a rgf hellomyfrietnhelb&cd&^lod'], ['de    ap w ncb dahhkiubneapjdahx&yz&^hkz'], ['lm    ix e vkj lippsqcjvmixrlipf&gh&^psh']], [['hi    et a gf lhgfrieonhelloellomyfrie'], ['de    ap w cb hdcbneakjdahhkahhkiubnea'], ['lm    ix e kj plkjvmisrlippsippsqcjvmi']], [['hellomyfrieonhellod'], ['dahhkiubneakjdahhkz'], ['lippsqcjvmisrlippsh']], [['helbcd&^hellomyfrienhellodellomyfrienhellood%lomyfriendoxhihhello'], ['dahxyz&^dahhkiubneajdahhkzahhkiubneajdahhkkz%hkiubneajzktdeddahhk'], ['lipfgh&^lippsqcjvmirlippshippsqcjvmirlippssh%psqcjvmirhsblmllipps']], [['get'], ['cap'], ['kix']], [['helhlellllthi'], ['dahdhahhhhpde'], ['liplpippppxlm']], [['helloetmyfrienhellohellomyfrienhellodrownfoxjumpsoverthelazydothequickbhetid'], ['dahhkapiubneajdahhkdahhkiubneajdahhkznksjbktfqilokranpdahwvuzkpdamqeygxdapez'], ['lippsixqcjvmirlippslippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsxliuymgoflixmh']], [['hi    et ehia rgf he llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['de    ap adew ncb da hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['lm    ix ilme vkj li ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['hi    ehi   l et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de    ade   h ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm    ilm   p ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['hbcd&^%eo'], ['dxyz&^%ak'], ['lfgh&^%is']], [['ohhelolomyfetrienhellrgf'], ['kddahkhkiubapneajdahhncb'], ['sllipspsqcjixvmirlippvkj']], [['thequicukbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqeyqgxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuymgyoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['helloetmyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthigbhetiid'], ['dahhkapiubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdecxdapeez'], ['lippsixqcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmkflixmmh']], [['hellomyfrrienhelb&cdlod'], ['dahhkiubnneajdahx&yzhkz'], ['lippsqcjvvmirlipf&ghpsh']], [['helowythequicckbrownfhihi    et a gf hellomyfriendorld'], ['dahksupdamqeyygxnksjbdede    ap w cb dahhkiubneajzknhz'], ['lipsacxliuymggofvsarjlmlm    ix e kj lippsqcjvmirhsvph']], [['abcdefghijklmnopqrstuvwxwxabcdefghijklmnopqrstuvwxyyzythequickbrhownfoxjumpsoverthelazydoe'], ['wxyzabcdefghijklmnopqrststwxyzabcdefghijklmnopqrstuuvupdamqeygxndksjbktfqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxyzababefghijklmnopqrstuvwxyzabccdcxliuymgofvlsarjsbnyqtwszivxlipedchsi']], [['efrgft'], ['abncbp'], ['ijvkjx']], [['ythequickbrownfoxjumpsoverthelazydoythequickbrownoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokranpdahwvuzkupdamqeygxnksjktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszivxlipedchscxliuymgofvsarsbnyqtwszivxlipedchs']], [['ehehif'], ['adadeb'], ['ililmj']], [['heheti    get a gf hellomyfrieonhellyodllomyfergetienhelllob&cd&^d'], ['dadape    cap w cb dahhkiubneakjdahhukzhhkiubancapeajdahhhkx&yz&^z'], ['lilixm    kix e kj lippsqcjvmisrlippcshppsqcjivkixmirlipppsf&gh&^h']], [['hi    et aheallomyfriendoxjumpsoverthelazydo gf helloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['de    ap wdawhhkiubneajzktfqilokranpdahwvuzk cb dahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix elieppsqcjvmirhsbnyqtwszivxlipedchs kj lippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['hi e   let a gf hellomyfriend'], ['de a   hap w cb dahhkiubneajz'], ['lm i   pix e kj lippsqcjvmirh']], [['hllelll'], ['dhhahhh'], ['lppippp']], [['hhellyomyfrielod'], ['ddahhukiubneahkz'], ['llippcsqcjvmipsh']], [['hello wbcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lodlorld'], ['dahhk sxyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkzhknhz'], ['lipps afghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^pshpsvph']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodlomyferienhellodt'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzhkiubaneajdahhkzp'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshpsqcjivmirlippshx']], [['hi    et ehia rgf hfrienhehellomyfrienhellodrownfoxjumpsoverthelazydojumpsthelazydollod'], ['de    ap adew ncb dbneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilopdahwvuzkhhkz'], ['lm    ix ilme vkj ljvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwxlipedchsppsh']], [['ft'], ['bp'], ['jx']], [['yzzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cdddddddddddddddiliipddddddddddd']], [['ythequichi'], ['updamqeyde'], ['cxliuymglm']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazeydog'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvauzkc'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedichsk']], [['aickbrownfoxjumpsoveletthelazydo'], ['weygxnksjbktfqilokrahappdahwvuzk'], ['emgofvsarjsbnyqtwszipixxlipedchs']], [['b&helothequickownfoxjumpsgetoverthelazydocd&^'], ['x&dahkpdamqeygksjbktfqilocapkranpdahwvuzkyz&^'], ['f&lipsxliuymgosarjsbnyqtwkixszivxlipedchsgh&^']], [['helothequickbrownfoxjumphellomyfergetienhelllodsoverthelazydo'], ['dahkpdamqeygxnksjbktfqildahhkiubancapeajdahhhkzokranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtlippsqcjivkixmirlipppshwszivxlipedchs']], [['df'], ['zb'], ['hj']], [['b&helothequickownfoxjumpsgetovcerthelazydocd&^'], ['x&dahkpdamqeygksjbktfqilocapkryanpdahwvuzkyz&^'], ['f&lipsxliuymgosarjsbnyqtwkixszgivxlipedchsgh&^']], [['hehi'], ['dade'], ['lilm']], [['hhelloetmyfrienhellodhelazydol'], ['ddahhkapiubneajdahhkzdahwvuzkh'], ['llippsixqcjvmirlippshlipedchsp']], [['hehi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellodlothequickbrownfoxumpsoverthelazydo'], ['dade    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkzhkpdamqeygxnksjbktqilokranpdahwvuzk'], ['lilm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippshpsxliuymgofvsarjsbyqtwszivxlipedchs']], [['ythequickbrownfoxjum'], ['updamqeygxnksjbktfqi'], ['cxliuymgofvsarjsbnyq']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodkbrownfhi'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzgxnksjbde'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshofvsarjlm']], [['helothequetovehrthelazydo'], ['dahkpdamqapkradnpdahwvuzk'], ['lipsxliuyixszilvxlipedchs']], [['hi   helowythehquickbrownfhhiorlde ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de   dahksupdadmqeygxnksjbddeknhza ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm   lipsacxliluymgofvsarjllmsvphi ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['hellomyfrreienhelb&cdlod'], ['dahhkiubnnaeajdahx&yzhkz'], ['lippsqcjvvimirlipf&ghpsh']], [['llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['hhelothequickbrowhelowythequicckbrownfhihinfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksdahksupdamqeyygxnksjbdedejbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsalipsacxliuymggofvsarjlmlmrjsbyqtwsziovxlipedchs']], [['thequickbheti'], ['pdamqeygxdape'], ['xliuymgoflixm']], [['heti    get a gf hellomyfrieonhelllo d'], ['dape    cap w cb dahhkiubneakjdahhhk z'], ['lixm    kix e kj lippsqcjvmisrlippps h']], [['fwwxy'], ['bsstu'], ['jaabc']], [['hhi    et a ohhellomyfrienhellodrgf hellomyfrienhellodellomyfrienhelloold'], ['dde    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkzahhkiubneajdahhkkhz'], ['llm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippshippsqcjvmirlippssph']], [['helhlellelltihi'], ['dahdhahhahhpede'], ['liplpippippxmlm']], [['bcohhellomyfyrienhellodd'], ['xykddahhkiubuneajdahhkzz'], ['fgsllippsqcjcvmirlippshh']], [['hhelllomyfriod'], ['ddahhhkiubnekz'], ['llipppsqcjvmsh']], [['hellomyfrienhellodrownfooxjumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbkktfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjssbnyqtwszivxlipedchs']], [['helloetmyfrienhellzodhequickbrownfoxjumpsoverthelazydogodoworld'], ['dahhkapiubneajdahhvkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhz'], ['lippsixqcjvmirlippdshliuymgofvsarjsbnyqtwszivxlipedchskshsasvph']], [['yzzzzzzzzzzzzzzeheelzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvadaahvvvvvvvvvvvv'], ['cddddddddddddddiliipdddddddddddd']], [['etrgf'], ['apncb'], ['ixvkj']], [['hi l   ehi   l et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de h   ade   h ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm p   ilm   p ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['yzhzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvdvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cdlddddddddddddddiliipddddddddddd']], [['ythequickbrownfoxjumpsovownoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokrksjktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszsarsbnyqtwszivxlipedchs']], [['yywahellomyfriendoxjumupsoverthelazydoxy'], ['uuswdahhkiubneajzktfqiqlokranpdahwvuzktu'], ['ccaelippsqcjvmirhsbnyqytwszivxlipedchsbc']], [['hhellyoomyfrielod'], ['ddahhukkiubneahkz'], ['llippcssqcjvmipsh']], [['bcohhellhomyfrienhellodd'], ['xykddahhdkiubneajdahhkzz'], ['fgsllipplsqcjvmirlippshh']], [['ehelothequickbrownfonxjumpsgetoverthelazydot'], ['adahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzkp'], ['ilipsxliuymgofvsarjsrbnyqtwkixszivxlipedchsx']], [['hlel'], ['dhah'], ['lpip']], [['helloetmyfrthi'], ['dahhkapiubnpde'], ['lippsixqcjvxlm']], [['hellomyfergetienfhelllod'], ['dahhkiubancapeajbdahhhkz'], ['lippsqcjivkixmirjlipppsh']], [['helowythequicckbrownfhihi    ethhelothequickbrownfoxumpsovekrthelazydo a gf hellomyfriendorld'], ['dahksupdamqeyygxnksjbdede    apddahkpdamqeygxnksjbktqilokragnpdahwvuzk w cb dahhkiubneajzknhz'], ['lipsacxliuymggofvsarjlmlm    ixllipsxliuymgofvsarjsbyqtwsziovxlipedchs e kj lippsqcjvmirhsvph']], [['ohhhelllellomyfrienhellod'], ['kdddahhhahhkiubneajdahhkz'], ['slllipppippsqcjvmirlippsh']], [['eff'], ['abb'], ['ijj']], [['h eti    get a mgf hellomyfrienhellod'], ['d ape    cap w icb dahhkiubneajdahhkz'], ['l ixm    kix e qkj lippsqcjvmirlippsh']], [['hellomyfrietnhelb&cd&^lod'], ['dahhkiubneapjdahx&yz&^hkz'], ['lippsqcjvmixrlipf&gh&^psh']], [['b&cdheythequickbrownfoxjumpshi'], ['x&yzdaupdamqeygxnksjbktfqilode'], ['f&ghlicxliuymgofvsarjsbnyqtwlm']], [['helhlomyfriend'], ['dahdhkiubneajz'], ['liplpsqcjvmirh']], [['hhelothequickbrowhelhowythequicckbrownfhihinfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksdahdksupdamqeyygxnksjbdedejbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsaliplsacxliuymggofvsarjlmlmrjsbyqtwsziovxlipedchs']], [['hi    et a rg f hellomyfrietnhelb&cd&^lod'], ['de    ap w nc b dahhkiubneapjdahx&yz&^hkz'], ['lm    ix e vk j lippsqcjvmixrlipf&gh&^psh']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsoverthelazydoexyyd'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpdahwvuzkatuuz'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxlipedchsibcch']], [['hi    et a helolomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w dahkhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e lipspsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['helolomyfrienhellorgf'], ['dahkhkiubneajdahhkncb'], ['lipspsqcjvmirlippsvkj']], [['heeloo'], ['daahkk'], ['liipss']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsovertyhelazydoexyyd'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpudahwvuzkatuuz'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxclipedchsibcch']], [['fhellfomyfrie'], ['bdahhbkiubnea'], ['jlippjsqcjvmi']], [['gget'], ['ccap'], ['kkix']], [['heelazydo'], ['daahwvuzk'], ['liipedchs']], [['eeetrwxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupompsoverthelazydoexyygft'], ['aaapnstwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlkilokranpdahwvuzkatuucbp'], ['iiixvabefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytsqtwszivxlipedchsibcckjx']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodsoverthelazydo'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzokranpdahwvuzk'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshwszivxlipedchs']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrieunhellodget'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneaqjdahhkzcap'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmiyrlippshkix']], [['ahellomyfriendoxjumupsoverthelazydo'], ['wdahhkiubneajzktfqiqlokranpdahwvuzk'], ['elippsqcjvmirhsbnyqytwszivxlipedchs']], [['helowythehquickbrownfhhiorlde'], ['dahksupdadmqeygxnksjbddeknhza'], ['lipsacxliluymgofvsarjllmsvphi']], [['ithi'], ['epde'], ['mxlm']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsovertyhelazydoexyyhellomyfrienhelb&cd&^loddeeetrgft'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpudahwvuzkatuudahhkiubneajdahx&yz&^hkzzaaapncbp'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxclipedchsibcclippsqcjvmirlipf&gh&^pshhiiixvkjx']], [['hellomyfrietrogf'], ['dahhkiubneapnkcb'], ['lippsqcjvmixvskj']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoi'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzke'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsm']], [['ythequickbrowunfoxthequickbheti'], ['updamqeygxnksqjbktpdamqeygxdape'], ['cxliuymgofvsayrjsbxliuymgoflixm']], [['bcohhellomyfyrienhellofdwxabcdefghijklmoxjumpsovertyhelazydoexyyd'], ['xykddahhkiubuneajdahhkbzstwxyzabcdefghiktfqilokranpudahwvuzkatuuz'], ['fgsllippsqcjcvmirlippsjhabefghijklmnopqsbnyqtwszivxclipedchsibcch']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelcazydoi    t a gf hellomyfrieonhello d'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahywvuzke    p w cb dahhkiubneakjdahhk z'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipgedchsm    x e kj lippsqcjvmisrlipps h']], [['hi    et ehia rgf he llomyfrihi    et a helolomyfrienhellodrgf hellomyfrienhellodverthelazyollod'], ['de    ap adew ncb da hhkiubnede    ap w dahkhkiubneajdahhkzncb dahhkiubneajdahhkzranpdahwvukhhkz'], ['lm    ix ilme vkj li ppsqcjvmlm    ix e lipspsqcjvmirlippshvkj lippsqcjvmirlippshzivxlipedcsppsh']], [['helhlellelltiihi'], ['dahdhahhahhpeede'], ['liplpippippxmmlm']], [['ohhhelllellomyfrienheellod'], ['kdddahhhahhkiubneajdaahhkz'], ['slllipppippsqcjvmirliippsh']], [['hhellyomyfrienyhello'], ['ddahhukiubneajudahhk'], ['llippcsqcjvmirclipps']], [['ohhhelllellomyfriabcdefghijfklmnopeetrgftqrstuvwxyzythequickbrhownfoxjumpsoverthelahzydoenhellod'], ['kdddahhhahhkiubnewxyzabcdefbghijklaapncbpmnopqrstuvupdamqeygxndksjbktfqilokranpdahwdvuzkajdahhkz'], ['slllipppippsqcjvmefghijklmnjopqrstiixvkjxuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipeldchsirlippsh']], [['hellomyfrienhellodlflomyfrietrgf'], ['dahhkiubneajdahhkzhbhkiubneapncb'], ['lippsqcjvmirlippshpjpsqcjvmixvkj']], [['helxloetmthequickbrowoxjumpsoverthelazydoyfrieunhellodget'], ['dahthkapipdamqeygxnksktfqilokranpdahwvuzkubneaqjdahhkzcap'], ['lipbpsixqxliuymgofvsasbnyqtwszivxlipedchscjvmiyrlippshkix']], [['helhlellelletiihi'], ['dahdhahhahhapeede'], ['liplpippippixmmlm']], [['abcdefghijklmnopqrsteuvwxwxabcdefghijklmnopqrstuvwxyyzythequickbrhownfoxjsumpsoverthelazydoe'], ['wxyzabcdefghijklmnopaqrststwxyzabcdefghijklmnopqrstuuvupdamqeygxndksjbktfoqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxiyzababefghijklmnopqrstuvwxyzabccdcxliuymgofvlsarjsbnwyqtwszivxlipedchsi']], [['hhellomyfriengrieonhellohellodnhellodlod'], ['ddahhkiubneajcneakjdahhkdahhkzjdahhkzhkz'], ['llippsqcjvmirkvmisrlippslippshrlippshpsh']], [['hhellyomyfriehello'], ['ddahhukiubneadahhk'], ['llippcsqcjvmilipps']], [['bcd&hellomoyfrienhellodrownfoxjumpsoverthhhellomyfriengfrieonhellohellodelazydo%'], ['xyz&dahhkikubneajdahhkznksjbktfqilokranpdddahhkiubneajcbneakjdahhkdahhkzahwvuzk%'], ['fgh&lippsqscjvmirlippshvsarjsbnyqtwszivxlllippsqcjvmirkjvmisrlippslippshipedchs%']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydooexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchssibcc']], [['hi    elt a rgf hellomyfrienhellod'], ['de    ahp w ncb dahhkiubneajdahhkz'], ['lm    ipx e vkj lippsqcjvmirlippsh']], [['helflomyfriietrgf'], ['dahbhkiubneeapncb'], ['lipjpsqcjvmmixvkj']], [['ehiabcdefghijklmnopqrwnfxjumpsoveletthelazydoa'], ['adewxyzabcdefghijklmnsjbtfqilokrahappdahwvuzkw'], ['ilmefghijklmnopqrstuvarjbnyqtwszipixxlipedchse']], [['healloetmyfrienhellodhequickbrownfoxjumpsoverthelazeydog'], ['dawhhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvauzkc'], ['lieppsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedichsk']], [['lhgfrieonhelloellomyfrie'], ['hdcbneakjdahhkahhkiubnea'], ['plkjvmisrlippsippsqcjvmi']], [['hhellylomyfrienhellod'], ['ddahhuhkiubneajdahhkz'], ['llippcpsqcjvmirlippsh']], [['hfsoverthigfthequickbhetid'], ['dbokranpdecbpdamqeygxdapez'], ['ljwszivxlmkjxliuymgoflixmh']], [['yywbcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lodlorldwxy'], ['uusxyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkzhknhzstu'], ['ccafghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^pshpsvphabc']], [['bcdhellomyfrieonhellod&^%'], ['xyzdahhkiubneakjdahhkz&^%'], ['fghlippsqcjvmisrlippsh&^%']], [['aheallomyfriendoxjumpsoverthelazydo'], ['wdawhhkiubneajzktfqilokranpdahwvuzk'], ['elieppsqcjvmirhsbnyqtwszivxlipedchs']], [['aheallomyfriendoxjumpsoverthwxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsovierthielazydo'], ['wdawhhkiubneajzktfqilokranpdstwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokreanpdeahwvuzk'], ['elieppsqcjvmirhsbnyqtwszivxlabefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszmivxlmipedchs']], [['hhellohelloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogodoworldmyfrienhellodeod'], ['ddahhkdahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhziubneajdahhkzakz'], ['llippslippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchskshsasvphqcjvmirlippshish']], [['eflie'], ['abhea'], ['ijpmi']], [['ohhelyfrienhellood'], ['kddahubneajdahhkkz'], ['sllipcjvmirlippssh']], [['ehellioetmhi'], ['adahhekapide'], ['ilippmsixqlm']], [['ahellomyfriendoxjumupsoverthelaefzydo'], ['wdahhkiubneajzktfqiqlokranpdahwabvuzk'], ['elippsqcjvmirhsbnyqytwszivxlipeijdchs']], [['hellomyfrieonhenllod'], ['dahhkiubneakjdajhhkz'], ['lippsqcjvmisrlirppsh']], [['hlelloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['dhahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lpippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['hi    helothelbcd&^%lomyfriendoxhihhelloheqolod'], ['de    dahkpdahxyz&^%hkiubneajzktdeddahhkdamkhkz'], ['lm    lipsxlipfgh&^%psqcjvmirhsblmllippsliuspsh']], [['helloomyfrienhhi    ehi    et a gf hellomyfrietrogf hhellohehetimyfrienhellodeod'], ['dahhkkiubneajdde    ade    ap w cb dahhkiubneapnkcb ddahhkdadapeiubneajdahhkzakz'], ['lippssqcjvmirllm    ilm    ix e kj lippsqcjvmixvskj llippslilixmqcjvmirlippshish']], [['hl'], ['dh'], ['lp']], [['helhii'], ['dahdee'], ['liplmm']], [['hellomyfriendoxjumpsojvertaheallomyfriendoxjumpsoverthelazydoazydo'], ['dahhkiubneajzktfqilokfranpwdawhhkiubneajzktfqilokranpdahwvuzkwvuzk'], ['lippsqcjvmirhsbnyqtwsnzivxelieppsqcjvmirhsbnyqtwszivxlipedchsedchs']], [['hellomyfrienhellodverthelazyollod'], ['dahhkiubneajdahhkzranpdahwvukhhkz'], ['lippsqcjvmirlippshzivxlipedcsppsh']], [['eheihif'], ['adaedeb'], ['ilimlmj']], [['helothequickbrownfoxjumtpsgmetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqiplociapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqxtwkqixszilvxlipedchs']], [['ythequickbrownfoxthuickbheti'], ['updamqeygxnksjbktpdqeygxdape'], ['cxliuymgofvsarjsbxlymgoflixm']], [['hi  df  et ehia rgf he llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['de  zb  ap adew ncb da hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['lm  hj  ix ilme vkj li ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['fhellfomyfrieheeloo'], ['bdahhbkiubneadaahkk'], ['jlippjsqcjvmiliipss']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodhelazydoexyyzzzzzzzzzzzzzzzzzzet'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzdahwvuzkatuuvvvvvvvvvvvvvvvvvvap'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshlipedchsibccddddddddddddddddddix']], [['ohhellomyfrienheellod'], ['kddahhkiubneajdaahhkz'], ['sllippsqcjvmirliippsh']], [['iheheti'], ['edadape'], ['mlilixm']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodlomyferienhellodtgf'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzhkiubaneajdahhkzpcb'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshpsqcjivmirlippshxkj']], [['hello heti    get a gf hellomyllo dd'], ['dahhk dape    cap w cb dahhkiuhhk zz'], ['lipps lixm    kix e kj lippsqcpps hh']], [['f'], ['b'], ['j']], [['eehhi    et a gf helloetmthelquickbrownfoxjumpsohverthelazydoyfrienhellodia'], ['aadde    ap w cb dahhkapipdahmqeygxnksjbktfqilokdranpdahwvuzkubneajdahhkzew'], ['iillm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwslzivxlipedchscjvmirlippshme']], [['heti    get a mgf hellomyfrienhellodhl'], ['dape    cap w icb dahhkiubneajdahhkzdh'], ['lixm    kix e qkj lippsqcjvmirlippshlp']], [['thequhelothequickbrownfoxjumpsgetovehrthelazydoyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqdahkpdamqeygxnksjbktfqilocapkradnpdahwvuzkubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuylipsxliuymgofvsarjsbnyqtwkixszilvxlipedchscjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['helolomyfrienhhelloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodellorgf'], ['dahkhkiubneajddahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzahhkncb'], ['lipspsqcjvmirllippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshippsvkj']], [['hellomyferienhelhabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoiod'], ['dahhkiubaneajdahdwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkekz'], ['lippsqcjivmirliplefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsmsh']], [['heeoloo'], ['daakhkk'], ['liispss']], [['hellomyfrienhellodxjumpsoverthelazydo'], ['dahhkiubneajdahhkztfqilokranpdahwvuzk'], ['lippsqcjvmirlippshbnyqtwszivxlipedchs']], [['aickbrownfoxjhumpsoveletthelazydo'], ['weygxnksjbktfdqilokrahappdahwvuzk'], ['emgofvsarjsbnlyqtwszipixxlipedchs']], [['hhellomyfriengfrieonhellohellodoverthelazydoythequickbrownoxjumpsoverthelazydollomyfrietrgf'], ['ddahhkiubneajcbneakjdahhkdahhkzkranpdahwvuzkupdamqeygxnksjktfqilokranpdahwvuzkhhkiubneapncb'], ['llippsqcjvmirkjvmisrlippslippshszivxlipedchscxliuymgofvsarsbnyqtwszivxlipedchsppsqcjvmixvkj']], [['helbcdhhellyomyfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhukiubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['hi    et a gf helllomyfrienhellood'], ['de    ap w cb dahhhkiubneajdahhkkz'], ['lm    ix e kj lipppsqcjvmirlippssh']], [['hellomyfrienhellodrownfoxjumpsothequickbhetiverthelazydohi'], ['dahhkiubneajdahhkznksjbktfqilokpdamqeygxdaperanpdahwvuzkde'], ['lippsqcjvmirlippshvsarjsbnyqtwsxliuymgoflixmzivxlipedchslm']], [['hhelloetmyhi    et a gf hellomyfriendfrienhellodhelazydol'], ['ddahhkapiude    ap w cb dahhkiubneajzbneajdahhkzdahwvuzkh'], ['llippsixqclm    ix e kj lippsqcjvmirhjvmirlippshlipedchsp']], [['wlorld'], ['shknhz'], ['apsvph']], [['helolnhello dd'], ['dahkhjdahhk zz'], ['lipsprlipps hh']], [['ythbequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['updxamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['cxlfiuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['hellomdyfriendoxjumpsojverthelazydo'], ['dahhkizubneajzktfqilokfranpdahwvuzk'], ['lippsqhcjvmirhsbnyqtwsnzivxlipedchs']], [['helloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['helbcdhhellyom&yfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhuki&ubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsq&cjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['helbcdhhellyofmyfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhukbiubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsjqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['llomyfrienhehellomyfrienhellooxjumpsoverthelazyollod'], ['hhkiubneajdadahhkiubneajdahhkktfqilokranpdahwvukhhkz'], ['ppsqcjvmirlilippsqcjvmirlippssbnyqtwszivxlipedcsppsh']], [['yzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthi'], ['uvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpde'], ['cdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlm']], [['helolnhelnlo'], ['dahkhjdahjhk'], ['lipsprliprps']], [['wxxyyworld'], ['sttuusknhz'], ['abbccasvph']], [['bcohhellomyfhi'], ['xykddahhkiubde'], ['fgsllippsqcjlm']], [['heloethequickbrownfoxjumpsgmetovehrthelazydo'], ['dahkapdamqeygxnksjbktfqilociapkradnpdahwvuzk'], ['lipsixliuymgofvsarjsbnyqtwkqixszilvxlipedchs']], [['yzhzzzzzzzzzzzzzzeyheelzzzzzzzzzzz'], ['uvdvvvvvvvvvvvvvvaudaahvvvvvvvvvvv'], ['cdlddddddddddddddicliipddddddddddd']], [['hi    et a gf helloetmthelquickbrownfoxjumpsoverthnelazydoyfrienhellod'], ['de    ap w cb dahhkapipdahmqeygxnksjbktfqilokranpdjahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwszivxlripedchscjvmirlippsh']], [['helloetmpsoverthelazydoyfrienhellodfhelllod'], ['dahhkapilokranpdahwvuzkubneajdahhkzbdahhhkz'], ['lippsixqtwszivxlipedchscjvmirlippshjlipppsh']], [['hellll'], ['dahhhh'], ['lipppp']], [['helhlelthi'], ['dahdhahpde'], ['liplpipxlm']], [['ohhellomyfrieod'], ['kddahhkiubneakz'], ['sllippsqcjvmish']], [['helothelbcd&^%lomyfriendoxhihhelloheqolod'], ['dahkpdahxyz&^%hkiubneajzktdeddahhkdamkhkz'], ['lipsxlipfgh&^%psqcjvmirhsblmllippsliuspsh']], [['ohhelllomyfriend'], ['kddahhhkiubneajz'], ['sllipppsqcjvmirh']], [['hellhi'], ['dahhde'], ['lipplm']], [['thelothequickbrownfonxjumpsgetoverthelazydo'], ['pdahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzk'], ['xlipsxliuymgofvsarjsrbnyqtwkixszivxlipedchs']], [['hhhellyomyfrienhellodl'], ['dddahhukiubneajdahhkzh'], ['lllippcsqcjvmirlippshp']], [['ohhelolomyfrienhellodgf'], ['kddahkhkiubneajdahhkzcb'], ['sllipspsqcjvmirlippshkj']], [['hhellomyfriengfrieonhelheti    get a gf hellomyfrieonhello dlohellod'], ['ddahhkiubneajcbneakjdahdape    cap w cb dahhkiubneakjdahhk zhkdahhkz'], ['llippsqcjvmirkjvmisrliplixm    kix e kj lippsqcjvmisrlipps hpslippsh']], [['hhelyfrienhellod'], ['ddahubneajdahhkz'], ['llipcjvmirlippsh']], [['b&cc^'], ['x&yy^'], ['f&gg^']], [['heti    get a gfrieonhello helothequickbrownfoxumpsovekrthelazydodehel'], ['dape    cap w cbneakjdahhk dahkpdamqeygxnksjbktqilokragnpdahwvuzkzadah'], ['lixm    kix e kjvmisrlipps lipsxliuymgofvsarjsbyqtwsziovxlipedchshilip']], [['hello helowhellomyfrrienhelhb&cd&^lodorld'], ['dahhk dahksdahhkiubnneajdahdx&yz&^hkzknhz'], ['lipps lipsalippsqcjvvmirliplf&gh&^pshsvph']], [['bchllomyfhi'], ['xydhhkiubde'], ['fglppsqcjlm']], [['hhellomyfrienhellodehi'], ['ddahhkiubneajdahhkzade'], ['llippsqcjvmirlippshilm']], [['helothequickbrownfoxumpsovekrthelazydodehel'], ['dahkpdamqeygxnksjbktqilokragnpdahwvuzkzadah'], ['lipsxliuymgofvsarjsbyqtwsziovxlipedchshilip']], [['gehelloetmpsoverthelazydoyfrienhellodfhelllod'], ['cadahhkapilokranpdahwvuzkubneajdahhkzbdahhhkz'], ['kilippsixqtwszivxlipedchscjvmirlippshjlipppsh']], [['hellomyfrienhelleodrownfoxjumpabcdefghijklmnopqrstuvwxyzythequickbrownfoxjumhello'], ['dahhkiubneajdahhakznksjbktfqilwxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqidahhk'], ['lippsqcjvmirlippishvsarjsbnyqtefghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqlipps']], [['heti    get a gfrieonhello helothequicikbrownfoxumpsovekrthelazydodehel'], ['dape    cap w cbneakjdahhk dahkpdamqeyegxnksjbktqilokragnpdahwvuzkzadah'], ['lixm    kix e kjvmisrlipps lipsxliuymgmofvsarjsbyqtwsziovxlipedchshilip']], [['hod'], ['dkz'], ['lsh']], [['hhelloehellomyfrieonhelllotmyhi    et a gf hellomyfriendfrienhellodhelazydol'], ['ddahhkadahhkiubneakjdahhhkpiude    ap w cb dahhkiubneajzbneajdahhkzdahwvuzkh'], ['llippsilippsqcjvmisrlipppsxqclm    ix e kj lippsqcjvmirhjvmirlippshlipedchsp']], [['hhellomyfriengfrieonhelheti'], ['ddahhkiubneajcbneakjdahdape'], ['llippsqcjvmirkjvmisrliplixm']], [['ehabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelcazydoit'], ['adwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahywvuzkep'], ['ilefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipgedchsmx']], [['ehelloetyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthiet'], ['adahhkapubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdeap'], ['ilippsixcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmix']], [['%bcd&^%'], ['%xyz&^%'], ['%fgh&^%']], [['thequickbromwnfoxjumpsoverthelazydog'], ['pdamqeygxnkisjbktfqilokranpdahwvuzkc'], ['xliuymgofvsqarjsbnyqtwszivxlipedchsk']], [['theqcuickbrownfoxjumpsoverthelazydog'], ['pdamyqeygxnksjbktfqilokranpdahwvuzkc'], ['xliugymgofvsarjsbnyqtwszivxlipedchsk']], [['hi    et a gf helbcd&^%lomyfriend'], ['de    ap w cb dahxyz&^%hkiubneajz'], ['lm    ix e kj lipfgh&^%psqcjvmirh']], [['yzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvv'], ['cdddddddddddddddd']], [['hellogfa world'], ['dahhkcbw sknhz'], ['lippskje asvph']], [['hi    et a gf helbcd&^%lomy friend'], ['de    ap w cb dahxyz&^%hkiu bneajz'], ['lm    ix e kj lipfgh&^%psqc jvmirh']], [['bcdd&^%'], ['xyzz&^%'], ['fghh&^%']], [['%bcdhello&^%'], ['%xyzdahhk&^%'], ['%fghlipps&^%']], [['thequicerthelazydog'], ['pdamqeyanpdahwvuzkc'], ['xliuymgivxlipedchsk']], [['%bcdhelwxylo&^%'], ['%xyzdahstuhk&^%'], ['%fghlipabcps&^%']], [['ehello'], ['adahhk'], ['ilipps']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcddddddddddddddddddddddddddddddddd']], [['hellogfa worl d'], ['dahhkcbw sknh z'], ['lippskje asvp h']], [['hi    et a gf hellogmyfriend'], ['de    ap w cb dahhkciubneajz'], ['lm    ix e kj lippskqcjvmirh']], [['%bc^d&^%'], ['%xy^z&^%'], ['%fg^h&^%']], [['bc&^%'], ['xy&^%'], ['fg&^%']], [['abcdefghijklmnopqrstuvxyz'], ['wxyzabcdefghijklmnopqrtuv'], ['efghijklmnopqrstuvwxyzbcd']], [['thequicerthelazydoag'], ['pdamqeyanpdahwvuzkwc'], ['xliuymgivxlipedchsek']], [['thequicertthelazydog'], ['pdamqeyanppdahwvuzkc'], ['xliuymgivxxlipedchsk']], [['hellogfa'], ['dahhkcbw'], ['lippskje']], [['thequickbrthequicerthelazydogownfoxjumpsoverthelazydo'], ['pdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokranpdahwvuzk'], ['xliuymgofvxliuymgivxlipedchsksarjsbnyqtwszivxlipedchs']], [['bc&^%thequicerthelazydogbc&^%'], ['xy&^%pdamqeyanpdahwvuzkcxy&^%'], ['fg&^%xliuymgivxlipedchskfg&^%']], [['abcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyz'], ['wxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuv'], ['efghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcd']], [['thequickbrownfoxydo'], ['pdamqeygxnksjbktuzk'], ['xliuymgofvsarjsbchs']], [['thequicwkbrthequicerthelazydogownofoxjumpsoverthelazydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilokranpdahwvuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwszivxlipedchs']], [['thequickborownfoxydo'], ['pdamqeygxknksjbktuzk'], ['xliuymgofsvsarjsbchs']], [['world'], ['sknhz'], ['asvph']], [['abcdefghihjklmnopqrstuvxyz'], ['wxyzabcdedfghijklmnopqrtuv'], ['efghijklmlnopqrstuvwxyzbcd']], [['hi    ehellot a gf hellogmyfriend'], ['de    adahhkp w cb dahhkciubneajz'], ['lm    ilippsx e kj lippskqcjvmirh']], [['hi    et a gf helbcmd&^%lomyfriend'], ['de    ap w cb dahxyiz&^%hkiubneajz'], ['lm    ix e kj lipfgqh&^%psqcjvmirh']], [['%b^c^d&^%'], ['%x^y^z&^%'], ['%f^g^h&^%']], [['hellomyfriend'], ['dahhkiubneajz'], ['lippsqcjvmirh']], [['helbcd&^%lomy'], ['dahxyz&^%hkiu'], ['lipfgh&^%psqc']], [['thequickbromwnfoxjumpsovertheletazydog'], ['pdamqeygxnkisjbktfqilokranpdahapwvuzkc'], ['xliuymgofvsqarjsbnyqtwszivxlipixedchsk']], [['hellogmyfriend'], ['dahhkciubneajz'], ['lippskqcjvmirh']], [['thequicekbromwnfoxjumpsoverthelazydog'], ['pdamqeyagxnkisjbktfqilokranpdahwvuzkc'], ['xliuymgiofvsqarjsbnyqtwszivxlipedchsk']], [['yzz'], ['uvv'], ['cdd']], [['hi    ehellott a gf hellogmyfriend'], ['de    adahhkpp w cb dahhkciubneajz'], ['lm    ilippsxx e kj lippskqcjvmirh']], [['thkbrownfoxjumpsoverthelazydo'], ['pdgxnksjbktfqilokranpdahwvuzk'], ['xlofvsarjsbnyqtwszivxlipedchs']], [['thequickbrownfoxjumpsoverthelazydfo'], ['pdamqeygxnksjbktfqilokranpdahwvuzbk'], ['xliuymgofvsarjsbnyqtwszivxlipedchjs']], [['theqcuickbrownfoxjumpsoverthelazbydog'], ['pdamyqeygxnksjbktfqilokranpdahwvxuzkc'], ['xliugymgofvsarjsbnyqtwszivxlipedfchsk']], [['theqcuickabcdefghihjklmnopqrstuvxyzbrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghijklmnopqrtuvxnksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['helllogfa'], ['dahhhkcbw'], ['lipppskje']], [['thequickbrthequicerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymgivxlipedchsksarjsbnyqtwszipedchs']], [['bc&^%thequicerthelazydothkbrownfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnksjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvsarjsbnyqtwszivxlipedchs&^%']], [['bc&^hello%'], ['xy&^dahhk%'], ['fg&^lipps%']], [['ehellott'], ['adahhkpp'], ['ilippsxx']], [['thequickbromwnfoxjumpsoverdog'], ['pdamqeygxnkisjbktfqilokranzkc'], ['xliuymgofvsqarjsbnyqtwszivhsk']], [['hellogfa wetorld'], ['dahhkcbw sapknhz'], ['lippskje aixsvph']], [['wetorld'], ['sapknhz'], ['aixsvph']], [['hi    et a gf helbcdhi    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzde    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlm    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['hi    et a gf helbcmd&^%lo myfriend'], ['de    ap w cb dahxyiz&^%hk iubneajz'], ['lm    ix e kj lipfgqh&^%ps qcjvmirh']], [['thequicerthequicekbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgiofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['thequiuckbrownfoxjumpsoverthelazydo'], ['pdamqeqygxnksjbktfqilokranpdahwvuzk'], ['xliuymygofvsarjsbnyqtwszivxlipedchs']], [['bc&^%thequicerthelazydoghelbcmd&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchsklipfgqh&^%psfg&^%']], [['helbcd&^thequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfgh&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['bc&thequicertthelazydog^%'], ['xy&pdamqeyanppdahwvuzkc^%'], ['fg&xliuymgivxxlipedchsk^%']], [['theqthequicerthequicekbromwnfoxjumpsoverthelazydogthelazydogdog'], ['pdampdamqeyanpdamqeyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkczkc'], ['xliuxliuymgivxliuymgiofvsqarjsbnyqtwszivxlipedchskxlipedchskhsk']], [['hi    et  a gf helbcmld&^%lo myfriend'], ['de    ap  w cb dahxyihz&^%hk iubneajz'], ['lm    ix  e kj lipfgqph&^%ps qcjvmirh']], [['afbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyz'], ['wbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuv'], ['ejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcd']], [['bc&^%thequicerthelazydoghelbcmd&&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchsklipfgqh&&^%psfg&^%']], [['ehelloyzz'], ['adahhkuvv'], ['ilippscdd']], [['hi r   et a gf helbcmd&^%lomyfriend'], ['de n   ap w cb dahxyiz&^%hkiubneajz'], ['lm v   ix e kj lipfgqh&^%psqcjvmirh']], [['gf%b^c^d&^%'], ['cb%x^y^z&^%'], ['kj%f^g^h&^%']], [['thequtickborownfoxydo'], ['pdamqpeygxknksjbktuzk'], ['xliuyxmgofsvsarjsbchs']], [['thequicerthequicezkbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyavgxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgidofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['bc&^%thequicerthelazydohighelbcmd&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkdecdahxyiz&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchslmklipfgqh&^%psfg&^%']], [['hellogmythequicertthelazydogfriend'], ['dahhkciupdamqeyanppdahwvuzkcbneajz'], ['lippskqcxliuymgivxxlipedchskjvmirh']], [['ello'], ['ahhk'], ['ipps']], [['hellogfa wethorld'], ['dahhkcbw sapdknhz'], ['lippskje aixlsvph']], [['bcello&^%'], ['xyahhk&^%'], ['fgipps&^%']], [['hellogmyfriend&^%lomyfriend'], ['dahhkciubneajz&^%hkiubneajz'], ['lippskqcjvmirh&^%psqcjvmirh']], [['yzyz'], ['uvuv'], ['cdcd']], [['helbcy'], ['dahxyu'], ['lipfgc']], [['hellogmyfriend&^%lomyfriendgf'], ['dahhkciubneajz&^%hkiubneajzcb'], ['lippskqcjvmirh&^%psqcjvmirhkj']], [['afbcdefghijklhellogfa'], ['wbxyzabcdefghdahhkcbw'], ['ejfghijklmnoplippskje']], [['ehellot'], ['adahhkp'], ['ilippsx']], [['theqkbrownfoxydo'], ['pdamgxnksjbktuzk'], ['xliuofvsarjsbchs']], [['worl'], ['sknh'], ['asvp']], [['thequickbrownfoxbcdd&^%ydo'], ['pdamqeygxnksjbktxyzz&^%uzk'], ['xliuymgofvsarjsbfghh&^%chs']], [['hi    et a gf helbcdhibc&^%    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzdexy&^%    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlmfg&^%    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['worlwxyyd'], ['sknhstuuz'], ['asvpabcch']], [['yzzz'], ['uvvv'], ['cddd']], [['ehe'], ['ada'], ['ili']], [['helbcmd&^%lomyfriend'], ['dahxyiz&^%hkiubneajz'], ['lipfgqh&^%psqcjvmirh']], [['hi    et a gf hellogmyfiend'], ['de    ap w cb dahhkciubeajz'], ['lm    ix e kj lippskqcjmirh']], [['hellogfaello'], ['dahhkcbwahhk'], ['lippskjeipps']], [['glhello'], ['chdahhk'], ['kplipps']], [['hellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfriendfriend'], ['dahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmirhjvmirh']], [['theqcuickabcdefghihjklmnoownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghijkksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqrssarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddddddddddddddddddddddddddddddd']], [['heleloo'], ['dahahkk'], ['lipipss']], [['hellogfa worwethorld'], ['dahhkcbw sknsapdknhz'], ['lippskje asvaixlsvph']], [['%bcthkbrownfoxjumpsoverthelazydod&^%'], ['%xypdgxnksjbktfqilokranpdahwvuzkz&^%'], ['%fgxlofvsarjsbnyqtwszivxlipedchsh&^%']], [['%bcdhelwxylo&&^%'], ['%xyzdahstuhk&&^%'], ['%fghlipabcps&&^%']], [['eheellot'], ['adaahhkp'], ['iliippsx']], [['helllo '], ['dahhhk '], ['lippps ']], [['hi    eiend'], ['de    aeajz'], ['lm    imirh']], [['hi    et a gf helbc%bc^d&^%d&^%lomy friend'], ['de    ap w cb dahxy%xy^z&^%z&^%hkiu bneajz'], ['lm    ix e kj lipfg%fg^h&^%h&^%psqc jvmirh']], [['ywxy'], ['ustu'], ['cabc']], [['hwellogfa wethorld'], ['dsahhkcbw sapdknhz'], ['laippskje aixlsvph']], [['helbcmd&^%lomyfiend'], ['dahxyiz&^%hkiubeajz'], ['lipfgqh&^%psqcjmirh']], [['helbcdworlwxyyd&^thequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyzsknhstuuz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfghasvpabcch&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['helllo'], ['dahhhk'], ['lippps']], [['woworwethorldrlwxyyd'], ['sksknsapdknhznhstuuz'], ['asasvaixlsvphvpabcch']], [['thequiceurtthelazydog'], ['pdamqeyaqnppdahwvuzkc'], ['xliuymgiyvxxlipedchsk']], [['hi    et  a g^f helbcmld&^%lo myfriend'], ['de    ap  w c^b dahxyihz&^%hk iubneajz'], ['lm    ix  e k^j lipfgqph&^%ps qcjvmirh']], [['hhellogmythequicertthelazydogfriendelbcmd&^%lomyfiend'], ['ddahhkciupdamqeyanppdahwvuzkcbneajzahxyiz&^%hkiubeajz'], ['llippskqcxliuymgivxxlipedchskjvmirhipfgqh&^%psqcjmirh']], [['hellomyfrienduvxyz'], ['dahhkiubneajzqrtuv'], ['lippsqcjvmirhyzbcd']], [['thequicerthequicezkbroomwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyavgxnkkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgidofvssqarjsbnyqtwszivxlipedchskxlipedchsk']], [['fgf'], ['bcb'], ['jkj']], [['yzyzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvv'], ['cdcdddddddddddd']], [['helbcdworlwxyyd&^thequiuckbrownfoxjumpsoverthelazydothequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyzsknhstuuz&^pdamqeqygxnksjbktfqilokranpdahwvuzkpdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfghasvpabcch&^xliuymygofvsarjsbnyqtwszivxlipedchsxliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['theqeutickborownfoxydo'], ['pdamaqpeygxknksjbktuzk'], ['xliuiyxmgofsvsarjsbchs']], [['thequickbrownfoxjumpsoverthelazyd'], ['pdamqeygxnksjbktfqilokranpdahwvuz'], ['xliuymgofvsarjsbnyqtwszivxlipedch']], [['bc&^%thequicerthelazydothkbroswnfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnkosjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvswarjsbnyqtwszivxlipedchs&^%']], [['woworwethorlldrlwxd'], ['sksknsapdknhhznhstz'], ['asasvaixlsvpphvpabh']], [['%b^c^d&^d%'], ['%x^y^z&^z%'], ['%f^g^h&^h%']], [['gglhello'], ['cchdahhk'], ['kkplipps']], [['%bcdheolwxylo&&^%'], ['%xyzdakhstuhk&&^%'], ['%fghlispabcps&&^%']], [['thequicertthequickbrthequicerthelazydogownfoxjumpsovelazydohelazydoag'], ['pdamqeyanppdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokrahwvuzkdahwvuzkwc'], ['xliuymgivxxliuymgofvxliuymgivxlipedchsksarjsbnyqtwszipedchslipedchsek']], [['hi    et a gf helbcmhelbcmd&^%lomyfriendd&^%lo myfriend'], ['de    ap w cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubneajz'], ['lm    ix e kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjvmirh']], [['s'], ['o'], ['w']], [['bc&^%thequicerthela^zydoghelbcmd&&^%lobc&^%'], ['xy&^%pdamqeyanpdahw^vuzkcdahxyiz&&^%hkxy&^%'], ['fg&^%xliuymgivxlipe^dchsklipfgqh&&^%psfg&^%']], [['thequickborownfoxydfo'], ['pdamqeygxknksjbktuzbk'], ['xliuymgofsvsarjsbchjs']], [['%bcdhelwxyl%'], ['%xyzdahstuh%'], ['%fghlipabcp%']], [['thequickbromownfoxjumpsoverdog'], ['pdamqeygxnkiksjbktfqilokranzkc'], ['xliuymgofvsqsarjsbnyqtwszivhsk']], [['hellogmyfriend&^%lomyfrienehellott'], ['dahhkciubneajz&^%hkiubneajadahhkpp'], ['lippskqcjvmirh&^%psqcjvmirilippsxx']], [['helbcthequickbrownfoxbcdd&^%ydoy'], ['dahxypdamqeygxnksjbktxyzz&^%uzku'], ['lipfgxliuymgofvsarjsbfghh&^%chsc']], [['ggff'], ['ccbb'], ['kkjj']], [['hhillogfaello'], ['ddehhkcbwahhk'], ['llmppskjeipps']], [['thequicwkbrthequicerthelazydogownofoxjumpszydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilovuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwdchs']], [['worethorld'], ['sknapdknhz'], ['asvixlsvph']], [['thequiceurtazydog'], ['pdamqeyaqnpwvuzkc'], ['xliuymgiyvxedchsk']], [['helbcmd&^%lomyfriendxy'], ['dahxyiz&^%hkiubneajztu'], ['lipfgqh&^%psqcjvmirhbc']], [['helbcthequickbryzzoy'], ['dahxypdamqeygxnuvvku'], ['lipfgxliuymgofvcddsc']], [['hwellogfa wethorldd'], ['dsahhkcbw sapdknhzz'], ['laippskje aixlsvphh']], [['worwethorld'], ['sknsapdknhz'], ['asvaixlsvph']], [['o%bcdhelwxylo&^%'], ['k%xyzdahstuhk&^%'], ['s%fghlipabcps&^%']], [['eehello'], ['aadahhk'], ['iilipps']], [['thequicydog'], ['pdamqeyuzkc'], ['xliuymgchsk']], [['hi    et  a g^f hhelbcd&^%lomyelbcmld&^%lo myfriend'], ['de    ap  w c^b ddahxyz&^%hkiuahxyihz&^%hk iubneajz'], ['lm    ix  e k^j llipfgh&^%psqcipfgqph&^%ps qcjvmirh']], [['theqkbrowfnfoxydo'], ['pdamgxnksbjbktuzk'], ['xliuofvsajrjsbchs']], [['hi    et a gf helbcdhibc&^%    et a abcdefghihjklmnopqrstuvxyzllogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzdexy&^%    ap w wxyzabcdedfghijklmnopqrtuvhhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlmfg&^%    ix e efghijklmlnopqrstuvwxyzbcdppskqcjvmirh&^%psqcjvmirh']], [['hwellogfa'], ['dsahhkcbw'], ['laippskje']], [['hi r  et a gf helbcmd&^%lomyfriend'], ['de n  ap w cb dahxyiz&^%hkiubneajz'], ['lm v  ix e kj lipfgqh&^%psqcjvmirh']], [['abcdefghijklmnopqrstuhi    et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde    ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm    ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['thkbrownfoxjumpsoverth%bcdhelwxylo&^%elazydo'], ['pdgxnksjbktfqilokranpd%xyzdahstuhk&^%ahwvuzk'], ['xlofvsarjsbnyqtwszivxl%fghlipabcps&^%ipedchs']], [['bc&thequicerttheworwethorldlazydog^%'], ['xy&pdamqeyanppdasknsapdknhzhwvuzkc^%'], ['fg&xliuymgivxxliasvaixlsvphpedchsk^%']], [['wyorlwxyyd'], ['suknhstuuz'], ['acsvpabcch']], [['hi    et a gf helbcmhelbcmd&^%lomyfriendd&^%lo myfend'], ['de    ap w cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubajz'], ['lm    ix e kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjirh']], [['hhelbcd&^%lomyelbcmld&^%lo'], ['ddahxyz&^%hkiuahxyihz&^%hk'], ['llipfgh&^%psqcipfgqph&^%ps']], [['thequickbrownfoxjumpsovworwethorlderthelazyd'], ['pdamqeygxnksjbktfqilokrsknsapdknhzanpdahwvuz'], ['xliuymgofvsarjsbnyqtwszasvaixlsvphivxlipedch']], [['thequicwkbrthequicerthelazydogaownofoxjumpsoverthelazydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcwksjkbktfqilokranpdahwvuzk'], ['xliuymgaofvxliuymgivxlipedchskesarsjsbnyqtwszivxlipedchs']], [['%bdcthkbrownfoxjumpsoverthelazydod&^%'], ['%xzypdgxnksjbktfqilokranpdahwvuzkz&^%'], ['%fhgxlofvsarjsbnyqtwszivxlipedchsh&^%']], [['worlwxd'], ['sknhstz'], ['asvpabh']], [['herienduvxyz'], ['daneajzqrtuv'], ['livmirhyzbcd']], [['hi    et a gf hellogmyfriiend'], ['de    ap w cb dahhkciubneeajz'], ['lm    ix e kj lippskqcjvmmirh']], [['boc&^hello%'], ['xky&^dahhk%'], ['fsg&^lipps%']], [['abcdyzzefghijklmnopqrstuvxyz'], ['wxyzuvvabcdefghijklmnopqrtuv'], ['efghcddijklmnopqrstuvwxyzbcd']], [['yxwxy'], ['utstu'], ['cbabc']], [['yzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddlippsdddddddddddddddddddddddddddd']], [['ahwellogfa wethorldd'], ['wdsahhkcbw sapdknhzz'], ['elaippskje aixlsvphh']], [['hi    et a gf helbcmd&^%l o myfriend'], ['de    ap w cb dahxyiz&^%h k iubneajz'], ['lm    ix e kj lipfgqh&^%p s qcjvmirh']], [['hellogymyfriend&^%lomyfriendgf'], ['dahhkcuiubneajz&^%hkiubneajzcb'], ['lippskcqcjvmirh&^%psqcjvmirhkj']], [['hellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfririend'], ['dahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneneajz'], ['lippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmvmirh']], [['heflbcmyd&^%lomyfriend'], ['dabhxyiuz&^%hkiubneajz'], ['lijpfgqch&^%psqcjvmirh']], [['myfriendvwxyz'], ['iubneajzrstuv'], ['qcjvmirhzabcd']], [['theqcuickabcdefghihjklmehellotnfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghiadahhkpjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqilippsxrjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['thequickbrthequiceerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeyaanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymgiivxlipedchsksarjsbnyqtwszipedchs']], [['thequhelbcmld&^%loicerthelazy%doag'], ['pdamqdahxyihz&^%hkeyanpdahwvu%zkwc'], ['xliuylipfgqph&^%psmgivxlipedc%hsek']], [['%bcdhelloo&^%'], ['%xyzdahhkk&^%'], ['%fghlippss&^%']], [['hellogmyfrithequickbromwnfoxjumpsoverthelazydogend&^%lomhi'], ['dahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuzkcajz&^%hkide'], ['lippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedchskirh&^%psqlm']], [['afbcdefghijklhellogfa worl damnoyfrienduvxyz'], ['wbxyzabcdefghdahhkcbw sknh zwijkubneajzqrtuv'], ['ejfghijklmnoplippskje asvp heqrscjvmirhyzbcd']], [['%%bc^d&^%'], ['%%xy^z&^%'], ['%%fg^h&^%']], [['gfs'], ['cbo'], ['kjw']], [['hloglfa'], ['dhkchbw'], ['lpskpje']], [['thequicerpsoverthelazydogthelazydog'], ['pdamqeyanlokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivtwszivxlipedchskxlipedchsk']], [['gghelbcdworlwxyyd&^thequickbrownfoxjumpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabcch&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqcplipps']], [['hellogmyfiend'], ['dahhkciubeajz'], ['lippskqcjmirh']], [['thequiutckbrownfoxjumpstoverthelazydo'], ['pdamqeqpygxnksjbktfqilopkranpdahwvuzk'], ['xliuymyxgofvsarjsbnyqtwxszivxlipedchs']], [['helelooywxy'], ['dahahkkustu'], ['lipipsscabc']], [['bc&thequicertthelazydg^%'], ['xy&pdamqeyanppdahwvuzc^%'], ['fg&xliuymgivxxlipedchk^%']], [['helbc%bc^d&^%d&^%lomy'], ['dahxy%xy^z&^%z&^%hkiu'], ['lipfg%fg^h&^%h&^%psqc']], [['hi    etabcdefghijklhellogfa  a g^f helbcmld'], ['de    apwxyzabcdefghdahhkcbw  w c^b dahxyihz'], ['lm    ixefghijklmnoplippskje  e k^j lipfgqph']], [['helllogfa wethorld'], ['dahhhkcbw sapdknhz'], ['lipppskje aixlsvph']], [['hellhi    et a gf helbcd&^%lomyfriendlogfa'], ['dahhde    ap w cb dahxyz&^%hkiubneajzhkcbw'], ['lipplm    ix e kj lipfgh&^%psqcjvmirhpskje']], [['abcdefghijklmnopqrstuhi    et  g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde    ap  c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm    ix  k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['hello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzd'], ['dahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvz'], ['lipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdh']], [['helbcmld&^%lo'], ['dahxyihz&^%hk'], ['lipfgqph&^%ps']], [['hellogmyfriend&^%lomyfriendgfboc&^hello%'], ['dahhkciubneajz&^%hkiubneajzcbxky&^dahhk%'], ['lippskqcjvmirh&^%psqcjvmirhkjfsg&^lipps%']], [['abcdyzzefghijklmnopqrsthi    ehellot a gnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp w cjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx e krhyzbcd']], [['helbcmld'], ['dahxyihz'], ['lipfgqph']], [['heriennduvxyz'], ['daneajjzqrtuv'], ['livmirrhyzbcd']], [['hellogmyfriend&^%lomhi    et a %lo myfriendfriend'], ['dahhkciubneajz&^%hkide    ap w %hk iubneajzbneajz'], ['lippskqcjvmirh&^%psqlm    ix e %ps qcjvmirhjvmirh']], [['yzzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cddcdddddddddddddddddddddddddddddddddd']], [['boc&hi    et  a g^f helbcmld&^%lo myfriend^heo%'], ['xky&de    ap  w c^b dahxyihz&^%hk iubneajz^dak%'], ['fsg&lm    ix  e k^j lipfgqph&^%ps qcjvmirh^lis%']], [['abcdyzzefghijklmnopqrsthi    ehellot agnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp wcjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx ekrhyzbcd']], [['thequickbromohwellogfa wethorldwnfoxjumpsoverdog'], ['pdamqeygxnkikdsahhkcbw sapdknhzsjbktfqilokranzkc'], ['xliuymgofvsqslaippskje aixlsvpharjsbnyqtwszivhsk']], [['hihihellogmyfriendellogmyfriiend'], ['dededahhkciubneajzahhkciubneeajz'], ['lmlmlippskqcjvmirhippskqcjvmmirh']], [['bdcd&^%'], ['xzyz&^%'], ['fhgh&^%']], [['thequickbrownfoxydhhillogfaelloo'], ['pdamqeygxnksjbktuzddehhkcbwahhkk'], ['xliuymgofvsarjsbchllmppskjeippss']], [['helbcdhibc&^%'], ['dahxyzdexy&^%'], ['lipfghlmfg&^%']], [['thequiutckbrownfoxjumpstovelazydo'], ['pdamqeqpygxnksjbktfqilopkrahwvuzk'], ['xliuymyxgofvsarjsbnyqtwxszipedchs']], [['bc&^%thequicerthelazydothkbroswnfoxjumpsovtheqkbrownfoxydoerthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnkosjbktfqilokrpdamgxnksjbktuzkanpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvswarjsbnyqtwszxliuofvsarjsbchsivxlipedchs&^%']], [['theqcuickabcdefghinhjklmnopqrstuvxyzbrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdejdfghijklmnopqrtuvxnksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmrlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddddddddddddddddddddddddddddd']], [['herienduvxyhi    et a gf hellogmyfienddz'], ['daneajzqrtude    ap w cb dahhkciubeajzzv'], ['livmirhyzbclm    ix e kj lippskqcjmirhhd']], [['hi    et a gf heflbcmhelbcmd&^%lomyfriendd&^%lo cmyfend'], ['de    ap w cb dabhxyidahxyiz&^%hkiubneajzz&^%hk yiubajz'], ['lm    ix e kj lijpfgqlipfgqh&^%psqcjvmirhh&^%ps gqcjirh']], [['gghelbcdworlwxyyd&^thequickbrownfoxjuthequickbromownfoxjumpsoverdogmpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuz&^pdamqeygxnksjbktfqpdamqeygxnkiksjbktfqilokranzkcilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabcch&^xliuymgofvsarjsbnyxliuymgofvsqsarjsbnyqtwszivhskqtwszivxlipedchs%psqcplipps']], [['hellogmyfrithequiend&^%lomhi s   et a gf helbcmd&^%lo myfriendfriend'], ['dahhkciubnepdamqeajz&^%hkide o   ap w cb dahxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmxliuymirh&^%psqlm w   ix e kj lipfgqh&^%ps qcjvmirhjvmirh']], [['ywxytheqcuickbrownfoxjumpsoverthelazydog'], ['ustupdamyqeygxnksjbktfqilokranpdahwvuzkc'], ['cabcxliugymgofvsarjsbnyqtwszivxlipedchsk']], [['hellogfa wetoorld'], ['dahhkcbw sapkknhz'], ['lippskje aixssvph']], [['bcbcmd&^%lobc&^%'], ['xyxyiz&^%hkxy&^%'], ['fgfgqh&^%psfg&^%']], [['theqcuickabcdefghihjklmehellotnfoxjumpsoverthoelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghiadahhkpjbktfqilokranpdkahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqilippsxrjsbnyqtwszivxlsiplippskqcjvmirhedchsk']], [['abcdyzzefghijklmnopqrsthhelbcdhii    ehellot a gnduvxyz'], ['wxyzuvvabcdefghijklmnopddahxyzdee    adahhkp w cjzqrtuv'], ['efghcddijklmnopqrstuvwxllipfghlmm    ilippsx e krhyzbcd']], [['gnduvxyz%bcdhelwxyl%'], ['cjzqrtuv%xyzdahstuh%'], ['krhyzbcd%fghlipabcp%']], [['r'], ['n'], ['v']], [['hi    et a gf helbcd&^%lomy fiend'], ['de    ap w cb dahxyz&^%hkiu beajz'], ['lm    ix e kj lipfgh&^%psqc jmirh']], [['bc&thequicertthelazydhellog^%'], ['xy&pdamqeyanppdahwvuzdahhkc^%'], ['fg&xliuymgivxxlipedchlippsk^%']], [['ob%'], ['kx%'], ['sf%']], [['%%bc^d&hellogfa worwethorld^%'], ['%%xy^z&dahhkcbw sknsapdknhz^%'], ['%%fg^h&lippskje asvaixlsvph^%']], [['wxabcdefghijklmnopqrstuhi    et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['stwxyzabcdefghijklmnopqde    ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['abefghijklmnopqrstuvwxylm    ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['gfhello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzds'], ['cbdahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvzo'], ['kjlipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdhw']], [['hi    et a gftheqkbrowfnfoxydo helbcmhelbcmd&^%lomyfiriendd&^%lo myfrd'], ['de    ap w cbpdamgxnksbjbktuzk dahxyidahxyiz&^%hkiubeneajzz&^%hk iubnz'], ['lm    ix e kjxliuofvsajrjsbchs lipfgqlipfgqh&^%psqcjmvmirhh&^%ps qcjvh']], [['ehebc&^hello%'], ['adaxy&^dahhk%'], ['ilifg&^lipps%']], [['abcdyzzefghijklmnopqrsthi    ehellot ahellhi gnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp wdahhde cjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx elipplm krhyzbcd']], [['hellogmyfienid'], ['dahhkciubeajez'], ['lippskqcjmirmh']], [['hhelelooywxy'], ['ddahahkkustu'], ['llipipsscabc']], [['hellthequiuckbrownfoxjumpsoverthelazydoaaogfa worl d'], ['dahhpdamqeqygxnksjbktfqilokranpdahwvuzkwwkcbw sknh z'], ['lippxliuymygofvsarjsbnyqtwszivxlipedchseeskje asvp h']], [['fgyzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzzf'], ['bcuvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvvb'], ['jkcdcdddddlippsddddddddddddddddddddddddddddj']], [['thequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfo'], ['pdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbk'], ['xliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjs']], [['hi    et a gf helbcdhi    et a gf helylogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzde    ap w cb dahuhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlm    ix e kj lipcpskqcjvmirh&^%psqcjvmirh']], [['bcdd&^%%'], ['xyzz&^%%'], ['fghh&^%%']], [['%bob%cd&^%'], ['%xkx%yz&^%'], ['%fsf%gh&^%']], [['hi    et  ah gf helbcmld&^%lo myfriend'], ['de    ap  wd cb dahxyihz&^%hk iubneajz'], ['lm    ix  el kj lipfgqph&^%ps qcjvmirh']], [['hi r  et a gf helbcmd&^% lomyfriend'], ['de n  ap w cb dahxyiz&^% hkiubneajz'], ['lm v  ix e kj lipfgqh&^% psqcjvmirh']], [['bc&^%thequicerthelazydoghelbcmd&^%lobc&^yzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzz%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&^%hkxy&^uvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvv%'], ['fg&^%xliuymgivxlipedchsklipfgqh&^%psfg&^cdcdddddlippsdddddddddddddddddddddddddddd%']], [['hellogmyfrithequickbromwnfoxjumpsoverthelazylbcmd&^%lo myfriendfriend'], ['dahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuhxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedcpfgqh&^%ps qcjvmirhjvmirh']], [['hi    ehellott a gf hellogmyfrielnd'], ['de    adahhkpp w cb dahhkciubneahjz'], ['lm    ilippsxx e kj lippskqcjvmiprh']], [['worlwxdgf%b^c^d&^%'], ['sknhstzcb%x^y^z&^%'], ['asvpabhkj%f^g^h&^%']], [['hhelelooywxys'], ['ddahahkkustuo'], ['llipipsscabcw']], [['booc&^hello%'], ['xkky&^dahhk%'], ['fssg&^lipps%']], [['hellogmyfriend&^%lomyfrithequickbrownfoxjumpsovworwethorlderthelazydf'], ['dahhkciubneajz&^%hkiubnepdamqeygxnksjbktfqilokrsknsapdknhzanpdahwvuzb'], ['lippskqcjvmirh&^%psqcjvmxliuymgofvsarjsbnyqtwszasvaixlsvphivxlipedchj']], [['bc&^%thequicertwethorldwnfoxjumpsoverdoghelazydogmd&&abc&^%'], ['xy&^%pdamqeyanpsapdknhzsjbktfqilokranzkcdahwvuzkciz&&wxy&^%'], ['fg&^%xliuymgivxaixlsvpharjsbnyqtwszivhsklipedchskqh&&efg&^%']], [['thequtickborobc&thequicertthelazydg^%wnfoxydo'], ['pdamqpeygxknkxy&pdamqeyanppdahwvuzc^%sjbktuzk'], ['xliuyxmgofsvsfg&xliuymgivxxlipedchk^%arjsbchs']], [['bc&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['xy&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['fg&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']], [['hellogmyfthequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfoiend'], ['dahhkciubpdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbkeajz'], ['lippskqcjxliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjsmirh']], [['thequicetazydog'], ['pdamqeyapwvuzkc'], ['xliuymgixedchsk']], [['hellogmyfrriend&^%lomyfriendgf'], ['dahhkciubnneajz&^%hkiubneajzcb'], ['lippskqcjvvmirh&^%psqcjvmirhkj']], [['woretaahorld'], ['sknapwwdknhz'], ['asvixeelsvph']], [['ld'], ['hz'], ['ph']], [['helelooywxyhi    eiend'], ['dahahkkustude    aeajz'], ['lipipsscabclm    imirh']], [['woretarahorld'], ['sknapwnwdknhz'], ['asvixevelsvph']], [['bcdd&^d%'], ['xyzz&^z%'], ['fghh&^h%']], [['gghelbcdworlwxyybrownfoxjumpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuxnksjbktfqilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabccfvsarjsbnyqtwszivxlipedchs%psqcplipps']], [['whellomyfrienduvxyhelbcthequickbrownfoxbcdd&^%ydoyrlwxyyd'], ['sdahhkiubneajzqrtudahxypdamqeygxnksjbktxyzz&^%uzkunhstuuz'], ['alippsqcjvmirhyzbclipfgxliuymgofvsarjsbfghh&^%chscvpabcch']], [['wethorldwnfoxjumpsoverdog'], ['sapdknhzsjbktfqilokranzkc'], ['aixlsvpharjsbnyqtwszivhsk']], [['etabcdefghijklhellogfa'], ['apwxyzabcdefghdahhkcbw'], ['ixefghijklmnoplippskje']], [['hi    et sa gf helbcdhi    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap ow cb dahxyzde    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix we kj lipfghlm    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['thequicwkbrthequicerthelazydogownofoxjumpszytdo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilovupzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwdcxhs']], [['theqcuickabcdefghihjklmno%bcdhethequieceurtthelazydogydog'], ['pdamyqeygwxyzabcdedfghijk%xyzdapdamqeayaqnppdahwvuzkcuzkc'], ['xliugymgoefghijklmlnopqrs%fghlixliuymigiyvxxlipedchskchsk']], [['ahellhi'], ['wdahhde'], ['elipplm']], [['hi    et a gf helleomyfriened'], ['de    ap w cb dahhakiubneajaz'], ['lm    ix e kj lippisqcjvmirih']], [['hi    et a g'], ['de    ap w c'], ['lm    ix e k']], [['helbcmd&^%l'], ['dahxyiz&^%h'], ['lipfgqh&^%p']], [['helbc%bc^d&^%d&^%lomworwethorld^%y'], ['dahxy%xy^z&^%z&^%hkisknsapdknhz^%u'], ['lipfg%fg^h&^%h&^%psqasvaixlsvph^%c']], [['rgfhello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzds'], ['ncbdahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvzo'], ['vkjlipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdhw']], [['myfedamnopqrstrhind'], ['iubazwijklmnopndejz'], ['qcjiheqrstuvwxvlmrh']], [['abcdefghijklmnopqrstuvxyo%bcdhelwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyzdahstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghlipabcps&^%d']], [['hi    e g'], ['de    a c'], ['lm    i k']], [['ahelthequickbrownfoxydolhi'], ['wdahpdamqeygxnksjbktuzkhde'], ['elipxliuymgofvsarjsbchsplm']], [['thequicerthequcekbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuygiofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['bc&^%thequicyxwxyeroswnfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyutstuankosjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgcbabcivswarjsbnyqtwszivxlipedchs&^%']], [['bchi r  et a gf helbcmd&^% lomyfriend&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['xyde n  ap w cb dahxyiz&^% hkiubneajz&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['fglm v  ix e kj lipfgqh&^% psqcjvmirh&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']], [['worlafbcdefghijklhellogfa'], ['sknhwbxyzabcdefghdahhkcbw'], ['asvpejfghijklmnoplippskje']], [['ghellogmyfrithequickbromwnfoxjumpsoverthelazylbcmd&^%lofs'], ['cdahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuhxyiz&^%hkbo'], ['klippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedcpfgqh&^%psjw']], [['heflbklmnopqrsthilomyfriend'], ['dabhxghijklmnopdehkiubneajz'], ['lijpfopqrstuvwxlmpsqcjvmirh']], [['abcdyzzefghijklmnopqrsthi    ehellot a gnd'], ['wxyzuvvabcdefghijklmnopde    adahhkp w cjz'], ['efghcddijklmnopqrstuvwxlm    ilippsx e krh']], [['heyzzzbcdhibc&^%'], ['dauvvvxyzdexy&^%'], ['licdddfghlmfg&^%']], [['yzyyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdccdddddddddddddddddddddddddddddddddd']], [['abcdefghijklmnopqrstuvxyo%bcdhelhellogfa wetorldwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyzdahdahhkcbw sapknhzstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghliplippskje aixsvphabcps&^%d']], [['%%bdc^d&^%'], ['%%xzy^z&^%'], ['%%fhg^h&^%']], [['helbcmlld'], ['dahxyihhz'], ['lipfgqpph']], [['myfrieendvwxyz'], ['iubneaajzrstuv'], ['qcjvmiirhzabcd']], [['bc&thequricertthelazydog^%'], ['xy&pdamqneyanppdahwvuzkc^%'], ['fg&xliuyvmgivxxlipedchsk^%']], [['bc&^%thequicehwellogfa wethorldhelazydogbc&^%'], ['xy&^%pdamqeyadsahhkcbw sapdknhzdahwvuzkcxy&^%'], ['fg&^%xliuymgilaippskje aixlsvphlipedchskfg&^%']], [['hi    et a gf helbcd&^%lomy yfriend'], ['de    ap w cb dahxyz&^%hkiu ubneajz'], ['lm    ix e kj lipfgh&^%psqc cjvmirh']], [['hi    et a gf helbcmd&^%lo myfrhellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfririendiend'], ['de    ap w cb dahxyiz&^%hk iubndahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneneajzeajz'], ['lm    ix e kj lipfgqh&^%ps qcjvlippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmvmirhmirh']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzmyfriend^heo%zzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvviubneajz^dak%vvvvv'], ['cdcdddddddddddddddddddddddddddqcjvmirh^lis%ddddd']], [['thehelbc%bc^d&^%d&^%lomyquicerpsoverthelazydogthelazydog'], ['pdadahxy%xy^z&^%z&^%hkiumqeyanlokranpdahwvuzkcpdahwvuzkc'], ['xlilipfg%fg^h&^%h&^%psqcuymgivtwszivxlipedchskxlipedchsk']], [['eeheabcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzo'], ['aadawxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvk'], ['iiliefghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcds']], [['helylogmyfriend&^%lomyfriend'], ['dahuhkciubneajz&^%hkiubneajz'], ['lipcpskqcjvmirh&^%psqcjvmirh']], [['theqfkbrowfnfoxydo'], ['pdambgxnksbjbktuzk'], ['xliujofvsajrjsbchs']], [['eello'], ['aahhk'], ['iipps']], [['bc&threquicertthelazydhellog^%'], ['xy&pdnamqeyanppdahwvuzdahhkc^%'], ['fg&xlviuymgivxxlipedchlippsk^%']], [['hi    et a gf hiend'], ['de    ap w cb deajz'], ['lm    ix e kj lmirh']], [['hellond'], ['dahhkjz'], ['lippsrh']], [['hi    etg^f helbcmld'], ['de    apc^b dahxyihz'], ['lm    ixk^j lipfgqph']], [['yzzzzob%zzzzzzzzzzzzzzzzzzzzz'], ['uvvvvkx%vvvvvvvvvvvvvvvvvvvvv'], ['cddddsf%ddddddddddddddddddddd']], [['abcdefghijklmnopqrstuhi'], ['wxyzabcdefghijklmnopqde'], ['efghijklmnopqrstuvwxylm']], [['hi r   et a gf helbcmd&^%lomyfiend'], ['de n   ap w cb dahxyiz&^%hkiubeajz'], ['lm v   ix e kj lipfgqh&^%psqcjmirh']], [['hi r  et helelooa gf helbcmd&^%lomyfriend'], ['de n  ap dahahkkw cb dahxyiz&^%hkiubneajz'], ['lm v  ix lipipsse kj lipfgqh&^%psqcjvmirh']], [['hellomyfrienduvxyzo'], ['dahhkiubneajzqrtuvk'], ['lippsqcjvmirhyzbcds']], [['myhi    et a gf heflbcmhelbcmd&^%lomyfriendd&^%lo cmyfendfriendvwxyz'], ['iude    ap w cb dabhxyidahxyiz&^%hkiubneajzz&^%hk yiubajzbneajzrstuv'], ['qclm    ix e kj lijpfgqlipfgqh&^%psqcjvmirhh&^%ps gqcjirhjvmirhzabcd']], [['thequicwkbrthequicerthelazydogownofoxjheleloompszydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfdahahkkilovuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnlipipssqtwdchs']], [['hielbecmd&^%loomyfriend'], ['deahxayiz&^%hkkiubneajz'], ['lmipfigqh&^%pssqcjvmirh']], [['orlwxyyd'], ['knhstuuz'], ['svpabcch']], [['hello oworrld'], ['dahhk ksknnhz'], ['lipps sasvvph']], [['ggfgf'], ['ccbcb'], ['kkjkj']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzhellogmyfriend&^%lomhizzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvdahhkciubneajz&^%hkidevvvvvvvvvvv'], ['cdcdddddddddddddddddddddddlippskqcjvmirh&^%psqlmddddddddddd']], [['gabcdefghijklmnopqrstuvxyfo%bcdhelhellogfagfgf'], ['cwxyzabcdefghijklmnopqrtubk%xyzdahdahhkcbwcbcb'], ['kefghijklmnopqrstuvwxyzbcjs%fghliplippskjekjkj']], [['gf%^b^c^d&^%'], ['cb%^x^y^z&^%'], ['kj%^f^g^h&^%']], [['thequhelbcmld&i^%loicerthelazy%doag'], ['pdamqdahxyihz&e^%hkeyanpdahwvu%zkwc'], ['xliuylipfgqph&m^%psmgivxlipedc%hsek']], [['hellogymyfriend&^%lomyfriendgthequickbrthequicerthelazydogownfoxjumpsoverthelazydof'], ['dahhkcuiubneajz&^%hkiubneajzcpdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokranpdahwvuzkb'], ['lippskcqcjvmirh&^%psqcjvmirhkxliuymgofvxliuymgivxlipedchsksarjsbnyqtwszivxlipedchsj']], [['abcdetuvxyz'], ['wxyzapqrtuv'], ['efghixyzbcd']], [['hhillogfaell%b^c^d&^d%o'], ['ddehhkcbwahh%x^y^z&^z%k'], ['llmppskjeipp%f^g^h&^h%s']], [['bc&^%uthequicertdhelazydohigheblbcmd&^%lobc&^%'], ['xy&^%qpdamqeyanpzdahwvuzkdecdaxhxyiz&^%hkxy&^%'], ['fg&^%yxliuymgivxhlipedchslmklifpfgqh&^%psfg&^%']], [['rworl'], ['nsknh'], ['vasvp']], [['hellogymyfriend&^%lomyfrriendgf'], ['dahhkcuiubneajz&^%hkiubnneajzcb'], ['lippskcqcjvmirh&^%psqcjvvmirhkj']], [['heflbcmhelbcmd&^%lomyfriendd&^%lo'], ['dabhxyidahxyiz&^%hkiubneajzz&^%hk'], ['lijpfgqlipfgqh&^%psqcjvmirhh&^%ps']], [['bb'], ['xx'], ['ff']], [['worlafbcdefghhelbcmd&^%lomyfriendijklhellogfa'], ['sknhwbxyzabcddahxyiz&^%hkiubneajzefghdahhkcbw'], ['asvpejfghijkllipfgqh&^%psqcjvmirhmnoplippskje']], [['athequicwkbrthequicerthelazydogaownofoxjumpsoverthelazydo'], ['wpdamqeysgxnpdamqeyanpdahwvuzkcwksjkbktfqilokranpdahwvuzk'], ['exliuymgaofvxliuymgivxlipedchskesarsjsbnyqtwszivxlipedchs']], [['ahellogfa'], ['wdahhkcbw'], ['elippskje']], [['hi    et aa gf helbcmhelbcmd&^%lomyfriendd&^%lo myfriend'], ['de    ap ww cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubneajz'], ['lm    ix ee kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjvmirh']], [['worwethorld^%'], ['sknsapdknhz^%'], ['asvaixlsvph^%']], [['hhehi    etabcdefghijklhellogfa  a g^f helbcmldlelooywxys'], ['ddade    apwxyzabcdefghdahhkcbw  w c^b dahxyihzhahkkustuo'], ['llilm    ixefghijklmnoplippskje  e k^j lipfgqphpipsscabcw']], [['g^f'], ['c^b'], ['k^j']], [['abcdefghijklmnopqrstuhi     et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde     ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm     ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['thequickbrthequicqerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeymanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymguivxlipedchsksarjsbnyqtwszipedchs']], [['worlafbcdefghijklhellheyzzzbcdhibc&^%ogfa'], ['sknhwbxyzabcdefghdahhdauvvvxyzdexy&^%kcbw'], ['asvpejfghijklmnoplipplicdddfghlmfg&^%skje']], [['abcdyzzefghijklmnopqrsthi'], ['wxyzuvvabcdefghijklmnopde'], ['efghcddijklmnopqrstuvwxlm']], [['hi%%bc^d&hellogfa worwetbc&thequricertthelazydog^%horld^%'], ['de%%xy^z&dahhkcbw sknsapxy&pdamqneyanppdahwvuzkc^%dknhz^%'], ['lm%%fg^h&lippskje asvaixfg&xliuyvmgivxxlipedchsk^%lsvph^%']], [['o%bcdhe&^%'], ['k%xyzda&^%'], ['s%fghli&^%']], [['%bdcthkbrvownfoxjumpsoverthelazydod&^%'], ['%xzypdgxnrksjbktfqilokranpdahwvuzkz&^%'], ['%fhgxlofvzsarjsbnyqtwszivxlipedchsh&^%']], [['hmyfriendfyfriendelgflo'], ['diubneajzbubneajzahcbhk'], ['lqcjvmirhjcjvmirhipkjps']], [['thequhellogmyfthequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfoiendrtazydog'], ['pdamqdahhkciubpdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbkeajznpwvuzkc'], ['xliuylippskqcjxliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjsmirhvxedchsk']], [['theqcuickbrownfoxjumpsoverthbc&^%thequicerthela^zydoghelbcmd&&^%lobc&^%og'], ['pdamyqeygxnksjbktfqilokranpdxy&^%pdamqeyanpdahw^vuzkcdahxyiz&&^%hkxy&^%kc'], ['xliugymgofvsarjsbnyqtwszivxlfg&^%xliuymgivxlipe^dchsklipfgqh&&^%psfg&^%sk']], [['thequickbrownfoxjumpsovertheloazydfo'], ['pdamqeygxnksjbktfqilokranpdahkwvuzbk'], ['xliuymgofvsarjsbnyqtwszivxlipsedchjs']], [['yzzzz'], ['uvvvv'], ['cdddd']], [['bcddd&^%'], ['xyzzz&^%'], ['fghhh&^%']], [['worwetbc&thequricertthelazydog^%horld^%'], ['sknsapxy&pdamqneyanppdahwvuzkc^%dknhz^%'], ['asvaixfg&xliuyvmgivxxlipedchsk^%lsvph^%']], [['hellogfatoorld'], ['dahhkcbwpkknhz'], ['lippskjexssvph']], [['theqcuickbrownfoxjumheleloopsooverthelazbydog'], ['pdamyqeygxnksjbktfqidahahkklokkranpdahwvxuzkc'], ['xliugymgofvsarjsbnyqlipipsstwsszivxlipedfchsk']], [['hi    et a gf hethequickborownfoxydolbcd&^%lomyfriend'], ['de    ap w cb dapdamqeygxknksjbktuzkhxyz&^%hkiubneajz'], ['lm    ix e kj lixliuymgofsvsarjsbchspfgh&^%psqcjvmirh']], [['woworwethorlldrwlwxd'], ['sksknsapdknhhznshstz'], ['asasvaixlsvpphvapabh']], [['theqcrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamynksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['heflbklmnopqrsthilomyfrien'], ['dabhxghijklmnopdehkiubneaj'], ['lijpfopqrstuvwxlmpsqcjvmir']], [['hi    ehellot a gf helahelthequickbrownfoxydolhilogmyfriend'], ['de    adahhkp w cb dahwdahpdamqeygxnksjbktuzkhdehkciubneajz'], ['lm    ilippsx e kj lipelipxliuymgofvsarjsbchsplmpskqcjvmirh']], [['helbcml'], ['dahxyih'], ['lipfgqp']], [['hellogmyfriithequiend&^%lomhi'], ['dahhkciubneepdamqeajz&^%hkide'], ['lippskqcjvmmxliuymirh&^%psqlm']], [['helbc%bc^d&^%d&^%lommworwethorld^%y'], ['dahxy%xy^z&^%z&^%hkiisknsapdknhz^%u'], ['lipfg%fg^h&^%h&^%psqqasvaixlsvph^%c']], [['wxabcdefghijklmnopqrstuhi'], ['stwxyzabcdefghijklmnopqde'], ['abefghijklmnopqrstuvwxylm']], [['afbcdefghijklhellogfa xyz'], ['wbxyzabcdefghdahhkcbw tuv'], ['ejfghijklmnoplippskje bcd']], [['abcdefghijklhellogfa'], ['wxyzabcdefghdahhkcbw'], ['efghijklmnoplippskje']], [['hwelhellogfa wethorldlogfa wethorldd'], ['dsahdahhkcbw sapdknhzhkcbw sapdknhzz'], ['laiplippskje aixlsvphpskje aixlsvphh']], [['bc&^%thequicerth^elazydogbc&^%'], ['xy&^%pdamqeyanpd^ahwvuzkcxy&^%'], ['fg&^%xliuymgivxl^ipedchskfg&^%']], [['h ello oworrld'], ['d ahhk ksknnhz'], ['l ipps sasvvph']], [['ggherthelazydou%lomylhello'], ['ccdanpdahwvuzkq%hkiuhdahhk'], ['kklivxlipedchsy%psqcplipps']], [['%bcdhelwxyl&o&^%'], ['%xyzdahstuh&k&^%'], ['%fghlipabcp&s&^%']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzztheqcuickabcdefghihjklmnopqrstuvxyzbrownfoxjumpsoverthelhellzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvpdamyqeygwxyzabcdedfghijklmnopqrtuvxnksjbktfqilokranpdahdahhvv'], ['cdcdddddddddddddddddddddddddddddxliugymgoefghijklmlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippdd']], [['abacdefghijklmnopqrstuvwxyz'], ['wxwyzabcdefghijklmnopqrstuv'], ['efeghijklmnopqrstuvwxyzabcd']], [['thequickbrownftheqcuickabcdefghihjklmno%bcdhethequieceurtthelazydogydogoxjumpsoverthelazyd'], ['pdamqeygxnksjbpdamyqeygwxyzabcdedfghijk%xyzdapdamqeayaqnppdahwvuzkcuzkcktfqilokranpdahwvuz'], ['xliuymgofvsarjxliugymgoefghijklmlnopqrs%fghlixliuymigiyvxxlipedchskchsksbnyqtwszivxlipedch']], [['thheflbcmhelbcmd&^%lomyfriendd&^%louiceurtazydog'], ['pddabhxyidahxyiz&^%hkiubneajzz&^%hkqeyaqnpwvuzkc'], ['xllijpfgqlipfgqh&^%psqcjvmirhh&^%psymgiyvxedchsk']], [['abcdefghijklmnopqrstuvxyo%bcdxhelwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyztdahstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghblipabcps&^%d']], [['hefmnopqrsthilomyfrien'], ['dabijklmnopdehkiubneaj'], ['lijqrstuvwxlmpsqcjvmir']], [['zyzzz'], ['vuvvv'], ['dcddd']], [['lomyfriend&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['hkiubneajz&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['psqcjvmirh&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']]], [[['hi'], ['de'], ['lm']], [['asdfghjkl'], ['wozbcdfgh'], ['ewhjklnop']], [['gf'], ['cb'], ['kj']], [['et'], ['ap'], ['ix']], [['faewfawefaewg'], ['bwasbwsabwasc'], ['jeiajeaijeiak']], [['hellomyfriend'], ['dahhkiubneajz'], ['lippsqcjvmirh']], [['dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'], ['ztvzhijehbqdiehqbdhedqbjiheijqbdheijqbdbqyqbd'], ['hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl']], [['a'], ['w'], ['e']], [['abcde'], ['wxyza'], ['efghi']], [['uvwxyz'], ['qrstuv'], ['yzabcd']], [['test123'], ['paop123'], ['xiwx123']], [['1a2b3c'], ['1w2x3y'], ['1e2f3g']], [['hello world'], ['dahhk sknhz'], ['lipps asvph']], [['monitor'], ['ikjepkn'], ['qsrmxsv']], [['abc'], ['wxy'], ['efg']], [['kmt'], ['gip'], ['oqx']], [['park'], ['lwng'], ['tevo']], [['mtkmt'], ['ipgip'], ['qxoqx']], [['testpark123'], ['paoplwng123'], ['xiwxtevo123']], [['uvuvwxyzwxyz'], ['qrqrstuvstuv'], ['yzyzabcdabcd']], [['abcdetest123'], ['wxyzapaop123'], ['efghixiwx123']], [['testpark1233'], ['paoplwng1233'], ['xiwxtevo1233']], [['parrte1a2b3cstpark123'], ['lwnnpa1w2x3yoplwng123'], ['tevvxi1e2f3gwxtevo123']], [['pamonitork'], ['lwikjepkng'], ['teqsrmxsvo']], [['uvwabcxyuz'], ['qrswxytuqv'], ['yzaefgbcyd']], [['uvuvwxyzwxz'], ['qrqrstuvstv'], ['yzyzabcdabd']], [['t'], ['p'], ['x']], [['uvz'], ['qrv'], ['yzd']], [['kuvz'], ['gqrv'], ['oyzd']], [['kkuvz'], ['ggqrv'], ['ooyzd']], [['abct'], ['wxyp'], ['efgx']], [['tes2tpark1233'], ['pao2plwng1233'], ['xiw2xtevo1233']], [['at'], ['wp'], ['ex']], [['tkmtkmtuvwabcxyuzmt'], ['pgipgipqrswxytuqvip'], ['xoqxoqxyzaefgbcydqx']], [['uvuvwxyzwxzyz'], ['qrqrstuvstvuv'], ['yzyzabcdabdcd']], [['tkmtkmtuvwabuvuvwxyzwxzcxyuzmt'], ['pgipgipqrswxqrqrstuvstvytuqvip'], ['xoqxoqxyzaefyzyzabcdabdgbcydqx']], [['tsest123'], ['poaop123'], ['xwiwx123']], [['uvutvwxyzwxzyz'], ['qrqprstuvstvuv'], ['yzyxzabcdabdcd']], [['uvwparrkxyz'], ['qrslwnngtuv'], ['yzatevvobcd']], [['tsest123aparrte1a2b3cstpark123'], ['poaop123wlwnnpa1w2x3yoplwng123'], ['xwiwx123etevvxi1e2f3gwxtevo123']], [['abctabcde'], ['wxypwxyza'], ['efgxefghi']], [['tes2testpark123tpark1233'], ['pao2paoplwng123plwng1233'], ['xiw2xiwxtevo123xtevo1233']], [['uvwabbczxyuz'], ['qrswxxyvtuqv'], ['yzaeffgdbcyd']], [['uvvz'], ['qrrv'], ['yzzd']], [['tsest123aparrte1a2b3cstpatrk123'], ['poaop123wlwnnpa1w2x3yoplwpng123'], ['xwiwx123etevvxi1e2f3gwxtexvo123']], [['paabctak'], ['lwwxypwg'], ['teefgxeo']], [['zz'], ['vv'], ['dd']], [['pararte1a2b3cstpark123'], ['lwnwnpa1w2x3yoplwng123'], ['tevevxi1e2f3gwxtevo123']], [['pamonintork'], ['lwikjejpkng'], ['teqsrmrxsvo']], [['uvutvwxyzwxzyzabckuvz'], ['qrqprstuvstvuvwxygqrv'], ['yzyxzabcdabdcdefgoyzd']], [['uvutvwzzxyzwxzyz'], ['qrqprsvvtuvstvuv'], ['yzyxzaddbcdabdcd']], [['tabcdtabcde'], ['pwxyzpwxyza'], ['xefghxefghi']], [['uvwxwyz'], ['qrstsuv'], ['yzabacd']], [['aabcde'], ['wwxyza'], ['eefghi']], [['cpararte1a2b3cstpark1abct23'], ['ylwnwnpa1w2x3yoplwng1wxyp23'], ['gtevevxi1e2f3gwxtevo1efgx23']], [['tse3st23'], ['poa3op23'], ['xwi3wx23']], [['mtuvwxyzkmt'], ['ipqrstuvgip'], ['qxyzabcdoqx']], [['tsest123aparrte1a2b3cstapark123'], ['poaop123wlwnnpa1w2x3yopwlwng123'], ['xwiwx123etevvxi1e2f3gwxetevo123']], [['cpaararuvvzte1a2b3cstpark1abct23'], ['ylwwnwnqrrvpa1w2x3yoplwng1wxyp23'], ['gteevevyzzdxi1e2f3gwxtevo1efgx23']], [['tse32st23'], ['poa32op23'], ['xwi32wx23']], [['uvutvwxyzwxzyzabckumtkmtvz'], ['qrqprstuvstvuvwxygqipgiprv'], ['yzyxzabcdabdcdefgoyqxoqxzd']], [['uvwaubcxyuz'], ['qrswqxytuqv'], ['yzaeyfgbcyd']], [['abuvutvwxyzwxzyzabckuvzct'], ['wxqrqprstuvstvuvwxygqrvyp'], ['efyzyxzabcdabdcdefgoyzdgx']], [['tes2testppark1233'], ['pao2paopllwng1233'], ['xiw2xiwxttevo1233']], [['uvwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz'], ['qrstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv'], ['yzabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad']], [['xuvuvwxyzwxzyz'], ['tqrqrstuvstvuv'], ['byzyzabcdabdcd']], [['wuvwxyz'], ['sqrstuv'], ['ayzabcd']], [['aabdcde'], ['wwxzyza'], ['eefhghi']], [['uvwxyzwxyz'], ['qrstuvstuv'], ['yzabcdabcd']], [['cpararte1a2b3cstpark1abctuvwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz23'], ['ylwnwnpa1w2x3yoplwng1wxypqrstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv23'], ['gtevevxi1e2f3gwxtevo1efgxyzabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad23']], [['tkumtkmtuvwabuvuvwxyzwxzcxyuzmt'], ['pgqipgipqrswxqrqrstuvstvytuqvip'], ['xoyqxoqxyzaefyzyzabcdabdgbcydqx']], [['uvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywz'], ['qrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusv'], ['yzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcad']], [['wuvwxyzz'], ['sqrstuvv'], ['ayzabcdd']], [['xzyzabckumtkmtvz'], ['tvuvwxygqipgiprv'], ['bdcdefgoyqxoqxzd']], [['zzz'], ['vvv'], ['ddd']], [['ts2e3st23'], ['po2a3op23'], ['xw2i3wx23']], [['uvzmonitorz'], ['qrvikjepknv'], ['yzdqsrmxsvd']], [['t3se3'], ['p3oa3'], ['x3wi3']], [['uvutvwzzxz'], ['qrqprsvvtv'], ['yzyxzaddbd']], [['uvuvzwxyzwxz'], ['qrqrvstuvstv'], ['yzyzdabcdabd']], [['cpararteuvwxwyz1a2b3cstpark1abct23'], ['ylwnwnpaqrstsuv1w2x3yoplwng1wxyp23'], ['gtevevxiyzabacd1e2f3gwxtevo1efgx23']], [['stsest123'], ['opoaop123'], ['wxwiwx123']], [['tsest123aparrte1a2b3cstapark1213'], ['poaop123wlwnnpa1w2x3yopwlwng1213'], ['xwiwx123etevvxi1e2f3gwxetevo1213']], [['uvutvwvxyzwxzuvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywz'], ['qrqprsrtuvstvqrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusv'], ['yzyxzazbcdabdyzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcad']], [['kparrte1a2b3cstpark123'], ['glwnnpa1w2x3yoplwng123'], ['otevvxi1e2f3gwxtevo123']], [['pamonintorkpamonitoork'], ['lwikjejpknglwikjepkkng'], ['teqsrmrxsvoteqsrmxssvo']], [['tsestcpararte1a2b3cstpark1abct23123apa3'], ['poaopylwnwnpa1w2x3yoplwng1wxyp23123wlw3'], ['xwiwxgtevevxi1e2f3gwxtevo1efgx23123ete3']], [['abctest123'], ['wxypaop123'], ['efgxiwx123']], [['xzyzauvwxyzwxyzbckumtzkmtvz'], ['tvuvwqrstuvstuvxygqipvgiprv'], ['bdcdeyzabcdabcdfgoyqxdoqxzd']], [['1testpark1233'], ['1paoplwng1233'], ['1xiwxtevo1233']], [['tse32st233'], ['poa32op233'], ['xwi32wx233']], [['testtpark'], ['paopplwng'], ['xiwxxtevo']], [['abuvutvwxystsest123zwxzyzabckuvzct'], ['wxqrqprstuopoaop123vstvuvwxygqrvyp'], ['efyzyxzabcwxwiwx123dabdcdefgoyzdgx']], [['kmuvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywzt'], ['giqrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusvp'], ['oqyzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcadx']], [['xzyzabckumtkmtvzz'], ['tvuvwxygqipgiprvv'], ['bdcdefgoyqxoqxzdd']], [['uvuvwxyzzyzpamonitork'], ['qrqrstuvvuvlwikjepkng'], ['yzyzabcddcdteqsrmxsvo']], [['ut3se3vwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz'], ['qp3oa3rstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv'], ['yx3wi3zabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad']], [['abuvutvwxyzwxvzyzabckuvzct'], ['wxqrqprstuvstrvuvwxygqrvyp'], ['efyzyxzabcdabzdcdefgoyzdgx']], [['monitormuvvztkmt'], ['ikjepkniqrrvpgip'], ['qsrmxsvqyzzdxoqx']], [['uvxwpuvuvwxyzwxyzarrkxyz'], ['qrtslqrqrstuvstuvwnngtuv'], ['yzbatyzyzabcdabcdevvobcd']], [['uvwxzwyz'], ['qrstvsuv'], ['yzabdacd']], [['monitomrmuvvztkmt'], ['ikjepkiniqrrvpgip'], ['qsrmxsqvqyzzdxoqx']], [['parrte1a2b3cstpark123uvwabcxyuzuvwaxbbczxyuz'], ['lwnnpa1w2x3yoplwng123qrswxytuqvqrswtxxyvtuqv'], ['tevvxi1e2f3gwxtevo123yzaefgbcydyzaebffgdbcyd']], [['uvutvwxyzwxzyzabckuvzabctest123'], ['qrqprstuvstvuvwxygqrvwxypaop123'], ['yzyxzabcdabdcdefgoyzdefgxiwx123']], [['parkk'], ['lwngg'], ['tevoo']], [['uvwabbcxzxyuz'], ['qrswxxytvtuqv'], ['yzaeffgbdbcyd']], [['parrte1a2b3cst2park123'], ['lwnnpa1w2x3yop2lwng123'], ['tevvxi1e2f3gwx2tevo123']], [['bcd&^%'], ['xyz&^%'], ['fgh&^%']], [['thequickbrownfoxjumpsoverthelazydog'], ['pdamqeygxnksjbktfqilokranpdahwvuzkc'], ['xliuymgofvsarjsbnyqtwszivxlipedchsk']], [['abcdefghijklmnopqrstuvwxyz'], ['wxyzabcdefghijklmnopqrstuv'], ['efghijklmnopqrstuvwxyzabcd']], [['wxy'], ['stu'], ['abc']], [['yzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cddddddddddddddddddddddddd']], [['hi    et a gf hellomyfriend'], ['de    ap w cb dahhkiubneajz'], ['lm    ix e kj lippsqcjvmirh']], [['thequickbrownfoxjumpsoverthelazydo'], ['pdamqeygxnksjbktfqilokranpdahwvuzk'], ['xliuymgofvsarjsbnyqtwszivxlipedchs']], [['hi    et a gf hellomyfrienhellod'], ['de    ap w cb dahhkiubneajdahhkz'], ['lm    ix e kj lippsqcjvmirlippsh']], [['et'], ['ap'], ['ix']], [['hello'], ['dahhk'], ['lipps']], [['wxxy'], ['sttu'], ['abbc']], [['ho'], ['dk'], ['ls']], [['helo'], ['dahk'], ['lips']], [['heti    get a gf hellomyfrienhellod'], ['dape    cap w cb dahhkiubneajdahhkz'], ['lixm    kix e kj lippsqcjvmirlippsh']], [['helothequickbrownfoxjumpsoverthelazydo'], ['dahkpdamqeygxnksjbktfqilokranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwszivxlipedchs']], [['yzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdddddddddddddddddddddddddd']], [['hbcd&^%elo'], ['dxyz&^%ahk'], ['lfgh&^%ips']], [['b&cd&^'], ['x&yz&^'], ['f&gh&^']], [['ythequickbrownfoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszivxlipedchs']], [['hello heloworld'], ['dahhk dahksknhz'], ['lipps lipsasvph']], [['heloworld'], ['dahksknhz'], ['lipsasvph']], [['abcdefghijklmnopqrstuvwxyzythequickbrownfoxjumpsoverthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqilokranpdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqtwszivxlipedchs']], [['hi    et a rgf hellomyfrienhellod'], ['de    ap w ncb dahhkiubneajdahhkz'], ['lm    ix e vkj lippsqcjvmirlippsh']], [['heti    get a gf hellomyferienhellod'], ['dape    cap w cb dahhkiubaneajdahhkz'], ['lixm    kix e kj lippsqcjivmirlippsh']], [['hi    et a gf helloetmyfrienhellod'], ['de    ap w cb dahhkapiubneajdahhkz'], ['lm    ix e kj lippsixqcjvmirlippsh']], [['hi'], ['de'], ['lm']], [['thi    et a gf helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydog'], ['pde    ap w cb dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkc'], ['xlm    ix e kj lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchsk']], [['rgf'], ['ncb'], ['vkj']], [['abcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['helothequickbrownfoxumpsoverthelazydo'], ['dahkpdamqeygxnksjbktqilokranpdahwvuzk'], ['lipsxliuymgofvsarjsbyqtwszivxlipedchs']], [['abcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoe'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsi']], [['helothequickbrownfoxumpsovekrthelazydo'], ['dahkpdamqeygxnksjbktqilokragnpdahwvuzk'], ['lipsxliuymgofvsarjsbyqtwsziovxlipedchs']], [['helothequickbrownfoxjumpsgetoverthelazydo'], ['dahkpdamqeygxnksjbktfqilocapkranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkixszivxlipedchs']], [['hi    et  a gf hellomyfrienhellod'], ['de    ap  w cb dahhkiubneajdahhkz'], ['lm    ix  e kj lippsqcjvmirlippsh']], [['yywxy'], ['uustu'], ['ccabc']], [['ythequickbrownfhi    et a gf hellomyfriendoxjumpsoverthelazydo'], ['updamqeygxnksjbde    ap w cb dahhkiubneajzktfqilokranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lippsqcjvmirhsbnyqtwszivxlipedchs']], [['hi    etrgf hhellomyfrienhellod'], ['de    apncb ddahhkiubneajdahhkz'], ['lm    ixvkj llippsqcjvmirlippsh']], [['hhellomyfrienhellod'], ['ddahhkiubneajdahhkz'], ['llippsqcjvmirlippsh']], [['abcdefghijfklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefbghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnjopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['hellomyfriendoxjumpsoverthelazydo'], ['dahhkiubneajzktfqilokranpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszivxlipedchs']], [['thequickbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['heti    get a gf hellomyfrieonhellod'], ['dape    cap w cb dahhkiubneakjdahhkz'], ['lixm    kix e kj lippsqcjvmisrlippsh']], [['hi    et a gf hellomyfrienhellood'], ['de    ap w cb dahhkiubneajdahhkkz'], ['lm    ix e kj lippsqcjvmirlippssh']], [['yywx'], ['uust'], ['ccab']], [['ythequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['updamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['helowythequickbrownfhiorld'], ['dahksupdamqeygxnksjbdeknhz'], ['lipsacxliuymgofvsarjlmsvph']], [['wxxyy'], ['sttuu'], ['abbcc']], [['hi    let a gf hellomyfriend'], ['de    hap w cb dahhkiubneajz'], ['lm    pix e kj lippsqcjvmirh']], [['yzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdddddddddddddddddddddddd']], [['hhellomyfrinhellod'], ['ddahhkiubnejdahhkz'], ['llippsqcjvmrlippsh']], [['hellomyfrienhellodrownfoxjumpsoverthelazydojumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwszivxlipedchs']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogod'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckz'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchsksh']], [['hi    et a gf hellomyfrie'], ['de    ap w cb dahhkiubnea'], ['lm    ix e kj lippsqcjvmi']], [['ythequickbrownfhi'], ['updamqeygxnksjbde'], ['cxliuymgofvsarjlm']], [['heti    get a gf hellomyfrieonhello d'], ['dape    cap w cb dahhkiubneakjdahhk z'], ['lixm    kix e kj lippsqcjvmisrlipps h']], [['gf'], ['cb'], ['kj']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsibcc']], [['heti    get a mgf hellomyfrienhellod'], ['dape    cap w icb dahhkiubneajdahhkz'], ['lixm    kix e qkj lippsqcjvmirlippsh']], [['hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['eetrgft'], ['aapncbp'], ['iixvkjx']], [['eetrgf'], ['aapncb'], ['iixvkj']], [['hellomyferienhellod'], ['dahhkiubaneajdahhkz'], ['lippsqcjivmirlippsh']], [['b&helothequickbrownfoxjumpsgetoverthelazydocd&^'], ['x&dahkpdamqeygxnksjbktfqilocapkranpdahwvuzkyz&^'], ['f&lipsxliuymgofvsarjsbnyqtwkixszivxlipedchsgh&^']], [['hi    et a gf helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellod'], ['de    ap w cb dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['hi    et a gf hellomyfrienheod'], ['de    ap w cb dahhkiubneajdakz'], ['lm    ix e kj lippsqcjvmirlish']], [['yywxxy'], ['uusttu'], ['ccabbc']], [['helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['ohhellomyfrienhellod'], ['kddahhkiubneajdahhkz'], ['sllippsqcjvmirlippsh']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupmpsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytqtwszivxlipedchsibcc']], [['a'], ['w'], ['e']], [['hello heloworlthequickbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['dahhk dahksknhpdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['lipps lipsasvpxliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['ohhellomyfriend'], ['kddahhkiubneajz'], ['sllippsqcjvmirh']], [['hellomyfrienheod'], ['dahhkiubneajdakz'], ['lippsqcjvmirlish']], [['wolrld'], ['skhnhz'], ['aspvph']], [['hi    et a gf helloetmthelquickbrownfoxjumpsoverthelazydoyfrienhellod'], ['de    ap w cb dahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['heloworlthequickbheti'], ['dahksknhpdamqeygxdape'], ['lipsasvpxliuymgoflixm']], [['ergft'], ['ancbp'], ['ivkjx']], [['hel'], ['dah'], ['lip']], [['tlet'], ['phap'], ['xpix']], [['hi    letheti    get a gf hellomyfrieonhello df hellomyfriend'], ['de    hapdape    cap w cb dahhkiubneakjdahhk zb dahhkiubneajz'], ['lm    pixlixm    kix e kj lippsqcjvmisrlipps hj lippsqcjvmirh']], [['abcdefghijfklmnopeetrgftqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefbghijklaapncbpmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnjopqrstiixvkjxuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['hi    et a rgf hellomyfrienhelb&cd&^lod'], ['de    ap w ncb dahhkiubneajdahx&yz&^hkz'], ['lm    ix e vkj lippsqcjvmirlipf&gh&^psh']], [['hellomyfrienhelb&cd&^lod'], ['dahhkiubneajdahx&yz&^hkz'], ['lippsqcjvmirlipf&gh&^psh']], [['helowythehquickbrownfhhiorld'], ['dahksupdadmqeygxnksjbddeknhz'], ['lipsacxliluymgofvsarjllmsvph']], [['ohhelyfrienhellod'], ['kddahubneajdahhkz'], ['sllipcjvmirlippsh']], [['hi    ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de    ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['bythequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo&cd&d^'], ['xupdamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk&yz&z^'], ['fcxliuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs&gh&h^']], [['hellomyfrienhellod'], ['dahhkiubneajdahhkz'], ['lippsqcjvmirlippsh']], [['hi    et a ohhellomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['eeetrgft'], ['aaapncbp'], ['iiixvkjx']], [['hellomyfriendoxjumpsovelrthelazydo'], ['dahhkiubneajzktfqilokrahnpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszipvxlipedchs']], [['hellomyfrienhellood'], ['dahhkiubneajdahhkkz'], ['lippsqcjvmirlippssh']], [['ythequickbrownfoxthequickbheti'], ['updamqeygxnksjbktpdamqeygxdape'], ['cxliuymgofvsarjsbxliuymgoflixm']], [['hellomyfrietrgf'], ['dahhkiubneapncb'], ['lippsqcjvmixvkj']], [['hellomyfrieonhello'], ['dahhkiubneakjdahhk'], ['lippsqcjvmisrlipps']], [['ehel'], ['adah'], ['ilip']], [['helflomyfrietrgf'], ['dahbhkiubneapncb'], ['lipjpsqcjvmixvkj']], [['hhellyomyfrienhellod'], ['ddahhukiubneajdahhkz'], ['llippcsqcjvmirlippsh']], [['helloetmthelquickbrownfoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['ythehelloetmthelquickbrownfoxjumpsoverthelazydoyienhellodnfhi'], ['updadahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkueajdahhkzjbde'], ['cxlilippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscmirlippshrjlm']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsovierthi'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokreanpde'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszmivxlm']], [['heti    get a gfrieonhello d'], ['dape    cap w cbneakjdahhk z'], ['lixm    kix e kjvmisrlipps h']], [['eeet'], ['aaap'], ['iiix']], [['hi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellod'], ['de    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippsh']], [['hi    et ehia rgf hellomyfrienhellod'], ['de    ap adew ncb dahhkiubneajdahhkz'], ['lm    ix ilme vkj lippsqcjvmirlippsh']], [['let'], ['hap'], ['pix']], [['hellomyfriendoxjumpsovelrathelazydo'], ['dahhkiubneajzktfqilokrahnwpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszipvexlipedchs']], [['hi    et a gf helloetmyfrienhellothequickbhetid'], ['de    ap w cb dahhkapiubneajdahhkpdamqeygxdapez'], ['lm    ix e kj lippsixqcjvmirlippsxliuymgoflixmh']], [['heti    get a mgf hehi    et ehia rgf hellomyfrienhellodllomyfrienhellod'], ['dape    cap w icb dade    ap adew ncb dahhkiubneajdahhkzhhkiubneajdahhkz'], ['lixm    kix e qkj lilm    ix ilme vkj lippsqcjvmirlippshppsqcjvmirlippsh']], [['helloomyfrienheod'], ['dahhkkiubneajdakz'], ['lippssqcjvmirlish']], [['hi   helowythehquickbrownfhhiorld ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de   dahksupdadmqeygxnksjbddeknhz ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm   lipsacxliluymgofvsarjllmsvph ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['hello heloworlthequickbheti    get a gf hellomyfrienhellodrownfoxjumpsothequickbhetiverthelazydo'], ['dahhk dahksknhpdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokpdamqeygxdaperanpdahwvuzk'], ['lipps lipsasvpxliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwsxliuymgoflixmzivxlipedchs']], [['abcdefghijklmnopqrstuvwxyzythequickbrownfoxjumpsoveletthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqilokrahappdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqtwszipixxlipedchs']], [['d'], ['z'], ['h']], [['hi    et a ohhelolomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w kddahkhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e sllipspsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['hellomyfrienhellodllomyfrienhellod'], ['dahhkiubneajdahhkzhhkiubneajdahhkz'], ['lippsqcjvmirlippshppsqcjvmirlippsh']], [['hhelothequickbrownfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksjbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsarjsbyqtwsziovxlipedchs']], [['heti    get a mgf hehi   e et ehia rgf hellomyfrienhellodllomyfrhoienhellod'], ['dape    cap w icb dade   a ap adew ncb dahhkiubneajdahhkzhhkiubndkeajdahhkz'], ['lixm    kix e qkj lilm   i ix ilme vkj lippsqcjvmirlippshppsqcjvlsmirlippsh']], [['helll'], ['dahhh'], ['lippp']], [['helothequickbrownfoxjumpsgetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqilocapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkixszilvxlipedchs']], [['hellthi'], ['dahhpde'], ['lippxlm']], [['hellomyfrrienhelb&cd&^lod'], ['dahhkiubnneajdahx&yz&^hkz'], ['lippsqcjvvmirlipf&gh&^psh']], [['yzzzzzzzzzzzzzzzzzzzzzzzzhel'], ['uvvvvvvvvvvvvvvvvvvvvvvvvdah'], ['cddddddddddddddddddddddddlip']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmirlippsh']], [['hellomyfrieendoxjumpsovelrthelazydo'], ['dahhkiubneaajzktfqilokrahnpdahwvuzk'], ['lippsqcjvmiirhsbnyqtwszipvxlipedchs']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogodoworld'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhz'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchskshsasvph']], [['ythequickbrownfhi    et a gf hellomyfriendoxjumpsojverthelazydo'], ['updamqeygxnksjbde    ap w cb dahhkiubneajzktfqilokfranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lippsqcjvmirhsbnyqtwsnzivxlipedchs']], [['hellomyfrienhellodllomyfrhoienhellod'], ['dahhkiubneajdahhkzhhkiubndkeajdahhkz'], ['lippsqcjvmirlippshppsqcjvlsmirlippsh']], [['woolrld'], ['skkhnhz'], ['asspvph']], [['bcd'], ['xyz'], ['fgh']], [['hellomyfergetienhellod'], ['dahhkiubancapeajdahhkz'], ['lippsqcjivkixmirlippsh']], [['bcdhellomyfrienhelb&cd&^lod'], ['xyzdahhkiubneajdahx&yz&^hkz'], ['fghlippsqcjvmirlipf&gh&^psh']], [['helothequickbrowonfoxumpsovekrthelazydo'], ['dahkpdamqeygxnkskjbktqilokragnpdahwvuzk'], ['lipsxliuymgofvsasrjsbyqtwsziovxlipedchs']], [['hhellomyfriod'], ['ddahhkiubnekz'], ['llippsqcjvmsh']], [['mgf'], ['icb'], ['qkj']], [['etrf'], ['apnb'], ['ixvj']], [['helhi'], ['dahde'], ['liplm']], [['bcd&%'], ['xyz&%'], ['fgh&%']], [['hhi    et a ohhellomyfrienhellodrgf hellomyfrienhellodellomyfrienhellood'], ['dde    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkzahhkiubneajdahhkkz'], ['llm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippshippsqcjvmirlippssh']], [['e'], ['a'], ['i']], [['hi    et a rgf hellomyfrienhelb&cd&^llod'], ['de    ap w ncb dahhkiubneajdahx&yz&^hhkz'], ['lm    ix e vkj lippsqcjvmirlipf&gh&^ppsh']], [['bcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lod'], ['xyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkz'], ['fghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^psh']], [['wwxy'], ['sstu'], ['aabc']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoi    t a gf hellomyfrieonhello d'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzke    p w cb dahhkiubneakjdahhk z'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsm    x e kj lippsqcjvmisrlipps h']], [['hlelll'], ['dhahhh'], ['lpippp']], [['eheel'], ['adaah'], ['iliip']], [['heti    get a gfrieonhello helothequickbrownfoxumpsovekrthelazydod'], ['dape    cap w cbneakjdahhk dahkpdamqeygxnksjbktqilokragnpdahwvuzkz'], ['lixm    kix e kjvmisrlipps lipsxliuymgofvsarjsbyqtwsziovxlipedchsh']], [['heolo'], ['dakhk'], ['lisps']], [['ehelhellomyfrienhelb&cd&^lod'], ['adahdahhkiubneajdahx&yz&^hkz'], ['iliplippsqcjvmirlipf&gh&^psh']], [['helloetmyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthigfthequickbhetid'], ['dahhkapiubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdecbpdamqeygxdapez'], ['lippsixqcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmkjxliuymgoflixmh']], [['ehelloetmyfrthirgft'], ['adahhkapiubnpdencbp'], ['ilippsixqcjvxlmvkjx']], [['helbcd&^%lomyfriendoxhi    etrgf hhellomyfrienhellodjumpsoverthelawwxyzydo&cd&d^'], ['dahxyz&^%hkiubneajzktde    apncb ddahhkiubneajdahhkzfqilokranpdahwsstuvuzk&yz&z^'], ['lipfgh&^%psqcjvmirhsblm    ixvkj llippsqcjvmirlippshnyqtwszivxlipeaabcdchs&gh&h^']], [['ohhelolomyfrienhellodrgf'], ['kddahkhkiubneajdahhkzncb'], ['sllipspsqcjvmirlippshvkj']], [['thequickbrownfoxjumpsoverthi    et a gf helloetmyfrienhellodhelazydo'], ['pdamqeygxnksjbktfqilokranpde    ap w cb dahhkapiubneajdahhkzdahwvuzk'], ['xliuymgofvsarjsbnyqtwszivxlm    ix e kj lippsixqcjvmirlippshlipedchs']], [['helloetmyfrienhellothequickbhetid'], ['dahhkapiubneajdahhkpdamqeygxdapez'], ['lippsixqcjvmirlippsxliuymgoflixmh']], [['trhequickbrownfoxjumpsoverthelazydog'], ['pndamqeygxnksjbktfqilokranpdahwvuzkc'], ['xvliuymgofvsarjsbnyqtwszivxlipedchsk']], [['hellomyfriendoxjumpsojverthelazydo'], ['dahhkiubneajzktfqilokfranpdahwvuzk'], ['lippsqcjvmirhsbnyqtwsnzivxlipedchs']], [['eeetrgfthellomyfrienhellodrownfoxjumpsoverthelazydo'], ['aaapncbpdahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['iiixvkjxlippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['gfrieonhello'], ['cbneakjdahhk'], ['kjvmisrlipps']], [['heloo'], ['dahkk'], ['lipss']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrienhellodget'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneajdahhkzcap'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmirlippshkix']], [['helloomyfrienhhi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellodeod'], ['dahhkkiubneajdde    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkzakz'], ['lippssqcjvmirllm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippshish']], [['ehellgft'], ['adahhcbp'], ['ilippkjx']], [['hehi    et a ohhelolomyfrienhellodrgf hellomyfrienhellodlflomyfrietrgf'], ['dade    ap w kddahkhkiubneajdahhkzncb dahhkiubneajdahhkzhbhkiubneapncb'], ['lilm    ix e sllipspsqcjvmirlippshvkj lippsqcjvmirlippshpjpsqcjvmixvkj']], [['hello wlorld'], ['dahhk shknhz'], ['lipps apsvph']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodhelazydoexyy'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzdahwvuzkatuu'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshlipedchsibcc']], [['abcdefghijklmnopqrsquickbrownfoxjumpsovferthelazydo'], ['wxyzabcdefghijklmnomqeygxnksjbktfqilokrbanpdahwvuzk'], ['efghijklmnopqrstuvwuymgofvsarjsbnyqtwszjivxlipedchs']], [['helloetmyfrienhellod'], ['dahhkapiubneajdahhkz'], ['lippsixqcjvmirlippsh']], [['hi    helotheqolod'], ['de    dahkpdamkhkz'], ['lm    lipsxliuspsh']], [['wxabcdefghijklmoxjumpsoverthelazydoexyy'], ['stwxyzabcdefghiktfqilokranpdahwvuzkatuu'], ['abefghijklmnopqsbnyqtwszivxlipedchsibcc']], [['thequickbrownfoxjumpsovertheazydo'], ['pdamqeygxnksjbktfqilokranpdawvuzk'], ['xliuymgofvsarjsbnyqtwszivxliedchs']], [['hi    et ehia rgf hfrienhehellomyfrienhellodrownfoxjumpsoverthelazydojumpsoverthelazydollod'], ['de    ap adew ncb dbneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilokranpdahwvuzkhhkz'], ['lm    ix ilme vkj ljvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwszivxlipedchsppsh']], [['abcdefghijfklmnopeetrgftqazydo'], ['wxyzabcdefbghijklaapncbpmwvuzk'], ['efghijklmnjopqrstiixvkjxuedchs']], [['helothequickbrownfonxjumpsgetoverthelazydo'], ['dahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzk'], ['lipsxliuymgofvsarjsrbnyqtwkixszivxlipedchs']], [['hellomyfrie'], ['dahhkiubnea'], ['lippsqcjvmi']], [['eehia'], ['aadew'], ['iilme']], [['bcohhellomyfrienhellodd'], ['xykddahhkiubneajdahhkzz'], ['fgsllippsqcjvmirlippshh']], [['helbcdhhellyomyfrienhellod&^%lomyfriendoxjumpsoverthelazydo&cd&d^'], ['dahxyzddahhukiubneajdahhkz&^%hkiubneajzktfqilokranpdahwvuzk&yz&z^'], ['lipfghllippcsqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxlipedchs&gh&h^']], [['hellomyfergetienhelllod'], ['dahhkiubancapeajdahhhkz'], ['lippsqcjivkixmirlipppsh']], [['helbcd&^%lomyfriendoxhihhello'], ['dahxyz&^%hkiubneajzktdeddahhk'], ['lipfgh&^%psqcjvmirhsblmllipps']], [['aa'], ['ww'], ['ee']], [['hi    ehi    et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de    ade    ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupompsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlkilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytsqtwszivxlipedchsibcc']], [['hello heti    get a gf hellomyfrieonhello dd'], ['dahhk dape    cap w cb dahhkiubneakjdahhk zz'], ['lipps lixm    kix e kj lippsqcjvmisrlipps hh']], [['helothequickbrownfoxjuhielazydo'], ['dahkpdamqeygxnksjbktfqdeahwvuzk'], ['lipsxliuymgofvsarjsbnylmipedchs']], [['hello heti    get a gf hellomyfheti    get a mgf hellomyfrienhellodo dd'], ['dahhk dape    cap w cb dahhkiubdape    cap w icb dahhkiubneajdahhkzk zz'], ['lipps lixm    kix e kj lippsqcjlixm    kix e qkj lippsqcjvmirlippshs hh']], [['hello helowhellomyfrrienhelb&cd&^lodorld'], ['dahhk dahksdahhkiubnneajdahx&yz&^hkzknhz'], ['lipps lipsalippsqcjvvmirlipf&gh&^pshsvph']], [['yzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cddddddddddddddiliipddddddddddd']], [['bcohhellomyfrieythequickbrownfoxthequickbhetinhellodd'], ['xykddahhkiubneaupdamqeygxnksjbktpdamqeygxdapejdahhkzz'], ['fgsllippsqcjvmicxliuymgofvsarjsbxliuymgoflixmrlippshh']], [['hhellomyffrienhellod'], ['ddahhkiubbneajdahhkz'], ['llippsqcjjvmirlippsh']], [['ef'], ['ab'], ['ij']], [['helloetmyfrienhellodhequicokbrownfoxjumpsoverthelzazydogod'], ['dahhkapiubneajdahhkzdamqeykgxnksjbktfqilokranpdahvwvuzkckz'], ['lippsixqcjvmirlippshliuymgsofvsarjsbnyqtwszivxlipdedchsksh']], [['erghi'], ['ancde'], ['ivklm']], [['hhellomyfriengfrieonhellohellodnhellodlod'], ['ddahhkiubneajcbneakjdahhkdahhkzjdahhkzhkz'], ['llippsqcjvmirkjvmisrlippslippshrlippshpsh']], [['helothequickbrownfoxjumpsgmetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqilociapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkqixszilvxlipedchs']], [['hellb&helothequickbrownfoxjumpsgetoverthelazydocd&^frietrogf'], ['dahhx&dahkpdamqeygxnksjbktfqilocapkranpdahwvuzkyz&^bneapnkcb'], ['lippf&lipsxliuymgofvsarjsbnyqtwkixszivxlipedchsgh&^jvmixvskj']], [['hi    et a gfi hellomyfrie'], ['de    ap w cbe dahhkiubnea'], ['lm    ix e kjm lippsqcjvmi']], [['hello helowhellomyhellomyfrienhelb&cd&^lodfrrienhelb&cd&^lodorld'], ['dahhk dahksdahhkiudahhkiubneajdahx&yz&^hkzbnneajdahx&yz&^hkzknhz'], ['lipps lipsalippsqclippsqcjvmirlipf&gh&^pshjvvmirlipf&gh&^pshsvph']], [['hi    et a rgf hellomyfrietnhelb&cd&^lod'], ['de    ap w ncb dahhkiubneapjdahx&yz&^hkz'], ['lm    ix e vkj lippsqcjvmixrlipf&gh&^psh']], [['hi    et a gf lhgfrieonhelloellomyfrie'], ['de    ap w cb hdcbneakjdahhkahhkiubnea'], ['lm    ix e kj plkjvmisrlippsippsqcjvmi']], [['hellomyfrieonhellod'], ['dahhkiubneakjdahhkz'], ['lippsqcjvmisrlippsh']], [['helbcd&^hellomyfrienhellodellomyfrienhellood%lomyfriendoxhihhello'], ['dahxyz&^dahhkiubneajdahhkzahhkiubneajdahhkkz%hkiubneajzktdeddahhk'], ['lipfgh&^lippsqcjvmirlippshippsqcjvmirlippssh%psqcjvmirhsblmllipps']], [['get'], ['cap'], ['kix']], [['helhlellllthi'], ['dahdhahhhhpde'], ['liplpippppxlm']], [['helloetmyfrienhellohellomyfrienhellodrownfoxjumpsoverthelazydothequickbhetid'], ['dahhkapiubneajdahhkdahhkiubneajdahhkznksjbktfqilokranpdahwvuzkpdamqeygxdapez'], ['lippsixqcjvmirlippslippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsxliuymgoflixmh']], [['hi    et ehia rgf he llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['de    ap adew ncb da hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['lm    ix ilme vkj li ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['hi    ehi   l et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de    ade   h ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm    ilm   p ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['hbcd&^%eo'], ['dxyz&^%ak'], ['lfgh&^%is']], [['ohhelolomyfetrienhellrgf'], ['kddahkhkiubapneajdahhncb'], ['sllipspsqcjixvmirlippvkj']], [['thequicukbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqeyqgxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuymgyoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['helloetmyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthigbhetiid'], ['dahhkapiubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdecxdapeez'], ['lippsixqcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmkflixmmh']], [['hellomyfrrienhelb&cdlod'], ['dahhkiubnneajdahx&yzhkz'], ['lippsqcjvvmirlipf&ghpsh']], [['helowythequicckbrownfhihi    et a gf hellomyfriendorld'], ['dahksupdamqeyygxnksjbdede    ap w cb dahhkiubneajzknhz'], ['lipsacxliuymggofvsarjlmlm    ix e kj lippsqcjvmirhsvph']], [['abcdefghijklmnopqrstuvwxwxabcdefghijklmnopqrstuvwxyyzythequickbrhownfoxjumpsoverthelazydoe'], ['wxyzabcdefghijklmnopqrststwxyzabcdefghijklmnopqrstuuvupdamqeygxndksjbktfqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxyzababefghijklmnopqrstuvwxyzabccdcxliuymgofvlsarjsbnyqtwszivxlipedchsi']], [['efrgft'], ['abncbp'], ['ijvkjx']], [['ythequickbrownfoxjumpsoverthelazydoythequickbrownoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokranpdahwvuzkupdamqeygxnksjktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszivxlipedchscxliuymgofvsarsbnyqtwszivxlipedchs']], [['ehehif'], ['adadeb'], ['ililmj']], [['heheti    get a gf hellomyfrieonhellyodllomyfergetienhelllob&cd&^d'], ['dadape    cap w cb dahhkiubneakjdahhukzhhkiubancapeajdahhhkx&yz&^z'], ['lilixm    kix e kj lippsqcjvmisrlippcshppsqcjivkixmirlipppsf&gh&^h']], [['hi    et aheallomyfriendoxjumpsoverthelazydo gf helloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['de    ap wdawhhkiubneajzktfqilokranpdahwvuzk cb dahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix elieppsqcjvmirhsbnyqtwszivxlipedchs kj lippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['hi e   let a gf hellomyfriend'], ['de a   hap w cb dahhkiubneajz'], ['lm i   pix e kj lippsqcjvmirh']], [['hllelll'], ['dhhahhh'], ['lppippp']], [['hhellyomyfrielod'], ['ddahhukiubneahkz'], ['llippcsqcjvmipsh']], [['hello wbcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lodlorld'], ['dahhk sxyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkzhknhz'], ['lipps afghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^pshpsvph']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodlomyferienhellodt'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzhkiubaneajdahhkzp'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshpsqcjivmirlippshx']], [['hi    et ehia rgf hfrienhehellomyfrienhellodrownfoxjumpsoverthelazydojumpsthelazydollod'], ['de    ap adew ncb dbneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilopdahwvuzkhhkz'], ['lm    ix ilme vkj ljvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwxlipedchsppsh']], [['ft'], ['bp'], ['jx']], [['yzzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cdddddddddddddddiliipddddddddddd']], [['ythequichi'], ['updamqeyde'], ['cxliuymglm']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazeydog'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvauzkc'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedichsk']], [['aickbrownfoxjumpsoveletthelazydo'], ['weygxnksjbktfqilokrahappdahwvuzk'], ['emgofvsarjsbnyqtwszipixxlipedchs']], [['b&helothequickownfoxjumpsgetoverthelazydocd&^'], ['x&dahkpdamqeygksjbktfqilocapkranpdahwvuzkyz&^'], ['f&lipsxliuymgosarjsbnyqtwkixszivxlipedchsgh&^']], [['helothequickbrownfoxjumphellomyfergetienhelllodsoverthelazydo'], ['dahkpdamqeygxnksjbktfqildahhkiubancapeajdahhhkzokranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtlippsqcjivkixmirlipppshwszivxlipedchs']], [['df'], ['zb'], ['hj']], [['b&helothequickownfoxjumpsgetovcerthelazydocd&^'], ['x&dahkpdamqeygksjbktfqilocapkryanpdahwvuzkyz&^'], ['f&lipsxliuymgosarjsbnyqtwkixszgivxlipedchsgh&^']], [['hehi'], ['dade'], ['lilm']], [['hhelloetmyfrienhellodhelazydol'], ['ddahhkapiubneajdahhkzdahwvuzkh'], ['llippsixqcjvmirlippshlipedchsp']], [['hehi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellodlothequickbrownfoxumpsoverthelazydo'], ['dade    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkzhkpdamqeygxnksjbktqilokranpdahwvuzk'], ['lilm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippshpsxliuymgofvsarjsbyqtwszivxlipedchs']], [['ythequickbrownfoxjum'], ['updamqeygxnksjbktfqi'], ['cxliuymgofvsarjsbnyq']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodkbrownfhi'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzgxnksjbde'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshofvsarjlm']], [['helothequetovehrthelazydo'], ['dahkpdamqapkradnpdahwvuzk'], ['lipsxliuyixszilvxlipedchs']], [['hi   helowythehquickbrownfhhiorlde ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de   dahksupdadmqeygxnksjbddeknhza ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm   lipsacxliluymgofvsarjllmsvphi ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['hellomyfrreienhelb&cdlod'], ['dahhkiubnnaeajdahx&yzhkz'], ['lippsqcjvvimirlipf&ghpsh']], [['llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['hhelothequickbrowhelowythequicckbrownfhihinfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksdahksupdamqeyygxnksjbdedejbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsalipsacxliuymggofvsarjlmlmrjsbyqtwsziovxlipedchs']], [['thequickbheti'], ['pdamqeygxdape'], ['xliuymgoflixm']], [['heti    get a gf hellomyfrieonhelllo d'], ['dape    cap w cb dahhkiubneakjdahhhk z'], ['lixm    kix e kj lippsqcjvmisrlippps h']], [['fwwxy'], ['bsstu'], ['jaabc']], [['hhi    et a ohhellomyfrienhellodrgf hellomyfrienhellodellomyfrienhelloold'], ['dde    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkzahhkiubneajdahhkkhz'], ['llm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippshippsqcjvmirlippssph']], [['helhlellelltihi'], ['dahdhahhahhpede'], ['liplpippippxmlm']], [['bcohhellomyfyrienhellodd'], ['xykddahhkiubuneajdahhkzz'], ['fgsllippsqcjcvmirlippshh']], [['hhelllomyfriod'], ['ddahhhkiubnekz'], ['llipppsqcjvmsh']], [['hellomyfrienhellodrownfooxjumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbkktfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjssbnyqtwszivxlipedchs']], [['helloetmyfrienhellzodhequickbrownfoxjumpsoverthelazydogodoworld'], ['dahhkapiubneajdahhvkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhz'], ['lippsixqcjvmirlippdshliuymgofvsarjsbnyqtwszivxlipedchskshsasvph']], [['yzzzzzzzzzzzzzzeheelzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvadaahvvvvvvvvvvvv'], ['cddddddddddddddiliipdddddddddddd']], [['etrgf'], ['apncb'], ['ixvkj']], [['hi l   ehi   l et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de h   ade   h ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm p   ilm   p ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['yzhzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvdvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cdlddddddddddddddiliipddddddddddd']], [['ythequickbrownfoxjumpsovownoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokrksjktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszsarsbnyqtwszivxlipedchs']], [['yywahellomyfriendoxjumupsoverthelazydoxy'], ['uuswdahhkiubneajzktfqiqlokranpdahwvuzktu'], ['ccaelippsqcjvmirhsbnyqytwszivxlipedchsbc']], [['hhellyoomyfrielod'], ['ddahhukkiubneahkz'], ['llippcssqcjvmipsh']], [['bcohhellhomyfrienhellodd'], ['xykddahhdkiubneajdahhkzz'], ['fgsllipplsqcjvmirlippshh']], [['ehelothequickbrownfonxjumpsgetoverthelazydot'], ['adahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzkp'], ['ilipsxliuymgofvsarjsrbnyqtwkixszivxlipedchsx']], [['hlel'], ['dhah'], ['lpip']], [['helloetmyfrthi'], ['dahhkapiubnpde'], ['lippsixqcjvxlm']], [['hellomyfergetienfhelllod'], ['dahhkiubancapeajbdahhhkz'], ['lippsqcjivkixmirjlipppsh']], [['helowythequicckbrownfhihi    ethhelothequickbrownfoxumpsovekrthelazydo a gf hellomyfriendorld'], ['dahksupdamqeyygxnksjbdede    apddahkpdamqeygxnksjbktqilokragnpdahwvuzk w cb dahhkiubneajzknhz'], ['lipsacxliuymggofvsarjlmlm    ixllipsxliuymgofvsarjsbyqtwsziovxlipedchs e kj lippsqcjvmirhsvph']], [['ohhhelllellomyfrienhellod'], ['kdddahhhahhkiubneajdahhkz'], ['slllipppippsqcjvmirlippsh']], [['eff'], ['abb'], ['ijj']], [['h eti    get a mgf hellomyfrienhellod'], ['d ape    cap w icb dahhkiubneajdahhkz'], ['l ixm    kix e qkj lippsqcjvmirlippsh']], [['hellomyfrietnhelb&cd&^lod'], ['dahhkiubneapjdahx&yz&^hkz'], ['lippsqcjvmixrlipf&gh&^psh']], [['b&cdheythequickbrownfoxjumpshi'], ['x&yzdaupdamqeygxnksjbktfqilode'], ['f&ghlicxliuymgofvsarjsbnyqtwlm']], [['helhlomyfriend'], ['dahdhkiubneajz'], ['liplpsqcjvmirh']], [['hhelothequickbrowhelhowythequicckbrownfhihinfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksdahdksupdamqeyygxnksjbdedejbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsaliplsacxliuymggofvsarjlmlmrjsbyqtwsziovxlipedchs']], [['hi    et a rg f hellomyfrietnhelb&cd&^lod'], ['de    ap w nc b dahhkiubneapjdahx&yz&^hkz'], ['lm    ix e vk j lippsqcjvmixrlipf&gh&^psh']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsoverthelazydoexyyd'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpdahwvuzkatuuz'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxlipedchsibcch']], [['hi    et a helolomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w dahkhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e lipspsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['helolomyfrienhellorgf'], ['dahkhkiubneajdahhkncb'], ['lipspsqcjvmirlippsvkj']], [['heeloo'], ['daahkk'], ['liipss']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsovertyhelazydoexyyd'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpudahwvuzkatuuz'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxclipedchsibcch']], [['fhellfomyfrie'], ['bdahhbkiubnea'], ['jlippjsqcjvmi']], [['gget'], ['ccap'], ['kkix']], [['heelazydo'], ['daahwvuzk'], ['liipedchs']], [['eeetrwxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupompsoverthelazydoexyygft'], ['aaapnstwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlkilokranpdahwvuzkatuucbp'], ['iiixvabefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytsqtwszivxlipedchsibcckjx']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodsoverthelazydo'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzokranpdahwvuzk'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshwszivxlipedchs']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrieunhellodget'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneaqjdahhkzcap'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmiyrlippshkix']], [['ahellomyfriendoxjumupsoverthelazydo'], ['wdahhkiubneajzktfqiqlokranpdahwvuzk'], ['elippsqcjvmirhsbnyqytwszivxlipedchs']], [['helowythehquickbrownfhhiorlde'], ['dahksupdadmqeygxnksjbddeknhza'], ['lipsacxliluymgofvsarjllmsvphi']], [['ithi'], ['epde'], ['mxlm']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsovertyhelazydoexyyhellomyfrienhelb&cd&^loddeeetrgft'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpudahwvuzkatuudahhkiubneajdahx&yz&^hkzzaaapncbp'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxclipedchsibcclippsqcjvmirlipf&gh&^pshhiiixvkjx']], [['hellomyfrietrogf'], ['dahhkiubneapnkcb'], ['lippsqcjvmixvskj']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoi'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzke'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsm']], [['ythequickbrowunfoxthequickbheti'], ['updamqeygxnksqjbktpdamqeygxdape'], ['cxliuymgofvsayrjsbxliuymgoflixm']], [['bcohhellomyfyrienhellofdwxabcdefghijklmoxjumpsovertyhelazydoexyyd'], ['xykddahhkiubuneajdahhkbzstwxyzabcdefghiktfqilokranpudahwvuzkatuuz'], ['fgsllippsqcjcvmirlippsjhabefghijklmnopqsbnyqtwszivxclipedchsibcch']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelcazydoi    t a gf hellomyfrieonhello d'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahywvuzke    p w cb dahhkiubneakjdahhk z'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipgedchsm    x e kj lippsqcjvmisrlipps h']], [['hi    et ehia rgf he llomyfrihi    et a helolomyfrienhellodrgf hellomyfrienhellodverthelazyollod'], ['de    ap adew ncb da hhkiubnede    ap w dahkhkiubneajdahhkzncb dahhkiubneajdahhkzranpdahwvukhhkz'], ['lm    ix ilme vkj li ppsqcjvmlm    ix e lipspsqcjvmirlippshvkj lippsqcjvmirlippshzivxlipedcsppsh']], [['helhlellelltiihi'], ['dahdhahhahhpeede'], ['liplpippippxmmlm']], [['ohhhelllellomyfrienheellod'], ['kdddahhhahhkiubneajdaahhkz'], ['slllipppippsqcjvmirliippsh']], [['hhellyomyfrienyhello'], ['ddahhukiubneajudahhk'], ['llippcsqcjvmirclipps']], [['ohhhelllellomyfriabcdefghijfklmnopeetrgftqrstuvwxyzythequickbrhownfoxjumpsoverthelahzydoenhellod'], ['kdddahhhahhkiubnewxyzabcdefbghijklaapncbpmnopqrstuvupdamqeygxndksjbktfqilokranpdahwdvuzkajdahhkz'], ['slllipppippsqcjvmefghijklmnjopqrstiixvkjxuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipeldchsirlippsh']], [['hellomyfrienhellodlflomyfrietrgf'], ['dahhkiubneajdahhkzhbhkiubneapncb'], ['lippsqcjvmirlippshpjpsqcjvmixvkj']], [['helxloetmthequickbrowoxjumpsoverthelazydoyfrieunhellodget'], ['dahthkapipdamqeygxnksktfqilokranpdahwvuzkubneaqjdahhkzcap'], ['lipbpsixqxliuymgofvsasbnyqtwszivxlipedchscjvmiyrlippshkix']], [['helhlellelletiihi'], ['dahdhahhahhapeede'], ['liplpippippixmmlm']], [['abcdefghijklmnopqrsteuvwxwxabcdefghijklmnopqrstuvwxyyzythequickbrhownfoxjsumpsoverthelazydoe'], ['wxyzabcdefghijklmnopaqrststwxyzabcdefghijklmnopqrstuuvupdamqeygxndksjbktfoqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxiyzababefghijklmnopqrstuvwxyzabccdcxliuymgofvlsarjsbnwyqtwszivxlipedchsi']], [['hhellomyfriengrieonhellohellodnhellodlod'], ['ddahhkiubneajcneakjdahhkdahhkzjdahhkzhkz'], ['llippsqcjvmirkvmisrlippslippshrlippshpsh']], [['hhellyomyfriehello'], ['ddahhukiubneadahhk'], ['llippcsqcjvmilipps']], [['bcd&hellomoyfrienhellodrownfoxjumpsoverthhhellomyfriengfrieonhellohellodelazydo%'], ['xyz&dahhkikubneajdahhkznksjbktfqilokranpdddahhkiubneajcbneakjdahhkdahhkzahwvuzk%'], ['fgh&lippsqscjvmirlippshvsarjsbnyqtwszivxlllippsqcjvmirkjvmisrlippslippshipedchs%']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydooexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchssibcc']], [['hi    elt a rgf hellomyfrienhellod'], ['de    ahp w ncb dahhkiubneajdahhkz'], ['lm    ipx e vkj lippsqcjvmirlippsh']], [['helflomyfriietrgf'], ['dahbhkiubneeapncb'], ['lipjpsqcjvmmixvkj']], [['ehiabcdefghijklmnopqrwnfxjumpsoveletthelazydoa'], ['adewxyzabcdefghijklmnsjbtfqilokrahappdahwvuzkw'], ['ilmefghijklmnopqrstuvarjbnyqtwszipixxlipedchse']], [['healloetmyfrienhellodhequickbrownfoxjumpsoverthelazeydog'], ['dawhhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvauzkc'], ['lieppsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedichsk']], [['lhgfrieonhelloellomyfrie'], ['hdcbneakjdahhkahhkiubnea'], ['plkjvmisrlippsippsqcjvmi']], [['hhellylomyfrienhellod'], ['ddahhuhkiubneajdahhkz'], ['llippcpsqcjvmirlippsh']], [['hfsoverthigfthequickbhetid'], ['dbokranpdecbpdamqeygxdapez'], ['ljwszivxlmkjxliuymgoflixmh']], [['yywbcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lodlorldwxy'], ['uusxyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkzhknhzstu'], ['ccafghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^pshpsvphabc']], [['bcdhellomyfrieonhellod&^%'], ['xyzdahhkiubneakjdahhkz&^%'], ['fghlippsqcjvmisrlippsh&^%']], [['aheallomyfriendoxjumpsoverthelazydo'], ['wdawhhkiubneajzktfqilokranpdahwvuzk'], ['elieppsqcjvmirhsbnyqtwszivxlipedchs']], [['aheallomyfriendoxjumpsoverthwxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsovierthielazydo'], ['wdawhhkiubneajzktfqilokranpdstwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokreanpdeahwvuzk'], ['elieppsqcjvmirhsbnyqtwszivxlabefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszmivxlmipedchs']], [['hhellohelloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogodoworldmyfrienhellodeod'], ['ddahhkdahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhziubneajdahhkzakz'], ['llippslippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchskshsasvphqcjvmirlippshish']], [['eflie'], ['abhea'], ['ijpmi']], [['ohhelyfrienhellood'], ['kddahubneajdahhkkz'], ['sllipcjvmirlippssh']], [['ehellioetmhi'], ['adahhekapide'], ['ilippmsixqlm']], [['ahellomyfriendoxjumupsoverthelaefzydo'], ['wdahhkiubneajzktfqiqlokranpdahwabvuzk'], ['elippsqcjvmirhsbnyqytwszivxlipeijdchs']], [['hellomyfrieonhenllod'], ['dahhkiubneakjdajhhkz'], ['lippsqcjvmisrlirppsh']], [['hlelloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['dhahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lpippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['hi    helothelbcd&^%lomyfriendoxhihhelloheqolod'], ['de    dahkpdahxyz&^%hkiubneajzktdeddahhkdamkhkz'], ['lm    lipsxlipfgh&^%psqcjvmirhsblmllippsliuspsh']], [['helloomyfrienhhi    ehi    et a gf hellomyfrietrogf hhellohehetimyfrienhellodeod'], ['dahhkkiubneajdde    ade    ap w cb dahhkiubneapnkcb ddahhkdadapeiubneajdahhkzakz'], ['lippssqcjvmirllm    ilm    ix e kj lippsqcjvmixvskj llippslilixmqcjvmirlippshish']], [['hl'], ['dh'], ['lp']], [['helhii'], ['dahdee'], ['liplmm']], [['hellomyfriendoxjumpsojvertaheallomyfriendoxjumpsoverthelazydoazydo'], ['dahhkiubneajzktfqilokfranpwdawhhkiubneajzktfqilokranpdahwvuzkwvuzk'], ['lippsqcjvmirhsbnyqtwsnzivxelieppsqcjvmirhsbnyqtwszivxlipedchsedchs']], [['hellomyfrienhellodverthelazyollod'], ['dahhkiubneajdahhkzranpdahwvukhhkz'], ['lippsqcjvmirlippshzivxlipedcsppsh']], [['eheihif'], ['adaedeb'], ['ilimlmj']], [['helothequickbrownfoxjumtpsgmetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqiplociapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqxtwkqixszilvxlipedchs']], [['ythequickbrownfoxthuickbheti'], ['updamqeygxnksjbktpdqeygxdape'], ['cxliuymgofvsarjsbxlymgoflixm']], [['hi  df  et ehia rgf he llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['de  zb  ap adew ncb da hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['lm  hj  ix ilme vkj li ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['fhellfomyfrieheeloo'], ['bdahhbkiubneadaahkk'], ['jlippjsqcjvmiliipss']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodhelazydoexyyzzzzzzzzzzzzzzzzzzet'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzdahwvuzkatuuvvvvvvvvvvvvvvvvvvap'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshlipedchsibccddddddddddddddddddix']], [['ohhellomyfrienheellod'], ['kddahhkiubneajdaahhkz'], ['sllippsqcjvmirliippsh']], [['iheheti'], ['edadape'], ['mlilixm']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodlomyferienhellodtgf'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzhkiubaneajdahhkzpcb'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshpsqcjivmirlippshxkj']], [['hello heti    get a gf hellomyllo dd'], ['dahhk dape    cap w cb dahhkiuhhk zz'], ['lipps lixm    kix e kj lippsqcpps hh']], [['f'], ['b'], ['j']], [['eehhi    et a gf helloetmthelquickbrownfoxjumpsohverthelazydoyfrienhellodia'], ['aadde    ap w cb dahhkapipdahmqeygxnksjbktfqilokdranpdahwvuzkubneajdahhkzew'], ['iillm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwslzivxlipedchscjvmirlippshme']], [['heti    get a mgf hellomyfrienhellodhl'], ['dape    cap w icb dahhkiubneajdahhkzdh'], ['lixm    kix e qkj lippsqcjvmirlippshlp']], [['thequhelothequickbrownfoxjumpsgetovehrthelazydoyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqdahkpdamqeygxnksjbktfqilocapkradnpdahwvuzkubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuylipsxliuymgofvsarjsbnyqtwkixszilvxlipedchscjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['helolomyfrienhhelloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodellorgf'], ['dahkhkiubneajddahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzahhkncb'], ['lipspsqcjvmirllippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshippsvkj']], [['hellomyferienhelhabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoiod'], ['dahhkiubaneajdahdwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkekz'], ['lippsqcjivmirliplefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsmsh']], [['heeoloo'], ['daakhkk'], ['liispss']], [['hellomyfrienhellodxjumpsoverthelazydo'], ['dahhkiubneajdahhkztfqilokranpdahwvuzk'], ['lippsqcjvmirlippshbnyqtwszivxlipedchs']], [['aickbrownfoxjhumpsoveletthelazydo'], ['weygxnksjbktfdqilokrahappdahwvuzk'], ['emgofvsarjsbnlyqtwszipixxlipedchs']], [['hhellomyfriengfrieonhellohellodoverthelazydoythequickbrownoxjumpsoverthelazydollomyfrietrgf'], ['ddahhkiubneajcbneakjdahhkdahhkzkranpdahwvuzkupdamqeygxnksjktfqilokranpdahwvuzkhhkiubneapncb'], ['llippsqcjvmirkjvmisrlippslippshszivxlipedchscxliuymgofvsarsbnyqtwszivxlipedchsppsqcjvmixvkj']], [['helbcdhhellyomyfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhukiubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['hi    et a gf helllomyfrienhellood'], ['de    ap w cb dahhhkiubneajdahhkkz'], ['lm    ix e kj lipppsqcjvmirlippssh']], [['hellomyfrienhellodrownfoxjumpsothequickbhetiverthelazydohi'], ['dahhkiubneajdahhkznksjbktfqilokpdamqeygxdaperanpdahwvuzkde'], ['lippsqcjvmirlippshvsarjsbnyqtwsxliuymgoflixmzivxlipedchslm']], [['hhelloetmyhi    et a gf hellomyfriendfrienhellodhelazydol'], ['ddahhkapiude    ap w cb dahhkiubneajzbneajdahhkzdahwvuzkh'], ['llippsixqclm    ix e kj lippsqcjvmirhjvmirlippshlipedchsp']], [['wlorld'], ['shknhz'], ['apsvph']], [['helolnhello dd'], ['dahkhjdahhk zz'], ['lipsprlipps hh']], [['ythbequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['updxamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['cxlfiuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['hellomdyfriendoxjumpsojverthelazydo'], ['dahhkizubneajzktfqilokfranpdahwvuzk'], ['lippsqhcjvmirhsbnyqtwsnzivxlipedchs']], [['helloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['helbcdhhellyom&yfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhuki&ubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsq&cjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['helbcdhhellyofmyfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhukbiubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsjqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['llomyfrienhehellomyfrienhellooxjumpsoverthelazyollod'], ['hhkiubneajdadahhkiubneajdahhkktfqilokranpdahwvukhhkz'], ['ppsqcjvmirlilippsqcjvmirlippssbnyqtwszivxlipedcsppsh']], [['yzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthi'], ['uvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpde'], ['cdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlm']], [['helolnhelnlo'], ['dahkhjdahjhk'], ['lipsprliprps']], [['wxxyyworld'], ['sttuusknhz'], ['abbccasvph']], [['bcohhellomyfhi'], ['xykddahhkiubde'], ['fgsllippsqcjlm']], [['heloethequickbrownfoxjumpsgmetovehrthelazydo'], ['dahkapdamqeygxnksjbktfqilociapkradnpdahwvuzk'], ['lipsixliuymgofvsarjsbnyqtwkqixszilvxlipedchs']], [['yzhzzzzzzzzzzzzzzeyheelzzzzzzzzzzz'], ['uvdvvvvvvvvvvvvvvaudaahvvvvvvvvvvv'], ['cdlddddddddddddddicliipddddddddddd']], [['hi    et a gf helloetmthelquickbrownfoxjumpsoverthnelazydoyfrienhellod'], ['de    ap w cb dahhkapipdahmqeygxnksjbktfqilokranpdjahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwszivxlripedchscjvmirlippsh']], [['helloetmpsoverthelazydoyfrienhellodfhelllod'], ['dahhkapilokranpdahwvuzkubneajdahhkzbdahhhkz'], ['lippsixqtwszivxlipedchscjvmirlippshjlipppsh']], [['hellll'], ['dahhhh'], ['lipppp']], [['helhlelthi'], ['dahdhahpde'], ['liplpipxlm']], [['ohhellomyfrieod'], ['kddahhkiubneakz'], ['sllippsqcjvmish']], [['helothelbcd&^%lomyfriendoxhihhelloheqolod'], ['dahkpdahxyz&^%hkiubneajzktdeddahhkdamkhkz'], ['lipsxlipfgh&^%psqcjvmirhsblmllippsliuspsh']], [['ohhelllomyfriend'], ['kddahhhkiubneajz'], ['sllipppsqcjvmirh']], [['hellhi'], ['dahhde'], ['lipplm']], [['thelothequickbrownfonxjumpsgetoverthelazydo'], ['pdahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzk'], ['xlipsxliuymgofvsarjsrbnyqtwkixszivxlipedchs']], [['hhhellyomyfrienhellodl'], ['dddahhukiubneajdahhkzh'], ['lllippcsqcjvmirlippshp']], [['ohhelolomyfrienhellodgf'], ['kddahkhkiubneajdahhkzcb'], ['sllipspsqcjvmirlippshkj']], [['hhellomyfriengfrieonhelheti    get a gf hellomyfrieonhello dlohellod'], ['ddahhkiubneajcbneakjdahdape    cap w cb dahhkiubneakjdahhk zhkdahhkz'], ['llippsqcjvmirkjvmisrliplixm    kix e kj lippsqcjvmisrlipps hpslippsh']], [['hhelyfrienhellod'], ['ddahubneajdahhkz'], ['llipcjvmirlippsh']], [['b&cc^'], ['x&yy^'], ['f&gg^']], [['heti    get a gfrieonhello helothequickbrownfoxumpsovekrthelazydodehel'], ['dape    cap w cbneakjdahhk dahkpdamqeygxnksjbktqilokragnpdahwvuzkzadah'], ['lixm    kix e kjvmisrlipps lipsxliuymgofvsarjsbyqtwsziovxlipedchshilip']], [['hello helowhellomyfrrienhelhb&cd&^lodorld'], ['dahhk dahksdahhkiubnneajdahdx&yz&^hkzknhz'], ['lipps lipsalippsqcjvvmirliplf&gh&^pshsvph']], [['bchllomyfhi'], ['xydhhkiubde'], ['fglppsqcjlm']], [['hhellomyfrienhellodehi'], ['ddahhkiubneajdahhkzade'], ['llippsqcjvmirlippshilm']], [['helothequickbrownfoxumpsovekrthelazydodehel'], ['dahkpdamqeygxnksjbktqilokragnpdahwvuzkzadah'], ['lipsxliuymgofvsarjsbyqtwsziovxlipedchshilip']], [['gehelloetmpsoverthelazydoyfrienhellodfhelllod'], ['cadahhkapilokranpdahwvuzkubneajdahhkzbdahhhkz'], ['kilippsixqtwszivxlipedchscjvmirlippshjlipppsh']], [['hellomyfrienhelleodrownfoxjumpabcdefghijklmnopqrstuvwxyzythequickbrownfoxjumhello'], ['dahhkiubneajdahhakznksjbktfqilwxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqidahhk'], ['lippsqcjvmirlippishvsarjsbnyqtefghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqlipps']], [['heti    get a gfrieonhello helothequicikbrownfoxumpsovekrthelazydodehel'], ['dape    cap w cbneakjdahhk dahkpdamqeyegxnksjbktqilokragnpdahwvuzkzadah'], ['lixm    kix e kjvmisrlipps lipsxliuymgmofvsarjsbyqtwsziovxlipedchshilip']], [['hod'], ['dkz'], ['lsh']], [['hhelloehellomyfrieonhelllotmyhi    et a gf hellomyfriendfrienhellodhelazydol'], ['ddahhkadahhkiubneakjdahhhkpiude    ap w cb dahhkiubneajzbneajdahhkzdahwvuzkh'], ['llippsilippsqcjvmisrlipppsxqclm    ix e kj lippsqcjvmirhjvmirlippshlipedchsp']], [['hhellomyfriengfrieonhelheti'], ['ddahhkiubneajcbneakjdahdape'], ['llippsqcjvmirkjvmisrliplixm']], [['ehabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelcazydoit'], ['adwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahywvuzkep'], ['ilefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipgedchsmx']], [['ehelloetyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthiet'], ['adahhkapubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdeap'], ['ilippsixcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmix']], [['%bcd&^%'], ['%xyz&^%'], ['%fgh&^%']], [['thequickbromwnfoxjumpsoverthelazydog'], ['pdamqeygxnkisjbktfqilokranpdahwvuzkc'], ['xliuymgofvsqarjsbnyqtwszivxlipedchsk']], [['theqcuickbrownfoxjumpsoverthelazydog'], ['pdamyqeygxnksjbktfqilokranpdahwvuzkc'], ['xliugymgofvsarjsbnyqtwszivxlipedchsk']], [['hi    et a gf helbcd&^%lomyfriend'], ['de    ap w cb dahxyz&^%hkiubneajz'], ['lm    ix e kj lipfgh&^%psqcjvmirh']], [['yzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvv'], ['cdddddddddddddddd']], [['hellogfa world'], ['dahhkcbw sknhz'], ['lippskje asvph']], [['hi    et a gf helbcd&^%lomy friend'], ['de    ap w cb dahxyz&^%hkiu bneajz'], ['lm    ix e kj lipfgh&^%psqc jvmirh']], [['bcdd&^%'], ['xyzz&^%'], ['fghh&^%']], [['%bcdhello&^%'], ['%xyzdahhk&^%'], ['%fghlipps&^%']], [['thequicerthelazydog'], ['pdamqeyanpdahwvuzkc'], ['xliuymgivxlipedchsk']], [['%bcdhelwxylo&^%'], ['%xyzdahstuhk&^%'], ['%fghlipabcps&^%']], [['ehello'], ['adahhk'], ['ilipps']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcddddddddddddddddddddddddddddddddd']], [['hellogfa worl d'], ['dahhkcbw sknh z'], ['lippskje asvp h']], [['hi    et a gf hellogmyfriend'], ['de    ap w cb dahhkciubneajz'], ['lm    ix e kj lippskqcjvmirh']], [['%bc^d&^%'], ['%xy^z&^%'], ['%fg^h&^%']], [['bc&^%'], ['xy&^%'], ['fg&^%']], [['abcdefghijklmnopqrstuvxyz'], ['wxyzabcdefghijklmnopqrtuv'], ['efghijklmnopqrstuvwxyzbcd']], [['thequicerthelazydoag'], ['pdamqeyanpdahwvuzkwc'], ['xliuymgivxlipedchsek']], [['thequicertthelazydog'], ['pdamqeyanppdahwvuzkc'], ['xliuymgivxxlipedchsk']], [['hellogfa'], ['dahhkcbw'], ['lippskje']], [['thequickbrthequicerthelazydogownfoxjumpsoverthelazydo'], ['pdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokranpdahwvuzk'], ['xliuymgofvxliuymgivxlipedchsksarjsbnyqtwszivxlipedchs']], [['bc&^%thequicerthelazydogbc&^%'], ['xy&^%pdamqeyanpdahwvuzkcxy&^%'], ['fg&^%xliuymgivxlipedchskfg&^%']], [['abcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyz'], ['wxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuv'], ['efghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcd']], [['thequickbrownfoxydo'], ['pdamqeygxnksjbktuzk'], ['xliuymgofvsarjsbchs']], [['thequicwkbrthequicerthelazydogownofoxjumpsoverthelazydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilokranpdahwvuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwszivxlipedchs']], [['thequickborownfoxydo'], ['pdamqeygxknksjbktuzk'], ['xliuymgofsvsarjsbchs']], [['world'], ['sknhz'], ['asvph']], [['abcdefghihjklmnopqrstuvxyz'], ['wxyzabcdedfghijklmnopqrtuv'], ['efghijklmlnopqrstuvwxyzbcd']], [['hi    ehellot a gf hellogmyfriend'], ['de    adahhkp w cb dahhkciubneajz'], ['lm    ilippsx e kj lippskqcjvmirh']], [['hi    et a gf helbcmd&^%lomyfriend'], ['de    ap w cb dahxyiz&^%hkiubneajz'], ['lm    ix e kj lipfgqh&^%psqcjvmirh']], [['%b^c^d&^%'], ['%x^y^z&^%'], ['%f^g^h&^%']], [['hellomyfriend'], ['dahhkiubneajz'], ['lippsqcjvmirh']], [['helbcd&^%lomy'], ['dahxyz&^%hkiu'], ['lipfgh&^%psqc']], [['thequickbromwnfoxjumpsovertheletazydog'], ['pdamqeygxnkisjbktfqilokranpdahapwvuzkc'], ['xliuymgofvsqarjsbnyqtwszivxlipixedchsk']], [['hellogmyfriend'], ['dahhkciubneajz'], ['lippskqcjvmirh']], [['thequicekbromwnfoxjumpsoverthelazydog'], ['pdamqeyagxnkisjbktfqilokranpdahwvuzkc'], ['xliuymgiofvsqarjsbnyqtwszivxlipedchsk']], [['yzz'], ['uvv'], ['cdd']], [['hi    ehellott a gf hellogmyfriend'], ['de    adahhkpp w cb dahhkciubneajz'], ['lm    ilippsxx e kj lippskqcjvmirh']], [['thkbrownfoxjumpsoverthelazydo'], ['pdgxnksjbktfqilokranpdahwvuzk'], ['xlofvsarjsbnyqtwszivxlipedchs']], [['thequickbrownfoxjumpsoverthelazydfo'], ['pdamqeygxnksjbktfqilokranpdahwvuzbk'], ['xliuymgofvsarjsbnyqtwszivxlipedchjs']], [['theqcuickbrownfoxjumpsoverthelazbydog'], ['pdamyqeygxnksjbktfqilokranpdahwvxuzkc'], ['xliugymgofvsarjsbnyqtwszivxlipedfchsk']], [['theqcuickabcdefghihjklmnopqrstuvxyzbrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghijklmnopqrtuvxnksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['helllogfa'], ['dahhhkcbw'], ['lipppskje']], [['thequickbrthequicerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymgivxlipedchsksarjsbnyqtwszipedchs']], [['bc&^%thequicerthelazydothkbrownfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnksjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvsarjsbnyqtwszivxlipedchs&^%']], [['bc&^hello%'], ['xy&^dahhk%'], ['fg&^lipps%']], [['ehellott'], ['adahhkpp'], ['ilippsxx']], [['thequickbromwnfoxjumpsoverdog'], ['pdamqeygxnkisjbktfqilokranzkc'], ['xliuymgofvsqarjsbnyqtwszivhsk']], [['hellogfa wetorld'], ['dahhkcbw sapknhz'], ['lippskje aixsvph']], [['wetorld'], ['sapknhz'], ['aixsvph']], [['hi    et a gf helbcdhi    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzde    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlm    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['hi    et a gf helbcmd&^%lo myfriend'], ['de    ap w cb dahxyiz&^%hk iubneajz'], ['lm    ix e kj lipfgqh&^%ps qcjvmirh']], [['thequicerthequicekbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgiofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['thequiuckbrownfoxjumpsoverthelazydo'], ['pdamqeqygxnksjbktfqilokranpdahwvuzk'], ['xliuymygofvsarjsbnyqtwszivxlipedchs']], [['bc&^%thequicerthelazydoghelbcmd&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchsklipfgqh&^%psfg&^%']], [['helbcd&^thequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfgh&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['bc&thequicertthelazydog^%'], ['xy&pdamqeyanppdahwvuzkc^%'], ['fg&xliuymgivxxlipedchsk^%']], [['theqthequicerthequicekbromwnfoxjumpsoverthelazydogthelazydogdog'], ['pdampdamqeyanpdamqeyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkczkc'], ['xliuxliuymgivxliuymgiofvsqarjsbnyqtwszivxlipedchskxlipedchskhsk']], [['hi    et  a gf helbcmld&^%lo myfriend'], ['de    ap  w cb dahxyihz&^%hk iubneajz'], ['lm    ix  e kj lipfgqph&^%ps qcjvmirh']], [['afbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyz'], ['wbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuv'], ['ejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcd']], [['bc&^%thequicerthelazydoghelbcmd&&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchsklipfgqh&&^%psfg&^%']], [['ehelloyzz'], ['adahhkuvv'], ['ilippscdd']], [['hi r   et a gf helbcmd&^%lomyfriend'], ['de n   ap w cb dahxyiz&^%hkiubneajz'], ['lm v   ix e kj lipfgqh&^%psqcjvmirh']], [['gf%b^c^d&^%'], ['cb%x^y^z&^%'], ['kj%f^g^h&^%']], [['thequtickborownfoxydo'], ['pdamqpeygxknksjbktuzk'], ['xliuyxmgofsvsarjsbchs']], [['thequicerthequicezkbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyavgxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgidofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['bc&^%thequicerthelazydohighelbcmd&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkdecdahxyiz&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchslmklipfgqh&^%psfg&^%']], [['hellogmythequicertthelazydogfriend'], ['dahhkciupdamqeyanppdahwvuzkcbneajz'], ['lippskqcxliuymgivxxlipedchskjvmirh']], [['ello'], ['ahhk'], ['ipps']], [['hellogfa wethorld'], ['dahhkcbw sapdknhz'], ['lippskje aixlsvph']], [['bcello&^%'], ['xyahhk&^%'], ['fgipps&^%']], [['hellogmyfriend&^%lomyfriend'], ['dahhkciubneajz&^%hkiubneajz'], ['lippskqcjvmirh&^%psqcjvmirh']], [['yzyz'], ['uvuv'], ['cdcd']], [['helbcy'], ['dahxyu'], ['lipfgc']], [['hellogmyfriend&^%lomyfriendgf'], ['dahhkciubneajz&^%hkiubneajzcb'], ['lippskqcjvmirh&^%psqcjvmirhkj']], [['afbcdefghijklhellogfa'], ['wbxyzabcdefghdahhkcbw'], ['ejfghijklmnoplippskje']], [['ehellot'], ['adahhkp'], ['ilippsx']], [['theqkbrownfoxydo'], ['pdamgxnksjbktuzk'], ['xliuofvsarjsbchs']], [['worl'], ['sknh'], ['asvp']], [['thequickbrownfoxbcdd&^%ydo'], ['pdamqeygxnksjbktxyzz&^%uzk'], ['xliuymgofvsarjsbfghh&^%chs']], [['hi    et a gf helbcdhibc&^%    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzdexy&^%    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlmfg&^%    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['worlwxyyd'], ['sknhstuuz'], ['asvpabcch']], [['yzzz'], ['uvvv'], ['cddd']], [['ehe'], ['ada'], ['ili']], [['helbcmd&^%lomyfriend'], ['dahxyiz&^%hkiubneajz'], ['lipfgqh&^%psqcjvmirh']], [['hi    et a gf hellogmyfiend'], ['de    ap w cb dahhkciubeajz'], ['lm    ix e kj lippskqcjmirh']], [['hellogfaello'], ['dahhkcbwahhk'], ['lippskjeipps']], [['glhello'], ['chdahhk'], ['kplipps']], [['hellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfriendfriend'], ['dahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmirhjvmirh']], [['theqcuickabcdefghihjklmnoownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghijkksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqrssarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddddddddddddddddddddddddddddddd']], [['heleloo'], ['dahahkk'], ['lipipss']], [['hellogfa worwethorld'], ['dahhkcbw sknsapdknhz'], ['lippskje asvaixlsvph']], [['%bcthkbrownfoxjumpsoverthelazydod&^%'], ['%xypdgxnksjbktfqilokranpdahwvuzkz&^%'], ['%fgxlofvsarjsbnyqtwszivxlipedchsh&^%']], [['%bcdhelwxylo&&^%'], ['%xyzdahstuhk&&^%'], ['%fghlipabcps&&^%']], [['eheellot'], ['adaahhkp'], ['iliippsx']], [['helllo '], ['dahhhk '], ['lippps ']], [['hi    eiend'], ['de    aeajz'], ['lm    imirh']], [['hi    et a gf helbc%bc^d&^%d&^%lomy friend'], ['de    ap w cb dahxy%xy^z&^%z&^%hkiu bneajz'], ['lm    ix e kj lipfg%fg^h&^%h&^%psqc jvmirh']], [['ywxy'], ['ustu'], ['cabc']], [['hwellogfa wethorld'], ['dsahhkcbw sapdknhz'], ['laippskje aixlsvph']], [['helbcmd&^%lomyfiend'], ['dahxyiz&^%hkiubeajz'], ['lipfgqh&^%psqcjmirh']], [['helbcdworlwxyyd&^thequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyzsknhstuuz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfghasvpabcch&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['helllo'], ['dahhhk'], ['lippps']], [['woworwethorldrlwxyyd'], ['sksknsapdknhznhstuuz'], ['asasvaixlsvphvpabcch']], [['thequiceurtthelazydog'], ['pdamqeyaqnppdahwvuzkc'], ['xliuymgiyvxxlipedchsk']], [['hi    et  a g^f helbcmld&^%lo myfriend'], ['de    ap  w c^b dahxyihz&^%hk iubneajz'], ['lm    ix  e k^j lipfgqph&^%ps qcjvmirh']], [['hhellogmythequicertthelazydogfriendelbcmd&^%lomyfiend'], ['ddahhkciupdamqeyanppdahwvuzkcbneajzahxyiz&^%hkiubeajz'], ['llippskqcxliuymgivxxlipedchskjvmirhipfgqh&^%psqcjmirh']], [['hellomyfrienduvxyz'], ['dahhkiubneajzqrtuv'], ['lippsqcjvmirhyzbcd']], [['thequicerthequicezkbroomwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyavgxnkkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgidofvssqarjsbnyqtwszivxlipedchskxlipedchsk']], [['fgf'], ['bcb'], ['jkj']], [['yzyzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvv'], ['cdcdddddddddddd']], [['helbcdworlwxyyd&^thequiuckbrownfoxjumpsoverthelazydothequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyzsknhstuuz&^pdamqeqygxnksjbktfqilokranpdahwvuzkpdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfghasvpabcch&^xliuymygofvsarjsbnyqtwszivxlipedchsxliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['theqeutickborownfoxydo'], ['pdamaqpeygxknksjbktuzk'], ['xliuiyxmgofsvsarjsbchs']], [['thequickbrownfoxjumpsoverthelazyd'], ['pdamqeygxnksjbktfqilokranpdahwvuz'], ['xliuymgofvsarjsbnyqtwszivxlipedch']], [['bc&^%thequicerthelazydothkbroswnfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnkosjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvswarjsbnyqtwszivxlipedchs&^%']], [['woworwethorlldrlwxd'], ['sksknsapdknhhznhstz'], ['asasvaixlsvpphvpabh']], [['%b^c^d&^d%'], ['%x^y^z&^z%'], ['%f^g^h&^h%']], [['gglhello'], ['cchdahhk'], ['kkplipps']], [['%bcdheolwxylo&&^%'], ['%xyzdakhstuhk&&^%'], ['%fghlispabcps&&^%']], [['thequicertthequickbrthequicerthelazydogownfoxjumpsovelazydohelazydoag'], ['pdamqeyanppdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokrahwvuzkdahwvuzkwc'], ['xliuymgivxxliuymgofvxliuymgivxlipedchsksarjsbnyqtwszipedchslipedchsek']], [['hi    et a gf helbcmhelbcmd&^%lomyfriendd&^%lo myfriend'], ['de    ap w cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubneajz'], ['lm    ix e kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjvmirh']], [['s'], ['o'], ['w']], [['bc&^%thequicerthela^zydoghelbcmd&&^%lobc&^%'], ['xy&^%pdamqeyanpdahw^vuzkcdahxyiz&&^%hkxy&^%'], ['fg&^%xliuymgivxlipe^dchsklipfgqh&&^%psfg&^%']], [['thequickborownfoxydfo'], ['pdamqeygxknksjbktuzbk'], ['xliuymgofsvsarjsbchjs']], [['%bcdhelwxyl%'], ['%xyzdahstuh%'], ['%fghlipabcp%']], [['thequickbromownfoxjumpsoverdog'], ['pdamqeygxnkiksjbktfqilokranzkc'], ['xliuymgofvsqsarjsbnyqtwszivhsk']], [['hellogmyfriend&^%lomyfrienehellott'], ['dahhkciubneajz&^%hkiubneajadahhkpp'], ['lippskqcjvmirh&^%psqcjvmirilippsxx']], [['helbcthequickbrownfoxbcdd&^%ydoy'], ['dahxypdamqeygxnksjbktxyzz&^%uzku'], ['lipfgxliuymgofvsarjsbfghh&^%chsc']], [['ggff'], ['ccbb'], ['kkjj']], [['hhillogfaello'], ['ddehhkcbwahhk'], ['llmppskjeipps']], [['thequicwkbrthequicerthelazydogownofoxjumpszydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilovuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwdchs']], [['worethorld'], ['sknapdknhz'], ['asvixlsvph']], [['thequiceurtazydog'], ['pdamqeyaqnpwvuzkc'], ['xliuymgiyvxedchsk']], [['helbcmd&^%lomyfriendxy'], ['dahxyiz&^%hkiubneajztu'], ['lipfgqh&^%psqcjvmirhbc']], [['helbcthequickbryzzoy'], ['dahxypdamqeygxnuvvku'], ['lipfgxliuymgofvcddsc']], [['hwellogfa wethorldd'], ['dsahhkcbw sapdknhzz'], ['laippskje aixlsvphh']], [['worwethorld'], ['sknsapdknhz'], ['asvaixlsvph']], [['o%bcdhelwxylo&^%'], ['k%xyzdahstuhk&^%'], ['s%fghlipabcps&^%']], [['eehello'], ['aadahhk'], ['iilipps']], [['thequicydog'], ['pdamqeyuzkc'], ['xliuymgchsk']], [['hi    et  a g^f hhelbcd&^%lomyelbcmld&^%lo myfriend'], ['de    ap  w c^b ddahxyz&^%hkiuahxyihz&^%hk iubneajz'], ['lm    ix  e k^j llipfgh&^%psqcipfgqph&^%ps qcjvmirh']], [['theqkbrowfnfoxydo'], ['pdamgxnksbjbktuzk'], ['xliuofvsajrjsbchs']], [['hi    et a gf helbcdhibc&^%    et a abcdefghihjklmnopqrstuvxyzllogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzdexy&^%    ap w wxyzabcdedfghijklmnopqrtuvhhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlmfg&^%    ix e efghijklmlnopqrstuvwxyzbcdppskqcjvmirh&^%psqcjvmirh']], [['hwellogfa'], ['dsahhkcbw'], ['laippskje']], [['hi r  et a gf helbcmd&^%lomyfriend'], ['de n  ap w cb dahxyiz&^%hkiubneajz'], ['lm v  ix e kj lipfgqh&^%psqcjvmirh']], [['abcdefghijklmnopqrstuhi    et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde    ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm    ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['thkbrownfoxjumpsoverth%bcdhelwxylo&^%elazydo'], ['pdgxnksjbktfqilokranpd%xyzdahstuhk&^%ahwvuzk'], ['xlofvsarjsbnyqtwszivxl%fghlipabcps&^%ipedchs']], [['bc&thequicerttheworwethorldlazydog^%'], ['xy&pdamqeyanppdasknsapdknhzhwvuzkc^%'], ['fg&xliuymgivxxliasvaixlsvphpedchsk^%']], [['wyorlwxyyd'], ['suknhstuuz'], ['acsvpabcch']], [['hi    et a gf helbcmhelbcmd&^%lomyfriendd&^%lo myfend'], ['de    ap w cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubajz'], ['lm    ix e kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjirh']], [['hhelbcd&^%lomyelbcmld&^%lo'], ['ddahxyz&^%hkiuahxyihz&^%hk'], ['llipfgh&^%psqcipfgqph&^%ps']], [['thequickbrownfoxjumpsovworwethorlderthelazyd'], ['pdamqeygxnksjbktfqilokrsknsapdknhzanpdahwvuz'], ['xliuymgofvsarjsbnyqtwszasvaixlsvphivxlipedch']], [['thequicwkbrthequicerthelazydogaownofoxjumpsoverthelazydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcwksjkbktfqilokranpdahwvuzk'], ['xliuymgaofvxliuymgivxlipedchskesarsjsbnyqtwszivxlipedchs']], [['%bdcthkbrownfoxjumpsoverthelazydod&^%'], ['%xzypdgxnksjbktfqilokranpdahwvuzkz&^%'], ['%fhgxlofvsarjsbnyqtwszivxlipedchsh&^%']], [['worlwxd'], ['sknhstz'], ['asvpabh']], [['herienduvxyz'], ['daneajzqrtuv'], ['livmirhyzbcd']], [['hi    et a gf hellogmyfriiend'], ['de    ap w cb dahhkciubneeajz'], ['lm    ix e kj lippskqcjvmmirh']], [['boc&^hello%'], ['xky&^dahhk%'], ['fsg&^lipps%']], [['abcdyzzefghijklmnopqrstuvxyz'], ['wxyzuvvabcdefghijklmnopqrtuv'], ['efghcddijklmnopqrstuvwxyzbcd']], [['yxwxy'], ['utstu'], ['cbabc']], [['yzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddlippsdddddddddddddddddddddddddddd']], [['ahwellogfa wethorldd'], ['wdsahhkcbw sapdknhzz'], ['elaippskje aixlsvphh']], [['hi    et a gf helbcmd&^%l o myfriend'], ['de    ap w cb dahxyiz&^%h k iubneajz'], ['lm    ix e kj lipfgqh&^%p s qcjvmirh']], [['hellogymyfriend&^%lomyfriendgf'], ['dahhkcuiubneajz&^%hkiubneajzcb'], ['lippskcqcjvmirh&^%psqcjvmirhkj']], [['hellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfririend'], ['dahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneneajz'], ['lippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmvmirh']], [['heflbcmyd&^%lomyfriend'], ['dabhxyiuz&^%hkiubneajz'], ['lijpfgqch&^%psqcjvmirh']], [['myfriendvwxyz'], ['iubneajzrstuv'], ['qcjvmirhzabcd']], [['theqcuickabcdefghihjklmehellotnfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghiadahhkpjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqilippsxrjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['thequickbrthequiceerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeyaanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymgiivxlipedchsksarjsbnyqtwszipedchs']], [['thequhelbcmld&^%loicerthelazy%doag'], ['pdamqdahxyihz&^%hkeyanpdahwvu%zkwc'], ['xliuylipfgqph&^%psmgivxlipedc%hsek']], [['%bcdhelloo&^%'], ['%xyzdahhkk&^%'], ['%fghlippss&^%']], [['hellogmyfrithequickbromwnfoxjumpsoverthelazydogend&^%lomhi'], ['dahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuzkcajz&^%hkide'], ['lippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedchskirh&^%psqlm']], [['afbcdefghijklhellogfa worl damnoyfrienduvxyz'], ['wbxyzabcdefghdahhkcbw sknh zwijkubneajzqrtuv'], ['ejfghijklmnoplippskje asvp heqrscjvmirhyzbcd']], [['%%bc^d&^%'], ['%%xy^z&^%'], ['%%fg^h&^%']], [['gfs'], ['cbo'], ['kjw']], [['hloglfa'], ['dhkchbw'], ['lpskpje']], [['thequicerpsoverthelazydogthelazydog'], ['pdamqeyanlokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivtwszivxlipedchskxlipedchsk']], [['gghelbcdworlwxyyd&^thequickbrownfoxjumpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabcch&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqcplipps']], [['hellogmyfiend'], ['dahhkciubeajz'], ['lippskqcjmirh']], [['thequiutckbrownfoxjumpstoverthelazydo'], ['pdamqeqpygxnksjbktfqilopkranpdahwvuzk'], ['xliuymyxgofvsarjsbnyqtwxszivxlipedchs']], [['helelooywxy'], ['dahahkkustu'], ['lipipsscabc']], [['bc&thequicertthelazydg^%'], ['xy&pdamqeyanppdahwvuzc^%'], ['fg&xliuymgivxxlipedchk^%']], [['helbc%bc^d&^%d&^%lomy'], ['dahxy%xy^z&^%z&^%hkiu'], ['lipfg%fg^h&^%h&^%psqc']], [['hi    etabcdefghijklhellogfa  a g^f helbcmld'], ['de    apwxyzabcdefghdahhkcbw  w c^b dahxyihz'], ['lm    ixefghijklmnoplippskje  e k^j lipfgqph']], [['helllogfa wethorld'], ['dahhhkcbw sapdknhz'], ['lipppskje aixlsvph']], [['hellhi    et a gf helbcd&^%lomyfriendlogfa'], ['dahhde    ap w cb dahxyz&^%hkiubneajzhkcbw'], ['lipplm    ix e kj lipfgh&^%psqcjvmirhpskje']], [['abcdefghijklmnopqrstuhi    et  g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde    ap  c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm    ix  k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['hello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzd'], ['dahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvz'], ['lipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdh']], [['helbcmld&^%lo'], ['dahxyihz&^%hk'], ['lipfgqph&^%ps']], [['hellogmyfriend&^%lomyfriendgfboc&^hello%'], ['dahhkciubneajz&^%hkiubneajzcbxky&^dahhk%'], ['lippskqcjvmirh&^%psqcjvmirhkjfsg&^lipps%']], [['abcdyzzefghijklmnopqrsthi    ehellot a gnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp w cjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx e krhyzbcd']], [['helbcmld'], ['dahxyihz'], ['lipfgqph']], [['heriennduvxyz'], ['daneajjzqrtuv'], ['livmirrhyzbcd']], [['hellogmyfriend&^%lomhi    et a %lo myfriendfriend'], ['dahhkciubneajz&^%hkide    ap w %hk iubneajzbneajz'], ['lippskqcjvmirh&^%psqlm    ix e %ps qcjvmirhjvmirh']], [['yzzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cddcdddddddddddddddddddddddddddddddddd']], [['boc&hi    et  a g^f helbcmld&^%lo myfriend^heo%'], ['xky&de    ap  w c^b dahxyihz&^%hk iubneajz^dak%'], ['fsg&lm    ix  e k^j lipfgqph&^%ps qcjvmirh^lis%']], [['abcdyzzefghijklmnopqrsthi    ehellot agnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp wcjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx ekrhyzbcd']], [['thequickbromohwellogfa wethorldwnfoxjumpsoverdog'], ['pdamqeygxnkikdsahhkcbw sapdknhzsjbktfqilokranzkc'], ['xliuymgofvsqslaippskje aixlsvpharjsbnyqtwszivhsk']], [['hihihellogmyfriendellogmyfriiend'], ['dededahhkciubneajzahhkciubneeajz'], ['lmlmlippskqcjvmirhippskqcjvmmirh']], [['bdcd&^%'], ['xzyz&^%'], ['fhgh&^%']], [['thequickbrownfoxydhhillogfaelloo'], ['pdamqeygxnksjbktuzddehhkcbwahhkk'], ['xliuymgofvsarjsbchllmppskjeippss']], [['helbcdhibc&^%'], ['dahxyzdexy&^%'], ['lipfghlmfg&^%']], [['thequiutckbrownfoxjumpstovelazydo'], ['pdamqeqpygxnksjbktfqilopkrahwvuzk'], ['xliuymyxgofvsarjsbnyqtwxszipedchs']], [['bc&^%thequicerthelazydothkbroswnfoxjumpsovtheqkbrownfoxydoerthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnkosjbktfqilokrpdamgxnksjbktuzkanpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvswarjsbnyqtwszxliuofvsarjsbchsivxlipedchs&^%']], [['theqcuickabcdefghinhjklmnopqrstuvxyzbrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdejdfghijklmnopqrtuvxnksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmrlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddddddddddddddddddddddddddddd']], [['herienduvxyhi    et a gf hellogmyfienddz'], ['daneajzqrtude    ap w cb dahhkciubeajzzv'], ['livmirhyzbclm    ix e kj lippskqcjmirhhd']], [['hi    et a gf heflbcmhelbcmd&^%lomyfriendd&^%lo cmyfend'], ['de    ap w cb dabhxyidahxyiz&^%hkiubneajzz&^%hk yiubajz'], ['lm    ix e kj lijpfgqlipfgqh&^%psqcjvmirhh&^%ps gqcjirh']], [['gghelbcdworlwxyyd&^thequickbrownfoxjuthequickbromownfoxjumpsoverdogmpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuz&^pdamqeygxnksjbktfqpdamqeygxnkiksjbktfqilokranzkcilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabcch&^xliuymgofvsarjsbnyxliuymgofvsqsarjsbnyqtwszivhskqtwszivxlipedchs%psqcplipps']], [['hellogmyfrithequiend&^%lomhi s   et a gf helbcmd&^%lo myfriendfriend'], ['dahhkciubnepdamqeajz&^%hkide o   ap w cb dahxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmxliuymirh&^%psqlm w   ix e kj lipfgqh&^%ps qcjvmirhjvmirh']], [['ywxytheqcuickbrownfoxjumpsoverthelazydog'], ['ustupdamyqeygxnksjbktfqilokranpdahwvuzkc'], ['cabcxliugymgofvsarjsbnyqtwszivxlipedchsk']], [['hellogfa wetoorld'], ['dahhkcbw sapkknhz'], ['lippskje aixssvph']], [['bcbcmd&^%lobc&^%'], ['xyxyiz&^%hkxy&^%'], ['fgfgqh&^%psfg&^%']], [['theqcuickabcdefghihjklmehellotnfoxjumpsoverthoelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghiadahhkpjbktfqilokranpdkahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqilippsxrjsbnyqtwszivxlsiplippskqcjvmirhedchsk']], [['abcdyzzefghijklmnopqrsthhelbcdhii    ehellot a gnduvxyz'], ['wxyzuvvabcdefghijklmnopddahxyzdee    adahhkp w cjzqrtuv'], ['efghcddijklmnopqrstuvwxllipfghlmm    ilippsx e krhyzbcd']], [['gnduvxyz%bcdhelwxyl%'], ['cjzqrtuv%xyzdahstuh%'], ['krhyzbcd%fghlipabcp%']], [['r'], ['n'], ['v']], [['hi    et a gf helbcd&^%lomy fiend'], ['de    ap w cb dahxyz&^%hkiu beajz'], ['lm    ix e kj lipfgh&^%psqc jmirh']], [['bc&thequicertthelazydhellog^%'], ['xy&pdamqeyanppdahwvuzdahhkc^%'], ['fg&xliuymgivxxlipedchlippsk^%']], [['ob%'], ['kx%'], ['sf%']], [['%%bc^d&hellogfa worwethorld^%'], ['%%xy^z&dahhkcbw sknsapdknhz^%'], ['%%fg^h&lippskje asvaixlsvph^%']], [['wxabcdefghijklmnopqrstuhi    et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['stwxyzabcdefghijklmnopqde    ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['abefghijklmnopqrstuvwxylm    ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['gfhello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzds'], ['cbdahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvzo'], ['kjlipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdhw']], [['hi    et a gftheqkbrowfnfoxydo helbcmhelbcmd&^%lomyfiriendd&^%lo myfrd'], ['de    ap w cbpdamgxnksbjbktuzk dahxyidahxyiz&^%hkiubeneajzz&^%hk iubnz'], ['lm    ix e kjxliuofvsajrjsbchs lipfgqlipfgqh&^%psqcjmvmirhh&^%ps qcjvh']], [['ehebc&^hello%'], ['adaxy&^dahhk%'], ['ilifg&^lipps%']], [['abcdyzzefghijklmnopqrsthi    ehellot ahellhi gnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp wdahhde cjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx elipplm krhyzbcd']], [['hellogmyfienid'], ['dahhkciubeajez'], ['lippskqcjmirmh']], [['hhelelooywxy'], ['ddahahkkustu'], ['llipipsscabc']], [['hellthequiuckbrownfoxjumpsoverthelazydoaaogfa worl d'], ['dahhpdamqeqygxnksjbktfqilokranpdahwvuzkwwkcbw sknh z'], ['lippxliuymygofvsarjsbnyqtwszivxlipedchseeskje asvp h']], [['fgyzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzzf'], ['bcuvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvvb'], ['jkcdcdddddlippsddddddddddddddddddddddddddddj']], [['thequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfo'], ['pdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbk'], ['xliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjs']], [['hi    et a gf helbcdhi    et a gf helylogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzde    ap w cb dahuhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlm    ix e kj lipcpskqcjvmirh&^%psqcjvmirh']], [['bcdd&^%%'], ['xyzz&^%%'], ['fghh&^%%']], [['%bob%cd&^%'], ['%xkx%yz&^%'], ['%fsf%gh&^%']], [['hi    et  ah gf helbcmld&^%lo myfriend'], ['de    ap  wd cb dahxyihz&^%hk iubneajz'], ['lm    ix  el kj lipfgqph&^%ps qcjvmirh']], [['hi r  et a gf helbcmd&^% lomyfriend'], ['de n  ap w cb dahxyiz&^% hkiubneajz'], ['lm v  ix e kj lipfgqh&^% psqcjvmirh']], [['bc&^%thequicerthelazydoghelbcmd&^%lobc&^yzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzz%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&^%hkxy&^uvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvv%'], ['fg&^%xliuymgivxlipedchsklipfgqh&^%psfg&^cdcdddddlippsdddddddddddddddddddddddddddd%']], [['hellogmyfrithequickbromwnfoxjumpsoverthelazylbcmd&^%lo myfriendfriend'], ['dahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuhxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedcpfgqh&^%ps qcjvmirhjvmirh']], [['hi    ehellott a gf hellogmyfrielnd'], ['de    adahhkpp w cb dahhkciubneahjz'], ['lm    ilippsxx e kj lippskqcjvmiprh']], [['worlwxdgf%b^c^d&^%'], ['sknhstzcb%x^y^z&^%'], ['asvpabhkj%f^g^h&^%']], [['hhelelooywxys'], ['ddahahkkustuo'], ['llipipsscabcw']], [['booc&^hello%'], ['xkky&^dahhk%'], ['fssg&^lipps%']], [['hellogmyfriend&^%lomyfrithequickbrownfoxjumpsovworwethorlderthelazydf'], ['dahhkciubneajz&^%hkiubnepdamqeygxnksjbktfqilokrsknsapdknhzanpdahwvuzb'], ['lippskqcjvmirh&^%psqcjvmxliuymgofvsarjsbnyqtwszasvaixlsvphivxlipedchj']], [['bc&^%thequicertwethorldwnfoxjumpsoverdoghelazydogmd&&abc&^%'], ['xy&^%pdamqeyanpsapdknhzsjbktfqilokranzkcdahwvuzkciz&&wxy&^%'], ['fg&^%xliuymgivxaixlsvpharjsbnyqtwszivhsklipedchskqh&&efg&^%']], [['thequtickborobc&thequicertthelazydg^%wnfoxydo'], ['pdamqpeygxknkxy&pdamqeyanppdahwvuzc^%sjbktuzk'], ['xliuyxmgofsvsfg&xliuymgivxxlipedchk^%arjsbchs']], [['bc&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['xy&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['fg&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']], [['hellogmyfthequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfoiend'], ['dahhkciubpdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbkeajz'], ['lippskqcjxliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjsmirh']], [['thequicetazydog'], ['pdamqeyapwvuzkc'], ['xliuymgixedchsk']], [['hellogmyfrriend&^%lomyfriendgf'], ['dahhkciubnneajz&^%hkiubneajzcb'], ['lippskqcjvvmirh&^%psqcjvmirhkj']], [['woretaahorld'], ['sknapwwdknhz'], ['asvixeelsvph']], [['ld'], ['hz'], ['ph']], [['helelooywxyhi    eiend'], ['dahahkkustude    aeajz'], ['lipipsscabclm    imirh']], [['woretarahorld'], ['sknapwnwdknhz'], ['asvixevelsvph']], [['bcdd&^d%'], ['xyzz&^z%'], ['fghh&^h%']], [['gghelbcdworlwxyybrownfoxjumpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuxnksjbktfqilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabccfvsarjsbnyqtwszivxlipedchs%psqcplipps']], [['whellomyfrienduvxyhelbcthequickbrownfoxbcdd&^%ydoyrlwxyyd'], ['sdahhkiubneajzqrtudahxypdamqeygxnksjbktxyzz&^%uzkunhstuuz'], ['alippsqcjvmirhyzbclipfgxliuymgofvsarjsbfghh&^%chscvpabcch']], [['wethorldwnfoxjumpsoverdog'], ['sapdknhzsjbktfqilokranzkc'], ['aixlsvpharjsbnyqtwszivhsk']], [['etabcdefghijklhellogfa'], ['apwxyzabcdefghdahhkcbw'], ['ixefghijklmnoplippskje']], [['hi    et sa gf helbcdhi    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap ow cb dahxyzde    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix we kj lipfghlm    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['thequicwkbrthequicerthelazydogownofoxjumpszytdo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilovupzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwdcxhs']], [['theqcuickabcdefghihjklmno%bcdhethequieceurtthelazydogydog'], ['pdamyqeygwxyzabcdedfghijk%xyzdapdamqeayaqnppdahwvuzkcuzkc'], ['xliugymgoefghijklmlnopqrs%fghlixliuymigiyvxxlipedchskchsk']], [['ahellhi'], ['wdahhde'], ['elipplm']], [['hi    et a gf helleomyfriened'], ['de    ap w cb dahhakiubneajaz'], ['lm    ix e kj lippisqcjvmirih']], [['hi    et a g'], ['de    ap w c'], ['lm    ix e k']], [['helbcmd&^%l'], ['dahxyiz&^%h'], ['lipfgqh&^%p']], [['helbc%bc^d&^%d&^%lomworwethorld^%y'], ['dahxy%xy^z&^%z&^%hkisknsapdknhz^%u'], ['lipfg%fg^h&^%h&^%psqasvaixlsvph^%c']], [['rgfhello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzds'], ['ncbdahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvzo'], ['vkjlipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdhw']], [['myfedamnopqrstrhind'], ['iubazwijklmnopndejz'], ['qcjiheqrstuvwxvlmrh']], [['abcdefghijklmnopqrstuvxyo%bcdhelwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyzdahstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghlipabcps&^%d']], [['hi    e g'], ['de    a c'], ['lm    i k']], [['ahelthequickbrownfoxydolhi'], ['wdahpdamqeygxnksjbktuzkhde'], ['elipxliuymgofvsarjsbchsplm']], [['thequicerthequcekbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuygiofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['bc&^%thequicyxwxyeroswnfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyutstuankosjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgcbabcivswarjsbnyqtwszivxlipedchs&^%']], [['bchi r  et a gf helbcmd&^% lomyfriend&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['xyde n  ap w cb dahxyiz&^% hkiubneajz&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['fglm v  ix e kj lipfgqh&^% psqcjvmirh&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']], [['worlafbcdefghijklhellogfa'], ['sknhwbxyzabcdefghdahhkcbw'], ['asvpejfghijklmnoplippskje']], [['ghellogmyfrithequickbromwnfoxjumpsoverthelazylbcmd&^%lofs'], ['cdahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuhxyiz&^%hkbo'], ['klippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedcpfgqh&^%psjw']], [['heflbklmnopqrsthilomyfriend'], ['dabhxghijklmnopdehkiubneajz'], ['lijpfopqrstuvwxlmpsqcjvmirh']], [['abcdyzzefghijklmnopqrsthi    ehellot a gnd'], ['wxyzuvvabcdefghijklmnopde    adahhkp w cjz'], ['efghcddijklmnopqrstuvwxlm    ilippsx e krh']], [['heyzzzbcdhibc&^%'], ['dauvvvxyzdexy&^%'], ['licdddfghlmfg&^%']], [['yzyyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdccdddddddddddddddddddddddddddddddddd']], [['abcdefghijklmnopqrstuvxyo%bcdhelhellogfa wetorldwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyzdahdahhkcbw sapknhzstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghliplippskje aixsvphabcps&^%d']], [['%%bdc^d&^%'], ['%%xzy^z&^%'], ['%%fhg^h&^%']], [['helbcmlld'], ['dahxyihhz'], ['lipfgqpph']], [['myfrieendvwxyz'], ['iubneaajzrstuv'], ['qcjvmiirhzabcd']], [['bc&thequricertthelazydog^%'], ['xy&pdamqneyanppdahwvuzkc^%'], ['fg&xliuyvmgivxxlipedchsk^%']], [['bc&^%thequicehwellogfa wethorldhelazydogbc&^%'], ['xy&^%pdamqeyadsahhkcbw sapdknhzdahwvuzkcxy&^%'], ['fg&^%xliuymgilaippskje aixlsvphlipedchskfg&^%']], [['hi    et a gf helbcd&^%lomy yfriend'], ['de    ap w cb dahxyz&^%hkiu ubneajz'], ['lm    ix e kj lipfgh&^%psqc cjvmirh']], [['hi    et a gf helbcmd&^%lo myfrhellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfririendiend'], ['de    ap w cb dahxyiz&^%hk iubndahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneneajzeajz'], ['lm    ix e kj lipfgqh&^%ps qcjvlippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmvmirhmirh']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzmyfriend^heo%zzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvviubneajz^dak%vvvvv'], ['cdcdddddddddddddddddddddddddddqcjvmirh^lis%ddddd']], [['thehelbc%bc^d&^%d&^%lomyquicerpsoverthelazydogthelazydog'], ['pdadahxy%xy^z&^%z&^%hkiumqeyanlokranpdahwvuzkcpdahwvuzkc'], ['xlilipfg%fg^h&^%h&^%psqcuymgivtwszivxlipedchskxlipedchsk']], [['eeheabcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzo'], ['aadawxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvk'], ['iiliefghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcds']], [['helylogmyfriend&^%lomyfriend'], ['dahuhkciubneajz&^%hkiubneajz'], ['lipcpskqcjvmirh&^%psqcjvmirh']], [['theqfkbrowfnfoxydo'], ['pdambgxnksbjbktuzk'], ['xliujofvsajrjsbchs']], [['eello'], ['aahhk'], ['iipps']], [['bc&threquicertthelazydhellog^%'], ['xy&pdnamqeyanppdahwvuzdahhkc^%'], ['fg&xlviuymgivxxlipedchlippsk^%']], [['hi    et a gf hiend'], ['de    ap w cb deajz'], ['lm    ix e kj lmirh']], [['hellond'], ['dahhkjz'], ['lippsrh']], [['hi    etg^f helbcmld'], ['de    apc^b dahxyihz'], ['lm    ixk^j lipfgqph']], [['yzzzzob%zzzzzzzzzzzzzzzzzzzzz'], ['uvvvvkx%vvvvvvvvvvvvvvvvvvvvv'], ['cddddsf%ddddddddddddddddddddd']], [['abcdefghijklmnopqrstuhi'], ['wxyzabcdefghijklmnopqde'], ['efghijklmnopqrstuvwxylm']], [['hi r   et a gf helbcmd&^%lomyfiend'], ['de n   ap w cb dahxyiz&^%hkiubeajz'], ['lm v   ix e kj lipfgqh&^%psqcjmirh']], [['hi r  et helelooa gf helbcmd&^%lomyfriend'], ['de n  ap dahahkkw cb dahxyiz&^%hkiubneajz'], ['lm v  ix lipipsse kj lipfgqh&^%psqcjvmirh']], [['hellomyfrienduvxyzo'], ['dahhkiubneajzqrtuvk'], ['lippsqcjvmirhyzbcds']], [['myhi    et a gf heflbcmhelbcmd&^%lomyfriendd&^%lo cmyfendfriendvwxyz'], ['iude    ap w cb dabhxyidahxyiz&^%hkiubneajzz&^%hk yiubajzbneajzrstuv'], ['qclm    ix e kj lijpfgqlipfgqh&^%psqcjvmirhh&^%ps gqcjirhjvmirhzabcd']], [['thequicwkbrthequicerthelazydogownofoxjheleloompszydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfdahahkkilovuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnlipipssqtwdchs']], [['hielbecmd&^%loomyfriend'], ['deahxayiz&^%hkkiubneajz'], ['lmipfigqh&^%pssqcjvmirh']], [['orlwxyyd'], ['knhstuuz'], ['svpabcch']], [['hello oworrld'], ['dahhk ksknnhz'], ['lipps sasvvph']], [['ggfgf'], ['ccbcb'], ['kkjkj']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzhellogmyfriend&^%lomhizzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvdahhkciubneajz&^%hkidevvvvvvvvvvv'], ['cdcdddddddddddddddddddddddlippskqcjvmirh&^%psqlmddddddddddd']], [['gabcdefghijklmnopqrstuvxyfo%bcdhelhellogfagfgf'], ['cwxyzabcdefghijklmnopqrtubk%xyzdahdahhkcbwcbcb'], ['kefghijklmnopqrstuvwxyzbcjs%fghliplippskjekjkj']], [['gf%^b^c^d&^%'], ['cb%^x^y^z&^%'], ['kj%^f^g^h&^%']], [['thequhelbcmld&i^%loicerthelazy%doag'], ['pdamqdahxyihz&e^%hkeyanpdahwvu%zkwc'], ['xliuylipfgqph&m^%psmgivxlipedc%hsek']], [['hellogymyfriend&^%lomyfriendgthequickbrthequicerthelazydogownfoxjumpsoverthelazydof'], ['dahhkcuiubneajz&^%hkiubneajzcpdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokranpdahwvuzkb'], ['lippskcqcjvmirh&^%psqcjvmirhkxliuymgofvxliuymgivxlipedchsksarjsbnyqtwszivxlipedchsj']], [['abcdetuvxyz'], ['wxyzapqrtuv'], ['efghixyzbcd']], [['hhillogfaell%b^c^d&^d%o'], ['ddehhkcbwahh%x^y^z&^z%k'], ['llmppskjeipp%f^g^h&^h%s']], [['bc&^%uthequicertdhelazydohigheblbcmd&^%lobc&^%'], ['xy&^%qpdamqeyanpzdahwvuzkdecdaxhxyiz&^%hkxy&^%'], ['fg&^%yxliuymgivxhlipedchslmklifpfgqh&^%psfg&^%']], [['rworl'], ['nsknh'], ['vasvp']], [['hellogymyfriend&^%lomyfrriendgf'], ['dahhkcuiubneajz&^%hkiubnneajzcb'], ['lippskcqcjvmirh&^%psqcjvvmirhkj']], [['heflbcmhelbcmd&^%lomyfriendd&^%lo'], ['dabhxyidahxyiz&^%hkiubneajzz&^%hk'], ['lijpfgqlipfgqh&^%psqcjvmirhh&^%ps']], [['bb'], ['xx'], ['ff']], [['worlafbcdefghhelbcmd&^%lomyfriendijklhellogfa'], ['sknhwbxyzabcddahxyiz&^%hkiubneajzefghdahhkcbw'], ['asvpejfghijkllipfgqh&^%psqcjvmirhmnoplippskje']], [['athequicwkbrthequicerthelazydogaownofoxjumpsoverthelazydo'], ['wpdamqeysgxnpdamqeyanpdahwvuzkcwksjkbktfqilokranpdahwvuzk'], ['exliuymgaofvxliuymgivxlipedchskesarsjsbnyqtwszivxlipedchs']], [['ahellogfa'], ['wdahhkcbw'], ['elippskje']], [['hi    et aa gf helbcmhelbcmd&^%lomyfriendd&^%lo myfriend'], ['de    ap ww cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubneajz'], ['lm    ix ee kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjvmirh']], [['worwethorld^%'], ['sknsapdknhz^%'], ['asvaixlsvph^%']], [['hhehi    etabcdefghijklhellogfa  a g^f helbcmldlelooywxys'], ['ddade    apwxyzabcdefghdahhkcbw  w c^b dahxyihzhahkkustuo'], ['llilm    ixefghijklmnoplippskje  e k^j lipfgqphpipsscabcw']], [['g^f'], ['c^b'], ['k^j']], [['abcdefghijklmnopqrstuhi     et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde     ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm     ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['thequickbrthequicqerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeymanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymguivxlipedchsksarjsbnyqtwszipedchs']], [['worlafbcdefghijklhellheyzzzbcdhibc&^%ogfa'], ['sknhwbxyzabcdefghdahhdauvvvxyzdexy&^%kcbw'], ['asvpejfghijklmnoplipplicdddfghlmfg&^%skje']], [['abcdyzzefghijklmnopqrsthi'], ['wxyzuvvabcdefghijklmnopde'], ['efghcddijklmnopqrstuvwxlm']], [['hi%%bc^d&hellogfa worwetbc&thequricertthelazydog^%horld^%'], ['de%%xy^z&dahhkcbw sknsapxy&pdamqneyanppdahwvuzkc^%dknhz^%'], ['lm%%fg^h&lippskje asvaixfg&xliuyvmgivxxlipedchsk^%lsvph^%']], [['o%bcdhe&^%'], ['k%xyzda&^%'], ['s%fghli&^%']], [['%bdcthkbrvownfoxjumpsoverthelazydod&^%'], ['%xzypdgxnrksjbktfqilokranpdahwvuzkz&^%'], ['%fhgxlofvzsarjsbnyqtwszivxlipedchsh&^%']], [['hmyfriendfyfriendelgflo'], ['diubneajzbubneajzahcbhk'], ['lqcjvmirhjcjvmirhipkjps']], [['thequhellogmyfthequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfoiendrtazydog'], ['pdamqdahhkciubpdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbkeajznpwvuzkc'], ['xliuylippskqcjxliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjsmirhvxedchsk']], [['theqcuickbrownfoxjumpsoverthbc&^%thequicerthela^zydoghelbcmd&&^%lobc&^%og'], ['pdamyqeygxnksjbktfqilokranpdxy&^%pdamqeyanpdahw^vuzkcdahxyiz&&^%hkxy&^%kc'], ['xliugymgofvsarjsbnyqtwszivxlfg&^%xliuymgivxlipe^dchsklipfgqh&&^%psfg&^%sk']], [['thequickbrownfoxjumpsovertheloazydfo'], ['pdamqeygxnksjbktfqilokranpdahkwvuzbk'], ['xliuymgofvsarjsbnyqtwszivxlipsedchjs']], [['yzzzz'], ['uvvvv'], ['cdddd']], [['bcddd&^%'], ['xyzzz&^%'], ['fghhh&^%']], [['worwetbc&thequricertthelazydog^%horld^%'], ['sknsapxy&pdamqneyanppdahwvuzkc^%dknhz^%'], ['asvaixfg&xliuyvmgivxxlipedchsk^%lsvph^%']], [['hellogfatoorld'], ['dahhkcbwpkknhz'], ['lippskjexssvph']], [['theqcuickbrownfoxjumheleloopsooverthelazbydog'], ['pdamyqeygxnksjbktfqidahahkklokkranpdahwvxuzkc'], ['xliugymgofvsarjsbnyqlipipsstwsszivxlipedfchsk']], [['hi    et a gf hethequickborownfoxydolbcd&^%lomyfriend'], ['de    ap w cb dapdamqeygxknksjbktuzkhxyz&^%hkiubneajz'], ['lm    ix e kj lixliuymgofsvsarjsbchspfgh&^%psqcjvmirh']], [['woworwethorlldrwlwxd'], ['sksknsapdknhhznshstz'], ['asasvaixlsvpphvapabh']], [['theqcrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamynksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['heflbklmnopqrsthilomyfrien'], ['dabhxghijklmnopdehkiubneaj'], ['lijpfopqrstuvwxlmpsqcjvmir']], [['hi    ehellot a gf helahelthequickbrownfoxydolhilogmyfriend'], ['de    adahhkp w cb dahwdahpdamqeygxnksjbktuzkhdehkciubneajz'], ['lm    ilippsx e kj lipelipxliuymgofvsarjsbchsplmpskqcjvmirh']], [['helbcml'], ['dahxyih'], ['lipfgqp']], [['hellogmyfriithequiend&^%lomhi'], ['dahhkciubneepdamqeajz&^%hkide'], ['lippskqcjvmmxliuymirh&^%psqlm']], [['helbc%bc^d&^%d&^%lommworwethorld^%y'], ['dahxy%xy^z&^%z&^%hkiisknsapdknhz^%u'], ['lipfg%fg^h&^%h&^%psqqasvaixlsvph^%c']], [['wxabcdefghijklmnopqrstuhi'], ['stwxyzabcdefghijklmnopqde'], ['abefghijklmnopqrstuvwxylm']], [['afbcdefghijklhellogfa xyz'], ['wbxyzabcdefghdahhkcbw tuv'], ['ejfghijklmnoplippskje bcd']], [['abcdefghijklhellogfa'], ['wxyzabcdefghdahhkcbw'], ['efghijklmnoplippskje']], [['hwelhellogfa wethorldlogfa wethorldd'], ['dsahdahhkcbw sapdknhzhkcbw sapdknhzz'], ['laiplippskje aixlsvphpskje aixlsvphh']], [['bc&^%thequicerth^elazydogbc&^%'], ['xy&^%pdamqeyanpd^ahwvuzkcxy&^%'], ['fg&^%xliuymgivxl^ipedchskfg&^%']], [['h ello oworrld'], ['d ahhk ksknnhz'], ['l ipps sasvvph']], [['ggherthelazydou%lomylhello'], ['ccdanpdahwvuzkq%hkiuhdahhk'], ['kklivxlipedchsy%psqcplipps']], [['%bcdhelwxyl&o&^%'], ['%xyzdahstuh&k&^%'], ['%fghlipabcp&s&^%']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzztheqcuickabcdefghihjklmnopqrstuvxyzbrownfoxjumpsoverthelhellzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvpdamyqeygwxyzabcdedfghijklmnopqrtuvxnksjbktfqilokranpdahdahhvv'], ['cdcdddddddddddddddddddddddddddddxliugymgoefghijklmlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippdd']], [['abacdefghijklmnopqrstuvwxyz'], ['wxwyzabcdefghijklmnopqrstuv'], ['efeghijklmnopqrstuvwxyzabcd']], [['thequickbrownftheqcuickabcdefghihjklmno%bcdhethequieceurtthelazydogydogoxjumpsoverthelazyd'], ['pdamqeygxnksjbpdamyqeygwxyzabcdedfghijk%xyzdapdamqeayaqnppdahwvuzkcuzkcktfqilokranpdahwvuz'], ['xliuymgofvsarjxliugymgoefghijklmlnopqrs%fghlixliuymigiyvxxlipedchskchsksbnyqtwszivxlipedch']], [['thheflbcmhelbcmd&^%lomyfriendd&^%louiceurtazydog'], ['pddabhxyidahxyiz&^%hkiubneajzz&^%hkqeyaqnpwvuzkc'], ['xllijpfgqlipfgqh&^%psqcjvmirhh&^%psymgiyvxedchsk']], [['abcdefghijklmnopqrstuvxyo%bcdxhelwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyztdahstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghblipabcps&^%d']], [['hefmnopqrsthilomyfrien'], ['dabijklmnopdehkiubneaj'], ['lijqrstuvwxlmpsqcjvmir']], [['zyzzz'], ['vuvvv'], ['dcddd']], [['lomyfriend&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['hkiubneajz&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['psqcjvmirh&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']]], [[['hi'], ['de'], ['lm']], [['asdfghjkl'], ['wozbcdfgh'], ['ewhjklnop']], [['gf'], ['cb'], ['kj']], [['et'], ['ap'], ['ix']], [['faewfawefaewg'], ['bwasbwsabwasc'], ['jeiajeaijeiak']], [['hellomyfriend'], ['dahhkiubneajz'], ['lippsqcjvmirh']], [['dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'], ['ztvzhijehbqdiehqbdhedqbjiheijqbdheijqbdbqyqbd'], ['hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl']], [['a'], ['w'], ['e']], [['abcde'], ['wxyza'], ['efghi']], [['uvwxyz'], ['qrstuv'], ['yzabcd']], [['test123'], ['paop123'], ['xiwx123']], [['1a2b3c'], ['1w2x3y'], ['1e2f3g']], [['hello world'], ['dahhk sknhz'], ['lipps asvph']], [['monitor'], ['ikjepkn'], ['qsrmxsv']], [['abc'], ['wxy'], ['efg']], [['kmt'], ['gip'], ['oqx']], [['park'], ['lwng'], ['tevo']], [['mtkmt'], ['ipgip'], ['qxoqx']], [['testpark123'], ['paoplwng123'], ['xiwxtevo123']], [['uvuvwxyzwxyz'], ['qrqrstuvstuv'], ['yzyzabcdabcd']], [['abcdetest123'], ['wxyzapaop123'], ['efghixiwx123']], [['testpark1233'], ['paoplwng1233'], ['xiwxtevo1233']], [['parrte1a2b3cstpark123'], ['lwnnpa1w2x3yoplwng123'], ['tevvxi1e2f3gwxtevo123']], [['pamonitork'], ['lwikjepkng'], ['teqsrmxsvo']], [['uvwabcxyuz'], ['qrswxytuqv'], ['yzaefgbcyd']], [['uvuvwxyzwxz'], ['qrqrstuvstv'], ['yzyzabcdabd']], [['t'], ['p'], ['x']], [['uvz'], ['qrv'], ['yzd']], [['kuvz'], ['gqrv'], ['oyzd']], [['kkuvz'], ['ggqrv'], ['ooyzd']], [['abct'], ['wxyp'], ['efgx']], [['tes2tpark1233'], ['pao2plwng1233'], ['xiw2xtevo1233']], [['at'], ['wp'], ['ex']], [['tkmtkmtuvwabcxyuzmt'], ['pgipgipqrswxytuqvip'], ['xoqxoqxyzaefgbcydqx']], [['uvuvwxyzwxzyz'], ['qrqrstuvstvuv'], ['yzyzabcdabdcd']], [['tkmtkmtuvwabuvuvwxyzwxzcxyuzmt'], ['pgipgipqrswxqrqrstuvstvytuqvip'], ['xoqxoqxyzaefyzyzabcdabdgbcydqx']], [['tsest123'], ['poaop123'], ['xwiwx123']], [['uvutvwxyzwxzyz'], ['qrqprstuvstvuv'], ['yzyxzabcdabdcd']], [['uvwparrkxyz'], ['qrslwnngtuv'], ['yzatevvobcd']], [['tsest123aparrte1a2b3cstpark123'], ['poaop123wlwnnpa1w2x3yoplwng123'], ['xwiwx123etevvxi1e2f3gwxtevo123']], [['abctabcde'], ['wxypwxyza'], ['efgxefghi']], [['tes2testpark123tpark1233'], ['pao2paoplwng123plwng1233'], ['xiw2xiwxtevo123xtevo1233']], [['uvwabbczxyuz'], ['qrswxxyvtuqv'], ['yzaeffgdbcyd']], [['uvvz'], ['qrrv'], ['yzzd']], [['tsest123aparrte1a2b3cstpatrk123'], ['poaop123wlwnnpa1w2x3yoplwpng123'], ['xwiwx123etevvxi1e2f3gwxtexvo123']], [['paabctak'], ['lwwxypwg'], ['teefgxeo']], [['zz'], ['vv'], ['dd']], [['pararte1a2b3cstpark123'], ['lwnwnpa1w2x3yoplwng123'], ['tevevxi1e2f3gwxtevo123']], [['pamonintork'], ['lwikjejpkng'], ['teqsrmrxsvo']], [['uvutvwxyzwxzyzabckuvz'], ['qrqprstuvstvuvwxygqrv'], ['yzyxzabcdabdcdefgoyzd']], [['uvutvwzzxyzwxzyz'], ['qrqprsvvtuvstvuv'], ['yzyxzaddbcdabdcd']], [['tabcdtabcde'], ['pwxyzpwxyza'], ['xefghxefghi']], [['uvwxwyz'], ['qrstsuv'], ['yzabacd']], [['aabcde'], ['wwxyza'], ['eefghi']], [['cpararte1a2b3cstpark1abct23'], ['ylwnwnpa1w2x3yoplwng1wxyp23'], ['gtevevxi1e2f3gwxtevo1efgx23']], [['tse3st23'], ['poa3op23'], ['xwi3wx23']], [['mtuvwxyzkmt'], ['ipqrstuvgip'], ['qxyzabcdoqx']], [['tsest123aparrte1a2b3cstapark123'], ['poaop123wlwnnpa1w2x3yopwlwng123'], ['xwiwx123etevvxi1e2f3gwxetevo123']], [['cpaararuvvzte1a2b3cstpark1abct23'], ['ylwwnwnqrrvpa1w2x3yoplwng1wxyp23'], ['gteevevyzzdxi1e2f3gwxtevo1efgx23']], [['tse32st23'], ['poa32op23'], ['xwi32wx23']], [['uvutvwxyzwxzyzabckumtkmtvz'], ['qrqprstuvstvuvwxygqipgiprv'], ['yzyxzabcdabdcdefgoyqxoqxzd']], [['uvwaubcxyuz'], ['qrswqxytuqv'], ['yzaeyfgbcyd']], [['abuvutvwxyzwxzyzabckuvzct'], ['wxqrqprstuvstvuvwxygqrvyp'], ['efyzyxzabcdabdcdefgoyzdgx']], [['tes2testppark1233'], ['pao2paopllwng1233'], ['xiw2xiwxttevo1233']], [['uvwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz'], ['qrstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv'], ['yzabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad']], [['xuvuvwxyzwxzyz'], ['tqrqrstuvstvuv'], ['byzyzabcdabdcd']], [['wuvwxyz'], ['sqrstuv'], ['ayzabcd']], [['aabdcde'], ['wwxzyza'], ['eefhghi']], [['uvwxyzwxyz'], ['qrstuvstuv'], ['yzabcdabcd']], [['cpararte1a2b3cstpark1abctuvwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz23'], ['ylwnwnpa1w2x3yoplwng1wxypqrstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv23'], ['gtevevxi1e2f3gwxtevo1efgxyzabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad23']], [['tkumtkmtuvwabuvuvwxyzwxzcxyuzmt'], ['pgqipgipqrswxqrqrstuvstvytuqvip'], ['xoyqxoqxyzaefyzyzabcdabdgbcydqx']], [['uvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywz'], ['qrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusv'], ['yzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcad']], [['wuvwxyzz'], ['sqrstuvv'], ['ayzabcdd']], [['xzyzabckumtkmtvz'], ['tvuvwxygqipgiprv'], ['bdcdefgoyqxoqxzd']], [['zzz'], ['vvv'], ['ddd']], [['ts2e3st23'], ['po2a3op23'], ['xw2i3wx23']], [['uvzmonitorz'], ['qrvikjepknv'], ['yzdqsrmxsvd']], [['t3se3'], ['p3oa3'], ['x3wi3']], [['uvutvwzzxz'], ['qrqprsvvtv'], ['yzyxzaddbd']], [['uvuvzwxyzwxz'], ['qrqrvstuvstv'], ['yzyzdabcdabd']], [['cpararteuvwxwyz1a2b3cstpark1abct23'], ['ylwnwnpaqrstsuv1w2x3yoplwng1wxyp23'], ['gtevevxiyzabacd1e2f3gwxtevo1efgx23']], [['stsest123'], ['opoaop123'], ['wxwiwx123']], [['tsest123aparrte1a2b3cstapark1213'], ['poaop123wlwnnpa1w2x3yopwlwng1213'], ['xwiwx123etevvxi1e2f3gwxetevo1213']], [['uvutvwvxyzwxzuvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywz'], ['qrqprsrtuvstvqrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusv'], ['yzyxzazbcdabdyzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcad']], [['kparrte1a2b3cstpark123'], ['glwnnpa1w2x3yoplwng123'], ['otevvxi1e2f3gwxtevo123']], [['pamonintorkpamonitoork'], ['lwikjejpknglwikjepkkng'], ['teqsrmrxsvoteqsrmxssvo']], [['tsestcpararte1a2b3cstpark1abct23123apa3'], ['poaopylwnwnpa1w2x3yoplwng1wxyp23123wlw3'], ['xwiwxgtevevxi1e2f3gwxtevo1efgx23123ete3']], [['abctest123'], ['wxypaop123'], ['efgxiwx123']], [['xzyzauvwxyzwxyzbckumtzkmtvz'], ['tvuvwqrstuvstuvxygqipvgiprv'], ['bdcdeyzabcdabcdfgoyqxdoqxzd']], [['1testpark1233'], ['1paoplwng1233'], ['1xiwxtevo1233']], [['tse32st233'], ['poa32op233'], ['xwi32wx233']], [['testtpark'], ['paopplwng'], ['xiwxxtevo']], [['abuvutvwxystsest123zwxzyzabckuvzct'], ['wxqrqprstuopoaop123vstvuvwxygqrvyp'], ['efyzyxzabcwxwiwx123dabdcdefgoyzdgx']], [['kmuvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywzt'], ['giqrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusvp'], ['oqyzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcadx']], [['xzyzabckumtkmtvzz'], ['tvuvwxygqipgiprvv'], ['bdcdefgoyqxoqxzdd']], [['uvuvwxyzzyzpamonitork'], ['qrqrstuvvuvlwikjepkng'], ['yzyzabcddcdteqsrmxsvo']], [['ut3se3vwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz'], ['qp3oa3rstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv'], ['yx3wi3zabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad']], [['abuvutvwxyzwxvzyzabckuvzct'], ['wxqrqprstuvstrvuvwxygqrvyp'], ['efyzyxzabcdabzdcdefgoyzdgx']], [['monitormuvvztkmt'], ['ikjepkniqrrvpgip'], ['qsrmxsvqyzzdxoqx']], [['uvxwpuvuvwxyzwxyzarrkxyz'], ['qrtslqrqrstuvstuvwnngtuv'], ['yzbatyzyzabcdabcdevvobcd']], [['uvwxzwyz'], ['qrstvsuv'], ['yzabdacd']], [['monitomrmuvvztkmt'], ['ikjepkiniqrrvpgip'], ['qsrmxsqvqyzzdxoqx']], [['parrte1a2b3cstpark123uvwabcxyuzuvwaxbbczxyuz'], ['lwnnpa1w2x3yoplwng123qrswxytuqvqrswtxxyvtuqv'], ['tevvxi1e2f3gwxtevo123yzaefgbcydyzaebffgdbcyd']], [['uvutvwxyzwxzyzabckuvzabctest123'], ['qrqprstuvstvuvwxygqrvwxypaop123'], ['yzyxzabcdabdcdefgoyzdefgxiwx123']], [['parkk'], ['lwngg'], ['tevoo']], [['uvwabbcxzxyuz'], ['qrswxxytvtuqv'], ['yzaeffgbdbcyd']], [['parrte1a2b3cst2park123'], ['lwnnpa1w2x3yop2lwng123'], ['tevvxi1e2f3gwx2tevo123']], [['bcd&^%'], ['xyz&^%'], ['fgh&^%']], [['thequickbrownfoxjumpsoverthelazydog'], ['pdamqeygxnksjbktfqilokranpdahwvuzkc'], ['xliuymgofvsarjsbnyqtwszivxlipedchsk']], [['abcdefghijklmnopqrstuvwxyz'], ['wxyzabcdefghijklmnopqrstuv'], ['efghijklmnopqrstuvwxyzabcd']], [['wxy'], ['stu'], ['abc']], [['yzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cddddddddddddddddddddddddd']], [['hi    et a gf hellomyfriend'], ['de    ap w cb dahhkiubneajz'], ['lm    ix e kj lippsqcjvmirh']], [['thequickbrownfoxjumpsoverthelazydo'], ['pdamqeygxnksjbktfqilokranpdahwvuzk'], ['xliuymgofvsarjsbnyqtwszivxlipedchs']], [['hi    et a gf hellomyfrienhellod'], ['de    ap w cb dahhkiubneajdahhkz'], ['lm    ix e kj lippsqcjvmirlippsh']], [['et'], ['ap'], ['ix']], [['hello'], ['dahhk'], ['lipps']], [['wxxy'], ['sttu'], ['abbc']], [['ho'], ['dk'], ['ls']], [['helo'], ['dahk'], ['lips']], [['heti    get a gf hellomyfrienhellod'], ['dape    cap w cb dahhkiubneajdahhkz'], ['lixm    kix e kj lippsqcjvmirlippsh']], [['helothequickbrownfoxjumpsoverthelazydo'], ['dahkpdamqeygxnksjbktfqilokranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwszivxlipedchs']], [['yzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdddddddddddddddddddddddddd']], [['hbcd&^%elo'], ['dxyz&^%ahk'], ['lfgh&^%ips']], [['b&cd&^'], ['x&yz&^'], ['f&gh&^']], [['ythequickbrownfoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszivxlipedchs']], [['hello heloworld'], ['dahhk dahksknhz'], ['lipps lipsasvph']], [['heloworld'], ['dahksknhz'], ['lipsasvph']], [['abcdefghijklmnopqrstuvwxyzythequickbrownfoxjumpsoverthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqilokranpdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqtwszivxlipedchs']], [['hi    et a rgf hellomyfrienhellod'], ['de    ap w ncb dahhkiubneajdahhkz'], ['lm    ix e vkj lippsqcjvmirlippsh']], [['heti    get a gf hellomyferienhellod'], ['dape    cap w cb dahhkiubaneajdahhkz'], ['lixm    kix e kj lippsqcjivmirlippsh']], [['hi    et a gf helloetmyfrienhellod'], ['de    ap w cb dahhkapiubneajdahhkz'], ['lm    ix e kj lippsixqcjvmirlippsh']], [['hi'], ['de'], ['lm']], [['thi    et a gf helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydog'], ['pde    ap w cb dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkc'], ['xlm    ix e kj lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchsk']], [['rgf'], ['ncb'], ['vkj']], [['abcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['helothequickbrownfoxumpsoverthelazydo'], ['dahkpdamqeygxnksjbktqilokranpdahwvuzk'], ['lipsxliuymgofvsarjsbyqtwszivxlipedchs']], [['abcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoe'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsi']], [['helothequickbrownfoxumpsovekrthelazydo'], ['dahkpdamqeygxnksjbktqilokragnpdahwvuzk'], ['lipsxliuymgofvsarjsbyqtwsziovxlipedchs']], [['helothequickbrownfoxjumpsgetoverthelazydo'], ['dahkpdamqeygxnksjbktfqilocapkranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkixszivxlipedchs']], [['hi    et  a gf hellomyfrienhellod'], ['de    ap  w cb dahhkiubneajdahhkz'], ['lm    ix  e kj lippsqcjvmirlippsh']], [['yywxy'], ['uustu'], ['ccabc']], [['ythequickbrownfhi    et a gf hellomyfriendoxjumpsoverthelazydo'], ['updamqeygxnksjbde    ap w cb dahhkiubneajzktfqilokranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lippsqcjvmirhsbnyqtwszivxlipedchs']], [['hi    etrgf hhellomyfrienhellod'], ['de    apncb ddahhkiubneajdahhkz'], ['lm    ixvkj llippsqcjvmirlippsh']], [['hhellomyfrienhellod'], ['ddahhkiubneajdahhkz'], ['llippsqcjvmirlippsh']], [['abcdefghijfklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefbghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnjopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['hellomyfriendoxjumpsoverthelazydo'], ['dahhkiubneajzktfqilokranpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszivxlipedchs']], [['thequickbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['heti    get a gf hellomyfrieonhellod'], ['dape    cap w cb dahhkiubneakjdahhkz'], ['lixm    kix e kj lippsqcjvmisrlippsh']], [['hi    et a gf hellomyfrienhellood'], ['de    ap w cb dahhkiubneajdahhkkz'], ['lm    ix e kj lippsqcjvmirlippssh']], [['yywx'], ['uust'], ['ccab']], [['ythequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['updamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['helowythequickbrownfhiorld'], ['dahksupdamqeygxnksjbdeknhz'], ['lipsacxliuymgofvsarjlmsvph']], [['wxxyy'], ['sttuu'], ['abbcc']], [['hi    let a gf hellomyfriend'], ['de    hap w cb dahhkiubneajz'], ['lm    pix e kj lippsqcjvmirh']], [['yzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdddddddddddddddddddddddd']], [['hhellomyfrinhellod'], ['ddahhkiubnejdahhkz'], ['llippsqcjvmrlippsh']], [['hellomyfrienhellodrownfoxjumpsoverthelazydojumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwszivxlipedchs']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogod'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckz'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchsksh']], [['hi    et a gf hellomyfrie'], ['de    ap w cb dahhkiubnea'], ['lm    ix e kj lippsqcjvmi']], [['ythequickbrownfhi'], ['updamqeygxnksjbde'], ['cxliuymgofvsarjlm']], [['heti    get a gf hellomyfrieonhello d'], ['dape    cap w cb dahhkiubneakjdahhk z'], ['lixm    kix e kj lippsqcjvmisrlipps h']], [['gf'], ['cb'], ['kj']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsibcc']], [['heti    get a mgf hellomyfrienhellod'], ['dape    cap w icb dahhkiubneajdahhkz'], ['lixm    kix e qkj lippsqcjvmirlippsh']], [['hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['eetrgft'], ['aapncbp'], ['iixvkjx']], [['eetrgf'], ['aapncb'], ['iixvkj']], [['hellomyferienhellod'], ['dahhkiubaneajdahhkz'], ['lippsqcjivmirlippsh']], [['b&helothequickbrownfoxjumpsgetoverthelazydocd&^'], ['x&dahkpdamqeygxnksjbktfqilocapkranpdahwvuzkyz&^'], ['f&lipsxliuymgofvsarjsbnyqtwkixszivxlipedchsgh&^']], [['hi    et a gf helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellod'], ['de    ap w cb dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['hi    et a gf hellomyfrienheod'], ['de    ap w cb dahhkiubneajdakz'], ['lm    ix e kj lippsqcjvmirlish']], [['yywxxy'], ['uusttu'], ['ccabbc']], [['helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['ohhellomyfrienhellod'], ['kddahhkiubneajdahhkz'], ['sllippsqcjvmirlippsh']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupmpsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytqtwszivxlipedchsibcc']], [['a'], ['w'], ['e']], [['hello heloworlthequickbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['dahhk dahksknhpdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['lipps lipsasvpxliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['ohhellomyfriend'], ['kddahhkiubneajz'], ['sllippsqcjvmirh']], [['hellomyfrienheod'], ['dahhkiubneajdakz'], ['lippsqcjvmirlish']], [['wolrld'], ['skhnhz'], ['aspvph']], [['hi    et a gf helloetmthelquickbrownfoxjumpsoverthelazydoyfrienhellod'], ['de    ap w cb dahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['heloworlthequickbheti'], ['dahksknhpdamqeygxdape'], ['lipsasvpxliuymgoflixm']], [['ergft'], ['ancbp'], ['ivkjx']], [['hel'], ['dah'], ['lip']], [['tlet'], ['phap'], ['xpix']], [['hi    letheti    get a gf hellomyfrieonhello df hellomyfriend'], ['de    hapdape    cap w cb dahhkiubneakjdahhk zb dahhkiubneajz'], ['lm    pixlixm    kix e kj lippsqcjvmisrlipps hj lippsqcjvmirh']], [['abcdefghijfklmnopeetrgftqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefbghijklaapncbpmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnjopqrstiixvkjxuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['hi    et a rgf hellomyfrienhelb&cd&^lod'], ['de    ap w ncb dahhkiubneajdahx&yz&^hkz'], ['lm    ix e vkj lippsqcjvmirlipf&gh&^psh']], [['hellomyfrienhelb&cd&^lod'], ['dahhkiubneajdahx&yz&^hkz'], ['lippsqcjvmirlipf&gh&^psh']], [['helowythehquickbrownfhhiorld'], ['dahksupdadmqeygxnksjbddeknhz'], ['lipsacxliluymgofvsarjllmsvph']], [['ohhelyfrienhellod'], ['kddahubneajdahhkz'], ['sllipcjvmirlippsh']], [['hi    ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de    ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['bythequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo&cd&d^'], ['xupdamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk&yz&z^'], ['fcxliuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs&gh&h^']], [['hellomyfrienhellod'], ['dahhkiubneajdahhkz'], ['lippsqcjvmirlippsh']], [['hi    et a ohhellomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['eeetrgft'], ['aaapncbp'], ['iiixvkjx']], [['hellomyfriendoxjumpsovelrthelazydo'], ['dahhkiubneajzktfqilokrahnpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszipvxlipedchs']], [['hellomyfrienhellood'], ['dahhkiubneajdahhkkz'], ['lippsqcjvmirlippssh']], [['ythequickbrownfoxthequickbheti'], ['updamqeygxnksjbktpdamqeygxdape'], ['cxliuymgofvsarjsbxliuymgoflixm']], [['hellomyfrietrgf'], ['dahhkiubneapncb'], ['lippsqcjvmixvkj']], [['hellomyfrieonhello'], ['dahhkiubneakjdahhk'], ['lippsqcjvmisrlipps']], [['ehel'], ['adah'], ['ilip']], [['helflomyfrietrgf'], ['dahbhkiubneapncb'], ['lipjpsqcjvmixvkj']], [['hhellyomyfrienhellod'], ['ddahhukiubneajdahhkz'], ['llippcsqcjvmirlippsh']], [['helloetmthelquickbrownfoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['ythehelloetmthelquickbrownfoxjumpsoverthelazydoyienhellodnfhi'], ['updadahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkueajdahhkzjbde'], ['cxlilippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscmirlippshrjlm']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsovierthi'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokreanpde'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszmivxlm']], [['heti    get a gfrieonhello d'], ['dape    cap w cbneakjdahhk z'], ['lixm    kix e kjvmisrlipps h']], [['eeet'], ['aaap'], ['iiix']], [['hi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellod'], ['de    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippsh']], [['hi    et ehia rgf hellomyfrienhellod'], ['de    ap adew ncb dahhkiubneajdahhkz'], ['lm    ix ilme vkj lippsqcjvmirlippsh']], [['let'], ['hap'], ['pix']], [['hellomyfriendoxjumpsovelrathelazydo'], ['dahhkiubneajzktfqilokrahnwpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszipvexlipedchs']], [['hi    et a gf helloetmyfrienhellothequickbhetid'], ['de    ap w cb dahhkapiubneajdahhkpdamqeygxdapez'], ['lm    ix e kj lippsixqcjvmirlippsxliuymgoflixmh']], [['heti    get a mgf hehi    et ehia rgf hellomyfrienhellodllomyfrienhellod'], ['dape    cap w icb dade    ap adew ncb dahhkiubneajdahhkzhhkiubneajdahhkz'], ['lixm    kix e qkj lilm    ix ilme vkj lippsqcjvmirlippshppsqcjvmirlippsh']], [['helloomyfrienheod'], ['dahhkkiubneajdakz'], ['lippssqcjvmirlish']], [['hi   helowythehquickbrownfhhiorld ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de   dahksupdadmqeygxnksjbddeknhz ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm   lipsacxliluymgofvsarjllmsvph ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['hello heloworlthequickbheti    get a gf hellomyfrienhellodrownfoxjumpsothequickbhetiverthelazydo'], ['dahhk dahksknhpdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokpdamqeygxdaperanpdahwvuzk'], ['lipps lipsasvpxliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwsxliuymgoflixmzivxlipedchs']], [['abcdefghijklmnopqrstuvwxyzythequickbrownfoxjumpsoveletthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqilokrahappdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqtwszipixxlipedchs']], [['d'], ['z'], ['h']], [['hi    et a ohhelolomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w kddahkhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e sllipspsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['hellomyfrienhellodllomyfrienhellod'], ['dahhkiubneajdahhkzhhkiubneajdahhkz'], ['lippsqcjvmirlippshppsqcjvmirlippsh']], [['hhelothequickbrownfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksjbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsarjsbyqtwsziovxlipedchs']], [['heti    get a mgf hehi   e et ehia rgf hellomyfrienhellodllomyfrhoienhellod'], ['dape    cap w icb dade   a ap adew ncb dahhkiubneajdahhkzhhkiubndkeajdahhkz'], ['lixm    kix e qkj lilm   i ix ilme vkj lippsqcjvmirlippshppsqcjvlsmirlippsh']], [['helll'], ['dahhh'], ['lippp']], [['helothequickbrownfoxjumpsgetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqilocapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkixszilvxlipedchs']], [['hellthi'], ['dahhpde'], ['lippxlm']], [['hellomyfrrienhelb&cd&^lod'], ['dahhkiubnneajdahx&yz&^hkz'], ['lippsqcjvvmirlipf&gh&^psh']], [['yzzzzzzzzzzzzzzzzzzzzzzzzhel'], ['uvvvvvvvvvvvvvvvvvvvvvvvvdah'], ['cddddddddddddddddddddddddlip']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmirlippsh']], [['hellomyfrieendoxjumpsovelrthelazydo'], ['dahhkiubneaajzktfqilokrahnpdahwvuzk'], ['lippsqcjvmiirhsbnyqtwszipvxlipedchs']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogodoworld'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhz'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchskshsasvph']], [['ythequickbrownfhi    et a gf hellomyfriendoxjumpsojverthelazydo'], ['updamqeygxnksjbde    ap w cb dahhkiubneajzktfqilokfranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lippsqcjvmirhsbnyqtwsnzivxlipedchs']], [['hellomyfrienhellodllomyfrhoienhellod'], ['dahhkiubneajdahhkzhhkiubndkeajdahhkz'], ['lippsqcjvmirlippshppsqcjvlsmirlippsh']], [['woolrld'], ['skkhnhz'], ['asspvph']], [['bcd'], ['xyz'], ['fgh']], [['hellomyfergetienhellod'], ['dahhkiubancapeajdahhkz'], ['lippsqcjivkixmirlippsh']], [['bcdhellomyfrienhelb&cd&^lod'], ['xyzdahhkiubneajdahx&yz&^hkz'], ['fghlippsqcjvmirlipf&gh&^psh']], [['helothequickbrowonfoxumpsovekrthelazydo'], ['dahkpdamqeygxnkskjbktqilokragnpdahwvuzk'], ['lipsxliuymgofvsasrjsbyqtwsziovxlipedchs']], [['hhellomyfriod'], ['ddahhkiubnekz'], ['llippsqcjvmsh']], [['mgf'], ['icb'], ['qkj']], [['etrf'], ['apnb'], ['ixvj']], [['helhi'], ['dahde'], ['liplm']], [['bcd&%'], ['xyz&%'], ['fgh&%']], [['hhi    et a ohhellomyfrienhellodrgf hellomyfrienhellodellomyfrienhellood'], ['dde    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkzahhkiubneajdahhkkz'], ['llm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippshippsqcjvmirlippssh']], [['e'], ['a'], ['i']], [['hi    et a rgf hellomyfrienhelb&cd&^llod'], ['de    ap w ncb dahhkiubneajdahx&yz&^hhkz'], ['lm    ix e vkj lippsqcjvmirlipf&gh&^ppsh']], [['bcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lod'], ['xyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkz'], ['fghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^psh']], [['wwxy'], ['sstu'], ['aabc']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoi    t a gf hellomyfrieonhello d'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzke    p w cb dahhkiubneakjdahhk z'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsm    x e kj lippsqcjvmisrlipps h']], [['hlelll'], ['dhahhh'], ['lpippp']], [['eheel'], ['adaah'], ['iliip']], [['heti    get a gfrieonhello helothequickbrownfoxumpsovekrthelazydod'], ['dape    cap w cbneakjdahhk dahkpdamqeygxnksjbktqilokragnpdahwvuzkz'], ['lixm    kix e kjvmisrlipps lipsxliuymgofvsarjsbyqtwsziovxlipedchsh']], [['heolo'], ['dakhk'], ['lisps']], [['ehelhellomyfrienhelb&cd&^lod'], ['adahdahhkiubneajdahx&yz&^hkz'], ['iliplippsqcjvmirlipf&gh&^psh']], [['helloetmyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthigfthequickbhetid'], ['dahhkapiubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdecbpdamqeygxdapez'], ['lippsixqcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmkjxliuymgoflixmh']], [['ehelloetmyfrthirgft'], ['adahhkapiubnpdencbp'], ['ilippsixqcjvxlmvkjx']], [['helbcd&^%lomyfriendoxhi    etrgf hhellomyfrienhellodjumpsoverthelawwxyzydo&cd&d^'], ['dahxyz&^%hkiubneajzktde    apncb ddahhkiubneajdahhkzfqilokranpdahwsstuvuzk&yz&z^'], ['lipfgh&^%psqcjvmirhsblm    ixvkj llippsqcjvmirlippshnyqtwszivxlipeaabcdchs&gh&h^']], [['ohhelolomyfrienhellodrgf'], ['kddahkhkiubneajdahhkzncb'], ['sllipspsqcjvmirlippshvkj']], [['thequickbrownfoxjumpsoverthi    et a gf helloetmyfrienhellodhelazydo'], ['pdamqeygxnksjbktfqilokranpde    ap w cb dahhkapiubneajdahhkzdahwvuzk'], ['xliuymgofvsarjsbnyqtwszivxlm    ix e kj lippsixqcjvmirlippshlipedchs']], [['helloetmyfrienhellothequickbhetid'], ['dahhkapiubneajdahhkpdamqeygxdapez'], ['lippsixqcjvmirlippsxliuymgoflixmh']], [['trhequickbrownfoxjumpsoverthelazydog'], ['pndamqeygxnksjbktfqilokranpdahwvuzkc'], ['xvliuymgofvsarjsbnyqtwszivxlipedchsk']], [['hellomyfriendoxjumpsojverthelazydo'], ['dahhkiubneajzktfqilokfranpdahwvuzk'], ['lippsqcjvmirhsbnyqtwsnzivxlipedchs']], [['eeetrgfthellomyfrienhellodrownfoxjumpsoverthelazydo'], ['aaapncbpdahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['iiixvkjxlippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['gfrieonhello'], ['cbneakjdahhk'], ['kjvmisrlipps']], [['heloo'], ['dahkk'], ['lipss']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrienhellodget'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneajdahhkzcap'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmirlippshkix']], [['helloomyfrienhhi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellodeod'], ['dahhkkiubneajdde    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkzakz'], ['lippssqcjvmirllm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippshish']], [['ehellgft'], ['adahhcbp'], ['ilippkjx']], [['hehi    et a ohhelolomyfrienhellodrgf hellomyfrienhellodlflomyfrietrgf'], ['dade    ap w kddahkhkiubneajdahhkzncb dahhkiubneajdahhkzhbhkiubneapncb'], ['lilm    ix e sllipspsqcjvmirlippshvkj lippsqcjvmirlippshpjpsqcjvmixvkj']], [['hello wlorld'], ['dahhk shknhz'], ['lipps apsvph']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodhelazydoexyy'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzdahwvuzkatuu'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshlipedchsibcc']], [['abcdefghijklmnopqrsquickbrownfoxjumpsovferthelazydo'], ['wxyzabcdefghijklmnomqeygxnksjbktfqilokrbanpdahwvuzk'], ['efghijklmnopqrstuvwuymgofvsarjsbnyqtwszjivxlipedchs']], [['helloetmyfrienhellod'], ['dahhkapiubneajdahhkz'], ['lippsixqcjvmirlippsh']], [['hi    helotheqolod'], ['de    dahkpdamkhkz'], ['lm    lipsxliuspsh']], [['wxabcdefghijklmoxjumpsoverthelazydoexyy'], ['stwxyzabcdefghiktfqilokranpdahwvuzkatuu'], ['abefghijklmnopqsbnyqtwszivxlipedchsibcc']], [['thequickbrownfoxjumpsovertheazydo'], ['pdamqeygxnksjbktfqilokranpdawvuzk'], ['xliuymgofvsarjsbnyqtwszivxliedchs']], [['hi    et ehia rgf hfrienhehellomyfrienhellodrownfoxjumpsoverthelazydojumpsoverthelazydollod'], ['de    ap adew ncb dbneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilokranpdahwvuzkhhkz'], ['lm    ix ilme vkj ljvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwszivxlipedchsppsh']], [['abcdefghijfklmnopeetrgftqazydo'], ['wxyzabcdefbghijklaapncbpmwvuzk'], ['efghijklmnjopqrstiixvkjxuedchs']], [['helothequickbrownfonxjumpsgetoverthelazydo'], ['dahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzk'], ['lipsxliuymgofvsarjsrbnyqtwkixszivxlipedchs']], [['hellomyfrie'], ['dahhkiubnea'], ['lippsqcjvmi']], [['eehia'], ['aadew'], ['iilme']], [['bcohhellomyfrienhellodd'], ['xykddahhkiubneajdahhkzz'], ['fgsllippsqcjvmirlippshh']], [['helbcdhhellyomyfrienhellod&^%lomyfriendoxjumpsoverthelazydo&cd&d^'], ['dahxyzddahhukiubneajdahhkz&^%hkiubneajzktfqilokranpdahwvuzk&yz&z^'], ['lipfghllippcsqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxlipedchs&gh&h^']], [['hellomyfergetienhelllod'], ['dahhkiubancapeajdahhhkz'], ['lippsqcjivkixmirlipppsh']], [['helbcd&^%lomyfriendoxhihhello'], ['dahxyz&^%hkiubneajzktdeddahhk'], ['lipfgh&^%psqcjvmirhsblmllipps']], [['aa'], ['ww'], ['ee']], [['hi    ehi    et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de    ade    ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupompsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlkilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytsqtwszivxlipedchsibcc']], [['hello heti    get a gf hellomyfrieonhello dd'], ['dahhk dape    cap w cb dahhkiubneakjdahhk zz'], ['lipps lixm    kix e kj lippsqcjvmisrlipps hh']], [['helothequickbrownfoxjuhielazydo'], ['dahkpdamqeygxnksjbktfqdeahwvuzk'], ['lipsxliuymgofvsarjsbnylmipedchs']], [['hello heti    get a gf hellomyfheti    get a mgf hellomyfrienhellodo dd'], ['dahhk dape    cap w cb dahhkiubdape    cap w icb dahhkiubneajdahhkzk zz'], ['lipps lixm    kix e kj lippsqcjlixm    kix e qkj lippsqcjvmirlippshs hh']], [['hello helowhellomyfrrienhelb&cd&^lodorld'], ['dahhk dahksdahhkiubnneajdahx&yz&^hkzknhz'], ['lipps lipsalippsqcjvvmirlipf&gh&^pshsvph']], [['yzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cddddddddddddddiliipddddddddddd']], [['bcohhellomyfrieythequickbrownfoxthequickbhetinhellodd'], ['xykddahhkiubneaupdamqeygxnksjbktpdamqeygxdapejdahhkzz'], ['fgsllippsqcjvmicxliuymgofvsarjsbxliuymgoflixmrlippshh']], [['hhellomyffrienhellod'], ['ddahhkiubbneajdahhkz'], ['llippsqcjjvmirlippsh']], [['ef'], ['ab'], ['ij']], [['helloetmyfrienhellodhequicokbrownfoxjumpsoverthelzazydogod'], ['dahhkapiubneajdahhkzdamqeykgxnksjbktfqilokranpdahvwvuzkckz'], ['lippsixqcjvmirlippshliuymgsofvsarjsbnyqtwszivxlipdedchsksh']], [['erghi'], ['ancde'], ['ivklm']], [['hhellomyfriengfrieonhellohellodnhellodlod'], ['ddahhkiubneajcbneakjdahhkdahhkzjdahhkzhkz'], ['llippsqcjvmirkjvmisrlippslippshrlippshpsh']], [['helothequickbrownfoxjumpsgmetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqilociapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkqixszilvxlipedchs']], [['hellb&helothequickbrownfoxjumpsgetoverthelazydocd&^frietrogf'], ['dahhx&dahkpdamqeygxnksjbktfqilocapkranpdahwvuzkyz&^bneapnkcb'], ['lippf&lipsxliuymgofvsarjsbnyqtwkixszivxlipedchsgh&^jvmixvskj']], [['hi    et a gfi hellomyfrie'], ['de    ap w cbe dahhkiubnea'], ['lm    ix e kjm lippsqcjvmi']], [['hello helowhellomyhellomyfrienhelb&cd&^lodfrrienhelb&cd&^lodorld'], ['dahhk dahksdahhkiudahhkiubneajdahx&yz&^hkzbnneajdahx&yz&^hkzknhz'], ['lipps lipsalippsqclippsqcjvmirlipf&gh&^pshjvvmirlipf&gh&^pshsvph']], [['hi    et a rgf hellomyfrietnhelb&cd&^lod'], ['de    ap w ncb dahhkiubneapjdahx&yz&^hkz'], ['lm    ix e vkj lippsqcjvmixrlipf&gh&^psh']], [['hi    et a gf lhgfrieonhelloellomyfrie'], ['de    ap w cb hdcbneakjdahhkahhkiubnea'], ['lm    ix e kj plkjvmisrlippsippsqcjvmi']], [['hellomyfrieonhellod'], ['dahhkiubneakjdahhkz'], ['lippsqcjvmisrlippsh']], [['helbcd&^hellomyfrienhellodellomyfrienhellood%lomyfriendoxhihhello'], ['dahxyz&^dahhkiubneajdahhkzahhkiubneajdahhkkz%hkiubneajzktdeddahhk'], ['lipfgh&^lippsqcjvmirlippshippsqcjvmirlippssh%psqcjvmirhsblmllipps']], [['get'], ['cap'], ['kix']], [['helhlellllthi'], ['dahdhahhhhpde'], ['liplpippppxlm']], [['helloetmyfrienhellohellomyfrienhellodrownfoxjumpsoverthelazydothequickbhetid'], ['dahhkapiubneajdahhkdahhkiubneajdahhkznksjbktfqilokranpdahwvuzkpdamqeygxdapez'], ['lippsixqcjvmirlippslippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsxliuymgoflixmh']], [['hi    et ehia rgf he llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['de    ap adew ncb da hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['lm    ix ilme vkj li ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['hi    ehi   l et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de    ade   h ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm    ilm   p ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['hbcd&^%eo'], ['dxyz&^%ak'], ['lfgh&^%is']], [['ohhelolomyfetrienhellrgf'], ['kddahkhkiubapneajdahhncb'], ['sllipspsqcjixvmirlippvkj']], [['thequicukbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqeyqgxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuymgyoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['helloetmyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthigbhetiid'], ['dahhkapiubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdecxdapeez'], ['lippsixqcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmkflixmmh']], [['hellomyfrrienhelb&cdlod'], ['dahhkiubnneajdahx&yzhkz'], ['lippsqcjvvmirlipf&ghpsh']], [['helowythequicckbrownfhihi    et a gf hellomyfriendorld'], ['dahksupdamqeyygxnksjbdede    ap w cb dahhkiubneajzknhz'], ['lipsacxliuymggofvsarjlmlm    ix e kj lippsqcjvmirhsvph']], [['abcdefghijklmnopqrstuvwxwxabcdefghijklmnopqrstuvwxyyzythequickbrhownfoxjumpsoverthelazydoe'], ['wxyzabcdefghijklmnopqrststwxyzabcdefghijklmnopqrstuuvupdamqeygxndksjbktfqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxyzababefghijklmnopqrstuvwxyzabccdcxliuymgofvlsarjsbnyqtwszivxlipedchsi']], [['efrgft'], ['abncbp'], ['ijvkjx']], [['ythequickbrownfoxjumpsoverthelazydoythequickbrownoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokranpdahwvuzkupdamqeygxnksjktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszivxlipedchscxliuymgofvsarsbnyqtwszivxlipedchs']], [['ehehif'], ['adadeb'], ['ililmj']], [['heheti    get a gf hellomyfrieonhellyodllomyfergetienhelllob&cd&^d'], ['dadape    cap w cb dahhkiubneakjdahhukzhhkiubancapeajdahhhkx&yz&^z'], ['lilixm    kix e kj lippsqcjvmisrlippcshppsqcjivkixmirlipppsf&gh&^h']], [['hi    et aheallomyfriendoxjumpsoverthelazydo gf helloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['de    ap wdawhhkiubneajzktfqilokranpdahwvuzk cb dahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix elieppsqcjvmirhsbnyqtwszivxlipedchs kj lippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['hi e   let a gf hellomyfriend'], ['de a   hap w cb dahhkiubneajz'], ['lm i   pix e kj lippsqcjvmirh']], [['hllelll'], ['dhhahhh'], ['lppippp']], [['hhellyomyfrielod'], ['ddahhukiubneahkz'], ['llippcsqcjvmipsh']], [['hello wbcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lodlorld'], ['dahhk sxyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkzhknhz'], ['lipps afghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^pshpsvph']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodlomyferienhellodt'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzhkiubaneajdahhkzp'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshpsqcjivmirlippshx']], [['hi    et ehia rgf hfrienhehellomyfrienhellodrownfoxjumpsoverthelazydojumpsthelazydollod'], ['de    ap adew ncb dbneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilopdahwvuzkhhkz'], ['lm    ix ilme vkj ljvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwxlipedchsppsh']], [['ft'], ['bp'], ['jx']], [['yzzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cdddddddddddddddiliipddddddddddd']], [['ythequichi'], ['updamqeyde'], ['cxliuymglm']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazeydog'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvauzkc'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedichsk']], [['aickbrownfoxjumpsoveletthelazydo'], ['weygxnksjbktfqilokrahappdahwvuzk'], ['emgofvsarjsbnyqtwszipixxlipedchs']], [['b&helothequickownfoxjumpsgetoverthelazydocd&^'], ['x&dahkpdamqeygksjbktfqilocapkranpdahwvuzkyz&^'], ['f&lipsxliuymgosarjsbnyqtwkixszivxlipedchsgh&^']], [['helothequickbrownfoxjumphellomyfergetienhelllodsoverthelazydo'], ['dahkpdamqeygxnksjbktfqildahhkiubancapeajdahhhkzokranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtlippsqcjivkixmirlipppshwszivxlipedchs']], [['df'], ['zb'], ['hj']], [['b&helothequickownfoxjumpsgetovcerthelazydocd&^'], ['x&dahkpdamqeygksjbktfqilocapkryanpdahwvuzkyz&^'], ['f&lipsxliuymgosarjsbnyqtwkixszgivxlipedchsgh&^']], [['hehi'], ['dade'], ['lilm']], [['hhelloetmyfrienhellodhelazydol'], ['ddahhkapiubneajdahhkzdahwvuzkh'], ['llippsixqcjvmirlippshlipedchsp']], [['hehi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellodlothequickbrownfoxumpsoverthelazydo'], ['dade    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkzhkpdamqeygxnksjbktqilokranpdahwvuzk'], ['lilm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippshpsxliuymgofvsarjsbyqtwszivxlipedchs']], [['ythequickbrownfoxjum'], ['updamqeygxnksjbktfqi'], ['cxliuymgofvsarjsbnyq']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodkbrownfhi'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzgxnksjbde'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshofvsarjlm']], [['helothequetovehrthelazydo'], ['dahkpdamqapkradnpdahwvuzk'], ['lipsxliuyixszilvxlipedchs']], [['hi   helowythehquickbrownfhhiorlde ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de   dahksupdadmqeygxnksjbddeknhza ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm   lipsacxliluymgofvsarjllmsvphi ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['hellomyfrreienhelb&cdlod'], ['dahhkiubnnaeajdahx&yzhkz'], ['lippsqcjvvimirlipf&ghpsh']], [['llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['hhelothequickbrowhelowythequicckbrownfhihinfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksdahksupdamqeyygxnksjbdedejbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsalipsacxliuymggofvsarjlmlmrjsbyqtwsziovxlipedchs']], [['thequickbheti'], ['pdamqeygxdape'], ['xliuymgoflixm']], [['heti    get a gf hellomyfrieonhelllo d'], ['dape    cap w cb dahhkiubneakjdahhhk z'], ['lixm    kix e kj lippsqcjvmisrlippps h']], [['fwwxy'], ['bsstu'], ['jaabc']], [['hhi    et a ohhellomyfrienhellodrgf hellomyfrienhellodellomyfrienhelloold'], ['dde    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkzahhkiubneajdahhkkhz'], ['llm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippshippsqcjvmirlippssph']], [['helhlellelltihi'], ['dahdhahhahhpede'], ['liplpippippxmlm']], [['bcohhellomyfyrienhellodd'], ['xykddahhkiubuneajdahhkzz'], ['fgsllippsqcjcvmirlippshh']], [['hhelllomyfriod'], ['ddahhhkiubnekz'], ['llipppsqcjvmsh']], [['hellomyfrienhellodrownfooxjumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbkktfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjssbnyqtwszivxlipedchs']], [['helloetmyfrienhellzodhequickbrownfoxjumpsoverthelazydogodoworld'], ['dahhkapiubneajdahhvkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhz'], ['lippsixqcjvmirlippdshliuymgofvsarjsbnyqtwszivxlipedchskshsasvph']], [['yzzzzzzzzzzzzzzeheelzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvadaahvvvvvvvvvvvv'], ['cddddddddddddddiliipdddddddddddd']], [['etrgf'], ['apncb'], ['ixvkj']], [['hi l   ehi   l et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de h   ade   h ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm p   ilm   p ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['yzhzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvdvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cdlddddddddddddddiliipddddddddddd']], [['ythequickbrownfoxjumpsovownoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokrksjktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszsarsbnyqtwszivxlipedchs']], [['yywahellomyfriendoxjumupsoverthelazydoxy'], ['uuswdahhkiubneajzktfqiqlokranpdahwvuzktu'], ['ccaelippsqcjvmirhsbnyqytwszivxlipedchsbc']], [['hhellyoomyfrielod'], ['ddahhukkiubneahkz'], ['llippcssqcjvmipsh']], [['bcohhellhomyfrienhellodd'], ['xykddahhdkiubneajdahhkzz'], ['fgsllipplsqcjvmirlippshh']], [['ehelothequickbrownfonxjumpsgetoverthelazydot'], ['adahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzkp'], ['ilipsxliuymgofvsarjsrbnyqtwkixszivxlipedchsx']], [['hlel'], ['dhah'], ['lpip']], [['helloetmyfrthi'], ['dahhkapiubnpde'], ['lippsixqcjvxlm']], [['hellomyfergetienfhelllod'], ['dahhkiubancapeajbdahhhkz'], ['lippsqcjivkixmirjlipppsh']], [['helowythequicckbrownfhihi    ethhelothequickbrownfoxumpsovekrthelazydo a gf hellomyfriendorld'], ['dahksupdamqeyygxnksjbdede    apddahkpdamqeygxnksjbktqilokragnpdahwvuzk w cb dahhkiubneajzknhz'], ['lipsacxliuymggofvsarjlmlm    ixllipsxliuymgofvsarjsbyqtwsziovxlipedchs e kj lippsqcjvmirhsvph']], [['ohhhelllellomyfrienhellod'], ['kdddahhhahhkiubneajdahhkz'], ['slllipppippsqcjvmirlippsh']], [['eff'], ['abb'], ['ijj']], [['h eti    get a mgf hellomyfrienhellod'], ['d ape    cap w icb dahhkiubneajdahhkz'], ['l ixm    kix e qkj lippsqcjvmirlippsh']], [['hellomyfrietnhelb&cd&^lod'], ['dahhkiubneapjdahx&yz&^hkz'], ['lippsqcjvmixrlipf&gh&^psh']], [['b&cdheythequickbrownfoxjumpshi'], ['x&yzdaupdamqeygxnksjbktfqilode'], ['f&ghlicxliuymgofvsarjsbnyqtwlm']], [['helhlomyfriend'], ['dahdhkiubneajz'], ['liplpsqcjvmirh']], [['hhelothequickbrowhelhowythequicckbrownfhihinfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksdahdksupdamqeyygxnksjbdedejbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsaliplsacxliuymggofvsarjlmlmrjsbyqtwsziovxlipedchs']], [['hi    et a rg f hellomyfrietnhelb&cd&^lod'], ['de    ap w nc b dahhkiubneapjdahx&yz&^hkz'], ['lm    ix e vk j lippsqcjvmixrlipf&gh&^psh']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsoverthelazydoexyyd'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpdahwvuzkatuuz'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxlipedchsibcch']], [['hi    et a helolomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w dahkhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e lipspsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['helolomyfrienhellorgf'], ['dahkhkiubneajdahhkncb'], ['lipspsqcjvmirlippsvkj']], [['heeloo'], ['daahkk'], ['liipss']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsovertyhelazydoexyyd'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpudahwvuzkatuuz'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxclipedchsibcch']], [['fhellfomyfrie'], ['bdahhbkiubnea'], ['jlippjsqcjvmi']], [['gget'], ['ccap'], ['kkix']], [['heelazydo'], ['daahwvuzk'], ['liipedchs']], [['eeetrwxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupompsoverthelazydoexyygft'], ['aaapnstwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlkilokranpdahwvuzkatuucbp'], ['iiixvabefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytsqtwszivxlipedchsibcckjx']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodsoverthelazydo'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzokranpdahwvuzk'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshwszivxlipedchs']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrieunhellodget'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneaqjdahhkzcap'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmiyrlippshkix']], [['ahellomyfriendoxjumupsoverthelazydo'], ['wdahhkiubneajzktfqiqlokranpdahwvuzk'], ['elippsqcjvmirhsbnyqytwszivxlipedchs']], [['helowythehquickbrownfhhiorlde'], ['dahksupdadmqeygxnksjbddeknhza'], ['lipsacxliluymgofvsarjllmsvphi']], [['ithi'], ['epde'], ['mxlm']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsovertyhelazydoexyyhellomyfrienhelb&cd&^loddeeetrgft'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpudahwvuzkatuudahhkiubneajdahx&yz&^hkzzaaapncbp'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxclipedchsibcclippsqcjvmirlipf&gh&^pshhiiixvkjx']], [['hellomyfrietrogf'], ['dahhkiubneapnkcb'], ['lippsqcjvmixvskj']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoi'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzke'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsm']], [['ythequickbrowunfoxthequickbheti'], ['updamqeygxnksqjbktpdamqeygxdape'], ['cxliuymgofvsayrjsbxliuymgoflixm']], [['bcohhellomyfyrienhellofdwxabcdefghijklmoxjumpsovertyhelazydoexyyd'], ['xykddahhkiubuneajdahhkbzstwxyzabcdefghiktfqilokranpudahwvuzkatuuz'], ['fgsllippsqcjcvmirlippsjhabefghijklmnopqsbnyqtwszivxclipedchsibcch']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelcazydoi    t a gf hellomyfrieonhello d'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahywvuzke    p w cb dahhkiubneakjdahhk z'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipgedchsm    x e kj lippsqcjvmisrlipps h']], [['hi    et ehia rgf he llomyfrihi    et a helolomyfrienhellodrgf hellomyfrienhellodverthelazyollod'], ['de    ap adew ncb da hhkiubnede    ap w dahkhkiubneajdahhkzncb dahhkiubneajdahhkzranpdahwvukhhkz'], ['lm    ix ilme vkj li ppsqcjvmlm    ix e lipspsqcjvmirlippshvkj lippsqcjvmirlippshzivxlipedcsppsh']], [['helhlellelltiihi'], ['dahdhahhahhpeede'], ['liplpippippxmmlm']], [['ohhhelllellomyfrienheellod'], ['kdddahhhahhkiubneajdaahhkz'], ['slllipppippsqcjvmirliippsh']], [['hhellyomyfrienyhello'], ['ddahhukiubneajudahhk'], ['llippcsqcjvmirclipps']], [['ohhhelllellomyfriabcdefghijfklmnopeetrgftqrstuvwxyzythequickbrhownfoxjumpsoverthelahzydoenhellod'], ['kdddahhhahhkiubnewxyzabcdefbghijklaapncbpmnopqrstuvupdamqeygxndksjbktfqilokranpdahwdvuzkajdahhkz'], ['slllipppippsqcjvmefghijklmnjopqrstiixvkjxuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipeldchsirlippsh']], [['hellomyfrienhellodlflomyfrietrgf'], ['dahhkiubneajdahhkzhbhkiubneapncb'], ['lippsqcjvmirlippshpjpsqcjvmixvkj']], [['helxloetmthequickbrowoxjumpsoverthelazydoyfrieunhellodget'], ['dahthkapipdamqeygxnksktfqilokranpdahwvuzkubneaqjdahhkzcap'], ['lipbpsixqxliuymgofvsasbnyqtwszivxlipedchscjvmiyrlippshkix']], [['helhlellelletiihi'], ['dahdhahhahhapeede'], ['liplpippippixmmlm']], [['abcdefghijklmnopqrsteuvwxwxabcdefghijklmnopqrstuvwxyyzythequickbrhownfoxjsumpsoverthelazydoe'], ['wxyzabcdefghijklmnopaqrststwxyzabcdefghijklmnopqrstuuvupdamqeygxndksjbktfoqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxiyzababefghijklmnopqrstuvwxyzabccdcxliuymgofvlsarjsbnwyqtwszivxlipedchsi']], [['hhellomyfriengrieonhellohellodnhellodlod'], ['ddahhkiubneajcneakjdahhkdahhkzjdahhkzhkz'], ['llippsqcjvmirkvmisrlippslippshrlippshpsh']], [['hhellyomyfriehello'], ['ddahhukiubneadahhk'], ['llippcsqcjvmilipps']], [['bcd&hellomoyfrienhellodrownfoxjumpsoverthhhellomyfriengfrieonhellohellodelazydo%'], ['xyz&dahhkikubneajdahhkznksjbktfqilokranpdddahhkiubneajcbneakjdahhkdahhkzahwvuzk%'], ['fgh&lippsqscjvmirlippshvsarjsbnyqtwszivxlllippsqcjvmirkjvmisrlippslippshipedchs%']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydooexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchssibcc']], [['hi    elt a rgf hellomyfrienhellod'], ['de    ahp w ncb dahhkiubneajdahhkz'], ['lm    ipx e vkj lippsqcjvmirlippsh']], [['helflomyfriietrgf'], ['dahbhkiubneeapncb'], ['lipjpsqcjvmmixvkj']], [['ehiabcdefghijklmnopqrwnfxjumpsoveletthelazydoa'], ['adewxyzabcdefghijklmnsjbtfqilokrahappdahwvuzkw'], ['ilmefghijklmnopqrstuvarjbnyqtwszipixxlipedchse']], [['healloetmyfrienhellodhequickbrownfoxjumpsoverthelazeydog'], ['dawhhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvauzkc'], ['lieppsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedichsk']], [['lhgfrieonhelloellomyfrie'], ['hdcbneakjdahhkahhkiubnea'], ['plkjvmisrlippsippsqcjvmi']], [['hhellylomyfrienhellod'], ['ddahhuhkiubneajdahhkz'], ['llippcpsqcjvmirlippsh']], [['hfsoverthigfthequickbhetid'], ['dbokranpdecbpdamqeygxdapez'], ['ljwszivxlmkjxliuymgoflixmh']], [['yywbcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lodlorldwxy'], ['uusxyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkzhknhzstu'], ['ccafghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^pshpsvphabc']], [['bcdhellomyfrieonhellod&^%'], ['xyzdahhkiubneakjdahhkz&^%'], ['fghlippsqcjvmisrlippsh&^%']], [['aheallomyfriendoxjumpsoverthelazydo'], ['wdawhhkiubneajzktfqilokranpdahwvuzk'], ['elieppsqcjvmirhsbnyqtwszivxlipedchs']], [['aheallomyfriendoxjumpsoverthwxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsovierthielazydo'], ['wdawhhkiubneajzktfqilokranpdstwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokreanpdeahwvuzk'], ['elieppsqcjvmirhsbnyqtwszivxlabefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszmivxlmipedchs']], [['hhellohelloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogodoworldmyfrienhellodeod'], ['ddahhkdahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhziubneajdahhkzakz'], ['llippslippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchskshsasvphqcjvmirlippshish']], [['eflie'], ['abhea'], ['ijpmi']], [['ohhelyfrienhellood'], ['kddahubneajdahhkkz'], ['sllipcjvmirlippssh']], [['ehellioetmhi'], ['adahhekapide'], ['ilippmsixqlm']], [['ahellomyfriendoxjumupsoverthelaefzydo'], ['wdahhkiubneajzktfqiqlokranpdahwabvuzk'], ['elippsqcjvmirhsbnyqytwszivxlipeijdchs']], [['hellomyfrieonhenllod'], ['dahhkiubneakjdajhhkz'], ['lippsqcjvmisrlirppsh']], [['hlelloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['dhahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lpippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['hi    helothelbcd&^%lomyfriendoxhihhelloheqolod'], ['de    dahkpdahxyz&^%hkiubneajzktdeddahhkdamkhkz'], ['lm    lipsxlipfgh&^%psqcjvmirhsblmllippsliuspsh']], [['helloomyfrienhhi    ehi    et a gf hellomyfrietrogf hhellohehetimyfrienhellodeod'], ['dahhkkiubneajdde    ade    ap w cb dahhkiubneapnkcb ddahhkdadapeiubneajdahhkzakz'], ['lippssqcjvmirllm    ilm    ix e kj lippsqcjvmixvskj llippslilixmqcjvmirlippshish']], [['hl'], ['dh'], ['lp']], [['helhii'], ['dahdee'], ['liplmm']], [['hellomyfriendoxjumpsojvertaheallomyfriendoxjumpsoverthelazydoazydo'], ['dahhkiubneajzktfqilokfranpwdawhhkiubneajzktfqilokranpdahwvuzkwvuzk'], ['lippsqcjvmirhsbnyqtwsnzivxelieppsqcjvmirhsbnyqtwszivxlipedchsedchs']], [['hellomyfrienhellodverthelazyollod'], ['dahhkiubneajdahhkzranpdahwvukhhkz'], ['lippsqcjvmirlippshzivxlipedcsppsh']], [['eheihif'], ['adaedeb'], ['ilimlmj']], [['helothequickbrownfoxjumtpsgmetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqiplociapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqxtwkqixszilvxlipedchs']], [['ythequickbrownfoxthuickbheti'], ['updamqeygxnksjbktpdqeygxdape'], ['cxliuymgofvsarjsbxlymgoflixm']], [['hi  df  et ehia rgf he llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['de  zb  ap adew ncb da hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['lm  hj  ix ilme vkj li ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['fhellfomyfrieheeloo'], ['bdahhbkiubneadaahkk'], ['jlippjsqcjvmiliipss']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodhelazydoexyyzzzzzzzzzzzzzzzzzzet'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzdahwvuzkatuuvvvvvvvvvvvvvvvvvvap'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshlipedchsibccddddddddddddddddddix']], [['ohhellomyfrienheellod'], ['kddahhkiubneajdaahhkz'], ['sllippsqcjvmirliippsh']], [['iheheti'], ['edadape'], ['mlilixm']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodlomyferienhellodtgf'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzhkiubaneajdahhkzpcb'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshpsqcjivmirlippshxkj']], [['hello heti    get a gf hellomyllo dd'], ['dahhk dape    cap w cb dahhkiuhhk zz'], ['lipps lixm    kix e kj lippsqcpps hh']], [['f'], ['b'], ['j']], [['eehhi    et a gf helloetmthelquickbrownfoxjumpsohverthelazydoyfrienhellodia'], ['aadde    ap w cb dahhkapipdahmqeygxnksjbktfqilokdranpdahwvuzkubneajdahhkzew'], ['iillm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwslzivxlipedchscjvmirlippshme']], [['heti    get a mgf hellomyfrienhellodhl'], ['dape    cap w icb dahhkiubneajdahhkzdh'], ['lixm    kix e qkj lippsqcjvmirlippshlp']], [['thequhelothequickbrownfoxjumpsgetovehrthelazydoyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqdahkpdamqeygxnksjbktfqilocapkradnpdahwvuzkubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuylipsxliuymgofvsarjsbnyqtwkixszilvxlipedchscjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['helolomyfrienhhelloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodellorgf'], ['dahkhkiubneajddahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzahhkncb'], ['lipspsqcjvmirllippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshippsvkj']], [['hellomyferienhelhabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoiod'], ['dahhkiubaneajdahdwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkekz'], ['lippsqcjivmirliplefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsmsh']], [['heeoloo'], ['daakhkk'], ['liispss']], [['hellomyfrienhellodxjumpsoverthelazydo'], ['dahhkiubneajdahhkztfqilokranpdahwvuzk'], ['lippsqcjvmirlippshbnyqtwszivxlipedchs']], [['aickbrownfoxjhumpsoveletthelazydo'], ['weygxnksjbktfdqilokrahappdahwvuzk'], ['emgofvsarjsbnlyqtwszipixxlipedchs']], [['hhellomyfriengfrieonhellohellodoverthelazydoythequickbrownoxjumpsoverthelazydollomyfrietrgf'], ['ddahhkiubneajcbneakjdahhkdahhkzkranpdahwvuzkupdamqeygxnksjktfqilokranpdahwvuzkhhkiubneapncb'], ['llippsqcjvmirkjvmisrlippslippshszivxlipedchscxliuymgofvsarsbnyqtwszivxlipedchsppsqcjvmixvkj']], [['helbcdhhellyomyfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhukiubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['hi    et a gf helllomyfrienhellood'], ['de    ap w cb dahhhkiubneajdahhkkz'], ['lm    ix e kj lipppsqcjvmirlippssh']], [['hellomyfrienhellodrownfoxjumpsothequickbhetiverthelazydohi'], ['dahhkiubneajdahhkznksjbktfqilokpdamqeygxdaperanpdahwvuzkde'], ['lippsqcjvmirlippshvsarjsbnyqtwsxliuymgoflixmzivxlipedchslm']], [['hhelloetmyhi    et a gf hellomyfriendfrienhellodhelazydol'], ['ddahhkapiude    ap w cb dahhkiubneajzbneajdahhkzdahwvuzkh'], ['llippsixqclm    ix e kj lippsqcjvmirhjvmirlippshlipedchsp']], [['wlorld'], ['shknhz'], ['apsvph']], [['helolnhello dd'], ['dahkhjdahhk zz'], ['lipsprlipps hh']], [['ythbequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['updxamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['cxlfiuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['hellomdyfriendoxjumpsojverthelazydo'], ['dahhkizubneajzktfqilokfranpdahwvuzk'], ['lippsqhcjvmirhsbnyqtwsnzivxlipedchs']], [['helloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['helbcdhhellyom&yfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhuki&ubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsq&cjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['helbcdhhellyofmyfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhukbiubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsjqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['llomyfrienhehellomyfrienhellooxjumpsoverthelazyollod'], ['hhkiubneajdadahhkiubneajdahhkktfqilokranpdahwvukhhkz'], ['ppsqcjvmirlilippsqcjvmirlippssbnyqtwszivxlipedcsppsh']], [['yzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthi'], ['uvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpde'], ['cdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlm']], [['helolnhelnlo'], ['dahkhjdahjhk'], ['lipsprliprps']], [['wxxyyworld'], ['sttuusknhz'], ['abbccasvph']], [['bcohhellomyfhi'], ['xykddahhkiubde'], ['fgsllippsqcjlm']], [['heloethequickbrownfoxjumpsgmetovehrthelazydo'], ['dahkapdamqeygxnksjbktfqilociapkradnpdahwvuzk'], ['lipsixliuymgofvsarjsbnyqtwkqixszilvxlipedchs']], [['yzhzzzzzzzzzzzzzzeyheelzzzzzzzzzzz'], ['uvdvvvvvvvvvvvvvvaudaahvvvvvvvvvvv'], ['cdlddddddddddddddicliipddddddddddd']], [['hi    et a gf helloetmthelquickbrownfoxjumpsoverthnelazydoyfrienhellod'], ['de    ap w cb dahhkapipdahmqeygxnksjbktfqilokranpdjahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwszivxlripedchscjvmirlippsh']], [['helloetmpsoverthelazydoyfrienhellodfhelllod'], ['dahhkapilokranpdahwvuzkubneajdahhkzbdahhhkz'], ['lippsixqtwszivxlipedchscjvmirlippshjlipppsh']], [['hellll'], ['dahhhh'], ['lipppp']], [['helhlelthi'], ['dahdhahpde'], ['liplpipxlm']], [['ohhellomyfrieod'], ['kddahhkiubneakz'], ['sllippsqcjvmish']], [['helothelbcd&^%lomyfriendoxhihhelloheqolod'], ['dahkpdahxyz&^%hkiubneajzktdeddahhkdamkhkz'], ['lipsxlipfgh&^%psqcjvmirhsblmllippsliuspsh']], [['ohhelllomyfriend'], ['kddahhhkiubneajz'], ['sllipppsqcjvmirh']], [['hellhi'], ['dahhde'], ['lipplm']], [['thelothequickbrownfonxjumpsgetoverthelazydo'], ['pdahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzk'], ['xlipsxliuymgofvsarjsrbnyqtwkixszivxlipedchs']], [['hhhellyomyfrienhellodl'], ['dddahhukiubneajdahhkzh'], ['lllippcsqcjvmirlippshp']], [['ohhelolomyfrienhellodgf'], ['kddahkhkiubneajdahhkzcb'], ['sllipspsqcjvmirlippshkj']], [['hhellomyfriengfrieonhelheti    get a gf hellomyfrieonhello dlohellod'], ['ddahhkiubneajcbneakjdahdape    cap w cb dahhkiubneakjdahhk zhkdahhkz'], ['llippsqcjvmirkjvmisrliplixm    kix e kj lippsqcjvmisrlipps hpslippsh']], [['hhelyfrienhellod'], ['ddahubneajdahhkz'], ['llipcjvmirlippsh']], [['b&cc^'], ['x&yy^'], ['f&gg^']], [['heti    get a gfrieonhello helothequickbrownfoxumpsovekrthelazydodehel'], ['dape    cap w cbneakjdahhk dahkpdamqeygxnksjbktqilokragnpdahwvuzkzadah'], ['lixm    kix e kjvmisrlipps lipsxliuymgofvsarjsbyqtwsziovxlipedchshilip']], [['hello helowhellomyfrrienhelhb&cd&^lodorld'], ['dahhk dahksdahhkiubnneajdahdx&yz&^hkzknhz'], ['lipps lipsalippsqcjvvmirliplf&gh&^pshsvph']], [['bchllomyfhi'], ['xydhhkiubde'], ['fglppsqcjlm']], [['hhellomyfrienhellodehi'], ['ddahhkiubneajdahhkzade'], ['llippsqcjvmirlippshilm']], [['helothequickbrownfoxumpsovekrthelazydodehel'], ['dahkpdamqeygxnksjbktqilokragnpdahwvuzkzadah'], ['lipsxliuymgofvsarjsbyqtwsziovxlipedchshilip']], [['gehelloetmpsoverthelazydoyfrienhellodfhelllod'], ['cadahhkapilokranpdahwvuzkubneajdahhkzbdahhhkz'], ['kilippsixqtwszivxlipedchscjvmirlippshjlipppsh']], [['hellomyfrienhelleodrownfoxjumpabcdefghijklmnopqrstuvwxyzythequickbrownfoxjumhello'], ['dahhkiubneajdahhakznksjbktfqilwxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqidahhk'], ['lippsqcjvmirlippishvsarjsbnyqtefghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqlipps']], [['heti    get a gfrieonhello helothequicikbrownfoxumpsovekrthelazydodehel'], ['dape    cap w cbneakjdahhk dahkpdamqeyegxnksjbktqilokragnpdahwvuzkzadah'], ['lixm    kix e kjvmisrlipps lipsxliuymgmofvsarjsbyqtwsziovxlipedchshilip']], [['hod'], ['dkz'], ['lsh']], [['hhelloehellomyfrieonhelllotmyhi    et a gf hellomyfriendfrienhellodhelazydol'], ['ddahhkadahhkiubneakjdahhhkpiude    ap w cb dahhkiubneajzbneajdahhkzdahwvuzkh'], ['llippsilippsqcjvmisrlipppsxqclm    ix e kj lippsqcjvmirhjvmirlippshlipedchsp']], [['hhellomyfriengfrieonhelheti'], ['ddahhkiubneajcbneakjdahdape'], ['llippsqcjvmirkjvmisrliplixm']], [['ehabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelcazydoit'], ['adwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahywvuzkep'], ['ilefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipgedchsmx']], [['ehelloetyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthiet'], ['adahhkapubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdeap'], ['ilippsixcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmix']], [['%bcd&^%'], ['%xyz&^%'], ['%fgh&^%']], [['thequickbromwnfoxjumpsoverthelazydog'], ['pdamqeygxnkisjbktfqilokranpdahwvuzkc'], ['xliuymgofvsqarjsbnyqtwszivxlipedchsk']], [['theqcuickbrownfoxjumpsoverthelazydog'], ['pdamyqeygxnksjbktfqilokranpdahwvuzkc'], ['xliugymgofvsarjsbnyqtwszivxlipedchsk']], [['hi    et a gf helbcd&^%lomyfriend'], ['de    ap w cb dahxyz&^%hkiubneajz'], ['lm    ix e kj lipfgh&^%psqcjvmirh']], [['yzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvv'], ['cdddddddddddddddd']], [['hellogfa world'], ['dahhkcbw sknhz'], ['lippskje asvph']], [['hi    et a gf helbcd&^%lomy friend'], ['de    ap w cb dahxyz&^%hkiu bneajz'], ['lm    ix e kj lipfgh&^%psqc jvmirh']], [['bcdd&^%'], ['xyzz&^%'], ['fghh&^%']], [['%bcdhello&^%'], ['%xyzdahhk&^%'], ['%fghlipps&^%']], [['thequicerthelazydog'], ['pdamqeyanpdahwvuzkc'], ['xliuymgivxlipedchsk']], [['%bcdhelwxylo&^%'], ['%xyzdahstuhk&^%'], ['%fghlipabcps&^%']], [['ehello'], ['adahhk'], ['ilipps']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcddddddddddddddddddddddddddddddddd']], [['hellogfa worl d'], ['dahhkcbw sknh z'], ['lippskje asvp h']], [['hi    et a gf hellogmyfriend'], ['de    ap w cb dahhkciubneajz'], ['lm    ix e kj lippskqcjvmirh']], [['%bc^d&^%'], ['%xy^z&^%'], ['%fg^h&^%']], [['bc&^%'], ['xy&^%'], ['fg&^%']], [['abcdefghijklmnopqrstuvxyz'], ['wxyzabcdefghijklmnopqrtuv'], ['efghijklmnopqrstuvwxyzbcd']], [['thequicerthelazydoag'], ['pdamqeyanpdahwvuzkwc'], ['xliuymgivxlipedchsek']], [['thequicertthelazydog'], ['pdamqeyanppdahwvuzkc'], ['xliuymgivxxlipedchsk']], [['hellogfa'], ['dahhkcbw'], ['lippskje']], [['thequickbrthequicerthelazydogownfoxjumpsoverthelazydo'], ['pdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokranpdahwvuzk'], ['xliuymgofvxliuymgivxlipedchsksarjsbnyqtwszivxlipedchs']], [['bc&^%thequicerthelazydogbc&^%'], ['xy&^%pdamqeyanpdahwvuzkcxy&^%'], ['fg&^%xliuymgivxlipedchskfg&^%']], [['abcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyz'], ['wxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuv'], ['efghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcd']], [['thequickbrownfoxydo'], ['pdamqeygxnksjbktuzk'], ['xliuymgofvsarjsbchs']], [['thequicwkbrthequicerthelazydogownofoxjumpsoverthelazydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilokranpdahwvuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwszivxlipedchs']], [['thequickborownfoxydo'], ['pdamqeygxknksjbktuzk'], ['xliuymgofsvsarjsbchs']], [['world'], ['sknhz'], ['asvph']], [['abcdefghihjklmnopqrstuvxyz'], ['wxyzabcdedfghijklmnopqrtuv'], ['efghijklmlnopqrstuvwxyzbcd']], [['hi    ehellot a gf hellogmyfriend'], ['de    adahhkp w cb dahhkciubneajz'], ['lm    ilippsx e kj lippskqcjvmirh']], [['hi    et a gf helbcmd&^%lomyfriend'], ['de    ap w cb dahxyiz&^%hkiubneajz'], ['lm    ix e kj lipfgqh&^%psqcjvmirh']], [['%b^c^d&^%'], ['%x^y^z&^%'], ['%f^g^h&^%']], [['hellomyfriend'], ['dahhkiubneajz'], ['lippsqcjvmirh']], [['helbcd&^%lomy'], ['dahxyz&^%hkiu'], ['lipfgh&^%psqc']], [['thequickbromwnfoxjumpsovertheletazydog'], ['pdamqeygxnkisjbktfqilokranpdahapwvuzkc'], ['xliuymgofvsqarjsbnyqtwszivxlipixedchsk']], [['hellogmyfriend'], ['dahhkciubneajz'], ['lippskqcjvmirh']], [['thequicekbromwnfoxjumpsoverthelazydog'], ['pdamqeyagxnkisjbktfqilokranpdahwvuzkc'], ['xliuymgiofvsqarjsbnyqtwszivxlipedchsk']], [['yzz'], ['uvv'], ['cdd']], [['hi    ehellott a gf hellogmyfriend'], ['de    adahhkpp w cb dahhkciubneajz'], ['lm    ilippsxx e kj lippskqcjvmirh']], [['thkbrownfoxjumpsoverthelazydo'], ['pdgxnksjbktfqilokranpdahwvuzk'], ['xlofvsarjsbnyqtwszivxlipedchs']], [['thequickbrownfoxjumpsoverthelazydfo'], ['pdamqeygxnksjbktfqilokranpdahwvuzbk'], ['xliuymgofvsarjsbnyqtwszivxlipedchjs']], [['theqcuickbrownfoxjumpsoverthelazbydog'], ['pdamyqeygxnksjbktfqilokranpdahwvxuzkc'], ['xliugymgofvsarjsbnyqtwszivxlipedfchsk']], [['theqcuickabcdefghihjklmnopqrstuvxyzbrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghijklmnopqrtuvxnksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['helllogfa'], ['dahhhkcbw'], ['lipppskje']], [['thequickbrthequicerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymgivxlipedchsksarjsbnyqtwszipedchs']], [['bc&^%thequicerthelazydothkbrownfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnksjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvsarjsbnyqtwszivxlipedchs&^%']], [['bc&^hello%'], ['xy&^dahhk%'], ['fg&^lipps%']], [['ehellott'], ['adahhkpp'], ['ilippsxx']], [['thequickbromwnfoxjumpsoverdog'], ['pdamqeygxnkisjbktfqilokranzkc'], ['xliuymgofvsqarjsbnyqtwszivhsk']], [['hellogfa wetorld'], ['dahhkcbw sapknhz'], ['lippskje aixsvph']], [['wetorld'], ['sapknhz'], ['aixsvph']], [['hi    et a gf helbcdhi    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzde    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlm    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['hi    et a gf helbcmd&^%lo myfriend'], ['de    ap w cb dahxyiz&^%hk iubneajz'], ['lm    ix e kj lipfgqh&^%ps qcjvmirh']], [['thequicerthequicekbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgiofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['thequiuckbrownfoxjumpsoverthelazydo'], ['pdamqeqygxnksjbktfqilokranpdahwvuzk'], ['xliuymygofvsarjsbnyqtwszivxlipedchs']], [['bc&^%thequicerthelazydoghelbcmd&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchsklipfgqh&^%psfg&^%']], [['helbcd&^thequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfgh&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['bc&thequicertthelazydog^%'], ['xy&pdamqeyanppdahwvuzkc^%'], ['fg&xliuymgivxxlipedchsk^%']], [['theqthequicerthequicekbromwnfoxjumpsoverthelazydogthelazydogdog'], ['pdampdamqeyanpdamqeyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkczkc'], ['xliuxliuymgivxliuymgiofvsqarjsbnyqtwszivxlipedchskxlipedchskhsk']], [['hi    et  a gf helbcmld&^%lo myfriend'], ['de    ap  w cb dahxyihz&^%hk iubneajz'], ['lm    ix  e kj lipfgqph&^%ps qcjvmirh']], [['afbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyz'], ['wbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuv'], ['ejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcd']], [['bc&^%thequicerthelazydoghelbcmd&&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchsklipfgqh&&^%psfg&^%']], [['ehelloyzz'], ['adahhkuvv'], ['ilippscdd']], [['hi r   et a gf helbcmd&^%lomyfriend'], ['de n   ap w cb dahxyiz&^%hkiubneajz'], ['lm v   ix e kj lipfgqh&^%psqcjvmirh']], [['gf%b^c^d&^%'], ['cb%x^y^z&^%'], ['kj%f^g^h&^%']], [['thequtickborownfoxydo'], ['pdamqpeygxknksjbktuzk'], ['xliuyxmgofsvsarjsbchs']], [['thequicerthequicezkbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyavgxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgidofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['bc&^%thequicerthelazydohighelbcmd&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkdecdahxyiz&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchslmklipfgqh&^%psfg&^%']], [['hellogmythequicertthelazydogfriend'], ['dahhkciupdamqeyanppdahwvuzkcbneajz'], ['lippskqcxliuymgivxxlipedchskjvmirh']], [['ello'], ['ahhk'], ['ipps']], [['hellogfa wethorld'], ['dahhkcbw sapdknhz'], ['lippskje aixlsvph']], [['bcello&^%'], ['xyahhk&^%'], ['fgipps&^%']], [['hellogmyfriend&^%lomyfriend'], ['dahhkciubneajz&^%hkiubneajz'], ['lippskqcjvmirh&^%psqcjvmirh']], [['yzyz'], ['uvuv'], ['cdcd']], [['helbcy'], ['dahxyu'], ['lipfgc']], [['hellogmyfriend&^%lomyfriendgf'], ['dahhkciubneajz&^%hkiubneajzcb'], ['lippskqcjvmirh&^%psqcjvmirhkj']], [['afbcdefghijklhellogfa'], ['wbxyzabcdefghdahhkcbw'], ['ejfghijklmnoplippskje']], [['ehellot'], ['adahhkp'], ['ilippsx']], [['theqkbrownfoxydo'], ['pdamgxnksjbktuzk'], ['xliuofvsarjsbchs']], [['worl'], ['sknh'], ['asvp']], [['thequickbrownfoxbcdd&^%ydo'], ['pdamqeygxnksjbktxyzz&^%uzk'], ['xliuymgofvsarjsbfghh&^%chs']], [['hi    et a gf helbcdhibc&^%    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzdexy&^%    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlmfg&^%    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['worlwxyyd'], ['sknhstuuz'], ['asvpabcch']], [['yzzz'], ['uvvv'], ['cddd']], [['ehe'], ['ada'], ['ili']], [['helbcmd&^%lomyfriend'], ['dahxyiz&^%hkiubneajz'], ['lipfgqh&^%psqcjvmirh']], [['hi    et a gf hellogmyfiend'], ['de    ap w cb dahhkciubeajz'], ['lm    ix e kj lippskqcjmirh']], [['hellogfaello'], ['dahhkcbwahhk'], ['lippskjeipps']], [['glhello'], ['chdahhk'], ['kplipps']], [['hellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfriendfriend'], ['dahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmirhjvmirh']], [['theqcuickabcdefghihjklmnoownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghijkksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqrssarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddddddddddddddddddddddddddddddd']], [['heleloo'], ['dahahkk'], ['lipipss']], [['hellogfa worwethorld'], ['dahhkcbw sknsapdknhz'], ['lippskje asvaixlsvph']], [['%bcthkbrownfoxjumpsoverthelazydod&^%'], ['%xypdgxnksjbktfqilokranpdahwvuzkz&^%'], ['%fgxlofvsarjsbnyqtwszivxlipedchsh&^%']], [['%bcdhelwxylo&&^%'], ['%xyzdahstuhk&&^%'], ['%fghlipabcps&&^%']], [['eheellot'], ['adaahhkp'], ['iliippsx']], [['helllo '], ['dahhhk '], ['lippps ']], [['hi    eiend'], ['de    aeajz'], ['lm    imirh']], [['hi    et a gf helbc%bc^d&^%d&^%lomy friend'], ['de    ap w cb dahxy%xy^z&^%z&^%hkiu bneajz'], ['lm    ix e kj lipfg%fg^h&^%h&^%psqc jvmirh']], [['ywxy'], ['ustu'], ['cabc']], [['hwellogfa wethorld'], ['dsahhkcbw sapdknhz'], ['laippskje aixlsvph']], [['helbcmd&^%lomyfiend'], ['dahxyiz&^%hkiubeajz'], ['lipfgqh&^%psqcjmirh']], [['helbcdworlwxyyd&^thequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyzsknhstuuz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfghasvpabcch&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['helllo'], ['dahhhk'], ['lippps']], [['woworwethorldrlwxyyd'], ['sksknsapdknhznhstuuz'], ['asasvaixlsvphvpabcch']], [['thequiceurtthelazydog'], ['pdamqeyaqnppdahwvuzkc'], ['xliuymgiyvxxlipedchsk']], [['hi    et  a g^f helbcmld&^%lo myfriend'], ['de    ap  w c^b dahxyihz&^%hk iubneajz'], ['lm    ix  e k^j lipfgqph&^%ps qcjvmirh']], [['hhellogmythequicertthelazydogfriendelbcmd&^%lomyfiend'], ['ddahhkciupdamqeyanppdahwvuzkcbneajzahxyiz&^%hkiubeajz'], ['llippskqcxliuymgivxxlipedchskjvmirhipfgqh&^%psqcjmirh']], [['hellomyfrienduvxyz'], ['dahhkiubneajzqrtuv'], ['lippsqcjvmirhyzbcd']], [['thequicerthequicezkbroomwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyavgxnkkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgidofvssqarjsbnyqtwszivxlipedchskxlipedchsk']], [['fgf'], ['bcb'], ['jkj']], [['yzyzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvv'], ['cdcdddddddddddd']], [['helbcdworlwxyyd&^thequiuckbrownfoxjumpsoverthelazydothequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyzsknhstuuz&^pdamqeqygxnksjbktfqilokranpdahwvuzkpdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfghasvpabcch&^xliuymygofvsarjsbnyqtwszivxlipedchsxliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['theqeutickborownfoxydo'], ['pdamaqpeygxknksjbktuzk'], ['xliuiyxmgofsvsarjsbchs']], [['thequickbrownfoxjumpsoverthelazyd'], ['pdamqeygxnksjbktfqilokranpdahwvuz'], ['xliuymgofvsarjsbnyqtwszivxlipedch']], [['bc&^%thequicerthelazydothkbroswnfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnkosjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvswarjsbnyqtwszivxlipedchs&^%']], [['woworwethorlldrlwxd'], ['sksknsapdknhhznhstz'], ['asasvaixlsvpphvpabh']], [['%b^c^d&^d%'], ['%x^y^z&^z%'], ['%f^g^h&^h%']], [['gglhello'], ['cchdahhk'], ['kkplipps']], [['%bcdheolwxylo&&^%'], ['%xyzdakhstuhk&&^%'], ['%fghlispabcps&&^%']], [['thequicertthequickbrthequicerthelazydogownfoxjumpsovelazydohelazydoag'], ['pdamqeyanppdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokrahwvuzkdahwvuzkwc'], ['xliuymgivxxliuymgofvxliuymgivxlipedchsksarjsbnyqtwszipedchslipedchsek']], [['hi    et a gf helbcmhelbcmd&^%lomyfriendd&^%lo myfriend'], ['de    ap w cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubneajz'], ['lm    ix e kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjvmirh']], [['s'], ['o'], ['w']], [['bc&^%thequicerthela^zydoghelbcmd&&^%lobc&^%'], ['xy&^%pdamqeyanpdahw^vuzkcdahxyiz&&^%hkxy&^%'], ['fg&^%xliuymgivxlipe^dchsklipfgqh&&^%psfg&^%']], [['thequickborownfoxydfo'], ['pdamqeygxknksjbktuzbk'], ['xliuymgofsvsarjsbchjs']], [['%bcdhelwxyl%'], ['%xyzdahstuh%'], ['%fghlipabcp%']], [['thequickbromownfoxjumpsoverdog'], ['pdamqeygxnkiksjbktfqilokranzkc'], ['xliuymgofvsqsarjsbnyqtwszivhsk']], [['hellogmyfriend&^%lomyfrienehellott'], ['dahhkciubneajz&^%hkiubneajadahhkpp'], ['lippskqcjvmirh&^%psqcjvmirilippsxx']], [['helbcthequickbrownfoxbcdd&^%ydoy'], ['dahxypdamqeygxnksjbktxyzz&^%uzku'], ['lipfgxliuymgofvsarjsbfghh&^%chsc']], [['ggff'], ['ccbb'], ['kkjj']], [['hhillogfaello'], ['ddehhkcbwahhk'], ['llmppskjeipps']], [['thequicwkbrthequicerthelazydogownofoxjumpszydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilovuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwdchs']], [['worethorld'], ['sknapdknhz'], ['asvixlsvph']], [['thequiceurtazydog'], ['pdamqeyaqnpwvuzkc'], ['xliuymgiyvxedchsk']], [['helbcmd&^%lomyfriendxy'], ['dahxyiz&^%hkiubneajztu'], ['lipfgqh&^%psqcjvmirhbc']], [['helbcthequickbryzzoy'], ['dahxypdamqeygxnuvvku'], ['lipfgxliuymgofvcddsc']], [['hwellogfa wethorldd'], ['dsahhkcbw sapdknhzz'], ['laippskje aixlsvphh']], [['worwethorld'], ['sknsapdknhz'], ['asvaixlsvph']], [['o%bcdhelwxylo&^%'], ['k%xyzdahstuhk&^%'], ['s%fghlipabcps&^%']], [['eehello'], ['aadahhk'], ['iilipps']], [['thequicydog'], ['pdamqeyuzkc'], ['xliuymgchsk']], [['hi    et  a g^f hhelbcd&^%lomyelbcmld&^%lo myfriend'], ['de    ap  w c^b ddahxyz&^%hkiuahxyihz&^%hk iubneajz'], ['lm    ix  e k^j llipfgh&^%psqcipfgqph&^%ps qcjvmirh']], [['theqkbrowfnfoxydo'], ['pdamgxnksbjbktuzk'], ['xliuofvsajrjsbchs']], [['hi    et a gf helbcdhibc&^%    et a abcdefghihjklmnopqrstuvxyzllogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzdexy&^%    ap w wxyzabcdedfghijklmnopqrtuvhhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlmfg&^%    ix e efghijklmlnopqrstuvwxyzbcdppskqcjvmirh&^%psqcjvmirh']], [['hwellogfa'], ['dsahhkcbw'], ['laippskje']], [['hi r  et a gf helbcmd&^%lomyfriend'], ['de n  ap w cb dahxyiz&^%hkiubneajz'], ['lm v  ix e kj lipfgqh&^%psqcjvmirh']], [['abcdefghijklmnopqrstuhi    et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde    ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm    ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['thkbrownfoxjumpsoverth%bcdhelwxylo&^%elazydo'], ['pdgxnksjbktfqilokranpd%xyzdahstuhk&^%ahwvuzk'], ['xlofvsarjsbnyqtwszivxl%fghlipabcps&^%ipedchs']], [['bc&thequicerttheworwethorldlazydog^%'], ['xy&pdamqeyanppdasknsapdknhzhwvuzkc^%'], ['fg&xliuymgivxxliasvaixlsvphpedchsk^%']], [['wyorlwxyyd'], ['suknhstuuz'], ['acsvpabcch']], [['hi    et a gf helbcmhelbcmd&^%lomyfriendd&^%lo myfend'], ['de    ap w cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubajz'], ['lm    ix e kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjirh']], [['hhelbcd&^%lomyelbcmld&^%lo'], ['ddahxyz&^%hkiuahxyihz&^%hk'], ['llipfgh&^%psqcipfgqph&^%ps']], [['thequickbrownfoxjumpsovworwethorlderthelazyd'], ['pdamqeygxnksjbktfqilokrsknsapdknhzanpdahwvuz'], ['xliuymgofvsarjsbnyqtwszasvaixlsvphivxlipedch']], [['thequicwkbrthequicerthelazydogaownofoxjumpsoverthelazydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcwksjkbktfqilokranpdahwvuzk'], ['xliuymgaofvxliuymgivxlipedchskesarsjsbnyqtwszivxlipedchs']], [['%bdcthkbrownfoxjumpsoverthelazydod&^%'], ['%xzypdgxnksjbktfqilokranpdahwvuzkz&^%'], ['%fhgxlofvsarjsbnyqtwszivxlipedchsh&^%']], [['worlwxd'], ['sknhstz'], ['asvpabh']], [['herienduvxyz'], ['daneajzqrtuv'], ['livmirhyzbcd']], [['hi    et a gf hellogmyfriiend'], ['de    ap w cb dahhkciubneeajz'], ['lm    ix e kj lippskqcjvmmirh']], [['boc&^hello%'], ['xky&^dahhk%'], ['fsg&^lipps%']], [['abcdyzzefghijklmnopqrstuvxyz'], ['wxyzuvvabcdefghijklmnopqrtuv'], ['efghcddijklmnopqrstuvwxyzbcd']], [['yxwxy'], ['utstu'], ['cbabc']], [['yzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddlippsdddddddddddddddddddddddddddd']], [['ahwellogfa wethorldd'], ['wdsahhkcbw sapdknhzz'], ['elaippskje aixlsvphh']], [['hi    et a gf helbcmd&^%l o myfriend'], ['de    ap w cb dahxyiz&^%h k iubneajz'], ['lm    ix e kj lipfgqh&^%p s qcjvmirh']], [['hellogymyfriend&^%lomyfriendgf'], ['dahhkcuiubneajz&^%hkiubneajzcb'], ['lippskcqcjvmirh&^%psqcjvmirhkj']], [['hellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfririend'], ['dahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneneajz'], ['lippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmvmirh']], [['heflbcmyd&^%lomyfriend'], ['dabhxyiuz&^%hkiubneajz'], ['lijpfgqch&^%psqcjvmirh']], [['myfriendvwxyz'], ['iubneajzrstuv'], ['qcjvmirhzabcd']], [['theqcuickabcdefghihjklmehellotnfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghiadahhkpjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqilippsxrjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['thequickbrthequiceerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeyaanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymgiivxlipedchsksarjsbnyqtwszipedchs']], [['thequhelbcmld&^%loicerthelazy%doag'], ['pdamqdahxyihz&^%hkeyanpdahwvu%zkwc'], ['xliuylipfgqph&^%psmgivxlipedc%hsek']], [['%bcdhelloo&^%'], ['%xyzdahhkk&^%'], ['%fghlippss&^%']], [['hellogmyfrithequickbromwnfoxjumpsoverthelazydogend&^%lomhi'], ['dahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuzkcajz&^%hkide'], ['lippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedchskirh&^%psqlm']], [['afbcdefghijklhellogfa worl damnoyfrienduvxyz'], ['wbxyzabcdefghdahhkcbw sknh zwijkubneajzqrtuv'], ['ejfghijklmnoplippskje asvp heqrscjvmirhyzbcd']], [['%%bc^d&^%'], ['%%xy^z&^%'], ['%%fg^h&^%']], [['gfs'], ['cbo'], ['kjw']], [['hloglfa'], ['dhkchbw'], ['lpskpje']], [['thequicerpsoverthelazydogthelazydog'], ['pdamqeyanlokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivtwszivxlipedchskxlipedchsk']], [['gghelbcdworlwxyyd&^thequickbrownfoxjumpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabcch&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqcplipps']], [['hellogmyfiend'], ['dahhkciubeajz'], ['lippskqcjmirh']], [['thequiutckbrownfoxjumpstoverthelazydo'], ['pdamqeqpygxnksjbktfqilopkranpdahwvuzk'], ['xliuymyxgofvsarjsbnyqtwxszivxlipedchs']], [['helelooywxy'], ['dahahkkustu'], ['lipipsscabc']], [['bc&thequicertthelazydg^%'], ['xy&pdamqeyanppdahwvuzc^%'], ['fg&xliuymgivxxlipedchk^%']], [['helbc%bc^d&^%d&^%lomy'], ['dahxy%xy^z&^%z&^%hkiu'], ['lipfg%fg^h&^%h&^%psqc']], [['hi    etabcdefghijklhellogfa  a g^f helbcmld'], ['de    apwxyzabcdefghdahhkcbw  w c^b dahxyihz'], ['lm    ixefghijklmnoplippskje  e k^j lipfgqph']], [['helllogfa wethorld'], ['dahhhkcbw sapdknhz'], ['lipppskje aixlsvph']], [['hellhi    et a gf helbcd&^%lomyfriendlogfa'], ['dahhde    ap w cb dahxyz&^%hkiubneajzhkcbw'], ['lipplm    ix e kj lipfgh&^%psqcjvmirhpskje']], [['abcdefghijklmnopqrstuhi    et  g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde    ap  c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm    ix  k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['hello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzd'], ['dahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvz'], ['lipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdh']], [['helbcmld&^%lo'], ['dahxyihz&^%hk'], ['lipfgqph&^%ps']], [['hellogmyfriend&^%lomyfriendgfboc&^hello%'], ['dahhkciubneajz&^%hkiubneajzcbxky&^dahhk%'], ['lippskqcjvmirh&^%psqcjvmirhkjfsg&^lipps%']], [['abcdyzzefghijklmnopqrsthi    ehellot a gnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp w cjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx e krhyzbcd']], [['helbcmld'], ['dahxyihz'], ['lipfgqph']], [['heriennduvxyz'], ['daneajjzqrtuv'], ['livmirrhyzbcd']], [['hellogmyfriend&^%lomhi    et a %lo myfriendfriend'], ['dahhkciubneajz&^%hkide    ap w %hk iubneajzbneajz'], ['lippskqcjvmirh&^%psqlm    ix e %ps qcjvmirhjvmirh']], [['yzzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cddcdddddddddddddddddddddddddddddddddd']], [['boc&hi    et  a g^f helbcmld&^%lo myfriend^heo%'], ['xky&de    ap  w c^b dahxyihz&^%hk iubneajz^dak%'], ['fsg&lm    ix  e k^j lipfgqph&^%ps qcjvmirh^lis%']], [['abcdyzzefghijklmnopqrsthi    ehellot agnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp wcjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx ekrhyzbcd']], [['thequickbromohwellogfa wethorldwnfoxjumpsoverdog'], ['pdamqeygxnkikdsahhkcbw sapdknhzsjbktfqilokranzkc'], ['xliuymgofvsqslaippskje aixlsvpharjsbnyqtwszivhsk']], [['hihihellogmyfriendellogmyfriiend'], ['dededahhkciubneajzahhkciubneeajz'], ['lmlmlippskqcjvmirhippskqcjvmmirh']], [['bdcd&^%'], ['xzyz&^%'], ['fhgh&^%']], [['thequickbrownfoxydhhillogfaelloo'], ['pdamqeygxnksjbktuzddehhkcbwahhkk'], ['xliuymgofvsarjsbchllmppskjeippss']], [['helbcdhibc&^%'], ['dahxyzdexy&^%'], ['lipfghlmfg&^%']], [['thequiutckbrownfoxjumpstovelazydo'], ['pdamqeqpygxnksjbktfqilopkrahwvuzk'], ['xliuymyxgofvsarjsbnyqtwxszipedchs']], [['bc&^%thequicerthelazydothkbroswnfoxjumpsovtheqkbrownfoxydoerthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnkosjbktfqilokrpdamgxnksjbktuzkanpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvswarjsbnyqtwszxliuofvsarjsbchsivxlipedchs&^%']], [['theqcuickabcdefghinhjklmnopqrstuvxyzbrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdejdfghijklmnopqrtuvxnksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmrlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddddddddddddddddddddddddddddd']], [['herienduvxyhi    et a gf hellogmyfienddz'], ['daneajzqrtude    ap w cb dahhkciubeajzzv'], ['livmirhyzbclm    ix e kj lippskqcjmirhhd']], [['hi    et a gf heflbcmhelbcmd&^%lomyfriendd&^%lo cmyfend'], ['de    ap w cb dabhxyidahxyiz&^%hkiubneajzz&^%hk yiubajz'], ['lm    ix e kj lijpfgqlipfgqh&^%psqcjvmirhh&^%ps gqcjirh']], [['gghelbcdworlwxyyd&^thequickbrownfoxjuthequickbromownfoxjumpsoverdogmpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuz&^pdamqeygxnksjbktfqpdamqeygxnkiksjbktfqilokranzkcilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabcch&^xliuymgofvsarjsbnyxliuymgofvsqsarjsbnyqtwszivhskqtwszivxlipedchs%psqcplipps']], [['hellogmyfrithequiend&^%lomhi s   et a gf helbcmd&^%lo myfriendfriend'], ['dahhkciubnepdamqeajz&^%hkide o   ap w cb dahxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmxliuymirh&^%psqlm w   ix e kj lipfgqh&^%ps qcjvmirhjvmirh']], [['ywxytheqcuickbrownfoxjumpsoverthelazydog'], ['ustupdamyqeygxnksjbktfqilokranpdahwvuzkc'], ['cabcxliugymgofvsarjsbnyqtwszivxlipedchsk']], [['hellogfa wetoorld'], ['dahhkcbw sapkknhz'], ['lippskje aixssvph']], [['bcbcmd&^%lobc&^%'], ['xyxyiz&^%hkxy&^%'], ['fgfgqh&^%psfg&^%']], [['theqcuickabcdefghihjklmehellotnfoxjumpsoverthoelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghiadahhkpjbktfqilokranpdkahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqilippsxrjsbnyqtwszivxlsiplippskqcjvmirhedchsk']], [['abcdyzzefghijklmnopqrsthhelbcdhii    ehellot a gnduvxyz'], ['wxyzuvvabcdefghijklmnopddahxyzdee    adahhkp w cjzqrtuv'], ['efghcddijklmnopqrstuvwxllipfghlmm    ilippsx e krhyzbcd']], [['gnduvxyz%bcdhelwxyl%'], ['cjzqrtuv%xyzdahstuh%'], ['krhyzbcd%fghlipabcp%']], [['r'], ['n'], ['v']], [['hi    et a gf helbcd&^%lomy fiend'], ['de    ap w cb dahxyz&^%hkiu beajz'], ['lm    ix e kj lipfgh&^%psqc jmirh']], [['bc&thequicertthelazydhellog^%'], ['xy&pdamqeyanppdahwvuzdahhkc^%'], ['fg&xliuymgivxxlipedchlippsk^%']], [['ob%'], ['kx%'], ['sf%']], [['%%bc^d&hellogfa worwethorld^%'], ['%%xy^z&dahhkcbw sknsapdknhz^%'], ['%%fg^h&lippskje asvaixlsvph^%']], [['wxabcdefghijklmnopqrstuhi    et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['stwxyzabcdefghijklmnopqde    ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['abefghijklmnopqrstuvwxylm    ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['gfhello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzds'], ['cbdahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvzo'], ['kjlipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdhw']], [['hi    et a gftheqkbrowfnfoxydo helbcmhelbcmd&^%lomyfiriendd&^%lo myfrd'], ['de    ap w cbpdamgxnksbjbktuzk dahxyidahxyiz&^%hkiubeneajzz&^%hk iubnz'], ['lm    ix e kjxliuofvsajrjsbchs lipfgqlipfgqh&^%psqcjmvmirhh&^%ps qcjvh']], [['ehebc&^hello%'], ['adaxy&^dahhk%'], ['ilifg&^lipps%']], [['abcdyzzefghijklmnopqrsthi    ehellot ahellhi gnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp wdahhde cjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx elipplm krhyzbcd']], [['hellogmyfienid'], ['dahhkciubeajez'], ['lippskqcjmirmh']], [['hhelelooywxy'], ['ddahahkkustu'], ['llipipsscabc']], [['hellthequiuckbrownfoxjumpsoverthelazydoaaogfa worl d'], ['dahhpdamqeqygxnksjbktfqilokranpdahwvuzkwwkcbw sknh z'], ['lippxliuymygofvsarjsbnyqtwszivxlipedchseeskje asvp h']], [['fgyzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzzf'], ['bcuvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvvb'], ['jkcdcdddddlippsddddddddddddddddddddddddddddj']], [['thequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfo'], ['pdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbk'], ['xliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjs']], [['hi    et a gf helbcdhi    et a gf helylogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzde    ap w cb dahuhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlm    ix e kj lipcpskqcjvmirh&^%psqcjvmirh']], [['bcdd&^%%'], ['xyzz&^%%'], ['fghh&^%%']], [['%bob%cd&^%'], ['%xkx%yz&^%'], ['%fsf%gh&^%']], [['hi    et  ah gf helbcmld&^%lo myfriend'], ['de    ap  wd cb dahxyihz&^%hk iubneajz'], ['lm    ix  el kj lipfgqph&^%ps qcjvmirh']], [['hi r  et a gf helbcmd&^% lomyfriend'], ['de n  ap w cb dahxyiz&^% hkiubneajz'], ['lm v  ix e kj lipfgqh&^% psqcjvmirh']], [['bc&^%thequicerthelazydoghelbcmd&^%lobc&^yzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzz%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&^%hkxy&^uvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvv%'], ['fg&^%xliuymgivxlipedchsklipfgqh&^%psfg&^cdcdddddlippsdddddddddddddddddddddddddddd%']], [['hellogmyfrithequickbromwnfoxjumpsoverthelazylbcmd&^%lo myfriendfriend'], ['dahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuhxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedcpfgqh&^%ps qcjvmirhjvmirh']], [['hi    ehellott a gf hellogmyfrielnd'], ['de    adahhkpp w cb dahhkciubneahjz'], ['lm    ilippsxx e kj lippskqcjvmiprh']], [['worlwxdgf%b^c^d&^%'], ['sknhstzcb%x^y^z&^%'], ['asvpabhkj%f^g^h&^%']], [['hhelelooywxys'], ['ddahahkkustuo'], ['llipipsscabcw']], [['booc&^hello%'], ['xkky&^dahhk%'], ['fssg&^lipps%']], [['hellogmyfriend&^%lomyfrithequickbrownfoxjumpsovworwethorlderthelazydf'], ['dahhkciubneajz&^%hkiubnepdamqeygxnksjbktfqilokrsknsapdknhzanpdahwvuzb'], ['lippskqcjvmirh&^%psqcjvmxliuymgofvsarjsbnyqtwszasvaixlsvphivxlipedchj']], [['bc&^%thequicertwethorldwnfoxjumpsoverdoghelazydogmd&&abc&^%'], ['xy&^%pdamqeyanpsapdknhzsjbktfqilokranzkcdahwvuzkciz&&wxy&^%'], ['fg&^%xliuymgivxaixlsvpharjsbnyqtwszivhsklipedchskqh&&efg&^%']], [['thequtickborobc&thequicertthelazydg^%wnfoxydo'], ['pdamqpeygxknkxy&pdamqeyanppdahwvuzc^%sjbktuzk'], ['xliuyxmgofsvsfg&xliuymgivxxlipedchk^%arjsbchs']], [['bc&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['xy&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['fg&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']], [['hellogmyfthequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfoiend'], ['dahhkciubpdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbkeajz'], ['lippskqcjxliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjsmirh']], [['thequicetazydog'], ['pdamqeyapwvuzkc'], ['xliuymgixedchsk']], [['hellogmyfrriend&^%lomyfriendgf'], ['dahhkciubnneajz&^%hkiubneajzcb'], ['lippskqcjvvmirh&^%psqcjvmirhkj']], [['woretaahorld'], ['sknapwwdknhz'], ['asvixeelsvph']], [['ld'], ['hz'], ['ph']], [['helelooywxyhi    eiend'], ['dahahkkustude    aeajz'], ['lipipsscabclm    imirh']], [['woretarahorld'], ['sknapwnwdknhz'], ['asvixevelsvph']], [['bcdd&^d%'], ['xyzz&^z%'], ['fghh&^h%']], [['gghelbcdworlwxyybrownfoxjumpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuxnksjbktfqilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabccfvsarjsbnyqtwszivxlipedchs%psqcplipps']], [['whellomyfrienduvxyhelbcthequickbrownfoxbcdd&^%ydoyrlwxyyd'], ['sdahhkiubneajzqrtudahxypdamqeygxnksjbktxyzz&^%uzkunhstuuz'], ['alippsqcjvmirhyzbclipfgxliuymgofvsarjsbfghh&^%chscvpabcch']], [['wethorldwnfoxjumpsoverdog'], ['sapdknhzsjbktfqilokranzkc'], ['aixlsvpharjsbnyqtwszivhsk']], [['etabcdefghijklhellogfa'], ['apwxyzabcdefghdahhkcbw'], ['ixefghijklmnoplippskje']], [['hi    et sa gf helbcdhi    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap ow cb dahxyzde    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix we kj lipfghlm    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['thequicwkbrthequicerthelazydogownofoxjumpszytdo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilovupzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwdcxhs']], [['theqcuickabcdefghihjklmno%bcdhethequieceurtthelazydogydog'], ['pdamyqeygwxyzabcdedfghijk%xyzdapdamqeayaqnppdahwvuzkcuzkc'], ['xliugymgoefghijklmlnopqrs%fghlixliuymigiyvxxlipedchskchsk']], [['ahellhi'], ['wdahhde'], ['elipplm']], [['hi    et a gf helleomyfriened'], ['de    ap w cb dahhakiubneajaz'], ['lm    ix e kj lippisqcjvmirih']], [['hi    et a g'], ['de    ap w c'], ['lm    ix e k']], [['helbcmd&^%l'], ['dahxyiz&^%h'], ['lipfgqh&^%p']], [['helbc%bc^d&^%d&^%lomworwethorld^%y'], ['dahxy%xy^z&^%z&^%hkisknsapdknhz^%u'], ['lipfg%fg^h&^%h&^%psqasvaixlsvph^%c']], [['rgfhello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzds'], ['ncbdahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvzo'], ['vkjlipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdhw']], [['myfedamnopqrstrhind'], ['iubazwijklmnopndejz'], ['qcjiheqrstuvwxvlmrh']], [['abcdefghijklmnopqrstuvxyo%bcdhelwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyzdahstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghlipabcps&^%d']], [['hi    e g'], ['de    a c'], ['lm    i k']], [['ahelthequickbrownfoxydolhi'], ['wdahpdamqeygxnksjbktuzkhde'], ['elipxliuymgofvsarjsbchsplm']], [['thequicerthequcekbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuygiofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['bc&^%thequicyxwxyeroswnfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyutstuankosjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgcbabcivswarjsbnyqtwszivxlipedchs&^%']], [['bchi r  et a gf helbcmd&^% lomyfriend&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['xyde n  ap w cb dahxyiz&^% hkiubneajz&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['fglm v  ix e kj lipfgqh&^% psqcjvmirh&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']], [['worlafbcdefghijklhellogfa'], ['sknhwbxyzabcdefghdahhkcbw'], ['asvpejfghijklmnoplippskje']], [['ghellogmyfrithequickbromwnfoxjumpsoverthelazylbcmd&^%lofs'], ['cdahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuhxyiz&^%hkbo'], ['klippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedcpfgqh&^%psjw']], [['heflbklmnopqrsthilomyfriend'], ['dabhxghijklmnopdehkiubneajz'], ['lijpfopqrstuvwxlmpsqcjvmirh']], [['abcdyzzefghijklmnopqrsthi    ehellot a gnd'], ['wxyzuvvabcdefghijklmnopde    adahhkp w cjz'], ['efghcddijklmnopqrstuvwxlm    ilippsx e krh']], [['heyzzzbcdhibc&^%'], ['dauvvvxyzdexy&^%'], ['licdddfghlmfg&^%']], [['yzyyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdccdddddddddddddddddddddddddddddddddd']], [['abcdefghijklmnopqrstuvxyo%bcdhelhellogfa wetorldwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyzdahdahhkcbw sapknhzstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghliplippskje aixsvphabcps&^%d']], [['%%bdc^d&^%'], ['%%xzy^z&^%'], ['%%fhg^h&^%']], [['helbcmlld'], ['dahxyihhz'], ['lipfgqpph']], [['myfrieendvwxyz'], ['iubneaajzrstuv'], ['qcjvmiirhzabcd']], [['bc&thequricertthelazydog^%'], ['xy&pdamqneyanppdahwvuzkc^%'], ['fg&xliuyvmgivxxlipedchsk^%']], [['bc&^%thequicehwellogfa wethorldhelazydogbc&^%'], ['xy&^%pdamqeyadsahhkcbw sapdknhzdahwvuzkcxy&^%'], ['fg&^%xliuymgilaippskje aixlsvphlipedchskfg&^%']], [['hi    et a gf helbcd&^%lomy yfriend'], ['de    ap w cb dahxyz&^%hkiu ubneajz'], ['lm    ix e kj lipfgh&^%psqc cjvmirh']], [['hi    et a gf helbcmd&^%lo myfrhellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfririendiend'], ['de    ap w cb dahxyiz&^%hk iubndahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneneajzeajz'], ['lm    ix e kj lipfgqh&^%ps qcjvlippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmvmirhmirh']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzmyfriend^heo%zzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvviubneajz^dak%vvvvv'], ['cdcdddddddddddddddddddddddddddqcjvmirh^lis%ddddd']], [['thehelbc%bc^d&^%d&^%lomyquicerpsoverthelazydogthelazydog'], ['pdadahxy%xy^z&^%z&^%hkiumqeyanlokranpdahwvuzkcpdahwvuzkc'], ['xlilipfg%fg^h&^%h&^%psqcuymgivtwszivxlipedchskxlipedchsk']], [['eeheabcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzo'], ['aadawxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvk'], ['iiliefghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcds']], [['helylogmyfriend&^%lomyfriend'], ['dahuhkciubneajz&^%hkiubneajz'], ['lipcpskqcjvmirh&^%psqcjvmirh']], [['theqfkbrowfnfoxydo'], ['pdambgxnksbjbktuzk'], ['xliujofvsajrjsbchs']], [['eello'], ['aahhk'], ['iipps']], [['bc&threquicertthelazydhellog^%'], ['xy&pdnamqeyanppdahwvuzdahhkc^%'], ['fg&xlviuymgivxxlipedchlippsk^%']], [['hi    et a gf hiend'], ['de    ap w cb deajz'], ['lm    ix e kj lmirh']], [['hellond'], ['dahhkjz'], ['lippsrh']], [['hi    etg^f helbcmld'], ['de    apc^b dahxyihz'], ['lm    ixk^j lipfgqph']], [['yzzzzob%zzzzzzzzzzzzzzzzzzzzz'], ['uvvvvkx%vvvvvvvvvvvvvvvvvvvvv'], ['cddddsf%ddddddddddddddddddddd']], [['abcdefghijklmnopqrstuhi'], ['wxyzabcdefghijklmnopqde'], ['efghijklmnopqrstuvwxylm']], [['hi r   et a gf helbcmd&^%lomyfiend'], ['de n   ap w cb dahxyiz&^%hkiubeajz'], ['lm v   ix e kj lipfgqh&^%psqcjmirh']], [['hi r  et helelooa gf helbcmd&^%lomyfriend'], ['de n  ap dahahkkw cb dahxyiz&^%hkiubneajz'], ['lm v  ix lipipsse kj lipfgqh&^%psqcjvmirh']], [['hellomyfrienduvxyzo'], ['dahhkiubneajzqrtuvk'], ['lippsqcjvmirhyzbcds']], [['myhi    et a gf heflbcmhelbcmd&^%lomyfriendd&^%lo cmyfendfriendvwxyz'], ['iude    ap w cb dabhxyidahxyiz&^%hkiubneajzz&^%hk yiubajzbneajzrstuv'], ['qclm    ix e kj lijpfgqlipfgqh&^%psqcjvmirhh&^%ps gqcjirhjvmirhzabcd']], [['thequicwkbrthequicerthelazydogownofoxjheleloompszydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfdahahkkilovuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnlipipssqtwdchs']], [['hielbecmd&^%loomyfriend'], ['deahxayiz&^%hkkiubneajz'], ['lmipfigqh&^%pssqcjvmirh']], [['orlwxyyd'], ['knhstuuz'], ['svpabcch']], [['hello oworrld'], ['dahhk ksknnhz'], ['lipps sasvvph']], [['ggfgf'], ['ccbcb'], ['kkjkj']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzhellogmyfriend&^%lomhizzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvdahhkciubneajz&^%hkidevvvvvvvvvvv'], ['cdcdddddddddddddddddddddddlippskqcjvmirh&^%psqlmddddddddddd']], [['gabcdefghijklmnopqrstuvxyfo%bcdhelhellogfagfgf'], ['cwxyzabcdefghijklmnopqrtubk%xyzdahdahhkcbwcbcb'], ['kefghijklmnopqrstuvwxyzbcjs%fghliplippskjekjkj']], [['gf%^b^c^d&^%'], ['cb%^x^y^z&^%'], ['kj%^f^g^h&^%']], [['thequhelbcmld&i^%loicerthelazy%doag'], ['pdamqdahxyihz&e^%hkeyanpdahwvu%zkwc'], ['xliuylipfgqph&m^%psmgivxlipedc%hsek']], [['hellogymyfriend&^%lomyfriendgthequickbrthequicerthelazydogownfoxjumpsoverthelazydof'], ['dahhkcuiubneajz&^%hkiubneajzcpdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokranpdahwvuzkb'], ['lippskcqcjvmirh&^%psqcjvmirhkxliuymgofvxliuymgivxlipedchsksarjsbnyqtwszivxlipedchsj']], [['abcdetuvxyz'], ['wxyzapqrtuv'], ['efghixyzbcd']], [['hhillogfaell%b^c^d&^d%o'], ['ddehhkcbwahh%x^y^z&^z%k'], ['llmppskjeipp%f^g^h&^h%s']], [['bc&^%uthequicertdhelazydohigheblbcmd&^%lobc&^%'], ['xy&^%qpdamqeyanpzdahwvuzkdecdaxhxyiz&^%hkxy&^%'], ['fg&^%yxliuymgivxhlipedchslmklifpfgqh&^%psfg&^%']], [['rworl'], ['nsknh'], ['vasvp']], [['hellogymyfriend&^%lomyfrriendgf'], ['dahhkcuiubneajz&^%hkiubnneajzcb'], ['lippskcqcjvmirh&^%psqcjvvmirhkj']], [['heflbcmhelbcmd&^%lomyfriendd&^%lo'], ['dabhxyidahxyiz&^%hkiubneajzz&^%hk'], ['lijpfgqlipfgqh&^%psqcjvmirhh&^%ps']], [['bb'], ['xx'], ['ff']], [['worlafbcdefghhelbcmd&^%lomyfriendijklhellogfa'], ['sknhwbxyzabcddahxyiz&^%hkiubneajzefghdahhkcbw'], ['asvpejfghijkllipfgqh&^%psqcjvmirhmnoplippskje']], [['athequicwkbrthequicerthelazydogaownofoxjumpsoverthelazydo'], ['wpdamqeysgxnpdamqeyanpdahwvuzkcwksjkbktfqilokranpdahwvuzk'], ['exliuymgaofvxliuymgivxlipedchskesarsjsbnyqtwszivxlipedchs']], [['ahellogfa'], ['wdahhkcbw'], ['elippskje']], [['hi    et aa gf helbcmhelbcmd&^%lomyfriendd&^%lo myfriend'], ['de    ap ww cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubneajz'], ['lm    ix ee kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjvmirh']], [['worwethorld^%'], ['sknsapdknhz^%'], ['asvaixlsvph^%']], [['hhehi    etabcdefghijklhellogfa  a g^f helbcmldlelooywxys'], ['ddade    apwxyzabcdefghdahhkcbw  w c^b dahxyihzhahkkustuo'], ['llilm    ixefghijklmnoplippskje  e k^j lipfgqphpipsscabcw']], [['g^f'], ['c^b'], ['k^j']], [['abcdefghijklmnopqrstuhi     et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde     ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm     ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['thequickbrthequicqerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeymanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymguivxlipedchsksarjsbnyqtwszipedchs']], [['worlafbcdefghijklhellheyzzzbcdhibc&^%ogfa'], ['sknhwbxyzabcdefghdahhdauvvvxyzdexy&^%kcbw'], ['asvpejfghijklmnoplipplicdddfghlmfg&^%skje']], [['abcdyzzefghijklmnopqrsthi'], ['wxyzuvvabcdefghijklmnopde'], ['efghcddijklmnopqrstuvwxlm']], [['hi%%bc^d&hellogfa worwetbc&thequricertthelazydog^%horld^%'], ['de%%xy^z&dahhkcbw sknsapxy&pdamqneyanppdahwvuzkc^%dknhz^%'], ['lm%%fg^h&lippskje asvaixfg&xliuyvmgivxxlipedchsk^%lsvph^%']], [['o%bcdhe&^%'], ['k%xyzda&^%'], ['s%fghli&^%']], [['%bdcthkbrvownfoxjumpsoverthelazydod&^%'], ['%xzypdgxnrksjbktfqilokranpdahwvuzkz&^%'], ['%fhgxlofvzsarjsbnyqtwszivxlipedchsh&^%']], [['hmyfriendfyfriendelgflo'], ['diubneajzbubneajzahcbhk'], ['lqcjvmirhjcjvmirhipkjps']], [['thequhellogmyfthequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfoiendrtazydog'], ['pdamqdahhkciubpdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbkeajznpwvuzkc'], ['xliuylippskqcjxliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjsmirhvxedchsk']], [['theqcuickbrownfoxjumpsoverthbc&^%thequicerthela^zydoghelbcmd&&^%lobc&^%og'], ['pdamyqeygxnksjbktfqilokranpdxy&^%pdamqeyanpdahw^vuzkcdahxyiz&&^%hkxy&^%kc'], ['xliugymgofvsarjsbnyqtwszivxlfg&^%xliuymgivxlipe^dchsklipfgqh&&^%psfg&^%sk']], [['thequickbrownfoxjumpsovertheloazydfo'], ['pdamqeygxnksjbktfqilokranpdahkwvuzbk'], ['xliuymgofvsarjsbnyqtwszivxlipsedchjs']], [['yzzzz'], ['uvvvv'], ['cdddd']], [['bcddd&^%'], ['xyzzz&^%'], ['fghhh&^%']], [['worwetbc&thequricertthelazydog^%horld^%'], ['sknsapxy&pdamqneyanppdahwvuzkc^%dknhz^%'], ['asvaixfg&xliuyvmgivxxlipedchsk^%lsvph^%']], [['hellogfatoorld'], ['dahhkcbwpkknhz'], ['lippskjexssvph']], [['theqcuickbrownfoxjumheleloopsooverthelazbydog'], ['pdamyqeygxnksjbktfqidahahkklokkranpdahwvxuzkc'], ['xliugymgofvsarjsbnyqlipipsstwsszivxlipedfchsk']], [['hi    et a gf hethequickborownfoxydolbcd&^%lomyfriend'], ['de    ap w cb dapdamqeygxknksjbktuzkhxyz&^%hkiubneajz'], ['lm    ix e kj lixliuymgofsvsarjsbchspfgh&^%psqcjvmirh']], [['woworwethorlldrwlwxd'], ['sksknsapdknhhznshstz'], ['asasvaixlsvpphvapabh']], [['theqcrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamynksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['heflbklmnopqrsthilomyfrien'], ['dabhxghijklmnopdehkiubneaj'], ['lijpfopqrstuvwxlmpsqcjvmir']], [['hi    ehellot a gf helahelthequickbrownfoxydolhilogmyfriend'], ['de    adahhkp w cb dahwdahpdamqeygxnksjbktuzkhdehkciubneajz'], ['lm    ilippsx e kj lipelipxliuymgofvsarjsbchsplmpskqcjvmirh']], [['helbcml'], ['dahxyih'], ['lipfgqp']], [['hellogmyfriithequiend&^%lomhi'], ['dahhkciubneepdamqeajz&^%hkide'], ['lippskqcjvmmxliuymirh&^%psqlm']], [['helbc%bc^d&^%d&^%lommworwethorld^%y'], ['dahxy%xy^z&^%z&^%hkiisknsapdknhz^%u'], ['lipfg%fg^h&^%h&^%psqqasvaixlsvph^%c']], [['wxabcdefghijklmnopqrstuhi'], ['stwxyzabcdefghijklmnopqde'], ['abefghijklmnopqrstuvwxylm']], [['afbcdefghijklhellogfa xyz'], ['wbxyzabcdefghdahhkcbw tuv'], ['ejfghijklmnoplippskje bcd']], [['abcdefghijklhellogfa'], ['wxyzabcdefghdahhkcbw'], ['efghijklmnoplippskje']], [['hwelhellogfa wethorldlogfa wethorldd'], ['dsahdahhkcbw sapdknhzhkcbw sapdknhzz'], ['laiplippskje aixlsvphpskje aixlsvphh']], [['bc&^%thequicerth^elazydogbc&^%'], ['xy&^%pdamqeyanpd^ahwvuzkcxy&^%'], ['fg&^%xliuymgivxl^ipedchskfg&^%']], [['h ello oworrld'], ['d ahhk ksknnhz'], ['l ipps sasvvph']], [['ggherthelazydou%lomylhello'], ['ccdanpdahwvuzkq%hkiuhdahhk'], ['kklivxlipedchsy%psqcplipps']], [['%bcdhelwxyl&o&^%'], ['%xyzdahstuh&k&^%'], ['%fghlipabcp&s&^%']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzztheqcuickabcdefghihjklmnopqrstuvxyzbrownfoxjumpsoverthelhellzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvpdamyqeygwxyzabcdedfghijklmnopqrtuvxnksjbktfqilokranpdahdahhvv'], ['cdcdddddddddddddddddddddddddddddxliugymgoefghijklmlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippdd']], [['abacdefghijklmnopqrstuvwxyz'], ['wxwyzabcdefghijklmnopqrstuv'], ['efeghijklmnopqrstuvwxyzabcd']], [['thequickbrownftheqcuickabcdefghihjklmno%bcdhethequieceurtthelazydogydogoxjumpsoverthelazyd'], ['pdamqeygxnksjbpdamyqeygwxyzabcdedfghijk%xyzdapdamqeayaqnppdahwvuzkcuzkcktfqilokranpdahwvuz'], ['xliuymgofvsarjxliugymgoefghijklmlnopqrs%fghlixliuymigiyvxxlipedchskchsksbnyqtwszivxlipedch']], [['thheflbcmhelbcmd&^%lomyfriendd&^%louiceurtazydog'], ['pddabhxyidahxyiz&^%hkiubneajzz&^%hkqeyaqnpwvuzkc'], ['xllijpfgqlipfgqh&^%psqcjvmirhh&^%psymgiyvxedchsk']], [['abcdefghijklmnopqrstuvxyo%bcdxhelwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyztdahstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghblipabcps&^%d']], [['hefmnopqrsthilomyfrien'], ['dabijklmnopdehkiubneaj'], ['lijqrstuvwxlmpsqcjvmir']], [['zyzzz'], ['vuvvv'], ['dcddd']], [['lomyfriend&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['hkiubneajz&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['psqcjvmirh&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']]], [[['hi'], ['de'], ['lm']], [['asdfghjkl'], ['wozbcdfgh'], ['ewhjklnop']], [['gf'], ['cb'], ['kj']], [['et'], ['ap'], ['ix']], [['faewfawefaewg'], ['bwasbwsabwasc'], ['jeiajeaijeiak']], [['hellomyfriend'], ['dahhkiubneajz'], ['lippsqcjvmirh']], [['dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'], ['ztvzhijehbqdiehqbdhedqbjiheijqbdheijqbdbqyqbd'], ['hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl']], [['a'], ['w'], ['e']], [['abcde'], ['wxyza'], ['efghi']], [['uvwxyz'], ['qrstuv'], ['yzabcd']], [['test123'], ['paop123'], ['xiwx123']], [['1a2b3c'], ['1w2x3y'], ['1e2f3g']], [['hello world'], ['dahhk sknhz'], ['lipps asvph']], [['monitor'], ['ikjepkn'], ['qsrmxsv']], [['abc'], ['wxy'], ['efg']], [['kmt'], ['gip'], ['oqx']], [['park'], ['lwng'], ['tevo']], [['mtkmt'], ['ipgip'], ['qxoqx']], [['testpark123'], ['paoplwng123'], ['xiwxtevo123']], [['uvuvwxyzwxyz'], ['qrqrstuvstuv'], ['yzyzabcdabcd']], [['abcdetest123'], ['wxyzapaop123'], ['efghixiwx123']], [['testpark1233'], ['paoplwng1233'], ['xiwxtevo1233']], [['parrte1a2b3cstpark123'], ['lwnnpa1w2x3yoplwng123'], ['tevvxi1e2f3gwxtevo123']], [['pamonitork'], ['lwikjepkng'], ['teqsrmxsvo']], [['uvwabcxyuz'], ['qrswxytuqv'], ['yzaefgbcyd']], [['uvuvwxyzwxz'], ['qrqrstuvstv'], ['yzyzabcdabd']], [['t'], ['p'], ['x']], [['uvz'], ['qrv'], ['yzd']], [['kuvz'], ['gqrv'], ['oyzd']], [['kkuvz'], ['ggqrv'], ['ooyzd']], [['abct'], ['wxyp'], ['efgx']], [['tes2tpark1233'], ['pao2plwng1233'], ['xiw2xtevo1233']], [['at'], ['wp'], ['ex']], [['tkmtkmtuvwabcxyuzmt'], ['pgipgipqrswxytuqvip'], ['xoqxoqxyzaefgbcydqx']], [['uvuvwxyzwxzyz'], ['qrqrstuvstvuv'], ['yzyzabcdabdcd']], [['tkmtkmtuvwabuvuvwxyzwxzcxyuzmt'], ['pgipgipqrswxqrqrstuvstvytuqvip'], ['xoqxoqxyzaefyzyzabcdabdgbcydqx']], [['tsest123'], ['poaop123'], ['xwiwx123']], [['uvutvwxyzwxzyz'], ['qrqprstuvstvuv'], ['yzyxzabcdabdcd']], [['uvwparrkxyz'], ['qrslwnngtuv'], ['yzatevvobcd']], [['tsest123aparrte1a2b3cstpark123'], ['poaop123wlwnnpa1w2x3yoplwng123'], ['xwiwx123etevvxi1e2f3gwxtevo123']], [['abctabcde'], ['wxypwxyza'], ['efgxefghi']], [['tes2testpark123tpark1233'], ['pao2paoplwng123plwng1233'], ['xiw2xiwxtevo123xtevo1233']], [['uvwabbczxyuz'], ['qrswxxyvtuqv'], ['yzaeffgdbcyd']], [['uvvz'], ['qrrv'], ['yzzd']], [['tsest123aparrte1a2b3cstpatrk123'], ['poaop123wlwnnpa1w2x3yoplwpng123'], ['xwiwx123etevvxi1e2f3gwxtexvo123']], [['paabctak'], ['lwwxypwg'], ['teefgxeo']], [['zz'], ['vv'], ['dd']], [['pararte1a2b3cstpark123'], ['lwnwnpa1w2x3yoplwng123'], ['tevevxi1e2f3gwxtevo123']], [['pamonintork'], ['lwikjejpkng'], ['teqsrmrxsvo']], [['uvutvwxyzwxzyzabckuvz'], ['qrqprstuvstvuvwxygqrv'], ['yzyxzabcdabdcdefgoyzd']], [['uvutvwzzxyzwxzyz'], ['qrqprsvvtuvstvuv'], ['yzyxzaddbcdabdcd']], [['tabcdtabcde'], ['pwxyzpwxyza'], ['xefghxefghi']], [['uvwxwyz'], ['qrstsuv'], ['yzabacd']], [['aabcde'], ['wwxyza'], ['eefghi']], [['cpararte1a2b3cstpark1abct23'], ['ylwnwnpa1w2x3yoplwng1wxyp23'], ['gtevevxi1e2f3gwxtevo1efgx23']], [['tse3st23'], ['poa3op23'], ['xwi3wx23']], [['mtuvwxyzkmt'], ['ipqrstuvgip'], ['qxyzabcdoqx']], [['tsest123aparrte1a2b3cstapark123'], ['poaop123wlwnnpa1w2x3yopwlwng123'], ['xwiwx123etevvxi1e2f3gwxetevo123']], [['cpaararuvvzte1a2b3cstpark1abct23'], ['ylwwnwnqrrvpa1w2x3yoplwng1wxyp23'], ['gteevevyzzdxi1e2f3gwxtevo1efgx23']], [['tse32st23'], ['poa32op23'], ['xwi32wx23']], [['uvutvwxyzwxzyzabckumtkmtvz'], ['qrqprstuvstvuvwxygqipgiprv'], ['yzyxzabcdabdcdefgoyqxoqxzd']], [['uvwaubcxyuz'], ['qrswqxytuqv'], ['yzaeyfgbcyd']], [['abuvutvwxyzwxzyzabckuvzct'], ['wxqrqprstuvstvuvwxygqrvyp'], ['efyzyxzabcdabdcdefgoyzdgx']], [['tes2testppark1233'], ['pao2paopllwng1233'], ['xiw2xiwxttevo1233']], [['uvwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz'], ['qrstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv'], ['yzabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad']], [['xuvuvwxyzwxzyz'], ['tqrqrstuvstvuv'], ['byzyzabcdabdcd']], [['wuvwxyz'], ['sqrstuv'], ['ayzabcd']], [['aabdcde'], ['wwxzyza'], ['eefhghi']], [['uvwxyzwxyz'], ['qrstuvstuv'], ['yzabcdabcd']], [['cpararte1a2b3cstpark1abctuvwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz23'], ['ylwnwnpa1w2x3yoplwng1wxypqrstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv23'], ['gtevevxi1e2f3gwxtevo1efgxyzabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad23']], [['tkumtkmtuvwabuvuvwxyzwxzcxyuzmt'], ['pgqipgipqrswxqrqrstuvstvytuqvip'], ['xoyqxoqxyzaefyzyzabcdabdgbcydqx']], [['uvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywz'], ['qrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusv'], ['yzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcad']], [['wuvwxyzz'], ['sqrstuvv'], ['ayzabcdd']], [['xzyzabckumtkmtvz'], ['tvuvwxygqipgiprv'], ['bdcdefgoyqxoqxzd']], [['zzz'], ['vvv'], ['ddd']], [['ts2e3st23'], ['po2a3op23'], ['xw2i3wx23']], [['uvzmonitorz'], ['qrvikjepknv'], ['yzdqsrmxsvd']], [['t3se3'], ['p3oa3'], ['x3wi3']], [['uvutvwzzxz'], ['qrqprsvvtv'], ['yzyxzaddbd']], [['uvuvzwxyzwxz'], ['qrqrvstuvstv'], ['yzyzdabcdabd']], [['cpararteuvwxwyz1a2b3cstpark1abct23'], ['ylwnwnpaqrstsuv1w2x3yoplwng1wxyp23'], ['gtevevxiyzabacd1e2f3gwxtevo1efgx23']], [['stsest123'], ['opoaop123'], ['wxwiwx123']], [['tsest123aparrte1a2b3cstapark1213'], ['poaop123wlwnnpa1w2x3yopwlwng1213'], ['xwiwx123etevvxi1e2f3gwxetevo1213']], [['uvutvwvxyzwxzuvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywz'], ['qrqprsrtuvstvqrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusv'], ['yzyxzazbcdabdyzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcad']], [['kparrte1a2b3cstpark123'], ['glwnnpa1w2x3yoplwng123'], ['otevvxi1e2f3gwxtevo123']], [['pamonintorkpamonitoork'], ['lwikjejpknglwikjepkkng'], ['teqsrmrxsvoteqsrmxssvo']], [['tsestcpararte1a2b3cstpark1abct23123apa3'], ['poaopylwnwnpa1w2x3yoplwng1wxyp23123wlw3'], ['xwiwxgtevevxi1e2f3gwxtevo1efgx23123ete3']], [['abctest123'], ['wxypaop123'], ['efgxiwx123']], [['xzyzauvwxyzwxyzbckumtzkmtvz'], ['tvuvwqrstuvstuvxygqipvgiprv'], ['bdcdeyzabcdabcdfgoyqxdoqxzd']], [['1testpark1233'], ['1paoplwng1233'], ['1xiwxtevo1233']], [['tse32st233'], ['poa32op233'], ['xwi32wx233']], [['testtpark'], ['paopplwng'], ['xiwxxtevo']], [['abuvutvwxystsest123zwxzyzabckuvzct'], ['wxqrqprstuopoaop123vstvuvwxygqrvyp'], ['efyzyxzabcwxwiwx123dabdcdefgoyzdgx']], [['kmuvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywzt'], ['giqrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusvp'], ['oqyzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcadx']], [['xzyzabckumtkmtvzz'], ['tvuvwxygqipgiprvv'], ['bdcdefgoyqxoqxzdd']], [['uvuvwxyzzyzpamonitork'], ['qrqrstuvvuvlwikjepkng'], ['yzyzabcddcdteqsrmxsvo']], [['ut3se3vwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz'], ['qp3oa3rstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv'], ['yx3wi3zabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad']], [['abuvutvwxyzwxvzyzabckuvzct'], ['wxqrqprstuvstrvuvwxygqrvyp'], ['efyzyxzabcdabzdcdefgoyzdgx']], [['monitormuvvztkmt'], ['ikjepkniqrrvpgip'], ['qsrmxsvqyzzdxoqx']], [['uvxwpuvuvwxyzwxyzarrkxyz'], ['qrtslqrqrstuvstuvwnngtuv'], ['yzbatyzyzabcdabcdevvobcd']], [['uvwxzwyz'], ['qrstvsuv'], ['yzabdacd']], [['monitomrmuvvztkmt'], ['ikjepkiniqrrvpgip'], ['qsrmxsqvqyzzdxoqx']], [['parrte1a2b3cstpark123uvwabcxyuzuvwaxbbczxyuz'], ['lwnnpa1w2x3yoplwng123qrswxytuqvqrswtxxyvtuqv'], ['tevvxi1e2f3gwxtevo123yzaefgbcydyzaebffgdbcyd']], [['uvutvwxyzwxzyzabckuvzabctest123'], ['qrqprstuvstvuvwxygqrvwxypaop123'], ['yzyxzabcdabdcdefgoyzdefgxiwx123']], [['parkk'], ['lwngg'], ['tevoo']], [['uvwabbcxzxyuz'], ['qrswxxytvtuqv'], ['yzaeffgbdbcyd']], [['parrte1a2b3cst2park123'], ['lwnnpa1w2x3yop2lwng123'], ['tevvxi1e2f3gwx2tevo123']], [['bcd&^%'], ['xyz&^%'], ['fgh&^%']], [['thequickbrownfoxjumpsoverthelazydog'], ['pdamqeygxnksjbktfqilokranpdahwvuzkc'], ['xliuymgofvsarjsbnyqtwszivxlipedchsk']], [['abcdefghijklmnopqrstuvwxyz'], ['wxyzabcdefghijklmnopqrstuv'], ['efghijklmnopqrstuvwxyzabcd']], [['wxy'], ['stu'], ['abc']], [['yzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cddddddddddddddddddddddddd']], [['hi    et a gf hellomyfriend'], ['de    ap w cb dahhkiubneajz'], ['lm    ix e kj lippsqcjvmirh']], [['thequickbrownfoxjumpsoverthelazydo'], ['pdamqeygxnksjbktfqilokranpdahwvuzk'], ['xliuymgofvsarjsbnyqtwszivxlipedchs']], [['hi    et a gf hellomyfrienhellod'], ['de    ap w cb dahhkiubneajdahhkz'], ['lm    ix e kj lippsqcjvmirlippsh']], [['et'], ['ap'], ['ix']], [['hello'], ['dahhk'], ['lipps']], [['wxxy'], ['sttu'], ['abbc']], [['ho'], ['dk'], ['ls']], [['helo'], ['dahk'], ['lips']], [['heti    get a gf hellomyfrienhellod'], ['dape    cap w cb dahhkiubneajdahhkz'], ['lixm    kix e kj lippsqcjvmirlippsh']], [['helothequickbrownfoxjumpsoverthelazydo'], ['dahkpdamqeygxnksjbktfqilokranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwszivxlipedchs']], [['yzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdddddddddddddddddddddddddd']], [['hbcd&^%elo'], ['dxyz&^%ahk'], ['lfgh&^%ips']], [['b&cd&^'], ['x&yz&^'], ['f&gh&^']], [['ythequickbrownfoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszivxlipedchs']], [['hello heloworld'], ['dahhk dahksknhz'], ['lipps lipsasvph']], [['heloworld'], ['dahksknhz'], ['lipsasvph']], [['abcdefghijklmnopqrstuvwxyzythequickbrownfoxjumpsoverthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqilokranpdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqtwszivxlipedchs']], [['hi    et a rgf hellomyfrienhellod'], ['de    ap w ncb dahhkiubneajdahhkz'], ['lm    ix e vkj lippsqcjvmirlippsh']], [['heti    get a gf hellomyferienhellod'], ['dape    cap w cb dahhkiubaneajdahhkz'], ['lixm    kix e kj lippsqcjivmirlippsh']], [['hi    et a gf helloetmyfrienhellod'], ['de    ap w cb dahhkapiubneajdahhkz'], ['lm    ix e kj lippsixqcjvmirlippsh']], [['hi'], ['de'], ['lm']], [['thi    et a gf helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydog'], ['pde    ap w cb dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkc'], ['xlm    ix e kj lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchsk']], [['rgf'], ['ncb'], ['vkj']], [['abcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['helothequickbrownfoxumpsoverthelazydo'], ['dahkpdamqeygxnksjbktqilokranpdahwvuzk'], ['lipsxliuymgofvsarjsbyqtwszivxlipedchs']], [['abcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoe'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsi']], [['helothequickbrownfoxumpsovekrthelazydo'], ['dahkpdamqeygxnksjbktqilokragnpdahwvuzk'], ['lipsxliuymgofvsarjsbyqtwsziovxlipedchs']], [['helothequickbrownfoxjumpsgetoverthelazydo'], ['dahkpdamqeygxnksjbktfqilocapkranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkixszivxlipedchs']], [['hi    et  a gf hellomyfrienhellod'], ['de    ap  w cb dahhkiubneajdahhkz'], ['lm    ix  e kj lippsqcjvmirlippsh']], [['yywxy'], ['uustu'], ['ccabc']], [['ythequickbrownfhi    et a gf hellomyfriendoxjumpsoverthelazydo'], ['updamqeygxnksjbde    ap w cb dahhkiubneajzktfqilokranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lippsqcjvmirhsbnyqtwszivxlipedchs']], [['hi    etrgf hhellomyfrienhellod'], ['de    apncb ddahhkiubneajdahhkz'], ['lm    ixvkj llippsqcjvmirlippsh']], [['hhellomyfrienhellod'], ['ddahhkiubneajdahhkz'], ['llippsqcjvmirlippsh']], [['abcdefghijfklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefbghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnjopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['hellomyfriendoxjumpsoverthelazydo'], ['dahhkiubneajzktfqilokranpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszivxlipedchs']], [['thequickbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['heti    get a gf hellomyfrieonhellod'], ['dape    cap w cb dahhkiubneakjdahhkz'], ['lixm    kix e kj lippsqcjvmisrlippsh']], [['hi    et a gf hellomyfrienhellood'], ['de    ap w cb dahhkiubneajdahhkkz'], ['lm    ix e kj lippsqcjvmirlippssh']], [['yywx'], ['uust'], ['ccab']], [['ythequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['updamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['helowythequickbrownfhiorld'], ['dahksupdamqeygxnksjbdeknhz'], ['lipsacxliuymgofvsarjlmsvph']], [['wxxyy'], ['sttuu'], ['abbcc']], [['hi    let a gf hellomyfriend'], ['de    hap w cb dahhkiubneajz'], ['lm    pix e kj lippsqcjvmirh']], [['yzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdddddddddddddddddddddddd']], [['hhellomyfrinhellod'], ['ddahhkiubnejdahhkz'], ['llippsqcjvmrlippsh']], [['hellomyfrienhellodrownfoxjumpsoverthelazydojumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwszivxlipedchs']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogod'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckz'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchsksh']], [['hi    et a gf hellomyfrie'], ['de    ap w cb dahhkiubnea'], ['lm    ix e kj lippsqcjvmi']], [['ythequickbrownfhi'], ['updamqeygxnksjbde'], ['cxliuymgofvsarjlm']], [['heti    get a gf hellomyfrieonhello d'], ['dape    cap w cb dahhkiubneakjdahhk z'], ['lixm    kix e kj lippsqcjvmisrlipps h']], [['gf'], ['cb'], ['kj']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsibcc']], [['heti    get a mgf hellomyfrienhellod'], ['dape    cap w icb dahhkiubneajdahhkz'], ['lixm    kix e qkj lippsqcjvmirlippsh']], [['hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['eetrgft'], ['aapncbp'], ['iixvkjx']], [['eetrgf'], ['aapncb'], ['iixvkj']], [['hellomyferienhellod'], ['dahhkiubaneajdahhkz'], ['lippsqcjivmirlippsh']], [['b&helothequickbrownfoxjumpsgetoverthelazydocd&^'], ['x&dahkpdamqeygxnksjbktfqilocapkranpdahwvuzkyz&^'], ['f&lipsxliuymgofvsarjsbnyqtwkixszivxlipedchsgh&^']], [['hi    et a gf helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellod'], ['de    ap w cb dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['hi    et a gf hellomyfrienheod'], ['de    ap w cb dahhkiubneajdakz'], ['lm    ix e kj lippsqcjvmirlish']], [['yywxxy'], ['uusttu'], ['ccabbc']], [['helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['ohhellomyfrienhellod'], ['kddahhkiubneajdahhkz'], ['sllippsqcjvmirlippsh']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupmpsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytqtwszivxlipedchsibcc']], [['a'], ['w'], ['e']], [['hello heloworlthequickbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['dahhk dahksknhpdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['lipps lipsasvpxliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['ohhellomyfriend'], ['kddahhkiubneajz'], ['sllippsqcjvmirh']], [['hellomyfrienheod'], ['dahhkiubneajdakz'], ['lippsqcjvmirlish']], [['wolrld'], ['skhnhz'], ['aspvph']], [['hi    et a gf helloetmthelquickbrownfoxjumpsoverthelazydoyfrienhellod'], ['de    ap w cb dahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['heloworlthequickbheti'], ['dahksknhpdamqeygxdape'], ['lipsasvpxliuymgoflixm']], [['ergft'], ['ancbp'], ['ivkjx']], [['hel'], ['dah'], ['lip']], [['tlet'], ['phap'], ['xpix']], [['hi    letheti    get a gf hellomyfrieonhello df hellomyfriend'], ['de    hapdape    cap w cb dahhkiubneakjdahhk zb dahhkiubneajz'], ['lm    pixlixm    kix e kj lippsqcjvmisrlipps hj lippsqcjvmirh']], [['abcdefghijfklmnopeetrgftqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefbghijklaapncbpmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnjopqrstiixvkjxuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['hi    et a rgf hellomyfrienhelb&cd&^lod'], ['de    ap w ncb dahhkiubneajdahx&yz&^hkz'], ['lm    ix e vkj lippsqcjvmirlipf&gh&^psh']], [['hellomyfrienhelb&cd&^lod'], ['dahhkiubneajdahx&yz&^hkz'], ['lippsqcjvmirlipf&gh&^psh']], [['helowythehquickbrownfhhiorld'], ['dahksupdadmqeygxnksjbddeknhz'], ['lipsacxliluymgofvsarjllmsvph']], [['ohhelyfrienhellod'], ['kddahubneajdahhkz'], ['sllipcjvmirlippsh']], [['hi    ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de    ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['bythequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo&cd&d^'], ['xupdamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk&yz&z^'], ['fcxliuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs&gh&h^']], [['hellomyfrienhellod'], ['dahhkiubneajdahhkz'], ['lippsqcjvmirlippsh']], [['hi    et a ohhellomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['eeetrgft'], ['aaapncbp'], ['iiixvkjx']], [['hellomyfriendoxjumpsovelrthelazydo'], ['dahhkiubneajzktfqilokrahnpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszipvxlipedchs']], [['hellomyfrienhellood'], ['dahhkiubneajdahhkkz'], ['lippsqcjvmirlippssh']], [['ythequickbrownfoxthequickbheti'], ['updamqeygxnksjbktpdamqeygxdape'], ['cxliuymgofvsarjsbxliuymgoflixm']], [['hellomyfrietrgf'], ['dahhkiubneapncb'], ['lippsqcjvmixvkj']], [['hellomyfrieonhello'], ['dahhkiubneakjdahhk'], ['lippsqcjvmisrlipps']], [['ehel'], ['adah'], ['ilip']], [['helflomyfrietrgf'], ['dahbhkiubneapncb'], ['lipjpsqcjvmixvkj']], [['hhellyomyfrienhellod'], ['ddahhukiubneajdahhkz'], ['llippcsqcjvmirlippsh']], [['helloetmthelquickbrownfoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['ythehelloetmthelquickbrownfoxjumpsoverthelazydoyienhellodnfhi'], ['updadahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkueajdahhkzjbde'], ['cxlilippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscmirlippshrjlm']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsovierthi'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokreanpde'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszmivxlm']], [['heti    get a gfrieonhello d'], ['dape    cap w cbneakjdahhk z'], ['lixm    kix e kjvmisrlipps h']], [['eeet'], ['aaap'], ['iiix']], [['hi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellod'], ['de    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippsh']], [['hi    et ehia rgf hellomyfrienhellod'], ['de    ap adew ncb dahhkiubneajdahhkz'], ['lm    ix ilme vkj lippsqcjvmirlippsh']], [['let'], ['hap'], ['pix']], [['hellomyfriendoxjumpsovelrathelazydo'], ['dahhkiubneajzktfqilokrahnwpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszipvexlipedchs']], [['hi    et a gf helloetmyfrienhellothequickbhetid'], ['de    ap w cb dahhkapiubneajdahhkpdamqeygxdapez'], ['lm    ix e kj lippsixqcjvmirlippsxliuymgoflixmh']], [['heti    get a mgf hehi    et ehia rgf hellomyfrienhellodllomyfrienhellod'], ['dape    cap w icb dade    ap adew ncb dahhkiubneajdahhkzhhkiubneajdahhkz'], ['lixm    kix e qkj lilm    ix ilme vkj lippsqcjvmirlippshppsqcjvmirlippsh']], [['helloomyfrienheod'], ['dahhkkiubneajdakz'], ['lippssqcjvmirlish']], [['hi   helowythehquickbrownfhhiorld ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de   dahksupdadmqeygxnksjbddeknhz ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm   lipsacxliluymgofvsarjllmsvph ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['hello heloworlthequickbheti    get a gf hellomyfrienhellodrownfoxjumpsothequickbhetiverthelazydo'], ['dahhk dahksknhpdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokpdamqeygxdaperanpdahwvuzk'], ['lipps lipsasvpxliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwsxliuymgoflixmzivxlipedchs']], [['abcdefghijklmnopqrstuvwxyzythequickbrownfoxjumpsoveletthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqilokrahappdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqtwszipixxlipedchs']], [['d'], ['z'], ['h']], [['hi    et a ohhelolomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w kddahkhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e sllipspsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['hellomyfrienhellodllomyfrienhellod'], ['dahhkiubneajdahhkzhhkiubneajdahhkz'], ['lippsqcjvmirlippshppsqcjvmirlippsh']], [['hhelothequickbrownfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksjbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsarjsbyqtwsziovxlipedchs']], [['heti    get a mgf hehi   e et ehia rgf hellomyfrienhellodllomyfrhoienhellod'], ['dape    cap w icb dade   a ap adew ncb dahhkiubneajdahhkzhhkiubndkeajdahhkz'], ['lixm    kix e qkj lilm   i ix ilme vkj lippsqcjvmirlippshppsqcjvlsmirlippsh']], [['helll'], ['dahhh'], ['lippp']], [['helothequickbrownfoxjumpsgetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqilocapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkixszilvxlipedchs']], [['hellthi'], ['dahhpde'], ['lippxlm']], [['hellomyfrrienhelb&cd&^lod'], ['dahhkiubnneajdahx&yz&^hkz'], ['lippsqcjvvmirlipf&gh&^psh']], [['yzzzzzzzzzzzzzzzzzzzzzzzzhel'], ['uvvvvvvvvvvvvvvvvvvvvvvvvdah'], ['cddddddddddddddddddddddddlip']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmirlippsh']], [['hellomyfrieendoxjumpsovelrthelazydo'], ['dahhkiubneaajzktfqilokrahnpdahwvuzk'], ['lippsqcjvmiirhsbnyqtwszipvxlipedchs']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogodoworld'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhz'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchskshsasvph']], [['ythequickbrownfhi    et a gf hellomyfriendoxjumpsojverthelazydo'], ['updamqeygxnksjbde    ap w cb dahhkiubneajzktfqilokfranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lippsqcjvmirhsbnyqtwsnzivxlipedchs']], [['hellomyfrienhellodllomyfrhoienhellod'], ['dahhkiubneajdahhkzhhkiubndkeajdahhkz'], ['lippsqcjvmirlippshppsqcjvlsmirlippsh']], [['woolrld'], ['skkhnhz'], ['asspvph']], [['bcd'], ['xyz'], ['fgh']], [['hellomyfergetienhellod'], ['dahhkiubancapeajdahhkz'], ['lippsqcjivkixmirlippsh']], [['bcdhellomyfrienhelb&cd&^lod'], ['xyzdahhkiubneajdahx&yz&^hkz'], ['fghlippsqcjvmirlipf&gh&^psh']], [['helothequickbrowonfoxumpsovekrthelazydo'], ['dahkpdamqeygxnkskjbktqilokragnpdahwvuzk'], ['lipsxliuymgofvsasrjsbyqtwsziovxlipedchs']], [['hhellomyfriod'], ['ddahhkiubnekz'], ['llippsqcjvmsh']], [['mgf'], ['icb'], ['qkj']], [['etrf'], ['apnb'], ['ixvj']], [['helhi'], ['dahde'], ['liplm']], [['bcd&%'], ['xyz&%'], ['fgh&%']], [['hhi    et a ohhellomyfrienhellodrgf hellomyfrienhellodellomyfrienhellood'], ['dde    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkzahhkiubneajdahhkkz'], ['llm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippshippsqcjvmirlippssh']], [['e'], ['a'], ['i']], [['hi    et a rgf hellomyfrienhelb&cd&^llod'], ['de    ap w ncb dahhkiubneajdahx&yz&^hhkz'], ['lm    ix e vkj lippsqcjvmirlipf&gh&^ppsh']], [['bcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lod'], ['xyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkz'], ['fghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^psh']], [['wwxy'], ['sstu'], ['aabc']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoi    t a gf hellomyfrieonhello d'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzke    p w cb dahhkiubneakjdahhk z'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsm    x e kj lippsqcjvmisrlipps h']], [['hlelll'], ['dhahhh'], ['lpippp']], [['eheel'], ['adaah'], ['iliip']], [['heti    get a gfrieonhello helothequickbrownfoxumpsovekrthelazydod'], ['dape    cap w cbneakjdahhk dahkpdamqeygxnksjbktqilokragnpdahwvuzkz'], ['lixm    kix e kjvmisrlipps lipsxliuymgofvsarjsbyqtwsziovxlipedchsh']], [['heolo'], ['dakhk'], ['lisps']], [['ehelhellomyfrienhelb&cd&^lod'], ['adahdahhkiubneajdahx&yz&^hkz'], ['iliplippsqcjvmirlipf&gh&^psh']], [['helloetmyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthigfthequickbhetid'], ['dahhkapiubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdecbpdamqeygxdapez'], ['lippsixqcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmkjxliuymgoflixmh']], [['ehelloetmyfrthirgft'], ['adahhkapiubnpdencbp'], ['ilippsixqcjvxlmvkjx']], [['helbcd&^%lomyfriendoxhi    etrgf hhellomyfrienhellodjumpsoverthelawwxyzydo&cd&d^'], ['dahxyz&^%hkiubneajzktde    apncb ddahhkiubneajdahhkzfqilokranpdahwsstuvuzk&yz&z^'], ['lipfgh&^%psqcjvmirhsblm    ixvkj llippsqcjvmirlippshnyqtwszivxlipeaabcdchs&gh&h^']], [['ohhelolomyfrienhellodrgf'], ['kddahkhkiubneajdahhkzncb'], ['sllipspsqcjvmirlippshvkj']], [['thequickbrownfoxjumpsoverthi    et a gf helloetmyfrienhellodhelazydo'], ['pdamqeygxnksjbktfqilokranpde    ap w cb dahhkapiubneajdahhkzdahwvuzk'], ['xliuymgofvsarjsbnyqtwszivxlm    ix e kj lippsixqcjvmirlippshlipedchs']], [['helloetmyfrienhellothequickbhetid'], ['dahhkapiubneajdahhkpdamqeygxdapez'], ['lippsixqcjvmirlippsxliuymgoflixmh']], [['trhequickbrownfoxjumpsoverthelazydog'], ['pndamqeygxnksjbktfqilokranpdahwvuzkc'], ['xvliuymgofvsarjsbnyqtwszivxlipedchsk']], [['hellomyfriendoxjumpsojverthelazydo'], ['dahhkiubneajzktfqilokfranpdahwvuzk'], ['lippsqcjvmirhsbnyqtwsnzivxlipedchs']], [['eeetrgfthellomyfrienhellodrownfoxjumpsoverthelazydo'], ['aaapncbpdahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['iiixvkjxlippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['gfrieonhello'], ['cbneakjdahhk'], ['kjvmisrlipps']], [['heloo'], ['dahkk'], ['lipss']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrienhellodget'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneajdahhkzcap'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmirlippshkix']], [['helloomyfrienhhi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellodeod'], ['dahhkkiubneajdde    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkzakz'], ['lippssqcjvmirllm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippshish']], [['ehellgft'], ['adahhcbp'], ['ilippkjx']], [['hehi    et a ohhelolomyfrienhellodrgf hellomyfrienhellodlflomyfrietrgf'], ['dade    ap w kddahkhkiubneajdahhkzncb dahhkiubneajdahhkzhbhkiubneapncb'], ['lilm    ix e sllipspsqcjvmirlippshvkj lippsqcjvmirlippshpjpsqcjvmixvkj']], [['hello wlorld'], ['dahhk shknhz'], ['lipps apsvph']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodhelazydoexyy'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzdahwvuzkatuu'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshlipedchsibcc']], [['abcdefghijklmnopqrsquickbrownfoxjumpsovferthelazydo'], ['wxyzabcdefghijklmnomqeygxnksjbktfqilokrbanpdahwvuzk'], ['efghijklmnopqrstuvwuymgofvsarjsbnyqtwszjivxlipedchs']], [['helloetmyfrienhellod'], ['dahhkapiubneajdahhkz'], ['lippsixqcjvmirlippsh']], [['hi    helotheqolod'], ['de    dahkpdamkhkz'], ['lm    lipsxliuspsh']], [['wxabcdefghijklmoxjumpsoverthelazydoexyy'], ['stwxyzabcdefghiktfqilokranpdahwvuzkatuu'], ['abefghijklmnopqsbnyqtwszivxlipedchsibcc']], [['thequickbrownfoxjumpsovertheazydo'], ['pdamqeygxnksjbktfqilokranpdawvuzk'], ['xliuymgofvsarjsbnyqtwszivxliedchs']], [['hi    et ehia rgf hfrienhehellomyfrienhellodrownfoxjumpsoverthelazydojumpsoverthelazydollod'], ['de    ap adew ncb dbneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilokranpdahwvuzkhhkz'], ['lm    ix ilme vkj ljvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwszivxlipedchsppsh']], [['abcdefghijfklmnopeetrgftqazydo'], ['wxyzabcdefbghijklaapncbpmwvuzk'], ['efghijklmnjopqrstiixvkjxuedchs']], [['helothequickbrownfonxjumpsgetoverthelazydo'], ['dahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzk'], ['lipsxliuymgofvsarjsrbnyqtwkixszivxlipedchs']], [['hellomyfrie'], ['dahhkiubnea'], ['lippsqcjvmi']], [['eehia'], ['aadew'], ['iilme']], [['bcohhellomyfrienhellodd'], ['xykddahhkiubneajdahhkzz'], ['fgsllippsqcjvmirlippshh']], [['helbcdhhellyomyfrienhellod&^%lomyfriendoxjumpsoverthelazydo&cd&d^'], ['dahxyzddahhukiubneajdahhkz&^%hkiubneajzktfqilokranpdahwvuzk&yz&z^'], ['lipfghllippcsqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxlipedchs&gh&h^']], [['hellomyfergetienhelllod'], ['dahhkiubancapeajdahhhkz'], ['lippsqcjivkixmirlipppsh']], [['helbcd&^%lomyfriendoxhihhello'], ['dahxyz&^%hkiubneajzktdeddahhk'], ['lipfgh&^%psqcjvmirhsblmllipps']], [['aa'], ['ww'], ['ee']], [['hi    ehi    et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de    ade    ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupompsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlkilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytsqtwszivxlipedchsibcc']], [['hello heti    get a gf hellomyfrieonhello dd'], ['dahhk dape    cap w cb dahhkiubneakjdahhk zz'], ['lipps lixm    kix e kj lippsqcjvmisrlipps hh']], [['helothequickbrownfoxjuhielazydo'], ['dahkpdamqeygxnksjbktfqdeahwvuzk'], ['lipsxliuymgofvsarjsbnylmipedchs']], [['hello heti    get a gf hellomyfheti    get a mgf hellomyfrienhellodo dd'], ['dahhk dape    cap w cb dahhkiubdape    cap w icb dahhkiubneajdahhkzk zz'], ['lipps lixm    kix e kj lippsqcjlixm    kix e qkj lippsqcjvmirlippshs hh']], [['hello helowhellomyfrrienhelb&cd&^lodorld'], ['dahhk dahksdahhkiubnneajdahx&yz&^hkzknhz'], ['lipps lipsalippsqcjvvmirlipf&gh&^pshsvph']], [['yzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cddddddddddddddiliipddddddddddd']], [['bcohhellomyfrieythequickbrownfoxthequickbhetinhellodd'], ['xykddahhkiubneaupdamqeygxnksjbktpdamqeygxdapejdahhkzz'], ['fgsllippsqcjvmicxliuymgofvsarjsbxliuymgoflixmrlippshh']], [['hhellomyffrienhellod'], ['ddahhkiubbneajdahhkz'], ['llippsqcjjvmirlippsh']], [['ef'], ['ab'], ['ij']], [['helloetmyfrienhellodhequicokbrownfoxjumpsoverthelzazydogod'], ['dahhkapiubneajdahhkzdamqeykgxnksjbktfqilokranpdahvwvuzkckz'], ['lippsixqcjvmirlippshliuymgsofvsarjsbnyqtwszivxlipdedchsksh']], [['erghi'], ['ancde'], ['ivklm']], [['hhellomyfriengfrieonhellohellodnhellodlod'], ['ddahhkiubneajcbneakjdahhkdahhkzjdahhkzhkz'], ['llippsqcjvmirkjvmisrlippslippshrlippshpsh']], [['helothequickbrownfoxjumpsgmetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqilociapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkqixszilvxlipedchs']], [['hellb&helothequickbrownfoxjumpsgetoverthelazydocd&^frietrogf'], ['dahhx&dahkpdamqeygxnksjbktfqilocapkranpdahwvuzkyz&^bneapnkcb'], ['lippf&lipsxliuymgofvsarjsbnyqtwkixszivxlipedchsgh&^jvmixvskj']], [['hi    et a gfi hellomyfrie'], ['de    ap w cbe dahhkiubnea'], ['lm    ix e kjm lippsqcjvmi']], [['hello helowhellomyhellomyfrienhelb&cd&^lodfrrienhelb&cd&^lodorld'], ['dahhk dahksdahhkiudahhkiubneajdahx&yz&^hkzbnneajdahx&yz&^hkzknhz'], ['lipps lipsalippsqclippsqcjvmirlipf&gh&^pshjvvmirlipf&gh&^pshsvph']], [['hi    et a rgf hellomyfrietnhelb&cd&^lod'], ['de    ap w ncb dahhkiubneapjdahx&yz&^hkz'], ['lm    ix e vkj lippsqcjvmixrlipf&gh&^psh']], [['hi    et a gf lhgfrieonhelloellomyfrie'], ['de    ap w cb hdcbneakjdahhkahhkiubnea'], ['lm    ix e kj plkjvmisrlippsippsqcjvmi']], [['hellomyfrieonhellod'], ['dahhkiubneakjdahhkz'], ['lippsqcjvmisrlippsh']], [['helbcd&^hellomyfrienhellodellomyfrienhellood%lomyfriendoxhihhello'], ['dahxyz&^dahhkiubneajdahhkzahhkiubneajdahhkkz%hkiubneajzktdeddahhk'], ['lipfgh&^lippsqcjvmirlippshippsqcjvmirlippssh%psqcjvmirhsblmllipps']], [['get'], ['cap'], ['kix']], [['helhlellllthi'], ['dahdhahhhhpde'], ['liplpippppxlm']], [['helloetmyfrienhellohellomyfrienhellodrownfoxjumpsoverthelazydothequickbhetid'], ['dahhkapiubneajdahhkdahhkiubneajdahhkznksjbktfqilokranpdahwvuzkpdamqeygxdapez'], ['lippsixqcjvmirlippslippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsxliuymgoflixmh']], [['hi    et ehia rgf he llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['de    ap adew ncb da hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['lm    ix ilme vkj li ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['hi    ehi   l et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de    ade   h ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm    ilm   p ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['hbcd&^%eo'], ['dxyz&^%ak'], ['lfgh&^%is']], [['ohhelolomyfetrienhellrgf'], ['kddahkhkiubapneajdahhncb'], ['sllipspsqcjixvmirlippvkj']], [['thequicukbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqeyqgxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuymgyoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['helloetmyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthigbhetiid'], ['dahhkapiubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdecxdapeez'], ['lippsixqcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmkflixmmh']], [['hellomyfrrienhelb&cdlod'], ['dahhkiubnneajdahx&yzhkz'], ['lippsqcjvvmirlipf&ghpsh']], [['helowythequicckbrownfhihi    et a gf hellomyfriendorld'], ['dahksupdamqeyygxnksjbdede    ap w cb dahhkiubneajzknhz'], ['lipsacxliuymggofvsarjlmlm    ix e kj lippsqcjvmirhsvph']], [['abcdefghijklmnopqrstuvwxwxabcdefghijklmnopqrstuvwxyyzythequickbrhownfoxjumpsoverthelazydoe'], ['wxyzabcdefghijklmnopqrststwxyzabcdefghijklmnopqrstuuvupdamqeygxndksjbktfqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxyzababefghijklmnopqrstuvwxyzabccdcxliuymgofvlsarjsbnyqtwszivxlipedchsi']], [['efrgft'], ['abncbp'], ['ijvkjx']], [['ythequickbrownfoxjumpsoverthelazydoythequickbrownoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokranpdahwvuzkupdamqeygxnksjktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszivxlipedchscxliuymgofvsarsbnyqtwszivxlipedchs']], [['ehehif'], ['adadeb'], ['ililmj']], [['heheti    get a gf hellomyfrieonhellyodllomyfergetienhelllob&cd&^d'], ['dadape    cap w cb dahhkiubneakjdahhukzhhkiubancapeajdahhhkx&yz&^z'], ['lilixm    kix e kj lippsqcjvmisrlippcshppsqcjivkixmirlipppsf&gh&^h']], [['hi    et aheallomyfriendoxjumpsoverthelazydo gf helloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['de    ap wdawhhkiubneajzktfqilokranpdahwvuzk cb dahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix elieppsqcjvmirhsbnyqtwszivxlipedchs kj lippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['hi e   let a gf hellomyfriend'], ['de a   hap w cb dahhkiubneajz'], ['lm i   pix e kj lippsqcjvmirh']], [['hllelll'], ['dhhahhh'], ['lppippp']], [['hhellyomyfrielod'], ['ddahhukiubneahkz'], ['llippcsqcjvmipsh']], [['hello wbcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lodlorld'], ['dahhk sxyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkzhknhz'], ['lipps afghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^pshpsvph']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodlomyferienhellodt'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzhkiubaneajdahhkzp'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshpsqcjivmirlippshx']], [['hi    et ehia rgf hfrienhehellomyfrienhellodrownfoxjumpsoverthelazydojumpsthelazydollod'], ['de    ap adew ncb dbneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilopdahwvuzkhhkz'], ['lm    ix ilme vkj ljvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwxlipedchsppsh']], [['ft'], ['bp'], ['jx']], [['yzzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cdddddddddddddddiliipddddddddddd']], [['ythequichi'], ['updamqeyde'], ['cxliuymglm']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazeydog'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvauzkc'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedichsk']], [['aickbrownfoxjumpsoveletthelazydo'], ['weygxnksjbktfqilokrahappdahwvuzk'], ['emgofvsarjsbnyqtwszipixxlipedchs']], [['b&helothequickownfoxjumpsgetoverthelazydocd&^'], ['x&dahkpdamqeygksjbktfqilocapkranpdahwvuzkyz&^'], ['f&lipsxliuymgosarjsbnyqtwkixszivxlipedchsgh&^']], [['helothequickbrownfoxjumphellomyfergetienhelllodsoverthelazydo'], ['dahkpdamqeygxnksjbktfqildahhkiubancapeajdahhhkzokranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtlippsqcjivkixmirlipppshwszivxlipedchs']], [['df'], ['zb'], ['hj']], [['b&helothequickownfoxjumpsgetovcerthelazydocd&^'], ['x&dahkpdamqeygksjbktfqilocapkryanpdahwvuzkyz&^'], ['f&lipsxliuymgosarjsbnyqtwkixszgivxlipedchsgh&^']], [['hehi'], ['dade'], ['lilm']], [['hhelloetmyfrienhellodhelazydol'], ['ddahhkapiubneajdahhkzdahwvuzkh'], ['llippsixqcjvmirlippshlipedchsp']], [['hehi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellodlothequickbrownfoxumpsoverthelazydo'], ['dade    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkzhkpdamqeygxnksjbktqilokranpdahwvuzk'], ['lilm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippshpsxliuymgofvsarjsbyqtwszivxlipedchs']], [['ythequickbrownfoxjum'], ['updamqeygxnksjbktfqi'], ['cxliuymgofvsarjsbnyq']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodkbrownfhi'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzgxnksjbde'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshofvsarjlm']], [['helothequetovehrthelazydo'], ['dahkpdamqapkradnpdahwvuzk'], ['lipsxliuyixszilvxlipedchs']], [['hi   helowythehquickbrownfhhiorlde ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de   dahksupdadmqeygxnksjbddeknhza ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm   lipsacxliluymgofvsarjllmsvphi ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['hellomyfrreienhelb&cdlod'], ['dahhkiubnnaeajdahx&yzhkz'], ['lippsqcjvvimirlipf&ghpsh']], [['llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['hhelothequickbrowhelowythequicckbrownfhihinfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksdahksupdamqeyygxnksjbdedejbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsalipsacxliuymggofvsarjlmlmrjsbyqtwsziovxlipedchs']], [['thequickbheti'], ['pdamqeygxdape'], ['xliuymgoflixm']], [['heti    get a gf hellomyfrieonhelllo d'], ['dape    cap w cb dahhkiubneakjdahhhk z'], ['lixm    kix e kj lippsqcjvmisrlippps h']], [['fwwxy'], ['bsstu'], ['jaabc']], [['hhi    et a ohhellomyfrienhellodrgf hellomyfrienhellodellomyfrienhelloold'], ['dde    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkzahhkiubneajdahhkkhz'], ['llm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippshippsqcjvmirlippssph']], [['helhlellelltihi'], ['dahdhahhahhpede'], ['liplpippippxmlm']], [['bcohhellomyfyrienhellodd'], ['xykddahhkiubuneajdahhkzz'], ['fgsllippsqcjcvmirlippshh']], [['hhelllomyfriod'], ['ddahhhkiubnekz'], ['llipppsqcjvmsh']], [['hellomyfrienhellodrownfooxjumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbkktfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjssbnyqtwszivxlipedchs']], [['helloetmyfrienhellzodhequickbrownfoxjumpsoverthelazydogodoworld'], ['dahhkapiubneajdahhvkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhz'], ['lippsixqcjvmirlippdshliuymgofvsarjsbnyqtwszivxlipedchskshsasvph']], [['yzzzzzzzzzzzzzzeheelzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvadaahvvvvvvvvvvvv'], ['cddddddddddddddiliipdddddddddddd']], [['etrgf'], ['apncb'], ['ixvkj']], [['hi l   ehi   l et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de h   ade   h ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm p   ilm   p ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['yzhzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvdvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cdlddddddddddddddiliipddddddddddd']], [['ythequickbrownfoxjumpsovownoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokrksjktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszsarsbnyqtwszivxlipedchs']], [['yywahellomyfriendoxjumupsoverthelazydoxy'], ['uuswdahhkiubneajzktfqiqlokranpdahwvuzktu'], ['ccaelippsqcjvmirhsbnyqytwszivxlipedchsbc']], [['hhellyoomyfrielod'], ['ddahhukkiubneahkz'], ['llippcssqcjvmipsh']], [['bcohhellhomyfrienhellodd'], ['xykddahhdkiubneajdahhkzz'], ['fgsllipplsqcjvmirlippshh']], [['ehelothequickbrownfonxjumpsgetoverthelazydot'], ['adahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzkp'], ['ilipsxliuymgofvsarjsrbnyqtwkixszivxlipedchsx']], [['hlel'], ['dhah'], ['lpip']], [['helloetmyfrthi'], ['dahhkapiubnpde'], ['lippsixqcjvxlm']], [['hellomyfergetienfhelllod'], ['dahhkiubancapeajbdahhhkz'], ['lippsqcjivkixmirjlipppsh']], [['helowythequicckbrownfhihi    ethhelothequickbrownfoxumpsovekrthelazydo a gf hellomyfriendorld'], ['dahksupdamqeyygxnksjbdede    apddahkpdamqeygxnksjbktqilokragnpdahwvuzk w cb dahhkiubneajzknhz'], ['lipsacxliuymggofvsarjlmlm    ixllipsxliuymgofvsarjsbyqtwsziovxlipedchs e kj lippsqcjvmirhsvph']], [['ohhhelllellomyfrienhellod'], ['kdddahhhahhkiubneajdahhkz'], ['slllipppippsqcjvmirlippsh']], [['eff'], ['abb'], ['ijj']], [['h eti    get a mgf hellomyfrienhellod'], ['d ape    cap w icb dahhkiubneajdahhkz'], ['l ixm    kix e qkj lippsqcjvmirlippsh']], [['hellomyfrietnhelb&cd&^lod'], ['dahhkiubneapjdahx&yz&^hkz'], ['lippsqcjvmixrlipf&gh&^psh']], [['b&cdheythequickbrownfoxjumpshi'], ['x&yzdaupdamqeygxnksjbktfqilode'], ['f&ghlicxliuymgofvsarjsbnyqtwlm']], [['helhlomyfriend'], ['dahdhkiubneajz'], ['liplpsqcjvmirh']], [['hhelothequickbrowhelhowythequicckbrownfhihinfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksdahdksupdamqeyygxnksjbdedejbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsaliplsacxliuymggofvsarjlmlmrjsbyqtwsziovxlipedchs']], [['hi    et a rg f hellomyfrietnhelb&cd&^lod'], ['de    ap w nc b dahhkiubneapjdahx&yz&^hkz'], ['lm    ix e vk j lippsqcjvmixrlipf&gh&^psh']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsoverthelazydoexyyd'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpdahwvuzkatuuz'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxlipedchsibcch']], [['hi    et a helolomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w dahkhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e lipspsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['helolomyfrienhellorgf'], ['dahkhkiubneajdahhkncb'], ['lipspsqcjvmirlippsvkj']], [['heeloo'], ['daahkk'], ['liipss']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsovertyhelazydoexyyd'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpudahwvuzkatuuz'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxclipedchsibcch']], [['fhellfomyfrie'], ['bdahhbkiubnea'], ['jlippjsqcjvmi']], [['gget'], ['ccap'], ['kkix']], [['heelazydo'], ['daahwvuzk'], ['liipedchs']], [['eeetrwxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupompsoverthelazydoexyygft'], ['aaapnstwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlkilokranpdahwvuzkatuucbp'], ['iiixvabefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytsqtwszivxlipedchsibcckjx']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodsoverthelazydo'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzokranpdahwvuzk'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshwszivxlipedchs']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrieunhellodget'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneaqjdahhkzcap'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmiyrlippshkix']], [['ahellomyfriendoxjumupsoverthelazydo'], ['wdahhkiubneajzktfqiqlokranpdahwvuzk'], ['elippsqcjvmirhsbnyqytwszivxlipedchs']], [['helowythehquickbrownfhhiorlde'], ['dahksupdadmqeygxnksjbddeknhza'], ['lipsacxliluymgofvsarjllmsvphi']], [['ithi'], ['epde'], ['mxlm']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsovertyhelazydoexyyhellomyfrienhelb&cd&^loddeeetrgft'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpudahwvuzkatuudahhkiubneajdahx&yz&^hkzzaaapncbp'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxclipedchsibcclippsqcjvmirlipf&gh&^pshhiiixvkjx']], [['hellomyfrietrogf'], ['dahhkiubneapnkcb'], ['lippsqcjvmixvskj']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoi'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzke'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsm']], [['ythequickbrowunfoxthequickbheti'], ['updamqeygxnksqjbktpdamqeygxdape'], ['cxliuymgofvsayrjsbxliuymgoflixm']], [['bcohhellomyfyrienhellofdwxabcdefghijklmoxjumpsovertyhelazydoexyyd'], ['xykddahhkiubuneajdahhkbzstwxyzabcdefghiktfqilokranpudahwvuzkatuuz'], ['fgsllippsqcjcvmirlippsjhabefghijklmnopqsbnyqtwszivxclipedchsibcch']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelcazydoi    t a gf hellomyfrieonhello d'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahywvuzke    p w cb dahhkiubneakjdahhk z'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipgedchsm    x e kj lippsqcjvmisrlipps h']], [['hi    et ehia rgf he llomyfrihi    et a helolomyfrienhellodrgf hellomyfrienhellodverthelazyollod'], ['de    ap adew ncb da hhkiubnede    ap w dahkhkiubneajdahhkzncb dahhkiubneajdahhkzranpdahwvukhhkz'], ['lm    ix ilme vkj li ppsqcjvmlm    ix e lipspsqcjvmirlippshvkj lippsqcjvmirlippshzivxlipedcsppsh']], [['helhlellelltiihi'], ['dahdhahhahhpeede'], ['liplpippippxmmlm']], [['ohhhelllellomyfrienheellod'], ['kdddahhhahhkiubneajdaahhkz'], ['slllipppippsqcjvmirliippsh']], [['hhellyomyfrienyhello'], ['ddahhukiubneajudahhk'], ['llippcsqcjvmirclipps']], [['ohhhelllellomyfriabcdefghijfklmnopeetrgftqrstuvwxyzythequickbrhownfoxjumpsoverthelahzydoenhellod'], ['kdddahhhahhkiubnewxyzabcdefbghijklaapncbpmnopqrstuvupdamqeygxndksjbktfqilokranpdahwdvuzkajdahhkz'], ['slllipppippsqcjvmefghijklmnjopqrstiixvkjxuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipeldchsirlippsh']], [['hellomyfrienhellodlflomyfrietrgf'], ['dahhkiubneajdahhkzhbhkiubneapncb'], ['lippsqcjvmirlippshpjpsqcjvmixvkj']], [['helxloetmthequickbrowoxjumpsoverthelazydoyfrieunhellodget'], ['dahthkapipdamqeygxnksktfqilokranpdahwvuzkubneaqjdahhkzcap'], ['lipbpsixqxliuymgofvsasbnyqtwszivxlipedchscjvmiyrlippshkix']], [['helhlellelletiihi'], ['dahdhahhahhapeede'], ['liplpippippixmmlm']], [['abcdefghijklmnopqrsteuvwxwxabcdefghijklmnopqrstuvwxyyzythequickbrhownfoxjsumpsoverthelazydoe'], ['wxyzabcdefghijklmnopaqrststwxyzabcdefghijklmnopqrstuuvupdamqeygxndksjbktfoqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxiyzababefghijklmnopqrstuvwxyzabccdcxliuymgofvlsarjsbnwyqtwszivxlipedchsi']], [['hhellomyfriengrieonhellohellodnhellodlod'], ['ddahhkiubneajcneakjdahhkdahhkzjdahhkzhkz'], ['llippsqcjvmirkvmisrlippslippshrlippshpsh']], [['hhellyomyfriehello'], ['ddahhukiubneadahhk'], ['llippcsqcjvmilipps']], [['bcd&hellomoyfrienhellodrownfoxjumpsoverthhhellomyfriengfrieonhellohellodelazydo%'], ['xyz&dahhkikubneajdahhkznksjbktfqilokranpdddahhkiubneajcbneakjdahhkdahhkzahwvuzk%'], ['fgh&lippsqscjvmirlippshvsarjsbnyqtwszivxlllippsqcjvmirkjvmisrlippslippshipedchs%']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydooexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchssibcc']], [['hi    elt a rgf hellomyfrienhellod'], ['de    ahp w ncb dahhkiubneajdahhkz'], ['lm    ipx e vkj lippsqcjvmirlippsh']], [['helflomyfriietrgf'], ['dahbhkiubneeapncb'], ['lipjpsqcjvmmixvkj']], [['ehiabcdefghijklmnopqrwnfxjumpsoveletthelazydoa'], ['adewxyzabcdefghijklmnsjbtfqilokrahappdahwvuzkw'], ['ilmefghijklmnopqrstuvarjbnyqtwszipixxlipedchse']], [['healloetmyfrienhellodhequickbrownfoxjumpsoverthelazeydog'], ['dawhhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvauzkc'], ['lieppsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedichsk']], [['lhgfrieonhelloellomyfrie'], ['hdcbneakjdahhkahhkiubnea'], ['plkjvmisrlippsippsqcjvmi']], [['hhellylomyfrienhellod'], ['ddahhuhkiubneajdahhkz'], ['llippcpsqcjvmirlippsh']], [['hfsoverthigfthequickbhetid'], ['dbokranpdecbpdamqeygxdapez'], ['ljwszivxlmkjxliuymgoflixmh']], [['yywbcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lodlorldwxy'], ['uusxyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkzhknhzstu'], ['ccafghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^pshpsvphabc']], [['bcdhellomyfrieonhellod&^%'], ['xyzdahhkiubneakjdahhkz&^%'], ['fghlippsqcjvmisrlippsh&^%']], [['aheallomyfriendoxjumpsoverthelazydo'], ['wdawhhkiubneajzktfqilokranpdahwvuzk'], ['elieppsqcjvmirhsbnyqtwszivxlipedchs']], [['aheallomyfriendoxjumpsoverthwxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsovierthielazydo'], ['wdawhhkiubneajzktfqilokranpdstwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokreanpdeahwvuzk'], ['elieppsqcjvmirhsbnyqtwszivxlabefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszmivxlmipedchs']], [['hhellohelloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogodoworldmyfrienhellodeod'], ['ddahhkdahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhziubneajdahhkzakz'], ['llippslippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchskshsasvphqcjvmirlippshish']], [['eflie'], ['abhea'], ['ijpmi']], [['ohhelyfrienhellood'], ['kddahubneajdahhkkz'], ['sllipcjvmirlippssh']], [['ehellioetmhi'], ['adahhekapide'], ['ilippmsixqlm']], [['ahellomyfriendoxjumupsoverthelaefzydo'], ['wdahhkiubneajzktfqiqlokranpdahwabvuzk'], ['elippsqcjvmirhsbnyqytwszivxlipeijdchs']], [['hellomyfrieonhenllod'], ['dahhkiubneakjdajhhkz'], ['lippsqcjvmisrlirppsh']], [['hlelloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['dhahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lpippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['hi    helothelbcd&^%lomyfriendoxhihhelloheqolod'], ['de    dahkpdahxyz&^%hkiubneajzktdeddahhkdamkhkz'], ['lm    lipsxlipfgh&^%psqcjvmirhsblmllippsliuspsh']], [['helloomyfrienhhi    ehi    et a gf hellomyfrietrogf hhellohehetimyfrienhellodeod'], ['dahhkkiubneajdde    ade    ap w cb dahhkiubneapnkcb ddahhkdadapeiubneajdahhkzakz'], ['lippssqcjvmirllm    ilm    ix e kj lippsqcjvmixvskj llippslilixmqcjvmirlippshish']], [['hl'], ['dh'], ['lp']], [['helhii'], ['dahdee'], ['liplmm']], [['hellomyfriendoxjumpsojvertaheallomyfriendoxjumpsoverthelazydoazydo'], ['dahhkiubneajzktfqilokfranpwdawhhkiubneajzktfqilokranpdahwvuzkwvuzk'], ['lippsqcjvmirhsbnyqtwsnzivxelieppsqcjvmirhsbnyqtwszivxlipedchsedchs']], [['hellomyfrienhellodverthelazyollod'], ['dahhkiubneajdahhkzranpdahwvukhhkz'], ['lippsqcjvmirlippshzivxlipedcsppsh']], [['eheihif'], ['adaedeb'], ['ilimlmj']], [['helothequickbrownfoxjumtpsgmetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqiplociapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqxtwkqixszilvxlipedchs']], [['ythequickbrownfoxthuickbheti'], ['updamqeygxnksjbktpdqeygxdape'], ['cxliuymgofvsarjsbxlymgoflixm']], [['hi  df  et ehia rgf he llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['de  zb  ap adew ncb da hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['lm  hj  ix ilme vkj li ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['fhellfomyfrieheeloo'], ['bdahhbkiubneadaahkk'], ['jlippjsqcjvmiliipss']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodhelazydoexyyzzzzzzzzzzzzzzzzzzet'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzdahwvuzkatuuvvvvvvvvvvvvvvvvvvap'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshlipedchsibccddddddddddddddddddix']], [['ohhellomyfrienheellod'], ['kddahhkiubneajdaahhkz'], ['sllippsqcjvmirliippsh']], [['iheheti'], ['edadape'], ['mlilixm']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodlomyferienhellodtgf'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzhkiubaneajdahhkzpcb'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshpsqcjivmirlippshxkj']], [['hello heti    get a gf hellomyllo dd'], ['dahhk dape    cap w cb dahhkiuhhk zz'], ['lipps lixm    kix e kj lippsqcpps hh']], [['f'], ['b'], ['j']], [['eehhi    et a gf helloetmthelquickbrownfoxjumpsohverthelazydoyfrienhellodia'], ['aadde    ap w cb dahhkapipdahmqeygxnksjbktfqilokdranpdahwvuzkubneajdahhkzew'], ['iillm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwslzivxlipedchscjvmirlippshme']], [['heti    get a mgf hellomyfrienhellodhl'], ['dape    cap w icb dahhkiubneajdahhkzdh'], ['lixm    kix e qkj lippsqcjvmirlippshlp']], [['thequhelothequickbrownfoxjumpsgetovehrthelazydoyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqdahkpdamqeygxnksjbktfqilocapkradnpdahwvuzkubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuylipsxliuymgofvsarjsbnyqtwkixszilvxlipedchscjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['helolomyfrienhhelloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodellorgf'], ['dahkhkiubneajddahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzahhkncb'], ['lipspsqcjvmirllippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshippsvkj']], [['hellomyferienhelhabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoiod'], ['dahhkiubaneajdahdwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkekz'], ['lippsqcjivmirliplefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsmsh']], [['heeoloo'], ['daakhkk'], ['liispss']], [['hellomyfrienhellodxjumpsoverthelazydo'], ['dahhkiubneajdahhkztfqilokranpdahwvuzk'], ['lippsqcjvmirlippshbnyqtwszivxlipedchs']], [['aickbrownfoxjhumpsoveletthelazydo'], ['weygxnksjbktfdqilokrahappdahwvuzk'], ['emgofvsarjsbnlyqtwszipixxlipedchs']], [['hhellomyfriengfrieonhellohellodoverthelazydoythequickbrownoxjumpsoverthelazydollomyfrietrgf'], ['ddahhkiubneajcbneakjdahhkdahhkzkranpdahwvuzkupdamqeygxnksjktfqilokranpdahwvuzkhhkiubneapncb'], ['llippsqcjvmirkjvmisrlippslippshszivxlipedchscxliuymgofvsarsbnyqtwszivxlipedchsppsqcjvmixvkj']], [['helbcdhhellyomyfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhukiubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['hi    et a gf helllomyfrienhellood'], ['de    ap w cb dahhhkiubneajdahhkkz'], ['lm    ix e kj lipppsqcjvmirlippssh']], [['hellomyfrienhellodrownfoxjumpsothequickbhetiverthelazydohi'], ['dahhkiubneajdahhkznksjbktfqilokpdamqeygxdaperanpdahwvuzkde'], ['lippsqcjvmirlippshvsarjsbnyqtwsxliuymgoflixmzivxlipedchslm']], [['hhelloetmyhi    et a gf hellomyfriendfrienhellodhelazydol'], ['ddahhkapiude    ap w cb dahhkiubneajzbneajdahhkzdahwvuzkh'], ['llippsixqclm    ix e kj lippsqcjvmirhjvmirlippshlipedchsp']], [['wlorld'], ['shknhz'], ['apsvph']], [['helolnhello dd'], ['dahkhjdahhk zz'], ['lipsprlipps hh']], [['ythbequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['updxamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['cxlfiuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['hellomdyfriendoxjumpsojverthelazydo'], ['dahhkizubneajzktfqilokfranpdahwvuzk'], ['lippsqhcjvmirhsbnyqtwsnzivxlipedchs']], [['helloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['helbcdhhellyom&yfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhuki&ubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsq&cjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['helbcdhhellyofmyfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhukbiubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsjqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['llomyfrienhehellomyfrienhellooxjumpsoverthelazyollod'], ['hhkiubneajdadahhkiubneajdahhkktfqilokranpdahwvukhhkz'], ['ppsqcjvmirlilippsqcjvmirlippssbnyqtwszivxlipedcsppsh']], [['yzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthi'], ['uvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpde'], ['cdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlm']], [['helolnhelnlo'], ['dahkhjdahjhk'], ['lipsprliprps']], [['wxxyyworld'], ['sttuusknhz'], ['abbccasvph']], [['bcohhellomyfhi'], ['xykddahhkiubde'], ['fgsllippsqcjlm']], [['heloethequickbrownfoxjumpsgmetovehrthelazydo'], ['dahkapdamqeygxnksjbktfqilociapkradnpdahwvuzk'], ['lipsixliuymgofvsarjsbnyqtwkqixszilvxlipedchs']], [['yzhzzzzzzzzzzzzzzeyheelzzzzzzzzzzz'], ['uvdvvvvvvvvvvvvvvaudaahvvvvvvvvvvv'], ['cdlddddddddddddddicliipddddddddddd']], [['hi    et a gf helloetmthelquickbrownfoxjumpsoverthnelazydoyfrienhellod'], ['de    ap w cb dahhkapipdahmqeygxnksjbktfqilokranpdjahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwszivxlripedchscjvmirlippsh']], [['helloetmpsoverthelazydoyfrienhellodfhelllod'], ['dahhkapilokranpdahwvuzkubneajdahhkzbdahhhkz'], ['lippsixqtwszivxlipedchscjvmirlippshjlipppsh']], [['hellll'], ['dahhhh'], ['lipppp']], [['helhlelthi'], ['dahdhahpde'], ['liplpipxlm']], [['ohhellomyfrieod'], ['kddahhkiubneakz'], ['sllippsqcjvmish']], [['helothelbcd&^%lomyfriendoxhihhelloheqolod'], ['dahkpdahxyz&^%hkiubneajzktdeddahhkdamkhkz'], ['lipsxlipfgh&^%psqcjvmirhsblmllippsliuspsh']], [['ohhelllomyfriend'], ['kddahhhkiubneajz'], ['sllipppsqcjvmirh']], [['hellhi'], ['dahhde'], ['lipplm']], [['thelothequickbrownfonxjumpsgetoverthelazydo'], ['pdahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzk'], ['xlipsxliuymgofvsarjsrbnyqtwkixszivxlipedchs']], [['hhhellyomyfrienhellodl'], ['dddahhukiubneajdahhkzh'], ['lllippcsqcjvmirlippshp']], [['ohhelolomyfrienhellodgf'], ['kddahkhkiubneajdahhkzcb'], ['sllipspsqcjvmirlippshkj']], [['hhellomyfriengfrieonhelheti    get a gf hellomyfrieonhello dlohellod'], ['ddahhkiubneajcbneakjdahdape    cap w cb dahhkiubneakjdahhk zhkdahhkz'], ['llippsqcjvmirkjvmisrliplixm    kix e kj lippsqcjvmisrlipps hpslippsh']], [['hhelyfrienhellod'], ['ddahubneajdahhkz'], ['llipcjvmirlippsh']], [['b&cc^'], ['x&yy^'], ['f&gg^']], [['heti    get a gfrieonhello helothequickbrownfoxumpsovekrthelazydodehel'], ['dape    cap w cbneakjdahhk dahkpdamqeygxnksjbktqilokragnpdahwvuzkzadah'], ['lixm    kix e kjvmisrlipps lipsxliuymgofvsarjsbyqtwsziovxlipedchshilip']], [['hello helowhellomyfrrienhelhb&cd&^lodorld'], ['dahhk dahksdahhkiubnneajdahdx&yz&^hkzknhz'], ['lipps lipsalippsqcjvvmirliplf&gh&^pshsvph']], [['bchllomyfhi'], ['xydhhkiubde'], ['fglppsqcjlm']], [['hhellomyfrienhellodehi'], ['ddahhkiubneajdahhkzade'], ['llippsqcjvmirlippshilm']], [['helothequickbrownfoxumpsovekrthelazydodehel'], ['dahkpdamqeygxnksjbktqilokragnpdahwvuzkzadah'], ['lipsxliuymgofvsarjsbyqtwsziovxlipedchshilip']], [['gehelloetmpsoverthelazydoyfrienhellodfhelllod'], ['cadahhkapilokranpdahwvuzkubneajdahhkzbdahhhkz'], ['kilippsixqtwszivxlipedchscjvmirlippshjlipppsh']], [['hellomyfrienhelleodrownfoxjumpabcdefghijklmnopqrstuvwxyzythequickbrownfoxjumhello'], ['dahhkiubneajdahhakznksjbktfqilwxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqidahhk'], ['lippsqcjvmirlippishvsarjsbnyqtefghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqlipps']], [['heti    get a gfrieonhello helothequicikbrownfoxumpsovekrthelazydodehel'], ['dape    cap w cbneakjdahhk dahkpdamqeyegxnksjbktqilokragnpdahwvuzkzadah'], ['lixm    kix e kjvmisrlipps lipsxliuymgmofvsarjsbyqtwsziovxlipedchshilip']], [['hod'], ['dkz'], ['lsh']], [['hhelloehellomyfrieonhelllotmyhi    et a gf hellomyfriendfrienhellodhelazydol'], ['ddahhkadahhkiubneakjdahhhkpiude    ap w cb dahhkiubneajzbneajdahhkzdahwvuzkh'], ['llippsilippsqcjvmisrlipppsxqclm    ix e kj lippsqcjvmirhjvmirlippshlipedchsp']], [['hhellomyfriengfrieonhelheti'], ['ddahhkiubneajcbneakjdahdape'], ['llippsqcjvmirkjvmisrliplixm']], [['ehabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelcazydoit'], ['adwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahywvuzkep'], ['ilefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipgedchsmx']], [['ehelloetyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthiet'], ['adahhkapubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdeap'], ['ilippsixcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmix']], [['%bcd&^%'], ['%xyz&^%'], ['%fgh&^%']], [['thequickbromwnfoxjumpsoverthelazydog'], ['pdamqeygxnkisjbktfqilokranpdahwvuzkc'], ['xliuymgofvsqarjsbnyqtwszivxlipedchsk']], [['theqcuickbrownfoxjumpsoverthelazydog'], ['pdamyqeygxnksjbktfqilokranpdahwvuzkc'], ['xliugymgofvsarjsbnyqtwszivxlipedchsk']], [['hi    et a gf helbcd&^%lomyfriend'], ['de    ap w cb dahxyz&^%hkiubneajz'], ['lm    ix e kj lipfgh&^%psqcjvmirh']], [['yzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvv'], ['cdddddddddddddddd']], [['hellogfa world'], ['dahhkcbw sknhz'], ['lippskje asvph']], [['hi    et a gf helbcd&^%lomy friend'], ['de    ap w cb dahxyz&^%hkiu bneajz'], ['lm    ix e kj lipfgh&^%psqc jvmirh']], [['bcdd&^%'], ['xyzz&^%'], ['fghh&^%']], [['%bcdhello&^%'], ['%xyzdahhk&^%'], ['%fghlipps&^%']], [['thequicerthelazydog'], ['pdamqeyanpdahwvuzkc'], ['xliuymgivxlipedchsk']], [['%bcdhelwxylo&^%'], ['%xyzdahstuhk&^%'], ['%fghlipabcps&^%']], [['ehello'], ['adahhk'], ['ilipps']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcddddddddddddddddddddddddddddddddd']], [['hellogfa worl d'], ['dahhkcbw sknh z'], ['lippskje asvp h']], [['hi    et a gf hellogmyfriend'], ['de    ap w cb dahhkciubneajz'], ['lm    ix e kj lippskqcjvmirh']], [['%bc^d&^%'], ['%xy^z&^%'], ['%fg^h&^%']], [['bc&^%'], ['xy&^%'], ['fg&^%']], [['abcdefghijklmnopqrstuvxyz'], ['wxyzabcdefghijklmnopqrtuv'], ['efghijklmnopqrstuvwxyzbcd']], [['thequicerthelazydoag'], ['pdamqeyanpdahwvuzkwc'], ['xliuymgivxlipedchsek']], [['thequicertthelazydog'], ['pdamqeyanppdahwvuzkc'], ['xliuymgivxxlipedchsk']], [['hellogfa'], ['dahhkcbw'], ['lippskje']], [['thequickbrthequicerthelazydogownfoxjumpsoverthelazydo'], ['pdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokranpdahwvuzk'], ['xliuymgofvxliuymgivxlipedchsksarjsbnyqtwszivxlipedchs']], [['bc&^%thequicerthelazydogbc&^%'], ['xy&^%pdamqeyanpdahwvuzkcxy&^%'], ['fg&^%xliuymgivxlipedchskfg&^%']], [['abcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyz'], ['wxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuv'], ['efghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcd']], [['thequickbrownfoxydo'], ['pdamqeygxnksjbktuzk'], ['xliuymgofvsarjsbchs']], [['thequicwkbrthequicerthelazydogownofoxjumpsoverthelazydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilokranpdahwvuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwszivxlipedchs']], [['thequickborownfoxydo'], ['pdamqeygxknksjbktuzk'], ['xliuymgofsvsarjsbchs']], [['world'], ['sknhz'], ['asvph']], [['abcdefghihjklmnopqrstuvxyz'], ['wxyzabcdedfghijklmnopqrtuv'], ['efghijklmlnopqrstuvwxyzbcd']], [['hi    ehellot a gf hellogmyfriend'], ['de    adahhkp w cb dahhkciubneajz'], ['lm    ilippsx e kj lippskqcjvmirh']], [['hi    et a gf helbcmd&^%lomyfriend'], ['de    ap w cb dahxyiz&^%hkiubneajz'], ['lm    ix e kj lipfgqh&^%psqcjvmirh']], [['%b^c^d&^%'], ['%x^y^z&^%'], ['%f^g^h&^%']], [['hellomyfriend'], ['dahhkiubneajz'], ['lippsqcjvmirh']], [['helbcd&^%lomy'], ['dahxyz&^%hkiu'], ['lipfgh&^%psqc']], [['thequickbromwnfoxjumpsovertheletazydog'], ['pdamqeygxnkisjbktfqilokranpdahapwvuzkc'], ['xliuymgofvsqarjsbnyqtwszivxlipixedchsk']], [['hellogmyfriend'], ['dahhkciubneajz'], ['lippskqcjvmirh']], [['thequicekbromwnfoxjumpsoverthelazydog'], ['pdamqeyagxnkisjbktfqilokranpdahwvuzkc'], ['xliuymgiofvsqarjsbnyqtwszivxlipedchsk']], [['yzz'], ['uvv'], ['cdd']], [['hi    ehellott a gf hellogmyfriend'], ['de    adahhkpp w cb dahhkciubneajz'], ['lm    ilippsxx e kj lippskqcjvmirh']], [['thkbrownfoxjumpsoverthelazydo'], ['pdgxnksjbktfqilokranpdahwvuzk'], ['xlofvsarjsbnyqtwszivxlipedchs']], [['thequickbrownfoxjumpsoverthelazydfo'], ['pdamqeygxnksjbktfqilokranpdahwvuzbk'], ['xliuymgofvsarjsbnyqtwszivxlipedchjs']], [['theqcuickbrownfoxjumpsoverthelazbydog'], ['pdamyqeygxnksjbktfqilokranpdahwvxuzkc'], ['xliugymgofvsarjsbnyqtwszivxlipedfchsk']], [['theqcuickabcdefghihjklmnopqrstuvxyzbrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghijklmnopqrtuvxnksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['helllogfa'], ['dahhhkcbw'], ['lipppskje']], [['thequickbrthequicerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymgivxlipedchsksarjsbnyqtwszipedchs']], [['bc&^%thequicerthelazydothkbrownfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnksjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvsarjsbnyqtwszivxlipedchs&^%']], [['bc&^hello%'], ['xy&^dahhk%'], ['fg&^lipps%']], [['ehellott'], ['adahhkpp'], ['ilippsxx']], [['thequickbromwnfoxjumpsoverdog'], ['pdamqeygxnkisjbktfqilokranzkc'], ['xliuymgofvsqarjsbnyqtwszivhsk']], [['hellogfa wetorld'], ['dahhkcbw sapknhz'], ['lippskje aixsvph']], [['wetorld'], ['sapknhz'], ['aixsvph']], [['hi    et a gf helbcdhi    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzde    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlm    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['hi    et a gf helbcmd&^%lo myfriend'], ['de    ap w cb dahxyiz&^%hk iubneajz'], ['lm    ix e kj lipfgqh&^%ps qcjvmirh']], [['thequicerthequicekbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgiofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['thequiuckbrownfoxjumpsoverthelazydo'], ['pdamqeqygxnksjbktfqilokranpdahwvuzk'], ['xliuymygofvsarjsbnyqtwszivxlipedchs']], [['bc&^%thequicerthelazydoghelbcmd&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchsklipfgqh&^%psfg&^%']], [['helbcd&^thequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfgh&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['bc&thequicertthelazydog^%'], ['xy&pdamqeyanppdahwvuzkc^%'], ['fg&xliuymgivxxlipedchsk^%']], [['theqthequicerthequicekbromwnfoxjumpsoverthelazydogthelazydogdog'], ['pdampdamqeyanpdamqeyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkczkc'], ['xliuxliuymgivxliuymgiofvsqarjsbnyqtwszivxlipedchskxlipedchskhsk']], [['hi    et  a gf helbcmld&^%lo myfriend'], ['de    ap  w cb dahxyihz&^%hk iubneajz'], ['lm    ix  e kj lipfgqph&^%ps qcjvmirh']], [['afbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyz'], ['wbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuv'], ['ejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcd']], [['bc&^%thequicerthelazydoghelbcmd&&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchsklipfgqh&&^%psfg&^%']], [['ehelloyzz'], ['adahhkuvv'], ['ilippscdd']], [['hi r   et a gf helbcmd&^%lomyfriend'], ['de n   ap w cb dahxyiz&^%hkiubneajz'], ['lm v   ix e kj lipfgqh&^%psqcjvmirh']], [['gf%b^c^d&^%'], ['cb%x^y^z&^%'], ['kj%f^g^h&^%']], [['thequtickborownfoxydo'], ['pdamqpeygxknksjbktuzk'], ['xliuyxmgofsvsarjsbchs']], [['thequicerthequicezkbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyavgxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgidofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['bc&^%thequicerthelazydohighelbcmd&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkdecdahxyiz&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchslmklipfgqh&^%psfg&^%']], [['hellogmythequicertthelazydogfriend'], ['dahhkciupdamqeyanppdahwvuzkcbneajz'], ['lippskqcxliuymgivxxlipedchskjvmirh']], [['ello'], ['ahhk'], ['ipps']], [['hellogfa wethorld'], ['dahhkcbw sapdknhz'], ['lippskje aixlsvph']], [['bcello&^%'], ['xyahhk&^%'], ['fgipps&^%']], [['hellogmyfriend&^%lomyfriend'], ['dahhkciubneajz&^%hkiubneajz'], ['lippskqcjvmirh&^%psqcjvmirh']], [['yzyz'], ['uvuv'], ['cdcd']], [['helbcy'], ['dahxyu'], ['lipfgc']], [['hellogmyfriend&^%lomyfriendgf'], ['dahhkciubneajz&^%hkiubneajzcb'], ['lippskqcjvmirh&^%psqcjvmirhkj']], [['afbcdefghijklhellogfa'], ['wbxyzabcdefghdahhkcbw'], ['ejfghijklmnoplippskje']], [['ehellot'], ['adahhkp'], ['ilippsx']], [['theqkbrownfoxydo'], ['pdamgxnksjbktuzk'], ['xliuofvsarjsbchs']], [['worl'], ['sknh'], ['asvp']], [['thequickbrownfoxbcdd&^%ydo'], ['pdamqeygxnksjbktxyzz&^%uzk'], ['xliuymgofvsarjsbfghh&^%chs']], [['hi    et a gf helbcdhibc&^%    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzdexy&^%    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlmfg&^%    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['worlwxyyd'], ['sknhstuuz'], ['asvpabcch']], [['yzzz'], ['uvvv'], ['cddd']], [['ehe'], ['ada'], ['ili']], [['helbcmd&^%lomyfriend'], ['dahxyiz&^%hkiubneajz'], ['lipfgqh&^%psqcjvmirh']], [['hi    et a gf hellogmyfiend'], ['de    ap w cb dahhkciubeajz'], ['lm    ix e kj lippskqcjmirh']], [['hellogfaello'], ['dahhkcbwahhk'], ['lippskjeipps']], [['glhello'], ['chdahhk'], ['kplipps']], [['hellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfriendfriend'], ['dahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmirhjvmirh']], [['theqcuickabcdefghihjklmnoownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghijkksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqrssarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddddddddddddddddddddddddddddddd']], [['heleloo'], ['dahahkk'], ['lipipss']], [['hellogfa worwethorld'], ['dahhkcbw sknsapdknhz'], ['lippskje asvaixlsvph']], [['%bcthkbrownfoxjumpsoverthelazydod&^%'], ['%xypdgxnksjbktfqilokranpdahwvuzkz&^%'], ['%fgxlofvsarjsbnyqtwszivxlipedchsh&^%']], [['%bcdhelwxylo&&^%'], ['%xyzdahstuhk&&^%'], ['%fghlipabcps&&^%']], [['eheellot'], ['adaahhkp'], ['iliippsx']], [['helllo '], ['dahhhk '], ['lippps ']], [['hi    eiend'], ['de    aeajz'], ['lm    imirh']], [['hi    et a gf helbc%bc^d&^%d&^%lomy friend'], ['de    ap w cb dahxy%xy^z&^%z&^%hkiu bneajz'], ['lm    ix e kj lipfg%fg^h&^%h&^%psqc jvmirh']], [['ywxy'], ['ustu'], ['cabc']], [['hwellogfa wethorld'], ['dsahhkcbw sapdknhz'], ['laippskje aixlsvph']], [['helbcmd&^%lomyfiend'], ['dahxyiz&^%hkiubeajz'], ['lipfgqh&^%psqcjmirh']], [['helbcdworlwxyyd&^thequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyzsknhstuuz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfghasvpabcch&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['helllo'], ['dahhhk'], ['lippps']], [['woworwethorldrlwxyyd'], ['sksknsapdknhznhstuuz'], ['asasvaixlsvphvpabcch']], [['thequiceurtthelazydog'], ['pdamqeyaqnppdahwvuzkc'], ['xliuymgiyvxxlipedchsk']], [['hi    et  a g^f helbcmld&^%lo myfriend'], ['de    ap  w c^b dahxyihz&^%hk iubneajz'], ['lm    ix  e k^j lipfgqph&^%ps qcjvmirh']], [['hhellogmythequicertthelazydogfriendelbcmd&^%lomyfiend'], ['ddahhkciupdamqeyanppdahwvuzkcbneajzahxyiz&^%hkiubeajz'], ['llippskqcxliuymgivxxlipedchskjvmirhipfgqh&^%psqcjmirh']], [['hellomyfrienduvxyz'], ['dahhkiubneajzqrtuv'], ['lippsqcjvmirhyzbcd']], [['thequicerthequicezkbroomwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyavgxnkkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgidofvssqarjsbnyqtwszivxlipedchskxlipedchsk']], [['fgf'], ['bcb'], ['jkj']], [['yzyzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvv'], ['cdcdddddddddddd']], [['helbcdworlwxyyd&^thequiuckbrownfoxjumpsoverthelazydothequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyzsknhstuuz&^pdamqeqygxnksjbktfqilokranpdahwvuzkpdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfghasvpabcch&^xliuymygofvsarjsbnyqtwszivxlipedchsxliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['theqeutickborownfoxydo'], ['pdamaqpeygxknksjbktuzk'], ['xliuiyxmgofsvsarjsbchs']], [['thequickbrownfoxjumpsoverthelazyd'], ['pdamqeygxnksjbktfqilokranpdahwvuz'], ['xliuymgofvsarjsbnyqtwszivxlipedch']], [['bc&^%thequicerthelazydothkbroswnfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnkosjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvswarjsbnyqtwszivxlipedchs&^%']], [['woworwethorlldrlwxd'], ['sksknsapdknhhznhstz'], ['asasvaixlsvpphvpabh']], [['%b^c^d&^d%'], ['%x^y^z&^z%'], ['%f^g^h&^h%']], [['gglhello'], ['cchdahhk'], ['kkplipps']], [['%bcdheolwxylo&&^%'], ['%xyzdakhstuhk&&^%'], ['%fghlispabcps&&^%']], [['thequicertthequickbrthequicerthelazydogownfoxjumpsovelazydohelazydoag'], ['pdamqeyanppdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokrahwvuzkdahwvuzkwc'], ['xliuymgivxxliuymgofvxliuymgivxlipedchsksarjsbnyqtwszipedchslipedchsek']], [['hi    et a gf helbcmhelbcmd&^%lomyfriendd&^%lo myfriend'], ['de    ap w cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubneajz'], ['lm    ix e kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjvmirh']], [['s'], ['o'], ['w']], [['bc&^%thequicerthela^zydoghelbcmd&&^%lobc&^%'], ['xy&^%pdamqeyanpdahw^vuzkcdahxyiz&&^%hkxy&^%'], ['fg&^%xliuymgivxlipe^dchsklipfgqh&&^%psfg&^%']], [['thequickborownfoxydfo'], ['pdamqeygxknksjbktuzbk'], ['xliuymgofsvsarjsbchjs']], [['%bcdhelwxyl%'], ['%xyzdahstuh%'], ['%fghlipabcp%']], [['thequickbromownfoxjumpsoverdog'], ['pdamqeygxnkiksjbktfqilokranzkc'], ['xliuymgofvsqsarjsbnyqtwszivhsk']], [['hellogmyfriend&^%lomyfrienehellott'], ['dahhkciubneajz&^%hkiubneajadahhkpp'], ['lippskqcjvmirh&^%psqcjvmirilippsxx']], [['helbcthequickbrownfoxbcdd&^%ydoy'], ['dahxypdamqeygxnksjbktxyzz&^%uzku'], ['lipfgxliuymgofvsarjsbfghh&^%chsc']], [['ggff'], ['ccbb'], ['kkjj']], [['hhillogfaello'], ['ddehhkcbwahhk'], ['llmppskjeipps']], [['thequicwkbrthequicerthelazydogownofoxjumpszydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilovuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwdchs']], [['worethorld'], ['sknapdknhz'], ['asvixlsvph']], [['thequiceurtazydog'], ['pdamqeyaqnpwvuzkc'], ['xliuymgiyvxedchsk']], [['helbcmd&^%lomyfriendxy'], ['dahxyiz&^%hkiubneajztu'], ['lipfgqh&^%psqcjvmirhbc']], [['helbcthequickbryzzoy'], ['dahxypdamqeygxnuvvku'], ['lipfgxliuymgofvcddsc']], [['hwellogfa wethorldd'], ['dsahhkcbw sapdknhzz'], ['laippskje aixlsvphh']], [['worwethorld'], ['sknsapdknhz'], ['asvaixlsvph']], [['o%bcdhelwxylo&^%'], ['k%xyzdahstuhk&^%'], ['s%fghlipabcps&^%']], [['eehello'], ['aadahhk'], ['iilipps']], [['thequicydog'], ['pdamqeyuzkc'], ['xliuymgchsk']], [['hi    et  a g^f hhelbcd&^%lomyelbcmld&^%lo myfriend'], ['de    ap  w c^b ddahxyz&^%hkiuahxyihz&^%hk iubneajz'], ['lm    ix  e k^j llipfgh&^%psqcipfgqph&^%ps qcjvmirh']], [['theqkbrowfnfoxydo'], ['pdamgxnksbjbktuzk'], ['xliuofvsajrjsbchs']], [['hi    et a gf helbcdhibc&^%    et a abcdefghihjklmnopqrstuvxyzllogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzdexy&^%    ap w wxyzabcdedfghijklmnopqrtuvhhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlmfg&^%    ix e efghijklmlnopqrstuvwxyzbcdppskqcjvmirh&^%psqcjvmirh']], [['hwellogfa'], ['dsahhkcbw'], ['laippskje']], [['hi r  et a gf helbcmd&^%lomyfriend'], ['de n  ap w cb dahxyiz&^%hkiubneajz'], ['lm v  ix e kj lipfgqh&^%psqcjvmirh']], [['abcdefghijklmnopqrstuhi    et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde    ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm    ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['thkbrownfoxjumpsoverth%bcdhelwxylo&^%elazydo'], ['pdgxnksjbktfqilokranpd%xyzdahstuhk&^%ahwvuzk'], ['xlofvsarjsbnyqtwszivxl%fghlipabcps&^%ipedchs']], [['bc&thequicerttheworwethorldlazydog^%'], ['xy&pdamqeyanppdasknsapdknhzhwvuzkc^%'], ['fg&xliuymgivxxliasvaixlsvphpedchsk^%']], [['wyorlwxyyd'], ['suknhstuuz'], ['acsvpabcch']], [['hi    et a gf helbcmhelbcmd&^%lomyfriendd&^%lo myfend'], ['de    ap w cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubajz'], ['lm    ix e kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjirh']], [['hhelbcd&^%lomyelbcmld&^%lo'], ['ddahxyz&^%hkiuahxyihz&^%hk'], ['llipfgh&^%psqcipfgqph&^%ps']], [['thequickbrownfoxjumpsovworwethorlderthelazyd'], ['pdamqeygxnksjbktfqilokrsknsapdknhzanpdahwvuz'], ['xliuymgofvsarjsbnyqtwszasvaixlsvphivxlipedch']], [['thequicwkbrthequicerthelazydogaownofoxjumpsoverthelazydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcwksjkbktfqilokranpdahwvuzk'], ['xliuymgaofvxliuymgivxlipedchskesarsjsbnyqtwszivxlipedchs']], [['%bdcthkbrownfoxjumpsoverthelazydod&^%'], ['%xzypdgxnksjbktfqilokranpdahwvuzkz&^%'], ['%fhgxlofvsarjsbnyqtwszivxlipedchsh&^%']], [['worlwxd'], ['sknhstz'], ['asvpabh']], [['herienduvxyz'], ['daneajzqrtuv'], ['livmirhyzbcd']], [['hi    et a gf hellogmyfriiend'], ['de    ap w cb dahhkciubneeajz'], ['lm    ix e kj lippskqcjvmmirh']], [['boc&^hello%'], ['xky&^dahhk%'], ['fsg&^lipps%']], [['abcdyzzefghijklmnopqrstuvxyz'], ['wxyzuvvabcdefghijklmnopqrtuv'], ['efghcddijklmnopqrstuvwxyzbcd']], [['yxwxy'], ['utstu'], ['cbabc']], [['yzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddlippsdddddddddddddddddddddddddddd']], [['ahwellogfa wethorldd'], ['wdsahhkcbw sapdknhzz'], ['elaippskje aixlsvphh']], [['hi    et a gf helbcmd&^%l o myfriend'], ['de    ap w cb dahxyiz&^%h k iubneajz'], ['lm    ix e kj lipfgqh&^%p s qcjvmirh']], [['hellogymyfriend&^%lomyfriendgf'], ['dahhkcuiubneajz&^%hkiubneajzcb'], ['lippskcqcjvmirh&^%psqcjvmirhkj']], [['hellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfririend'], ['dahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneneajz'], ['lippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmvmirh']], [['heflbcmyd&^%lomyfriend'], ['dabhxyiuz&^%hkiubneajz'], ['lijpfgqch&^%psqcjvmirh']], [['myfriendvwxyz'], ['iubneajzrstuv'], ['qcjvmirhzabcd']], [['theqcuickabcdefghihjklmehellotnfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghiadahhkpjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqilippsxrjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['thequickbrthequiceerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeyaanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymgiivxlipedchsksarjsbnyqtwszipedchs']], [['thequhelbcmld&^%loicerthelazy%doag'], ['pdamqdahxyihz&^%hkeyanpdahwvu%zkwc'], ['xliuylipfgqph&^%psmgivxlipedc%hsek']], [['%bcdhelloo&^%'], ['%xyzdahhkk&^%'], ['%fghlippss&^%']], [['hellogmyfrithequickbromwnfoxjumpsoverthelazydogend&^%lomhi'], ['dahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuzkcajz&^%hkide'], ['lippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedchskirh&^%psqlm']], [['afbcdefghijklhellogfa worl damnoyfrienduvxyz'], ['wbxyzabcdefghdahhkcbw sknh zwijkubneajzqrtuv'], ['ejfghijklmnoplippskje asvp heqrscjvmirhyzbcd']], [['%%bc^d&^%'], ['%%xy^z&^%'], ['%%fg^h&^%']], [['gfs'], ['cbo'], ['kjw']], [['hloglfa'], ['dhkchbw'], ['lpskpje']], [['thequicerpsoverthelazydogthelazydog'], ['pdamqeyanlokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivtwszivxlipedchskxlipedchsk']], [['gghelbcdworlwxyyd&^thequickbrownfoxjumpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabcch&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqcplipps']], [['hellogmyfiend'], ['dahhkciubeajz'], ['lippskqcjmirh']], [['thequiutckbrownfoxjumpstoverthelazydo'], ['pdamqeqpygxnksjbktfqilopkranpdahwvuzk'], ['xliuymyxgofvsarjsbnyqtwxszivxlipedchs']], [['helelooywxy'], ['dahahkkustu'], ['lipipsscabc']], [['bc&thequicertthelazydg^%'], ['xy&pdamqeyanppdahwvuzc^%'], ['fg&xliuymgivxxlipedchk^%']], [['helbc%bc^d&^%d&^%lomy'], ['dahxy%xy^z&^%z&^%hkiu'], ['lipfg%fg^h&^%h&^%psqc']], [['hi    etabcdefghijklhellogfa  a g^f helbcmld'], ['de    apwxyzabcdefghdahhkcbw  w c^b dahxyihz'], ['lm    ixefghijklmnoplippskje  e k^j lipfgqph']], [['helllogfa wethorld'], ['dahhhkcbw sapdknhz'], ['lipppskje aixlsvph']], [['hellhi    et a gf helbcd&^%lomyfriendlogfa'], ['dahhde    ap w cb dahxyz&^%hkiubneajzhkcbw'], ['lipplm    ix e kj lipfgh&^%psqcjvmirhpskje']], [['abcdefghijklmnopqrstuhi    et  g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde    ap  c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm    ix  k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['hello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzd'], ['dahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvz'], ['lipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdh']], [['helbcmld&^%lo'], ['dahxyihz&^%hk'], ['lipfgqph&^%ps']], [['hellogmyfriend&^%lomyfriendgfboc&^hello%'], ['dahhkciubneajz&^%hkiubneajzcbxky&^dahhk%'], ['lippskqcjvmirh&^%psqcjvmirhkjfsg&^lipps%']], [['abcdyzzefghijklmnopqrsthi    ehellot a gnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp w cjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx e krhyzbcd']], [['helbcmld'], ['dahxyihz'], ['lipfgqph']], [['heriennduvxyz'], ['daneajjzqrtuv'], ['livmirrhyzbcd']], [['hellogmyfriend&^%lomhi    et a %lo myfriendfriend'], ['dahhkciubneajz&^%hkide    ap w %hk iubneajzbneajz'], ['lippskqcjvmirh&^%psqlm    ix e %ps qcjvmirhjvmirh']], [['yzzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cddcdddddddddddddddddddddddddddddddddd']], [['boc&hi    et  a g^f helbcmld&^%lo myfriend^heo%'], ['xky&de    ap  w c^b dahxyihz&^%hk iubneajz^dak%'], ['fsg&lm    ix  e k^j lipfgqph&^%ps qcjvmirh^lis%']], [['abcdyzzefghijklmnopqrsthi    ehellot agnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp wcjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx ekrhyzbcd']], [['thequickbromohwellogfa wethorldwnfoxjumpsoverdog'], ['pdamqeygxnkikdsahhkcbw sapdknhzsjbktfqilokranzkc'], ['xliuymgofvsqslaippskje aixlsvpharjsbnyqtwszivhsk']], [['hihihellogmyfriendellogmyfriiend'], ['dededahhkciubneajzahhkciubneeajz'], ['lmlmlippskqcjvmirhippskqcjvmmirh']], [['bdcd&^%'], ['xzyz&^%'], ['fhgh&^%']], [['thequickbrownfoxydhhillogfaelloo'], ['pdamqeygxnksjbktuzddehhkcbwahhkk'], ['xliuymgofvsarjsbchllmppskjeippss']], [['helbcdhibc&^%'], ['dahxyzdexy&^%'], ['lipfghlmfg&^%']], [['thequiutckbrownfoxjumpstovelazydo'], ['pdamqeqpygxnksjbktfqilopkrahwvuzk'], ['xliuymyxgofvsarjsbnyqtwxszipedchs']], [['bc&^%thequicerthelazydothkbroswnfoxjumpsovtheqkbrownfoxydoerthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnkosjbktfqilokrpdamgxnksjbktuzkanpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvswarjsbnyqtwszxliuofvsarjsbchsivxlipedchs&^%']], [['theqcuickabcdefghinhjklmnopqrstuvxyzbrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdejdfghijklmnopqrtuvxnksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmrlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddddddddddddddddddddddddddddd']], [['herienduvxyhi    et a gf hellogmyfienddz'], ['daneajzqrtude    ap w cb dahhkciubeajzzv'], ['livmirhyzbclm    ix e kj lippskqcjmirhhd']], [['hi    et a gf heflbcmhelbcmd&^%lomyfriendd&^%lo cmyfend'], ['de    ap w cb dabhxyidahxyiz&^%hkiubneajzz&^%hk yiubajz'], ['lm    ix e kj lijpfgqlipfgqh&^%psqcjvmirhh&^%ps gqcjirh']], [['gghelbcdworlwxyyd&^thequickbrownfoxjuthequickbromownfoxjumpsoverdogmpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuz&^pdamqeygxnksjbktfqpdamqeygxnkiksjbktfqilokranzkcilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabcch&^xliuymgofvsarjsbnyxliuymgofvsqsarjsbnyqtwszivhskqtwszivxlipedchs%psqcplipps']], [['hellogmyfrithequiend&^%lomhi s   et a gf helbcmd&^%lo myfriendfriend'], ['dahhkciubnepdamqeajz&^%hkide o   ap w cb dahxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmxliuymirh&^%psqlm w   ix e kj lipfgqh&^%ps qcjvmirhjvmirh']], [['ywxytheqcuickbrownfoxjumpsoverthelazydog'], ['ustupdamyqeygxnksjbktfqilokranpdahwvuzkc'], ['cabcxliugymgofvsarjsbnyqtwszivxlipedchsk']], [['hellogfa wetoorld'], ['dahhkcbw sapkknhz'], ['lippskje aixssvph']], [['bcbcmd&^%lobc&^%'], ['xyxyiz&^%hkxy&^%'], ['fgfgqh&^%psfg&^%']], [['theqcuickabcdefghihjklmehellotnfoxjumpsoverthoelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghiadahhkpjbktfqilokranpdkahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqilippsxrjsbnyqtwszivxlsiplippskqcjvmirhedchsk']], [['abcdyzzefghijklmnopqrsthhelbcdhii    ehellot a gnduvxyz'], ['wxyzuvvabcdefghijklmnopddahxyzdee    adahhkp w cjzqrtuv'], ['efghcddijklmnopqrstuvwxllipfghlmm    ilippsx e krhyzbcd']], [['gnduvxyz%bcdhelwxyl%'], ['cjzqrtuv%xyzdahstuh%'], ['krhyzbcd%fghlipabcp%']], [['r'], ['n'], ['v']], [['hi    et a gf helbcd&^%lomy fiend'], ['de    ap w cb dahxyz&^%hkiu beajz'], ['lm    ix e kj lipfgh&^%psqc jmirh']], [['bc&thequicertthelazydhellog^%'], ['xy&pdamqeyanppdahwvuzdahhkc^%'], ['fg&xliuymgivxxlipedchlippsk^%']], [['ob%'], ['kx%'], ['sf%']], [['%%bc^d&hellogfa worwethorld^%'], ['%%xy^z&dahhkcbw sknsapdknhz^%'], ['%%fg^h&lippskje asvaixlsvph^%']], [['wxabcdefghijklmnopqrstuhi    et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['stwxyzabcdefghijklmnopqde    ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['abefghijklmnopqrstuvwxylm    ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['gfhello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzds'], ['cbdahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvzo'], ['kjlipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdhw']], [['hi    et a gftheqkbrowfnfoxydo helbcmhelbcmd&^%lomyfiriendd&^%lo myfrd'], ['de    ap w cbpdamgxnksbjbktuzk dahxyidahxyiz&^%hkiubeneajzz&^%hk iubnz'], ['lm    ix e kjxliuofvsajrjsbchs lipfgqlipfgqh&^%psqcjmvmirhh&^%ps qcjvh']], [['ehebc&^hello%'], ['adaxy&^dahhk%'], ['ilifg&^lipps%']], [['abcdyzzefghijklmnopqrsthi    ehellot ahellhi gnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp wdahhde cjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx elipplm krhyzbcd']], [['hellogmyfienid'], ['dahhkciubeajez'], ['lippskqcjmirmh']], [['hhelelooywxy'], ['ddahahkkustu'], ['llipipsscabc']], [['hellthequiuckbrownfoxjumpsoverthelazydoaaogfa worl d'], ['dahhpdamqeqygxnksjbktfqilokranpdahwvuzkwwkcbw sknh z'], ['lippxliuymygofvsarjsbnyqtwszivxlipedchseeskje asvp h']], [['fgyzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzzf'], ['bcuvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvvb'], ['jkcdcdddddlippsddddddddddddddddddddddddddddj']], [['thequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfo'], ['pdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbk'], ['xliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjs']], [['hi    et a gf helbcdhi    et a gf helylogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzde    ap w cb dahuhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlm    ix e kj lipcpskqcjvmirh&^%psqcjvmirh']], [['bcdd&^%%'], ['xyzz&^%%'], ['fghh&^%%']], [['%bob%cd&^%'], ['%xkx%yz&^%'], ['%fsf%gh&^%']], [['hi    et  ah gf helbcmld&^%lo myfriend'], ['de    ap  wd cb dahxyihz&^%hk iubneajz'], ['lm    ix  el kj lipfgqph&^%ps qcjvmirh']], [['hi r  et a gf helbcmd&^% lomyfriend'], ['de n  ap w cb dahxyiz&^% hkiubneajz'], ['lm v  ix e kj lipfgqh&^% psqcjvmirh']], [['bc&^%thequicerthelazydoghelbcmd&^%lobc&^yzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzz%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&^%hkxy&^uvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvv%'], ['fg&^%xliuymgivxlipedchsklipfgqh&^%psfg&^cdcdddddlippsdddddddddddddddddddddddddddd%']], [['hellogmyfrithequickbromwnfoxjumpsoverthelazylbcmd&^%lo myfriendfriend'], ['dahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuhxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedcpfgqh&^%ps qcjvmirhjvmirh']], [['hi    ehellott a gf hellogmyfrielnd'], ['de    adahhkpp w cb dahhkciubneahjz'], ['lm    ilippsxx e kj lippskqcjvmiprh']], [['worlwxdgf%b^c^d&^%'], ['sknhstzcb%x^y^z&^%'], ['asvpabhkj%f^g^h&^%']], [['hhelelooywxys'], ['ddahahkkustuo'], ['llipipsscabcw']], [['booc&^hello%'], ['xkky&^dahhk%'], ['fssg&^lipps%']], [['hellogmyfriend&^%lomyfrithequickbrownfoxjumpsovworwethorlderthelazydf'], ['dahhkciubneajz&^%hkiubnepdamqeygxnksjbktfqilokrsknsapdknhzanpdahwvuzb'], ['lippskqcjvmirh&^%psqcjvmxliuymgofvsarjsbnyqtwszasvaixlsvphivxlipedchj']], [['bc&^%thequicertwethorldwnfoxjumpsoverdoghelazydogmd&&abc&^%'], ['xy&^%pdamqeyanpsapdknhzsjbktfqilokranzkcdahwvuzkciz&&wxy&^%'], ['fg&^%xliuymgivxaixlsvpharjsbnyqtwszivhsklipedchskqh&&efg&^%']], [['thequtickborobc&thequicertthelazydg^%wnfoxydo'], ['pdamqpeygxknkxy&pdamqeyanppdahwvuzc^%sjbktuzk'], ['xliuyxmgofsvsfg&xliuymgivxxlipedchk^%arjsbchs']], [['bc&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['xy&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['fg&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']], [['hellogmyfthequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfoiend'], ['dahhkciubpdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbkeajz'], ['lippskqcjxliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjsmirh']], [['thequicetazydog'], ['pdamqeyapwvuzkc'], ['xliuymgixedchsk']], [['hellogmyfrriend&^%lomyfriendgf'], ['dahhkciubnneajz&^%hkiubneajzcb'], ['lippskqcjvvmirh&^%psqcjvmirhkj']], [['woretaahorld'], ['sknapwwdknhz'], ['asvixeelsvph']], [['ld'], ['hz'], ['ph']], [['helelooywxyhi    eiend'], ['dahahkkustude    aeajz'], ['lipipsscabclm    imirh']], [['woretarahorld'], ['sknapwnwdknhz'], ['asvixevelsvph']], [['bcdd&^d%'], ['xyzz&^z%'], ['fghh&^h%']], [['gghelbcdworlwxyybrownfoxjumpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuxnksjbktfqilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabccfvsarjsbnyqtwszivxlipedchs%psqcplipps']], [['whellomyfrienduvxyhelbcthequickbrownfoxbcdd&^%ydoyrlwxyyd'], ['sdahhkiubneajzqrtudahxypdamqeygxnksjbktxyzz&^%uzkunhstuuz'], ['alippsqcjvmirhyzbclipfgxliuymgofvsarjsbfghh&^%chscvpabcch']], [['wethorldwnfoxjumpsoverdog'], ['sapdknhzsjbktfqilokranzkc'], ['aixlsvpharjsbnyqtwszivhsk']], [['etabcdefghijklhellogfa'], ['apwxyzabcdefghdahhkcbw'], ['ixefghijklmnoplippskje']], [['hi    et sa gf helbcdhi    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap ow cb dahxyzde    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix we kj lipfghlm    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['thequicwkbrthequicerthelazydogownofoxjumpszytdo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilovupzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwdcxhs']], [['theqcuickabcdefghihjklmno%bcdhethequieceurtthelazydogydog'], ['pdamyqeygwxyzabcdedfghijk%xyzdapdamqeayaqnppdahwvuzkcuzkc'], ['xliugymgoefghijklmlnopqrs%fghlixliuymigiyvxxlipedchskchsk']], [['ahellhi'], ['wdahhde'], ['elipplm']], [['hi    et a gf helleomyfriened'], ['de    ap w cb dahhakiubneajaz'], ['lm    ix e kj lippisqcjvmirih']], [['hi    et a g'], ['de    ap w c'], ['lm    ix e k']], [['helbcmd&^%l'], ['dahxyiz&^%h'], ['lipfgqh&^%p']], [['helbc%bc^d&^%d&^%lomworwethorld^%y'], ['dahxy%xy^z&^%z&^%hkisknsapdknhz^%u'], ['lipfg%fg^h&^%h&^%psqasvaixlsvph^%c']], [['rgfhello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzds'], ['ncbdahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvzo'], ['vkjlipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdhw']], [['myfedamnopqrstrhind'], ['iubazwijklmnopndejz'], ['qcjiheqrstuvwxvlmrh']], [['abcdefghijklmnopqrstuvxyo%bcdhelwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyzdahstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghlipabcps&^%d']], [['hi    e g'], ['de    a c'], ['lm    i k']], [['ahelthequickbrownfoxydolhi'], ['wdahpdamqeygxnksjbktuzkhde'], ['elipxliuymgofvsarjsbchsplm']], [['thequicerthequcekbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuygiofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['bc&^%thequicyxwxyeroswnfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyutstuankosjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgcbabcivswarjsbnyqtwszivxlipedchs&^%']], [['bchi r  et a gf helbcmd&^% lomyfriend&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['xyde n  ap w cb dahxyiz&^% hkiubneajz&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['fglm v  ix e kj lipfgqh&^% psqcjvmirh&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']], [['worlafbcdefghijklhellogfa'], ['sknhwbxyzabcdefghdahhkcbw'], ['asvpejfghijklmnoplippskje']], [['ghellogmyfrithequickbromwnfoxjumpsoverthelazylbcmd&^%lofs'], ['cdahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuhxyiz&^%hkbo'], ['klippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedcpfgqh&^%psjw']], [['heflbklmnopqrsthilomyfriend'], ['dabhxghijklmnopdehkiubneajz'], ['lijpfopqrstuvwxlmpsqcjvmirh']], [['abcdyzzefghijklmnopqrsthi    ehellot a gnd'], ['wxyzuvvabcdefghijklmnopde    adahhkp w cjz'], ['efghcddijklmnopqrstuvwxlm    ilippsx e krh']], [['heyzzzbcdhibc&^%'], ['dauvvvxyzdexy&^%'], ['licdddfghlmfg&^%']], [['yzyyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdccdddddddddddddddddddddddddddddddddd']], [['abcdefghijklmnopqrstuvxyo%bcdhelhellogfa wetorldwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyzdahdahhkcbw sapknhzstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghliplippskje aixsvphabcps&^%d']], [['%%bdc^d&^%'], ['%%xzy^z&^%'], ['%%fhg^h&^%']], [['helbcmlld'], ['dahxyihhz'], ['lipfgqpph']], [['myfrieendvwxyz'], ['iubneaajzrstuv'], ['qcjvmiirhzabcd']], [['bc&thequricertthelazydog^%'], ['xy&pdamqneyanppdahwvuzkc^%'], ['fg&xliuyvmgivxxlipedchsk^%']], [['bc&^%thequicehwellogfa wethorldhelazydogbc&^%'], ['xy&^%pdamqeyadsahhkcbw sapdknhzdahwvuzkcxy&^%'], ['fg&^%xliuymgilaippskje aixlsvphlipedchskfg&^%']], [['hi    et a gf helbcd&^%lomy yfriend'], ['de    ap w cb dahxyz&^%hkiu ubneajz'], ['lm    ix e kj lipfgh&^%psqc cjvmirh']], [['hi    et a gf helbcmd&^%lo myfrhellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfririendiend'], ['de    ap w cb dahxyiz&^%hk iubndahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneneajzeajz'], ['lm    ix e kj lipfgqh&^%ps qcjvlippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmvmirhmirh']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzmyfriend^heo%zzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvviubneajz^dak%vvvvv'], ['cdcdddddddddddddddddddddddddddqcjvmirh^lis%ddddd']], [['thehelbc%bc^d&^%d&^%lomyquicerpsoverthelazydogthelazydog'], ['pdadahxy%xy^z&^%z&^%hkiumqeyanlokranpdahwvuzkcpdahwvuzkc'], ['xlilipfg%fg^h&^%h&^%psqcuymgivtwszivxlipedchskxlipedchsk']], [['eeheabcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzo'], ['aadawxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvk'], ['iiliefghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcds']], [['helylogmyfriend&^%lomyfriend'], ['dahuhkciubneajz&^%hkiubneajz'], ['lipcpskqcjvmirh&^%psqcjvmirh']], [['theqfkbrowfnfoxydo'], ['pdambgxnksbjbktuzk'], ['xliujofvsajrjsbchs']], [['eello'], ['aahhk'], ['iipps']], [['bc&threquicertthelazydhellog^%'], ['xy&pdnamqeyanppdahwvuzdahhkc^%'], ['fg&xlviuymgivxxlipedchlippsk^%']], [['hi    et a gf hiend'], ['de    ap w cb deajz'], ['lm    ix e kj lmirh']], [['hellond'], ['dahhkjz'], ['lippsrh']], [['hi    etg^f helbcmld'], ['de    apc^b dahxyihz'], ['lm    ixk^j lipfgqph']], [['yzzzzob%zzzzzzzzzzzzzzzzzzzzz'], ['uvvvvkx%vvvvvvvvvvvvvvvvvvvvv'], ['cddddsf%ddddddddddddddddddddd']], [['abcdefghijklmnopqrstuhi'], ['wxyzabcdefghijklmnopqde'], ['efghijklmnopqrstuvwxylm']], [['hi r   et a gf helbcmd&^%lomyfiend'], ['de n   ap w cb dahxyiz&^%hkiubeajz'], ['lm v   ix e kj lipfgqh&^%psqcjmirh']], [['hi r  et helelooa gf helbcmd&^%lomyfriend'], ['de n  ap dahahkkw cb dahxyiz&^%hkiubneajz'], ['lm v  ix lipipsse kj lipfgqh&^%psqcjvmirh']], [['hellomyfrienduvxyzo'], ['dahhkiubneajzqrtuvk'], ['lippsqcjvmirhyzbcds']], [['myhi    et a gf heflbcmhelbcmd&^%lomyfriendd&^%lo cmyfendfriendvwxyz'], ['iude    ap w cb dabhxyidahxyiz&^%hkiubneajzz&^%hk yiubajzbneajzrstuv'], ['qclm    ix e kj lijpfgqlipfgqh&^%psqcjvmirhh&^%ps gqcjirhjvmirhzabcd']], [['thequicwkbrthequicerthelazydogownofoxjheleloompszydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfdahahkkilovuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnlipipssqtwdchs']], [['hielbecmd&^%loomyfriend'], ['deahxayiz&^%hkkiubneajz'], ['lmipfigqh&^%pssqcjvmirh']], [['orlwxyyd'], ['knhstuuz'], ['svpabcch']], [['hello oworrld'], ['dahhk ksknnhz'], ['lipps sasvvph']], [['ggfgf'], ['ccbcb'], ['kkjkj']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzhellogmyfriend&^%lomhizzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvdahhkciubneajz&^%hkidevvvvvvvvvvv'], ['cdcdddddddddddddddddddddddlippskqcjvmirh&^%psqlmddddddddddd']], [['gabcdefghijklmnopqrstuvxyfo%bcdhelhellogfagfgf'], ['cwxyzabcdefghijklmnopqrtubk%xyzdahdahhkcbwcbcb'], ['kefghijklmnopqrstuvwxyzbcjs%fghliplippskjekjkj']], [['gf%^b^c^d&^%'], ['cb%^x^y^z&^%'], ['kj%^f^g^h&^%']], [['thequhelbcmld&i^%loicerthelazy%doag'], ['pdamqdahxyihz&e^%hkeyanpdahwvu%zkwc'], ['xliuylipfgqph&m^%psmgivxlipedc%hsek']], [['hellogymyfriend&^%lomyfriendgthequickbrthequicerthelazydogownfoxjumpsoverthelazydof'], ['dahhkcuiubneajz&^%hkiubneajzcpdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokranpdahwvuzkb'], ['lippskcqcjvmirh&^%psqcjvmirhkxliuymgofvxliuymgivxlipedchsksarjsbnyqtwszivxlipedchsj']], [['abcdetuvxyz'], ['wxyzapqrtuv'], ['efghixyzbcd']], [['hhillogfaell%b^c^d&^d%o'], ['ddehhkcbwahh%x^y^z&^z%k'], ['llmppskjeipp%f^g^h&^h%s']], [['bc&^%uthequicertdhelazydohigheblbcmd&^%lobc&^%'], ['xy&^%qpdamqeyanpzdahwvuzkdecdaxhxyiz&^%hkxy&^%'], ['fg&^%yxliuymgivxhlipedchslmklifpfgqh&^%psfg&^%']], [['rworl'], ['nsknh'], ['vasvp']], [['hellogymyfriend&^%lomyfrriendgf'], ['dahhkcuiubneajz&^%hkiubnneajzcb'], ['lippskcqcjvmirh&^%psqcjvvmirhkj']], [['heflbcmhelbcmd&^%lomyfriendd&^%lo'], ['dabhxyidahxyiz&^%hkiubneajzz&^%hk'], ['lijpfgqlipfgqh&^%psqcjvmirhh&^%ps']], [['bb'], ['xx'], ['ff']], [['worlafbcdefghhelbcmd&^%lomyfriendijklhellogfa'], ['sknhwbxyzabcddahxyiz&^%hkiubneajzefghdahhkcbw'], ['asvpejfghijkllipfgqh&^%psqcjvmirhmnoplippskje']], [['athequicwkbrthequicerthelazydogaownofoxjumpsoverthelazydo'], ['wpdamqeysgxnpdamqeyanpdahwvuzkcwksjkbktfqilokranpdahwvuzk'], ['exliuymgaofvxliuymgivxlipedchskesarsjsbnyqtwszivxlipedchs']], [['ahellogfa'], ['wdahhkcbw'], ['elippskje']], [['hi    et aa gf helbcmhelbcmd&^%lomyfriendd&^%lo myfriend'], ['de    ap ww cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubneajz'], ['lm    ix ee kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjvmirh']], [['worwethorld^%'], ['sknsapdknhz^%'], ['asvaixlsvph^%']], [['hhehi    etabcdefghijklhellogfa  a g^f helbcmldlelooywxys'], ['ddade    apwxyzabcdefghdahhkcbw  w c^b dahxyihzhahkkustuo'], ['llilm    ixefghijklmnoplippskje  e k^j lipfgqphpipsscabcw']], [['g^f'], ['c^b'], ['k^j']], [['abcdefghijklmnopqrstuhi     et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde     ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm     ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['thequickbrthequicqerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeymanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymguivxlipedchsksarjsbnyqtwszipedchs']], [['worlafbcdefghijklhellheyzzzbcdhibc&^%ogfa'], ['sknhwbxyzabcdefghdahhdauvvvxyzdexy&^%kcbw'], ['asvpejfghijklmnoplipplicdddfghlmfg&^%skje']], [['abcdyzzefghijklmnopqrsthi'], ['wxyzuvvabcdefghijklmnopde'], ['efghcddijklmnopqrstuvwxlm']], [['hi%%bc^d&hellogfa worwetbc&thequricertthelazydog^%horld^%'], ['de%%xy^z&dahhkcbw sknsapxy&pdamqneyanppdahwvuzkc^%dknhz^%'], ['lm%%fg^h&lippskje asvaixfg&xliuyvmgivxxlipedchsk^%lsvph^%']], [['o%bcdhe&^%'], ['k%xyzda&^%'], ['s%fghli&^%']], [['%bdcthkbrvownfoxjumpsoverthelazydod&^%'], ['%xzypdgxnrksjbktfqilokranpdahwvuzkz&^%'], ['%fhgxlofvzsarjsbnyqtwszivxlipedchsh&^%']], [['hmyfriendfyfriendelgflo'], ['diubneajzbubneajzahcbhk'], ['lqcjvmirhjcjvmirhipkjps']], [['thequhellogmyfthequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfoiendrtazydog'], ['pdamqdahhkciubpdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbkeajznpwvuzkc'], ['xliuylippskqcjxliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjsmirhvxedchsk']], [['theqcuickbrownfoxjumpsoverthbc&^%thequicerthela^zydoghelbcmd&&^%lobc&^%og'], ['pdamyqeygxnksjbktfqilokranpdxy&^%pdamqeyanpdahw^vuzkcdahxyiz&&^%hkxy&^%kc'], ['xliugymgofvsarjsbnyqtwszivxlfg&^%xliuymgivxlipe^dchsklipfgqh&&^%psfg&^%sk']], [['thequickbrownfoxjumpsovertheloazydfo'], ['pdamqeygxnksjbktfqilokranpdahkwvuzbk'], ['xliuymgofvsarjsbnyqtwszivxlipsedchjs']], [['yzzzz'], ['uvvvv'], ['cdddd']], [['bcddd&^%'], ['xyzzz&^%'], ['fghhh&^%']], [['worwetbc&thequricertthelazydog^%horld^%'], ['sknsapxy&pdamqneyanppdahwvuzkc^%dknhz^%'], ['asvaixfg&xliuyvmgivxxlipedchsk^%lsvph^%']], [['hellogfatoorld'], ['dahhkcbwpkknhz'], ['lippskjexssvph']], [['theqcuickbrownfoxjumheleloopsooverthelazbydog'], ['pdamyqeygxnksjbktfqidahahkklokkranpdahwvxuzkc'], ['xliugymgofvsarjsbnyqlipipsstwsszivxlipedfchsk']], [['hi    et a gf hethequickborownfoxydolbcd&^%lomyfriend'], ['de    ap w cb dapdamqeygxknksjbktuzkhxyz&^%hkiubneajz'], ['lm    ix e kj lixliuymgofsvsarjsbchspfgh&^%psqcjvmirh']], [['woworwethorlldrwlwxd'], ['sksknsapdknhhznshstz'], ['asasvaixlsvpphvapabh']], [['theqcrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamynksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['heflbklmnopqrsthilomyfrien'], ['dabhxghijklmnopdehkiubneaj'], ['lijpfopqrstuvwxlmpsqcjvmir']], [['hi    ehellot a gf helahelthequickbrownfoxydolhilogmyfriend'], ['de    adahhkp w cb dahwdahpdamqeygxnksjbktuzkhdehkciubneajz'], ['lm    ilippsx e kj lipelipxliuymgofvsarjsbchsplmpskqcjvmirh']], [['helbcml'], ['dahxyih'], ['lipfgqp']], [['hellogmyfriithequiend&^%lomhi'], ['dahhkciubneepdamqeajz&^%hkide'], ['lippskqcjvmmxliuymirh&^%psqlm']], [['helbc%bc^d&^%d&^%lommworwethorld^%y'], ['dahxy%xy^z&^%z&^%hkiisknsapdknhz^%u'], ['lipfg%fg^h&^%h&^%psqqasvaixlsvph^%c']], [['wxabcdefghijklmnopqrstuhi'], ['stwxyzabcdefghijklmnopqde'], ['abefghijklmnopqrstuvwxylm']], [['afbcdefghijklhellogfa xyz'], ['wbxyzabcdefghdahhkcbw tuv'], ['ejfghijklmnoplippskje bcd']], [['abcdefghijklhellogfa'], ['wxyzabcdefghdahhkcbw'], ['efghijklmnoplippskje']], [['hwelhellogfa wethorldlogfa wethorldd'], ['dsahdahhkcbw sapdknhzhkcbw sapdknhzz'], ['laiplippskje aixlsvphpskje aixlsvphh']], [['bc&^%thequicerth^elazydogbc&^%'], ['xy&^%pdamqeyanpd^ahwvuzkcxy&^%'], ['fg&^%xliuymgivxl^ipedchskfg&^%']], [['h ello oworrld'], ['d ahhk ksknnhz'], ['l ipps sasvvph']], [['ggherthelazydou%lomylhello'], ['ccdanpdahwvuzkq%hkiuhdahhk'], ['kklivxlipedchsy%psqcplipps']], [['%bcdhelwxyl&o&^%'], ['%xyzdahstuh&k&^%'], ['%fghlipabcp&s&^%']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzztheqcuickabcdefghihjklmnopqrstuvxyzbrownfoxjumpsoverthelhellzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvpdamyqeygwxyzabcdedfghijklmnopqrtuvxnksjbktfqilokranpdahdahhvv'], ['cdcdddddddddddddddddddddddddddddxliugymgoefghijklmlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippdd']], [['abacdefghijklmnopqrstuvwxyz'], ['wxwyzabcdefghijklmnopqrstuv'], ['efeghijklmnopqrstuvwxyzabcd']], [['thequickbrownftheqcuickabcdefghihjklmno%bcdhethequieceurtthelazydogydogoxjumpsoverthelazyd'], ['pdamqeygxnksjbpdamyqeygwxyzabcdedfghijk%xyzdapdamqeayaqnppdahwvuzkcuzkcktfqilokranpdahwvuz'], ['xliuymgofvsarjxliugymgoefghijklmlnopqrs%fghlixliuymigiyvxxlipedchskchsksbnyqtwszivxlipedch']], [['thheflbcmhelbcmd&^%lomyfriendd&^%louiceurtazydog'], ['pddabhxyidahxyiz&^%hkiubneajzz&^%hkqeyaqnpwvuzkc'], ['xllijpfgqlipfgqh&^%psqcjvmirhh&^%psymgiyvxedchsk']], [['abcdefghijklmnopqrstuvxyo%bcdxhelwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyztdahstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghblipabcps&^%d']], [['hefmnopqrsthilomyfrien'], ['dabijklmnopdehkiubneaj'], ['lijqrstuvwxlmpsqcjvmir']], [['zyzzz'], ['vuvvv'], ['dcddd']], [['lomyfriend&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['hkiubneajz&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['psqcjvmirh&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']]], [[['hi'], ['de'], ['lm']], [['asdfghjkl'], ['wozbcdfgh'], ['ewhjklnop']], [['gf'], ['cb'], ['kj']], [['et'], ['ap'], ['ix']], [['faewfawefaewg'], ['bwasbwsabwasc'], ['jeiajeaijeiak']], [['hellomyfriend'], ['dahhkiubneajz'], ['lippsqcjvmirh']], [['dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'], ['ztvzhijehbqdiehqbdhedqbjiheijqbdheijqbdbqyqbd'], ['hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl']], [['a'], ['w'], ['e']], [['abcde'], ['wxyza'], ['efghi']], [['uvwxyz'], ['qrstuv'], ['yzabcd']], [['test123'], ['paop123'], ['xiwx123']], [['1a2b3c'], ['1w2x3y'], ['1e2f3g']], [['hello world'], ['dahhk sknhz'], ['lipps asvph']], [['monitor'], ['ikjepkn'], ['qsrmxsv']], [['abc'], ['wxy'], ['efg']], [['kmt'], ['gip'], ['oqx']], [['park'], ['lwng'], ['tevo']], [['mtkmt'], ['ipgip'], ['qxoqx']], [['testpark123'], ['paoplwng123'], ['xiwxtevo123']], [['uvuvwxyzwxyz'], ['qrqrstuvstuv'], ['yzyzabcdabcd']], [['abcdetest123'], ['wxyzapaop123'], ['efghixiwx123']], [['testpark1233'], ['paoplwng1233'], ['xiwxtevo1233']], [['parrte1a2b3cstpark123'], ['lwnnpa1w2x3yoplwng123'], ['tevvxi1e2f3gwxtevo123']], [['pamonitork'], ['lwikjepkng'], ['teqsrmxsvo']], [['uvwabcxyuz'], ['qrswxytuqv'], ['yzaefgbcyd']], [['uvuvwxyzwxz'], ['qrqrstuvstv'], ['yzyzabcdabd']], [['t'], ['p'], ['x']], [['uvz'], ['qrv'], ['yzd']], [['kuvz'], ['gqrv'], ['oyzd']], [['kkuvz'], ['ggqrv'], ['ooyzd']], [['abct'], ['wxyp'], ['efgx']], [['tes2tpark1233'], ['pao2plwng1233'], ['xiw2xtevo1233']], [['at'], ['wp'], ['ex']], [['tkmtkmtuvwabcxyuzmt'], ['pgipgipqrswxytuqvip'], ['xoqxoqxyzaefgbcydqx']], [['uvuvwxyzwxzyz'], ['qrqrstuvstvuv'], ['yzyzabcdabdcd']], [['tkmtkmtuvwabuvuvwxyzwxzcxyuzmt'], ['pgipgipqrswxqrqrstuvstvytuqvip'], ['xoqxoqxyzaefyzyzabcdabdgbcydqx']], [['tsest123'], ['poaop123'], ['xwiwx123']], [['uvutvwxyzwxzyz'], ['qrqprstuvstvuv'], ['yzyxzabcdabdcd']], [['uvwparrkxyz'], ['qrslwnngtuv'], ['yzatevvobcd']], [['tsest123aparrte1a2b3cstpark123'], ['poaop123wlwnnpa1w2x3yoplwng123'], ['xwiwx123etevvxi1e2f3gwxtevo123']], [['abctabcde'], ['wxypwxyza'], ['efgxefghi']], [['tes2testpark123tpark1233'], ['pao2paoplwng123plwng1233'], ['xiw2xiwxtevo123xtevo1233']], [['uvwabbczxyuz'], ['qrswxxyvtuqv'], ['yzaeffgdbcyd']], [['uvvz'], ['qrrv'], ['yzzd']], [['tsest123aparrte1a2b3cstpatrk123'], ['poaop123wlwnnpa1w2x3yoplwpng123'], ['xwiwx123etevvxi1e2f3gwxtexvo123']], [['paabctak'], ['lwwxypwg'], ['teefgxeo']], [['zz'], ['vv'], ['dd']], [['pararte1a2b3cstpark123'], ['lwnwnpa1w2x3yoplwng123'], ['tevevxi1e2f3gwxtevo123']], [['pamonintork'], ['lwikjejpkng'], ['teqsrmrxsvo']], [['uvutvwxyzwxzyzabckuvz'], ['qrqprstuvstvuvwxygqrv'], ['yzyxzabcdabdcdefgoyzd']], [['uvutvwzzxyzwxzyz'], ['qrqprsvvtuvstvuv'], ['yzyxzaddbcdabdcd']], [['tabcdtabcde'], ['pwxyzpwxyza'], ['xefghxefghi']], [['uvwxwyz'], ['qrstsuv'], ['yzabacd']], [['aabcde'], ['wwxyza'], ['eefghi']], [['cpararte1a2b3cstpark1abct23'], ['ylwnwnpa1w2x3yoplwng1wxyp23'], ['gtevevxi1e2f3gwxtevo1efgx23']], [['tse3st23'], ['poa3op23'], ['xwi3wx23']], [['mtuvwxyzkmt'], ['ipqrstuvgip'], ['qxyzabcdoqx']], [['tsest123aparrte1a2b3cstapark123'], ['poaop123wlwnnpa1w2x3yopwlwng123'], ['xwiwx123etevvxi1e2f3gwxetevo123']], [['cpaararuvvzte1a2b3cstpark1abct23'], ['ylwwnwnqrrvpa1w2x3yoplwng1wxyp23'], ['gteevevyzzdxi1e2f3gwxtevo1efgx23']], [['tse32st23'], ['poa32op23'], ['xwi32wx23']], [['uvutvwxyzwxzyzabckumtkmtvz'], ['qrqprstuvstvuvwxygqipgiprv'], ['yzyxzabcdabdcdefgoyqxoqxzd']], [['uvwaubcxyuz'], ['qrswqxytuqv'], ['yzaeyfgbcyd']], [['abuvutvwxyzwxzyzabckuvzct'], ['wxqrqprstuvstvuvwxygqrvyp'], ['efyzyxzabcdabdcdefgoyzdgx']], [['tes2testppark1233'], ['pao2paopllwng1233'], ['xiw2xiwxttevo1233']], [['uvwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz'], ['qrstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv'], ['yzabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad']], [['xuvuvwxyzwxzyz'], ['tqrqrstuvstvuv'], ['byzyzabcdabdcd']], [['wuvwxyz'], ['sqrstuv'], ['ayzabcd']], [['aabdcde'], ['wwxzyza'], ['eefhghi']], [['uvwxyzwxyz'], ['qrstuvstuv'], ['yzabcdabcd']], [['cpararte1a2b3cstpark1abctuvwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz23'], ['ylwnwnpa1w2x3yoplwng1wxypqrstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv23'], ['gtevevxi1e2f3gwxtevo1efgxyzabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad23']], [['tkumtkmtuvwabuvuvwxyzwxzcxyuzmt'], ['pgqipgipqrswxqrqrstuvstvytuqvip'], ['xoyqxoqxyzaefyzyzabcdabdgbcydqx']], [['uvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywz'], ['qrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusv'], ['yzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcad']], [['wuvwxyzz'], ['sqrstuvv'], ['ayzabcdd']], [['xzyzabckumtkmtvz'], ['tvuvwxygqipgiprv'], ['bdcdefgoyqxoqxzd']], [['zzz'], ['vvv'], ['ddd']], [['ts2e3st23'], ['po2a3op23'], ['xw2i3wx23']], [['uvzmonitorz'], ['qrvikjepknv'], ['yzdqsrmxsvd']], [['t3se3'], ['p3oa3'], ['x3wi3']], [['uvutvwzzxz'], ['qrqprsvvtv'], ['yzyxzaddbd']], [['uvuvzwxyzwxz'], ['qrqrvstuvstv'], ['yzyzdabcdabd']], [['cpararteuvwxwyz1a2b3cstpark1abct23'], ['ylwnwnpaqrstsuv1w2x3yoplwng1wxyp23'], ['gtevevxiyzabacd1e2f3gwxtevo1efgx23']], [['stsest123'], ['opoaop123'], ['wxwiwx123']], [['tsest123aparrte1a2b3cstapark1213'], ['poaop123wlwnnpa1w2x3yopwlwng1213'], ['xwiwx123etevvxi1e2f3gwxetevo1213']], [['uvutvwvxyzwxzuvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywz'], ['qrqprsrtuvstvqrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusv'], ['yzyxzazbcdabdyzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcad']], [['kparrte1a2b3cstpark123'], ['glwnnpa1w2x3yoplwng123'], ['otevvxi1e2f3gwxtevo123']], [['pamonintorkpamonitoork'], ['lwikjejpknglwikjepkkng'], ['teqsrmrxsvoteqsrmxssvo']], [['tsestcpararte1a2b3cstpark1abct23123apa3'], ['poaopylwnwnpa1w2x3yoplwng1wxyp23123wlw3'], ['xwiwxgtevevxi1e2f3gwxtevo1efgx23123ete3']], [['abctest123'], ['wxypaop123'], ['efgxiwx123']], [['xzyzauvwxyzwxyzbckumtzkmtvz'], ['tvuvwqrstuvstuvxygqipvgiprv'], ['bdcdeyzabcdabcdfgoyqxdoqxzd']], [['1testpark1233'], ['1paoplwng1233'], ['1xiwxtevo1233']], [['tse32st233'], ['poa32op233'], ['xwi32wx233']], [['testtpark'], ['paopplwng'], ['xiwxxtevo']], [['abuvutvwxystsest123zwxzyzabckuvzct'], ['wxqrqprstuopoaop123vstvuvwxygqrvyp'], ['efyzyxzabcwxwiwx123dabdcdefgoyzdgx']], [['kmuvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywzt'], ['giqrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusvp'], ['oqyzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcadx']], [['xzyzabckumtkmtvzz'], ['tvuvwxygqipgiprvv'], ['bdcdefgoyqxoqxzdd']], [['uvuvwxyzzyzpamonitork'], ['qrqrstuvvuvlwikjepkng'], ['yzyzabcddcdteqsrmxsvo']], [['ut3se3vwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz'], ['qp3oa3rstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv'], ['yx3wi3zabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad']], [['abuvutvwxyzwxvzyzabckuvzct'], ['wxqrqprstuvstrvuvwxygqrvyp'], ['efyzyxzabcdabzdcdefgoyzdgx']], [['monitormuvvztkmt'], ['ikjepkniqrrvpgip'], ['qsrmxsvqyzzdxoqx']], [['uvxwpuvuvwxyzwxyzarrkxyz'], ['qrtslqrqrstuvstuvwnngtuv'], ['yzbatyzyzabcdabcdevvobcd']], [['uvwxzwyz'], ['qrstvsuv'], ['yzabdacd']], [['monitomrmuvvztkmt'], ['ikjepkiniqrrvpgip'], ['qsrmxsqvqyzzdxoqx']], [['parrte1a2b3cstpark123uvwabcxyuzuvwaxbbczxyuz'], ['lwnnpa1w2x3yoplwng123qrswxytuqvqrswtxxyvtuqv'], ['tevvxi1e2f3gwxtevo123yzaefgbcydyzaebffgdbcyd']], [['uvutvwxyzwxzyzabckuvzabctest123'], ['qrqprstuvstvuvwxygqrvwxypaop123'], ['yzyxzabcdabdcdefgoyzdefgxiwx123']], [['parkk'], ['lwngg'], ['tevoo']], [['uvwabbcxzxyuz'], ['qrswxxytvtuqv'], ['yzaeffgbdbcyd']], [['parrte1a2b3cst2park123'], ['lwnnpa1w2x3yop2lwng123'], ['tevvxi1e2f3gwx2tevo123']], [['bcd&^%'], ['xyz&^%'], ['fgh&^%']], [['thequickbrownfoxjumpsoverthelazydog'], ['pdamqeygxnksjbktfqilokranpdahwvuzkc'], ['xliuymgofvsarjsbnyqtwszivxlipedchsk']], [['abcdefghijklmnopqrstuvwxyz'], ['wxyzabcdefghijklmnopqrstuv'], ['efghijklmnopqrstuvwxyzabcd']], [['wxy'], ['stu'], ['abc']], [['yzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cddddddddddddddddddddddddd']], [['hi    et a gf hellomyfriend'], ['de    ap w cb dahhkiubneajz'], ['lm    ix e kj lippsqcjvmirh']], [['thequickbrownfoxjumpsoverthelazydo'], ['pdamqeygxnksjbktfqilokranpdahwvuzk'], ['xliuymgofvsarjsbnyqtwszivxlipedchs']], [['hi    et a gf hellomyfrienhellod'], ['de    ap w cb dahhkiubneajdahhkz'], ['lm    ix e kj lippsqcjvmirlippsh']], [['et'], ['ap'], ['ix']], [['hello'], ['dahhk'], ['lipps']], [['wxxy'], ['sttu'], ['abbc']], [['ho'], ['dk'], ['ls']], [['helo'], ['dahk'], ['lips']], [['heti    get a gf hellomyfrienhellod'], ['dape    cap w cb dahhkiubneajdahhkz'], ['lixm    kix e kj lippsqcjvmirlippsh']], [['helothequickbrownfoxjumpsoverthelazydo'], ['dahkpdamqeygxnksjbktfqilokranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwszivxlipedchs']], [['yzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdddddddddddddddddddddddddd']], [['hbcd&^%elo'], ['dxyz&^%ahk'], ['lfgh&^%ips']], [['b&cd&^'], ['x&yz&^'], ['f&gh&^']], [['ythequickbrownfoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszivxlipedchs']], [['hello heloworld'], ['dahhk dahksknhz'], ['lipps lipsasvph']], [['heloworld'], ['dahksknhz'], ['lipsasvph']], [['abcdefghijklmnopqrstuvwxyzythequickbrownfoxjumpsoverthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqilokranpdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqtwszivxlipedchs']], [['hi    et a rgf hellomyfrienhellod'], ['de    ap w ncb dahhkiubneajdahhkz'], ['lm    ix e vkj lippsqcjvmirlippsh']], [['heti    get a gf hellomyferienhellod'], ['dape    cap w cb dahhkiubaneajdahhkz'], ['lixm    kix e kj lippsqcjivmirlippsh']], [['hi    et a gf helloetmyfrienhellod'], ['de    ap w cb dahhkapiubneajdahhkz'], ['lm    ix e kj lippsixqcjvmirlippsh']], [['hi'], ['de'], ['lm']], [['thi    et a gf helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydog'], ['pde    ap w cb dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkc'], ['xlm    ix e kj lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchsk']], [['rgf'], ['ncb'], ['vkj']], [['abcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['helothequickbrownfoxumpsoverthelazydo'], ['dahkpdamqeygxnksjbktqilokranpdahwvuzk'], ['lipsxliuymgofvsarjsbyqtwszivxlipedchs']], [['abcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoe'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsi']], [['helothequickbrownfoxumpsovekrthelazydo'], ['dahkpdamqeygxnksjbktqilokragnpdahwvuzk'], ['lipsxliuymgofvsarjsbyqtwsziovxlipedchs']], [['helothequickbrownfoxjumpsgetoverthelazydo'], ['dahkpdamqeygxnksjbktfqilocapkranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkixszivxlipedchs']], [['hi    et  a gf hellomyfrienhellod'], ['de    ap  w cb dahhkiubneajdahhkz'], ['lm    ix  e kj lippsqcjvmirlippsh']], [['yywxy'], ['uustu'], ['ccabc']], [['ythequickbrownfhi    et a gf hellomyfriendoxjumpsoverthelazydo'], ['updamqeygxnksjbde    ap w cb dahhkiubneajzktfqilokranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lippsqcjvmirhsbnyqtwszivxlipedchs']], [['hi    etrgf hhellomyfrienhellod'], ['de    apncb ddahhkiubneajdahhkz'], ['lm    ixvkj llippsqcjvmirlippsh']], [['hhellomyfrienhellod'], ['ddahhkiubneajdahhkz'], ['llippsqcjvmirlippsh']], [['abcdefghijfklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefbghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnjopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['hellomyfriendoxjumpsoverthelazydo'], ['dahhkiubneajzktfqilokranpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszivxlipedchs']], [['thequickbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['heti    get a gf hellomyfrieonhellod'], ['dape    cap w cb dahhkiubneakjdahhkz'], ['lixm    kix e kj lippsqcjvmisrlippsh']], [['hi    et a gf hellomyfrienhellood'], ['de    ap w cb dahhkiubneajdahhkkz'], ['lm    ix e kj lippsqcjvmirlippssh']], [['yywx'], ['uust'], ['ccab']], [['ythequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['updamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['helowythequickbrownfhiorld'], ['dahksupdamqeygxnksjbdeknhz'], ['lipsacxliuymgofvsarjlmsvph']], [['wxxyy'], ['sttuu'], ['abbcc']], [['hi    let a gf hellomyfriend'], ['de    hap w cb dahhkiubneajz'], ['lm    pix e kj lippsqcjvmirh']], [['yzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdddddddddddddddddddddddd']], [['hhellomyfrinhellod'], ['ddahhkiubnejdahhkz'], ['llippsqcjvmrlippsh']], [['hellomyfrienhellodrownfoxjumpsoverthelazydojumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwszivxlipedchs']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogod'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckz'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchsksh']], [['hi    et a gf hellomyfrie'], ['de    ap w cb dahhkiubnea'], ['lm    ix e kj lippsqcjvmi']], [['ythequickbrownfhi'], ['updamqeygxnksjbde'], ['cxliuymgofvsarjlm']], [['heti    get a gf hellomyfrieonhello d'], ['dape    cap w cb dahhkiubneakjdahhk z'], ['lixm    kix e kj lippsqcjvmisrlipps h']], [['gf'], ['cb'], ['kj']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsibcc']], [['heti    get a mgf hellomyfrienhellod'], ['dape    cap w icb dahhkiubneajdahhkz'], ['lixm    kix e qkj lippsqcjvmirlippsh']], [['hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['eetrgft'], ['aapncbp'], ['iixvkjx']], [['eetrgf'], ['aapncb'], ['iixvkj']], [['hellomyferienhellod'], ['dahhkiubaneajdahhkz'], ['lippsqcjivmirlippsh']], [['b&helothequickbrownfoxjumpsgetoverthelazydocd&^'], ['x&dahkpdamqeygxnksjbktfqilocapkranpdahwvuzkyz&^'], ['f&lipsxliuymgofvsarjsbnyqtwkixszivxlipedchsgh&^']], [['hi    et a gf helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellod'], ['de    ap w cb dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['hi    et a gf hellomyfrienheod'], ['de    ap w cb dahhkiubneajdakz'], ['lm    ix e kj lippsqcjvmirlish']], [['yywxxy'], ['uusttu'], ['ccabbc']], [['helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['ohhellomyfrienhellod'], ['kddahhkiubneajdahhkz'], ['sllippsqcjvmirlippsh']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupmpsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytqtwszivxlipedchsibcc']], [['a'], ['w'], ['e']], [['hello heloworlthequickbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['dahhk dahksknhpdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['lipps lipsasvpxliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['ohhellomyfriend'], ['kddahhkiubneajz'], ['sllippsqcjvmirh']], [['hellomyfrienheod'], ['dahhkiubneajdakz'], ['lippsqcjvmirlish']], [['wolrld'], ['skhnhz'], ['aspvph']], [['hi    et a gf helloetmthelquickbrownfoxjumpsoverthelazydoyfrienhellod'], ['de    ap w cb dahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['heloworlthequickbheti'], ['dahksknhpdamqeygxdape'], ['lipsasvpxliuymgoflixm']], [['ergft'], ['ancbp'], ['ivkjx']], [['hel'], ['dah'], ['lip']], [['tlet'], ['phap'], ['xpix']], [['hi    letheti    get a gf hellomyfrieonhello df hellomyfriend'], ['de    hapdape    cap w cb dahhkiubneakjdahhk zb dahhkiubneajz'], ['lm    pixlixm    kix e kj lippsqcjvmisrlipps hj lippsqcjvmirh']], [['abcdefghijfklmnopeetrgftqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefbghijklaapncbpmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnjopqrstiixvkjxuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['hi    et a rgf hellomyfrienhelb&cd&^lod'], ['de    ap w ncb dahhkiubneajdahx&yz&^hkz'], ['lm    ix e vkj lippsqcjvmirlipf&gh&^psh']], [['hellomyfrienhelb&cd&^lod'], ['dahhkiubneajdahx&yz&^hkz'], ['lippsqcjvmirlipf&gh&^psh']], [['helowythehquickbrownfhhiorld'], ['dahksupdadmqeygxnksjbddeknhz'], ['lipsacxliluymgofvsarjllmsvph']], [['ohhelyfrienhellod'], ['kddahubneajdahhkz'], ['sllipcjvmirlippsh']], [['hi    ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de    ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['bythequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo&cd&d^'], ['xupdamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk&yz&z^'], ['fcxliuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs&gh&h^']], [['hellomyfrienhellod'], ['dahhkiubneajdahhkz'], ['lippsqcjvmirlippsh']], [['hi    et a ohhellomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['eeetrgft'], ['aaapncbp'], ['iiixvkjx']], [['hellomyfriendoxjumpsovelrthelazydo'], ['dahhkiubneajzktfqilokrahnpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszipvxlipedchs']], [['hellomyfrienhellood'], ['dahhkiubneajdahhkkz'], ['lippsqcjvmirlippssh']], [['ythequickbrownfoxthequickbheti'], ['updamqeygxnksjbktpdamqeygxdape'], ['cxliuymgofvsarjsbxliuymgoflixm']], [['hellomyfrietrgf'], ['dahhkiubneapncb'], ['lippsqcjvmixvkj']], [['hellomyfrieonhello'], ['dahhkiubneakjdahhk'], ['lippsqcjvmisrlipps']], [['ehel'], ['adah'], ['ilip']], [['helflomyfrietrgf'], ['dahbhkiubneapncb'], ['lipjpsqcjvmixvkj']], [['hhellyomyfrienhellod'], ['ddahhukiubneajdahhkz'], ['llippcsqcjvmirlippsh']], [['helloetmthelquickbrownfoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['ythehelloetmthelquickbrownfoxjumpsoverthelazydoyienhellodnfhi'], ['updadahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkueajdahhkzjbde'], ['cxlilippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscmirlippshrjlm']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsovierthi'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokreanpde'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszmivxlm']], [['heti    get a gfrieonhello d'], ['dape    cap w cbneakjdahhk z'], ['lixm    kix e kjvmisrlipps h']], [['eeet'], ['aaap'], ['iiix']], [['hi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellod'], ['de    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippsh']], [['hi    et ehia rgf hellomyfrienhellod'], ['de    ap adew ncb dahhkiubneajdahhkz'], ['lm    ix ilme vkj lippsqcjvmirlippsh']], [['let'], ['hap'], ['pix']], [['hellomyfriendoxjumpsovelrathelazydo'], ['dahhkiubneajzktfqilokrahnwpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszipvexlipedchs']], [['hi    et a gf helloetmyfrienhellothequickbhetid'], ['de    ap w cb dahhkapiubneajdahhkpdamqeygxdapez'], ['lm    ix e kj lippsixqcjvmirlippsxliuymgoflixmh']], [['heti    get a mgf hehi    et ehia rgf hellomyfrienhellodllomyfrienhellod'], ['dape    cap w icb dade    ap adew ncb dahhkiubneajdahhkzhhkiubneajdahhkz'], ['lixm    kix e qkj lilm    ix ilme vkj lippsqcjvmirlippshppsqcjvmirlippsh']], [['helloomyfrienheod'], ['dahhkkiubneajdakz'], ['lippssqcjvmirlish']], [['hi   helowythehquickbrownfhhiorld ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de   dahksupdadmqeygxnksjbddeknhz ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm   lipsacxliluymgofvsarjllmsvph ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['hello heloworlthequickbheti    get a gf hellomyfrienhellodrownfoxjumpsothequickbhetiverthelazydo'], ['dahhk dahksknhpdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokpdamqeygxdaperanpdahwvuzk'], ['lipps lipsasvpxliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwsxliuymgoflixmzivxlipedchs']], [['abcdefghijklmnopqrstuvwxyzythequickbrownfoxjumpsoveletthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqilokrahappdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqtwszipixxlipedchs']], [['d'], ['z'], ['h']], [['hi    et a ohhelolomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w kddahkhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e sllipspsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['hellomyfrienhellodllomyfrienhellod'], ['dahhkiubneajdahhkzhhkiubneajdahhkz'], ['lippsqcjvmirlippshppsqcjvmirlippsh']], [['hhelothequickbrownfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksjbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsarjsbyqtwsziovxlipedchs']], [['heti    get a mgf hehi   e et ehia rgf hellomyfrienhellodllomyfrhoienhellod'], ['dape    cap w icb dade   a ap adew ncb dahhkiubneajdahhkzhhkiubndkeajdahhkz'], ['lixm    kix e qkj lilm   i ix ilme vkj lippsqcjvmirlippshppsqcjvlsmirlippsh']], [['helll'], ['dahhh'], ['lippp']], [['helothequickbrownfoxjumpsgetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqilocapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkixszilvxlipedchs']], [['hellthi'], ['dahhpde'], ['lippxlm']], [['hellomyfrrienhelb&cd&^lod'], ['dahhkiubnneajdahx&yz&^hkz'], ['lippsqcjvvmirlipf&gh&^psh']], [['yzzzzzzzzzzzzzzzzzzzzzzzzhel'], ['uvvvvvvvvvvvvvvvvvvvvvvvvdah'], ['cddddddddddddddddddddddddlip']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmirlippsh']], [['hellomyfrieendoxjumpsovelrthelazydo'], ['dahhkiubneaajzktfqilokrahnpdahwvuzk'], ['lippsqcjvmiirhsbnyqtwszipvxlipedchs']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogodoworld'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhz'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchskshsasvph']], [['ythequickbrownfhi    et a gf hellomyfriendoxjumpsojverthelazydo'], ['updamqeygxnksjbde    ap w cb dahhkiubneajzktfqilokfranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lippsqcjvmirhsbnyqtwsnzivxlipedchs']], [['hellomyfrienhellodllomyfrhoienhellod'], ['dahhkiubneajdahhkzhhkiubndkeajdahhkz'], ['lippsqcjvmirlippshppsqcjvlsmirlippsh']], [['woolrld'], ['skkhnhz'], ['asspvph']], [['bcd'], ['xyz'], ['fgh']], [['hellomyfergetienhellod'], ['dahhkiubancapeajdahhkz'], ['lippsqcjivkixmirlippsh']], [['bcdhellomyfrienhelb&cd&^lod'], ['xyzdahhkiubneajdahx&yz&^hkz'], ['fghlippsqcjvmirlipf&gh&^psh']], [['helothequickbrowonfoxumpsovekrthelazydo'], ['dahkpdamqeygxnkskjbktqilokragnpdahwvuzk'], ['lipsxliuymgofvsasrjsbyqtwsziovxlipedchs']], [['hhellomyfriod'], ['ddahhkiubnekz'], ['llippsqcjvmsh']], [['mgf'], ['icb'], ['qkj']], [['etrf'], ['apnb'], ['ixvj']], [['helhi'], ['dahde'], ['liplm']], [['bcd&%'], ['xyz&%'], ['fgh&%']], [['hhi    et a ohhellomyfrienhellodrgf hellomyfrienhellodellomyfrienhellood'], ['dde    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkzahhkiubneajdahhkkz'], ['llm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippshippsqcjvmirlippssh']], [['e'], ['a'], ['i']], [['hi    et a rgf hellomyfrienhelb&cd&^llod'], ['de    ap w ncb dahhkiubneajdahx&yz&^hhkz'], ['lm    ix e vkj lippsqcjvmirlipf&gh&^ppsh']], [['bcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lod'], ['xyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkz'], ['fghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^psh']], [['wwxy'], ['sstu'], ['aabc']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoi    t a gf hellomyfrieonhello d'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzke    p w cb dahhkiubneakjdahhk z'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsm    x e kj lippsqcjvmisrlipps h']], [['hlelll'], ['dhahhh'], ['lpippp']], [['eheel'], ['adaah'], ['iliip']], [['heti    get a gfrieonhello helothequickbrownfoxumpsovekrthelazydod'], ['dape    cap w cbneakjdahhk dahkpdamqeygxnksjbktqilokragnpdahwvuzkz'], ['lixm    kix e kjvmisrlipps lipsxliuymgofvsarjsbyqtwsziovxlipedchsh']], [['heolo'], ['dakhk'], ['lisps']], [['ehelhellomyfrienhelb&cd&^lod'], ['adahdahhkiubneajdahx&yz&^hkz'], ['iliplippsqcjvmirlipf&gh&^psh']], [['helloetmyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthigfthequickbhetid'], ['dahhkapiubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdecbpdamqeygxdapez'], ['lippsixqcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmkjxliuymgoflixmh']], [['ehelloetmyfrthirgft'], ['adahhkapiubnpdencbp'], ['ilippsixqcjvxlmvkjx']], [['helbcd&^%lomyfriendoxhi    etrgf hhellomyfrienhellodjumpsoverthelawwxyzydo&cd&d^'], ['dahxyz&^%hkiubneajzktde    apncb ddahhkiubneajdahhkzfqilokranpdahwsstuvuzk&yz&z^'], ['lipfgh&^%psqcjvmirhsblm    ixvkj llippsqcjvmirlippshnyqtwszivxlipeaabcdchs&gh&h^']], [['ohhelolomyfrienhellodrgf'], ['kddahkhkiubneajdahhkzncb'], ['sllipspsqcjvmirlippshvkj']], [['thequickbrownfoxjumpsoverthi    et a gf helloetmyfrienhellodhelazydo'], ['pdamqeygxnksjbktfqilokranpde    ap w cb dahhkapiubneajdahhkzdahwvuzk'], ['xliuymgofvsarjsbnyqtwszivxlm    ix e kj lippsixqcjvmirlippshlipedchs']], [['helloetmyfrienhellothequickbhetid'], ['dahhkapiubneajdahhkpdamqeygxdapez'], ['lippsixqcjvmirlippsxliuymgoflixmh']], [['trhequickbrownfoxjumpsoverthelazydog'], ['pndamqeygxnksjbktfqilokranpdahwvuzkc'], ['xvliuymgofvsarjsbnyqtwszivxlipedchsk']], [['hellomyfriendoxjumpsojverthelazydo'], ['dahhkiubneajzktfqilokfranpdahwvuzk'], ['lippsqcjvmirhsbnyqtwsnzivxlipedchs']], [['eeetrgfthellomyfrienhellodrownfoxjumpsoverthelazydo'], ['aaapncbpdahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['iiixvkjxlippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['gfrieonhello'], ['cbneakjdahhk'], ['kjvmisrlipps']], [['heloo'], ['dahkk'], ['lipss']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrienhellodget'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneajdahhkzcap'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmirlippshkix']], [['helloomyfrienhhi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellodeod'], ['dahhkkiubneajdde    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkzakz'], ['lippssqcjvmirllm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippshish']], [['ehellgft'], ['adahhcbp'], ['ilippkjx']], [['hehi    et a ohhelolomyfrienhellodrgf hellomyfrienhellodlflomyfrietrgf'], ['dade    ap w kddahkhkiubneajdahhkzncb dahhkiubneajdahhkzhbhkiubneapncb'], ['lilm    ix e sllipspsqcjvmirlippshvkj lippsqcjvmirlippshpjpsqcjvmixvkj']], [['hello wlorld'], ['dahhk shknhz'], ['lipps apsvph']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodhelazydoexyy'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzdahwvuzkatuu'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshlipedchsibcc']], [['abcdefghijklmnopqrsquickbrownfoxjumpsovferthelazydo'], ['wxyzabcdefghijklmnomqeygxnksjbktfqilokrbanpdahwvuzk'], ['efghijklmnopqrstuvwuymgofvsarjsbnyqtwszjivxlipedchs']], [['helloetmyfrienhellod'], ['dahhkapiubneajdahhkz'], ['lippsixqcjvmirlippsh']], [['hi    helotheqolod'], ['de    dahkpdamkhkz'], ['lm    lipsxliuspsh']], [['wxabcdefghijklmoxjumpsoverthelazydoexyy'], ['stwxyzabcdefghiktfqilokranpdahwvuzkatuu'], ['abefghijklmnopqsbnyqtwszivxlipedchsibcc']], [['thequickbrownfoxjumpsovertheazydo'], ['pdamqeygxnksjbktfqilokranpdawvuzk'], ['xliuymgofvsarjsbnyqtwszivxliedchs']], [['hi    et ehia rgf hfrienhehellomyfrienhellodrownfoxjumpsoverthelazydojumpsoverthelazydollod'], ['de    ap adew ncb dbneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilokranpdahwvuzkhhkz'], ['lm    ix ilme vkj ljvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwszivxlipedchsppsh']], [['abcdefghijfklmnopeetrgftqazydo'], ['wxyzabcdefbghijklaapncbpmwvuzk'], ['efghijklmnjopqrstiixvkjxuedchs']], [['helothequickbrownfonxjumpsgetoverthelazydo'], ['dahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzk'], ['lipsxliuymgofvsarjsrbnyqtwkixszivxlipedchs']], [['hellomyfrie'], ['dahhkiubnea'], ['lippsqcjvmi']], [['eehia'], ['aadew'], ['iilme']], [['bcohhellomyfrienhellodd'], ['xykddahhkiubneajdahhkzz'], ['fgsllippsqcjvmirlippshh']], [['helbcdhhellyomyfrienhellod&^%lomyfriendoxjumpsoverthelazydo&cd&d^'], ['dahxyzddahhukiubneajdahhkz&^%hkiubneajzktfqilokranpdahwvuzk&yz&z^'], ['lipfghllippcsqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxlipedchs&gh&h^']], [['hellomyfergetienhelllod'], ['dahhkiubancapeajdahhhkz'], ['lippsqcjivkixmirlipppsh']], [['helbcd&^%lomyfriendoxhihhello'], ['dahxyz&^%hkiubneajzktdeddahhk'], ['lipfgh&^%psqcjvmirhsblmllipps']], [['aa'], ['ww'], ['ee']], [['hi    ehi    et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de    ade    ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupompsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlkilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytsqtwszivxlipedchsibcc']], [['hello heti    get a gf hellomyfrieonhello dd'], ['dahhk dape    cap w cb dahhkiubneakjdahhk zz'], ['lipps lixm    kix e kj lippsqcjvmisrlipps hh']], [['helothequickbrownfoxjuhielazydo'], ['dahkpdamqeygxnksjbktfqdeahwvuzk'], ['lipsxliuymgofvsarjsbnylmipedchs']], [['hello heti    get a gf hellomyfheti    get a mgf hellomyfrienhellodo dd'], ['dahhk dape    cap w cb dahhkiubdape    cap w icb dahhkiubneajdahhkzk zz'], ['lipps lixm    kix e kj lippsqcjlixm    kix e qkj lippsqcjvmirlippshs hh']], [['hello helowhellomyfrrienhelb&cd&^lodorld'], ['dahhk dahksdahhkiubnneajdahx&yz&^hkzknhz'], ['lipps lipsalippsqcjvvmirlipf&gh&^pshsvph']], [['yzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cddddddddddddddiliipddddddddddd']], [['bcohhellomyfrieythequickbrownfoxthequickbhetinhellodd'], ['xykddahhkiubneaupdamqeygxnksjbktpdamqeygxdapejdahhkzz'], ['fgsllippsqcjvmicxliuymgofvsarjsbxliuymgoflixmrlippshh']], [['hhellomyffrienhellod'], ['ddahhkiubbneajdahhkz'], ['llippsqcjjvmirlippsh']], [['ef'], ['ab'], ['ij']], [['helloetmyfrienhellodhequicokbrownfoxjumpsoverthelzazydogod'], ['dahhkapiubneajdahhkzdamqeykgxnksjbktfqilokranpdahvwvuzkckz'], ['lippsixqcjvmirlippshliuymgsofvsarjsbnyqtwszivxlipdedchsksh']], [['erghi'], ['ancde'], ['ivklm']], [['hhellomyfriengfrieonhellohellodnhellodlod'], ['ddahhkiubneajcbneakjdahhkdahhkzjdahhkzhkz'], ['llippsqcjvmirkjvmisrlippslippshrlippshpsh']], [['helothequickbrownfoxjumpsgmetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqilociapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkqixszilvxlipedchs']], [['hellb&helothequickbrownfoxjumpsgetoverthelazydocd&^frietrogf'], ['dahhx&dahkpdamqeygxnksjbktfqilocapkranpdahwvuzkyz&^bneapnkcb'], ['lippf&lipsxliuymgofvsarjsbnyqtwkixszivxlipedchsgh&^jvmixvskj']], [['hi    et a gfi hellomyfrie'], ['de    ap w cbe dahhkiubnea'], ['lm    ix e kjm lippsqcjvmi']], [['hello helowhellomyhellomyfrienhelb&cd&^lodfrrienhelb&cd&^lodorld'], ['dahhk dahksdahhkiudahhkiubneajdahx&yz&^hkzbnneajdahx&yz&^hkzknhz'], ['lipps lipsalippsqclippsqcjvmirlipf&gh&^pshjvvmirlipf&gh&^pshsvph']], [['hi    et a rgf hellomyfrietnhelb&cd&^lod'], ['de    ap w ncb dahhkiubneapjdahx&yz&^hkz'], ['lm    ix e vkj lippsqcjvmixrlipf&gh&^psh']], [['hi    et a gf lhgfrieonhelloellomyfrie'], ['de    ap w cb hdcbneakjdahhkahhkiubnea'], ['lm    ix e kj plkjvmisrlippsippsqcjvmi']], [['hellomyfrieonhellod'], ['dahhkiubneakjdahhkz'], ['lippsqcjvmisrlippsh']], [['helbcd&^hellomyfrienhellodellomyfrienhellood%lomyfriendoxhihhello'], ['dahxyz&^dahhkiubneajdahhkzahhkiubneajdahhkkz%hkiubneajzktdeddahhk'], ['lipfgh&^lippsqcjvmirlippshippsqcjvmirlippssh%psqcjvmirhsblmllipps']], [['get'], ['cap'], ['kix']], [['helhlellllthi'], ['dahdhahhhhpde'], ['liplpippppxlm']], [['helloetmyfrienhellohellomyfrienhellodrownfoxjumpsoverthelazydothequickbhetid'], ['dahhkapiubneajdahhkdahhkiubneajdahhkznksjbktfqilokranpdahwvuzkpdamqeygxdapez'], ['lippsixqcjvmirlippslippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsxliuymgoflixmh']], [['hi    et ehia rgf he llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['de    ap adew ncb da hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['lm    ix ilme vkj li ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['hi    ehi   l et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de    ade   h ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm    ilm   p ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['hbcd&^%eo'], ['dxyz&^%ak'], ['lfgh&^%is']], [['ohhelolomyfetrienhellrgf'], ['kddahkhkiubapneajdahhncb'], ['sllipspsqcjixvmirlippvkj']], [['thequicukbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqeyqgxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuymgyoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['helloetmyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthigbhetiid'], ['dahhkapiubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdecxdapeez'], ['lippsixqcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmkflixmmh']], [['hellomyfrrienhelb&cdlod'], ['dahhkiubnneajdahx&yzhkz'], ['lippsqcjvvmirlipf&ghpsh']], [['helowythequicckbrownfhihi    et a gf hellomyfriendorld'], ['dahksupdamqeyygxnksjbdede    ap w cb dahhkiubneajzknhz'], ['lipsacxliuymggofvsarjlmlm    ix e kj lippsqcjvmirhsvph']], [['abcdefghijklmnopqrstuvwxwxabcdefghijklmnopqrstuvwxyyzythequickbrhownfoxjumpsoverthelazydoe'], ['wxyzabcdefghijklmnopqrststwxyzabcdefghijklmnopqrstuuvupdamqeygxndksjbktfqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxyzababefghijklmnopqrstuvwxyzabccdcxliuymgofvlsarjsbnyqtwszivxlipedchsi']], [['efrgft'], ['abncbp'], ['ijvkjx']], [['ythequickbrownfoxjumpsoverthelazydoythequickbrownoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokranpdahwvuzkupdamqeygxnksjktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszivxlipedchscxliuymgofvsarsbnyqtwszivxlipedchs']], [['ehehif'], ['adadeb'], ['ililmj']], [['heheti    get a gf hellomyfrieonhellyodllomyfergetienhelllob&cd&^d'], ['dadape    cap w cb dahhkiubneakjdahhukzhhkiubancapeajdahhhkx&yz&^z'], ['lilixm    kix e kj lippsqcjvmisrlippcshppsqcjivkixmirlipppsf&gh&^h']], [['hi    et aheallomyfriendoxjumpsoverthelazydo gf helloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['de    ap wdawhhkiubneajzktfqilokranpdahwvuzk cb dahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix elieppsqcjvmirhsbnyqtwszivxlipedchs kj lippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['hi e   let a gf hellomyfriend'], ['de a   hap w cb dahhkiubneajz'], ['lm i   pix e kj lippsqcjvmirh']], [['hllelll'], ['dhhahhh'], ['lppippp']], [['hhellyomyfrielod'], ['ddahhukiubneahkz'], ['llippcsqcjvmipsh']], [['hello wbcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lodlorld'], ['dahhk sxyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkzhknhz'], ['lipps afghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^pshpsvph']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodlomyferienhellodt'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzhkiubaneajdahhkzp'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshpsqcjivmirlippshx']], [['hi    et ehia rgf hfrienhehellomyfrienhellodrownfoxjumpsoverthelazydojumpsthelazydollod'], ['de    ap adew ncb dbneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilopdahwvuzkhhkz'], ['lm    ix ilme vkj ljvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwxlipedchsppsh']], [['ft'], ['bp'], ['jx']], [['yzzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cdddddddddddddddiliipddddddddddd']], [['ythequichi'], ['updamqeyde'], ['cxliuymglm']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazeydog'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvauzkc'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedichsk']], [['aickbrownfoxjumpsoveletthelazydo'], ['weygxnksjbktfqilokrahappdahwvuzk'], ['emgofvsarjsbnyqtwszipixxlipedchs']], [['b&helothequickownfoxjumpsgetoverthelazydocd&^'], ['x&dahkpdamqeygksjbktfqilocapkranpdahwvuzkyz&^'], ['f&lipsxliuymgosarjsbnyqtwkixszivxlipedchsgh&^']], [['helothequickbrownfoxjumphellomyfergetienhelllodsoverthelazydo'], ['dahkpdamqeygxnksjbktfqildahhkiubancapeajdahhhkzokranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtlippsqcjivkixmirlipppshwszivxlipedchs']], [['df'], ['zb'], ['hj']], [['b&helothequickownfoxjumpsgetovcerthelazydocd&^'], ['x&dahkpdamqeygksjbktfqilocapkryanpdahwvuzkyz&^'], ['f&lipsxliuymgosarjsbnyqtwkixszgivxlipedchsgh&^']], [['hehi'], ['dade'], ['lilm']], [['hhelloetmyfrienhellodhelazydol'], ['ddahhkapiubneajdahhkzdahwvuzkh'], ['llippsixqcjvmirlippshlipedchsp']], [['hehi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellodlothequickbrownfoxumpsoverthelazydo'], ['dade    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkzhkpdamqeygxnksjbktqilokranpdahwvuzk'], ['lilm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippshpsxliuymgofvsarjsbyqtwszivxlipedchs']], [['ythequickbrownfoxjum'], ['updamqeygxnksjbktfqi'], ['cxliuymgofvsarjsbnyq']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodkbrownfhi'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzgxnksjbde'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshofvsarjlm']], [['helothequetovehrthelazydo'], ['dahkpdamqapkradnpdahwvuzk'], ['lipsxliuyixszilvxlipedchs']], [['hi   helowythehquickbrownfhhiorlde ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de   dahksupdadmqeygxnksjbddeknhza ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm   lipsacxliluymgofvsarjllmsvphi ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['hellomyfrreienhelb&cdlod'], ['dahhkiubnnaeajdahx&yzhkz'], ['lippsqcjvvimirlipf&ghpsh']], [['llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['hhelothequickbrowhelowythequicckbrownfhihinfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksdahksupdamqeyygxnksjbdedejbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsalipsacxliuymggofvsarjlmlmrjsbyqtwsziovxlipedchs']], [['thequickbheti'], ['pdamqeygxdape'], ['xliuymgoflixm']], [['heti    get a gf hellomyfrieonhelllo d'], ['dape    cap w cb dahhkiubneakjdahhhk z'], ['lixm    kix e kj lippsqcjvmisrlippps h']], [['fwwxy'], ['bsstu'], ['jaabc']], [['hhi    et a ohhellomyfrienhellodrgf hellomyfrienhellodellomyfrienhelloold'], ['dde    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkzahhkiubneajdahhkkhz'], ['llm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippshippsqcjvmirlippssph']], [['helhlellelltihi'], ['dahdhahhahhpede'], ['liplpippippxmlm']], [['bcohhellomyfyrienhellodd'], ['xykddahhkiubuneajdahhkzz'], ['fgsllippsqcjcvmirlippshh']], [['hhelllomyfriod'], ['ddahhhkiubnekz'], ['llipppsqcjvmsh']], [['hellomyfrienhellodrownfooxjumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbkktfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjssbnyqtwszivxlipedchs']], [['helloetmyfrienhellzodhequickbrownfoxjumpsoverthelazydogodoworld'], ['dahhkapiubneajdahhvkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhz'], ['lippsixqcjvmirlippdshliuymgofvsarjsbnyqtwszivxlipedchskshsasvph']], [['yzzzzzzzzzzzzzzeheelzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvadaahvvvvvvvvvvvv'], ['cddddddddddddddiliipdddddddddddd']], [['etrgf'], ['apncb'], ['ixvkj']], [['hi l   ehi   l et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de h   ade   h ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm p   ilm   p ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['yzhzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvdvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cdlddddddddddddddiliipddddddddddd']], [['ythequickbrownfoxjumpsovownoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokrksjktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszsarsbnyqtwszivxlipedchs']], [['yywahellomyfriendoxjumupsoverthelazydoxy'], ['uuswdahhkiubneajzktfqiqlokranpdahwvuzktu'], ['ccaelippsqcjvmirhsbnyqytwszivxlipedchsbc']], [['hhellyoomyfrielod'], ['ddahhukkiubneahkz'], ['llippcssqcjvmipsh']], [['bcohhellhomyfrienhellodd'], ['xykddahhdkiubneajdahhkzz'], ['fgsllipplsqcjvmirlippshh']], [['ehelothequickbrownfonxjumpsgetoverthelazydot'], ['adahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzkp'], ['ilipsxliuymgofvsarjsrbnyqtwkixszivxlipedchsx']], [['hlel'], ['dhah'], ['lpip']], [['helloetmyfrthi'], ['dahhkapiubnpde'], ['lippsixqcjvxlm']], [['hellomyfergetienfhelllod'], ['dahhkiubancapeajbdahhhkz'], ['lippsqcjivkixmirjlipppsh']], [['helowythequicckbrownfhihi    ethhelothequickbrownfoxumpsovekrthelazydo a gf hellomyfriendorld'], ['dahksupdamqeyygxnksjbdede    apddahkpdamqeygxnksjbktqilokragnpdahwvuzk w cb dahhkiubneajzknhz'], ['lipsacxliuymggofvsarjlmlm    ixllipsxliuymgofvsarjsbyqtwsziovxlipedchs e kj lippsqcjvmirhsvph']], [['ohhhelllellomyfrienhellod'], ['kdddahhhahhkiubneajdahhkz'], ['slllipppippsqcjvmirlippsh']], [['eff'], ['abb'], ['ijj']], [['h eti    get a mgf hellomyfrienhellod'], ['d ape    cap w icb dahhkiubneajdahhkz'], ['l ixm    kix e qkj lippsqcjvmirlippsh']], [['hellomyfrietnhelb&cd&^lod'], ['dahhkiubneapjdahx&yz&^hkz'], ['lippsqcjvmixrlipf&gh&^psh']], [['b&cdheythequickbrownfoxjumpshi'], ['x&yzdaupdamqeygxnksjbktfqilode'], ['f&ghlicxliuymgofvsarjsbnyqtwlm']], [['helhlomyfriend'], ['dahdhkiubneajz'], ['liplpsqcjvmirh']], [['hhelothequickbrowhelhowythequicckbrownfhihinfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksdahdksupdamqeyygxnksjbdedejbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsaliplsacxliuymggofvsarjlmlmrjsbyqtwsziovxlipedchs']], [['hi    et a rg f hellomyfrietnhelb&cd&^lod'], ['de    ap w nc b dahhkiubneapjdahx&yz&^hkz'], ['lm    ix e vk j lippsqcjvmixrlipf&gh&^psh']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsoverthelazydoexyyd'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpdahwvuzkatuuz'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxlipedchsibcch']], [['hi    et a helolomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w dahkhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e lipspsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['helolomyfrienhellorgf'], ['dahkhkiubneajdahhkncb'], ['lipspsqcjvmirlippsvkj']], [['heeloo'], ['daahkk'], ['liipss']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsovertyhelazydoexyyd'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpudahwvuzkatuuz'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxclipedchsibcch']], [['fhellfomyfrie'], ['bdahhbkiubnea'], ['jlippjsqcjvmi']], [['gget'], ['ccap'], ['kkix']], [['heelazydo'], ['daahwvuzk'], ['liipedchs']], [['eeetrwxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupompsoverthelazydoexyygft'], ['aaapnstwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlkilokranpdahwvuzkatuucbp'], ['iiixvabefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytsqtwszivxlipedchsibcckjx']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodsoverthelazydo'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzokranpdahwvuzk'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshwszivxlipedchs']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrieunhellodget'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneaqjdahhkzcap'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmiyrlippshkix']], [['ahellomyfriendoxjumupsoverthelazydo'], ['wdahhkiubneajzktfqiqlokranpdahwvuzk'], ['elippsqcjvmirhsbnyqytwszivxlipedchs']], [['helowythehquickbrownfhhiorlde'], ['dahksupdadmqeygxnksjbddeknhza'], ['lipsacxliluymgofvsarjllmsvphi']], [['ithi'], ['epde'], ['mxlm']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsovertyhelazydoexyyhellomyfrienhelb&cd&^loddeeetrgft'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpudahwvuzkatuudahhkiubneajdahx&yz&^hkzzaaapncbp'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxclipedchsibcclippsqcjvmirlipf&gh&^pshhiiixvkjx']], [['hellomyfrietrogf'], ['dahhkiubneapnkcb'], ['lippsqcjvmixvskj']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoi'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzke'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsm']], [['ythequickbrowunfoxthequickbheti'], ['updamqeygxnksqjbktpdamqeygxdape'], ['cxliuymgofvsayrjsbxliuymgoflixm']], [['bcohhellomyfyrienhellofdwxabcdefghijklmoxjumpsovertyhelazydoexyyd'], ['xykddahhkiubuneajdahhkbzstwxyzabcdefghiktfqilokranpudahwvuzkatuuz'], ['fgsllippsqcjcvmirlippsjhabefghijklmnopqsbnyqtwszivxclipedchsibcch']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelcazydoi    t a gf hellomyfrieonhello d'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahywvuzke    p w cb dahhkiubneakjdahhk z'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipgedchsm    x e kj lippsqcjvmisrlipps h']], [['hi    et ehia rgf he llomyfrihi    et a helolomyfrienhellodrgf hellomyfrienhellodverthelazyollod'], ['de    ap adew ncb da hhkiubnede    ap w dahkhkiubneajdahhkzncb dahhkiubneajdahhkzranpdahwvukhhkz'], ['lm    ix ilme vkj li ppsqcjvmlm    ix e lipspsqcjvmirlippshvkj lippsqcjvmirlippshzivxlipedcsppsh']], [['helhlellelltiihi'], ['dahdhahhahhpeede'], ['liplpippippxmmlm']], [['ohhhelllellomyfrienheellod'], ['kdddahhhahhkiubneajdaahhkz'], ['slllipppippsqcjvmirliippsh']], [['hhellyomyfrienyhello'], ['ddahhukiubneajudahhk'], ['llippcsqcjvmirclipps']], [['ohhhelllellomyfriabcdefghijfklmnopeetrgftqrstuvwxyzythequickbrhownfoxjumpsoverthelahzydoenhellod'], ['kdddahhhahhkiubnewxyzabcdefbghijklaapncbpmnopqrstuvupdamqeygxndksjbktfqilokranpdahwdvuzkajdahhkz'], ['slllipppippsqcjvmefghijklmnjopqrstiixvkjxuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipeldchsirlippsh']], [['hellomyfrienhellodlflomyfrietrgf'], ['dahhkiubneajdahhkzhbhkiubneapncb'], ['lippsqcjvmirlippshpjpsqcjvmixvkj']], [['helxloetmthequickbrowoxjumpsoverthelazydoyfrieunhellodget'], ['dahthkapipdamqeygxnksktfqilokranpdahwvuzkubneaqjdahhkzcap'], ['lipbpsixqxliuymgofvsasbnyqtwszivxlipedchscjvmiyrlippshkix']], [['helhlellelletiihi'], ['dahdhahhahhapeede'], ['liplpippippixmmlm']], [['abcdefghijklmnopqrsteuvwxwxabcdefghijklmnopqrstuvwxyyzythequickbrhownfoxjsumpsoverthelazydoe'], ['wxyzabcdefghijklmnopaqrststwxyzabcdefghijklmnopqrstuuvupdamqeygxndksjbktfoqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxiyzababefghijklmnopqrstuvwxyzabccdcxliuymgofvlsarjsbnwyqtwszivxlipedchsi']], [['hhellomyfriengrieonhellohellodnhellodlod'], ['ddahhkiubneajcneakjdahhkdahhkzjdahhkzhkz'], ['llippsqcjvmirkvmisrlippslippshrlippshpsh']], [['hhellyomyfriehello'], ['ddahhukiubneadahhk'], ['llippcsqcjvmilipps']], [['bcd&hellomoyfrienhellodrownfoxjumpsoverthhhellomyfriengfrieonhellohellodelazydo%'], ['xyz&dahhkikubneajdahhkznksjbktfqilokranpdddahhkiubneajcbneakjdahhkdahhkzahwvuzk%'], ['fgh&lippsqscjvmirlippshvsarjsbnyqtwszivxlllippsqcjvmirkjvmisrlippslippshipedchs%']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydooexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchssibcc']], [['hi    elt a rgf hellomyfrienhellod'], ['de    ahp w ncb dahhkiubneajdahhkz'], ['lm    ipx e vkj lippsqcjvmirlippsh']], [['helflomyfriietrgf'], ['dahbhkiubneeapncb'], ['lipjpsqcjvmmixvkj']], [['ehiabcdefghijklmnopqrwnfxjumpsoveletthelazydoa'], ['adewxyzabcdefghijklmnsjbtfqilokrahappdahwvuzkw'], ['ilmefghijklmnopqrstuvarjbnyqtwszipixxlipedchse']], [['healloetmyfrienhellodhequickbrownfoxjumpsoverthelazeydog'], ['dawhhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvauzkc'], ['lieppsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedichsk']], [['lhgfrieonhelloellomyfrie'], ['hdcbneakjdahhkahhkiubnea'], ['plkjvmisrlippsippsqcjvmi']], [['hhellylomyfrienhellod'], ['ddahhuhkiubneajdahhkz'], ['llippcpsqcjvmirlippsh']], [['hfsoverthigfthequickbhetid'], ['dbokranpdecbpdamqeygxdapez'], ['ljwszivxlmkjxliuymgoflixmh']], [['yywbcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lodlorldwxy'], ['uusxyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkzhknhzstu'], ['ccafghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^pshpsvphabc']], [['bcdhellomyfrieonhellod&^%'], ['xyzdahhkiubneakjdahhkz&^%'], ['fghlippsqcjvmisrlippsh&^%']], [['aheallomyfriendoxjumpsoverthelazydo'], ['wdawhhkiubneajzktfqilokranpdahwvuzk'], ['elieppsqcjvmirhsbnyqtwszivxlipedchs']], [['aheallomyfriendoxjumpsoverthwxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsovierthielazydo'], ['wdawhhkiubneajzktfqilokranpdstwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokreanpdeahwvuzk'], ['elieppsqcjvmirhsbnyqtwszivxlabefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszmivxlmipedchs']], [['hhellohelloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogodoworldmyfrienhellodeod'], ['ddahhkdahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhziubneajdahhkzakz'], ['llippslippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchskshsasvphqcjvmirlippshish']], [['eflie'], ['abhea'], ['ijpmi']], [['ohhelyfrienhellood'], ['kddahubneajdahhkkz'], ['sllipcjvmirlippssh']], [['ehellioetmhi'], ['adahhekapide'], ['ilippmsixqlm']], [['ahellomyfriendoxjumupsoverthelaefzydo'], ['wdahhkiubneajzktfqiqlokranpdahwabvuzk'], ['elippsqcjvmirhsbnyqytwszivxlipeijdchs']], [['hellomyfrieonhenllod'], ['dahhkiubneakjdajhhkz'], ['lippsqcjvmisrlirppsh']], [['hlelloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['dhahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lpippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['hi    helothelbcd&^%lomyfriendoxhihhelloheqolod'], ['de    dahkpdahxyz&^%hkiubneajzktdeddahhkdamkhkz'], ['lm    lipsxlipfgh&^%psqcjvmirhsblmllippsliuspsh']], [['helloomyfrienhhi    ehi    et a gf hellomyfrietrogf hhellohehetimyfrienhellodeod'], ['dahhkkiubneajdde    ade    ap w cb dahhkiubneapnkcb ddahhkdadapeiubneajdahhkzakz'], ['lippssqcjvmirllm    ilm    ix e kj lippsqcjvmixvskj llippslilixmqcjvmirlippshish']], [['hl'], ['dh'], ['lp']], [['helhii'], ['dahdee'], ['liplmm']], [['hellomyfriendoxjumpsojvertaheallomyfriendoxjumpsoverthelazydoazydo'], ['dahhkiubneajzktfqilokfranpwdawhhkiubneajzktfqilokranpdahwvuzkwvuzk'], ['lippsqcjvmirhsbnyqtwsnzivxelieppsqcjvmirhsbnyqtwszivxlipedchsedchs']], [['hellomyfrienhellodverthelazyollod'], ['dahhkiubneajdahhkzranpdahwvukhhkz'], ['lippsqcjvmirlippshzivxlipedcsppsh']], [['eheihif'], ['adaedeb'], ['ilimlmj']], [['helothequickbrownfoxjumtpsgmetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqiplociapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqxtwkqixszilvxlipedchs']], [['ythequickbrownfoxthuickbheti'], ['updamqeygxnksjbktpdqeygxdape'], ['cxliuymgofvsarjsbxlymgoflixm']], [['hi  df  et ehia rgf he llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['de  zb  ap adew ncb da hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['lm  hj  ix ilme vkj li ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['fhellfomyfrieheeloo'], ['bdahhbkiubneadaahkk'], ['jlippjsqcjvmiliipss']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodhelazydoexyyzzzzzzzzzzzzzzzzzzet'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzdahwvuzkatuuvvvvvvvvvvvvvvvvvvap'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshlipedchsibccddddddddddddddddddix']], [['ohhellomyfrienheellod'], ['kddahhkiubneajdaahhkz'], ['sllippsqcjvmirliippsh']], [['iheheti'], ['edadape'], ['mlilixm']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodlomyferienhellodtgf'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzhkiubaneajdahhkzpcb'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshpsqcjivmirlippshxkj']], [['hello heti    get a gf hellomyllo dd'], ['dahhk dape    cap w cb dahhkiuhhk zz'], ['lipps lixm    kix e kj lippsqcpps hh']], [['f'], ['b'], ['j']], [['eehhi    et a gf helloetmthelquickbrownfoxjumpsohverthelazydoyfrienhellodia'], ['aadde    ap w cb dahhkapipdahmqeygxnksjbktfqilokdranpdahwvuzkubneajdahhkzew'], ['iillm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwslzivxlipedchscjvmirlippshme']], [['heti    get a mgf hellomyfrienhellodhl'], ['dape    cap w icb dahhkiubneajdahhkzdh'], ['lixm    kix e qkj lippsqcjvmirlippshlp']], [['thequhelothequickbrownfoxjumpsgetovehrthelazydoyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqdahkpdamqeygxnksjbktfqilocapkradnpdahwvuzkubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuylipsxliuymgofvsarjsbnyqtwkixszilvxlipedchscjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['helolomyfrienhhelloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodellorgf'], ['dahkhkiubneajddahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzahhkncb'], ['lipspsqcjvmirllippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshippsvkj']], [['hellomyferienhelhabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoiod'], ['dahhkiubaneajdahdwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkekz'], ['lippsqcjivmirliplefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsmsh']], [['heeoloo'], ['daakhkk'], ['liispss']], [['hellomyfrienhellodxjumpsoverthelazydo'], ['dahhkiubneajdahhkztfqilokranpdahwvuzk'], ['lippsqcjvmirlippshbnyqtwszivxlipedchs']], [['aickbrownfoxjhumpsoveletthelazydo'], ['weygxnksjbktfdqilokrahappdahwvuzk'], ['emgofvsarjsbnlyqtwszipixxlipedchs']], [['hhellomyfriengfrieonhellohellodoverthelazydoythequickbrownoxjumpsoverthelazydollomyfrietrgf'], ['ddahhkiubneajcbneakjdahhkdahhkzkranpdahwvuzkupdamqeygxnksjktfqilokranpdahwvuzkhhkiubneapncb'], ['llippsqcjvmirkjvmisrlippslippshszivxlipedchscxliuymgofvsarsbnyqtwszivxlipedchsppsqcjvmixvkj']], [['helbcdhhellyomyfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhukiubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['hi    et a gf helllomyfrienhellood'], ['de    ap w cb dahhhkiubneajdahhkkz'], ['lm    ix e kj lipppsqcjvmirlippssh']], [['hellomyfrienhellodrownfoxjumpsothequickbhetiverthelazydohi'], ['dahhkiubneajdahhkznksjbktfqilokpdamqeygxdaperanpdahwvuzkde'], ['lippsqcjvmirlippshvsarjsbnyqtwsxliuymgoflixmzivxlipedchslm']], [['hhelloetmyhi    et a gf hellomyfriendfrienhellodhelazydol'], ['ddahhkapiude    ap w cb dahhkiubneajzbneajdahhkzdahwvuzkh'], ['llippsixqclm    ix e kj lippsqcjvmirhjvmirlippshlipedchsp']], [['wlorld'], ['shknhz'], ['apsvph']], [['helolnhello dd'], ['dahkhjdahhk zz'], ['lipsprlipps hh']], [['ythbequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['updxamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['cxlfiuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['hellomdyfriendoxjumpsojverthelazydo'], ['dahhkizubneajzktfqilokfranpdahwvuzk'], ['lippsqhcjvmirhsbnyqtwsnzivxlipedchs']], [['helloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['helbcdhhellyom&yfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhuki&ubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsq&cjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['helbcdhhellyofmyfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhukbiubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsjqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['llomyfrienhehellomyfrienhellooxjumpsoverthelazyollod'], ['hhkiubneajdadahhkiubneajdahhkktfqilokranpdahwvukhhkz'], ['ppsqcjvmirlilippsqcjvmirlippssbnyqtwszivxlipedcsppsh']], [['yzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthi'], ['uvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpde'], ['cdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlm']], [['helolnhelnlo'], ['dahkhjdahjhk'], ['lipsprliprps']], [['wxxyyworld'], ['sttuusknhz'], ['abbccasvph']], [['bcohhellomyfhi'], ['xykddahhkiubde'], ['fgsllippsqcjlm']], [['heloethequickbrownfoxjumpsgmetovehrthelazydo'], ['dahkapdamqeygxnksjbktfqilociapkradnpdahwvuzk'], ['lipsixliuymgofvsarjsbnyqtwkqixszilvxlipedchs']], [['yzhzzzzzzzzzzzzzzeyheelzzzzzzzzzzz'], ['uvdvvvvvvvvvvvvvvaudaahvvvvvvvvvvv'], ['cdlddddddddddddddicliipddddddddddd']], [['hi    et a gf helloetmthelquickbrownfoxjumpsoverthnelazydoyfrienhellod'], ['de    ap w cb dahhkapipdahmqeygxnksjbktfqilokranpdjahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwszivxlripedchscjvmirlippsh']], [['helloetmpsoverthelazydoyfrienhellodfhelllod'], ['dahhkapilokranpdahwvuzkubneajdahhkzbdahhhkz'], ['lippsixqtwszivxlipedchscjvmirlippshjlipppsh']], [['hellll'], ['dahhhh'], ['lipppp']], [['helhlelthi'], ['dahdhahpde'], ['liplpipxlm']], [['ohhellomyfrieod'], ['kddahhkiubneakz'], ['sllippsqcjvmish']], [['helothelbcd&^%lomyfriendoxhihhelloheqolod'], ['dahkpdahxyz&^%hkiubneajzktdeddahhkdamkhkz'], ['lipsxlipfgh&^%psqcjvmirhsblmllippsliuspsh']], [['ohhelllomyfriend'], ['kddahhhkiubneajz'], ['sllipppsqcjvmirh']], [['hellhi'], ['dahhde'], ['lipplm']], [['thelothequickbrownfonxjumpsgetoverthelazydo'], ['pdahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzk'], ['xlipsxliuymgofvsarjsrbnyqtwkixszivxlipedchs']], [['hhhellyomyfrienhellodl'], ['dddahhukiubneajdahhkzh'], ['lllippcsqcjvmirlippshp']], [['ohhelolomyfrienhellodgf'], ['kddahkhkiubneajdahhkzcb'], ['sllipspsqcjvmirlippshkj']], [['hhellomyfriengfrieonhelheti    get a gf hellomyfrieonhello dlohellod'], ['ddahhkiubneajcbneakjdahdape    cap w cb dahhkiubneakjdahhk zhkdahhkz'], ['llippsqcjvmirkjvmisrliplixm    kix e kj lippsqcjvmisrlipps hpslippsh']], [['hhelyfrienhellod'], ['ddahubneajdahhkz'], ['llipcjvmirlippsh']], [['b&cc^'], ['x&yy^'], ['f&gg^']], [['heti    get a gfrieonhello helothequickbrownfoxumpsovekrthelazydodehel'], ['dape    cap w cbneakjdahhk dahkpdamqeygxnksjbktqilokragnpdahwvuzkzadah'], ['lixm    kix e kjvmisrlipps lipsxliuymgofvsarjsbyqtwsziovxlipedchshilip']], [['hello helowhellomyfrrienhelhb&cd&^lodorld'], ['dahhk dahksdahhkiubnneajdahdx&yz&^hkzknhz'], ['lipps lipsalippsqcjvvmirliplf&gh&^pshsvph']], [['bchllomyfhi'], ['xydhhkiubde'], ['fglppsqcjlm']], [['hhellomyfrienhellodehi'], ['ddahhkiubneajdahhkzade'], ['llippsqcjvmirlippshilm']], [['helothequickbrownfoxumpsovekrthelazydodehel'], ['dahkpdamqeygxnksjbktqilokragnpdahwvuzkzadah'], ['lipsxliuymgofvsarjsbyqtwsziovxlipedchshilip']], [['gehelloetmpsoverthelazydoyfrienhellodfhelllod'], ['cadahhkapilokranpdahwvuzkubneajdahhkzbdahhhkz'], ['kilippsixqtwszivxlipedchscjvmirlippshjlipppsh']], [['hellomyfrienhelleodrownfoxjumpabcdefghijklmnopqrstuvwxyzythequickbrownfoxjumhello'], ['dahhkiubneajdahhakznksjbktfqilwxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqidahhk'], ['lippsqcjvmirlippishvsarjsbnyqtefghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqlipps']], [['heti    get a gfrieonhello helothequicikbrownfoxumpsovekrthelazydodehel'], ['dape    cap w cbneakjdahhk dahkpdamqeyegxnksjbktqilokragnpdahwvuzkzadah'], ['lixm    kix e kjvmisrlipps lipsxliuymgmofvsarjsbyqtwsziovxlipedchshilip']], [['hod'], ['dkz'], ['lsh']], [['hhelloehellomyfrieonhelllotmyhi    et a gf hellomyfriendfrienhellodhelazydol'], ['ddahhkadahhkiubneakjdahhhkpiude    ap w cb dahhkiubneajzbneajdahhkzdahwvuzkh'], ['llippsilippsqcjvmisrlipppsxqclm    ix e kj lippsqcjvmirhjvmirlippshlipedchsp']], [['hhellomyfriengfrieonhelheti'], ['ddahhkiubneajcbneakjdahdape'], ['llippsqcjvmirkjvmisrliplixm']], [['ehabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelcazydoit'], ['adwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahywvuzkep'], ['ilefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipgedchsmx']], [['ehelloetyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthiet'], ['adahhkapubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdeap'], ['ilippsixcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmix']], [['%bcd&^%'], ['%xyz&^%'], ['%fgh&^%']], [['thequickbromwnfoxjumpsoverthelazydog'], ['pdamqeygxnkisjbktfqilokranpdahwvuzkc'], ['xliuymgofvsqarjsbnyqtwszivxlipedchsk']], [['theqcuickbrownfoxjumpsoverthelazydog'], ['pdamyqeygxnksjbktfqilokranpdahwvuzkc'], ['xliugymgofvsarjsbnyqtwszivxlipedchsk']], [['hi    et a gf helbcd&^%lomyfriend'], ['de    ap w cb dahxyz&^%hkiubneajz'], ['lm    ix e kj lipfgh&^%psqcjvmirh']], [['yzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvv'], ['cdddddddddddddddd']], [['hellogfa world'], ['dahhkcbw sknhz'], ['lippskje asvph']], [['hi    et a gf helbcd&^%lomy friend'], ['de    ap w cb dahxyz&^%hkiu bneajz'], ['lm    ix e kj lipfgh&^%psqc jvmirh']], [['bcdd&^%'], ['xyzz&^%'], ['fghh&^%']], [['%bcdhello&^%'], ['%xyzdahhk&^%'], ['%fghlipps&^%']], [['thequicerthelazydog'], ['pdamqeyanpdahwvuzkc'], ['xliuymgivxlipedchsk']], [['%bcdhelwxylo&^%'], ['%xyzdahstuhk&^%'], ['%fghlipabcps&^%']], [['ehello'], ['adahhk'], ['ilipps']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcddddddddddddddddddddddddddddddddd']], [['hellogfa worl d'], ['dahhkcbw sknh z'], ['lippskje asvp h']], [['hi    et a gf hellogmyfriend'], ['de    ap w cb dahhkciubneajz'], ['lm    ix e kj lippskqcjvmirh']], [['%bc^d&^%'], ['%xy^z&^%'], ['%fg^h&^%']], [['bc&^%'], ['xy&^%'], ['fg&^%']], [['abcdefghijklmnopqrstuvxyz'], ['wxyzabcdefghijklmnopqrtuv'], ['efghijklmnopqrstuvwxyzbcd']], [['thequicerthelazydoag'], ['pdamqeyanpdahwvuzkwc'], ['xliuymgivxlipedchsek']], [['thequicertthelazydog'], ['pdamqeyanppdahwvuzkc'], ['xliuymgivxxlipedchsk']], [['hellogfa'], ['dahhkcbw'], ['lippskje']], [['thequickbrthequicerthelazydogownfoxjumpsoverthelazydo'], ['pdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokranpdahwvuzk'], ['xliuymgofvxliuymgivxlipedchsksarjsbnyqtwszivxlipedchs']], [['bc&^%thequicerthelazydogbc&^%'], ['xy&^%pdamqeyanpdahwvuzkcxy&^%'], ['fg&^%xliuymgivxlipedchskfg&^%']], [['abcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyz'], ['wxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuv'], ['efghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcd']], [['thequickbrownfoxydo'], ['pdamqeygxnksjbktuzk'], ['xliuymgofvsarjsbchs']], [['thequicwkbrthequicerthelazydogownofoxjumpsoverthelazydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilokranpdahwvuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwszivxlipedchs']], [['thequickborownfoxydo'], ['pdamqeygxknksjbktuzk'], ['xliuymgofsvsarjsbchs']], [['world'], ['sknhz'], ['asvph']], [['abcdefghihjklmnopqrstuvxyz'], ['wxyzabcdedfghijklmnopqrtuv'], ['efghijklmlnopqrstuvwxyzbcd']], [['hi    ehellot a gf hellogmyfriend'], ['de    adahhkp w cb dahhkciubneajz'], ['lm    ilippsx e kj lippskqcjvmirh']], [['hi    et a gf helbcmd&^%lomyfriend'], ['de    ap w cb dahxyiz&^%hkiubneajz'], ['lm    ix e kj lipfgqh&^%psqcjvmirh']], [['%b^c^d&^%'], ['%x^y^z&^%'], ['%f^g^h&^%']], [['hellomyfriend'], ['dahhkiubneajz'], ['lippsqcjvmirh']], [['helbcd&^%lomy'], ['dahxyz&^%hkiu'], ['lipfgh&^%psqc']], [['thequickbromwnfoxjumpsovertheletazydog'], ['pdamqeygxnkisjbktfqilokranpdahapwvuzkc'], ['xliuymgofvsqarjsbnyqtwszivxlipixedchsk']], [['hellogmyfriend'], ['dahhkciubneajz'], ['lippskqcjvmirh']], [['thequicekbromwnfoxjumpsoverthelazydog'], ['pdamqeyagxnkisjbktfqilokranpdahwvuzkc'], ['xliuymgiofvsqarjsbnyqtwszivxlipedchsk']], [['yzz'], ['uvv'], ['cdd']], [['hi    ehellott a gf hellogmyfriend'], ['de    adahhkpp w cb dahhkciubneajz'], ['lm    ilippsxx e kj lippskqcjvmirh']], [['thkbrownfoxjumpsoverthelazydo'], ['pdgxnksjbktfqilokranpdahwvuzk'], ['xlofvsarjsbnyqtwszivxlipedchs']], [['thequickbrownfoxjumpsoverthelazydfo'], ['pdamqeygxnksjbktfqilokranpdahwvuzbk'], ['xliuymgofvsarjsbnyqtwszivxlipedchjs']], [['theqcuickbrownfoxjumpsoverthelazbydog'], ['pdamyqeygxnksjbktfqilokranpdahwvxuzkc'], ['xliugymgofvsarjsbnyqtwszivxlipedfchsk']], [['theqcuickabcdefghihjklmnopqrstuvxyzbrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghijklmnopqrtuvxnksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['helllogfa'], ['dahhhkcbw'], ['lipppskje']], [['thequickbrthequicerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymgivxlipedchsksarjsbnyqtwszipedchs']], [['bc&^%thequicerthelazydothkbrownfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnksjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvsarjsbnyqtwszivxlipedchs&^%']], [['bc&^hello%'], ['xy&^dahhk%'], ['fg&^lipps%']], [['ehellott'], ['adahhkpp'], ['ilippsxx']], [['thequickbromwnfoxjumpsoverdog'], ['pdamqeygxnkisjbktfqilokranzkc'], ['xliuymgofvsqarjsbnyqtwszivhsk']], [['hellogfa wetorld'], ['dahhkcbw sapknhz'], ['lippskje aixsvph']], [['wetorld'], ['sapknhz'], ['aixsvph']], [['hi    et a gf helbcdhi    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzde    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlm    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['hi    et a gf helbcmd&^%lo myfriend'], ['de    ap w cb dahxyiz&^%hk iubneajz'], ['lm    ix e kj lipfgqh&^%ps qcjvmirh']], [['thequicerthequicekbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgiofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['thequiuckbrownfoxjumpsoverthelazydo'], ['pdamqeqygxnksjbktfqilokranpdahwvuzk'], ['xliuymygofvsarjsbnyqtwszivxlipedchs']], [['bc&^%thequicerthelazydoghelbcmd&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchsklipfgqh&^%psfg&^%']], [['helbcd&^thequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfgh&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['bc&thequicertthelazydog^%'], ['xy&pdamqeyanppdahwvuzkc^%'], ['fg&xliuymgivxxlipedchsk^%']], [['theqthequicerthequicekbromwnfoxjumpsoverthelazydogthelazydogdog'], ['pdampdamqeyanpdamqeyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkczkc'], ['xliuxliuymgivxliuymgiofvsqarjsbnyqtwszivxlipedchskxlipedchskhsk']], [['hi    et  a gf helbcmld&^%lo myfriend'], ['de    ap  w cb dahxyihz&^%hk iubneajz'], ['lm    ix  e kj lipfgqph&^%ps qcjvmirh']], [['afbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyz'], ['wbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuv'], ['ejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcd']], [['bc&^%thequicerthelazydoghelbcmd&&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchsklipfgqh&&^%psfg&^%']], [['ehelloyzz'], ['adahhkuvv'], ['ilippscdd']], [['hi r   et a gf helbcmd&^%lomyfriend'], ['de n   ap w cb dahxyiz&^%hkiubneajz'], ['lm v   ix e kj lipfgqh&^%psqcjvmirh']], [['gf%b^c^d&^%'], ['cb%x^y^z&^%'], ['kj%f^g^h&^%']], [['thequtickborownfoxydo'], ['pdamqpeygxknksjbktuzk'], ['xliuyxmgofsvsarjsbchs']], [['thequicerthequicezkbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyavgxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgidofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['bc&^%thequicerthelazydohighelbcmd&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkdecdahxyiz&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchslmklipfgqh&^%psfg&^%']], [['hellogmythequicertthelazydogfriend'], ['dahhkciupdamqeyanppdahwvuzkcbneajz'], ['lippskqcxliuymgivxxlipedchskjvmirh']], [['ello'], ['ahhk'], ['ipps']], [['hellogfa wethorld'], ['dahhkcbw sapdknhz'], ['lippskje aixlsvph']], [['bcello&^%'], ['xyahhk&^%'], ['fgipps&^%']], [['hellogmyfriend&^%lomyfriend'], ['dahhkciubneajz&^%hkiubneajz'], ['lippskqcjvmirh&^%psqcjvmirh']], [['yzyz'], ['uvuv'], ['cdcd']], [['helbcy'], ['dahxyu'], ['lipfgc']], [['hellogmyfriend&^%lomyfriendgf'], ['dahhkciubneajz&^%hkiubneajzcb'], ['lippskqcjvmirh&^%psqcjvmirhkj']], [['afbcdefghijklhellogfa'], ['wbxyzabcdefghdahhkcbw'], ['ejfghijklmnoplippskje']], [['ehellot'], ['adahhkp'], ['ilippsx']], [['theqkbrownfoxydo'], ['pdamgxnksjbktuzk'], ['xliuofvsarjsbchs']], [['worl'], ['sknh'], ['asvp']], [['thequickbrownfoxbcdd&^%ydo'], ['pdamqeygxnksjbktxyzz&^%uzk'], ['xliuymgofvsarjsbfghh&^%chs']], [['hi    et a gf helbcdhibc&^%    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzdexy&^%    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlmfg&^%    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['worlwxyyd'], ['sknhstuuz'], ['asvpabcch']], [['yzzz'], ['uvvv'], ['cddd']], [['ehe'], ['ada'], ['ili']], [['helbcmd&^%lomyfriend'], ['dahxyiz&^%hkiubneajz'], ['lipfgqh&^%psqcjvmirh']], [['hi    et a gf hellogmyfiend'], ['de    ap w cb dahhkciubeajz'], ['lm    ix e kj lippskqcjmirh']], [['hellogfaello'], ['dahhkcbwahhk'], ['lippskjeipps']], [['glhello'], ['chdahhk'], ['kplipps']], [['hellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfriendfriend'], ['dahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmirhjvmirh']], [['theqcuickabcdefghihjklmnoownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghijkksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqrssarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddddddddddddddddddddddddddddddd']], [['heleloo'], ['dahahkk'], ['lipipss']], [['hellogfa worwethorld'], ['dahhkcbw sknsapdknhz'], ['lippskje asvaixlsvph']], [['%bcthkbrownfoxjumpsoverthelazydod&^%'], ['%xypdgxnksjbktfqilokranpdahwvuzkz&^%'], ['%fgxlofvsarjsbnyqtwszivxlipedchsh&^%']], [['%bcdhelwxylo&&^%'], ['%xyzdahstuhk&&^%'], ['%fghlipabcps&&^%']], [['eheellot'], ['adaahhkp'], ['iliippsx']], [['helllo '], ['dahhhk '], ['lippps ']], [['hi    eiend'], ['de    aeajz'], ['lm    imirh']], [['hi    et a gf helbc%bc^d&^%d&^%lomy friend'], ['de    ap w cb dahxy%xy^z&^%z&^%hkiu bneajz'], ['lm    ix e kj lipfg%fg^h&^%h&^%psqc jvmirh']], [['ywxy'], ['ustu'], ['cabc']], [['hwellogfa wethorld'], ['dsahhkcbw sapdknhz'], ['laippskje aixlsvph']], [['helbcmd&^%lomyfiend'], ['dahxyiz&^%hkiubeajz'], ['lipfgqh&^%psqcjmirh']], [['helbcdworlwxyyd&^thequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyzsknhstuuz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfghasvpabcch&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['helllo'], ['dahhhk'], ['lippps']], [['woworwethorldrlwxyyd'], ['sksknsapdknhznhstuuz'], ['asasvaixlsvphvpabcch']], [['thequiceurtthelazydog'], ['pdamqeyaqnppdahwvuzkc'], ['xliuymgiyvxxlipedchsk']], [['hi    et  a g^f helbcmld&^%lo myfriend'], ['de    ap  w c^b dahxyihz&^%hk iubneajz'], ['lm    ix  e k^j lipfgqph&^%ps qcjvmirh']], [['hhellogmythequicertthelazydogfriendelbcmd&^%lomyfiend'], ['ddahhkciupdamqeyanppdahwvuzkcbneajzahxyiz&^%hkiubeajz'], ['llippskqcxliuymgivxxlipedchskjvmirhipfgqh&^%psqcjmirh']], [['hellomyfrienduvxyz'], ['dahhkiubneajzqrtuv'], ['lippsqcjvmirhyzbcd']], [['thequicerthequicezkbroomwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyavgxnkkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgidofvssqarjsbnyqtwszivxlipedchskxlipedchsk']], [['fgf'], ['bcb'], ['jkj']], [['yzyzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvv'], ['cdcdddddddddddd']], [['helbcdworlwxyyd&^thequiuckbrownfoxjumpsoverthelazydothequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyzsknhstuuz&^pdamqeqygxnksjbktfqilokranpdahwvuzkpdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfghasvpabcch&^xliuymygofvsarjsbnyqtwszivxlipedchsxliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['theqeutickborownfoxydo'], ['pdamaqpeygxknksjbktuzk'], ['xliuiyxmgofsvsarjsbchs']], [['thequickbrownfoxjumpsoverthelazyd'], ['pdamqeygxnksjbktfqilokranpdahwvuz'], ['xliuymgofvsarjsbnyqtwszivxlipedch']], [['bc&^%thequicerthelazydothkbroswnfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnkosjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvswarjsbnyqtwszivxlipedchs&^%']], [['woworwethorlldrlwxd'], ['sksknsapdknhhznhstz'], ['asasvaixlsvpphvpabh']], [['%b^c^d&^d%'], ['%x^y^z&^z%'], ['%f^g^h&^h%']], [['gglhello'], ['cchdahhk'], ['kkplipps']], [['%bcdheolwxylo&&^%'], ['%xyzdakhstuhk&&^%'], ['%fghlispabcps&&^%']], [['thequicertthequickbrthequicerthelazydogownfoxjumpsovelazydohelazydoag'], ['pdamqeyanppdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokrahwvuzkdahwvuzkwc'], ['xliuymgivxxliuymgofvxliuymgivxlipedchsksarjsbnyqtwszipedchslipedchsek']], [['hi    et a gf helbcmhelbcmd&^%lomyfriendd&^%lo myfriend'], ['de    ap w cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubneajz'], ['lm    ix e kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjvmirh']], [['s'], ['o'], ['w']], [['bc&^%thequicerthela^zydoghelbcmd&&^%lobc&^%'], ['xy&^%pdamqeyanpdahw^vuzkcdahxyiz&&^%hkxy&^%'], ['fg&^%xliuymgivxlipe^dchsklipfgqh&&^%psfg&^%']], [['thequickborownfoxydfo'], ['pdamqeygxknksjbktuzbk'], ['xliuymgofsvsarjsbchjs']], [['%bcdhelwxyl%'], ['%xyzdahstuh%'], ['%fghlipabcp%']], [['thequickbromownfoxjumpsoverdog'], ['pdamqeygxnkiksjbktfqilokranzkc'], ['xliuymgofvsqsarjsbnyqtwszivhsk']], [['hellogmyfriend&^%lomyfrienehellott'], ['dahhkciubneajz&^%hkiubneajadahhkpp'], ['lippskqcjvmirh&^%psqcjvmirilippsxx']], [['helbcthequickbrownfoxbcdd&^%ydoy'], ['dahxypdamqeygxnksjbktxyzz&^%uzku'], ['lipfgxliuymgofvsarjsbfghh&^%chsc']], [['ggff'], ['ccbb'], ['kkjj']], [['hhillogfaello'], ['ddehhkcbwahhk'], ['llmppskjeipps']], [['thequicwkbrthequicerthelazydogownofoxjumpszydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilovuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwdchs']], [['worethorld'], ['sknapdknhz'], ['asvixlsvph']], [['thequiceurtazydog'], ['pdamqeyaqnpwvuzkc'], ['xliuymgiyvxedchsk']], [['helbcmd&^%lomyfriendxy'], ['dahxyiz&^%hkiubneajztu'], ['lipfgqh&^%psqcjvmirhbc']], [['helbcthequickbryzzoy'], ['dahxypdamqeygxnuvvku'], ['lipfgxliuymgofvcddsc']], [['hwellogfa wethorldd'], ['dsahhkcbw sapdknhzz'], ['laippskje aixlsvphh']], [['worwethorld'], ['sknsapdknhz'], ['asvaixlsvph']], [['o%bcdhelwxylo&^%'], ['k%xyzdahstuhk&^%'], ['s%fghlipabcps&^%']], [['eehello'], ['aadahhk'], ['iilipps']], [['thequicydog'], ['pdamqeyuzkc'], ['xliuymgchsk']], [['hi    et  a g^f hhelbcd&^%lomyelbcmld&^%lo myfriend'], ['de    ap  w c^b ddahxyz&^%hkiuahxyihz&^%hk iubneajz'], ['lm    ix  e k^j llipfgh&^%psqcipfgqph&^%ps qcjvmirh']], [['theqkbrowfnfoxydo'], ['pdamgxnksbjbktuzk'], ['xliuofvsajrjsbchs']], [['hi    et a gf helbcdhibc&^%    et a abcdefghihjklmnopqrstuvxyzllogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzdexy&^%    ap w wxyzabcdedfghijklmnopqrtuvhhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlmfg&^%    ix e efghijklmlnopqrstuvwxyzbcdppskqcjvmirh&^%psqcjvmirh']], [['hwellogfa'], ['dsahhkcbw'], ['laippskje']], [['hi r  et a gf helbcmd&^%lomyfriend'], ['de n  ap w cb dahxyiz&^%hkiubneajz'], ['lm v  ix e kj lipfgqh&^%psqcjvmirh']], [['abcdefghijklmnopqrstuhi    et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde    ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm    ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['thkbrownfoxjumpsoverth%bcdhelwxylo&^%elazydo'], ['pdgxnksjbktfqilokranpd%xyzdahstuhk&^%ahwvuzk'], ['xlofvsarjsbnyqtwszivxl%fghlipabcps&^%ipedchs']], [['bc&thequicerttheworwethorldlazydog^%'], ['xy&pdamqeyanppdasknsapdknhzhwvuzkc^%'], ['fg&xliuymgivxxliasvaixlsvphpedchsk^%']], [['wyorlwxyyd'], ['suknhstuuz'], ['acsvpabcch']], [['hi    et a gf helbcmhelbcmd&^%lomyfriendd&^%lo myfend'], ['de    ap w cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubajz'], ['lm    ix e kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjirh']], [['hhelbcd&^%lomyelbcmld&^%lo'], ['ddahxyz&^%hkiuahxyihz&^%hk'], ['llipfgh&^%psqcipfgqph&^%ps']], [['thequickbrownfoxjumpsovworwethorlderthelazyd'], ['pdamqeygxnksjbktfqilokrsknsapdknhzanpdahwvuz'], ['xliuymgofvsarjsbnyqtwszasvaixlsvphivxlipedch']], [['thequicwkbrthequicerthelazydogaownofoxjumpsoverthelazydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcwksjkbktfqilokranpdahwvuzk'], ['xliuymgaofvxliuymgivxlipedchskesarsjsbnyqtwszivxlipedchs']], [['%bdcthkbrownfoxjumpsoverthelazydod&^%'], ['%xzypdgxnksjbktfqilokranpdahwvuzkz&^%'], ['%fhgxlofvsarjsbnyqtwszivxlipedchsh&^%']], [['worlwxd'], ['sknhstz'], ['asvpabh']], [['herienduvxyz'], ['daneajzqrtuv'], ['livmirhyzbcd']], [['hi    et a gf hellogmyfriiend'], ['de    ap w cb dahhkciubneeajz'], ['lm    ix e kj lippskqcjvmmirh']], [['boc&^hello%'], ['xky&^dahhk%'], ['fsg&^lipps%']], [['abcdyzzefghijklmnopqrstuvxyz'], ['wxyzuvvabcdefghijklmnopqrtuv'], ['efghcddijklmnopqrstuvwxyzbcd']], [['yxwxy'], ['utstu'], ['cbabc']], [['yzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddlippsdddddddddddddddddddddddddddd']], [['ahwellogfa wethorldd'], ['wdsahhkcbw sapdknhzz'], ['elaippskje aixlsvphh']], [['hi    et a gf helbcmd&^%l o myfriend'], ['de    ap w cb dahxyiz&^%h k iubneajz'], ['lm    ix e kj lipfgqh&^%p s qcjvmirh']], [['hellogymyfriend&^%lomyfriendgf'], ['dahhkcuiubneajz&^%hkiubneajzcb'], ['lippskcqcjvmirh&^%psqcjvmirhkj']], [['hellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfririend'], ['dahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneneajz'], ['lippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmvmirh']], [['heflbcmyd&^%lomyfriend'], ['dabhxyiuz&^%hkiubneajz'], ['lijpfgqch&^%psqcjvmirh']], [['myfriendvwxyz'], ['iubneajzrstuv'], ['qcjvmirhzabcd']], [['theqcuickabcdefghihjklmehellotnfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghiadahhkpjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqilippsxrjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['thequickbrthequiceerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeyaanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymgiivxlipedchsksarjsbnyqtwszipedchs']], [['thequhelbcmld&^%loicerthelazy%doag'], ['pdamqdahxyihz&^%hkeyanpdahwvu%zkwc'], ['xliuylipfgqph&^%psmgivxlipedc%hsek']], [['%bcdhelloo&^%'], ['%xyzdahhkk&^%'], ['%fghlippss&^%']], [['hellogmyfrithequickbromwnfoxjumpsoverthelazydogend&^%lomhi'], ['dahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuzkcajz&^%hkide'], ['lippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedchskirh&^%psqlm']], [['afbcdefghijklhellogfa worl damnoyfrienduvxyz'], ['wbxyzabcdefghdahhkcbw sknh zwijkubneajzqrtuv'], ['ejfghijklmnoplippskje asvp heqrscjvmirhyzbcd']], [['%%bc^d&^%'], ['%%xy^z&^%'], ['%%fg^h&^%']], [['gfs'], ['cbo'], ['kjw']], [['hloglfa'], ['dhkchbw'], ['lpskpje']], [['thequicerpsoverthelazydogthelazydog'], ['pdamqeyanlokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivtwszivxlipedchskxlipedchsk']], [['gghelbcdworlwxyyd&^thequickbrownfoxjumpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabcch&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqcplipps']], [['hellogmyfiend'], ['dahhkciubeajz'], ['lippskqcjmirh']], [['thequiutckbrownfoxjumpstoverthelazydo'], ['pdamqeqpygxnksjbktfqilopkranpdahwvuzk'], ['xliuymyxgofvsarjsbnyqtwxszivxlipedchs']], [['helelooywxy'], ['dahahkkustu'], ['lipipsscabc']], [['bc&thequicertthelazydg^%'], ['xy&pdamqeyanppdahwvuzc^%'], ['fg&xliuymgivxxlipedchk^%']], [['helbc%bc^d&^%d&^%lomy'], ['dahxy%xy^z&^%z&^%hkiu'], ['lipfg%fg^h&^%h&^%psqc']], [['hi    etabcdefghijklhellogfa  a g^f helbcmld'], ['de    apwxyzabcdefghdahhkcbw  w c^b dahxyihz'], ['lm    ixefghijklmnoplippskje  e k^j lipfgqph']], [['helllogfa wethorld'], ['dahhhkcbw sapdknhz'], ['lipppskje aixlsvph']], [['hellhi    et a gf helbcd&^%lomyfriendlogfa'], ['dahhde    ap w cb dahxyz&^%hkiubneajzhkcbw'], ['lipplm    ix e kj lipfgh&^%psqcjvmirhpskje']], [['abcdefghijklmnopqrstuhi    et  g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde    ap  c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm    ix  k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['hello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzd'], ['dahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvz'], ['lipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdh']], [['helbcmld&^%lo'], ['dahxyihz&^%hk'], ['lipfgqph&^%ps']], [['hellogmyfriend&^%lomyfriendgfboc&^hello%'], ['dahhkciubneajz&^%hkiubneajzcbxky&^dahhk%'], ['lippskqcjvmirh&^%psqcjvmirhkjfsg&^lipps%']], [['abcdyzzefghijklmnopqrsthi    ehellot a gnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp w cjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx e krhyzbcd']], [['helbcmld'], ['dahxyihz'], ['lipfgqph']], [['heriennduvxyz'], ['daneajjzqrtuv'], ['livmirrhyzbcd']], [['hellogmyfriend&^%lomhi    et a %lo myfriendfriend'], ['dahhkciubneajz&^%hkide    ap w %hk iubneajzbneajz'], ['lippskqcjvmirh&^%psqlm    ix e %ps qcjvmirhjvmirh']], [['yzzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cddcdddddddddddddddddddddddddddddddddd']], [['boc&hi    et  a g^f helbcmld&^%lo myfriend^heo%'], ['xky&de    ap  w c^b dahxyihz&^%hk iubneajz^dak%'], ['fsg&lm    ix  e k^j lipfgqph&^%ps qcjvmirh^lis%']], [['abcdyzzefghijklmnopqrsthi    ehellot agnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp wcjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx ekrhyzbcd']], [['thequickbromohwellogfa wethorldwnfoxjumpsoverdog'], ['pdamqeygxnkikdsahhkcbw sapdknhzsjbktfqilokranzkc'], ['xliuymgofvsqslaippskje aixlsvpharjsbnyqtwszivhsk']], [['hihihellogmyfriendellogmyfriiend'], ['dededahhkciubneajzahhkciubneeajz'], ['lmlmlippskqcjvmirhippskqcjvmmirh']], [['bdcd&^%'], ['xzyz&^%'], ['fhgh&^%']], [['thequickbrownfoxydhhillogfaelloo'], ['pdamqeygxnksjbktuzddehhkcbwahhkk'], ['xliuymgofvsarjsbchllmppskjeippss']], [['helbcdhibc&^%'], ['dahxyzdexy&^%'], ['lipfghlmfg&^%']], [['thequiutckbrownfoxjumpstovelazydo'], ['pdamqeqpygxnksjbktfqilopkrahwvuzk'], ['xliuymyxgofvsarjsbnyqtwxszipedchs']], [['bc&^%thequicerthelazydothkbroswnfoxjumpsovtheqkbrownfoxydoerthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnkosjbktfqilokrpdamgxnksjbktuzkanpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvswarjsbnyqtwszxliuofvsarjsbchsivxlipedchs&^%']], [['theqcuickabcdefghinhjklmnopqrstuvxyzbrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdejdfghijklmnopqrtuvxnksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmrlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddddddddddddddddddddddddddddd']], [['herienduvxyhi    et a gf hellogmyfienddz'], ['daneajzqrtude    ap w cb dahhkciubeajzzv'], ['livmirhyzbclm    ix e kj lippskqcjmirhhd']], [['hi    et a gf heflbcmhelbcmd&^%lomyfriendd&^%lo cmyfend'], ['de    ap w cb dabhxyidahxyiz&^%hkiubneajzz&^%hk yiubajz'], ['lm    ix e kj lijpfgqlipfgqh&^%psqcjvmirhh&^%ps gqcjirh']], [['gghelbcdworlwxyyd&^thequickbrownfoxjuthequickbromownfoxjumpsoverdogmpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuz&^pdamqeygxnksjbktfqpdamqeygxnkiksjbktfqilokranzkcilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabcch&^xliuymgofvsarjsbnyxliuymgofvsqsarjsbnyqtwszivhskqtwszivxlipedchs%psqcplipps']], [['hellogmyfrithequiend&^%lomhi s   et a gf helbcmd&^%lo myfriendfriend'], ['dahhkciubnepdamqeajz&^%hkide o   ap w cb dahxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmxliuymirh&^%psqlm w   ix e kj lipfgqh&^%ps qcjvmirhjvmirh']], [['ywxytheqcuickbrownfoxjumpsoverthelazydog'], ['ustupdamyqeygxnksjbktfqilokranpdahwvuzkc'], ['cabcxliugymgofvsarjsbnyqtwszivxlipedchsk']], [['hellogfa wetoorld'], ['dahhkcbw sapkknhz'], ['lippskje aixssvph']], [['bcbcmd&^%lobc&^%'], ['xyxyiz&^%hkxy&^%'], ['fgfgqh&^%psfg&^%']], [['theqcuickabcdefghihjklmehellotnfoxjumpsoverthoelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghiadahhkpjbktfqilokranpdkahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqilippsxrjsbnyqtwszivxlsiplippskqcjvmirhedchsk']], [['abcdyzzefghijklmnopqrsthhelbcdhii    ehellot a gnduvxyz'], ['wxyzuvvabcdefghijklmnopddahxyzdee    adahhkp w cjzqrtuv'], ['efghcddijklmnopqrstuvwxllipfghlmm    ilippsx e krhyzbcd']], [['gnduvxyz%bcdhelwxyl%'], ['cjzqrtuv%xyzdahstuh%'], ['krhyzbcd%fghlipabcp%']], [['r'], ['n'], ['v']], [['hi    et a gf helbcd&^%lomy fiend'], ['de    ap w cb dahxyz&^%hkiu beajz'], ['lm    ix e kj lipfgh&^%psqc jmirh']], [['bc&thequicertthelazydhellog^%'], ['xy&pdamqeyanppdahwvuzdahhkc^%'], ['fg&xliuymgivxxlipedchlippsk^%']], [['ob%'], ['kx%'], ['sf%']], [['%%bc^d&hellogfa worwethorld^%'], ['%%xy^z&dahhkcbw sknsapdknhz^%'], ['%%fg^h&lippskje asvaixlsvph^%']], [['wxabcdefghijklmnopqrstuhi    et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['stwxyzabcdefghijklmnopqde    ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['abefghijklmnopqrstuvwxylm    ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['gfhello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzds'], ['cbdahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvzo'], ['kjlipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdhw']], [['hi    et a gftheqkbrowfnfoxydo helbcmhelbcmd&^%lomyfiriendd&^%lo myfrd'], ['de    ap w cbpdamgxnksbjbktuzk dahxyidahxyiz&^%hkiubeneajzz&^%hk iubnz'], ['lm    ix e kjxliuofvsajrjsbchs lipfgqlipfgqh&^%psqcjmvmirhh&^%ps qcjvh']], [['ehebc&^hello%'], ['adaxy&^dahhk%'], ['ilifg&^lipps%']], [['abcdyzzefghijklmnopqrsthi    ehellot ahellhi gnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp wdahhde cjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx elipplm krhyzbcd']], [['hellogmyfienid'], ['dahhkciubeajez'], ['lippskqcjmirmh']], [['hhelelooywxy'], ['ddahahkkustu'], ['llipipsscabc']], [['hellthequiuckbrownfoxjumpsoverthelazydoaaogfa worl d'], ['dahhpdamqeqygxnksjbktfqilokranpdahwvuzkwwkcbw sknh z'], ['lippxliuymygofvsarjsbnyqtwszivxlipedchseeskje asvp h']], [['fgyzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzzf'], ['bcuvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvvb'], ['jkcdcdddddlippsddddddddddddddddddddddddddddj']], [['thequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfo'], ['pdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbk'], ['xliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjs']], [['hi    et a gf helbcdhi    et a gf helylogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzde    ap w cb dahuhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlm    ix e kj lipcpskqcjvmirh&^%psqcjvmirh']], [['bcdd&^%%'], ['xyzz&^%%'], ['fghh&^%%']], [['%bob%cd&^%'], ['%xkx%yz&^%'], ['%fsf%gh&^%']], [['hi    et  ah gf helbcmld&^%lo myfriend'], ['de    ap  wd cb dahxyihz&^%hk iubneajz'], ['lm    ix  el kj lipfgqph&^%ps qcjvmirh']], [['hi r  et a gf helbcmd&^% lomyfriend'], ['de n  ap w cb dahxyiz&^% hkiubneajz'], ['lm v  ix e kj lipfgqh&^% psqcjvmirh']], [['bc&^%thequicerthelazydoghelbcmd&^%lobc&^yzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzz%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&^%hkxy&^uvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvv%'], ['fg&^%xliuymgivxlipedchsklipfgqh&^%psfg&^cdcdddddlippsdddddddddddddddddddddddddddd%']], [['hellogmyfrithequickbromwnfoxjumpsoverthelazylbcmd&^%lo myfriendfriend'], ['dahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuhxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedcpfgqh&^%ps qcjvmirhjvmirh']], [['hi    ehellott a gf hellogmyfrielnd'], ['de    adahhkpp w cb dahhkciubneahjz'], ['lm    ilippsxx e kj lippskqcjvmiprh']], [['worlwxdgf%b^c^d&^%'], ['sknhstzcb%x^y^z&^%'], ['asvpabhkj%f^g^h&^%']], [['hhelelooywxys'], ['ddahahkkustuo'], ['llipipsscabcw']], [['booc&^hello%'], ['xkky&^dahhk%'], ['fssg&^lipps%']], [['hellogmyfriend&^%lomyfrithequickbrownfoxjumpsovworwethorlderthelazydf'], ['dahhkciubneajz&^%hkiubnepdamqeygxnksjbktfqilokrsknsapdknhzanpdahwvuzb'], ['lippskqcjvmirh&^%psqcjvmxliuymgofvsarjsbnyqtwszasvaixlsvphivxlipedchj']], [['bc&^%thequicertwethorldwnfoxjumpsoverdoghelazydogmd&&abc&^%'], ['xy&^%pdamqeyanpsapdknhzsjbktfqilokranzkcdahwvuzkciz&&wxy&^%'], ['fg&^%xliuymgivxaixlsvpharjsbnyqtwszivhsklipedchskqh&&efg&^%']], [['thequtickborobc&thequicertthelazydg^%wnfoxydo'], ['pdamqpeygxknkxy&pdamqeyanppdahwvuzc^%sjbktuzk'], ['xliuyxmgofsvsfg&xliuymgivxxlipedchk^%arjsbchs']], [['bc&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['xy&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['fg&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']], [['hellogmyfthequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfoiend'], ['dahhkciubpdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbkeajz'], ['lippskqcjxliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjsmirh']], [['thequicetazydog'], ['pdamqeyapwvuzkc'], ['xliuymgixedchsk']], [['hellogmyfrriend&^%lomyfriendgf'], ['dahhkciubnneajz&^%hkiubneajzcb'], ['lippskqcjvvmirh&^%psqcjvmirhkj']], [['woretaahorld'], ['sknapwwdknhz'], ['asvixeelsvph']], [['ld'], ['hz'], ['ph']], [['helelooywxyhi    eiend'], ['dahahkkustude    aeajz'], ['lipipsscabclm    imirh']], [['woretarahorld'], ['sknapwnwdknhz'], ['asvixevelsvph']], [['bcdd&^d%'], ['xyzz&^z%'], ['fghh&^h%']], [['gghelbcdworlwxyybrownfoxjumpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuxnksjbktfqilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabccfvsarjsbnyqtwszivxlipedchs%psqcplipps']], [['whellomyfrienduvxyhelbcthequickbrownfoxbcdd&^%ydoyrlwxyyd'], ['sdahhkiubneajzqrtudahxypdamqeygxnksjbktxyzz&^%uzkunhstuuz'], ['alippsqcjvmirhyzbclipfgxliuymgofvsarjsbfghh&^%chscvpabcch']], [['wethorldwnfoxjumpsoverdog'], ['sapdknhzsjbktfqilokranzkc'], ['aixlsvpharjsbnyqtwszivhsk']], [['etabcdefghijklhellogfa'], ['apwxyzabcdefghdahhkcbw'], ['ixefghijklmnoplippskje']], [['hi    et sa gf helbcdhi    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap ow cb dahxyzde    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix we kj lipfghlm    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['thequicwkbrthequicerthelazydogownofoxjumpszytdo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilovupzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwdcxhs']], [['theqcuickabcdefghihjklmno%bcdhethequieceurtthelazydogydog'], ['pdamyqeygwxyzabcdedfghijk%xyzdapdamqeayaqnppdahwvuzkcuzkc'], ['xliugymgoefghijklmlnopqrs%fghlixliuymigiyvxxlipedchskchsk']], [['ahellhi'], ['wdahhde'], ['elipplm']], [['hi    et a gf helleomyfriened'], ['de    ap w cb dahhakiubneajaz'], ['lm    ix e kj lippisqcjvmirih']], [['hi    et a g'], ['de    ap w c'], ['lm    ix e k']], [['helbcmd&^%l'], ['dahxyiz&^%h'], ['lipfgqh&^%p']], [['helbc%bc^d&^%d&^%lomworwethorld^%y'], ['dahxy%xy^z&^%z&^%hkisknsapdknhz^%u'], ['lipfg%fg^h&^%h&^%psqasvaixlsvph^%c']], [['rgfhello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzds'], ['ncbdahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvzo'], ['vkjlipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdhw']], [['myfedamnopqrstrhind'], ['iubazwijklmnopndejz'], ['qcjiheqrstuvwxvlmrh']], [['abcdefghijklmnopqrstuvxyo%bcdhelwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyzdahstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghlipabcps&^%d']], [['hi    e g'], ['de    a c'], ['lm    i k']], [['ahelthequickbrownfoxydolhi'], ['wdahpdamqeygxnksjbktuzkhde'], ['elipxliuymgofvsarjsbchsplm']], [['thequicerthequcekbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuygiofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['bc&^%thequicyxwxyeroswnfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyutstuankosjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgcbabcivswarjsbnyqtwszivxlipedchs&^%']], [['bchi r  et a gf helbcmd&^% lomyfriend&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['xyde n  ap w cb dahxyiz&^% hkiubneajz&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['fglm v  ix e kj lipfgqh&^% psqcjvmirh&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']], [['worlafbcdefghijklhellogfa'], ['sknhwbxyzabcdefghdahhkcbw'], ['asvpejfghijklmnoplippskje']], [['ghellogmyfrithequickbromwnfoxjumpsoverthelazylbcmd&^%lofs'], ['cdahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuhxyiz&^%hkbo'], ['klippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedcpfgqh&^%psjw']], [['heflbklmnopqrsthilomyfriend'], ['dabhxghijklmnopdehkiubneajz'], ['lijpfopqrstuvwxlmpsqcjvmirh']], [['abcdyzzefghijklmnopqrsthi    ehellot a gnd'], ['wxyzuvvabcdefghijklmnopde    adahhkp w cjz'], ['efghcddijklmnopqrstuvwxlm    ilippsx e krh']], [['heyzzzbcdhibc&^%'], ['dauvvvxyzdexy&^%'], ['licdddfghlmfg&^%']], [['yzyyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdccdddddddddddddddddddddddddddddddddd']], [['abcdefghijklmnopqrstuvxyo%bcdhelhellogfa wetorldwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyzdahdahhkcbw sapknhzstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghliplippskje aixsvphabcps&^%d']], [['%%bdc^d&^%'], ['%%xzy^z&^%'], ['%%fhg^h&^%']], [['helbcmlld'], ['dahxyihhz'], ['lipfgqpph']], [['myfrieendvwxyz'], ['iubneaajzrstuv'], ['qcjvmiirhzabcd']], [['bc&thequricertthelazydog^%'], ['xy&pdamqneyanppdahwvuzkc^%'], ['fg&xliuyvmgivxxlipedchsk^%']], [['bc&^%thequicehwellogfa wethorldhelazydogbc&^%'], ['xy&^%pdamqeyadsahhkcbw sapdknhzdahwvuzkcxy&^%'], ['fg&^%xliuymgilaippskje aixlsvphlipedchskfg&^%']], [['hi    et a gf helbcd&^%lomy yfriend'], ['de    ap w cb dahxyz&^%hkiu ubneajz'], ['lm    ix e kj lipfgh&^%psqc cjvmirh']], [['hi    et a gf helbcmd&^%lo myfrhellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfririendiend'], ['de    ap w cb dahxyiz&^%hk iubndahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneneajzeajz'], ['lm    ix e kj lipfgqh&^%ps qcjvlippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmvmirhmirh']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzmyfriend^heo%zzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvviubneajz^dak%vvvvv'], ['cdcdddddddddddddddddddddddddddqcjvmirh^lis%ddddd']], [['thehelbc%bc^d&^%d&^%lomyquicerpsoverthelazydogthelazydog'], ['pdadahxy%xy^z&^%z&^%hkiumqeyanlokranpdahwvuzkcpdahwvuzkc'], ['xlilipfg%fg^h&^%h&^%psqcuymgivtwszivxlipedchskxlipedchsk']], [['eeheabcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzo'], ['aadawxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvk'], ['iiliefghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcds']], [['helylogmyfriend&^%lomyfriend'], ['dahuhkciubneajz&^%hkiubneajz'], ['lipcpskqcjvmirh&^%psqcjvmirh']], [['theqfkbrowfnfoxydo'], ['pdambgxnksbjbktuzk'], ['xliujofvsajrjsbchs']], [['eello'], ['aahhk'], ['iipps']], [['bc&threquicertthelazydhellog^%'], ['xy&pdnamqeyanppdahwvuzdahhkc^%'], ['fg&xlviuymgivxxlipedchlippsk^%']], [['hi    et a gf hiend'], ['de    ap w cb deajz'], ['lm    ix e kj lmirh']], [['hellond'], ['dahhkjz'], ['lippsrh']], [['hi    etg^f helbcmld'], ['de    apc^b dahxyihz'], ['lm    ixk^j lipfgqph']], [['yzzzzob%zzzzzzzzzzzzzzzzzzzzz'], ['uvvvvkx%vvvvvvvvvvvvvvvvvvvvv'], ['cddddsf%ddddddddddddddddddddd']], [['abcdefghijklmnopqrstuhi'], ['wxyzabcdefghijklmnopqde'], ['efghijklmnopqrstuvwxylm']], [['hi r   et a gf helbcmd&^%lomyfiend'], ['de n   ap w cb dahxyiz&^%hkiubeajz'], ['lm v   ix e kj lipfgqh&^%psqcjmirh']], [['hi r  et helelooa gf helbcmd&^%lomyfriend'], ['de n  ap dahahkkw cb dahxyiz&^%hkiubneajz'], ['lm v  ix lipipsse kj lipfgqh&^%psqcjvmirh']], [['hellomyfrienduvxyzo'], ['dahhkiubneajzqrtuvk'], ['lippsqcjvmirhyzbcds']], [['myhi    et a gf heflbcmhelbcmd&^%lomyfriendd&^%lo cmyfendfriendvwxyz'], ['iude    ap w cb dabhxyidahxyiz&^%hkiubneajzz&^%hk yiubajzbneajzrstuv'], ['qclm    ix e kj lijpfgqlipfgqh&^%psqcjvmirhh&^%ps gqcjirhjvmirhzabcd']], [['thequicwkbrthequicerthelazydogownofoxjheleloompszydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfdahahkkilovuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnlipipssqtwdchs']], [['hielbecmd&^%loomyfriend'], ['deahxayiz&^%hkkiubneajz'], ['lmipfigqh&^%pssqcjvmirh']], [['orlwxyyd'], ['knhstuuz'], ['svpabcch']], [['hello oworrld'], ['dahhk ksknnhz'], ['lipps sasvvph']], [['ggfgf'], ['ccbcb'], ['kkjkj']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzhellogmyfriend&^%lomhizzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvdahhkciubneajz&^%hkidevvvvvvvvvvv'], ['cdcdddddddddddddddddddddddlippskqcjvmirh&^%psqlmddddddddddd']], [['gabcdefghijklmnopqrstuvxyfo%bcdhelhellogfagfgf'], ['cwxyzabcdefghijklmnopqrtubk%xyzdahdahhkcbwcbcb'], ['kefghijklmnopqrstuvwxyzbcjs%fghliplippskjekjkj']], [['gf%^b^c^d&^%'], ['cb%^x^y^z&^%'], ['kj%^f^g^h&^%']], [['thequhelbcmld&i^%loicerthelazy%doag'], ['pdamqdahxyihz&e^%hkeyanpdahwvu%zkwc'], ['xliuylipfgqph&m^%psmgivxlipedc%hsek']], [['hellogymyfriend&^%lomyfriendgthequickbrthequicerthelazydogownfoxjumpsoverthelazydof'], ['dahhkcuiubneajz&^%hkiubneajzcpdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokranpdahwvuzkb'], ['lippskcqcjvmirh&^%psqcjvmirhkxliuymgofvxliuymgivxlipedchsksarjsbnyqtwszivxlipedchsj']], [['abcdetuvxyz'], ['wxyzapqrtuv'], ['efghixyzbcd']], [['hhillogfaell%b^c^d&^d%o'], ['ddehhkcbwahh%x^y^z&^z%k'], ['llmppskjeipp%f^g^h&^h%s']], [['bc&^%uthequicertdhelazydohigheblbcmd&^%lobc&^%'], ['xy&^%qpdamqeyanpzdahwvuzkdecdaxhxyiz&^%hkxy&^%'], ['fg&^%yxliuymgivxhlipedchslmklifpfgqh&^%psfg&^%']], [['rworl'], ['nsknh'], ['vasvp']], [['hellogymyfriend&^%lomyfrriendgf'], ['dahhkcuiubneajz&^%hkiubnneajzcb'], ['lippskcqcjvmirh&^%psqcjvvmirhkj']], [['heflbcmhelbcmd&^%lomyfriendd&^%lo'], ['dabhxyidahxyiz&^%hkiubneajzz&^%hk'], ['lijpfgqlipfgqh&^%psqcjvmirhh&^%ps']], [['bb'], ['xx'], ['ff']], [['worlafbcdefghhelbcmd&^%lomyfriendijklhellogfa'], ['sknhwbxyzabcddahxyiz&^%hkiubneajzefghdahhkcbw'], ['asvpejfghijkllipfgqh&^%psqcjvmirhmnoplippskje']], [['athequicwkbrthequicerthelazydogaownofoxjumpsoverthelazydo'], ['wpdamqeysgxnpdamqeyanpdahwvuzkcwksjkbktfqilokranpdahwvuzk'], ['exliuymgaofvxliuymgivxlipedchskesarsjsbnyqtwszivxlipedchs']], [['ahellogfa'], ['wdahhkcbw'], ['elippskje']], [['hi    et aa gf helbcmhelbcmd&^%lomyfriendd&^%lo myfriend'], ['de    ap ww cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubneajz'], ['lm    ix ee kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjvmirh']], [['worwethorld^%'], ['sknsapdknhz^%'], ['asvaixlsvph^%']], [['hhehi    etabcdefghijklhellogfa  a g^f helbcmldlelooywxys'], ['ddade    apwxyzabcdefghdahhkcbw  w c^b dahxyihzhahkkustuo'], ['llilm    ixefghijklmnoplippskje  e k^j lipfgqphpipsscabcw']], [['g^f'], ['c^b'], ['k^j']], [['abcdefghijklmnopqrstuhi     et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde     ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm     ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['thequickbrthequicqerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeymanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymguivxlipedchsksarjsbnyqtwszipedchs']], [['worlafbcdefghijklhellheyzzzbcdhibc&^%ogfa'], ['sknhwbxyzabcdefghdahhdauvvvxyzdexy&^%kcbw'], ['asvpejfghijklmnoplipplicdddfghlmfg&^%skje']], [['abcdyzzefghijklmnopqrsthi'], ['wxyzuvvabcdefghijklmnopde'], ['efghcddijklmnopqrstuvwxlm']], [['hi%%bc^d&hellogfa worwetbc&thequricertthelazydog^%horld^%'], ['de%%xy^z&dahhkcbw sknsapxy&pdamqneyanppdahwvuzkc^%dknhz^%'], ['lm%%fg^h&lippskje asvaixfg&xliuyvmgivxxlipedchsk^%lsvph^%']], [['o%bcdhe&^%'], ['k%xyzda&^%'], ['s%fghli&^%']], [['%bdcthkbrvownfoxjumpsoverthelazydod&^%'], ['%xzypdgxnrksjbktfqilokranpdahwvuzkz&^%'], ['%fhgxlofvzsarjsbnyqtwszivxlipedchsh&^%']], [['hmyfriendfyfriendelgflo'], ['diubneajzbubneajzahcbhk'], ['lqcjvmirhjcjvmirhipkjps']], [['thequhellogmyfthequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfoiendrtazydog'], ['pdamqdahhkciubpdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbkeajznpwvuzkc'], ['xliuylippskqcjxliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjsmirhvxedchsk']], [['theqcuickbrownfoxjumpsoverthbc&^%thequicerthela^zydoghelbcmd&&^%lobc&^%og'], ['pdamyqeygxnksjbktfqilokranpdxy&^%pdamqeyanpdahw^vuzkcdahxyiz&&^%hkxy&^%kc'], ['xliugymgofvsarjsbnyqtwszivxlfg&^%xliuymgivxlipe^dchsklipfgqh&&^%psfg&^%sk']], [['thequickbrownfoxjumpsovertheloazydfo'], ['pdamqeygxnksjbktfqilokranpdahkwvuzbk'], ['xliuymgofvsarjsbnyqtwszivxlipsedchjs']], [['yzzzz'], ['uvvvv'], ['cdddd']], [['bcddd&^%'], ['xyzzz&^%'], ['fghhh&^%']], [['worwetbc&thequricertthelazydog^%horld^%'], ['sknsapxy&pdamqneyanppdahwvuzkc^%dknhz^%'], ['asvaixfg&xliuyvmgivxxlipedchsk^%lsvph^%']], [['hellogfatoorld'], ['dahhkcbwpkknhz'], ['lippskjexssvph']], [['theqcuickbrownfoxjumheleloopsooverthelazbydog'], ['pdamyqeygxnksjbktfqidahahkklokkranpdahwvxuzkc'], ['xliugymgofvsarjsbnyqlipipsstwsszivxlipedfchsk']], [['hi    et a gf hethequickborownfoxydolbcd&^%lomyfriend'], ['de    ap w cb dapdamqeygxknksjbktuzkhxyz&^%hkiubneajz'], ['lm    ix e kj lixliuymgofsvsarjsbchspfgh&^%psqcjvmirh']], [['woworwethorlldrwlwxd'], ['sksknsapdknhhznshstz'], ['asasvaixlsvpphvapabh']], [['theqcrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamynksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['heflbklmnopqrsthilomyfrien'], ['dabhxghijklmnopdehkiubneaj'], ['lijpfopqrstuvwxlmpsqcjvmir']], [['hi    ehellot a gf helahelthequickbrownfoxydolhilogmyfriend'], ['de    adahhkp w cb dahwdahpdamqeygxnksjbktuzkhdehkciubneajz'], ['lm    ilippsx e kj lipelipxliuymgofvsarjsbchsplmpskqcjvmirh']], [['helbcml'], ['dahxyih'], ['lipfgqp']], [['hellogmyfriithequiend&^%lomhi'], ['dahhkciubneepdamqeajz&^%hkide'], ['lippskqcjvmmxliuymirh&^%psqlm']], [['helbc%bc^d&^%d&^%lommworwethorld^%y'], ['dahxy%xy^z&^%z&^%hkiisknsapdknhz^%u'], ['lipfg%fg^h&^%h&^%psqqasvaixlsvph^%c']], [['wxabcdefghijklmnopqrstuhi'], ['stwxyzabcdefghijklmnopqde'], ['abefghijklmnopqrstuvwxylm']], [['afbcdefghijklhellogfa xyz'], ['wbxyzabcdefghdahhkcbw tuv'], ['ejfghijklmnoplippskje bcd']], [['abcdefghijklhellogfa'], ['wxyzabcdefghdahhkcbw'], ['efghijklmnoplippskje']], [['hwelhellogfa wethorldlogfa wethorldd'], ['dsahdahhkcbw sapdknhzhkcbw sapdknhzz'], ['laiplippskje aixlsvphpskje aixlsvphh']], [['bc&^%thequicerth^elazydogbc&^%'], ['xy&^%pdamqeyanpd^ahwvuzkcxy&^%'], ['fg&^%xliuymgivxl^ipedchskfg&^%']], [['h ello oworrld'], ['d ahhk ksknnhz'], ['l ipps sasvvph']], [['ggherthelazydou%lomylhello'], ['ccdanpdahwvuzkq%hkiuhdahhk'], ['kklivxlipedchsy%psqcplipps']], [['%bcdhelwxyl&o&^%'], ['%xyzdahstuh&k&^%'], ['%fghlipabcp&s&^%']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzztheqcuickabcdefghihjklmnopqrstuvxyzbrownfoxjumpsoverthelhellzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvpdamyqeygwxyzabcdedfghijklmnopqrtuvxnksjbktfqilokranpdahdahhvv'], ['cdcdddddddddddddddddddddddddddddxliugymgoefghijklmlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippdd']], [['abacdefghijklmnopqrstuvwxyz'], ['wxwyzabcdefghijklmnopqrstuv'], ['efeghijklmnopqrstuvwxyzabcd']], [['thequickbrownftheqcuickabcdefghihjklmno%bcdhethequieceurtthelazydogydogoxjumpsoverthelazyd'], ['pdamqeygxnksjbpdamyqeygwxyzabcdedfghijk%xyzdapdamqeayaqnppdahwvuzkcuzkcktfqilokranpdahwvuz'], ['xliuymgofvsarjxliugymgoefghijklmlnopqrs%fghlixliuymigiyvxxlipedchskchsksbnyqtwszivxlipedch']], [['thheflbcmhelbcmd&^%lomyfriendd&^%louiceurtazydog'], ['pddabhxyidahxyiz&^%hkiubneajzz&^%hkqeyaqnpwvuzkc'], ['xllijpfgqlipfgqh&^%psqcjvmirhh&^%psymgiyvxedchsk']], [['abcdefghijklmnopqrstuvxyo%bcdxhelwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyztdahstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghblipabcps&^%d']], [['hefmnopqrsthilomyfrien'], ['dabijklmnopdehkiubneaj'], ['lijqrstuvwxlmpsqcjvmir']], [['zyzzz'], ['vuvvv'], ['dcddd']], [['lomyfriend&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['hkiubneajz&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['psqcjvmirh&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']]], [[['hi'], ['de'], ['lm']], [['asdfghjkl'], ['wozbcdfgh'], ['ewhjklnop']], [['gf'], ['cb'], ['kj']], [['et'], ['ap'], ['ix']], [['faewfawefaewg'], ['bwasbwsabwasc'], ['jeiajeaijeiak']], [['hellomyfriend'], ['dahhkiubneajz'], ['lippsqcjvmirh']], [['dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'], ['ztvzhijehbqdiehqbdhedqbjiheijqbdheijqbdbqyqbd'], ['hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl']], [['a'], ['w'], ['e']], [['abcde'], ['wxyza'], ['efghi']], [['uvwxyz'], ['qrstuv'], ['yzabcd']], [['test123'], ['paop123'], ['xiwx123']], [['1a2b3c'], ['1w2x3y'], ['1e2f3g']], [['hello world'], ['dahhk sknhz'], ['lipps asvph']], [['monitor'], ['ikjepkn'], ['qsrmxsv']], [['abc'], ['wxy'], ['efg']], [['kmt'], ['gip'], ['oqx']], [['park'], ['lwng'], ['tevo']], [['mtkmt'], ['ipgip'], ['qxoqx']], [['testpark123'], ['paoplwng123'], ['xiwxtevo123']], [['uvuvwxyzwxyz'], ['qrqrstuvstuv'], ['yzyzabcdabcd']], [['abcdetest123'], ['wxyzapaop123'], ['efghixiwx123']], [['testpark1233'], ['paoplwng1233'], ['xiwxtevo1233']], [['parrte1a2b3cstpark123'], ['lwnnpa1w2x3yoplwng123'], ['tevvxi1e2f3gwxtevo123']], [['pamonitork'], ['lwikjepkng'], ['teqsrmxsvo']], [['uvwabcxyuz'], ['qrswxytuqv'], ['yzaefgbcyd']], [['uvuvwxyzwxz'], ['qrqrstuvstv'], ['yzyzabcdabd']], [['t'], ['p'], ['x']], [['uvz'], ['qrv'], ['yzd']], [['kuvz'], ['gqrv'], ['oyzd']], [['kkuvz'], ['ggqrv'], ['ooyzd']], [['abct'], ['wxyp'], ['efgx']], [['tes2tpark1233'], ['pao2plwng1233'], ['xiw2xtevo1233']], [['at'], ['wp'], ['ex']], [['tkmtkmtuvwabcxyuzmt'], ['pgipgipqrswxytuqvip'], ['xoqxoqxyzaefgbcydqx']], [['uvuvwxyzwxzyz'], ['qrqrstuvstvuv'], ['yzyzabcdabdcd']], [['tkmtkmtuvwabuvuvwxyzwxzcxyuzmt'], ['pgipgipqrswxqrqrstuvstvytuqvip'], ['xoqxoqxyzaefyzyzabcdabdgbcydqx']], [['tsest123'], ['poaop123'], ['xwiwx123']], [['uvutvwxyzwxzyz'], ['qrqprstuvstvuv'], ['yzyxzabcdabdcd']], [['uvwparrkxyz'], ['qrslwnngtuv'], ['yzatevvobcd']], [['tsest123aparrte1a2b3cstpark123'], ['poaop123wlwnnpa1w2x3yoplwng123'], ['xwiwx123etevvxi1e2f3gwxtevo123']], [['abctabcde'], ['wxypwxyza'], ['efgxefghi']], [['tes2testpark123tpark1233'], ['pao2paoplwng123plwng1233'], ['xiw2xiwxtevo123xtevo1233']], [['uvwabbczxyuz'], ['qrswxxyvtuqv'], ['yzaeffgdbcyd']], [['uvvz'], ['qrrv'], ['yzzd']], [['tsest123aparrte1a2b3cstpatrk123'], ['poaop123wlwnnpa1w2x3yoplwpng123'], ['xwiwx123etevvxi1e2f3gwxtexvo123']], [['paabctak'], ['lwwxypwg'], ['teefgxeo']], [['zz'], ['vv'], ['dd']], [['pararte1a2b3cstpark123'], ['lwnwnpa1w2x3yoplwng123'], ['tevevxi1e2f3gwxtevo123']], [['pamonintork'], ['lwikjejpkng'], ['teqsrmrxsvo']], [['uvutvwxyzwxzyzabckuvz'], ['qrqprstuvstvuvwxygqrv'], ['yzyxzabcdabdcdefgoyzd']], [['uvutvwzzxyzwxzyz'], ['qrqprsvvtuvstvuv'], ['yzyxzaddbcdabdcd']], [['tabcdtabcde'], ['pwxyzpwxyza'], ['xefghxefghi']], [['uvwxwyz'], ['qrstsuv'], ['yzabacd']], [['aabcde'], ['wwxyza'], ['eefghi']], [['cpararte1a2b3cstpark1abct23'], ['ylwnwnpa1w2x3yoplwng1wxyp23'], ['gtevevxi1e2f3gwxtevo1efgx23']], [['tse3st23'], ['poa3op23'], ['xwi3wx23']], [['mtuvwxyzkmt'], ['ipqrstuvgip'], ['qxyzabcdoqx']], [['tsest123aparrte1a2b3cstapark123'], ['poaop123wlwnnpa1w2x3yopwlwng123'], ['xwiwx123etevvxi1e2f3gwxetevo123']], [['cpaararuvvzte1a2b3cstpark1abct23'], ['ylwwnwnqrrvpa1w2x3yoplwng1wxyp23'], ['gteevevyzzdxi1e2f3gwxtevo1efgx23']], [['tse32st23'], ['poa32op23'], ['xwi32wx23']], [['uvutvwxyzwxzyzabckumtkmtvz'], ['qrqprstuvstvuvwxygqipgiprv'], ['yzyxzabcdabdcdefgoyqxoqxzd']], [['uvwaubcxyuz'], ['qrswqxytuqv'], ['yzaeyfgbcyd']], [['abuvutvwxyzwxzyzabckuvzct'], ['wxqrqprstuvstvuvwxygqrvyp'], ['efyzyxzabcdabdcdefgoyzdgx']], [['tes2testppark1233'], ['pao2paopllwng1233'], ['xiw2xiwxttevo1233']], [['uvwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz'], ['qrstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv'], ['yzabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad']], [['xuvuvwxyzwxzyz'], ['tqrqrstuvstvuv'], ['byzyzabcdabdcd']], [['wuvwxyz'], ['sqrstuv'], ['ayzabcd']], [['aabdcde'], ['wwxzyza'], ['eefhghi']], [['uvwxyzwxyz'], ['qrstuvstuv'], ['yzabcdabcd']], [['cpararte1a2b3cstpark1abctuvwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz23'], ['ylwnwnpa1w2x3yoplwng1wxypqrstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv23'], ['gtevevxi1e2f3gwxtevo1efgxyzabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad23']], [['tkumtkmtuvwabuvuvwxyzwxzcxyuzmt'], ['pgqipgipqrswxqrqrstuvstvytuqvip'], ['xoyqxoqxyzaefyzyzabcdabdgbcydqx']], [['uvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywz'], ['qrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusv'], ['yzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcad']], [['wuvwxyzz'], ['sqrstuvv'], ['ayzabcdd']], [['xzyzabckumtkmtvz'], ['tvuvwxygqipgiprv'], ['bdcdefgoyqxoqxzd']], [['zzz'], ['vvv'], ['ddd']], [['ts2e3st23'], ['po2a3op23'], ['xw2i3wx23']], [['uvzmonitorz'], ['qrvikjepknv'], ['yzdqsrmxsvd']], [['t3se3'], ['p3oa3'], ['x3wi3']], [['uvutvwzzxz'], ['qrqprsvvtv'], ['yzyxzaddbd']], [['uvuvzwxyzwxz'], ['qrqrvstuvstv'], ['yzyzdabcdabd']], [['cpararteuvwxwyz1a2b3cstpark1abct23'], ['ylwnwnpaqrstsuv1w2x3yoplwng1wxyp23'], ['gtevevxiyzabacd1e2f3gwxtevo1efgx23']], [['stsest123'], ['opoaop123'], ['wxwiwx123']], [['tsest123aparrte1a2b3cstapark1213'], ['poaop123wlwnnpa1w2x3yopwlwng1213'], ['xwiwx123etevvxi1e2f3gwxetevo1213']], [['uvutvwvxyzwxzuvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywz'], ['qrqprsrtuvstvqrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusv'], ['yzyxzazbcdabdyzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcad']], [['kparrte1a2b3cstpark123'], ['glwnnpa1w2x3yoplwng123'], ['otevvxi1e2f3gwxtevo123']], [['pamonintorkpamonitoork'], ['lwikjejpknglwikjepkkng'], ['teqsrmrxsvoteqsrmxssvo']], [['tsestcpararte1a2b3cstpark1abct23123apa3'], ['poaopylwnwnpa1w2x3yoplwng1wxyp23123wlw3'], ['xwiwxgtevevxi1e2f3gwxtevo1efgx23123ete3']], [['abctest123'], ['wxypaop123'], ['efgxiwx123']], [['xzyzauvwxyzwxyzbckumtzkmtvz'], ['tvuvwqrstuvstuvxygqipvgiprv'], ['bdcdeyzabcdabcdfgoyqxdoqxzd']], [['1testpark1233'], ['1paoplwng1233'], ['1xiwxtevo1233']], [['tse32st233'], ['poa32op233'], ['xwi32wx233']], [['testtpark'], ['paopplwng'], ['xiwxxtevo']], [['abuvutvwxystsest123zwxzyzabckuvzct'], ['wxqrqprstuopoaop123vstvuvwxygqrvyp'], ['efyzyxzabcwxwiwx123dabdcdefgoyzdgx']], [['kmuvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywzt'], ['giqrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusvp'], ['oqyzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcadx']], [['xzyzabckumtkmtvzz'], ['tvuvwxygqipgiprvv'], ['bdcdefgoyqxoqxzdd']], [['uvuvwxyzzyzpamonitork'], ['qrqrstuvvuvlwikjepkng'], ['yzyzabcddcdteqsrmxsvo']], [['ut3se3vwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz'], ['qp3oa3rstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv'], ['yx3wi3zabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad']], [['abuvutvwxyzwxvzyzabckuvzct'], ['wxqrqprstuvstrvuvwxygqrvyp'], ['efyzyxzabcdabzdcdefgoyzdgx']], [['monitormuvvztkmt'], ['ikjepkniqrrvpgip'], ['qsrmxsvqyzzdxoqx']], [['uvxwpuvuvwxyzwxyzarrkxyz'], ['qrtslqrqrstuvstuvwnngtuv'], ['yzbatyzyzabcdabcdevvobcd']], [['uvwxzwyz'], ['qrstvsuv'], ['yzabdacd']], [['monitomrmuvvztkmt'], ['ikjepkiniqrrvpgip'], ['qsrmxsqvqyzzdxoqx']], [['parrte1a2b3cstpark123uvwabcxyuzuvwaxbbczxyuz'], ['lwnnpa1w2x3yoplwng123qrswxytuqvqrswtxxyvtuqv'], ['tevvxi1e2f3gwxtevo123yzaefgbcydyzaebffgdbcyd']], [['uvutvwxyzwxzyzabckuvzabctest123'], ['qrqprstuvstvuvwxygqrvwxypaop123'], ['yzyxzabcdabdcdefgoyzdefgxiwx123']], [['parkk'], ['lwngg'], ['tevoo']], [['uvwabbcxzxyuz'], ['qrswxxytvtuqv'], ['yzaeffgbdbcyd']], [['parrte1a2b3cst2park123'], ['lwnnpa1w2x3yop2lwng123'], ['tevvxi1e2f3gwx2tevo123']], [['bcd&^%'], ['xyz&^%'], ['fgh&^%']], [['thequickbrownfoxjumpsoverthelazydog'], ['pdamqeygxnksjbktfqilokranpdahwvuzkc'], ['xliuymgofvsarjsbnyqtwszivxlipedchsk']], [['abcdefghijklmnopqrstuvwxyz'], ['wxyzabcdefghijklmnopqrstuv'], ['efghijklmnopqrstuvwxyzabcd']], [['wxy'], ['stu'], ['abc']], [['yzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cddddddddddddddddddddddddd']], [['hi    et a gf hellomyfriend'], ['de    ap w cb dahhkiubneajz'], ['lm    ix e kj lippsqcjvmirh']], [['thequickbrownfoxjumpsoverthelazydo'], ['pdamqeygxnksjbktfqilokranpdahwvuzk'], ['xliuymgofvsarjsbnyqtwszivxlipedchs']], [['hi    et a gf hellomyfrienhellod'], ['de    ap w cb dahhkiubneajdahhkz'], ['lm    ix e kj lippsqcjvmirlippsh']], [['et'], ['ap'], ['ix']], [['hello'], ['dahhk'], ['lipps']], [['wxxy'], ['sttu'], ['abbc']], [['ho'], ['dk'], ['ls']], [['helo'], ['dahk'], ['lips']], [['heti    get a gf hellomyfrienhellod'], ['dape    cap w cb dahhkiubneajdahhkz'], ['lixm    kix e kj lippsqcjvmirlippsh']], [['helothequickbrownfoxjumpsoverthelazydo'], ['dahkpdamqeygxnksjbktfqilokranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwszivxlipedchs']], [['yzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdddddddddddddddddddddddddd']], [['hbcd&^%elo'], ['dxyz&^%ahk'], ['lfgh&^%ips']], [['b&cd&^'], ['x&yz&^'], ['f&gh&^']], [['ythequickbrownfoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszivxlipedchs']], [['hello heloworld'], ['dahhk dahksknhz'], ['lipps lipsasvph']], [['heloworld'], ['dahksknhz'], ['lipsasvph']], [['abcdefghijklmnopqrstuvwxyzythequickbrownfoxjumpsoverthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqilokranpdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqtwszivxlipedchs']], [['hi    et a rgf hellomyfrienhellod'], ['de    ap w ncb dahhkiubneajdahhkz'], ['lm    ix e vkj lippsqcjvmirlippsh']], [['heti    get a gf hellomyferienhellod'], ['dape    cap w cb dahhkiubaneajdahhkz'], ['lixm    kix e kj lippsqcjivmirlippsh']], [['hi    et a gf helloetmyfrienhellod'], ['de    ap w cb dahhkapiubneajdahhkz'], ['lm    ix e kj lippsixqcjvmirlippsh']], [['hi'], ['de'], ['lm']], [['thi    et a gf helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydog'], ['pde    ap w cb dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkc'], ['xlm    ix e kj lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchsk']], [['rgf'], ['ncb'], ['vkj']], [['abcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['helothequickbrownfoxumpsoverthelazydo'], ['dahkpdamqeygxnksjbktqilokranpdahwvuzk'], ['lipsxliuymgofvsarjsbyqtwszivxlipedchs']], [['abcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoe'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsi']], [['helothequickbrownfoxumpsovekrthelazydo'], ['dahkpdamqeygxnksjbktqilokragnpdahwvuzk'], ['lipsxliuymgofvsarjsbyqtwsziovxlipedchs']], [['helothequickbrownfoxjumpsgetoverthelazydo'], ['dahkpdamqeygxnksjbktfqilocapkranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkixszivxlipedchs']], [['hi    et  a gf hellomyfrienhellod'], ['de    ap  w cb dahhkiubneajdahhkz'], ['lm    ix  e kj lippsqcjvmirlippsh']], [['yywxy'], ['uustu'], ['ccabc']], [['ythequickbrownfhi    et a gf hellomyfriendoxjumpsoverthelazydo'], ['updamqeygxnksjbde    ap w cb dahhkiubneajzktfqilokranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lippsqcjvmirhsbnyqtwszivxlipedchs']], [['hi    etrgf hhellomyfrienhellod'], ['de    apncb ddahhkiubneajdahhkz'], ['lm    ixvkj llippsqcjvmirlippsh']], [['hhellomyfrienhellod'], ['ddahhkiubneajdahhkz'], ['llippsqcjvmirlippsh']], [['abcdefghijfklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefbghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnjopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['hellomyfriendoxjumpsoverthelazydo'], ['dahhkiubneajzktfqilokranpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszivxlipedchs']], [['thequickbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['heti    get a gf hellomyfrieonhellod'], ['dape    cap w cb dahhkiubneakjdahhkz'], ['lixm    kix e kj lippsqcjvmisrlippsh']], [['hi    et a gf hellomyfrienhellood'], ['de    ap w cb dahhkiubneajdahhkkz'], ['lm    ix e kj lippsqcjvmirlippssh']], [['yywx'], ['uust'], ['ccab']], [['ythequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['updamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['helowythequickbrownfhiorld'], ['dahksupdamqeygxnksjbdeknhz'], ['lipsacxliuymgofvsarjlmsvph']], [['wxxyy'], ['sttuu'], ['abbcc']], [['hi    let a gf hellomyfriend'], ['de    hap w cb dahhkiubneajz'], ['lm    pix e kj lippsqcjvmirh']], [['yzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdddddddddddddddddddddddd']], [['hhellomyfrinhellod'], ['ddahhkiubnejdahhkz'], ['llippsqcjvmrlippsh']], [['hellomyfrienhellodrownfoxjumpsoverthelazydojumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwszivxlipedchs']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogod'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckz'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchsksh']], [['hi    et a gf hellomyfrie'], ['de    ap w cb dahhkiubnea'], ['lm    ix e kj lippsqcjvmi']], [['ythequickbrownfhi'], ['updamqeygxnksjbde'], ['cxliuymgofvsarjlm']], [['heti    get a gf hellomyfrieonhello d'], ['dape    cap w cb dahhkiubneakjdahhk z'], ['lixm    kix e kj lippsqcjvmisrlipps h']], [['gf'], ['cb'], ['kj']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsibcc']], [['heti    get a mgf hellomyfrienhellod'], ['dape    cap w icb dahhkiubneajdahhkz'], ['lixm    kix e qkj lippsqcjvmirlippsh']], [['hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['eetrgft'], ['aapncbp'], ['iixvkjx']], [['eetrgf'], ['aapncb'], ['iixvkj']], [['hellomyferienhellod'], ['dahhkiubaneajdahhkz'], ['lippsqcjivmirlippsh']], [['b&helothequickbrownfoxjumpsgetoverthelazydocd&^'], ['x&dahkpdamqeygxnksjbktfqilocapkranpdahwvuzkyz&^'], ['f&lipsxliuymgofvsarjsbnyqtwkixszivxlipedchsgh&^']], [['hi    et a gf helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellod'], ['de    ap w cb dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['hi    et a gf hellomyfrienheod'], ['de    ap w cb dahhkiubneajdakz'], ['lm    ix e kj lippsqcjvmirlish']], [['yywxxy'], ['uusttu'], ['ccabbc']], [['helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['ohhellomyfrienhellod'], ['kddahhkiubneajdahhkz'], ['sllippsqcjvmirlippsh']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupmpsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytqtwszivxlipedchsibcc']], [['a'], ['w'], ['e']], [['hello heloworlthequickbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['dahhk dahksknhpdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['lipps lipsasvpxliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['ohhellomyfriend'], ['kddahhkiubneajz'], ['sllippsqcjvmirh']], [['hellomyfrienheod'], ['dahhkiubneajdakz'], ['lippsqcjvmirlish']], [['wolrld'], ['skhnhz'], ['aspvph']], [['hi    et a gf helloetmthelquickbrownfoxjumpsoverthelazydoyfrienhellod'], ['de    ap w cb dahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['heloworlthequickbheti'], ['dahksknhpdamqeygxdape'], ['lipsasvpxliuymgoflixm']], [['ergft'], ['ancbp'], ['ivkjx']], [['hel'], ['dah'], ['lip']], [['tlet'], ['phap'], ['xpix']], [['hi    letheti    get a gf hellomyfrieonhello df hellomyfriend'], ['de    hapdape    cap w cb dahhkiubneakjdahhk zb dahhkiubneajz'], ['lm    pixlixm    kix e kj lippsqcjvmisrlipps hj lippsqcjvmirh']], [['abcdefghijfklmnopeetrgftqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefbghijklaapncbpmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnjopqrstiixvkjxuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['hi    et a rgf hellomyfrienhelb&cd&^lod'], ['de    ap w ncb dahhkiubneajdahx&yz&^hkz'], ['lm    ix e vkj lippsqcjvmirlipf&gh&^psh']], [['hellomyfrienhelb&cd&^lod'], ['dahhkiubneajdahx&yz&^hkz'], ['lippsqcjvmirlipf&gh&^psh']], [['helowythehquickbrownfhhiorld'], ['dahksupdadmqeygxnksjbddeknhz'], ['lipsacxliluymgofvsarjllmsvph']], [['ohhelyfrienhellod'], ['kddahubneajdahhkz'], ['sllipcjvmirlippsh']], [['hi    ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de    ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['bythequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo&cd&d^'], ['xupdamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk&yz&z^'], ['fcxliuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs&gh&h^']], [['hellomyfrienhellod'], ['dahhkiubneajdahhkz'], ['lippsqcjvmirlippsh']], [['hi    et a ohhellomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['eeetrgft'], ['aaapncbp'], ['iiixvkjx']], [['hellomyfriendoxjumpsovelrthelazydo'], ['dahhkiubneajzktfqilokrahnpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszipvxlipedchs']], [['hellomyfrienhellood'], ['dahhkiubneajdahhkkz'], ['lippsqcjvmirlippssh']], [['ythequickbrownfoxthequickbheti'], ['updamqeygxnksjbktpdamqeygxdape'], ['cxliuymgofvsarjsbxliuymgoflixm']], [['hellomyfrietrgf'], ['dahhkiubneapncb'], ['lippsqcjvmixvkj']], [['hellomyfrieonhello'], ['dahhkiubneakjdahhk'], ['lippsqcjvmisrlipps']], [['ehel'], ['adah'], ['ilip']], [['helflomyfrietrgf'], ['dahbhkiubneapncb'], ['lipjpsqcjvmixvkj']], [['hhellyomyfrienhellod'], ['ddahhukiubneajdahhkz'], ['llippcsqcjvmirlippsh']], [['helloetmthelquickbrownfoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['ythehelloetmthelquickbrownfoxjumpsoverthelazydoyienhellodnfhi'], ['updadahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkueajdahhkzjbde'], ['cxlilippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscmirlippshrjlm']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsovierthi'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokreanpde'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszmivxlm']], [['heti    get a gfrieonhello d'], ['dape    cap w cbneakjdahhk z'], ['lixm    kix e kjvmisrlipps h']], [['eeet'], ['aaap'], ['iiix']], [['hi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellod'], ['de    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippsh']], [['hi    et ehia rgf hellomyfrienhellod'], ['de    ap adew ncb dahhkiubneajdahhkz'], ['lm    ix ilme vkj lippsqcjvmirlippsh']], [['let'], ['hap'], ['pix']], [['hellomyfriendoxjumpsovelrathelazydo'], ['dahhkiubneajzktfqilokrahnwpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszipvexlipedchs']], [['hi    et a gf helloetmyfrienhellothequickbhetid'], ['de    ap w cb dahhkapiubneajdahhkpdamqeygxdapez'], ['lm    ix e kj lippsixqcjvmirlippsxliuymgoflixmh']], [['heti    get a mgf hehi    et ehia rgf hellomyfrienhellodllomyfrienhellod'], ['dape    cap w icb dade    ap adew ncb dahhkiubneajdahhkzhhkiubneajdahhkz'], ['lixm    kix e qkj lilm    ix ilme vkj lippsqcjvmirlippshppsqcjvmirlippsh']], [['helloomyfrienheod'], ['dahhkkiubneajdakz'], ['lippssqcjvmirlish']], [['hi   helowythehquickbrownfhhiorld ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de   dahksupdadmqeygxnksjbddeknhz ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm   lipsacxliluymgofvsarjllmsvph ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['hello heloworlthequickbheti    get a gf hellomyfrienhellodrownfoxjumpsothequickbhetiverthelazydo'], ['dahhk dahksknhpdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokpdamqeygxdaperanpdahwvuzk'], ['lipps lipsasvpxliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwsxliuymgoflixmzivxlipedchs']], [['abcdefghijklmnopqrstuvwxyzythequickbrownfoxjumpsoveletthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqilokrahappdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqtwszipixxlipedchs']], [['d'], ['z'], ['h']], [['hi    et a ohhelolomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w kddahkhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e sllipspsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['hellomyfrienhellodllomyfrienhellod'], ['dahhkiubneajdahhkzhhkiubneajdahhkz'], ['lippsqcjvmirlippshppsqcjvmirlippsh']], [['hhelothequickbrownfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksjbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsarjsbyqtwsziovxlipedchs']], [['heti    get a mgf hehi   e et ehia rgf hellomyfrienhellodllomyfrhoienhellod'], ['dape    cap w icb dade   a ap adew ncb dahhkiubneajdahhkzhhkiubndkeajdahhkz'], ['lixm    kix e qkj lilm   i ix ilme vkj lippsqcjvmirlippshppsqcjvlsmirlippsh']], [['helll'], ['dahhh'], ['lippp']], [['helothequickbrownfoxjumpsgetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqilocapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkixszilvxlipedchs']], [['hellthi'], ['dahhpde'], ['lippxlm']], [['hellomyfrrienhelb&cd&^lod'], ['dahhkiubnneajdahx&yz&^hkz'], ['lippsqcjvvmirlipf&gh&^psh']], [['yzzzzzzzzzzzzzzzzzzzzzzzzhel'], ['uvvvvvvvvvvvvvvvvvvvvvvvvdah'], ['cddddddddddddddddddddddddlip']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmirlippsh']], [['hellomyfrieendoxjumpsovelrthelazydo'], ['dahhkiubneaajzktfqilokrahnpdahwvuzk'], ['lippsqcjvmiirhsbnyqtwszipvxlipedchs']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogodoworld'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhz'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchskshsasvph']], [['ythequickbrownfhi    et a gf hellomyfriendoxjumpsojverthelazydo'], ['updamqeygxnksjbde    ap w cb dahhkiubneajzktfqilokfranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lippsqcjvmirhsbnyqtwsnzivxlipedchs']], [['hellomyfrienhellodllomyfrhoienhellod'], ['dahhkiubneajdahhkzhhkiubndkeajdahhkz'], ['lippsqcjvmirlippshppsqcjvlsmirlippsh']], [['woolrld'], ['skkhnhz'], ['asspvph']], [['bcd'], ['xyz'], ['fgh']], [['hellomyfergetienhellod'], ['dahhkiubancapeajdahhkz'], ['lippsqcjivkixmirlippsh']], [['bcdhellomyfrienhelb&cd&^lod'], ['xyzdahhkiubneajdahx&yz&^hkz'], ['fghlippsqcjvmirlipf&gh&^psh']], [['helothequickbrowonfoxumpsovekrthelazydo'], ['dahkpdamqeygxnkskjbktqilokragnpdahwvuzk'], ['lipsxliuymgofvsasrjsbyqtwsziovxlipedchs']], [['hhellomyfriod'], ['ddahhkiubnekz'], ['llippsqcjvmsh']], [['mgf'], ['icb'], ['qkj']], [['etrf'], ['apnb'], ['ixvj']], [['helhi'], ['dahde'], ['liplm']], [['bcd&%'], ['xyz&%'], ['fgh&%']], [['hhi    et a ohhellomyfrienhellodrgf hellomyfrienhellodellomyfrienhellood'], ['dde    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkzahhkiubneajdahhkkz'], ['llm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippshippsqcjvmirlippssh']], [['e'], ['a'], ['i']], [['hi    et a rgf hellomyfrienhelb&cd&^llod'], ['de    ap w ncb dahhkiubneajdahx&yz&^hhkz'], ['lm    ix e vkj lippsqcjvmirlipf&gh&^ppsh']], [['bcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lod'], ['xyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkz'], ['fghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^psh']], [['wwxy'], ['sstu'], ['aabc']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoi    t a gf hellomyfrieonhello d'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzke    p w cb dahhkiubneakjdahhk z'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsm    x e kj lippsqcjvmisrlipps h']], [['hlelll'], ['dhahhh'], ['lpippp']], [['eheel'], ['adaah'], ['iliip']], [['heti    get a gfrieonhello helothequickbrownfoxumpsovekrthelazydod'], ['dape    cap w cbneakjdahhk dahkpdamqeygxnksjbktqilokragnpdahwvuzkz'], ['lixm    kix e kjvmisrlipps lipsxliuymgofvsarjsbyqtwsziovxlipedchsh']], [['heolo'], ['dakhk'], ['lisps']], [['ehelhellomyfrienhelb&cd&^lod'], ['adahdahhkiubneajdahx&yz&^hkz'], ['iliplippsqcjvmirlipf&gh&^psh']], [['helloetmyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthigfthequickbhetid'], ['dahhkapiubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdecbpdamqeygxdapez'], ['lippsixqcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmkjxliuymgoflixmh']], [['ehelloetmyfrthirgft'], ['adahhkapiubnpdencbp'], ['ilippsixqcjvxlmvkjx']], [['helbcd&^%lomyfriendoxhi    etrgf hhellomyfrienhellodjumpsoverthelawwxyzydo&cd&d^'], ['dahxyz&^%hkiubneajzktde    apncb ddahhkiubneajdahhkzfqilokranpdahwsstuvuzk&yz&z^'], ['lipfgh&^%psqcjvmirhsblm    ixvkj llippsqcjvmirlippshnyqtwszivxlipeaabcdchs&gh&h^']], [['ohhelolomyfrienhellodrgf'], ['kddahkhkiubneajdahhkzncb'], ['sllipspsqcjvmirlippshvkj']], [['thequickbrownfoxjumpsoverthi    et a gf helloetmyfrienhellodhelazydo'], ['pdamqeygxnksjbktfqilokranpde    ap w cb dahhkapiubneajdahhkzdahwvuzk'], ['xliuymgofvsarjsbnyqtwszivxlm    ix e kj lippsixqcjvmirlippshlipedchs']], [['helloetmyfrienhellothequickbhetid'], ['dahhkapiubneajdahhkpdamqeygxdapez'], ['lippsixqcjvmirlippsxliuymgoflixmh']], [['trhequickbrownfoxjumpsoverthelazydog'], ['pndamqeygxnksjbktfqilokranpdahwvuzkc'], ['xvliuymgofvsarjsbnyqtwszivxlipedchsk']], [['hellomyfriendoxjumpsojverthelazydo'], ['dahhkiubneajzktfqilokfranpdahwvuzk'], ['lippsqcjvmirhsbnyqtwsnzivxlipedchs']], [['eeetrgfthellomyfrienhellodrownfoxjumpsoverthelazydo'], ['aaapncbpdahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['iiixvkjxlippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['gfrieonhello'], ['cbneakjdahhk'], ['kjvmisrlipps']], [['heloo'], ['dahkk'], ['lipss']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrienhellodget'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneajdahhkzcap'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmirlippshkix']], [['helloomyfrienhhi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellodeod'], ['dahhkkiubneajdde    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkzakz'], ['lippssqcjvmirllm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippshish']], [['ehellgft'], ['adahhcbp'], ['ilippkjx']], [['hehi    et a ohhelolomyfrienhellodrgf hellomyfrienhellodlflomyfrietrgf'], ['dade    ap w kddahkhkiubneajdahhkzncb dahhkiubneajdahhkzhbhkiubneapncb'], ['lilm    ix e sllipspsqcjvmirlippshvkj lippsqcjvmirlippshpjpsqcjvmixvkj']], [['hello wlorld'], ['dahhk shknhz'], ['lipps apsvph']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodhelazydoexyy'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzdahwvuzkatuu'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshlipedchsibcc']], [['abcdefghijklmnopqrsquickbrownfoxjumpsovferthelazydo'], ['wxyzabcdefghijklmnomqeygxnksjbktfqilokrbanpdahwvuzk'], ['efghijklmnopqrstuvwuymgofvsarjsbnyqtwszjivxlipedchs']], [['helloetmyfrienhellod'], ['dahhkapiubneajdahhkz'], ['lippsixqcjvmirlippsh']], [['hi    helotheqolod'], ['de    dahkpdamkhkz'], ['lm    lipsxliuspsh']], [['wxabcdefghijklmoxjumpsoverthelazydoexyy'], ['stwxyzabcdefghiktfqilokranpdahwvuzkatuu'], ['abefghijklmnopqsbnyqtwszivxlipedchsibcc']], [['thequickbrownfoxjumpsovertheazydo'], ['pdamqeygxnksjbktfqilokranpdawvuzk'], ['xliuymgofvsarjsbnyqtwszivxliedchs']], [['hi    et ehia rgf hfrienhehellomyfrienhellodrownfoxjumpsoverthelazydojumpsoverthelazydollod'], ['de    ap adew ncb dbneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilokranpdahwvuzkhhkz'], ['lm    ix ilme vkj ljvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwszivxlipedchsppsh']], [['abcdefghijfklmnopeetrgftqazydo'], ['wxyzabcdefbghijklaapncbpmwvuzk'], ['efghijklmnjopqrstiixvkjxuedchs']], [['helothequickbrownfonxjumpsgetoverthelazydo'], ['dahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzk'], ['lipsxliuymgofvsarjsrbnyqtwkixszivxlipedchs']], [['hellomyfrie'], ['dahhkiubnea'], ['lippsqcjvmi']], [['eehia'], ['aadew'], ['iilme']], [['bcohhellomyfrienhellodd'], ['xykddahhkiubneajdahhkzz'], ['fgsllippsqcjvmirlippshh']], [['helbcdhhellyomyfrienhellod&^%lomyfriendoxjumpsoverthelazydo&cd&d^'], ['dahxyzddahhukiubneajdahhkz&^%hkiubneajzktfqilokranpdahwvuzk&yz&z^'], ['lipfghllippcsqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxlipedchs&gh&h^']], [['hellomyfergetienhelllod'], ['dahhkiubancapeajdahhhkz'], ['lippsqcjivkixmirlipppsh']], [['helbcd&^%lomyfriendoxhihhello'], ['dahxyz&^%hkiubneajzktdeddahhk'], ['lipfgh&^%psqcjvmirhsblmllipps']], [['aa'], ['ww'], ['ee']], [['hi    ehi    et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de    ade    ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupompsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlkilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytsqtwszivxlipedchsibcc']], [['hello heti    get a gf hellomyfrieonhello dd'], ['dahhk dape    cap w cb dahhkiubneakjdahhk zz'], ['lipps lixm    kix e kj lippsqcjvmisrlipps hh']], [['helothequickbrownfoxjuhielazydo'], ['dahkpdamqeygxnksjbktfqdeahwvuzk'], ['lipsxliuymgofvsarjsbnylmipedchs']], [['hello heti    get a gf hellomyfheti    get a mgf hellomyfrienhellodo dd'], ['dahhk dape    cap w cb dahhkiubdape    cap w icb dahhkiubneajdahhkzk zz'], ['lipps lixm    kix e kj lippsqcjlixm    kix e qkj lippsqcjvmirlippshs hh']], [['hello helowhellomyfrrienhelb&cd&^lodorld'], ['dahhk dahksdahhkiubnneajdahx&yz&^hkzknhz'], ['lipps lipsalippsqcjvvmirlipf&gh&^pshsvph']], [['yzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cddddddddddddddiliipddddddddddd']], [['bcohhellomyfrieythequickbrownfoxthequickbhetinhellodd'], ['xykddahhkiubneaupdamqeygxnksjbktpdamqeygxdapejdahhkzz'], ['fgsllippsqcjvmicxliuymgofvsarjsbxliuymgoflixmrlippshh']], [['hhellomyffrienhellod'], ['ddahhkiubbneajdahhkz'], ['llippsqcjjvmirlippsh']], [['ef'], ['ab'], ['ij']], [['helloetmyfrienhellodhequicokbrownfoxjumpsoverthelzazydogod'], ['dahhkapiubneajdahhkzdamqeykgxnksjbktfqilokranpdahvwvuzkckz'], ['lippsixqcjvmirlippshliuymgsofvsarjsbnyqtwszivxlipdedchsksh']], [['erghi'], ['ancde'], ['ivklm']], [['hhellomyfriengfrieonhellohellodnhellodlod'], ['ddahhkiubneajcbneakjdahhkdahhkzjdahhkzhkz'], ['llippsqcjvmirkjvmisrlippslippshrlippshpsh']], [['helothequickbrownfoxjumpsgmetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqilociapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkqixszilvxlipedchs']], [['hellb&helothequickbrownfoxjumpsgetoverthelazydocd&^frietrogf'], ['dahhx&dahkpdamqeygxnksjbktfqilocapkranpdahwvuzkyz&^bneapnkcb'], ['lippf&lipsxliuymgofvsarjsbnyqtwkixszivxlipedchsgh&^jvmixvskj']], [['hi    et a gfi hellomyfrie'], ['de    ap w cbe dahhkiubnea'], ['lm    ix e kjm lippsqcjvmi']], [['hello helowhellomyhellomyfrienhelb&cd&^lodfrrienhelb&cd&^lodorld'], ['dahhk dahksdahhkiudahhkiubneajdahx&yz&^hkzbnneajdahx&yz&^hkzknhz'], ['lipps lipsalippsqclippsqcjvmirlipf&gh&^pshjvvmirlipf&gh&^pshsvph']], [['hi    et a rgf hellomyfrietnhelb&cd&^lod'], ['de    ap w ncb dahhkiubneapjdahx&yz&^hkz'], ['lm    ix e vkj lippsqcjvmixrlipf&gh&^psh']], [['hi    et a gf lhgfrieonhelloellomyfrie'], ['de    ap w cb hdcbneakjdahhkahhkiubnea'], ['lm    ix e kj plkjvmisrlippsippsqcjvmi']], [['hellomyfrieonhellod'], ['dahhkiubneakjdahhkz'], ['lippsqcjvmisrlippsh']], [['helbcd&^hellomyfrienhellodellomyfrienhellood%lomyfriendoxhihhello'], ['dahxyz&^dahhkiubneajdahhkzahhkiubneajdahhkkz%hkiubneajzktdeddahhk'], ['lipfgh&^lippsqcjvmirlippshippsqcjvmirlippssh%psqcjvmirhsblmllipps']], [['get'], ['cap'], ['kix']], [['helhlellllthi'], ['dahdhahhhhpde'], ['liplpippppxlm']], [['helloetmyfrienhellohellomyfrienhellodrownfoxjumpsoverthelazydothequickbhetid'], ['dahhkapiubneajdahhkdahhkiubneajdahhkznksjbktfqilokranpdahwvuzkpdamqeygxdapez'], ['lippsixqcjvmirlippslippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsxliuymgoflixmh']], [['hi    et ehia rgf he llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['de    ap adew ncb da hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['lm    ix ilme vkj li ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['hi    ehi   l et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de    ade   h ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm    ilm   p ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['hbcd&^%eo'], ['dxyz&^%ak'], ['lfgh&^%is']], [['ohhelolomyfetrienhellrgf'], ['kddahkhkiubapneajdahhncb'], ['sllipspsqcjixvmirlippvkj']], [['thequicukbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqeyqgxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuymgyoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['helloetmyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthigbhetiid'], ['dahhkapiubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdecxdapeez'], ['lippsixqcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmkflixmmh']], [['hellomyfrrienhelb&cdlod'], ['dahhkiubnneajdahx&yzhkz'], ['lippsqcjvvmirlipf&ghpsh']], [['helowythequicckbrownfhihi    et a gf hellomyfriendorld'], ['dahksupdamqeyygxnksjbdede    ap w cb dahhkiubneajzknhz'], ['lipsacxliuymggofvsarjlmlm    ix e kj lippsqcjvmirhsvph']], [['abcdefghijklmnopqrstuvwxwxabcdefghijklmnopqrstuvwxyyzythequickbrhownfoxjumpsoverthelazydoe'], ['wxyzabcdefghijklmnopqrststwxyzabcdefghijklmnopqrstuuvupdamqeygxndksjbktfqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxyzababefghijklmnopqrstuvwxyzabccdcxliuymgofvlsarjsbnyqtwszivxlipedchsi']], [['efrgft'], ['abncbp'], ['ijvkjx']], [['ythequickbrownfoxjumpsoverthelazydoythequickbrownoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokranpdahwvuzkupdamqeygxnksjktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszivxlipedchscxliuymgofvsarsbnyqtwszivxlipedchs']], [['ehehif'], ['adadeb'], ['ililmj']], [['heheti    get a gf hellomyfrieonhellyodllomyfergetienhelllob&cd&^d'], ['dadape    cap w cb dahhkiubneakjdahhukzhhkiubancapeajdahhhkx&yz&^z'], ['lilixm    kix e kj lippsqcjvmisrlippcshppsqcjivkixmirlipppsf&gh&^h']], [['hi    et aheallomyfriendoxjumpsoverthelazydo gf helloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['de    ap wdawhhkiubneajzktfqilokranpdahwvuzk cb dahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix elieppsqcjvmirhsbnyqtwszivxlipedchs kj lippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['hi e   let a gf hellomyfriend'], ['de a   hap w cb dahhkiubneajz'], ['lm i   pix e kj lippsqcjvmirh']], [['hllelll'], ['dhhahhh'], ['lppippp']], [['hhellyomyfrielod'], ['ddahhukiubneahkz'], ['llippcsqcjvmipsh']], [['hello wbcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lodlorld'], ['dahhk sxyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkzhknhz'], ['lipps afghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^pshpsvph']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodlomyferienhellodt'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzhkiubaneajdahhkzp'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshpsqcjivmirlippshx']], [['hi    et ehia rgf hfrienhehellomyfrienhellodrownfoxjumpsoverthelazydojumpsthelazydollod'], ['de    ap adew ncb dbneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilopdahwvuzkhhkz'], ['lm    ix ilme vkj ljvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwxlipedchsppsh']], [['ft'], ['bp'], ['jx']], [['yzzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cdddddddddddddddiliipddddddddddd']], [['ythequichi'], ['updamqeyde'], ['cxliuymglm']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazeydog'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvauzkc'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedichsk']], [['aickbrownfoxjumpsoveletthelazydo'], ['weygxnksjbktfqilokrahappdahwvuzk'], ['emgofvsarjsbnyqtwszipixxlipedchs']], [['b&helothequickownfoxjumpsgetoverthelazydocd&^'], ['x&dahkpdamqeygksjbktfqilocapkranpdahwvuzkyz&^'], ['f&lipsxliuymgosarjsbnyqtwkixszivxlipedchsgh&^']], [['helothequickbrownfoxjumphellomyfergetienhelllodsoverthelazydo'], ['dahkpdamqeygxnksjbktfqildahhkiubancapeajdahhhkzokranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtlippsqcjivkixmirlipppshwszivxlipedchs']], [['df'], ['zb'], ['hj']], [['b&helothequickownfoxjumpsgetovcerthelazydocd&^'], ['x&dahkpdamqeygksjbktfqilocapkryanpdahwvuzkyz&^'], ['f&lipsxliuymgosarjsbnyqtwkixszgivxlipedchsgh&^']], [['hehi'], ['dade'], ['lilm']], [['hhelloetmyfrienhellodhelazydol'], ['ddahhkapiubneajdahhkzdahwvuzkh'], ['llippsixqcjvmirlippshlipedchsp']], [['hehi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellodlothequickbrownfoxumpsoverthelazydo'], ['dade    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkzhkpdamqeygxnksjbktqilokranpdahwvuzk'], ['lilm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippshpsxliuymgofvsarjsbyqtwszivxlipedchs']], [['ythequickbrownfoxjum'], ['updamqeygxnksjbktfqi'], ['cxliuymgofvsarjsbnyq']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodkbrownfhi'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzgxnksjbde'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshofvsarjlm']], [['helothequetovehrthelazydo'], ['dahkpdamqapkradnpdahwvuzk'], ['lipsxliuyixszilvxlipedchs']], [['hi   helowythehquickbrownfhhiorlde ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de   dahksupdadmqeygxnksjbddeknhza ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm   lipsacxliluymgofvsarjllmsvphi ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['hellomyfrreienhelb&cdlod'], ['dahhkiubnnaeajdahx&yzhkz'], ['lippsqcjvvimirlipf&ghpsh']], [['llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['hhelothequickbrowhelowythequicckbrownfhihinfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksdahksupdamqeyygxnksjbdedejbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsalipsacxliuymggofvsarjlmlmrjsbyqtwsziovxlipedchs']], [['thequickbheti'], ['pdamqeygxdape'], ['xliuymgoflixm']], [['heti    get a gf hellomyfrieonhelllo d'], ['dape    cap w cb dahhkiubneakjdahhhk z'], ['lixm    kix e kj lippsqcjvmisrlippps h']], [['fwwxy'], ['bsstu'], ['jaabc']], [['hhi    et a ohhellomyfrienhellodrgf hellomyfrienhellodellomyfrienhelloold'], ['dde    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkzahhkiubneajdahhkkhz'], ['llm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippshippsqcjvmirlippssph']], [['helhlellelltihi'], ['dahdhahhahhpede'], ['liplpippippxmlm']], [['bcohhellomyfyrienhellodd'], ['xykddahhkiubuneajdahhkzz'], ['fgsllippsqcjcvmirlippshh']], [['hhelllomyfriod'], ['ddahhhkiubnekz'], ['llipppsqcjvmsh']], [['hellomyfrienhellodrownfooxjumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbkktfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjssbnyqtwszivxlipedchs']], [['helloetmyfrienhellzodhequickbrownfoxjumpsoverthelazydogodoworld'], ['dahhkapiubneajdahhvkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhz'], ['lippsixqcjvmirlippdshliuymgofvsarjsbnyqtwszivxlipedchskshsasvph']], [['yzzzzzzzzzzzzzzeheelzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvadaahvvvvvvvvvvvv'], ['cddddddddddddddiliipdddddddddddd']], [['etrgf'], ['apncb'], ['ixvkj']], [['hi l   ehi   l et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de h   ade   h ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm p   ilm   p ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['yzhzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvdvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cdlddddddddddddddiliipddddddddddd']], [['ythequickbrownfoxjumpsovownoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokrksjktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszsarsbnyqtwszivxlipedchs']], [['yywahellomyfriendoxjumupsoverthelazydoxy'], ['uuswdahhkiubneajzktfqiqlokranpdahwvuzktu'], ['ccaelippsqcjvmirhsbnyqytwszivxlipedchsbc']], [['hhellyoomyfrielod'], ['ddahhukkiubneahkz'], ['llippcssqcjvmipsh']], [['bcohhellhomyfrienhellodd'], ['xykddahhdkiubneajdahhkzz'], ['fgsllipplsqcjvmirlippshh']], [['ehelothequickbrownfonxjumpsgetoverthelazydot'], ['adahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzkp'], ['ilipsxliuymgofvsarjsrbnyqtwkixszivxlipedchsx']], [['hlel'], ['dhah'], ['lpip']], [['helloetmyfrthi'], ['dahhkapiubnpde'], ['lippsixqcjvxlm']], [['hellomyfergetienfhelllod'], ['dahhkiubancapeajbdahhhkz'], ['lippsqcjivkixmirjlipppsh']], [['helowythequicckbrownfhihi    ethhelothequickbrownfoxumpsovekrthelazydo a gf hellomyfriendorld'], ['dahksupdamqeyygxnksjbdede    apddahkpdamqeygxnksjbktqilokragnpdahwvuzk w cb dahhkiubneajzknhz'], ['lipsacxliuymggofvsarjlmlm    ixllipsxliuymgofvsarjsbyqtwsziovxlipedchs e kj lippsqcjvmirhsvph']], [['ohhhelllellomyfrienhellod'], ['kdddahhhahhkiubneajdahhkz'], ['slllipppippsqcjvmirlippsh']], [['eff'], ['abb'], ['ijj']], [['h eti    get a mgf hellomyfrienhellod'], ['d ape    cap w icb dahhkiubneajdahhkz'], ['l ixm    kix e qkj lippsqcjvmirlippsh']], [['hellomyfrietnhelb&cd&^lod'], ['dahhkiubneapjdahx&yz&^hkz'], ['lippsqcjvmixrlipf&gh&^psh']], [['b&cdheythequickbrownfoxjumpshi'], ['x&yzdaupdamqeygxnksjbktfqilode'], ['f&ghlicxliuymgofvsarjsbnyqtwlm']], [['helhlomyfriend'], ['dahdhkiubneajz'], ['liplpsqcjvmirh']], [['hhelothequickbrowhelhowythequicckbrownfhihinfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksdahdksupdamqeyygxnksjbdedejbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsaliplsacxliuymggofvsarjlmlmrjsbyqtwsziovxlipedchs']], [['hi    et a rg f hellomyfrietnhelb&cd&^lod'], ['de    ap w nc b dahhkiubneapjdahx&yz&^hkz'], ['lm    ix e vk j lippsqcjvmixrlipf&gh&^psh']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsoverthelazydoexyyd'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpdahwvuzkatuuz'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxlipedchsibcch']], [['hi    et a helolomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w dahkhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e lipspsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['helolomyfrienhellorgf'], ['dahkhkiubneajdahhkncb'], ['lipspsqcjvmirlippsvkj']], [['heeloo'], ['daahkk'], ['liipss']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsovertyhelazydoexyyd'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpudahwvuzkatuuz'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxclipedchsibcch']], [['fhellfomyfrie'], ['bdahhbkiubnea'], ['jlippjsqcjvmi']], [['gget'], ['ccap'], ['kkix']], [['heelazydo'], ['daahwvuzk'], ['liipedchs']], [['eeetrwxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupompsoverthelazydoexyygft'], ['aaapnstwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlkilokranpdahwvuzkatuucbp'], ['iiixvabefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytsqtwszivxlipedchsibcckjx']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodsoverthelazydo'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzokranpdahwvuzk'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshwszivxlipedchs']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrieunhellodget'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneaqjdahhkzcap'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmiyrlippshkix']], [['ahellomyfriendoxjumupsoverthelazydo'], ['wdahhkiubneajzktfqiqlokranpdahwvuzk'], ['elippsqcjvmirhsbnyqytwszivxlipedchs']], [['helowythehquickbrownfhhiorlde'], ['dahksupdadmqeygxnksjbddeknhza'], ['lipsacxliluymgofvsarjllmsvphi']], [['ithi'], ['epde'], ['mxlm']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsovertyhelazydoexyyhellomyfrienhelb&cd&^loddeeetrgft'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpudahwvuzkatuudahhkiubneajdahx&yz&^hkzzaaapncbp'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxclipedchsibcclippsqcjvmirlipf&gh&^pshhiiixvkjx']], [['hellomyfrietrogf'], ['dahhkiubneapnkcb'], ['lippsqcjvmixvskj']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoi'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzke'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsm']], [['ythequickbrowunfoxthequickbheti'], ['updamqeygxnksqjbktpdamqeygxdape'], ['cxliuymgofvsayrjsbxliuymgoflixm']], [['bcohhellomyfyrienhellofdwxabcdefghijklmoxjumpsovertyhelazydoexyyd'], ['xykddahhkiubuneajdahhkbzstwxyzabcdefghiktfqilokranpudahwvuzkatuuz'], ['fgsllippsqcjcvmirlippsjhabefghijklmnopqsbnyqtwszivxclipedchsibcch']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelcazydoi    t a gf hellomyfrieonhello d'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahywvuzke    p w cb dahhkiubneakjdahhk z'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipgedchsm    x e kj lippsqcjvmisrlipps h']], [['hi    et ehia rgf he llomyfrihi    et a helolomyfrienhellodrgf hellomyfrienhellodverthelazyollod'], ['de    ap adew ncb da hhkiubnede    ap w dahkhkiubneajdahhkzncb dahhkiubneajdahhkzranpdahwvukhhkz'], ['lm    ix ilme vkj li ppsqcjvmlm    ix e lipspsqcjvmirlippshvkj lippsqcjvmirlippshzivxlipedcsppsh']], [['helhlellelltiihi'], ['dahdhahhahhpeede'], ['liplpippippxmmlm']], [['ohhhelllellomyfrienheellod'], ['kdddahhhahhkiubneajdaahhkz'], ['slllipppippsqcjvmirliippsh']], [['hhellyomyfrienyhello'], ['ddahhukiubneajudahhk'], ['llippcsqcjvmirclipps']], [['ohhhelllellomyfriabcdefghijfklmnopeetrgftqrstuvwxyzythequickbrhownfoxjumpsoverthelahzydoenhellod'], ['kdddahhhahhkiubnewxyzabcdefbghijklaapncbpmnopqrstuvupdamqeygxndksjbktfqilokranpdahwdvuzkajdahhkz'], ['slllipppippsqcjvmefghijklmnjopqrstiixvkjxuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipeldchsirlippsh']], [['hellomyfrienhellodlflomyfrietrgf'], ['dahhkiubneajdahhkzhbhkiubneapncb'], ['lippsqcjvmirlippshpjpsqcjvmixvkj']], [['helxloetmthequickbrowoxjumpsoverthelazydoyfrieunhellodget'], ['dahthkapipdamqeygxnksktfqilokranpdahwvuzkubneaqjdahhkzcap'], ['lipbpsixqxliuymgofvsasbnyqtwszivxlipedchscjvmiyrlippshkix']], [['helhlellelletiihi'], ['dahdhahhahhapeede'], ['liplpippippixmmlm']], [['abcdefghijklmnopqrsteuvwxwxabcdefghijklmnopqrstuvwxyyzythequickbrhownfoxjsumpsoverthelazydoe'], ['wxyzabcdefghijklmnopaqrststwxyzabcdefghijklmnopqrstuuvupdamqeygxndksjbktfoqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxiyzababefghijklmnopqrstuvwxyzabccdcxliuymgofvlsarjsbnwyqtwszivxlipedchsi']], [['hhellomyfriengrieonhellohellodnhellodlod'], ['ddahhkiubneajcneakjdahhkdahhkzjdahhkzhkz'], ['llippsqcjvmirkvmisrlippslippshrlippshpsh']], [['hhellyomyfriehello'], ['ddahhukiubneadahhk'], ['llippcsqcjvmilipps']], [['bcd&hellomoyfrienhellodrownfoxjumpsoverthhhellomyfriengfrieonhellohellodelazydo%'], ['xyz&dahhkikubneajdahhkznksjbktfqilokranpdddahhkiubneajcbneakjdahhkdahhkzahwvuzk%'], ['fgh&lippsqscjvmirlippshvsarjsbnyqtwszivxlllippsqcjvmirkjvmisrlippslippshipedchs%']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydooexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchssibcc']], [['hi    elt a rgf hellomyfrienhellod'], ['de    ahp w ncb dahhkiubneajdahhkz'], ['lm    ipx e vkj lippsqcjvmirlippsh']], [['helflomyfriietrgf'], ['dahbhkiubneeapncb'], ['lipjpsqcjvmmixvkj']], [['ehiabcdefghijklmnopqrwnfxjumpsoveletthelazydoa'], ['adewxyzabcdefghijklmnsjbtfqilokrahappdahwvuzkw'], ['ilmefghijklmnopqrstuvarjbnyqtwszipixxlipedchse']], [['healloetmyfrienhellodhequickbrownfoxjumpsoverthelazeydog'], ['dawhhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvauzkc'], ['lieppsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedichsk']], [['lhgfrieonhelloellomyfrie'], ['hdcbneakjdahhkahhkiubnea'], ['plkjvmisrlippsippsqcjvmi']], [['hhellylomyfrienhellod'], ['ddahhuhkiubneajdahhkz'], ['llippcpsqcjvmirlippsh']], [['hfsoverthigfthequickbhetid'], ['dbokranpdecbpdamqeygxdapez'], ['ljwszivxlmkjxliuymgoflixmh']], [['yywbcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lodlorldwxy'], ['uusxyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkzhknhzstu'], ['ccafghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^pshpsvphabc']], [['bcdhellomyfrieonhellod&^%'], ['xyzdahhkiubneakjdahhkz&^%'], ['fghlippsqcjvmisrlippsh&^%']], [['aheallomyfriendoxjumpsoverthelazydo'], ['wdawhhkiubneajzktfqilokranpdahwvuzk'], ['elieppsqcjvmirhsbnyqtwszivxlipedchs']], [['aheallomyfriendoxjumpsoverthwxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsovierthielazydo'], ['wdawhhkiubneajzktfqilokranpdstwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokreanpdeahwvuzk'], ['elieppsqcjvmirhsbnyqtwszivxlabefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszmivxlmipedchs']], [['hhellohelloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogodoworldmyfrienhellodeod'], ['ddahhkdahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhziubneajdahhkzakz'], ['llippslippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchskshsasvphqcjvmirlippshish']], [['eflie'], ['abhea'], ['ijpmi']], [['ohhelyfrienhellood'], ['kddahubneajdahhkkz'], ['sllipcjvmirlippssh']], [['ehellioetmhi'], ['adahhekapide'], ['ilippmsixqlm']], [['ahellomyfriendoxjumupsoverthelaefzydo'], ['wdahhkiubneajzktfqiqlokranpdahwabvuzk'], ['elippsqcjvmirhsbnyqytwszivxlipeijdchs']], [['hellomyfrieonhenllod'], ['dahhkiubneakjdajhhkz'], ['lippsqcjvmisrlirppsh']], [['hlelloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['dhahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lpippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['hi    helothelbcd&^%lomyfriendoxhihhelloheqolod'], ['de    dahkpdahxyz&^%hkiubneajzktdeddahhkdamkhkz'], ['lm    lipsxlipfgh&^%psqcjvmirhsblmllippsliuspsh']], [['helloomyfrienhhi    ehi    et a gf hellomyfrietrogf hhellohehetimyfrienhellodeod'], ['dahhkkiubneajdde    ade    ap w cb dahhkiubneapnkcb ddahhkdadapeiubneajdahhkzakz'], ['lippssqcjvmirllm    ilm    ix e kj lippsqcjvmixvskj llippslilixmqcjvmirlippshish']], [['hl'], ['dh'], ['lp']], [['helhii'], ['dahdee'], ['liplmm']], [['hellomyfriendoxjumpsojvertaheallomyfriendoxjumpsoverthelazydoazydo'], ['dahhkiubneajzktfqilokfranpwdawhhkiubneajzktfqilokranpdahwvuzkwvuzk'], ['lippsqcjvmirhsbnyqtwsnzivxelieppsqcjvmirhsbnyqtwszivxlipedchsedchs']], [['hellomyfrienhellodverthelazyollod'], ['dahhkiubneajdahhkzranpdahwvukhhkz'], ['lippsqcjvmirlippshzivxlipedcsppsh']], [['eheihif'], ['adaedeb'], ['ilimlmj']], [['helothequickbrownfoxjumtpsgmetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqiplociapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqxtwkqixszilvxlipedchs']], [['ythequickbrownfoxthuickbheti'], ['updamqeygxnksjbktpdqeygxdape'], ['cxliuymgofvsarjsbxlymgoflixm']], [['hi  df  et ehia rgf he llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['de  zb  ap adew ncb da hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['lm  hj  ix ilme vkj li ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['fhellfomyfrieheeloo'], ['bdahhbkiubneadaahkk'], ['jlippjsqcjvmiliipss']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodhelazydoexyyzzzzzzzzzzzzzzzzzzet'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzdahwvuzkatuuvvvvvvvvvvvvvvvvvvap'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshlipedchsibccddddddddddddddddddix']], [['ohhellomyfrienheellod'], ['kddahhkiubneajdaahhkz'], ['sllippsqcjvmirliippsh']], [['iheheti'], ['edadape'], ['mlilixm']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodlomyferienhellodtgf'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzhkiubaneajdahhkzpcb'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshpsqcjivmirlippshxkj']], [['hello heti    get a gf hellomyllo dd'], ['dahhk dape    cap w cb dahhkiuhhk zz'], ['lipps lixm    kix e kj lippsqcpps hh']], [['f'], ['b'], ['j']], [['eehhi    et a gf helloetmthelquickbrownfoxjumpsohverthelazydoyfrienhellodia'], ['aadde    ap w cb dahhkapipdahmqeygxnksjbktfqilokdranpdahwvuzkubneajdahhkzew'], ['iillm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwslzivxlipedchscjvmirlippshme']], [['heti    get a mgf hellomyfrienhellodhl'], ['dape    cap w icb dahhkiubneajdahhkzdh'], ['lixm    kix e qkj lippsqcjvmirlippshlp']], [['thequhelothequickbrownfoxjumpsgetovehrthelazydoyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqdahkpdamqeygxnksjbktfqilocapkradnpdahwvuzkubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuylipsxliuymgofvsarjsbnyqtwkixszilvxlipedchscjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['helolomyfrienhhelloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodellorgf'], ['dahkhkiubneajddahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzahhkncb'], ['lipspsqcjvmirllippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshippsvkj']], [['hellomyferienhelhabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoiod'], ['dahhkiubaneajdahdwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkekz'], ['lippsqcjivmirliplefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsmsh']], [['heeoloo'], ['daakhkk'], ['liispss']], [['hellomyfrienhellodxjumpsoverthelazydo'], ['dahhkiubneajdahhkztfqilokranpdahwvuzk'], ['lippsqcjvmirlippshbnyqtwszivxlipedchs']], [['aickbrownfoxjhumpsoveletthelazydo'], ['weygxnksjbktfdqilokrahappdahwvuzk'], ['emgofvsarjsbnlyqtwszipixxlipedchs']], [['hhellomyfriengfrieonhellohellodoverthelazydoythequickbrownoxjumpsoverthelazydollomyfrietrgf'], ['ddahhkiubneajcbneakjdahhkdahhkzkranpdahwvuzkupdamqeygxnksjktfqilokranpdahwvuzkhhkiubneapncb'], ['llippsqcjvmirkjvmisrlippslippshszivxlipedchscxliuymgofvsarsbnyqtwszivxlipedchsppsqcjvmixvkj']], [['helbcdhhellyomyfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhukiubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['hi    et a gf helllomyfrienhellood'], ['de    ap w cb dahhhkiubneajdahhkkz'], ['lm    ix e kj lipppsqcjvmirlippssh']], [['hellomyfrienhellodrownfoxjumpsothequickbhetiverthelazydohi'], ['dahhkiubneajdahhkznksjbktfqilokpdamqeygxdaperanpdahwvuzkde'], ['lippsqcjvmirlippshvsarjsbnyqtwsxliuymgoflixmzivxlipedchslm']], [['hhelloetmyhi    et a gf hellomyfriendfrienhellodhelazydol'], ['ddahhkapiude    ap w cb dahhkiubneajzbneajdahhkzdahwvuzkh'], ['llippsixqclm    ix e kj lippsqcjvmirhjvmirlippshlipedchsp']], [['wlorld'], ['shknhz'], ['apsvph']], [['helolnhello dd'], ['dahkhjdahhk zz'], ['lipsprlipps hh']], [['ythbequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['updxamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['cxlfiuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['hellomdyfriendoxjumpsojverthelazydo'], ['dahhkizubneajzktfqilokfranpdahwvuzk'], ['lippsqhcjvmirhsbnyqtwsnzivxlipedchs']], [['helloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['helbcdhhellyom&yfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhuki&ubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsq&cjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['helbcdhhellyofmyfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhukbiubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsjqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['llomyfrienhehellomyfrienhellooxjumpsoverthelazyollod'], ['hhkiubneajdadahhkiubneajdahhkktfqilokranpdahwvukhhkz'], ['ppsqcjvmirlilippsqcjvmirlippssbnyqtwszivxlipedcsppsh']], [['yzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthi'], ['uvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpde'], ['cdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlm']], [['helolnhelnlo'], ['dahkhjdahjhk'], ['lipsprliprps']], [['wxxyyworld'], ['sttuusknhz'], ['abbccasvph']], [['bcohhellomyfhi'], ['xykddahhkiubde'], ['fgsllippsqcjlm']], [['heloethequickbrownfoxjumpsgmetovehrthelazydo'], ['dahkapdamqeygxnksjbktfqilociapkradnpdahwvuzk'], ['lipsixliuymgofvsarjsbnyqtwkqixszilvxlipedchs']], [['yzhzzzzzzzzzzzzzzeyheelzzzzzzzzzzz'], ['uvdvvvvvvvvvvvvvvaudaahvvvvvvvvvvv'], ['cdlddddddddddddddicliipddddddddddd']], [['hi    et a gf helloetmthelquickbrownfoxjumpsoverthnelazydoyfrienhellod'], ['de    ap w cb dahhkapipdahmqeygxnksjbktfqilokranpdjahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwszivxlripedchscjvmirlippsh']], [['helloetmpsoverthelazydoyfrienhellodfhelllod'], ['dahhkapilokranpdahwvuzkubneajdahhkzbdahhhkz'], ['lippsixqtwszivxlipedchscjvmirlippshjlipppsh']], [['hellll'], ['dahhhh'], ['lipppp']], [['helhlelthi'], ['dahdhahpde'], ['liplpipxlm']], [['ohhellomyfrieod'], ['kddahhkiubneakz'], ['sllippsqcjvmish']], [['helothelbcd&^%lomyfriendoxhihhelloheqolod'], ['dahkpdahxyz&^%hkiubneajzktdeddahhkdamkhkz'], ['lipsxlipfgh&^%psqcjvmirhsblmllippsliuspsh']], [['ohhelllomyfriend'], ['kddahhhkiubneajz'], ['sllipppsqcjvmirh']], [['hellhi'], ['dahhde'], ['lipplm']], [['thelothequickbrownfonxjumpsgetoverthelazydo'], ['pdahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzk'], ['xlipsxliuymgofvsarjsrbnyqtwkixszivxlipedchs']], [['hhhellyomyfrienhellodl'], ['dddahhukiubneajdahhkzh'], ['lllippcsqcjvmirlippshp']], [['ohhelolomyfrienhellodgf'], ['kddahkhkiubneajdahhkzcb'], ['sllipspsqcjvmirlippshkj']], [['hhellomyfriengfrieonhelheti    get a gf hellomyfrieonhello dlohellod'], ['ddahhkiubneajcbneakjdahdape    cap w cb dahhkiubneakjdahhk zhkdahhkz'], ['llippsqcjvmirkjvmisrliplixm    kix e kj lippsqcjvmisrlipps hpslippsh']], [['hhelyfrienhellod'], ['ddahubneajdahhkz'], ['llipcjvmirlippsh']], [['b&cc^'], ['x&yy^'], ['f&gg^']], [['heti    get a gfrieonhello helothequickbrownfoxumpsovekrthelazydodehel'], ['dape    cap w cbneakjdahhk dahkpdamqeygxnksjbktqilokragnpdahwvuzkzadah'], ['lixm    kix e kjvmisrlipps lipsxliuymgofvsarjsbyqtwsziovxlipedchshilip']], [['hello helowhellomyfrrienhelhb&cd&^lodorld'], ['dahhk dahksdahhkiubnneajdahdx&yz&^hkzknhz'], ['lipps lipsalippsqcjvvmirliplf&gh&^pshsvph']], [['bchllomyfhi'], ['xydhhkiubde'], ['fglppsqcjlm']], [['hhellomyfrienhellodehi'], ['ddahhkiubneajdahhkzade'], ['llippsqcjvmirlippshilm']], [['helothequickbrownfoxumpsovekrthelazydodehel'], ['dahkpdamqeygxnksjbktqilokragnpdahwvuzkzadah'], ['lipsxliuymgofvsarjsbyqtwsziovxlipedchshilip']], [['gehelloetmpsoverthelazydoyfrienhellodfhelllod'], ['cadahhkapilokranpdahwvuzkubneajdahhkzbdahhhkz'], ['kilippsixqtwszivxlipedchscjvmirlippshjlipppsh']], [['hellomyfrienhelleodrownfoxjumpabcdefghijklmnopqrstuvwxyzythequickbrownfoxjumhello'], ['dahhkiubneajdahhakznksjbktfqilwxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqidahhk'], ['lippsqcjvmirlippishvsarjsbnyqtefghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqlipps']], [['heti    get a gfrieonhello helothequicikbrownfoxumpsovekrthelazydodehel'], ['dape    cap w cbneakjdahhk dahkpdamqeyegxnksjbktqilokragnpdahwvuzkzadah'], ['lixm    kix e kjvmisrlipps lipsxliuymgmofvsarjsbyqtwsziovxlipedchshilip']], [['hod'], ['dkz'], ['lsh']], [['hhelloehellomyfrieonhelllotmyhi    et a gf hellomyfriendfrienhellodhelazydol'], ['ddahhkadahhkiubneakjdahhhkpiude    ap w cb dahhkiubneajzbneajdahhkzdahwvuzkh'], ['llippsilippsqcjvmisrlipppsxqclm    ix e kj lippsqcjvmirhjvmirlippshlipedchsp']], [['hhellomyfriengfrieonhelheti'], ['ddahhkiubneajcbneakjdahdape'], ['llippsqcjvmirkjvmisrliplixm']], [['ehabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelcazydoit'], ['adwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahywvuzkep'], ['ilefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipgedchsmx']], [['ehelloetyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthiet'], ['adahhkapubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdeap'], ['ilippsixcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmix']], [['%bcd&^%'], ['%xyz&^%'], ['%fgh&^%']], [['thequickbromwnfoxjumpsoverthelazydog'], ['pdamqeygxnkisjbktfqilokranpdahwvuzkc'], ['xliuymgofvsqarjsbnyqtwszivxlipedchsk']], [['theqcuickbrownfoxjumpsoverthelazydog'], ['pdamyqeygxnksjbktfqilokranpdahwvuzkc'], ['xliugymgofvsarjsbnyqtwszivxlipedchsk']], [['hi    et a gf helbcd&^%lomyfriend'], ['de    ap w cb dahxyz&^%hkiubneajz'], ['lm    ix e kj lipfgh&^%psqcjvmirh']], [['yzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvv'], ['cdddddddddddddddd']], [['hellogfa world'], ['dahhkcbw sknhz'], ['lippskje asvph']], [['hi    et a gf helbcd&^%lomy friend'], ['de    ap w cb dahxyz&^%hkiu bneajz'], ['lm    ix e kj lipfgh&^%psqc jvmirh']], [['bcdd&^%'], ['xyzz&^%'], ['fghh&^%']], [['%bcdhello&^%'], ['%xyzdahhk&^%'], ['%fghlipps&^%']], [['thequicerthelazydog'], ['pdamqeyanpdahwvuzkc'], ['xliuymgivxlipedchsk']], [['%bcdhelwxylo&^%'], ['%xyzdahstuhk&^%'], ['%fghlipabcps&^%']], [['ehello'], ['adahhk'], ['ilipps']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcddddddddddddddddddddddddddddddddd']], [['hellogfa worl d'], ['dahhkcbw sknh z'], ['lippskje asvp h']], [['hi    et a gf hellogmyfriend'], ['de    ap w cb dahhkciubneajz'], ['lm    ix e kj lippskqcjvmirh']], [['%bc^d&^%'], ['%xy^z&^%'], ['%fg^h&^%']], [['bc&^%'], ['xy&^%'], ['fg&^%']], [['abcdefghijklmnopqrstuvxyz'], ['wxyzabcdefghijklmnopqrtuv'], ['efghijklmnopqrstuvwxyzbcd']], [['thequicerthelazydoag'], ['pdamqeyanpdahwvuzkwc'], ['xliuymgivxlipedchsek']], [['thequicertthelazydog'], ['pdamqeyanppdahwvuzkc'], ['xliuymgivxxlipedchsk']], [['hellogfa'], ['dahhkcbw'], ['lippskje']], [['thequickbrthequicerthelazydogownfoxjumpsoverthelazydo'], ['pdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokranpdahwvuzk'], ['xliuymgofvxliuymgivxlipedchsksarjsbnyqtwszivxlipedchs']], [['bc&^%thequicerthelazydogbc&^%'], ['xy&^%pdamqeyanpdahwvuzkcxy&^%'], ['fg&^%xliuymgivxlipedchskfg&^%']], [['abcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyz'], ['wxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuv'], ['efghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcd']], [['thequickbrownfoxydo'], ['pdamqeygxnksjbktuzk'], ['xliuymgofvsarjsbchs']], [['thequicwkbrthequicerthelazydogownofoxjumpsoverthelazydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilokranpdahwvuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwszivxlipedchs']], [['thequickborownfoxydo'], ['pdamqeygxknksjbktuzk'], ['xliuymgofsvsarjsbchs']], [['world'], ['sknhz'], ['asvph']], [['abcdefghihjklmnopqrstuvxyz'], ['wxyzabcdedfghijklmnopqrtuv'], ['efghijklmlnopqrstuvwxyzbcd']], [['hi    ehellot a gf hellogmyfriend'], ['de    adahhkp w cb dahhkciubneajz'], ['lm    ilippsx e kj lippskqcjvmirh']], [['hi    et a gf helbcmd&^%lomyfriend'], ['de    ap w cb dahxyiz&^%hkiubneajz'], ['lm    ix e kj lipfgqh&^%psqcjvmirh']], [['%b^c^d&^%'], ['%x^y^z&^%'], ['%f^g^h&^%']], [['hellomyfriend'], ['dahhkiubneajz'], ['lippsqcjvmirh']], [['helbcd&^%lomy'], ['dahxyz&^%hkiu'], ['lipfgh&^%psqc']], [['thequickbromwnfoxjumpsovertheletazydog'], ['pdamqeygxnkisjbktfqilokranpdahapwvuzkc'], ['xliuymgofvsqarjsbnyqtwszivxlipixedchsk']], [['hellogmyfriend'], ['dahhkciubneajz'], ['lippskqcjvmirh']], [['thequicekbromwnfoxjumpsoverthelazydog'], ['pdamqeyagxnkisjbktfqilokranpdahwvuzkc'], ['xliuymgiofvsqarjsbnyqtwszivxlipedchsk']], [['yzz'], ['uvv'], ['cdd']], [['hi    ehellott a gf hellogmyfriend'], ['de    adahhkpp w cb dahhkciubneajz'], ['lm    ilippsxx e kj lippskqcjvmirh']], [['thkbrownfoxjumpsoverthelazydo'], ['pdgxnksjbktfqilokranpdahwvuzk'], ['xlofvsarjsbnyqtwszivxlipedchs']], [['thequickbrownfoxjumpsoverthelazydfo'], ['pdamqeygxnksjbktfqilokranpdahwvuzbk'], ['xliuymgofvsarjsbnyqtwszivxlipedchjs']], [['theqcuickbrownfoxjumpsoverthelazbydog'], ['pdamyqeygxnksjbktfqilokranpdahwvxuzkc'], ['xliugymgofvsarjsbnyqtwszivxlipedfchsk']], [['theqcuickabcdefghihjklmnopqrstuvxyzbrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghijklmnopqrtuvxnksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['helllogfa'], ['dahhhkcbw'], ['lipppskje']], [['thequickbrthequicerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymgivxlipedchsksarjsbnyqtwszipedchs']], [['bc&^%thequicerthelazydothkbrownfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnksjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvsarjsbnyqtwszivxlipedchs&^%']], [['bc&^hello%'], ['xy&^dahhk%'], ['fg&^lipps%']], [['ehellott'], ['adahhkpp'], ['ilippsxx']], [['thequickbromwnfoxjumpsoverdog'], ['pdamqeygxnkisjbktfqilokranzkc'], ['xliuymgofvsqarjsbnyqtwszivhsk']], [['hellogfa wetorld'], ['dahhkcbw sapknhz'], ['lippskje aixsvph']], [['wetorld'], ['sapknhz'], ['aixsvph']], [['hi    et a gf helbcdhi    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzde    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlm    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['hi    et a gf helbcmd&^%lo myfriend'], ['de    ap w cb dahxyiz&^%hk iubneajz'], ['lm    ix e kj lipfgqh&^%ps qcjvmirh']], [['thequicerthequicekbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgiofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['thequiuckbrownfoxjumpsoverthelazydo'], ['pdamqeqygxnksjbktfqilokranpdahwvuzk'], ['xliuymygofvsarjsbnyqtwszivxlipedchs']], [['bc&^%thequicerthelazydoghelbcmd&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchsklipfgqh&^%psfg&^%']], [['helbcd&^thequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfgh&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['bc&thequicertthelazydog^%'], ['xy&pdamqeyanppdahwvuzkc^%'], ['fg&xliuymgivxxlipedchsk^%']], [['theqthequicerthequicekbromwnfoxjumpsoverthelazydogthelazydogdog'], ['pdampdamqeyanpdamqeyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkczkc'], ['xliuxliuymgivxliuymgiofvsqarjsbnyqtwszivxlipedchskxlipedchskhsk']], [['hi    et  a gf helbcmld&^%lo myfriend'], ['de    ap  w cb dahxyihz&^%hk iubneajz'], ['lm    ix  e kj lipfgqph&^%ps qcjvmirh']], [['afbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyz'], ['wbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuv'], ['ejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcd']], [['bc&^%thequicerthelazydoghelbcmd&&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchsklipfgqh&&^%psfg&^%']], [['ehelloyzz'], ['adahhkuvv'], ['ilippscdd']], [['hi r   et a gf helbcmd&^%lomyfriend'], ['de n   ap w cb dahxyiz&^%hkiubneajz'], ['lm v   ix e kj lipfgqh&^%psqcjvmirh']], [['gf%b^c^d&^%'], ['cb%x^y^z&^%'], ['kj%f^g^h&^%']], [['thequtickborownfoxydo'], ['pdamqpeygxknksjbktuzk'], ['xliuyxmgofsvsarjsbchs']], [['thequicerthequicezkbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyavgxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgidofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['bc&^%thequicerthelazydohighelbcmd&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkdecdahxyiz&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchslmklipfgqh&^%psfg&^%']], [['hellogmythequicertthelazydogfriend'], ['dahhkciupdamqeyanppdahwvuzkcbneajz'], ['lippskqcxliuymgivxxlipedchskjvmirh']], [['ello'], ['ahhk'], ['ipps']], [['hellogfa wethorld'], ['dahhkcbw sapdknhz'], ['lippskje aixlsvph']], [['bcello&^%'], ['xyahhk&^%'], ['fgipps&^%']], [['hellogmyfriend&^%lomyfriend'], ['dahhkciubneajz&^%hkiubneajz'], ['lippskqcjvmirh&^%psqcjvmirh']], [['yzyz'], ['uvuv'], ['cdcd']], [['helbcy'], ['dahxyu'], ['lipfgc']], [['hellogmyfriend&^%lomyfriendgf'], ['dahhkciubneajz&^%hkiubneajzcb'], ['lippskqcjvmirh&^%psqcjvmirhkj']], [['afbcdefghijklhellogfa'], ['wbxyzabcdefghdahhkcbw'], ['ejfghijklmnoplippskje']], [['ehellot'], ['adahhkp'], ['ilippsx']], [['theqkbrownfoxydo'], ['pdamgxnksjbktuzk'], ['xliuofvsarjsbchs']], [['worl'], ['sknh'], ['asvp']], [['thequickbrownfoxbcdd&^%ydo'], ['pdamqeygxnksjbktxyzz&^%uzk'], ['xliuymgofvsarjsbfghh&^%chs']], [['hi    et a gf helbcdhibc&^%    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzdexy&^%    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlmfg&^%    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['worlwxyyd'], ['sknhstuuz'], ['asvpabcch']], [['yzzz'], ['uvvv'], ['cddd']], [['ehe'], ['ada'], ['ili']], [['helbcmd&^%lomyfriend'], ['dahxyiz&^%hkiubneajz'], ['lipfgqh&^%psqcjvmirh']], [['hi    et a gf hellogmyfiend'], ['de    ap w cb dahhkciubeajz'], ['lm    ix e kj lippskqcjmirh']], [['hellogfaello'], ['dahhkcbwahhk'], ['lippskjeipps']], [['glhello'], ['chdahhk'], ['kplipps']], [['hellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfriendfriend'], ['dahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmirhjvmirh']], [['theqcuickabcdefghihjklmnoownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghijkksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqrssarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddddddddddddddddddddddddddddddd']], [['heleloo'], ['dahahkk'], ['lipipss']], [['hellogfa worwethorld'], ['dahhkcbw sknsapdknhz'], ['lippskje asvaixlsvph']], [['%bcthkbrownfoxjumpsoverthelazydod&^%'], ['%xypdgxnksjbktfqilokranpdahwvuzkz&^%'], ['%fgxlofvsarjsbnyqtwszivxlipedchsh&^%']], [['%bcdhelwxylo&&^%'], ['%xyzdahstuhk&&^%'], ['%fghlipabcps&&^%']], [['eheellot'], ['adaahhkp'], ['iliippsx']], [['helllo '], ['dahhhk '], ['lippps ']], [['hi    eiend'], ['de    aeajz'], ['lm    imirh']], [['hi    et a gf helbc%bc^d&^%d&^%lomy friend'], ['de    ap w cb dahxy%xy^z&^%z&^%hkiu bneajz'], ['lm    ix e kj lipfg%fg^h&^%h&^%psqc jvmirh']], [['ywxy'], ['ustu'], ['cabc']], [['hwellogfa wethorld'], ['dsahhkcbw sapdknhz'], ['laippskje aixlsvph']], [['helbcmd&^%lomyfiend'], ['dahxyiz&^%hkiubeajz'], ['lipfgqh&^%psqcjmirh']], [['helbcdworlwxyyd&^thequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyzsknhstuuz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfghasvpabcch&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['helllo'], ['dahhhk'], ['lippps']], [['woworwethorldrlwxyyd'], ['sksknsapdknhznhstuuz'], ['asasvaixlsvphvpabcch']], [['thequiceurtthelazydog'], ['pdamqeyaqnppdahwvuzkc'], ['xliuymgiyvxxlipedchsk']], [['hi    et  a g^f helbcmld&^%lo myfriend'], ['de    ap  w c^b dahxyihz&^%hk iubneajz'], ['lm    ix  e k^j lipfgqph&^%ps qcjvmirh']], [['hhellogmythequicertthelazydogfriendelbcmd&^%lomyfiend'], ['ddahhkciupdamqeyanppdahwvuzkcbneajzahxyiz&^%hkiubeajz'], ['llippskqcxliuymgivxxlipedchskjvmirhipfgqh&^%psqcjmirh']], [['hellomyfrienduvxyz'], ['dahhkiubneajzqrtuv'], ['lippsqcjvmirhyzbcd']], [['thequicerthequicezkbroomwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyavgxnkkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgidofvssqarjsbnyqtwszivxlipedchskxlipedchsk']], [['fgf'], ['bcb'], ['jkj']], [['yzyzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvv'], ['cdcdddddddddddd']], [['helbcdworlwxyyd&^thequiuckbrownfoxjumpsoverthelazydothequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyzsknhstuuz&^pdamqeqygxnksjbktfqilokranpdahwvuzkpdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfghasvpabcch&^xliuymygofvsarjsbnyqtwszivxlipedchsxliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['theqeutickborownfoxydo'], ['pdamaqpeygxknksjbktuzk'], ['xliuiyxmgofsvsarjsbchs']], [['thequickbrownfoxjumpsoverthelazyd'], ['pdamqeygxnksjbktfqilokranpdahwvuz'], ['xliuymgofvsarjsbnyqtwszivxlipedch']], [['bc&^%thequicerthelazydothkbroswnfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnkosjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvswarjsbnyqtwszivxlipedchs&^%']], [['woworwethorlldrlwxd'], ['sksknsapdknhhznhstz'], ['asasvaixlsvpphvpabh']], [['%b^c^d&^d%'], ['%x^y^z&^z%'], ['%f^g^h&^h%']], [['gglhello'], ['cchdahhk'], ['kkplipps']], [['%bcdheolwxylo&&^%'], ['%xyzdakhstuhk&&^%'], ['%fghlispabcps&&^%']], [['thequicertthequickbrthequicerthelazydogownfoxjumpsovelazydohelazydoag'], ['pdamqeyanppdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokrahwvuzkdahwvuzkwc'], ['xliuymgivxxliuymgofvxliuymgivxlipedchsksarjsbnyqtwszipedchslipedchsek']], [['hi    et a gf helbcmhelbcmd&^%lomyfriendd&^%lo myfriend'], ['de    ap w cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubneajz'], ['lm    ix e kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjvmirh']], [['s'], ['o'], ['w']], [['bc&^%thequicerthela^zydoghelbcmd&&^%lobc&^%'], ['xy&^%pdamqeyanpdahw^vuzkcdahxyiz&&^%hkxy&^%'], ['fg&^%xliuymgivxlipe^dchsklipfgqh&&^%psfg&^%']], [['thequickborownfoxydfo'], ['pdamqeygxknksjbktuzbk'], ['xliuymgofsvsarjsbchjs']], [['%bcdhelwxyl%'], ['%xyzdahstuh%'], ['%fghlipabcp%']], [['thequickbromownfoxjumpsoverdog'], ['pdamqeygxnkiksjbktfqilokranzkc'], ['xliuymgofvsqsarjsbnyqtwszivhsk']], [['hellogmyfriend&^%lomyfrienehellott'], ['dahhkciubneajz&^%hkiubneajadahhkpp'], ['lippskqcjvmirh&^%psqcjvmirilippsxx']], [['helbcthequickbrownfoxbcdd&^%ydoy'], ['dahxypdamqeygxnksjbktxyzz&^%uzku'], ['lipfgxliuymgofvsarjsbfghh&^%chsc']], [['ggff'], ['ccbb'], ['kkjj']], [['hhillogfaello'], ['ddehhkcbwahhk'], ['llmppskjeipps']], [['thequicwkbrthequicerthelazydogownofoxjumpszydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilovuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwdchs']], [['worethorld'], ['sknapdknhz'], ['asvixlsvph']], [['thequiceurtazydog'], ['pdamqeyaqnpwvuzkc'], ['xliuymgiyvxedchsk']], [['helbcmd&^%lomyfriendxy'], ['dahxyiz&^%hkiubneajztu'], ['lipfgqh&^%psqcjvmirhbc']], [['helbcthequickbryzzoy'], ['dahxypdamqeygxnuvvku'], ['lipfgxliuymgofvcddsc']], [['hwellogfa wethorldd'], ['dsahhkcbw sapdknhzz'], ['laippskje aixlsvphh']], [['worwethorld'], ['sknsapdknhz'], ['asvaixlsvph']], [['o%bcdhelwxylo&^%'], ['k%xyzdahstuhk&^%'], ['s%fghlipabcps&^%']], [['eehello'], ['aadahhk'], ['iilipps']], [['thequicydog'], ['pdamqeyuzkc'], ['xliuymgchsk']], [['hi    et  a g^f hhelbcd&^%lomyelbcmld&^%lo myfriend'], ['de    ap  w c^b ddahxyz&^%hkiuahxyihz&^%hk iubneajz'], ['lm    ix  e k^j llipfgh&^%psqcipfgqph&^%ps qcjvmirh']], [['theqkbrowfnfoxydo'], ['pdamgxnksbjbktuzk'], ['xliuofvsajrjsbchs']], [['hi    et a gf helbcdhibc&^%    et a abcdefghihjklmnopqrstuvxyzllogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzdexy&^%    ap w wxyzabcdedfghijklmnopqrtuvhhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlmfg&^%    ix e efghijklmlnopqrstuvwxyzbcdppskqcjvmirh&^%psqcjvmirh']], [['hwellogfa'], ['dsahhkcbw'], ['laippskje']], [['hi r  et a gf helbcmd&^%lomyfriend'], ['de n  ap w cb dahxyiz&^%hkiubneajz'], ['lm v  ix e kj lipfgqh&^%psqcjvmirh']], [['abcdefghijklmnopqrstuhi    et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde    ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm    ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['thkbrownfoxjumpsoverth%bcdhelwxylo&^%elazydo'], ['pdgxnksjbktfqilokranpd%xyzdahstuhk&^%ahwvuzk'], ['xlofvsarjsbnyqtwszivxl%fghlipabcps&^%ipedchs']], [['bc&thequicerttheworwethorldlazydog^%'], ['xy&pdamqeyanppdasknsapdknhzhwvuzkc^%'], ['fg&xliuymgivxxliasvaixlsvphpedchsk^%']], [['wyorlwxyyd'], ['suknhstuuz'], ['acsvpabcch']], [['hi    et a gf helbcmhelbcmd&^%lomyfriendd&^%lo myfend'], ['de    ap w cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubajz'], ['lm    ix e kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjirh']], [['hhelbcd&^%lomyelbcmld&^%lo'], ['ddahxyz&^%hkiuahxyihz&^%hk'], ['llipfgh&^%psqcipfgqph&^%ps']], [['thequickbrownfoxjumpsovworwethorlderthelazyd'], ['pdamqeygxnksjbktfqilokrsknsapdknhzanpdahwvuz'], ['xliuymgofvsarjsbnyqtwszasvaixlsvphivxlipedch']], [['thequicwkbrthequicerthelazydogaownofoxjumpsoverthelazydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcwksjkbktfqilokranpdahwvuzk'], ['xliuymgaofvxliuymgivxlipedchskesarsjsbnyqtwszivxlipedchs']], [['%bdcthkbrownfoxjumpsoverthelazydod&^%'], ['%xzypdgxnksjbktfqilokranpdahwvuzkz&^%'], ['%fhgxlofvsarjsbnyqtwszivxlipedchsh&^%']], [['worlwxd'], ['sknhstz'], ['asvpabh']], [['herienduvxyz'], ['daneajzqrtuv'], ['livmirhyzbcd']], [['hi    et a gf hellogmyfriiend'], ['de    ap w cb dahhkciubneeajz'], ['lm    ix e kj lippskqcjvmmirh']], [['boc&^hello%'], ['xky&^dahhk%'], ['fsg&^lipps%']], [['abcdyzzefghijklmnopqrstuvxyz'], ['wxyzuvvabcdefghijklmnopqrtuv'], ['efghcddijklmnopqrstuvwxyzbcd']], [['yxwxy'], ['utstu'], ['cbabc']], [['yzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddlippsdddddddddddddddddddddddddddd']], [['ahwellogfa wethorldd'], ['wdsahhkcbw sapdknhzz'], ['elaippskje aixlsvphh']], [['hi    et a gf helbcmd&^%l o myfriend'], ['de    ap w cb dahxyiz&^%h k iubneajz'], ['lm    ix e kj lipfgqh&^%p s qcjvmirh']], [['hellogymyfriend&^%lomyfriendgf'], ['dahhkcuiubneajz&^%hkiubneajzcb'], ['lippskcqcjvmirh&^%psqcjvmirhkj']], [['hellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfririend'], ['dahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneneajz'], ['lippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmvmirh']], [['heflbcmyd&^%lomyfriend'], ['dabhxyiuz&^%hkiubneajz'], ['lijpfgqch&^%psqcjvmirh']], [['myfriendvwxyz'], ['iubneajzrstuv'], ['qcjvmirhzabcd']], [['theqcuickabcdefghihjklmehellotnfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghiadahhkpjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqilippsxrjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['thequickbrthequiceerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeyaanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymgiivxlipedchsksarjsbnyqtwszipedchs']], [['thequhelbcmld&^%loicerthelazy%doag'], ['pdamqdahxyihz&^%hkeyanpdahwvu%zkwc'], ['xliuylipfgqph&^%psmgivxlipedc%hsek']], [['%bcdhelloo&^%'], ['%xyzdahhkk&^%'], ['%fghlippss&^%']], [['hellogmyfrithequickbromwnfoxjumpsoverthelazydogend&^%lomhi'], ['dahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuzkcajz&^%hkide'], ['lippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedchskirh&^%psqlm']], [['afbcdefghijklhellogfa worl damnoyfrienduvxyz'], ['wbxyzabcdefghdahhkcbw sknh zwijkubneajzqrtuv'], ['ejfghijklmnoplippskje asvp heqrscjvmirhyzbcd']], [['%%bc^d&^%'], ['%%xy^z&^%'], ['%%fg^h&^%']], [['gfs'], ['cbo'], ['kjw']], [['hloglfa'], ['dhkchbw'], ['lpskpje']], [['thequicerpsoverthelazydogthelazydog'], ['pdamqeyanlokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivtwszivxlipedchskxlipedchsk']], [['gghelbcdworlwxyyd&^thequickbrownfoxjumpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabcch&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqcplipps']], [['hellogmyfiend'], ['dahhkciubeajz'], ['lippskqcjmirh']], [['thequiutckbrownfoxjumpstoverthelazydo'], ['pdamqeqpygxnksjbktfqilopkranpdahwvuzk'], ['xliuymyxgofvsarjsbnyqtwxszivxlipedchs']], [['helelooywxy'], ['dahahkkustu'], ['lipipsscabc']], [['bc&thequicertthelazydg^%'], ['xy&pdamqeyanppdahwvuzc^%'], ['fg&xliuymgivxxlipedchk^%']], [['helbc%bc^d&^%d&^%lomy'], ['dahxy%xy^z&^%z&^%hkiu'], ['lipfg%fg^h&^%h&^%psqc']], [['hi    etabcdefghijklhellogfa  a g^f helbcmld'], ['de    apwxyzabcdefghdahhkcbw  w c^b dahxyihz'], ['lm    ixefghijklmnoplippskje  e k^j lipfgqph']], [['helllogfa wethorld'], ['dahhhkcbw sapdknhz'], ['lipppskje aixlsvph']], [['hellhi    et a gf helbcd&^%lomyfriendlogfa'], ['dahhde    ap w cb dahxyz&^%hkiubneajzhkcbw'], ['lipplm    ix e kj lipfgh&^%psqcjvmirhpskje']], [['abcdefghijklmnopqrstuhi    et  g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde    ap  c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm    ix  k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['hello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzd'], ['dahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvz'], ['lipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdh']], [['helbcmld&^%lo'], ['dahxyihz&^%hk'], ['lipfgqph&^%ps']], [['hellogmyfriend&^%lomyfriendgfboc&^hello%'], ['dahhkciubneajz&^%hkiubneajzcbxky&^dahhk%'], ['lippskqcjvmirh&^%psqcjvmirhkjfsg&^lipps%']], [['abcdyzzefghijklmnopqrsthi    ehellot a gnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp w cjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx e krhyzbcd']], [['helbcmld'], ['dahxyihz'], ['lipfgqph']], [['heriennduvxyz'], ['daneajjzqrtuv'], ['livmirrhyzbcd']], [['hellogmyfriend&^%lomhi    et a %lo myfriendfriend'], ['dahhkciubneajz&^%hkide    ap w %hk iubneajzbneajz'], ['lippskqcjvmirh&^%psqlm    ix e %ps qcjvmirhjvmirh']], [['yzzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cddcdddddddddddddddddddddddddddddddddd']], [['boc&hi    et  a g^f helbcmld&^%lo myfriend^heo%'], ['xky&de    ap  w c^b dahxyihz&^%hk iubneajz^dak%'], ['fsg&lm    ix  e k^j lipfgqph&^%ps qcjvmirh^lis%']], [['abcdyzzefghijklmnopqrsthi    ehellot agnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp wcjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx ekrhyzbcd']], [['thequickbromohwellogfa wethorldwnfoxjumpsoverdog'], ['pdamqeygxnkikdsahhkcbw sapdknhzsjbktfqilokranzkc'], ['xliuymgofvsqslaippskje aixlsvpharjsbnyqtwszivhsk']], [['hihihellogmyfriendellogmyfriiend'], ['dededahhkciubneajzahhkciubneeajz'], ['lmlmlippskqcjvmirhippskqcjvmmirh']], [['bdcd&^%'], ['xzyz&^%'], ['fhgh&^%']], [['thequickbrownfoxydhhillogfaelloo'], ['pdamqeygxnksjbktuzddehhkcbwahhkk'], ['xliuymgofvsarjsbchllmppskjeippss']], [['helbcdhibc&^%'], ['dahxyzdexy&^%'], ['lipfghlmfg&^%']], [['thequiutckbrownfoxjumpstovelazydo'], ['pdamqeqpygxnksjbktfqilopkrahwvuzk'], ['xliuymyxgofvsarjsbnyqtwxszipedchs']], [['bc&^%thequicerthelazydothkbroswnfoxjumpsovtheqkbrownfoxydoerthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnkosjbktfqilokrpdamgxnksjbktuzkanpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvswarjsbnyqtwszxliuofvsarjsbchsivxlipedchs&^%']], [['theqcuickabcdefghinhjklmnopqrstuvxyzbrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdejdfghijklmnopqrtuvxnksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmrlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddddddddddddddddddddddddddddd']], [['herienduvxyhi    et a gf hellogmyfienddz'], ['daneajzqrtude    ap w cb dahhkciubeajzzv'], ['livmirhyzbclm    ix e kj lippskqcjmirhhd']], [['hi    et a gf heflbcmhelbcmd&^%lomyfriendd&^%lo cmyfend'], ['de    ap w cb dabhxyidahxyiz&^%hkiubneajzz&^%hk yiubajz'], ['lm    ix e kj lijpfgqlipfgqh&^%psqcjvmirhh&^%ps gqcjirh']], [['gghelbcdworlwxyyd&^thequickbrownfoxjuthequickbromownfoxjumpsoverdogmpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuz&^pdamqeygxnksjbktfqpdamqeygxnkiksjbktfqilokranzkcilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabcch&^xliuymgofvsarjsbnyxliuymgofvsqsarjsbnyqtwszivhskqtwszivxlipedchs%psqcplipps']], [['hellogmyfrithequiend&^%lomhi s   et a gf helbcmd&^%lo myfriendfriend'], ['dahhkciubnepdamqeajz&^%hkide o   ap w cb dahxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmxliuymirh&^%psqlm w   ix e kj lipfgqh&^%ps qcjvmirhjvmirh']], [['ywxytheqcuickbrownfoxjumpsoverthelazydog'], ['ustupdamyqeygxnksjbktfqilokranpdahwvuzkc'], ['cabcxliugymgofvsarjsbnyqtwszivxlipedchsk']], [['hellogfa wetoorld'], ['dahhkcbw sapkknhz'], ['lippskje aixssvph']], [['bcbcmd&^%lobc&^%'], ['xyxyiz&^%hkxy&^%'], ['fgfgqh&^%psfg&^%']], [['theqcuickabcdefghihjklmehellotnfoxjumpsoverthoelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghiadahhkpjbktfqilokranpdkahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqilippsxrjsbnyqtwszivxlsiplippskqcjvmirhedchsk']], [['abcdyzzefghijklmnopqrsthhelbcdhii    ehellot a gnduvxyz'], ['wxyzuvvabcdefghijklmnopddahxyzdee    adahhkp w cjzqrtuv'], ['efghcddijklmnopqrstuvwxllipfghlmm    ilippsx e krhyzbcd']], [['gnduvxyz%bcdhelwxyl%'], ['cjzqrtuv%xyzdahstuh%'], ['krhyzbcd%fghlipabcp%']], [['r'], ['n'], ['v']], [['hi    et a gf helbcd&^%lomy fiend'], ['de    ap w cb dahxyz&^%hkiu beajz'], ['lm    ix e kj lipfgh&^%psqc jmirh']], [['bc&thequicertthelazydhellog^%'], ['xy&pdamqeyanppdahwvuzdahhkc^%'], ['fg&xliuymgivxxlipedchlippsk^%']], [['ob%'], ['kx%'], ['sf%']], [['%%bc^d&hellogfa worwethorld^%'], ['%%xy^z&dahhkcbw sknsapdknhz^%'], ['%%fg^h&lippskje asvaixlsvph^%']], [['wxabcdefghijklmnopqrstuhi    et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['stwxyzabcdefghijklmnopqde    ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['abefghijklmnopqrstuvwxylm    ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['gfhello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzds'], ['cbdahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvzo'], ['kjlipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdhw']], [['hi    et a gftheqkbrowfnfoxydo helbcmhelbcmd&^%lomyfiriendd&^%lo myfrd'], ['de    ap w cbpdamgxnksbjbktuzk dahxyidahxyiz&^%hkiubeneajzz&^%hk iubnz'], ['lm    ix e kjxliuofvsajrjsbchs lipfgqlipfgqh&^%psqcjmvmirhh&^%ps qcjvh']], [['ehebc&^hello%'], ['adaxy&^dahhk%'], ['ilifg&^lipps%']], [['abcdyzzefghijklmnopqrsthi    ehellot ahellhi gnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp wdahhde cjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx elipplm krhyzbcd']], [['hellogmyfienid'], ['dahhkciubeajez'], ['lippskqcjmirmh']], [['hhelelooywxy'], ['ddahahkkustu'], ['llipipsscabc']], [['hellthequiuckbrownfoxjumpsoverthelazydoaaogfa worl d'], ['dahhpdamqeqygxnksjbktfqilokranpdahwvuzkwwkcbw sknh z'], ['lippxliuymygofvsarjsbnyqtwszivxlipedchseeskje asvp h']], [['fgyzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzzf'], ['bcuvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvvb'], ['jkcdcdddddlippsddddddddddddddddddddddddddddj']], [['thequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfo'], ['pdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbk'], ['xliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjs']], [['hi    et a gf helbcdhi    et a gf helylogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzde    ap w cb dahuhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlm    ix e kj lipcpskqcjvmirh&^%psqcjvmirh']], [['bcdd&^%%'], ['xyzz&^%%'], ['fghh&^%%']], [['%bob%cd&^%'], ['%xkx%yz&^%'], ['%fsf%gh&^%']], [['hi    et  ah gf helbcmld&^%lo myfriend'], ['de    ap  wd cb dahxyihz&^%hk iubneajz'], ['lm    ix  el kj lipfgqph&^%ps qcjvmirh']], [['hi r  et a gf helbcmd&^% lomyfriend'], ['de n  ap w cb dahxyiz&^% hkiubneajz'], ['lm v  ix e kj lipfgqh&^% psqcjvmirh']], [['bc&^%thequicerthelazydoghelbcmd&^%lobc&^yzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzz%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&^%hkxy&^uvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvv%'], ['fg&^%xliuymgivxlipedchsklipfgqh&^%psfg&^cdcdddddlippsdddddddddddddddddddddddddddd%']], [['hellogmyfrithequickbromwnfoxjumpsoverthelazylbcmd&^%lo myfriendfriend'], ['dahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuhxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedcpfgqh&^%ps qcjvmirhjvmirh']], [['hi    ehellott a gf hellogmyfrielnd'], ['de    adahhkpp w cb dahhkciubneahjz'], ['lm    ilippsxx e kj lippskqcjvmiprh']], [['worlwxdgf%b^c^d&^%'], ['sknhstzcb%x^y^z&^%'], ['asvpabhkj%f^g^h&^%']], [['hhelelooywxys'], ['ddahahkkustuo'], ['llipipsscabcw']], [['booc&^hello%'], ['xkky&^dahhk%'], ['fssg&^lipps%']], [['hellogmyfriend&^%lomyfrithequickbrownfoxjumpsovworwethorlderthelazydf'], ['dahhkciubneajz&^%hkiubnepdamqeygxnksjbktfqilokrsknsapdknhzanpdahwvuzb'], ['lippskqcjvmirh&^%psqcjvmxliuymgofvsarjsbnyqtwszasvaixlsvphivxlipedchj']], [['bc&^%thequicertwethorldwnfoxjumpsoverdoghelazydogmd&&abc&^%'], ['xy&^%pdamqeyanpsapdknhzsjbktfqilokranzkcdahwvuzkciz&&wxy&^%'], ['fg&^%xliuymgivxaixlsvpharjsbnyqtwszivhsklipedchskqh&&efg&^%']], [['thequtickborobc&thequicertthelazydg^%wnfoxydo'], ['pdamqpeygxknkxy&pdamqeyanppdahwvuzc^%sjbktuzk'], ['xliuyxmgofsvsfg&xliuymgivxxlipedchk^%arjsbchs']], [['bc&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['xy&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['fg&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']], [['hellogmyfthequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfoiend'], ['dahhkciubpdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbkeajz'], ['lippskqcjxliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjsmirh']], [['thequicetazydog'], ['pdamqeyapwvuzkc'], ['xliuymgixedchsk']], [['hellogmyfrriend&^%lomyfriendgf'], ['dahhkciubnneajz&^%hkiubneajzcb'], ['lippskqcjvvmirh&^%psqcjvmirhkj']], [['woretaahorld'], ['sknapwwdknhz'], ['asvixeelsvph']], [['ld'], ['hz'], ['ph']], [['helelooywxyhi    eiend'], ['dahahkkustude    aeajz'], ['lipipsscabclm    imirh']], [['woretarahorld'], ['sknapwnwdknhz'], ['asvixevelsvph']], [['bcdd&^d%'], ['xyzz&^z%'], ['fghh&^h%']], [['gghelbcdworlwxyybrownfoxjumpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuxnksjbktfqilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabccfvsarjsbnyqtwszivxlipedchs%psqcplipps']], [['whellomyfrienduvxyhelbcthequickbrownfoxbcdd&^%ydoyrlwxyyd'], ['sdahhkiubneajzqrtudahxypdamqeygxnksjbktxyzz&^%uzkunhstuuz'], ['alippsqcjvmirhyzbclipfgxliuymgofvsarjsbfghh&^%chscvpabcch']], [['wethorldwnfoxjumpsoverdog'], ['sapdknhzsjbktfqilokranzkc'], ['aixlsvpharjsbnyqtwszivhsk']], [['etabcdefghijklhellogfa'], ['apwxyzabcdefghdahhkcbw'], ['ixefghijklmnoplippskje']], [['hi    et sa gf helbcdhi    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap ow cb dahxyzde    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix we kj lipfghlm    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['thequicwkbrthequicerthelazydogownofoxjumpszytdo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilovupzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwdcxhs']], [['theqcuickabcdefghihjklmno%bcdhethequieceurtthelazydogydog'], ['pdamyqeygwxyzabcdedfghijk%xyzdapdamqeayaqnppdahwvuzkcuzkc'], ['xliugymgoefghijklmlnopqrs%fghlixliuymigiyvxxlipedchskchsk']], [['ahellhi'], ['wdahhde'], ['elipplm']], [['hi    et a gf helleomyfriened'], ['de    ap w cb dahhakiubneajaz'], ['lm    ix e kj lippisqcjvmirih']], [['hi    et a g'], ['de    ap w c'], ['lm    ix e k']], [['helbcmd&^%l'], ['dahxyiz&^%h'], ['lipfgqh&^%p']], [['helbc%bc^d&^%d&^%lomworwethorld^%y'], ['dahxy%xy^z&^%z&^%hkisknsapdknhz^%u'], ['lipfg%fg^h&^%h&^%psqasvaixlsvph^%c']], [['rgfhello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzds'], ['ncbdahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvzo'], ['vkjlipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdhw']], [['myfedamnopqrstrhind'], ['iubazwijklmnopndejz'], ['qcjiheqrstuvwxvlmrh']], [['abcdefghijklmnopqrstuvxyo%bcdhelwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyzdahstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghlipabcps&^%d']], [['hi    e g'], ['de    a c'], ['lm    i k']], [['ahelthequickbrownfoxydolhi'], ['wdahpdamqeygxnksjbktuzkhde'], ['elipxliuymgofvsarjsbchsplm']], [['thequicerthequcekbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuygiofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['bc&^%thequicyxwxyeroswnfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyutstuankosjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgcbabcivswarjsbnyqtwszivxlipedchs&^%']], [['bchi r  et a gf helbcmd&^% lomyfriend&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['xyde n  ap w cb dahxyiz&^% hkiubneajz&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['fglm v  ix e kj lipfgqh&^% psqcjvmirh&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']], [['worlafbcdefghijklhellogfa'], ['sknhwbxyzabcdefghdahhkcbw'], ['asvpejfghijklmnoplippskje']], [['ghellogmyfrithequickbromwnfoxjumpsoverthelazylbcmd&^%lofs'], ['cdahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuhxyiz&^%hkbo'], ['klippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedcpfgqh&^%psjw']], [['heflbklmnopqrsthilomyfriend'], ['dabhxghijklmnopdehkiubneajz'], ['lijpfopqrstuvwxlmpsqcjvmirh']], [['abcdyzzefghijklmnopqrsthi    ehellot a gnd'], ['wxyzuvvabcdefghijklmnopde    adahhkp w cjz'], ['efghcddijklmnopqrstuvwxlm    ilippsx e krh']], [['heyzzzbcdhibc&^%'], ['dauvvvxyzdexy&^%'], ['licdddfghlmfg&^%']], [['yzyyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdccdddddddddddddddddddddddddddddddddd']], [['abcdefghijklmnopqrstuvxyo%bcdhelhellogfa wetorldwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyzdahdahhkcbw sapknhzstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghliplippskje aixsvphabcps&^%d']], [['%%bdc^d&^%'], ['%%xzy^z&^%'], ['%%fhg^h&^%']], [['helbcmlld'], ['dahxyihhz'], ['lipfgqpph']], [['myfrieendvwxyz'], ['iubneaajzrstuv'], ['qcjvmiirhzabcd']], [['bc&thequricertthelazydog^%'], ['xy&pdamqneyanppdahwvuzkc^%'], ['fg&xliuyvmgivxxlipedchsk^%']], [['bc&^%thequicehwellogfa wethorldhelazydogbc&^%'], ['xy&^%pdamqeyadsahhkcbw sapdknhzdahwvuzkcxy&^%'], ['fg&^%xliuymgilaippskje aixlsvphlipedchskfg&^%']], [['hi    et a gf helbcd&^%lomy yfriend'], ['de    ap w cb dahxyz&^%hkiu ubneajz'], ['lm    ix e kj lipfgh&^%psqc cjvmirh']], [['hi    et a gf helbcmd&^%lo myfrhellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfririendiend'], ['de    ap w cb dahxyiz&^%hk iubndahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneneajzeajz'], ['lm    ix e kj lipfgqh&^%ps qcjvlippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmvmirhmirh']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzmyfriend^heo%zzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvviubneajz^dak%vvvvv'], ['cdcdddddddddddddddddddddddddddqcjvmirh^lis%ddddd']], [['thehelbc%bc^d&^%d&^%lomyquicerpsoverthelazydogthelazydog'], ['pdadahxy%xy^z&^%z&^%hkiumqeyanlokranpdahwvuzkcpdahwvuzkc'], ['xlilipfg%fg^h&^%h&^%psqcuymgivtwszivxlipedchskxlipedchsk']], [['eeheabcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzo'], ['aadawxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvk'], ['iiliefghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcds']], [['helylogmyfriend&^%lomyfriend'], ['dahuhkciubneajz&^%hkiubneajz'], ['lipcpskqcjvmirh&^%psqcjvmirh']], [['theqfkbrowfnfoxydo'], ['pdambgxnksbjbktuzk'], ['xliujofvsajrjsbchs']], [['eello'], ['aahhk'], ['iipps']], [['bc&threquicertthelazydhellog^%'], ['xy&pdnamqeyanppdahwvuzdahhkc^%'], ['fg&xlviuymgivxxlipedchlippsk^%']], [['hi    et a gf hiend'], ['de    ap w cb deajz'], ['lm    ix e kj lmirh']], [['hellond'], ['dahhkjz'], ['lippsrh']], [['hi    etg^f helbcmld'], ['de    apc^b dahxyihz'], ['lm    ixk^j lipfgqph']], [['yzzzzob%zzzzzzzzzzzzzzzzzzzzz'], ['uvvvvkx%vvvvvvvvvvvvvvvvvvvvv'], ['cddddsf%ddddddddddddddddddddd']], [['abcdefghijklmnopqrstuhi'], ['wxyzabcdefghijklmnopqde'], ['efghijklmnopqrstuvwxylm']], [['hi r   et a gf helbcmd&^%lomyfiend'], ['de n   ap w cb dahxyiz&^%hkiubeajz'], ['lm v   ix e kj lipfgqh&^%psqcjmirh']], [['hi r  et helelooa gf helbcmd&^%lomyfriend'], ['de n  ap dahahkkw cb dahxyiz&^%hkiubneajz'], ['lm v  ix lipipsse kj lipfgqh&^%psqcjvmirh']], [['hellomyfrienduvxyzo'], ['dahhkiubneajzqrtuvk'], ['lippsqcjvmirhyzbcds']], [['myhi    et a gf heflbcmhelbcmd&^%lomyfriendd&^%lo cmyfendfriendvwxyz'], ['iude    ap w cb dabhxyidahxyiz&^%hkiubneajzz&^%hk yiubajzbneajzrstuv'], ['qclm    ix e kj lijpfgqlipfgqh&^%psqcjvmirhh&^%ps gqcjirhjvmirhzabcd']], [['thequicwkbrthequicerthelazydogownofoxjheleloompszydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfdahahkkilovuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnlipipssqtwdchs']], [['hielbecmd&^%loomyfriend'], ['deahxayiz&^%hkkiubneajz'], ['lmipfigqh&^%pssqcjvmirh']], [['orlwxyyd'], ['knhstuuz'], ['svpabcch']], [['hello oworrld'], ['dahhk ksknnhz'], ['lipps sasvvph']], [['ggfgf'], ['ccbcb'], ['kkjkj']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzhellogmyfriend&^%lomhizzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvdahhkciubneajz&^%hkidevvvvvvvvvvv'], ['cdcdddddddddddddddddddddddlippskqcjvmirh&^%psqlmddddddddddd']], [['gabcdefghijklmnopqrstuvxyfo%bcdhelhellogfagfgf'], ['cwxyzabcdefghijklmnopqrtubk%xyzdahdahhkcbwcbcb'], ['kefghijklmnopqrstuvwxyzbcjs%fghliplippskjekjkj']], [['gf%^b^c^d&^%'], ['cb%^x^y^z&^%'], ['kj%^f^g^h&^%']], [['thequhelbcmld&i^%loicerthelazy%doag'], ['pdamqdahxyihz&e^%hkeyanpdahwvu%zkwc'], ['xliuylipfgqph&m^%psmgivxlipedc%hsek']], [['hellogymyfriend&^%lomyfriendgthequickbrthequicerthelazydogownfoxjumpsoverthelazydof'], ['dahhkcuiubneajz&^%hkiubneajzcpdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokranpdahwvuzkb'], ['lippskcqcjvmirh&^%psqcjvmirhkxliuymgofvxliuymgivxlipedchsksarjsbnyqtwszivxlipedchsj']], [['abcdetuvxyz'], ['wxyzapqrtuv'], ['efghixyzbcd']], [['hhillogfaell%b^c^d&^d%o'], ['ddehhkcbwahh%x^y^z&^z%k'], ['llmppskjeipp%f^g^h&^h%s']], [['bc&^%uthequicertdhelazydohigheblbcmd&^%lobc&^%'], ['xy&^%qpdamqeyanpzdahwvuzkdecdaxhxyiz&^%hkxy&^%'], ['fg&^%yxliuymgivxhlipedchslmklifpfgqh&^%psfg&^%']], [['rworl'], ['nsknh'], ['vasvp']], [['hellogymyfriend&^%lomyfrriendgf'], ['dahhkcuiubneajz&^%hkiubnneajzcb'], ['lippskcqcjvmirh&^%psqcjvvmirhkj']], [['heflbcmhelbcmd&^%lomyfriendd&^%lo'], ['dabhxyidahxyiz&^%hkiubneajzz&^%hk'], ['lijpfgqlipfgqh&^%psqcjvmirhh&^%ps']], [['bb'], ['xx'], ['ff']], [['worlafbcdefghhelbcmd&^%lomyfriendijklhellogfa'], ['sknhwbxyzabcddahxyiz&^%hkiubneajzefghdahhkcbw'], ['asvpejfghijkllipfgqh&^%psqcjvmirhmnoplippskje']], [['athequicwkbrthequicerthelazydogaownofoxjumpsoverthelazydo'], ['wpdamqeysgxnpdamqeyanpdahwvuzkcwksjkbktfqilokranpdahwvuzk'], ['exliuymgaofvxliuymgivxlipedchskesarsjsbnyqtwszivxlipedchs']], [['ahellogfa'], ['wdahhkcbw'], ['elippskje']], [['hi    et aa gf helbcmhelbcmd&^%lomyfriendd&^%lo myfriend'], ['de    ap ww cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubneajz'], ['lm    ix ee kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjvmirh']], [['worwethorld^%'], ['sknsapdknhz^%'], ['asvaixlsvph^%']], [['hhehi    etabcdefghijklhellogfa  a g^f helbcmldlelooywxys'], ['ddade    apwxyzabcdefghdahhkcbw  w c^b dahxyihzhahkkustuo'], ['llilm    ixefghijklmnoplippskje  e k^j lipfgqphpipsscabcw']], [['g^f'], ['c^b'], ['k^j']], [['abcdefghijklmnopqrstuhi     et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde     ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm     ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['thequickbrthequicqerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeymanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymguivxlipedchsksarjsbnyqtwszipedchs']], [['worlafbcdefghijklhellheyzzzbcdhibc&^%ogfa'], ['sknhwbxyzabcdefghdahhdauvvvxyzdexy&^%kcbw'], ['asvpejfghijklmnoplipplicdddfghlmfg&^%skje']], [['abcdyzzefghijklmnopqrsthi'], ['wxyzuvvabcdefghijklmnopde'], ['efghcddijklmnopqrstuvwxlm']], [['hi%%bc^d&hellogfa worwetbc&thequricertthelazydog^%horld^%'], ['de%%xy^z&dahhkcbw sknsapxy&pdamqneyanppdahwvuzkc^%dknhz^%'], ['lm%%fg^h&lippskje asvaixfg&xliuyvmgivxxlipedchsk^%lsvph^%']], [['o%bcdhe&^%'], ['k%xyzda&^%'], ['s%fghli&^%']], [['%bdcthkbrvownfoxjumpsoverthelazydod&^%'], ['%xzypdgxnrksjbktfqilokranpdahwvuzkz&^%'], ['%fhgxlofvzsarjsbnyqtwszivxlipedchsh&^%']], [['hmyfriendfyfriendelgflo'], ['diubneajzbubneajzahcbhk'], ['lqcjvmirhjcjvmirhipkjps']], [['thequhellogmyfthequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfoiendrtazydog'], ['pdamqdahhkciubpdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbkeajznpwvuzkc'], ['xliuylippskqcjxliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjsmirhvxedchsk']], [['theqcuickbrownfoxjumpsoverthbc&^%thequicerthela^zydoghelbcmd&&^%lobc&^%og'], ['pdamyqeygxnksjbktfqilokranpdxy&^%pdamqeyanpdahw^vuzkcdahxyiz&&^%hkxy&^%kc'], ['xliugymgofvsarjsbnyqtwszivxlfg&^%xliuymgivxlipe^dchsklipfgqh&&^%psfg&^%sk']], [['thequickbrownfoxjumpsovertheloazydfo'], ['pdamqeygxnksjbktfqilokranpdahkwvuzbk'], ['xliuymgofvsarjsbnyqtwszivxlipsedchjs']], [['yzzzz'], ['uvvvv'], ['cdddd']], [['bcddd&^%'], ['xyzzz&^%'], ['fghhh&^%']], [['worwetbc&thequricertthelazydog^%horld^%'], ['sknsapxy&pdamqneyanppdahwvuzkc^%dknhz^%'], ['asvaixfg&xliuyvmgivxxlipedchsk^%lsvph^%']], [['hellogfatoorld'], ['dahhkcbwpkknhz'], ['lippskjexssvph']], [['theqcuickbrownfoxjumheleloopsooverthelazbydog'], ['pdamyqeygxnksjbktfqidahahkklokkranpdahwvxuzkc'], ['xliugymgofvsarjsbnyqlipipsstwsszivxlipedfchsk']], [['hi    et a gf hethequickborownfoxydolbcd&^%lomyfriend'], ['de    ap w cb dapdamqeygxknksjbktuzkhxyz&^%hkiubneajz'], ['lm    ix e kj lixliuymgofsvsarjsbchspfgh&^%psqcjvmirh']], [['woworwethorlldrwlwxd'], ['sksknsapdknhhznshstz'], ['asasvaixlsvpphvapabh']], [['theqcrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamynksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['heflbklmnopqrsthilomyfrien'], ['dabhxghijklmnopdehkiubneaj'], ['lijpfopqrstuvwxlmpsqcjvmir']], [['hi    ehellot a gf helahelthequickbrownfoxydolhilogmyfriend'], ['de    adahhkp w cb dahwdahpdamqeygxnksjbktuzkhdehkciubneajz'], ['lm    ilippsx e kj lipelipxliuymgofvsarjsbchsplmpskqcjvmirh']], [['helbcml'], ['dahxyih'], ['lipfgqp']], [['hellogmyfriithequiend&^%lomhi'], ['dahhkciubneepdamqeajz&^%hkide'], ['lippskqcjvmmxliuymirh&^%psqlm']], [['helbc%bc^d&^%d&^%lommworwethorld^%y'], ['dahxy%xy^z&^%z&^%hkiisknsapdknhz^%u'], ['lipfg%fg^h&^%h&^%psqqasvaixlsvph^%c']], [['wxabcdefghijklmnopqrstuhi'], ['stwxyzabcdefghijklmnopqde'], ['abefghijklmnopqrstuvwxylm']], [['afbcdefghijklhellogfa xyz'], ['wbxyzabcdefghdahhkcbw tuv'], ['ejfghijklmnoplippskje bcd']], [['abcdefghijklhellogfa'], ['wxyzabcdefghdahhkcbw'], ['efghijklmnoplippskje']], [['hwelhellogfa wethorldlogfa wethorldd'], ['dsahdahhkcbw sapdknhzhkcbw sapdknhzz'], ['laiplippskje aixlsvphpskje aixlsvphh']], [['bc&^%thequicerth^elazydogbc&^%'], ['xy&^%pdamqeyanpd^ahwvuzkcxy&^%'], ['fg&^%xliuymgivxl^ipedchskfg&^%']], [['h ello oworrld'], ['d ahhk ksknnhz'], ['l ipps sasvvph']], [['ggherthelazydou%lomylhello'], ['ccdanpdahwvuzkq%hkiuhdahhk'], ['kklivxlipedchsy%psqcplipps']], [['%bcdhelwxyl&o&^%'], ['%xyzdahstuh&k&^%'], ['%fghlipabcp&s&^%']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzztheqcuickabcdefghihjklmnopqrstuvxyzbrownfoxjumpsoverthelhellzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvpdamyqeygwxyzabcdedfghijklmnopqrtuvxnksjbktfqilokranpdahdahhvv'], ['cdcdddddddddddddddddddddddddddddxliugymgoefghijklmlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippdd']], [['abacdefghijklmnopqrstuvwxyz'], ['wxwyzabcdefghijklmnopqrstuv'], ['efeghijklmnopqrstuvwxyzabcd']], [['thequickbrownftheqcuickabcdefghihjklmno%bcdhethequieceurtthelazydogydogoxjumpsoverthelazyd'], ['pdamqeygxnksjbpdamyqeygwxyzabcdedfghijk%xyzdapdamqeayaqnppdahwvuzkcuzkcktfqilokranpdahwvuz'], ['xliuymgofvsarjxliugymgoefghijklmlnopqrs%fghlixliuymigiyvxxlipedchskchsksbnyqtwszivxlipedch']], [['thheflbcmhelbcmd&^%lomyfriendd&^%louiceurtazydog'], ['pddabhxyidahxyiz&^%hkiubneajzz&^%hkqeyaqnpwvuzkc'], ['xllijpfgqlipfgqh&^%psqcjvmirhh&^%psymgiyvxedchsk']], [['abcdefghijklmnopqrstuvxyo%bcdxhelwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyztdahstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghblipabcps&^%d']], [['hefmnopqrsthilomyfrien'], ['dabijklmnopdehkiubneaj'], ['lijqrstuvwxlmpsqcjvmir']], [['zyzzz'], ['vuvvv'], ['dcddd']], [['lomyfriend&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['hkiubneajz&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['psqcjvmirh&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']]], [[['hi'], ['de'], ['lm']], [['asdfghjkl'], ['wozbcdfgh'], ['ewhjklnop']], [['gf'], ['cb'], ['kj']], [['et'], ['ap'], ['ix']], [['faewfawefaewg'], ['bwasbwsabwasc'], ['jeiajeaijeiak']], [['hellomyfriend'], ['dahhkiubneajz'], ['lippsqcjvmirh']], [['dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'], ['ztvzhijehbqdiehqbdhedqbjiheijqbdheijqbdbqyqbd'], ['hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl']], [['a'], ['w'], ['e']], [['abcde'], ['wxyza'], ['efghi']], [['uvwxyz'], ['qrstuv'], ['yzabcd']], [['test123'], ['paop123'], ['xiwx123']], [['1a2b3c'], ['1w2x3y'], ['1e2f3g']], [['hello world'], ['dahhk sknhz'], ['lipps asvph']], [['monitor'], ['ikjepkn'], ['qsrmxsv']], [['abc'], ['wxy'], ['efg']], [['kmt'], ['gip'], ['oqx']], [['park'], ['lwng'], ['tevo']], [['mtkmt'], ['ipgip'], ['qxoqx']], [['testpark123'], ['paoplwng123'], ['xiwxtevo123']], [['uvuvwxyzwxyz'], ['qrqrstuvstuv'], ['yzyzabcdabcd']], [['abcdetest123'], ['wxyzapaop123'], ['efghixiwx123']], [['testpark1233'], ['paoplwng1233'], ['xiwxtevo1233']], [['parrte1a2b3cstpark123'], ['lwnnpa1w2x3yoplwng123'], ['tevvxi1e2f3gwxtevo123']], [['pamonitork'], ['lwikjepkng'], ['teqsrmxsvo']], [['uvwabcxyuz'], ['qrswxytuqv'], ['yzaefgbcyd']], [['uvuvwxyzwxz'], ['qrqrstuvstv'], ['yzyzabcdabd']], [['t'], ['p'], ['x']], [['uvz'], ['qrv'], ['yzd']], [['kuvz'], ['gqrv'], ['oyzd']], [['kkuvz'], ['ggqrv'], ['ooyzd']], [['abct'], ['wxyp'], ['efgx']], [['tes2tpark1233'], ['pao2plwng1233'], ['xiw2xtevo1233']], [['at'], ['wp'], ['ex']], [['tkmtkmtuvwabcxyuzmt'], ['pgipgipqrswxytuqvip'], ['xoqxoqxyzaefgbcydqx']], [['uvuvwxyzwxzyz'], ['qrqrstuvstvuv'], ['yzyzabcdabdcd']], [['tkmtkmtuvwabuvuvwxyzwxzcxyuzmt'], ['pgipgipqrswxqrqrstuvstvytuqvip'], ['xoqxoqxyzaefyzyzabcdabdgbcydqx']], [['tsest123'], ['poaop123'], ['xwiwx123']], [['uvutvwxyzwxzyz'], ['qrqprstuvstvuv'], ['yzyxzabcdabdcd']], [['uvwparrkxyz'], ['qrslwnngtuv'], ['yzatevvobcd']], [['tsest123aparrte1a2b3cstpark123'], ['poaop123wlwnnpa1w2x3yoplwng123'], ['xwiwx123etevvxi1e2f3gwxtevo123']], [['abctabcde'], ['wxypwxyza'], ['efgxefghi']], [['tes2testpark123tpark1233'], ['pao2paoplwng123plwng1233'], ['xiw2xiwxtevo123xtevo1233']], [['uvwabbczxyuz'], ['qrswxxyvtuqv'], ['yzaeffgdbcyd']], [['uvvz'], ['qrrv'], ['yzzd']], [['tsest123aparrte1a2b3cstpatrk123'], ['poaop123wlwnnpa1w2x3yoplwpng123'], ['xwiwx123etevvxi1e2f3gwxtexvo123']], [['paabctak'], ['lwwxypwg'], ['teefgxeo']], [['zz'], ['vv'], ['dd']], [['pararte1a2b3cstpark123'], ['lwnwnpa1w2x3yoplwng123'], ['tevevxi1e2f3gwxtevo123']], [['pamonintork'], ['lwikjejpkng'], ['teqsrmrxsvo']], [['uvutvwxyzwxzyzabckuvz'], ['qrqprstuvstvuvwxygqrv'], ['yzyxzabcdabdcdefgoyzd']], [['uvutvwzzxyzwxzyz'], ['qrqprsvvtuvstvuv'], ['yzyxzaddbcdabdcd']], [['tabcdtabcde'], ['pwxyzpwxyza'], ['xefghxefghi']], [['uvwxwyz'], ['qrstsuv'], ['yzabacd']], [['aabcde'], ['wwxyza'], ['eefghi']], [['cpararte1a2b3cstpark1abct23'], ['ylwnwnpa1w2x3yoplwng1wxyp23'], ['gtevevxi1e2f3gwxtevo1efgx23']], [['tse3st23'], ['poa3op23'], ['xwi3wx23']], [['mtuvwxyzkmt'], ['ipqrstuvgip'], ['qxyzabcdoqx']], [['tsest123aparrte1a2b3cstapark123'], ['poaop123wlwnnpa1w2x3yopwlwng123'], ['xwiwx123etevvxi1e2f3gwxetevo123']], [['cpaararuvvzte1a2b3cstpark1abct23'], ['ylwwnwnqrrvpa1w2x3yoplwng1wxyp23'], ['gteevevyzzdxi1e2f3gwxtevo1efgx23']], [['tse32st23'], ['poa32op23'], ['xwi32wx23']], [['uvutvwxyzwxzyzabckumtkmtvz'], ['qrqprstuvstvuvwxygqipgiprv'], ['yzyxzabcdabdcdefgoyqxoqxzd']], [['uvwaubcxyuz'], ['qrswqxytuqv'], ['yzaeyfgbcyd']], [['abuvutvwxyzwxzyzabckuvzct'], ['wxqrqprstuvstvuvwxygqrvyp'], ['efyzyxzabcdabdcdefgoyzdgx']], [['tes2testppark1233'], ['pao2paopllwng1233'], ['xiw2xiwxttevo1233']], [['uvwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz'], ['qrstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv'], ['yzabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad']], [['xuvuvwxyzwxzyz'], ['tqrqrstuvstvuv'], ['byzyzabcdabdcd']], [['wuvwxyz'], ['sqrstuv'], ['ayzabcd']], [['aabdcde'], ['wwxzyza'], ['eefhghi']], [['uvwxyzwxyz'], ['qrstuvstuv'], ['yzabcdabcd']], [['cpararte1a2b3cstpark1abctuvwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz23'], ['ylwnwnpa1w2x3yoplwng1wxypqrstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv23'], ['gtevevxi1e2f3gwxtevo1efgxyzabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad23']], [['tkumtkmtuvwabuvuvwxyzwxzcxyuzmt'], ['pgqipgipqrswxqrqrstuvstvytuqvip'], ['xoyqxoqxyzaefyzyzabcdabdgbcydqx']], [['uvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywz'], ['qrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusv'], ['yzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcad']], [['wuvwxyzz'], ['sqrstuvv'], ['ayzabcdd']], [['xzyzabckumtkmtvz'], ['tvuvwxygqipgiprv'], ['bdcdefgoyqxoqxzd']], [['zzz'], ['vvv'], ['ddd']], [['ts2e3st23'], ['po2a3op23'], ['xw2i3wx23']], [['uvzmonitorz'], ['qrvikjepknv'], ['yzdqsrmxsvd']], [['t3se3'], ['p3oa3'], ['x3wi3']], [['uvutvwzzxz'], ['qrqprsvvtv'], ['yzyxzaddbd']], [['uvuvzwxyzwxz'], ['qrqrvstuvstv'], ['yzyzdabcdabd']], [['cpararteuvwxwyz1a2b3cstpark1abct23'], ['ylwnwnpaqrstsuv1w2x3yoplwng1wxyp23'], ['gtevevxiyzabacd1e2f3gwxtevo1efgx23']], [['stsest123'], ['opoaop123'], ['wxwiwx123']], [['tsest123aparrte1a2b3cstapark1213'], ['poaop123wlwnnpa1w2x3yopwlwng1213'], ['xwiwx123etevvxi1e2f3gwxetevo1213']], [['uvutvwvxyzwxzuvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywz'], ['qrqprsrtuvstvqrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusv'], ['yzyxzazbcdabdyzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcad']], [['kparrte1a2b3cstpark123'], ['glwnnpa1w2x3yoplwng123'], ['otevvxi1e2f3gwxtevo123']], [['pamonintorkpamonitoork'], ['lwikjejpknglwikjepkkng'], ['teqsrmrxsvoteqsrmxssvo']], [['tsestcpararte1a2b3cstpark1abct23123apa3'], ['poaopylwnwnpa1w2x3yoplwng1wxyp23123wlw3'], ['xwiwxgtevevxi1e2f3gwxtevo1efgx23123ete3']], [['abctest123'], ['wxypaop123'], ['efgxiwx123']], [['xzyzauvwxyzwxyzbckumtzkmtvz'], ['tvuvwqrstuvstuvxygqipvgiprv'], ['bdcdeyzabcdabcdfgoyqxdoqxzd']], [['1testpark1233'], ['1paoplwng1233'], ['1xiwxtevo1233']], [['tse32st233'], ['poa32op233'], ['xwi32wx233']], [['testtpark'], ['paopplwng'], ['xiwxxtevo']], [['abuvutvwxystsest123zwxzyzabckuvzct'], ['wxqrqprstuopoaop123vstvuvwxygqrvyp'], ['efyzyxzabcwxwiwx123dabdcdefgoyzdgx']], [['kmuvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywzt'], ['giqrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusvp'], ['oqyzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcadx']], [['xzyzabckumtkmtvzz'], ['tvuvwxygqipgiprvv'], ['bdcdefgoyqxoqxzdd']], [['uvuvwxyzzyzpamonitork'], ['qrqrstuvvuvlwikjepkng'], ['yzyzabcddcdteqsrmxsvo']], [['ut3se3vwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz'], ['qp3oa3rstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv'], ['yx3wi3zabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad']], [['abuvutvwxyzwxvzyzabckuvzct'], ['wxqrqprstuvstrvuvwxygqrvyp'], ['efyzyxzabcdabzdcdefgoyzdgx']], [['monitormuvvztkmt'], ['ikjepkniqrrvpgip'], ['qsrmxsvqyzzdxoqx']], [['uvxwpuvuvwxyzwxyzarrkxyz'], ['qrtslqrqrstuvstuvwnngtuv'], ['yzbatyzyzabcdabcdevvobcd']], [['uvwxzwyz'], ['qrstvsuv'], ['yzabdacd']], [['monitomrmuvvztkmt'], ['ikjepkiniqrrvpgip'], ['qsrmxsqvqyzzdxoqx']], [['parrte1a2b3cstpark123uvwabcxyuzuvwaxbbczxyuz'], ['lwnnpa1w2x3yoplwng123qrswxytuqvqrswtxxyvtuqv'], ['tevvxi1e2f3gwxtevo123yzaefgbcydyzaebffgdbcyd']], [['uvutvwxyzwxzyzabckuvzabctest123'], ['qrqprstuvstvuvwxygqrvwxypaop123'], ['yzyxzabcdabdcdefgoyzdefgxiwx123']], [['parkk'], ['lwngg'], ['tevoo']], [['uvwabbcxzxyuz'], ['qrswxxytvtuqv'], ['yzaeffgbdbcyd']], [['parrte1a2b3cst2park123'], ['lwnnpa1w2x3yop2lwng123'], ['tevvxi1e2f3gwx2tevo123']], [['bcd&^%'], ['xyz&^%'], ['fgh&^%']], [['thequickbrownfoxjumpsoverthelazydog'], ['pdamqeygxnksjbktfqilokranpdahwvuzkc'], ['xliuymgofvsarjsbnyqtwszivxlipedchsk']], [['abcdefghijklmnopqrstuvwxyz'], ['wxyzabcdefghijklmnopqrstuv'], ['efghijklmnopqrstuvwxyzabcd']], [['wxy'], ['stu'], ['abc']], [['yzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cddddddddddddddddddddddddd']], [['hi    et a gf hellomyfriend'], ['de    ap w cb dahhkiubneajz'], ['lm    ix e kj lippsqcjvmirh']], [['thequickbrownfoxjumpsoverthelazydo'], ['pdamqeygxnksjbktfqilokranpdahwvuzk'], ['xliuymgofvsarjsbnyqtwszivxlipedchs']], [['hi    et a gf hellomyfrienhellod'], ['de    ap w cb dahhkiubneajdahhkz'], ['lm    ix e kj lippsqcjvmirlippsh']], [['et'], ['ap'], ['ix']], [['hello'], ['dahhk'], ['lipps']], [['wxxy'], ['sttu'], ['abbc']], [['ho'], ['dk'], ['ls']], [['helo'], ['dahk'], ['lips']], [['heti    get a gf hellomyfrienhellod'], ['dape    cap w cb dahhkiubneajdahhkz'], ['lixm    kix e kj lippsqcjvmirlippsh']], [['helothequickbrownfoxjumpsoverthelazydo'], ['dahkpdamqeygxnksjbktfqilokranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwszivxlipedchs']], [['yzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdddddddddddddddddddddddddd']], [['hbcd&^%elo'], ['dxyz&^%ahk'], ['lfgh&^%ips']], [['b&cd&^'], ['x&yz&^'], ['f&gh&^']], [['ythequickbrownfoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszivxlipedchs']], [['hello heloworld'], ['dahhk dahksknhz'], ['lipps lipsasvph']], [['heloworld'], ['dahksknhz'], ['lipsasvph']], [['abcdefghijklmnopqrstuvwxyzythequickbrownfoxjumpsoverthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqilokranpdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqtwszivxlipedchs']], [['hi    et a rgf hellomyfrienhellod'], ['de    ap w ncb dahhkiubneajdahhkz'], ['lm    ix e vkj lippsqcjvmirlippsh']], [['heti    get a gf hellomyferienhellod'], ['dape    cap w cb dahhkiubaneajdahhkz'], ['lixm    kix e kj lippsqcjivmirlippsh']], [['hi    et a gf helloetmyfrienhellod'], ['de    ap w cb dahhkapiubneajdahhkz'], ['lm    ix e kj lippsixqcjvmirlippsh']], [['hi'], ['de'], ['lm']], [['thi    et a gf helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydog'], ['pde    ap w cb dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkc'], ['xlm    ix e kj lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchsk']], [['rgf'], ['ncb'], ['vkj']], [['abcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['helothequickbrownfoxumpsoverthelazydo'], ['dahkpdamqeygxnksjbktqilokranpdahwvuzk'], ['lipsxliuymgofvsarjsbyqtwszivxlipedchs']], [['abcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoe'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsi']], [['helothequickbrownfoxumpsovekrthelazydo'], ['dahkpdamqeygxnksjbktqilokragnpdahwvuzk'], ['lipsxliuymgofvsarjsbyqtwsziovxlipedchs']], [['helothequickbrownfoxjumpsgetoverthelazydo'], ['dahkpdamqeygxnksjbktfqilocapkranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkixszivxlipedchs']], [['hi    et  a gf hellomyfrienhellod'], ['de    ap  w cb dahhkiubneajdahhkz'], ['lm    ix  e kj lippsqcjvmirlippsh']], [['yywxy'], ['uustu'], ['ccabc']], [['ythequickbrownfhi    et a gf hellomyfriendoxjumpsoverthelazydo'], ['updamqeygxnksjbde    ap w cb dahhkiubneajzktfqilokranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lippsqcjvmirhsbnyqtwszivxlipedchs']], [['hi    etrgf hhellomyfrienhellod'], ['de    apncb ddahhkiubneajdahhkz'], ['lm    ixvkj llippsqcjvmirlippsh']], [['hhellomyfrienhellod'], ['ddahhkiubneajdahhkz'], ['llippsqcjvmirlippsh']], [['abcdefghijfklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefbghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnjopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['hellomyfriendoxjumpsoverthelazydo'], ['dahhkiubneajzktfqilokranpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszivxlipedchs']], [['thequickbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['heti    get a gf hellomyfrieonhellod'], ['dape    cap w cb dahhkiubneakjdahhkz'], ['lixm    kix e kj lippsqcjvmisrlippsh']], [['hi    et a gf hellomyfrienhellood'], ['de    ap w cb dahhkiubneajdahhkkz'], ['lm    ix e kj lippsqcjvmirlippssh']], [['yywx'], ['uust'], ['ccab']], [['ythequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['updamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['helowythequickbrownfhiorld'], ['dahksupdamqeygxnksjbdeknhz'], ['lipsacxliuymgofvsarjlmsvph']], [['wxxyy'], ['sttuu'], ['abbcc']], [['hi    let a gf hellomyfriend'], ['de    hap w cb dahhkiubneajz'], ['lm    pix e kj lippsqcjvmirh']], [['yzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdddddddddddddddddddddddd']], [['hhellomyfrinhellod'], ['ddahhkiubnejdahhkz'], ['llippsqcjvmrlippsh']], [['hellomyfrienhellodrownfoxjumpsoverthelazydojumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwszivxlipedchs']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogod'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckz'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchsksh']], [['hi    et a gf hellomyfrie'], ['de    ap w cb dahhkiubnea'], ['lm    ix e kj lippsqcjvmi']], [['ythequickbrownfhi'], ['updamqeygxnksjbde'], ['cxliuymgofvsarjlm']], [['heti    get a gf hellomyfrieonhello d'], ['dape    cap w cb dahhkiubneakjdahhk z'], ['lixm    kix e kj lippsqcjvmisrlipps h']], [['gf'], ['cb'], ['kj']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsibcc']], [['heti    get a mgf hellomyfrienhellod'], ['dape    cap w icb dahhkiubneajdahhkz'], ['lixm    kix e qkj lippsqcjvmirlippsh']], [['hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['eetrgft'], ['aapncbp'], ['iixvkjx']], [['eetrgf'], ['aapncb'], ['iixvkj']], [['hellomyferienhellod'], ['dahhkiubaneajdahhkz'], ['lippsqcjivmirlippsh']], [['b&helothequickbrownfoxjumpsgetoverthelazydocd&^'], ['x&dahkpdamqeygxnksjbktfqilocapkranpdahwvuzkyz&^'], ['f&lipsxliuymgofvsarjsbnyqtwkixszivxlipedchsgh&^']], [['hi    et a gf helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellod'], ['de    ap w cb dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['hi    et a gf hellomyfrienheod'], ['de    ap w cb dahhkiubneajdakz'], ['lm    ix e kj lippsqcjvmirlish']], [['yywxxy'], ['uusttu'], ['ccabbc']], [['helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['ohhellomyfrienhellod'], ['kddahhkiubneajdahhkz'], ['sllippsqcjvmirlippsh']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupmpsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytqtwszivxlipedchsibcc']], [['a'], ['w'], ['e']], [['hello heloworlthequickbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['dahhk dahksknhpdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['lipps lipsasvpxliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['ohhellomyfriend'], ['kddahhkiubneajz'], ['sllippsqcjvmirh']], [['hellomyfrienheod'], ['dahhkiubneajdakz'], ['lippsqcjvmirlish']], [['wolrld'], ['skhnhz'], ['aspvph']], [['hi    et a gf helloetmthelquickbrownfoxjumpsoverthelazydoyfrienhellod'], ['de    ap w cb dahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['heloworlthequickbheti'], ['dahksknhpdamqeygxdape'], ['lipsasvpxliuymgoflixm']], [['ergft'], ['ancbp'], ['ivkjx']], [['hel'], ['dah'], ['lip']], [['tlet'], ['phap'], ['xpix']], [['hi    letheti    get a gf hellomyfrieonhello df hellomyfriend'], ['de    hapdape    cap w cb dahhkiubneakjdahhk zb dahhkiubneajz'], ['lm    pixlixm    kix e kj lippsqcjvmisrlipps hj lippsqcjvmirh']], [['abcdefghijfklmnopeetrgftqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefbghijklaapncbpmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnjopqrstiixvkjxuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['hi    et a rgf hellomyfrienhelb&cd&^lod'], ['de    ap w ncb dahhkiubneajdahx&yz&^hkz'], ['lm    ix e vkj lippsqcjvmirlipf&gh&^psh']], [['hellomyfrienhelb&cd&^lod'], ['dahhkiubneajdahx&yz&^hkz'], ['lippsqcjvmirlipf&gh&^psh']], [['helowythehquickbrownfhhiorld'], ['dahksupdadmqeygxnksjbddeknhz'], ['lipsacxliluymgofvsarjllmsvph']], [['ohhelyfrienhellod'], ['kddahubneajdahhkz'], ['sllipcjvmirlippsh']], [['hi    ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de    ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['bythequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo&cd&d^'], ['xupdamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk&yz&z^'], ['fcxliuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs&gh&h^']], [['hellomyfrienhellod'], ['dahhkiubneajdahhkz'], ['lippsqcjvmirlippsh']], [['hi    et a ohhellomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['eeetrgft'], ['aaapncbp'], ['iiixvkjx']], [['hellomyfriendoxjumpsovelrthelazydo'], ['dahhkiubneajzktfqilokrahnpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszipvxlipedchs']], [['hellomyfrienhellood'], ['dahhkiubneajdahhkkz'], ['lippsqcjvmirlippssh']], [['ythequickbrownfoxthequickbheti'], ['updamqeygxnksjbktpdamqeygxdape'], ['cxliuymgofvsarjsbxliuymgoflixm']], [['hellomyfrietrgf'], ['dahhkiubneapncb'], ['lippsqcjvmixvkj']], [['hellomyfrieonhello'], ['dahhkiubneakjdahhk'], ['lippsqcjvmisrlipps']], [['ehel'], ['adah'], ['ilip']], [['helflomyfrietrgf'], ['dahbhkiubneapncb'], ['lipjpsqcjvmixvkj']], [['hhellyomyfrienhellod'], ['ddahhukiubneajdahhkz'], ['llippcsqcjvmirlippsh']], [['helloetmthelquickbrownfoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['ythehelloetmthelquickbrownfoxjumpsoverthelazydoyienhellodnfhi'], ['updadahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkueajdahhkzjbde'], ['cxlilippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscmirlippshrjlm']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsovierthi'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokreanpde'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszmivxlm']], [['heti    get a gfrieonhello d'], ['dape    cap w cbneakjdahhk z'], ['lixm    kix e kjvmisrlipps h']], [['eeet'], ['aaap'], ['iiix']], [['hi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellod'], ['de    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippsh']], [['hi    et ehia rgf hellomyfrienhellod'], ['de    ap adew ncb dahhkiubneajdahhkz'], ['lm    ix ilme vkj lippsqcjvmirlippsh']], [['let'], ['hap'], ['pix']], [['hellomyfriendoxjumpsovelrathelazydo'], ['dahhkiubneajzktfqilokrahnwpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszipvexlipedchs']], [['hi    et a gf helloetmyfrienhellothequickbhetid'], ['de    ap w cb dahhkapiubneajdahhkpdamqeygxdapez'], ['lm    ix e kj lippsixqcjvmirlippsxliuymgoflixmh']], [['heti    get a mgf hehi    et ehia rgf hellomyfrienhellodllomyfrienhellod'], ['dape    cap w icb dade    ap adew ncb dahhkiubneajdahhkzhhkiubneajdahhkz'], ['lixm    kix e qkj lilm    ix ilme vkj lippsqcjvmirlippshppsqcjvmirlippsh']], [['helloomyfrienheod'], ['dahhkkiubneajdakz'], ['lippssqcjvmirlish']], [['hi   helowythehquickbrownfhhiorld ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de   dahksupdadmqeygxnksjbddeknhz ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm   lipsacxliluymgofvsarjllmsvph ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['hello heloworlthequickbheti    get a gf hellomyfrienhellodrownfoxjumpsothequickbhetiverthelazydo'], ['dahhk dahksknhpdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokpdamqeygxdaperanpdahwvuzk'], ['lipps lipsasvpxliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwsxliuymgoflixmzivxlipedchs']], [['abcdefghijklmnopqrstuvwxyzythequickbrownfoxjumpsoveletthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqilokrahappdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqtwszipixxlipedchs']], [['d'], ['z'], ['h']], [['hi    et a ohhelolomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w kddahkhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e sllipspsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['hellomyfrienhellodllomyfrienhellod'], ['dahhkiubneajdahhkzhhkiubneajdahhkz'], ['lippsqcjvmirlippshppsqcjvmirlippsh']], [['hhelothequickbrownfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksjbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsarjsbyqtwsziovxlipedchs']], [['heti    get a mgf hehi   e et ehia rgf hellomyfrienhellodllomyfrhoienhellod'], ['dape    cap w icb dade   a ap adew ncb dahhkiubneajdahhkzhhkiubndkeajdahhkz'], ['lixm    kix e qkj lilm   i ix ilme vkj lippsqcjvmirlippshppsqcjvlsmirlippsh']], [['helll'], ['dahhh'], ['lippp']], [['helothequickbrownfoxjumpsgetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqilocapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkixszilvxlipedchs']], [['hellthi'], ['dahhpde'], ['lippxlm']], [['hellomyfrrienhelb&cd&^lod'], ['dahhkiubnneajdahx&yz&^hkz'], ['lippsqcjvvmirlipf&gh&^psh']], [['yzzzzzzzzzzzzzzzzzzzzzzzzhel'], ['uvvvvvvvvvvvvvvvvvvvvvvvvdah'], ['cddddddddddddddddddddddddlip']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmirlippsh']], [['hellomyfrieendoxjumpsovelrthelazydo'], ['dahhkiubneaajzktfqilokrahnpdahwvuzk'], ['lippsqcjvmiirhsbnyqtwszipvxlipedchs']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogodoworld'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhz'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchskshsasvph']], [['ythequickbrownfhi    et a gf hellomyfriendoxjumpsojverthelazydo'], ['updamqeygxnksjbde    ap w cb dahhkiubneajzktfqilokfranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lippsqcjvmirhsbnyqtwsnzivxlipedchs']], [['hellomyfrienhellodllomyfrhoienhellod'], ['dahhkiubneajdahhkzhhkiubndkeajdahhkz'], ['lippsqcjvmirlippshppsqcjvlsmirlippsh']], [['woolrld'], ['skkhnhz'], ['asspvph']], [['bcd'], ['xyz'], ['fgh']], [['hellomyfergetienhellod'], ['dahhkiubancapeajdahhkz'], ['lippsqcjivkixmirlippsh']], [['bcdhellomyfrienhelb&cd&^lod'], ['xyzdahhkiubneajdahx&yz&^hkz'], ['fghlippsqcjvmirlipf&gh&^psh']], [['helothequickbrowonfoxumpsovekrthelazydo'], ['dahkpdamqeygxnkskjbktqilokragnpdahwvuzk'], ['lipsxliuymgofvsasrjsbyqtwsziovxlipedchs']], [['hhellomyfriod'], ['ddahhkiubnekz'], ['llippsqcjvmsh']], [['mgf'], ['icb'], ['qkj']], [['etrf'], ['apnb'], ['ixvj']], [['helhi'], ['dahde'], ['liplm']], [['bcd&%'], ['xyz&%'], ['fgh&%']], [['hhi    et a ohhellomyfrienhellodrgf hellomyfrienhellodellomyfrienhellood'], ['dde    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkzahhkiubneajdahhkkz'], ['llm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippshippsqcjvmirlippssh']], [['e'], ['a'], ['i']], [['hi    et a rgf hellomyfrienhelb&cd&^llod'], ['de    ap w ncb dahhkiubneajdahx&yz&^hhkz'], ['lm    ix e vkj lippsqcjvmirlipf&gh&^ppsh']], [['bcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lod'], ['xyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkz'], ['fghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^psh']], [['wwxy'], ['sstu'], ['aabc']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoi    t a gf hellomyfrieonhello d'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzke    p w cb dahhkiubneakjdahhk z'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsm    x e kj lippsqcjvmisrlipps h']], [['hlelll'], ['dhahhh'], ['lpippp']], [['eheel'], ['adaah'], ['iliip']], [['heti    get a gfrieonhello helothequickbrownfoxumpsovekrthelazydod'], ['dape    cap w cbneakjdahhk dahkpdamqeygxnksjbktqilokragnpdahwvuzkz'], ['lixm    kix e kjvmisrlipps lipsxliuymgofvsarjsbyqtwsziovxlipedchsh']], [['heolo'], ['dakhk'], ['lisps']], [['ehelhellomyfrienhelb&cd&^lod'], ['adahdahhkiubneajdahx&yz&^hkz'], ['iliplippsqcjvmirlipf&gh&^psh']], [['helloetmyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthigfthequickbhetid'], ['dahhkapiubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdecbpdamqeygxdapez'], ['lippsixqcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmkjxliuymgoflixmh']], [['ehelloetmyfrthirgft'], ['adahhkapiubnpdencbp'], ['ilippsixqcjvxlmvkjx']], [['helbcd&^%lomyfriendoxhi    etrgf hhellomyfrienhellodjumpsoverthelawwxyzydo&cd&d^'], ['dahxyz&^%hkiubneajzktde    apncb ddahhkiubneajdahhkzfqilokranpdahwsstuvuzk&yz&z^'], ['lipfgh&^%psqcjvmirhsblm    ixvkj llippsqcjvmirlippshnyqtwszivxlipeaabcdchs&gh&h^']], [['ohhelolomyfrienhellodrgf'], ['kddahkhkiubneajdahhkzncb'], ['sllipspsqcjvmirlippshvkj']], [['thequickbrownfoxjumpsoverthi    et a gf helloetmyfrienhellodhelazydo'], ['pdamqeygxnksjbktfqilokranpde    ap w cb dahhkapiubneajdahhkzdahwvuzk'], ['xliuymgofvsarjsbnyqtwszivxlm    ix e kj lippsixqcjvmirlippshlipedchs']], [['helloetmyfrienhellothequickbhetid'], ['dahhkapiubneajdahhkpdamqeygxdapez'], ['lippsixqcjvmirlippsxliuymgoflixmh']], [['trhequickbrownfoxjumpsoverthelazydog'], ['pndamqeygxnksjbktfqilokranpdahwvuzkc'], ['xvliuymgofvsarjsbnyqtwszivxlipedchsk']], [['hellomyfriendoxjumpsojverthelazydo'], ['dahhkiubneajzktfqilokfranpdahwvuzk'], ['lippsqcjvmirhsbnyqtwsnzivxlipedchs']], [['eeetrgfthellomyfrienhellodrownfoxjumpsoverthelazydo'], ['aaapncbpdahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['iiixvkjxlippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['gfrieonhello'], ['cbneakjdahhk'], ['kjvmisrlipps']], [['heloo'], ['dahkk'], ['lipss']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrienhellodget'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneajdahhkzcap'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmirlippshkix']], [['helloomyfrienhhi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellodeod'], ['dahhkkiubneajdde    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkzakz'], ['lippssqcjvmirllm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippshish']], [['ehellgft'], ['adahhcbp'], ['ilippkjx']], [['hehi    et a ohhelolomyfrienhellodrgf hellomyfrienhellodlflomyfrietrgf'], ['dade    ap w kddahkhkiubneajdahhkzncb dahhkiubneajdahhkzhbhkiubneapncb'], ['lilm    ix e sllipspsqcjvmirlippshvkj lippsqcjvmirlippshpjpsqcjvmixvkj']], [['hello wlorld'], ['dahhk shknhz'], ['lipps apsvph']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodhelazydoexyy'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzdahwvuzkatuu'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshlipedchsibcc']], [['abcdefghijklmnopqrsquickbrownfoxjumpsovferthelazydo'], ['wxyzabcdefghijklmnomqeygxnksjbktfqilokrbanpdahwvuzk'], ['efghijklmnopqrstuvwuymgofvsarjsbnyqtwszjivxlipedchs']], [['helloetmyfrienhellod'], ['dahhkapiubneajdahhkz'], ['lippsixqcjvmirlippsh']], [['hi    helotheqolod'], ['de    dahkpdamkhkz'], ['lm    lipsxliuspsh']], [['wxabcdefghijklmoxjumpsoverthelazydoexyy'], ['stwxyzabcdefghiktfqilokranpdahwvuzkatuu'], ['abefghijklmnopqsbnyqtwszivxlipedchsibcc']], [['thequickbrownfoxjumpsovertheazydo'], ['pdamqeygxnksjbktfqilokranpdawvuzk'], ['xliuymgofvsarjsbnyqtwszivxliedchs']], [['hi    et ehia rgf hfrienhehellomyfrienhellodrownfoxjumpsoverthelazydojumpsoverthelazydollod'], ['de    ap adew ncb dbneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilokranpdahwvuzkhhkz'], ['lm    ix ilme vkj ljvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwszivxlipedchsppsh']], [['abcdefghijfklmnopeetrgftqazydo'], ['wxyzabcdefbghijklaapncbpmwvuzk'], ['efghijklmnjopqrstiixvkjxuedchs']], [['helothequickbrownfonxjumpsgetoverthelazydo'], ['dahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzk'], ['lipsxliuymgofvsarjsrbnyqtwkixszivxlipedchs']], [['hellomyfrie'], ['dahhkiubnea'], ['lippsqcjvmi']], [['eehia'], ['aadew'], ['iilme']], [['bcohhellomyfrienhellodd'], ['xykddahhkiubneajdahhkzz'], ['fgsllippsqcjvmirlippshh']], [['helbcdhhellyomyfrienhellod&^%lomyfriendoxjumpsoverthelazydo&cd&d^'], ['dahxyzddahhukiubneajdahhkz&^%hkiubneajzktfqilokranpdahwvuzk&yz&z^'], ['lipfghllippcsqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxlipedchs&gh&h^']], [['hellomyfergetienhelllod'], ['dahhkiubancapeajdahhhkz'], ['lippsqcjivkixmirlipppsh']], [['helbcd&^%lomyfriendoxhihhello'], ['dahxyz&^%hkiubneajzktdeddahhk'], ['lipfgh&^%psqcjvmirhsblmllipps']], [['aa'], ['ww'], ['ee']], [['hi    ehi    et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de    ade    ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupompsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlkilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytsqtwszivxlipedchsibcc']], [['hello heti    get a gf hellomyfrieonhello dd'], ['dahhk dape    cap w cb dahhkiubneakjdahhk zz'], ['lipps lixm    kix e kj lippsqcjvmisrlipps hh']], [['helothequickbrownfoxjuhielazydo'], ['dahkpdamqeygxnksjbktfqdeahwvuzk'], ['lipsxliuymgofvsarjsbnylmipedchs']], [['hello heti    get a gf hellomyfheti    get a mgf hellomyfrienhellodo dd'], ['dahhk dape    cap w cb dahhkiubdape    cap w icb dahhkiubneajdahhkzk zz'], ['lipps lixm    kix e kj lippsqcjlixm    kix e qkj lippsqcjvmirlippshs hh']], [['hello helowhellomyfrrienhelb&cd&^lodorld'], ['dahhk dahksdahhkiubnneajdahx&yz&^hkzknhz'], ['lipps lipsalippsqcjvvmirlipf&gh&^pshsvph']], [['yzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cddddddddddddddiliipddddddddddd']], [['bcohhellomyfrieythequickbrownfoxthequickbhetinhellodd'], ['xykddahhkiubneaupdamqeygxnksjbktpdamqeygxdapejdahhkzz'], ['fgsllippsqcjvmicxliuymgofvsarjsbxliuymgoflixmrlippshh']], [['hhellomyffrienhellod'], ['ddahhkiubbneajdahhkz'], ['llippsqcjjvmirlippsh']], [['ef'], ['ab'], ['ij']], [['helloetmyfrienhellodhequicokbrownfoxjumpsoverthelzazydogod'], ['dahhkapiubneajdahhkzdamqeykgxnksjbktfqilokranpdahvwvuzkckz'], ['lippsixqcjvmirlippshliuymgsofvsarjsbnyqtwszivxlipdedchsksh']], [['erghi'], ['ancde'], ['ivklm']], [['hhellomyfriengfrieonhellohellodnhellodlod'], ['ddahhkiubneajcbneakjdahhkdahhkzjdahhkzhkz'], ['llippsqcjvmirkjvmisrlippslippshrlippshpsh']], [['helothequickbrownfoxjumpsgmetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqilociapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkqixszilvxlipedchs']], [['hellb&helothequickbrownfoxjumpsgetoverthelazydocd&^frietrogf'], ['dahhx&dahkpdamqeygxnksjbktfqilocapkranpdahwvuzkyz&^bneapnkcb'], ['lippf&lipsxliuymgofvsarjsbnyqtwkixszivxlipedchsgh&^jvmixvskj']], [['hi    et a gfi hellomyfrie'], ['de    ap w cbe dahhkiubnea'], ['lm    ix e kjm lippsqcjvmi']], [['hello helowhellomyhellomyfrienhelb&cd&^lodfrrienhelb&cd&^lodorld'], ['dahhk dahksdahhkiudahhkiubneajdahx&yz&^hkzbnneajdahx&yz&^hkzknhz'], ['lipps lipsalippsqclippsqcjvmirlipf&gh&^pshjvvmirlipf&gh&^pshsvph']], [['hi    et a rgf hellomyfrietnhelb&cd&^lod'], ['de    ap w ncb dahhkiubneapjdahx&yz&^hkz'], ['lm    ix e vkj lippsqcjvmixrlipf&gh&^psh']], [['hi    et a gf lhgfrieonhelloellomyfrie'], ['de    ap w cb hdcbneakjdahhkahhkiubnea'], ['lm    ix e kj plkjvmisrlippsippsqcjvmi']], [['hellomyfrieonhellod'], ['dahhkiubneakjdahhkz'], ['lippsqcjvmisrlippsh']], [['helbcd&^hellomyfrienhellodellomyfrienhellood%lomyfriendoxhihhello'], ['dahxyz&^dahhkiubneajdahhkzahhkiubneajdahhkkz%hkiubneajzktdeddahhk'], ['lipfgh&^lippsqcjvmirlippshippsqcjvmirlippssh%psqcjvmirhsblmllipps']], [['get'], ['cap'], ['kix']], [['helhlellllthi'], ['dahdhahhhhpde'], ['liplpippppxlm']], [['helloetmyfrienhellohellomyfrienhellodrownfoxjumpsoverthelazydothequickbhetid'], ['dahhkapiubneajdahhkdahhkiubneajdahhkznksjbktfqilokranpdahwvuzkpdamqeygxdapez'], ['lippsixqcjvmirlippslippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsxliuymgoflixmh']], [['hi    et ehia rgf he llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['de    ap adew ncb da hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['lm    ix ilme vkj li ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['hi    ehi   l et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de    ade   h ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm    ilm   p ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['hbcd&^%eo'], ['dxyz&^%ak'], ['lfgh&^%is']], [['ohhelolomyfetrienhellrgf'], ['kddahkhkiubapneajdahhncb'], ['sllipspsqcjixvmirlippvkj']], [['thequicukbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqeyqgxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuymgyoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['helloetmyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthigbhetiid'], ['dahhkapiubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdecxdapeez'], ['lippsixqcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmkflixmmh']], [['hellomyfrrienhelb&cdlod'], ['dahhkiubnneajdahx&yzhkz'], ['lippsqcjvvmirlipf&ghpsh']], [['helowythequicckbrownfhihi    et a gf hellomyfriendorld'], ['dahksupdamqeyygxnksjbdede    ap w cb dahhkiubneajzknhz'], ['lipsacxliuymggofvsarjlmlm    ix e kj lippsqcjvmirhsvph']], [['abcdefghijklmnopqrstuvwxwxabcdefghijklmnopqrstuvwxyyzythequickbrhownfoxjumpsoverthelazydoe'], ['wxyzabcdefghijklmnopqrststwxyzabcdefghijklmnopqrstuuvupdamqeygxndksjbktfqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxyzababefghijklmnopqrstuvwxyzabccdcxliuymgofvlsarjsbnyqtwszivxlipedchsi']], [['efrgft'], ['abncbp'], ['ijvkjx']], [['ythequickbrownfoxjumpsoverthelazydoythequickbrownoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokranpdahwvuzkupdamqeygxnksjktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszivxlipedchscxliuymgofvsarsbnyqtwszivxlipedchs']], [['ehehif'], ['adadeb'], ['ililmj']], [['heheti    get a gf hellomyfrieonhellyodllomyfergetienhelllob&cd&^d'], ['dadape    cap w cb dahhkiubneakjdahhukzhhkiubancapeajdahhhkx&yz&^z'], ['lilixm    kix e kj lippsqcjvmisrlippcshppsqcjivkixmirlipppsf&gh&^h']], [['hi    et aheallomyfriendoxjumpsoverthelazydo gf helloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['de    ap wdawhhkiubneajzktfqilokranpdahwvuzk cb dahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix elieppsqcjvmirhsbnyqtwszivxlipedchs kj lippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['hi e   let a gf hellomyfriend'], ['de a   hap w cb dahhkiubneajz'], ['lm i   pix e kj lippsqcjvmirh']], [['hllelll'], ['dhhahhh'], ['lppippp']], [['hhellyomyfrielod'], ['ddahhukiubneahkz'], ['llippcsqcjvmipsh']], [['hello wbcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lodlorld'], ['dahhk sxyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkzhknhz'], ['lipps afghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^pshpsvph']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodlomyferienhellodt'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzhkiubaneajdahhkzp'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshpsqcjivmirlippshx']], [['hi    et ehia rgf hfrienhehellomyfrienhellodrownfoxjumpsoverthelazydojumpsthelazydollod'], ['de    ap adew ncb dbneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilopdahwvuzkhhkz'], ['lm    ix ilme vkj ljvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwxlipedchsppsh']], [['ft'], ['bp'], ['jx']], [['yzzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cdddddddddddddddiliipddddddddddd']], [['ythequichi'], ['updamqeyde'], ['cxliuymglm']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazeydog'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvauzkc'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedichsk']], [['aickbrownfoxjumpsoveletthelazydo'], ['weygxnksjbktfqilokrahappdahwvuzk'], ['emgofvsarjsbnyqtwszipixxlipedchs']], [['b&helothequickownfoxjumpsgetoverthelazydocd&^'], ['x&dahkpdamqeygksjbktfqilocapkranpdahwvuzkyz&^'], ['f&lipsxliuymgosarjsbnyqtwkixszivxlipedchsgh&^']], [['helothequickbrownfoxjumphellomyfergetienhelllodsoverthelazydo'], ['dahkpdamqeygxnksjbktfqildahhkiubancapeajdahhhkzokranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtlippsqcjivkixmirlipppshwszivxlipedchs']], [['df'], ['zb'], ['hj']], [['b&helothequickownfoxjumpsgetovcerthelazydocd&^'], ['x&dahkpdamqeygksjbktfqilocapkryanpdahwvuzkyz&^'], ['f&lipsxliuymgosarjsbnyqtwkixszgivxlipedchsgh&^']], [['hehi'], ['dade'], ['lilm']], [['hhelloetmyfrienhellodhelazydol'], ['ddahhkapiubneajdahhkzdahwvuzkh'], ['llippsixqcjvmirlippshlipedchsp']], [['hehi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellodlothequickbrownfoxumpsoverthelazydo'], ['dade    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkzhkpdamqeygxnksjbktqilokranpdahwvuzk'], ['lilm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippshpsxliuymgofvsarjsbyqtwszivxlipedchs']], [['ythequickbrownfoxjum'], ['updamqeygxnksjbktfqi'], ['cxliuymgofvsarjsbnyq']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodkbrownfhi'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzgxnksjbde'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshofvsarjlm']], [['helothequetovehrthelazydo'], ['dahkpdamqapkradnpdahwvuzk'], ['lipsxliuyixszilvxlipedchs']], [['hi   helowythehquickbrownfhhiorlde ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de   dahksupdadmqeygxnksjbddeknhza ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm   lipsacxliluymgofvsarjllmsvphi ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['hellomyfrreienhelb&cdlod'], ['dahhkiubnnaeajdahx&yzhkz'], ['lippsqcjvvimirlipf&ghpsh']], [['llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['hhelothequickbrowhelowythequicckbrownfhihinfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksdahksupdamqeyygxnksjbdedejbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsalipsacxliuymggofvsarjlmlmrjsbyqtwsziovxlipedchs']], [['thequickbheti'], ['pdamqeygxdape'], ['xliuymgoflixm']], [['heti    get a gf hellomyfrieonhelllo d'], ['dape    cap w cb dahhkiubneakjdahhhk z'], ['lixm    kix e kj lippsqcjvmisrlippps h']], [['fwwxy'], ['bsstu'], ['jaabc']], [['hhi    et a ohhellomyfrienhellodrgf hellomyfrienhellodellomyfrienhelloold'], ['dde    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkzahhkiubneajdahhkkhz'], ['llm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippshippsqcjvmirlippssph']], [['helhlellelltihi'], ['dahdhahhahhpede'], ['liplpippippxmlm']], [['bcohhellomyfyrienhellodd'], ['xykddahhkiubuneajdahhkzz'], ['fgsllippsqcjcvmirlippshh']], [['hhelllomyfriod'], ['ddahhhkiubnekz'], ['llipppsqcjvmsh']], [['hellomyfrienhellodrownfooxjumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbkktfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjssbnyqtwszivxlipedchs']], [['helloetmyfrienhellzodhequickbrownfoxjumpsoverthelazydogodoworld'], ['dahhkapiubneajdahhvkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhz'], ['lippsixqcjvmirlippdshliuymgofvsarjsbnyqtwszivxlipedchskshsasvph']], [['yzzzzzzzzzzzzzzeheelzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvadaahvvvvvvvvvvvv'], ['cddddddddddddddiliipdddddddddddd']], [['etrgf'], ['apncb'], ['ixvkj']], [['hi l   ehi   l et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de h   ade   h ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm p   ilm   p ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['yzhzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvdvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cdlddddddddddddddiliipddddddddddd']], [['ythequickbrownfoxjumpsovownoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokrksjktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszsarsbnyqtwszivxlipedchs']], [['yywahellomyfriendoxjumupsoverthelazydoxy'], ['uuswdahhkiubneajzktfqiqlokranpdahwvuzktu'], ['ccaelippsqcjvmirhsbnyqytwszivxlipedchsbc']], [['hhellyoomyfrielod'], ['ddahhukkiubneahkz'], ['llippcssqcjvmipsh']], [['bcohhellhomyfrienhellodd'], ['xykddahhdkiubneajdahhkzz'], ['fgsllipplsqcjvmirlippshh']], [['ehelothequickbrownfonxjumpsgetoverthelazydot'], ['adahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzkp'], ['ilipsxliuymgofvsarjsrbnyqtwkixszivxlipedchsx']], [['hlel'], ['dhah'], ['lpip']], [['helloetmyfrthi'], ['dahhkapiubnpde'], ['lippsixqcjvxlm']], [['hellomyfergetienfhelllod'], ['dahhkiubancapeajbdahhhkz'], ['lippsqcjivkixmirjlipppsh']], [['helowythequicckbrownfhihi    ethhelothequickbrownfoxumpsovekrthelazydo a gf hellomyfriendorld'], ['dahksupdamqeyygxnksjbdede    apddahkpdamqeygxnksjbktqilokragnpdahwvuzk w cb dahhkiubneajzknhz'], ['lipsacxliuymggofvsarjlmlm    ixllipsxliuymgofvsarjsbyqtwsziovxlipedchs e kj lippsqcjvmirhsvph']], [['ohhhelllellomyfrienhellod'], ['kdddahhhahhkiubneajdahhkz'], ['slllipppippsqcjvmirlippsh']], [['eff'], ['abb'], ['ijj']], [['h eti    get a mgf hellomyfrienhellod'], ['d ape    cap w icb dahhkiubneajdahhkz'], ['l ixm    kix e qkj lippsqcjvmirlippsh']], [['hellomyfrietnhelb&cd&^lod'], ['dahhkiubneapjdahx&yz&^hkz'], ['lippsqcjvmixrlipf&gh&^psh']], [['b&cdheythequickbrownfoxjumpshi'], ['x&yzdaupdamqeygxnksjbktfqilode'], ['f&ghlicxliuymgofvsarjsbnyqtwlm']], [['helhlomyfriend'], ['dahdhkiubneajz'], ['liplpsqcjvmirh']], [['hhelothequickbrowhelhowythequicckbrownfhihinfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksdahdksupdamqeyygxnksjbdedejbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsaliplsacxliuymggofvsarjlmlmrjsbyqtwsziovxlipedchs']], [['hi    et a rg f hellomyfrietnhelb&cd&^lod'], ['de    ap w nc b dahhkiubneapjdahx&yz&^hkz'], ['lm    ix e vk j lippsqcjvmixrlipf&gh&^psh']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsoverthelazydoexyyd'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpdahwvuzkatuuz'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxlipedchsibcch']], [['hi    et a helolomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w dahkhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e lipspsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['helolomyfrienhellorgf'], ['dahkhkiubneajdahhkncb'], ['lipspsqcjvmirlippsvkj']], [['heeloo'], ['daahkk'], ['liipss']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsovertyhelazydoexyyd'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpudahwvuzkatuuz'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxclipedchsibcch']], [['fhellfomyfrie'], ['bdahhbkiubnea'], ['jlippjsqcjvmi']], [['gget'], ['ccap'], ['kkix']], [['heelazydo'], ['daahwvuzk'], ['liipedchs']], [['eeetrwxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupompsoverthelazydoexyygft'], ['aaapnstwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlkilokranpdahwvuzkatuucbp'], ['iiixvabefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytsqtwszivxlipedchsibcckjx']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodsoverthelazydo'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzokranpdahwvuzk'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshwszivxlipedchs']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrieunhellodget'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneaqjdahhkzcap'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmiyrlippshkix']], [['ahellomyfriendoxjumupsoverthelazydo'], ['wdahhkiubneajzktfqiqlokranpdahwvuzk'], ['elippsqcjvmirhsbnyqytwszivxlipedchs']], [['helowythehquickbrownfhhiorlde'], ['dahksupdadmqeygxnksjbddeknhza'], ['lipsacxliluymgofvsarjllmsvphi']], [['ithi'], ['epde'], ['mxlm']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsovertyhelazydoexyyhellomyfrienhelb&cd&^loddeeetrgft'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpudahwvuzkatuudahhkiubneajdahx&yz&^hkzzaaapncbp'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxclipedchsibcclippsqcjvmirlipf&gh&^pshhiiixvkjx']], [['hellomyfrietrogf'], ['dahhkiubneapnkcb'], ['lippsqcjvmixvskj']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoi'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzke'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsm']], [['ythequickbrowunfoxthequickbheti'], ['updamqeygxnksqjbktpdamqeygxdape'], ['cxliuymgofvsayrjsbxliuymgoflixm']], [['bcohhellomyfyrienhellofdwxabcdefghijklmoxjumpsovertyhelazydoexyyd'], ['xykddahhkiubuneajdahhkbzstwxyzabcdefghiktfqilokranpudahwvuzkatuuz'], ['fgsllippsqcjcvmirlippsjhabefghijklmnopqsbnyqtwszivxclipedchsibcch']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelcazydoi    t a gf hellomyfrieonhello d'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahywvuzke    p w cb dahhkiubneakjdahhk z'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipgedchsm    x e kj lippsqcjvmisrlipps h']], [['hi    et ehia rgf he llomyfrihi    et a helolomyfrienhellodrgf hellomyfrienhellodverthelazyollod'], ['de    ap adew ncb da hhkiubnede    ap w dahkhkiubneajdahhkzncb dahhkiubneajdahhkzranpdahwvukhhkz'], ['lm    ix ilme vkj li ppsqcjvmlm    ix e lipspsqcjvmirlippshvkj lippsqcjvmirlippshzivxlipedcsppsh']], [['helhlellelltiihi'], ['dahdhahhahhpeede'], ['liplpippippxmmlm']], [['ohhhelllellomyfrienheellod'], ['kdddahhhahhkiubneajdaahhkz'], ['slllipppippsqcjvmirliippsh']], [['hhellyomyfrienyhello'], ['ddahhukiubneajudahhk'], ['llippcsqcjvmirclipps']], [['ohhhelllellomyfriabcdefghijfklmnopeetrgftqrstuvwxyzythequickbrhownfoxjumpsoverthelahzydoenhellod'], ['kdddahhhahhkiubnewxyzabcdefbghijklaapncbpmnopqrstuvupdamqeygxndksjbktfqilokranpdahwdvuzkajdahhkz'], ['slllipppippsqcjvmefghijklmnjopqrstiixvkjxuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipeldchsirlippsh']], [['hellomyfrienhellodlflomyfrietrgf'], ['dahhkiubneajdahhkzhbhkiubneapncb'], ['lippsqcjvmirlippshpjpsqcjvmixvkj']], [['helxloetmthequickbrowoxjumpsoverthelazydoyfrieunhellodget'], ['dahthkapipdamqeygxnksktfqilokranpdahwvuzkubneaqjdahhkzcap'], ['lipbpsixqxliuymgofvsasbnyqtwszivxlipedchscjvmiyrlippshkix']], [['helhlellelletiihi'], ['dahdhahhahhapeede'], ['liplpippippixmmlm']], [['abcdefghijklmnopqrsteuvwxwxabcdefghijklmnopqrstuvwxyyzythequickbrhownfoxjsumpsoverthelazydoe'], ['wxyzabcdefghijklmnopaqrststwxyzabcdefghijklmnopqrstuuvupdamqeygxndksjbktfoqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxiyzababefghijklmnopqrstuvwxyzabccdcxliuymgofvlsarjsbnwyqtwszivxlipedchsi']], [['hhellomyfriengrieonhellohellodnhellodlod'], ['ddahhkiubneajcneakjdahhkdahhkzjdahhkzhkz'], ['llippsqcjvmirkvmisrlippslippshrlippshpsh']], [['hhellyomyfriehello'], ['ddahhukiubneadahhk'], ['llippcsqcjvmilipps']], [['bcd&hellomoyfrienhellodrownfoxjumpsoverthhhellomyfriengfrieonhellohellodelazydo%'], ['xyz&dahhkikubneajdahhkznksjbktfqilokranpdddahhkiubneajcbneakjdahhkdahhkzahwvuzk%'], ['fgh&lippsqscjvmirlippshvsarjsbnyqtwszivxlllippsqcjvmirkjvmisrlippslippshipedchs%']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydooexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchssibcc']], [['hi    elt a rgf hellomyfrienhellod'], ['de    ahp w ncb dahhkiubneajdahhkz'], ['lm    ipx e vkj lippsqcjvmirlippsh']], [['helflomyfriietrgf'], ['dahbhkiubneeapncb'], ['lipjpsqcjvmmixvkj']], [['ehiabcdefghijklmnopqrwnfxjumpsoveletthelazydoa'], ['adewxyzabcdefghijklmnsjbtfqilokrahappdahwvuzkw'], ['ilmefghijklmnopqrstuvarjbnyqtwszipixxlipedchse']], [['healloetmyfrienhellodhequickbrownfoxjumpsoverthelazeydog'], ['dawhhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvauzkc'], ['lieppsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedichsk']], [['lhgfrieonhelloellomyfrie'], ['hdcbneakjdahhkahhkiubnea'], ['plkjvmisrlippsippsqcjvmi']], [['hhellylomyfrienhellod'], ['ddahhuhkiubneajdahhkz'], ['llippcpsqcjvmirlippsh']], [['hfsoverthigfthequickbhetid'], ['dbokranpdecbpdamqeygxdapez'], ['ljwszivxlmkjxliuymgoflixmh']], [['yywbcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lodlorldwxy'], ['uusxyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkzhknhzstu'], ['ccafghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^pshpsvphabc']], [['bcdhellomyfrieonhellod&^%'], ['xyzdahhkiubneakjdahhkz&^%'], ['fghlippsqcjvmisrlippsh&^%']], [['aheallomyfriendoxjumpsoverthelazydo'], ['wdawhhkiubneajzktfqilokranpdahwvuzk'], ['elieppsqcjvmirhsbnyqtwszivxlipedchs']], [['aheallomyfriendoxjumpsoverthwxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsovierthielazydo'], ['wdawhhkiubneajzktfqilokranpdstwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokreanpdeahwvuzk'], ['elieppsqcjvmirhsbnyqtwszivxlabefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszmivxlmipedchs']], [['hhellohelloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogodoworldmyfrienhellodeod'], ['ddahhkdahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhziubneajdahhkzakz'], ['llippslippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchskshsasvphqcjvmirlippshish']], [['eflie'], ['abhea'], ['ijpmi']], [['ohhelyfrienhellood'], ['kddahubneajdahhkkz'], ['sllipcjvmirlippssh']], [['ehellioetmhi'], ['adahhekapide'], ['ilippmsixqlm']], [['ahellomyfriendoxjumupsoverthelaefzydo'], ['wdahhkiubneajzktfqiqlokranpdahwabvuzk'], ['elippsqcjvmirhsbnyqytwszivxlipeijdchs']], [['hellomyfrieonhenllod'], ['dahhkiubneakjdajhhkz'], ['lippsqcjvmisrlirppsh']], [['hlelloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['dhahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lpippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['hi    helothelbcd&^%lomyfriendoxhihhelloheqolod'], ['de    dahkpdahxyz&^%hkiubneajzktdeddahhkdamkhkz'], ['lm    lipsxlipfgh&^%psqcjvmirhsblmllippsliuspsh']], [['helloomyfrienhhi    ehi    et a gf hellomyfrietrogf hhellohehetimyfrienhellodeod'], ['dahhkkiubneajdde    ade    ap w cb dahhkiubneapnkcb ddahhkdadapeiubneajdahhkzakz'], ['lippssqcjvmirllm    ilm    ix e kj lippsqcjvmixvskj llippslilixmqcjvmirlippshish']], [['hl'], ['dh'], ['lp']], [['helhii'], ['dahdee'], ['liplmm']], [['hellomyfriendoxjumpsojvertaheallomyfriendoxjumpsoverthelazydoazydo'], ['dahhkiubneajzktfqilokfranpwdawhhkiubneajzktfqilokranpdahwvuzkwvuzk'], ['lippsqcjvmirhsbnyqtwsnzivxelieppsqcjvmirhsbnyqtwszivxlipedchsedchs']], [['hellomyfrienhellodverthelazyollod'], ['dahhkiubneajdahhkzranpdahwvukhhkz'], ['lippsqcjvmirlippshzivxlipedcsppsh']], [['eheihif'], ['adaedeb'], ['ilimlmj']], [['helothequickbrownfoxjumtpsgmetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqiplociapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqxtwkqixszilvxlipedchs']], [['ythequickbrownfoxthuickbheti'], ['updamqeygxnksjbktpdqeygxdape'], ['cxliuymgofvsarjsbxlymgoflixm']], [['hi  df  et ehia rgf he llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['de  zb  ap adew ncb da hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['lm  hj  ix ilme vkj li ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['fhellfomyfrieheeloo'], ['bdahhbkiubneadaahkk'], ['jlippjsqcjvmiliipss']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodhelazydoexyyzzzzzzzzzzzzzzzzzzet'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzdahwvuzkatuuvvvvvvvvvvvvvvvvvvap'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshlipedchsibccddddddddddddddddddix']], [['ohhellomyfrienheellod'], ['kddahhkiubneajdaahhkz'], ['sllippsqcjvmirliippsh']], [['iheheti'], ['edadape'], ['mlilixm']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodlomyferienhellodtgf'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzhkiubaneajdahhkzpcb'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshpsqcjivmirlippshxkj']], [['hello heti    get a gf hellomyllo dd'], ['dahhk dape    cap w cb dahhkiuhhk zz'], ['lipps lixm    kix e kj lippsqcpps hh']], [['f'], ['b'], ['j']], [['eehhi    et a gf helloetmthelquickbrownfoxjumpsohverthelazydoyfrienhellodia'], ['aadde    ap w cb dahhkapipdahmqeygxnksjbktfqilokdranpdahwvuzkubneajdahhkzew'], ['iillm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwslzivxlipedchscjvmirlippshme']], [['heti    get a mgf hellomyfrienhellodhl'], ['dape    cap w icb dahhkiubneajdahhkzdh'], ['lixm    kix e qkj lippsqcjvmirlippshlp']], [['thequhelothequickbrownfoxjumpsgetovehrthelazydoyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqdahkpdamqeygxnksjbktfqilocapkradnpdahwvuzkubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuylipsxliuymgofvsarjsbnyqtwkixszilvxlipedchscjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['helolomyfrienhhelloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodellorgf'], ['dahkhkiubneajddahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzahhkncb'], ['lipspsqcjvmirllippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshippsvkj']], [['hellomyferienhelhabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoiod'], ['dahhkiubaneajdahdwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkekz'], ['lippsqcjivmirliplefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsmsh']], [['heeoloo'], ['daakhkk'], ['liispss']], [['hellomyfrienhellodxjumpsoverthelazydo'], ['dahhkiubneajdahhkztfqilokranpdahwvuzk'], ['lippsqcjvmirlippshbnyqtwszivxlipedchs']], [['aickbrownfoxjhumpsoveletthelazydo'], ['weygxnksjbktfdqilokrahappdahwvuzk'], ['emgofvsarjsbnlyqtwszipixxlipedchs']], [['hhellomyfriengfrieonhellohellodoverthelazydoythequickbrownoxjumpsoverthelazydollomyfrietrgf'], ['ddahhkiubneajcbneakjdahhkdahhkzkranpdahwvuzkupdamqeygxnksjktfqilokranpdahwvuzkhhkiubneapncb'], ['llippsqcjvmirkjvmisrlippslippshszivxlipedchscxliuymgofvsarsbnyqtwszivxlipedchsppsqcjvmixvkj']], [['helbcdhhellyomyfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhukiubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['hi    et a gf helllomyfrienhellood'], ['de    ap w cb dahhhkiubneajdahhkkz'], ['lm    ix e kj lipppsqcjvmirlippssh']], [['hellomyfrienhellodrownfoxjumpsothequickbhetiverthelazydohi'], ['dahhkiubneajdahhkznksjbktfqilokpdamqeygxdaperanpdahwvuzkde'], ['lippsqcjvmirlippshvsarjsbnyqtwsxliuymgoflixmzivxlipedchslm']], [['hhelloetmyhi    et a gf hellomyfriendfrienhellodhelazydol'], ['ddahhkapiude    ap w cb dahhkiubneajzbneajdahhkzdahwvuzkh'], ['llippsixqclm    ix e kj lippsqcjvmirhjvmirlippshlipedchsp']], [['wlorld'], ['shknhz'], ['apsvph']], [['helolnhello dd'], ['dahkhjdahhk zz'], ['lipsprlipps hh']], [['ythbequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['updxamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['cxlfiuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['hellomdyfriendoxjumpsojverthelazydo'], ['dahhkizubneajzktfqilokfranpdahwvuzk'], ['lippsqhcjvmirhsbnyqtwsnzivxlipedchs']], [['helloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['helbcdhhellyom&yfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhuki&ubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsq&cjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['helbcdhhellyofmyfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhukbiubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsjqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['llomyfrienhehellomyfrienhellooxjumpsoverthelazyollod'], ['hhkiubneajdadahhkiubneajdahhkktfqilokranpdahwvukhhkz'], ['ppsqcjvmirlilippsqcjvmirlippssbnyqtwszivxlipedcsppsh']], [['yzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthi'], ['uvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpde'], ['cdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlm']], [['helolnhelnlo'], ['dahkhjdahjhk'], ['lipsprliprps']], [['wxxyyworld'], ['sttuusknhz'], ['abbccasvph']], [['bcohhellomyfhi'], ['xykddahhkiubde'], ['fgsllippsqcjlm']], [['heloethequickbrownfoxjumpsgmetovehrthelazydo'], ['dahkapdamqeygxnksjbktfqilociapkradnpdahwvuzk'], ['lipsixliuymgofvsarjsbnyqtwkqixszilvxlipedchs']], [['yzhzzzzzzzzzzzzzzeyheelzzzzzzzzzzz'], ['uvdvvvvvvvvvvvvvvaudaahvvvvvvvvvvv'], ['cdlddddddddddddddicliipddddddddddd']], [['hi    et a gf helloetmthelquickbrownfoxjumpsoverthnelazydoyfrienhellod'], ['de    ap w cb dahhkapipdahmqeygxnksjbktfqilokranpdjahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwszivxlripedchscjvmirlippsh']], [['helloetmpsoverthelazydoyfrienhellodfhelllod'], ['dahhkapilokranpdahwvuzkubneajdahhkzbdahhhkz'], ['lippsixqtwszivxlipedchscjvmirlippshjlipppsh']], [['hellll'], ['dahhhh'], ['lipppp']], [['helhlelthi'], ['dahdhahpde'], ['liplpipxlm']], [['ohhellomyfrieod'], ['kddahhkiubneakz'], ['sllippsqcjvmish']], [['helothelbcd&^%lomyfriendoxhihhelloheqolod'], ['dahkpdahxyz&^%hkiubneajzktdeddahhkdamkhkz'], ['lipsxlipfgh&^%psqcjvmirhsblmllippsliuspsh']], [['ohhelllomyfriend'], ['kddahhhkiubneajz'], ['sllipppsqcjvmirh']], [['hellhi'], ['dahhde'], ['lipplm']], [['thelothequickbrownfonxjumpsgetoverthelazydo'], ['pdahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzk'], ['xlipsxliuymgofvsarjsrbnyqtwkixszivxlipedchs']], [['hhhellyomyfrienhellodl'], ['dddahhukiubneajdahhkzh'], ['lllippcsqcjvmirlippshp']], [['ohhelolomyfrienhellodgf'], ['kddahkhkiubneajdahhkzcb'], ['sllipspsqcjvmirlippshkj']], [['hhellomyfriengfrieonhelheti    get a gf hellomyfrieonhello dlohellod'], ['ddahhkiubneajcbneakjdahdape    cap w cb dahhkiubneakjdahhk zhkdahhkz'], ['llippsqcjvmirkjvmisrliplixm    kix e kj lippsqcjvmisrlipps hpslippsh']], [['hhelyfrienhellod'], ['ddahubneajdahhkz'], ['llipcjvmirlippsh']], [['b&cc^'], ['x&yy^'], ['f&gg^']], [['heti    get a gfrieonhello helothequickbrownfoxumpsovekrthelazydodehel'], ['dape    cap w cbneakjdahhk dahkpdamqeygxnksjbktqilokragnpdahwvuzkzadah'], ['lixm    kix e kjvmisrlipps lipsxliuymgofvsarjsbyqtwsziovxlipedchshilip']], [['hello helowhellomyfrrienhelhb&cd&^lodorld'], ['dahhk dahksdahhkiubnneajdahdx&yz&^hkzknhz'], ['lipps lipsalippsqcjvvmirliplf&gh&^pshsvph']], [['bchllomyfhi'], ['xydhhkiubde'], ['fglppsqcjlm']], [['hhellomyfrienhellodehi'], ['ddahhkiubneajdahhkzade'], ['llippsqcjvmirlippshilm']], [['helothequickbrownfoxumpsovekrthelazydodehel'], ['dahkpdamqeygxnksjbktqilokragnpdahwvuzkzadah'], ['lipsxliuymgofvsarjsbyqtwsziovxlipedchshilip']], [['gehelloetmpsoverthelazydoyfrienhellodfhelllod'], ['cadahhkapilokranpdahwvuzkubneajdahhkzbdahhhkz'], ['kilippsixqtwszivxlipedchscjvmirlippshjlipppsh']], [['hellomyfrienhelleodrownfoxjumpabcdefghijklmnopqrstuvwxyzythequickbrownfoxjumhello'], ['dahhkiubneajdahhakznksjbktfqilwxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqidahhk'], ['lippsqcjvmirlippishvsarjsbnyqtefghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqlipps']], [['heti    get a gfrieonhello helothequicikbrownfoxumpsovekrthelazydodehel'], ['dape    cap w cbneakjdahhk dahkpdamqeyegxnksjbktqilokragnpdahwvuzkzadah'], ['lixm    kix e kjvmisrlipps lipsxliuymgmofvsarjsbyqtwsziovxlipedchshilip']], [['hod'], ['dkz'], ['lsh']], [['hhelloehellomyfrieonhelllotmyhi    et a gf hellomyfriendfrienhellodhelazydol'], ['ddahhkadahhkiubneakjdahhhkpiude    ap w cb dahhkiubneajzbneajdahhkzdahwvuzkh'], ['llippsilippsqcjvmisrlipppsxqclm    ix e kj lippsqcjvmirhjvmirlippshlipedchsp']], [['hhellomyfriengfrieonhelheti'], ['ddahhkiubneajcbneakjdahdape'], ['llippsqcjvmirkjvmisrliplixm']], [['ehabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelcazydoit'], ['adwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahywvuzkep'], ['ilefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipgedchsmx']], [['ehelloetyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthiet'], ['adahhkapubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdeap'], ['ilippsixcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmix']], [['%bcd&^%'], ['%xyz&^%'], ['%fgh&^%']], [['thequickbromwnfoxjumpsoverthelazydog'], ['pdamqeygxnkisjbktfqilokranpdahwvuzkc'], ['xliuymgofvsqarjsbnyqtwszivxlipedchsk']], [['theqcuickbrownfoxjumpsoverthelazydog'], ['pdamyqeygxnksjbktfqilokranpdahwvuzkc'], ['xliugymgofvsarjsbnyqtwszivxlipedchsk']], [['hi    et a gf helbcd&^%lomyfriend'], ['de    ap w cb dahxyz&^%hkiubneajz'], ['lm    ix e kj lipfgh&^%psqcjvmirh']], [['yzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvv'], ['cdddddddddddddddd']], [['hellogfa world'], ['dahhkcbw sknhz'], ['lippskje asvph']], [['hi    et a gf helbcd&^%lomy friend'], ['de    ap w cb dahxyz&^%hkiu bneajz'], ['lm    ix e kj lipfgh&^%psqc jvmirh']], [['bcdd&^%'], ['xyzz&^%'], ['fghh&^%']], [['%bcdhello&^%'], ['%xyzdahhk&^%'], ['%fghlipps&^%']], [['thequicerthelazydog'], ['pdamqeyanpdahwvuzkc'], ['xliuymgivxlipedchsk']], [['%bcdhelwxylo&^%'], ['%xyzdahstuhk&^%'], ['%fghlipabcps&^%']], [['ehello'], ['adahhk'], ['ilipps']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcddddddddddddddddddddddddddddddddd']], [['hellogfa worl d'], ['dahhkcbw sknh z'], ['lippskje asvp h']], [['hi    et a gf hellogmyfriend'], ['de    ap w cb dahhkciubneajz'], ['lm    ix e kj lippskqcjvmirh']], [['%bc^d&^%'], ['%xy^z&^%'], ['%fg^h&^%']], [['bc&^%'], ['xy&^%'], ['fg&^%']], [['abcdefghijklmnopqrstuvxyz'], ['wxyzabcdefghijklmnopqrtuv'], ['efghijklmnopqrstuvwxyzbcd']], [['thequicerthelazydoag'], ['pdamqeyanpdahwvuzkwc'], ['xliuymgivxlipedchsek']], [['thequicertthelazydog'], ['pdamqeyanppdahwvuzkc'], ['xliuymgivxxlipedchsk']], [['hellogfa'], ['dahhkcbw'], ['lippskje']], [['thequickbrthequicerthelazydogownfoxjumpsoverthelazydo'], ['pdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokranpdahwvuzk'], ['xliuymgofvxliuymgivxlipedchsksarjsbnyqtwszivxlipedchs']], [['bc&^%thequicerthelazydogbc&^%'], ['xy&^%pdamqeyanpdahwvuzkcxy&^%'], ['fg&^%xliuymgivxlipedchskfg&^%']], [['abcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyz'], ['wxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuv'], ['efghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcd']], [['thequickbrownfoxydo'], ['pdamqeygxnksjbktuzk'], ['xliuymgofvsarjsbchs']], [['thequicwkbrthequicerthelazydogownofoxjumpsoverthelazydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilokranpdahwvuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwszivxlipedchs']], [['thequickborownfoxydo'], ['pdamqeygxknksjbktuzk'], ['xliuymgofsvsarjsbchs']], [['world'], ['sknhz'], ['asvph']], [['abcdefghihjklmnopqrstuvxyz'], ['wxyzabcdedfghijklmnopqrtuv'], ['efghijklmlnopqrstuvwxyzbcd']], [['hi    ehellot a gf hellogmyfriend'], ['de    adahhkp w cb dahhkciubneajz'], ['lm    ilippsx e kj lippskqcjvmirh']], [['hi    et a gf helbcmd&^%lomyfriend'], ['de    ap w cb dahxyiz&^%hkiubneajz'], ['lm    ix e kj lipfgqh&^%psqcjvmirh']], [['%b^c^d&^%'], ['%x^y^z&^%'], ['%f^g^h&^%']], [['hellomyfriend'], ['dahhkiubneajz'], ['lippsqcjvmirh']], [['helbcd&^%lomy'], ['dahxyz&^%hkiu'], ['lipfgh&^%psqc']], [['thequickbromwnfoxjumpsovertheletazydog'], ['pdamqeygxnkisjbktfqilokranpdahapwvuzkc'], ['xliuymgofvsqarjsbnyqtwszivxlipixedchsk']], [['hellogmyfriend'], ['dahhkciubneajz'], ['lippskqcjvmirh']], [['thequicekbromwnfoxjumpsoverthelazydog'], ['pdamqeyagxnkisjbktfqilokranpdahwvuzkc'], ['xliuymgiofvsqarjsbnyqtwszivxlipedchsk']], [['yzz'], ['uvv'], ['cdd']], [['hi    ehellott a gf hellogmyfriend'], ['de    adahhkpp w cb dahhkciubneajz'], ['lm    ilippsxx e kj lippskqcjvmirh']], [['thkbrownfoxjumpsoverthelazydo'], ['pdgxnksjbktfqilokranpdahwvuzk'], ['xlofvsarjsbnyqtwszivxlipedchs']], [['thequickbrownfoxjumpsoverthelazydfo'], ['pdamqeygxnksjbktfqilokranpdahwvuzbk'], ['xliuymgofvsarjsbnyqtwszivxlipedchjs']], [['theqcuickbrownfoxjumpsoverthelazbydog'], ['pdamyqeygxnksjbktfqilokranpdahwvxuzkc'], ['xliugymgofvsarjsbnyqtwszivxlipedfchsk']], [['theqcuickabcdefghihjklmnopqrstuvxyzbrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghijklmnopqrtuvxnksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['helllogfa'], ['dahhhkcbw'], ['lipppskje']], [['thequickbrthequicerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymgivxlipedchsksarjsbnyqtwszipedchs']], [['bc&^%thequicerthelazydothkbrownfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnksjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvsarjsbnyqtwszivxlipedchs&^%']], [['bc&^hello%'], ['xy&^dahhk%'], ['fg&^lipps%']], [['ehellott'], ['adahhkpp'], ['ilippsxx']], [['thequickbromwnfoxjumpsoverdog'], ['pdamqeygxnkisjbktfqilokranzkc'], ['xliuymgofvsqarjsbnyqtwszivhsk']], [['hellogfa wetorld'], ['dahhkcbw sapknhz'], ['lippskje aixsvph']], [['wetorld'], ['sapknhz'], ['aixsvph']], [['hi    et a gf helbcdhi    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzde    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlm    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['hi    et a gf helbcmd&^%lo myfriend'], ['de    ap w cb dahxyiz&^%hk iubneajz'], ['lm    ix e kj lipfgqh&^%ps qcjvmirh']], [['thequicerthequicekbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgiofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['thequiuckbrownfoxjumpsoverthelazydo'], ['pdamqeqygxnksjbktfqilokranpdahwvuzk'], ['xliuymygofvsarjsbnyqtwszivxlipedchs']], [['bc&^%thequicerthelazydoghelbcmd&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchsklipfgqh&^%psfg&^%']], [['helbcd&^thequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfgh&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['bc&thequicertthelazydog^%'], ['xy&pdamqeyanppdahwvuzkc^%'], ['fg&xliuymgivxxlipedchsk^%']], [['theqthequicerthequicekbromwnfoxjumpsoverthelazydogthelazydogdog'], ['pdampdamqeyanpdamqeyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkczkc'], ['xliuxliuymgivxliuymgiofvsqarjsbnyqtwszivxlipedchskxlipedchskhsk']], [['hi    et  a gf helbcmld&^%lo myfriend'], ['de    ap  w cb dahxyihz&^%hk iubneajz'], ['lm    ix  e kj lipfgqph&^%ps qcjvmirh']], [['afbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyz'], ['wbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuv'], ['ejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcd']], [['bc&^%thequicerthelazydoghelbcmd&&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchsklipfgqh&&^%psfg&^%']], [['ehelloyzz'], ['adahhkuvv'], ['ilippscdd']], [['hi r   et a gf helbcmd&^%lomyfriend'], ['de n   ap w cb dahxyiz&^%hkiubneajz'], ['lm v   ix e kj lipfgqh&^%psqcjvmirh']], [['gf%b^c^d&^%'], ['cb%x^y^z&^%'], ['kj%f^g^h&^%']], [['thequtickborownfoxydo'], ['pdamqpeygxknksjbktuzk'], ['xliuyxmgofsvsarjsbchs']], [['thequicerthequicezkbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyavgxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgidofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['bc&^%thequicerthelazydohighelbcmd&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkdecdahxyiz&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchslmklipfgqh&^%psfg&^%']], [['hellogmythequicertthelazydogfriend'], ['dahhkciupdamqeyanppdahwvuzkcbneajz'], ['lippskqcxliuymgivxxlipedchskjvmirh']], [['ello'], ['ahhk'], ['ipps']], [['hellogfa wethorld'], ['dahhkcbw sapdknhz'], ['lippskje aixlsvph']], [['bcello&^%'], ['xyahhk&^%'], ['fgipps&^%']], [['hellogmyfriend&^%lomyfriend'], ['dahhkciubneajz&^%hkiubneajz'], ['lippskqcjvmirh&^%psqcjvmirh']], [['yzyz'], ['uvuv'], ['cdcd']], [['helbcy'], ['dahxyu'], ['lipfgc']], [['hellogmyfriend&^%lomyfriendgf'], ['dahhkciubneajz&^%hkiubneajzcb'], ['lippskqcjvmirh&^%psqcjvmirhkj']], [['afbcdefghijklhellogfa'], ['wbxyzabcdefghdahhkcbw'], ['ejfghijklmnoplippskje']], [['ehellot'], ['adahhkp'], ['ilippsx']], [['theqkbrownfoxydo'], ['pdamgxnksjbktuzk'], ['xliuofvsarjsbchs']], [['worl'], ['sknh'], ['asvp']], [['thequickbrownfoxbcdd&^%ydo'], ['pdamqeygxnksjbktxyzz&^%uzk'], ['xliuymgofvsarjsbfghh&^%chs']], [['hi    et a gf helbcdhibc&^%    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzdexy&^%    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlmfg&^%    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['worlwxyyd'], ['sknhstuuz'], ['asvpabcch']], [['yzzz'], ['uvvv'], ['cddd']], [['ehe'], ['ada'], ['ili']], [['helbcmd&^%lomyfriend'], ['dahxyiz&^%hkiubneajz'], ['lipfgqh&^%psqcjvmirh']], [['hi    et a gf hellogmyfiend'], ['de    ap w cb dahhkciubeajz'], ['lm    ix e kj lippskqcjmirh']], [['hellogfaello'], ['dahhkcbwahhk'], ['lippskjeipps']], [['glhello'], ['chdahhk'], ['kplipps']], [['hellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfriendfriend'], ['dahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmirhjvmirh']], [['theqcuickabcdefghihjklmnoownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghijkksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqrssarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddddddddddddddddddddddddddddddd']], [['heleloo'], ['dahahkk'], ['lipipss']], [['hellogfa worwethorld'], ['dahhkcbw sknsapdknhz'], ['lippskje asvaixlsvph']], [['%bcthkbrownfoxjumpsoverthelazydod&^%'], ['%xypdgxnksjbktfqilokranpdahwvuzkz&^%'], ['%fgxlofvsarjsbnyqtwszivxlipedchsh&^%']], [['%bcdhelwxylo&&^%'], ['%xyzdahstuhk&&^%'], ['%fghlipabcps&&^%']], [['eheellot'], ['adaahhkp'], ['iliippsx']], [['helllo '], ['dahhhk '], ['lippps ']], [['hi    eiend'], ['de    aeajz'], ['lm    imirh']], [['hi    et a gf helbc%bc^d&^%d&^%lomy friend'], ['de    ap w cb dahxy%xy^z&^%z&^%hkiu bneajz'], ['lm    ix e kj lipfg%fg^h&^%h&^%psqc jvmirh']], [['ywxy'], ['ustu'], ['cabc']], [['hwellogfa wethorld'], ['dsahhkcbw sapdknhz'], ['laippskje aixlsvph']], [['helbcmd&^%lomyfiend'], ['dahxyiz&^%hkiubeajz'], ['lipfgqh&^%psqcjmirh']], [['helbcdworlwxyyd&^thequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyzsknhstuuz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfghasvpabcch&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['helllo'], ['dahhhk'], ['lippps']], [['woworwethorldrlwxyyd'], ['sksknsapdknhznhstuuz'], ['asasvaixlsvphvpabcch']], [['thequiceurtthelazydog'], ['pdamqeyaqnppdahwvuzkc'], ['xliuymgiyvxxlipedchsk']], [['hi    et  a g^f helbcmld&^%lo myfriend'], ['de    ap  w c^b dahxyihz&^%hk iubneajz'], ['lm    ix  e k^j lipfgqph&^%ps qcjvmirh']], [['hhellogmythequicertthelazydogfriendelbcmd&^%lomyfiend'], ['ddahhkciupdamqeyanppdahwvuzkcbneajzahxyiz&^%hkiubeajz'], ['llippskqcxliuymgivxxlipedchskjvmirhipfgqh&^%psqcjmirh']], [['hellomyfrienduvxyz'], ['dahhkiubneajzqrtuv'], ['lippsqcjvmirhyzbcd']], [['thequicerthequicezkbroomwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyavgxnkkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgidofvssqarjsbnyqtwszivxlipedchskxlipedchsk']], [['fgf'], ['bcb'], ['jkj']], [['yzyzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvv'], ['cdcdddddddddddd']], [['helbcdworlwxyyd&^thequiuckbrownfoxjumpsoverthelazydothequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyzsknhstuuz&^pdamqeqygxnksjbktfqilokranpdahwvuzkpdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfghasvpabcch&^xliuymygofvsarjsbnyqtwszivxlipedchsxliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['theqeutickborownfoxydo'], ['pdamaqpeygxknksjbktuzk'], ['xliuiyxmgofsvsarjsbchs']], [['thequickbrownfoxjumpsoverthelazyd'], ['pdamqeygxnksjbktfqilokranpdahwvuz'], ['xliuymgofvsarjsbnyqtwszivxlipedch']], [['bc&^%thequicerthelazydothkbroswnfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnkosjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvswarjsbnyqtwszivxlipedchs&^%']], [['woworwethorlldrlwxd'], ['sksknsapdknhhznhstz'], ['asasvaixlsvpphvpabh']], [['%b^c^d&^d%'], ['%x^y^z&^z%'], ['%f^g^h&^h%']], [['gglhello'], ['cchdahhk'], ['kkplipps']], [['%bcdheolwxylo&&^%'], ['%xyzdakhstuhk&&^%'], ['%fghlispabcps&&^%']], [['thequicertthequickbrthequicerthelazydogownfoxjumpsovelazydohelazydoag'], ['pdamqeyanppdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokrahwvuzkdahwvuzkwc'], ['xliuymgivxxliuymgofvxliuymgivxlipedchsksarjsbnyqtwszipedchslipedchsek']], [['hi    et a gf helbcmhelbcmd&^%lomyfriendd&^%lo myfriend'], ['de    ap w cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubneajz'], ['lm    ix e kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjvmirh']], [['s'], ['o'], ['w']], [['bc&^%thequicerthela^zydoghelbcmd&&^%lobc&^%'], ['xy&^%pdamqeyanpdahw^vuzkcdahxyiz&&^%hkxy&^%'], ['fg&^%xliuymgivxlipe^dchsklipfgqh&&^%psfg&^%']], [['thequickborownfoxydfo'], ['pdamqeygxknksjbktuzbk'], ['xliuymgofsvsarjsbchjs']], [['%bcdhelwxyl%'], ['%xyzdahstuh%'], ['%fghlipabcp%']], [['thequickbromownfoxjumpsoverdog'], ['pdamqeygxnkiksjbktfqilokranzkc'], ['xliuymgofvsqsarjsbnyqtwszivhsk']], [['hellogmyfriend&^%lomyfrienehellott'], ['dahhkciubneajz&^%hkiubneajadahhkpp'], ['lippskqcjvmirh&^%psqcjvmirilippsxx']], [['helbcthequickbrownfoxbcdd&^%ydoy'], ['dahxypdamqeygxnksjbktxyzz&^%uzku'], ['lipfgxliuymgofvsarjsbfghh&^%chsc']], [['ggff'], ['ccbb'], ['kkjj']], [['hhillogfaello'], ['ddehhkcbwahhk'], ['llmppskjeipps']], [['thequicwkbrthequicerthelazydogownofoxjumpszydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilovuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwdchs']], [['worethorld'], ['sknapdknhz'], ['asvixlsvph']], [['thequiceurtazydog'], ['pdamqeyaqnpwvuzkc'], ['xliuymgiyvxedchsk']], [['helbcmd&^%lomyfriendxy'], ['dahxyiz&^%hkiubneajztu'], ['lipfgqh&^%psqcjvmirhbc']], [['helbcthequickbryzzoy'], ['dahxypdamqeygxnuvvku'], ['lipfgxliuymgofvcddsc']], [['hwellogfa wethorldd'], ['dsahhkcbw sapdknhzz'], ['laippskje aixlsvphh']], [['worwethorld'], ['sknsapdknhz'], ['asvaixlsvph']], [['o%bcdhelwxylo&^%'], ['k%xyzdahstuhk&^%'], ['s%fghlipabcps&^%']], [['eehello'], ['aadahhk'], ['iilipps']], [['thequicydog'], ['pdamqeyuzkc'], ['xliuymgchsk']], [['hi    et  a g^f hhelbcd&^%lomyelbcmld&^%lo myfriend'], ['de    ap  w c^b ddahxyz&^%hkiuahxyihz&^%hk iubneajz'], ['lm    ix  e k^j llipfgh&^%psqcipfgqph&^%ps qcjvmirh']], [['theqkbrowfnfoxydo'], ['pdamgxnksbjbktuzk'], ['xliuofvsajrjsbchs']], [['hi    et a gf helbcdhibc&^%    et a abcdefghihjklmnopqrstuvxyzllogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzdexy&^%    ap w wxyzabcdedfghijklmnopqrtuvhhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlmfg&^%    ix e efghijklmlnopqrstuvwxyzbcdppskqcjvmirh&^%psqcjvmirh']], [['hwellogfa'], ['dsahhkcbw'], ['laippskje']], [['hi r  et a gf helbcmd&^%lomyfriend'], ['de n  ap w cb dahxyiz&^%hkiubneajz'], ['lm v  ix e kj lipfgqh&^%psqcjvmirh']], [['abcdefghijklmnopqrstuhi    et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde    ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm    ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['thkbrownfoxjumpsoverth%bcdhelwxylo&^%elazydo'], ['pdgxnksjbktfqilokranpd%xyzdahstuhk&^%ahwvuzk'], ['xlofvsarjsbnyqtwszivxl%fghlipabcps&^%ipedchs']], [['bc&thequicerttheworwethorldlazydog^%'], ['xy&pdamqeyanppdasknsapdknhzhwvuzkc^%'], ['fg&xliuymgivxxliasvaixlsvphpedchsk^%']], [['wyorlwxyyd'], ['suknhstuuz'], ['acsvpabcch']], [['hi    et a gf helbcmhelbcmd&^%lomyfriendd&^%lo myfend'], ['de    ap w cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubajz'], ['lm    ix e kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjirh']], [['hhelbcd&^%lomyelbcmld&^%lo'], ['ddahxyz&^%hkiuahxyihz&^%hk'], ['llipfgh&^%psqcipfgqph&^%ps']], [['thequickbrownfoxjumpsovworwethorlderthelazyd'], ['pdamqeygxnksjbktfqilokrsknsapdknhzanpdahwvuz'], ['xliuymgofvsarjsbnyqtwszasvaixlsvphivxlipedch']], [['thequicwkbrthequicerthelazydogaownofoxjumpsoverthelazydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcwksjkbktfqilokranpdahwvuzk'], ['xliuymgaofvxliuymgivxlipedchskesarsjsbnyqtwszivxlipedchs']], [['%bdcthkbrownfoxjumpsoverthelazydod&^%'], ['%xzypdgxnksjbktfqilokranpdahwvuzkz&^%'], ['%fhgxlofvsarjsbnyqtwszivxlipedchsh&^%']], [['worlwxd'], ['sknhstz'], ['asvpabh']], [['herienduvxyz'], ['daneajzqrtuv'], ['livmirhyzbcd']], [['hi    et a gf hellogmyfriiend'], ['de    ap w cb dahhkciubneeajz'], ['lm    ix e kj lippskqcjvmmirh']], [['boc&^hello%'], ['xky&^dahhk%'], ['fsg&^lipps%']], [['abcdyzzefghijklmnopqrstuvxyz'], ['wxyzuvvabcdefghijklmnopqrtuv'], ['efghcddijklmnopqrstuvwxyzbcd']], [['yxwxy'], ['utstu'], ['cbabc']], [['yzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddlippsdddddddddddddddddddddddddddd']], [['ahwellogfa wethorldd'], ['wdsahhkcbw sapdknhzz'], ['elaippskje aixlsvphh']], [['hi    et a gf helbcmd&^%l o myfriend'], ['de    ap w cb dahxyiz&^%h k iubneajz'], ['lm    ix e kj lipfgqh&^%p s qcjvmirh']], [['hellogymyfriend&^%lomyfriendgf'], ['dahhkcuiubneajz&^%hkiubneajzcb'], ['lippskcqcjvmirh&^%psqcjvmirhkj']], [['hellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfririend'], ['dahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneneajz'], ['lippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmvmirh']], [['heflbcmyd&^%lomyfriend'], ['dabhxyiuz&^%hkiubneajz'], ['lijpfgqch&^%psqcjvmirh']], [['myfriendvwxyz'], ['iubneajzrstuv'], ['qcjvmirhzabcd']], [['theqcuickabcdefghihjklmehellotnfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghiadahhkpjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqilippsxrjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['thequickbrthequiceerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeyaanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymgiivxlipedchsksarjsbnyqtwszipedchs']], [['thequhelbcmld&^%loicerthelazy%doag'], ['pdamqdahxyihz&^%hkeyanpdahwvu%zkwc'], ['xliuylipfgqph&^%psmgivxlipedc%hsek']], [['%bcdhelloo&^%'], ['%xyzdahhkk&^%'], ['%fghlippss&^%']], [['hellogmyfrithequickbromwnfoxjumpsoverthelazydogend&^%lomhi'], ['dahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuzkcajz&^%hkide'], ['lippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedchskirh&^%psqlm']], [['afbcdefghijklhellogfa worl damnoyfrienduvxyz'], ['wbxyzabcdefghdahhkcbw sknh zwijkubneajzqrtuv'], ['ejfghijklmnoplippskje asvp heqrscjvmirhyzbcd']], [['%%bc^d&^%'], ['%%xy^z&^%'], ['%%fg^h&^%']], [['gfs'], ['cbo'], ['kjw']], [['hloglfa'], ['dhkchbw'], ['lpskpje']], [['thequicerpsoverthelazydogthelazydog'], ['pdamqeyanlokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivtwszivxlipedchskxlipedchsk']], [['gghelbcdworlwxyyd&^thequickbrownfoxjumpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabcch&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqcplipps']], [['hellogmyfiend'], ['dahhkciubeajz'], ['lippskqcjmirh']], [['thequiutckbrownfoxjumpstoverthelazydo'], ['pdamqeqpygxnksjbktfqilopkranpdahwvuzk'], ['xliuymyxgofvsarjsbnyqtwxszivxlipedchs']], [['helelooywxy'], ['dahahkkustu'], ['lipipsscabc']], [['bc&thequicertthelazydg^%'], ['xy&pdamqeyanppdahwvuzc^%'], ['fg&xliuymgivxxlipedchk^%']], [['helbc%bc^d&^%d&^%lomy'], ['dahxy%xy^z&^%z&^%hkiu'], ['lipfg%fg^h&^%h&^%psqc']], [['hi    etabcdefghijklhellogfa  a g^f helbcmld'], ['de    apwxyzabcdefghdahhkcbw  w c^b dahxyihz'], ['lm    ixefghijklmnoplippskje  e k^j lipfgqph']], [['helllogfa wethorld'], ['dahhhkcbw sapdknhz'], ['lipppskje aixlsvph']], [['hellhi    et a gf helbcd&^%lomyfriendlogfa'], ['dahhde    ap w cb dahxyz&^%hkiubneajzhkcbw'], ['lipplm    ix e kj lipfgh&^%psqcjvmirhpskje']], [['abcdefghijklmnopqrstuhi    et  g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde    ap  c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm    ix  k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['hello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzd'], ['dahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvz'], ['lipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdh']], [['helbcmld&^%lo'], ['dahxyihz&^%hk'], ['lipfgqph&^%ps']], [['hellogmyfriend&^%lomyfriendgfboc&^hello%'], ['dahhkciubneajz&^%hkiubneajzcbxky&^dahhk%'], ['lippskqcjvmirh&^%psqcjvmirhkjfsg&^lipps%']], [['abcdyzzefghijklmnopqrsthi    ehellot a gnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp w cjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx e krhyzbcd']], [['helbcmld'], ['dahxyihz'], ['lipfgqph']], [['heriennduvxyz'], ['daneajjzqrtuv'], ['livmirrhyzbcd']], [['hellogmyfriend&^%lomhi    et a %lo myfriendfriend'], ['dahhkciubneajz&^%hkide    ap w %hk iubneajzbneajz'], ['lippskqcjvmirh&^%psqlm    ix e %ps qcjvmirhjvmirh']], [['yzzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cddcdddddddddddddddddddddddddddddddddd']], [['boc&hi    et  a g^f helbcmld&^%lo myfriend^heo%'], ['xky&de    ap  w c^b dahxyihz&^%hk iubneajz^dak%'], ['fsg&lm    ix  e k^j lipfgqph&^%ps qcjvmirh^lis%']], [['abcdyzzefghijklmnopqrsthi    ehellot agnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp wcjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx ekrhyzbcd']], [['thequickbromohwellogfa wethorldwnfoxjumpsoverdog'], ['pdamqeygxnkikdsahhkcbw sapdknhzsjbktfqilokranzkc'], ['xliuymgofvsqslaippskje aixlsvpharjsbnyqtwszivhsk']], [['hihihellogmyfriendellogmyfriiend'], ['dededahhkciubneajzahhkciubneeajz'], ['lmlmlippskqcjvmirhippskqcjvmmirh']], [['bdcd&^%'], ['xzyz&^%'], ['fhgh&^%']], [['thequickbrownfoxydhhillogfaelloo'], ['pdamqeygxnksjbktuzddehhkcbwahhkk'], ['xliuymgofvsarjsbchllmppskjeippss']], [['helbcdhibc&^%'], ['dahxyzdexy&^%'], ['lipfghlmfg&^%']], [['thequiutckbrownfoxjumpstovelazydo'], ['pdamqeqpygxnksjbktfqilopkrahwvuzk'], ['xliuymyxgofvsarjsbnyqtwxszipedchs']], [['bc&^%thequicerthelazydothkbroswnfoxjumpsovtheqkbrownfoxydoerthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnkosjbktfqilokrpdamgxnksjbktuzkanpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvswarjsbnyqtwszxliuofvsarjsbchsivxlipedchs&^%']], [['theqcuickabcdefghinhjklmnopqrstuvxyzbrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdejdfghijklmnopqrtuvxnksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmrlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddddddddddddddddddddddddddddd']], [['herienduvxyhi    et a gf hellogmyfienddz'], ['daneajzqrtude    ap w cb dahhkciubeajzzv'], ['livmirhyzbclm    ix e kj lippskqcjmirhhd']], [['hi    et a gf heflbcmhelbcmd&^%lomyfriendd&^%lo cmyfend'], ['de    ap w cb dabhxyidahxyiz&^%hkiubneajzz&^%hk yiubajz'], ['lm    ix e kj lijpfgqlipfgqh&^%psqcjvmirhh&^%ps gqcjirh']], [['gghelbcdworlwxyyd&^thequickbrownfoxjuthequickbromownfoxjumpsoverdogmpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuz&^pdamqeygxnksjbktfqpdamqeygxnkiksjbktfqilokranzkcilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabcch&^xliuymgofvsarjsbnyxliuymgofvsqsarjsbnyqtwszivhskqtwszivxlipedchs%psqcplipps']], [['hellogmyfrithequiend&^%lomhi s   et a gf helbcmd&^%lo myfriendfriend'], ['dahhkciubnepdamqeajz&^%hkide o   ap w cb dahxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmxliuymirh&^%psqlm w   ix e kj lipfgqh&^%ps qcjvmirhjvmirh']], [['ywxytheqcuickbrownfoxjumpsoverthelazydog'], ['ustupdamyqeygxnksjbktfqilokranpdahwvuzkc'], ['cabcxliugymgofvsarjsbnyqtwszivxlipedchsk']], [['hellogfa wetoorld'], ['dahhkcbw sapkknhz'], ['lippskje aixssvph']], [['bcbcmd&^%lobc&^%'], ['xyxyiz&^%hkxy&^%'], ['fgfgqh&^%psfg&^%']], [['theqcuickabcdefghihjklmehellotnfoxjumpsoverthoelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghiadahhkpjbktfqilokranpdkahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqilippsxrjsbnyqtwszivxlsiplippskqcjvmirhedchsk']], [['abcdyzzefghijklmnopqrsthhelbcdhii    ehellot a gnduvxyz'], ['wxyzuvvabcdefghijklmnopddahxyzdee    adahhkp w cjzqrtuv'], ['efghcddijklmnopqrstuvwxllipfghlmm    ilippsx e krhyzbcd']], [['gnduvxyz%bcdhelwxyl%'], ['cjzqrtuv%xyzdahstuh%'], ['krhyzbcd%fghlipabcp%']], [['r'], ['n'], ['v']], [['hi    et a gf helbcd&^%lomy fiend'], ['de    ap w cb dahxyz&^%hkiu beajz'], ['lm    ix e kj lipfgh&^%psqc jmirh']], [['bc&thequicertthelazydhellog^%'], ['xy&pdamqeyanppdahwvuzdahhkc^%'], ['fg&xliuymgivxxlipedchlippsk^%']], [['ob%'], ['kx%'], ['sf%']], [['%%bc^d&hellogfa worwethorld^%'], ['%%xy^z&dahhkcbw sknsapdknhz^%'], ['%%fg^h&lippskje asvaixlsvph^%']], [['wxabcdefghijklmnopqrstuhi    et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['stwxyzabcdefghijklmnopqde    ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['abefghijklmnopqrstuvwxylm    ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['gfhello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzds'], ['cbdahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvzo'], ['kjlipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdhw']], [['hi    et a gftheqkbrowfnfoxydo helbcmhelbcmd&^%lomyfiriendd&^%lo myfrd'], ['de    ap w cbpdamgxnksbjbktuzk dahxyidahxyiz&^%hkiubeneajzz&^%hk iubnz'], ['lm    ix e kjxliuofvsajrjsbchs lipfgqlipfgqh&^%psqcjmvmirhh&^%ps qcjvh']], [['ehebc&^hello%'], ['adaxy&^dahhk%'], ['ilifg&^lipps%']], [['abcdyzzefghijklmnopqrsthi    ehellot ahellhi gnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp wdahhde cjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx elipplm krhyzbcd']], [['hellogmyfienid'], ['dahhkciubeajez'], ['lippskqcjmirmh']], [['hhelelooywxy'], ['ddahahkkustu'], ['llipipsscabc']], [['hellthequiuckbrownfoxjumpsoverthelazydoaaogfa worl d'], ['dahhpdamqeqygxnksjbktfqilokranpdahwvuzkwwkcbw sknh z'], ['lippxliuymygofvsarjsbnyqtwszivxlipedchseeskje asvp h']], [['fgyzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzzf'], ['bcuvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvvb'], ['jkcdcdddddlippsddddddddddddddddddddddddddddj']], [['thequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfo'], ['pdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbk'], ['xliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjs']], [['hi    et a gf helbcdhi    et a gf helylogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzde    ap w cb dahuhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlm    ix e kj lipcpskqcjvmirh&^%psqcjvmirh']], [['bcdd&^%%'], ['xyzz&^%%'], ['fghh&^%%']], [['%bob%cd&^%'], ['%xkx%yz&^%'], ['%fsf%gh&^%']], [['hi    et  ah gf helbcmld&^%lo myfriend'], ['de    ap  wd cb dahxyihz&^%hk iubneajz'], ['lm    ix  el kj lipfgqph&^%ps qcjvmirh']], [['hi r  et a gf helbcmd&^% lomyfriend'], ['de n  ap w cb dahxyiz&^% hkiubneajz'], ['lm v  ix e kj lipfgqh&^% psqcjvmirh']], [['bc&^%thequicerthelazydoghelbcmd&^%lobc&^yzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzz%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&^%hkxy&^uvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvv%'], ['fg&^%xliuymgivxlipedchsklipfgqh&^%psfg&^cdcdddddlippsdddddddddddddddddddddddddddd%']], [['hellogmyfrithequickbromwnfoxjumpsoverthelazylbcmd&^%lo myfriendfriend'], ['dahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuhxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedcpfgqh&^%ps qcjvmirhjvmirh']], [['hi    ehellott a gf hellogmyfrielnd'], ['de    adahhkpp w cb dahhkciubneahjz'], ['lm    ilippsxx e kj lippskqcjvmiprh']], [['worlwxdgf%b^c^d&^%'], ['sknhstzcb%x^y^z&^%'], ['asvpabhkj%f^g^h&^%']], [['hhelelooywxys'], ['ddahahkkustuo'], ['llipipsscabcw']], [['booc&^hello%'], ['xkky&^dahhk%'], ['fssg&^lipps%']], [['hellogmyfriend&^%lomyfrithequickbrownfoxjumpsovworwethorlderthelazydf'], ['dahhkciubneajz&^%hkiubnepdamqeygxnksjbktfqilokrsknsapdknhzanpdahwvuzb'], ['lippskqcjvmirh&^%psqcjvmxliuymgofvsarjsbnyqtwszasvaixlsvphivxlipedchj']], [['bc&^%thequicertwethorldwnfoxjumpsoverdoghelazydogmd&&abc&^%'], ['xy&^%pdamqeyanpsapdknhzsjbktfqilokranzkcdahwvuzkciz&&wxy&^%'], ['fg&^%xliuymgivxaixlsvpharjsbnyqtwszivhsklipedchskqh&&efg&^%']], [['thequtickborobc&thequicertthelazydg^%wnfoxydo'], ['pdamqpeygxknkxy&pdamqeyanppdahwvuzc^%sjbktuzk'], ['xliuyxmgofsvsfg&xliuymgivxxlipedchk^%arjsbchs']], [['bc&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['xy&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['fg&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']], [['hellogmyfthequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfoiend'], ['dahhkciubpdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbkeajz'], ['lippskqcjxliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjsmirh']], [['thequicetazydog'], ['pdamqeyapwvuzkc'], ['xliuymgixedchsk']], [['hellogmyfrriend&^%lomyfriendgf'], ['dahhkciubnneajz&^%hkiubneajzcb'], ['lippskqcjvvmirh&^%psqcjvmirhkj']], [['woretaahorld'], ['sknapwwdknhz'], ['asvixeelsvph']], [['ld'], ['hz'], ['ph']], [['helelooywxyhi    eiend'], ['dahahkkustude    aeajz'], ['lipipsscabclm    imirh']], [['woretarahorld'], ['sknapwnwdknhz'], ['asvixevelsvph']], [['bcdd&^d%'], ['xyzz&^z%'], ['fghh&^h%']], [['gghelbcdworlwxyybrownfoxjumpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuxnksjbktfqilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabccfvsarjsbnyqtwszivxlipedchs%psqcplipps']], [['whellomyfrienduvxyhelbcthequickbrownfoxbcdd&^%ydoyrlwxyyd'], ['sdahhkiubneajzqrtudahxypdamqeygxnksjbktxyzz&^%uzkunhstuuz'], ['alippsqcjvmirhyzbclipfgxliuymgofvsarjsbfghh&^%chscvpabcch']], [['wethorldwnfoxjumpsoverdog'], ['sapdknhzsjbktfqilokranzkc'], ['aixlsvpharjsbnyqtwszivhsk']], [['etabcdefghijklhellogfa'], ['apwxyzabcdefghdahhkcbw'], ['ixefghijklmnoplippskje']], [['hi    et sa gf helbcdhi    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap ow cb dahxyzde    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix we kj lipfghlm    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['thequicwkbrthequicerthelazydogownofoxjumpszytdo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilovupzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwdcxhs']], [['theqcuickabcdefghihjklmno%bcdhethequieceurtthelazydogydog'], ['pdamyqeygwxyzabcdedfghijk%xyzdapdamqeayaqnppdahwvuzkcuzkc'], ['xliugymgoefghijklmlnopqrs%fghlixliuymigiyvxxlipedchskchsk']], [['ahellhi'], ['wdahhde'], ['elipplm']], [['hi    et a gf helleomyfriened'], ['de    ap w cb dahhakiubneajaz'], ['lm    ix e kj lippisqcjvmirih']], [['hi    et a g'], ['de    ap w c'], ['lm    ix e k']], [['helbcmd&^%l'], ['dahxyiz&^%h'], ['lipfgqh&^%p']], [['helbc%bc^d&^%d&^%lomworwethorld^%y'], ['dahxy%xy^z&^%z&^%hkisknsapdknhz^%u'], ['lipfg%fg^h&^%h&^%psqasvaixlsvph^%c']], [['rgfhello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzds'], ['ncbdahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvzo'], ['vkjlipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdhw']], [['myfedamnopqrstrhind'], ['iubazwijklmnopndejz'], ['qcjiheqrstuvwxvlmrh']], [['abcdefghijklmnopqrstuvxyo%bcdhelwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyzdahstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghlipabcps&^%d']], [['hi    e g'], ['de    a c'], ['lm    i k']], [['ahelthequickbrownfoxydolhi'], ['wdahpdamqeygxnksjbktuzkhde'], ['elipxliuymgofvsarjsbchsplm']], [['thequicerthequcekbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuygiofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['bc&^%thequicyxwxyeroswnfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyutstuankosjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgcbabcivswarjsbnyqtwszivxlipedchs&^%']], [['bchi r  et a gf helbcmd&^% lomyfriend&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['xyde n  ap w cb dahxyiz&^% hkiubneajz&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['fglm v  ix e kj lipfgqh&^% psqcjvmirh&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']], [['worlafbcdefghijklhellogfa'], ['sknhwbxyzabcdefghdahhkcbw'], ['asvpejfghijklmnoplippskje']], [['ghellogmyfrithequickbromwnfoxjumpsoverthelazylbcmd&^%lofs'], ['cdahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuhxyiz&^%hkbo'], ['klippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedcpfgqh&^%psjw']], [['heflbklmnopqrsthilomyfriend'], ['dabhxghijklmnopdehkiubneajz'], ['lijpfopqrstuvwxlmpsqcjvmirh']], [['abcdyzzefghijklmnopqrsthi    ehellot a gnd'], ['wxyzuvvabcdefghijklmnopde    adahhkp w cjz'], ['efghcddijklmnopqrstuvwxlm    ilippsx e krh']], [['heyzzzbcdhibc&^%'], ['dauvvvxyzdexy&^%'], ['licdddfghlmfg&^%']], [['yzyyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdccdddddddddddddddddddddddddddddddddd']], [['abcdefghijklmnopqrstuvxyo%bcdhelhellogfa wetorldwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyzdahdahhkcbw sapknhzstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghliplippskje aixsvphabcps&^%d']], [['%%bdc^d&^%'], ['%%xzy^z&^%'], ['%%fhg^h&^%']], [['helbcmlld'], ['dahxyihhz'], ['lipfgqpph']], [['myfrieendvwxyz'], ['iubneaajzrstuv'], ['qcjvmiirhzabcd']], [['bc&thequricertthelazydog^%'], ['xy&pdamqneyanppdahwvuzkc^%'], ['fg&xliuyvmgivxxlipedchsk^%']], [['bc&^%thequicehwellogfa wethorldhelazydogbc&^%'], ['xy&^%pdamqeyadsahhkcbw sapdknhzdahwvuzkcxy&^%'], ['fg&^%xliuymgilaippskje aixlsvphlipedchskfg&^%']], [['hi    et a gf helbcd&^%lomy yfriend'], ['de    ap w cb dahxyz&^%hkiu ubneajz'], ['lm    ix e kj lipfgh&^%psqc cjvmirh']], [['hi    et a gf helbcmd&^%lo myfrhellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfririendiend'], ['de    ap w cb dahxyiz&^%hk iubndahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneneajzeajz'], ['lm    ix e kj lipfgqh&^%ps qcjvlippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmvmirhmirh']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzmyfriend^heo%zzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvviubneajz^dak%vvvvv'], ['cdcdddddddddddddddddddddddddddqcjvmirh^lis%ddddd']], [['thehelbc%bc^d&^%d&^%lomyquicerpsoverthelazydogthelazydog'], ['pdadahxy%xy^z&^%z&^%hkiumqeyanlokranpdahwvuzkcpdahwvuzkc'], ['xlilipfg%fg^h&^%h&^%psqcuymgivtwszivxlipedchskxlipedchsk']], [['eeheabcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzo'], ['aadawxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvk'], ['iiliefghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcds']], [['helylogmyfriend&^%lomyfriend'], ['dahuhkciubneajz&^%hkiubneajz'], ['lipcpskqcjvmirh&^%psqcjvmirh']], [['theqfkbrowfnfoxydo'], ['pdambgxnksbjbktuzk'], ['xliujofvsajrjsbchs']], [['eello'], ['aahhk'], ['iipps']], [['bc&threquicertthelazydhellog^%'], ['xy&pdnamqeyanppdahwvuzdahhkc^%'], ['fg&xlviuymgivxxlipedchlippsk^%']], [['hi    et a gf hiend'], ['de    ap w cb deajz'], ['lm    ix e kj lmirh']], [['hellond'], ['dahhkjz'], ['lippsrh']], [['hi    etg^f helbcmld'], ['de    apc^b dahxyihz'], ['lm    ixk^j lipfgqph']], [['yzzzzob%zzzzzzzzzzzzzzzzzzzzz'], ['uvvvvkx%vvvvvvvvvvvvvvvvvvvvv'], ['cddddsf%ddddddddddddddddddddd']], [['abcdefghijklmnopqrstuhi'], ['wxyzabcdefghijklmnopqde'], ['efghijklmnopqrstuvwxylm']], [['hi r   et a gf helbcmd&^%lomyfiend'], ['de n   ap w cb dahxyiz&^%hkiubeajz'], ['lm v   ix e kj lipfgqh&^%psqcjmirh']], [['hi r  et helelooa gf helbcmd&^%lomyfriend'], ['de n  ap dahahkkw cb dahxyiz&^%hkiubneajz'], ['lm v  ix lipipsse kj lipfgqh&^%psqcjvmirh']], [['hellomyfrienduvxyzo'], ['dahhkiubneajzqrtuvk'], ['lippsqcjvmirhyzbcds']], [['myhi    et a gf heflbcmhelbcmd&^%lomyfriendd&^%lo cmyfendfriendvwxyz'], ['iude    ap w cb dabhxyidahxyiz&^%hkiubneajzz&^%hk yiubajzbneajzrstuv'], ['qclm    ix e kj lijpfgqlipfgqh&^%psqcjvmirhh&^%ps gqcjirhjvmirhzabcd']], [['thequicwkbrthequicerthelazydogownofoxjheleloompszydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfdahahkkilovuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnlipipssqtwdchs']], [['hielbecmd&^%loomyfriend'], ['deahxayiz&^%hkkiubneajz'], ['lmipfigqh&^%pssqcjvmirh']], [['orlwxyyd'], ['knhstuuz'], ['svpabcch']], [['hello oworrld'], ['dahhk ksknnhz'], ['lipps sasvvph']], [['ggfgf'], ['ccbcb'], ['kkjkj']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzhellogmyfriend&^%lomhizzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvdahhkciubneajz&^%hkidevvvvvvvvvvv'], ['cdcdddddddddddddddddddddddlippskqcjvmirh&^%psqlmddddddddddd']], [['gabcdefghijklmnopqrstuvxyfo%bcdhelhellogfagfgf'], ['cwxyzabcdefghijklmnopqrtubk%xyzdahdahhkcbwcbcb'], ['kefghijklmnopqrstuvwxyzbcjs%fghliplippskjekjkj']], [['gf%^b^c^d&^%'], ['cb%^x^y^z&^%'], ['kj%^f^g^h&^%']], [['thequhelbcmld&i^%loicerthelazy%doag'], ['pdamqdahxyihz&e^%hkeyanpdahwvu%zkwc'], ['xliuylipfgqph&m^%psmgivxlipedc%hsek']], [['hellogymyfriend&^%lomyfriendgthequickbrthequicerthelazydogownfoxjumpsoverthelazydof'], ['dahhkcuiubneajz&^%hkiubneajzcpdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokranpdahwvuzkb'], ['lippskcqcjvmirh&^%psqcjvmirhkxliuymgofvxliuymgivxlipedchsksarjsbnyqtwszivxlipedchsj']], [['abcdetuvxyz'], ['wxyzapqrtuv'], ['efghixyzbcd']], [['hhillogfaell%b^c^d&^d%o'], ['ddehhkcbwahh%x^y^z&^z%k'], ['llmppskjeipp%f^g^h&^h%s']], [['bc&^%uthequicertdhelazydohigheblbcmd&^%lobc&^%'], ['xy&^%qpdamqeyanpzdahwvuzkdecdaxhxyiz&^%hkxy&^%'], ['fg&^%yxliuymgivxhlipedchslmklifpfgqh&^%psfg&^%']], [['rworl'], ['nsknh'], ['vasvp']], [['hellogymyfriend&^%lomyfrriendgf'], ['dahhkcuiubneajz&^%hkiubnneajzcb'], ['lippskcqcjvmirh&^%psqcjvvmirhkj']], [['heflbcmhelbcmd&^%lomyfriendd&^%lo'], ['dabhxyidahxyiz&^%hkiubneajzz&^%hk'], ['lijpfgqlipfgqh&^%psqcjvmirhh&^%ps']], [['bb'], ['xx'], ['ff']], [['worlafbcdefghhelbcmd&^%lomyfriendijklhellogfa'], ['sknhwbxyzabcddahxyiz&^%hkiubneajzefghdahhkcbw'], ['asvpejfghijkllipfgqh&^%psqcjvmirhmnoplippskje']], [['athequicwkbrthequicerthelazydogaownofoxjumpsoverthelazydo'], ['wpdamqeysgxnpdamqeyanpdahwvuzkcwksjkbktfqilokranpdahwvuzk'], ['exliuymgaofvxliuymgivxlipedchskesarsjsbnyqtwszivxlipedchs']], [['ahellogfa'], ['wdahhkcbw'], ['elippskje']], [['hi    et aa gf helbcmhelbcmd&^%lomyfriendd&^%lo myfriend'], ['de    ap ww cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubneajz'], ['lm    ix ee kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjvmirh']], [['worwethorld^%'], ['sknsapdknhz^%'], ['asvaixlsvph^%']], [['hhehi    etabcdefghijklhellogfa  a g^f helbcmldlelooywxys'], ['ddade    apwxyzabcdefghdahhkcbw  w c^b dahxyihzhahkkustuo'], ['llilm    ixefghijklmnoplippskje  e k^j lipfgqphpipsscabcw']], [['g^f'], ['c^b'], ['k^j']], [['abcdefghijklmnopqrstuhi     et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde     ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm     ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['thequickbrthequicqerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeymanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymguivxlipedchsksarjsbnyqtwszipedchs']], [['worlafbcdefghijklhellheyzzzbcdhibc&^%ogfa'], ['sknhwbxyzabcdefghdahhdauvvvxyzdexy&^%kcbw'], ['asvpejfghijklmnoplipplicdddfghlmfg&^%skje']], [['abcdyzzefghijklmnopqrsthi'], ['wxyzuvvabcdefghijklmnopde'], ['efghcddijklmnopqrstuvwxlm']], [['hi%%bc^d&hellogfa worwetbc&thequricertthelazydog^%horld^%'], ['de%%xy^z&dahhkcbw sknsapxy&pdamqneyanppdahwvuzkc^%dknhz^%'], ['lm%%fg^h&lippskje asvaixfg&xliuyvmgivxxlipedchsk^%lsvph^%']], [['o%bcdhe&^%'], ['k%xyzda&^%'], ['s%fghli&^%']], [['%bdcthkbrvownfoxjumpsoverthelazydod&^%'], ['%xzypdgxnrksjbktfqilokranpdahwvuzkz&^%'], ['%fhgxlofvzsarjsbnyqtwszivxlipedchsh&^%']], [['hmyfriendfyfriendelgflo'], ['diubneajzbubneajzahcbhk'], ['lqcjvmirhjcjvmirhipkjps']], [['thequhellogmyfthequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfoiendrtazydog'], ['pdamqdahhkciubpdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbkeajznpwvuzkc'], ['xliuylippskqcjxliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjsmirhvxedchsk']], [['theqcuickbrownfoxjumpsoverthbc&^%thequicerthela^zydoghelbcmd&&^%lobc&^%og'], ['pdamyqeygxnksjbktfqilokranpdxy&^%pdamqeyanpdahw^vuzkcdahxyiz&&^%hkxy&^%kc'], ['xliugymgofvsarjsbnyqtwszivxlfg&^%xliuymgivxlipe^dchsklipfgqh&&^%psfg&^%sk']], [['thequickbrownfoxjumpsovertheloazydfo'], ['pdamqeygxnksjbktfqilokranpdahkwvuzbk'], ['xliuymgofvsarjsbnyqtwszivxlipsedchjs']], [['yzzzz'], ['uvvvv'], ['cdddd']], [['bcddd&^%'], ['xyzzz&^%'], ['fghhh&^%']], [['worwetbc&thequricertthelazydog^%horld^%'], ['sknsapxy&pdamqneyanppdahwvuzkc^%dknhz^%'], ['asvaixfg&xliuyvmgivxxlipedchsk^%lsvph^%']], [['hellogfatoorld'], ['dahhkcbwpkknhz'], ['lippskjexssvph']], [['theqcuickbrownfoxjumheleloopsooverthelazbydog'], ['pdamyqeygxnksjbktfqidahahkklokkranpdahwvxuzkc'], ['xliugymgofvsarjsbnyqlipipsstwsszivxlipedfchsk']], [['hi    et a gf hethequickborownfoxydolbcd&^%lomyfriend'], ['de    ap w cb dapdamqeygxknksjbktuzkhxyz&^%hkiubneajz'], ['lm    ix e kj lixliuymgofsvsarjsbchspfgh&^%psqcjvmirh']], [['woworwethorlldrwlwxd'], ['sksknsapdknhhznshstz'], ['asasvaixlsvpphvapabh']], [['theqcrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamynksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['heflbklmnopqrsthilomyfrien'], ['dabhxghijklmnopdehkiubneaj'], ['lijpfopqrstuvwxlmpsqcjvmir']], [['hi    ehellot a gf helahelthequickbrownfoxydolhilogmyfriend'], ['de    adahhkp w cb dahwdahpdamqeygxnksjbktuzkhdehkciubneajz'], ['lm    ilippsx e kj lipelipxliuymgofvsarjsbchsplmpskqcjvmirh']], [['helbcml'], ['dahxyih'], ['lipfgqp']], [['hellogmyfriithequiend&^%lomhi'], ['dahhkciubneepdamqeajz&^%hkide'], ['lippskqcjvmmxliuymirh&^%psqlm']], [['helbc%bc^d&^%d&^%lommworwethorld^%y'], ['dahxy%xy^z&^%z&^%hkiisknsapdknhz^%u'], ['lipfg%fg^h&^%h&^%psqqasvaixlsvph^%c']], [['wxabcdefghijklmnopqrstuhi'], ['stwxyzabcdefghijklmnopqde'], ['abefghijklmnopqrstuvwxylm']], [['afbcdefghijklhellogfa xyz'], ['wbxyzabcdefghdahhkcbw tuv'], ['ejfghijklmnoplippskje bcd']], [['abcdefghijklhellogfa'], ['wxyzabcdefghdahhkcbw'], ['efghijklmnoplippskje']], [['hwelhellogfa wethorldlogfa wethorldd'], ['dsahdahhkcbw sapdknhzhkcbw sapdknhzz'], ['laiplippskje aixlsvphpskje aixlsvphh']], [['bc&^%thequicerth^elazydogbc&^%'], ['xy&^%pdamqeyanpd^ahwvuzkcxy&^%'], ['fg&^%xliuymgivxl^ipedchskfg&^%']], [['h ello oworrld'], ['d ahhk ksknnhz'], ['l ipps sasvvph']], [['ggherthelazydou%lomylhello'], ['ccdanpdahwvuzkq%hkiuhdahhk'], ['kklivxlipedchsy%psqcplipps']], [['%bcdhelwxyl&o&^%'], ['%xyzdahstuh&k&^%'], ['%fghlipabcp&s&^%']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzztheqcuickabcdefghihjklmnopqrstuvxyzbrownfoxjumpsoverthelhellzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvpdamyqeygwxyzabcdedfghijklmnopqrtuvxnksjbktfqilokranpdahdahhvv'], ['cdcdddddddddddddddddddddddddddddxliugymgoefghijklmlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippdd']], [['abacdefghijklmnopqrstuvwxyz'], ['wxwyzabcdefghijklmnopqrstuv'], ['efeghijklmnopqrstuvwxyzabcd']], [['thequickbrownftheqcuickabcdefghihjklmno%bcdhethequieceurtthelazydogydogoxjumpsoverthelazyd'], ['pdamqeygxnksjbpdamyqeygwxyzabcdedfghijk%xyzdapdamqeayaqnppdahwvuzkcuzkcktfqilokranpdahwvuz'], ['xliuymgofvsarjxliugymgoefghijklmlnopqrs%fghlixliuymigiyvxxlipedchskchsksbnyqtwszivxlipedch']], [['thheflbcmhelbcmd&^%lomyfriendd&^%louiceurtazydog'], ['pddabhxyidahxyiz&^%hkiubneajzz&^%hkqeyaqnpwvuzkc'], ['xllijpfgqlipfgqh&^%psqcjvmirhh&^%psymgiyvxedchsk']], [['abcdefghijklmnopqrstuvxyo%bcdxhelwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyztdahstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghblipabcps&^%d']], [['hefmnopqrsthilomyfrien'], ['dabijklmnopdehkiubneaj'], ['lijqrstuvwxlmpsqcjvmir']], [['zyzzz'], ['vuvvv'], ['dcddd']], [['lomyfriend&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['hkiubneajz&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['psqcjvmirh&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']]], [[['hi'], ['de'], ['lm']], [['asdfghjkl'], ['wozbcdfgh'], ['ewhjklnop']], [['gf'], ['cb'], ['kj']], [['et'], ['ap'], ['ix']], [['faewfawefaewg'], ['bwasbwsabwasc'], ['jeiajeaijeiak']], [['hellomyfriend'], ['dahhkiubneajz'], ['lippsqcjvmirh']], [['dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'], ['ztvzhijehbqdiehqbdhedqbjiheijqbdheijqbdbqyqbd'], ['hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl']], [['a'], ['w'], ['e']], [['abcde'], ['wxyza'], ['efghi']], [['uvwxyz'], ['qrstuv'], ['yzabcd']], [['test123'], ['paop123'], ['xiwx123']], [['1a2b3c'], ['1w2x3y'], ['1e2f3g']], [['hello world'], ['dahhk sknhz'], ['lipps asvph']], [['monitor'], ['ikjepkn'], ['qsrmxsv']], [['abc'], ['wxy'], ['efg']], [['kmt'], ['gip'], ['oqx']], [['park'], ['lwng'], ['tevo']], [['mtkmt'], ['ipgip'], ['qxoqx']], [['testpark123'], ['paoplwng123'], ['xiwxtevo123']], [['uvuvwxyzwxyz'], ['qrqrstuvstuv'], ['yzyzabcdabcd']], [['abcdetest123'], ['wxyzapaop123'], ['efghixiwx123']], [['testpark1233'], ['paoplwng1233'], ['xiwxtevo1233']], [['parrte1a2b3cstpark123'], ['lwnnpa1w2x3yoplwng123'], ['tevvxi1e2f3gwxtevo123']], [['pamonitork'], ['lwikjepkng'], ['teqsrmxsvo']], [['uvwabcxyuz'], ['qrswxytuqv'], ['yzaefgbcyd']], [['uvuvwxyzwxz'], ['qrqrstuvstv'], ['yzyzabcdabd']], [['t'], ['p'], ['x']], [['uvz'], ['qrv'], ['yzd']], [['kuvz'], ['gqrv'], ['oyzd']], [['kkuvz'], ['ggqrv'], ['ooyzd']], [['abct'], ['wxyp'], ['efgx']], [['tes2tpark1233'], ['pao2plwng1233'], ['xiw2xtevo1233']], [['at'], ['wp'], ['ex']], [['tkmtkmtuvwabcxyuzmt'], ['pgipgipqrswxytuqvip'], ['xoqxoqxyzaefgbcydqx']], [['uvuvwxyzwxzyz'], ['qrqrstuvstvuv'], ['yzyzabcdabdcd']], [['tkmtkmtuvwabuvuvwxyzwxzcxyuzmt'], ['pgipgipqrswxqrqrstuvstvytuqvip'], ['xoqxoqxyzaefyzyzabcdabdgbcydqx']], [['tsest123'], ['poaop123'], ['xwiwx123']], [['uvutvwxyzwxzyz'], ['qrqprstuvstvuv'], ['yzyxzabcdabdcd']], [['uvwparrkxyz'], ['qrslwnngtuv'], ['yzatevvobcd']], [['tsest123aparrte1a2b3cstpark123'], ['poaop123wlwnnpa1w2x3yoplwng123'], ['xwiwx123etevvxi1e2f3gwxtevo123']], [['abctabcde'], ['wxypwxyza'], ['efgxefghi']], [['tes2testpark123tpark1233'], ['pao2paoplwng123plwng1233'], ['xiw2xiwxtevo123xtevo1233']], [['uvwabbczxyuz'], ['qrswxxyvtuqv'], ['yzaeffgdbcyd']], [['uvvz'], ['qrrv'], ['yzzd']], [['tsest123aparrte1a2b3cstpatrk123'], ['poaop123wlwnnpa1w2x3yoplwpng123'], ['xwiwx123etevvxi1e2f3gwxtexvo123']], [['paabctak'], ['lwwxypwg'], ['teefgxeo']], [['zz'], ['vv'], ['dd']], [['pararte1a2b3cstpark123'], ['lwnwnpa1w2x3yoplwng123'], ['tevevxi1e2f3gwxtevo123']], [['pamonintork'], ['lwikjejpkng'], ['teqsrmrxsvo']], [['uvutvwxyzwxzyzabckuvz'], ['qrqprstuvstvuvwxygqrv'], ['yzyxzabcdabdcdefgoyzd']], [['uvutvwzzxyzwxzyz'], ['qrqprsvvtuvstvuv'], ['yzyxzaddbcdabdcd']], [['tabcdtabcde'], ['pwxyzpwxyza'], ['xefghxefghi']], [['uvwxwyz'], ['qrstsuv'], ['yzabacd']], [['aabcde'], ['wwxyza'], ['eefghi']], [['cpararte1a2b3cstpark1abct23'], ['ylwnwnpa1w2x3yoplwng1wxyp23'], ['gtevevxi1e2f3gwxtevo1efgx23']], [['tse3st23'], ['poa3op23'], ['xwi3wx23']], [['mtuvwxyzkmt'], ['ipqrstuvgip'], ['qxyzabcdoqx']], [['tsest123aparrte1a2b3cstapark123'], ['poaop123wlwnnpa1w2x3yopwlwng123'], ['xwiwx123etevvxi1e2f3gwxetevo123']], [['cpaararuvvzte1a2b3cstpark1abct23'], ['ylwwnwnqrrvpa1w2x3yoplwng1wxyp23'], ['gteevevyzzdxi1e2f3gwxtevo1efgx23']], [['tse32st23'], ['poa32op23'], ['xwi32wx23']], [['uvutvwxyzwxzyzabckumtkmtvz'], ['qrqprstuvstvuvwxygqipgiprv'], ['yzyxzabcdabdcdefgoyqxoqxzd']], [['uvwaubcxyuz'], ['qrswqxytuqv'], ['yzaeyfgbcyd']], [['abuvutvwxyzwxzyzabckuvzct'], ['wxqrqprstuvstvuvwxygqrvyp'], ['efyzyxzabcdabdcdefgoyzdgx']], [['tes2testppark1233'], ['pao2paopllwng1233'], ['xiw2xiwxttevo1233']], [['uvwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz'], ['qrstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv'], ['yzabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad']], [['xuvuvwxyzwxzyz'], ['tqrqrstuvstvuv'], ['byzyzabcdabdcd']], [['wuvwxyz'], ['sqrstuv'], ['ayzabcd']], [['aabdcde'], ['wwxzyza'], ['eefhghi']], [['uvwxyzwxyz'], ['qrstuvstuv'], ['yzabcdabcd']], [['cpararte1a2b3cstpark1abctuvwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz23'], ['ylwnwnpa1w2x3yoplwng1wxypqrstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv23'], ['gtevevxi1e2f3gwxtevo1efgxyzabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad23']], [['tkumtkmtuvwabuvuvwxyzwxzcxyuzmt'], ['pgqipgipqrswxqrqrstuvstvytuqvip'], ['xoyqxoqxyzaefyzyzabcdabdgbcydqx']], [['uvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywz'], ['qrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusv'], ['yzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcad']], [['wuvwxyzz'], ['sqrstuvv'], ['ayzabcdd']], [['xzyzabckumtkmtvz'], ['tvuvwxygqipgiprv'], ['bdcdefgoyqxoqxzd']], [['zzz'], ['vvv'], ['ddd']], [['ts2e3st23'], ['po2a3op23'], ['xw2i3wx23']], [['uvzmonitorz'], ['qrvikjepknv'], ['yzdqsrmxsvd']], [['t3se3'], ['p3oa3'], ['x3wi3']], [['uvutvwzzxz'], ['qrqprsvvtv'], ['yzyxzaddbd']], [['uvuvzwxyzwxz'], ['qrqrvstuvstv'], ['yzyzdabcdabd']], [['cpararteuvwxwyz1a2b3cstpark1abct23'], ['ylwnwnpaqrstsuv1w2x3yoplwng1wxyp23'], ['gtevevxiyzabacd1e2f3gwxtevo1efgx23']], [['stsest123'], ['opoaop123'], ['wxwiwx123']], [['tsest123aparrte1a2b3cstapark1213'], ['poaop123wlwnnpa1w2x3yopwlwng1213'], ['xwiwx123etevvxi1e2f3gwxetevo1213']], [['uvutvwvxyzwxzuvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywz'], ['qrqprsrtuvstvqrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusv'], ['yzyxzazbcdabdyzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcad']], [['kparrte1a2b3cstpark123'], ['glwnnpa1w2x3yoplwng123'], ['otevvxi1e2f3gwxtevo123']], [['pamonintorkpamonitoork'], ['lwikjejpknglwikjepkkng'], ['teqsrmrxsvoteqsrmxssvo']], [['tsestcpararte1a2b3cstpark1abct23123apa3'], ['poaopylwnwnpa1w2x3yoplwng1wxyp23123wlw3'], ['xwiwxgtevevxi1e2f3gwxtevo1efgx23123ete3']], [['abctest123'], ['wxypaop123'], ['efgxiwx123']], [['xzyzauvwxyzwxyzbckumtzkmtvz'], ['tvuvwqrstuvstuvxygqipvgiprv'], ['bdcdeyzabcdabcdfgoyqxdoqxzd']], [['1testpark1233'], ['1paoplwng1233'], ['1xiwxtevo1233']], [['tse32st233'], ['poa32op233'], ['xwi32wx233']], [['testtpark'], ['paopplwng'], ['xiwxxtevo']], [['abuvutvwxystsest123zwxzyzabckuvzct'], ['wxqrqprstuopoaop123vstvuvwxygqrvyp'], ['efyzyxzabcwxwiwx123dabdcdefgoyzdgx']], [['kmuvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywzt'], ['giqrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusvp'], ['oqyzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcadx']], [['xzyzabckumtkmtvzz'], ['tvuvwxygqipgiprvv'], ['bdcdefgoyqxoqxzdd']], [['uvuvwxyzzyzpamonitork'], ['qrqrstuvvuvlwikjepkng'], ['yzyzabcddcdteqsrmxsvo']], [['ut3se3vwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz'], ['qp3oa3rstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv'], ['yx3wi3zabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad']], [['abuvutvwxyzwxvzyzabckuvzct'], ['wxqrqprstuvstrvuvwxygqrvyp'], ['efyzyxzabcdabzdcdefgoyzdgx']], [['monitormuvvztkmt'], ['ikjepkniqrrvpgip'], ['qsrmxsvqyzzdxoqx']], [['uvxwpuvuvwxyzwxyzarrkxyz'], ['qrtslqrqrstuvstuvwnngtuv'], ['yzbatyzyzabcdabcdevvobcd']], [['uvwxzwyz'], ['qrstvsuv'], ['yzabdacd']], [['monitomrmuvvztkmt'], ['ikjepkiniqrrvpgip'], ['qsrmxsqvqyzzdxoqx']], [['parrte1a2b3cstpark123uvwabcxyuzuvwaxbbczxyuz'], ['lwnnpa1w2x3yoplwng123qrswxytuqvqrswtxxyvtuqv'], ['tevvxi1e2f3gwxtevo123yzaefgbcydyzaebffgdbcyd']], [['uvutvwxyzwxzyzabckuvzabctest123'], ['qrqprstuvstvuvwxygqrvwxypaop123'], ['yzyxzabcdabdcdefgoyzdefgxiwx123']], [['parkk'], ['lwngg'], ['tevoo']], [['uvwabbcxzxyuz'], ['qrswxxytvtuqv'], ['yzaeffgbdbcyd']], [['parrte1a2b3cst2park123'], ['lwnnpa1w2x3yop2lwng123'], ['tevvxi1e2f3gwx2tevo123']], [['bcd&^%'], ['xyz&^%'], ['fgh&^%']], [['thequickbrownfoxjumpsoverthelazydog'], ['pdamqeygxnksjbktfqilokranpdahwvuzkc'], ['xliuymgofvsarjsbnyqtwszivxlipedchsk']], [['abcdefghijklmnopqrstuvwxyz'], ['wxyzabcdefghijklmnopqrstuv'], ['efghijklmnopqrstuvwxyzabcd']], [['wxy'], ['stu'], ['abc']], [['yzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cddddddddddddddddddddddddd']], [['hi    et a gf hellomyfriend'], ['de    ap w cb dahhkiubneajz'], ['lm    ix e kj lippsqcjvmirh']], [['thequickbrownfoxjumpsoverthelazydo'], ['pdamqeygxnksjbktfqilokranpdahwvuzk'], ['xliuymgofvsarjsbnyqtwszivxlipedchs']], [['hi    et a gf hellomyfrienhellod'], ['de    ap w cb dahhkiubneajdahhkz'], ['lm    ix e kj lippsqcjvmirlippsh']], [['et'], ['ap'], ['ix']], [['hello'], ['dahhk'], ['lipps']], [['wxxy'], ['sttu'], ['abbc']], [['ho'], ['dk'], ['ls']], [['helo'], ['dahk'], ['lips']], [['heti    get a gf hellomyfrienhellod'], ['dape    cap w cb dahhkiubneajdahhkz'], ['lixm    kix e kj lippsqcjvmirlippsh']], [['helothequickbrownfoxjumpsoverthelazydo'], ['dahkpdamqeygxnksjbktfqilokranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwszivxlipedchs']], [['yzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdddddddddddddddddddddddddd']], [['hbcd&^%elo'], ['dxyz&^%ahk'], ['lfgh&^%ips']], [['b&cd&^'], ['x&yz&^'], ['f&gh&^']], [['ythequickbrownfoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszivxlipedchs']], [['hello heloworld'], ['dahhk dahksknhz'], ['lipps lipsasvph']], [['heloworld'], ['dahksknhz'], ['lipsasvph']], [['abcdefghijklmnopqrstuvwxyzythequickbrownfoxjumpsoverthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqilokranpdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqtwszivxlipedchs']], [['hi    et a rgf hellomyfrienhellod'], ['de    ap w ncb dahhkiubneajdahhkz'], ['lm    ix e vkj lippsqcjvmirlippsh']], [['heti    get a gf hellomyferienhellod'], ['dape    cap w cb dahhkiubaneajdahhkz'], ['lixm    kix e kj lippsqcjivmirlippsh']], [['hi    et a gf helloetmyfrienhellod'], ['de    ap w cb dahhkapiubneajdahhkz'], ['lm    ix e kj lippsixqcjvmirlippsh']], [['hi'], ['de'], ['lm']], [['thi    et a gf helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydog'], ['pde    ap w cb dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkc'], ['xlm    ix e kj lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchsk']], [['rgf'], ['ncb'], ['vkj']], [['abcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['helothequickbrownfoxumpsoverthelazydo'], ['dahkpdamqeygxnksjbktqilokranpdahwvuzk'], ['lipsxliuymgofvsarjsbyqtwszivxlipedchs']], [['abcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoe'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsi']], [['helothequickbrownfoxumpsovekrthelazydo'], ['dahkpdamqeygxnksjbktqilokragnpdahwvuzk'], ['lipsxliuymgofvsarjsbyqtwsziovxlipedchs']], [['helothequickbrownfoxjumpsgetoverthelazydo'], ['dahkpdamqeygxnksjbktfqilocapkranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkixszivxlipedchs']], [['hi    et  a gf hellomyfrienhellod'], ['de    ap  w cb dahhkiubneajdahhkz'], ['lm    ix  e kj lippsqcjvmirlippsh']], [['yywxy'], ['uustu'], ['ccabc']], [['ythequickbrownfhi    et a gf hellomyfriendoxjumpsoverthelazydo'], ['updamqeygxnksjbde    ap w cb dahhkiubneajzktfqilokranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lippsqcjvmirhsbnyqtwszivxlipedchs']], [['hi    etrgf hhellomyfrienhellod'], ['de    apncb ddahhkiubneajdahhkz'], ['lm    ixvkj llippsqcjvmirlippsh']], [['hhellomyfrienhellod'], ['ddahhkiubneajdahhkz'], ['llippsqcjvmirlippsh']], [['abcdefghijfklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefbghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnjopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['hellomyfriendoxjumpsoverthelazydo'], ['dahhkiubneajzktfqilokranpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszivxlipedchs']], [['thequickbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['heti    get a gf hellomyfrieonhellod'], ['dape    cap w cb dahhkiubneakjdahhkz'], ['lixm    kix e kj lippsqcjvmisrlippsh']], [['hi    et a gf hellomyfrienhellood'], ['de    ap w cb dahhkiubneajdahhkkz'], ['lm    ix e kj lippsqcjvmirlippssh']], [['yywx'], ['uust'], ['ccab']], [['ythequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['updamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['helowythequickbrownfhiorld'], ['dahksupdamqeygxnksjbdeknhz'], ['lipsacxliuymgofvsarjlmsvph']], [['wxxyy'], ['sttuu'], ['abbcc']], [['hi    let a gf hellomyfriend'], ['de    hap w cb dahhkiubneajz'], ['lm    pix e kj lippsqcjvmirh']], [['yzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdddddddddddddddddddddddd']], [['hhellomyfrinhellod'], ['ddahhkiubnejdahhkz'], ['llippsqcjvmrlippsh']], [['hellomyfrienhellodrownfoxjumpsoverthelazydojumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwszivxlipedchs']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogod'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckz'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchsksh']], [['hi    et a gf hellomyfrie'], ['de    ap w cb dahhkiubnea'], ['lm    ix e kj lippsqcjvmi']], [['ythequickbrownfhi'], ['updamqeygxnksjbde'], ['cxliuymgofvsarjlm']], [['heti    get a gf hellomyfrieonhello d'], ['dape    cap w cb dahhkiubneakjdahhk z'], ['lixm    kix e kj lippsqcjvmisrlipps h']], [['gf'], ['cb'], ['kj']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsibcc']], [['heti    get a mgf hellomyfrienhellod'], ['dape    cap w icb dahhkiubneajdahhkz'], ['lixm    kix e qkj lippsqcjvmirlippsh']], [['hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['eetrgft'], ['aapncbp'], ['iixvkjx']], [['eetrgf'], ['aapncb'], ['iixvkj']], [['hellomyferienhellod'], ['dahhkiubaneajdahhkz'], ['lippsqcjivmirlippsh']], [['b&helothequickbrownfoxjumpsgetoverthelazydocd&^'], ['x&dahkpdamqeygxnksjbktfqilocapkranpdahwvuzkyz&^'], ['f&lipsxliuymgofvsarjsbnyqtwkixszivxlipedchsgh&^']], [['hi    et a gf helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellod'], ['de    ap w cb dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['hi    et a gf hellomyfrienheod'], ['de    ap w cb dahhkiubneajdakz'], ['lm    ix e kj lippsqcjvmirlish']], [['yywxxy'], ['uusttu'], ['ccabbc']], [['helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['ohhellomyfrienhellod'], ['kddahhkiubneajdahhkz'], ['sllippsqcjvmirlippsh']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupmpsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytqtwszivxlipedchsibcc']], [['a'], ['w'], ['e']], [['hello heloworlthequickbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['dahhk dahksknhpdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['lipps lipsasvpxliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['ohhellomyfriend'], ['kddahhkiubneajz'], ['sllippsqcjvmirh']], [['hellomyfrienheod'], ['dahhkiubneajdakz'], ['lippsqcjvmirlish']], [['wolrld'], ['skhnhz'], ['aspvph']], [['hi    et a gf helloetmthelquickbrownfoxjumpsoverthelazydoyfrienhellod'], ['de    ap w cb dahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['heloworlthequickbheti'], ['dahksknhpdamqeygxdape'], ['lipsasvpxliuymgoflixm']], [['ergft'], ['ancbp'], ['ivkjx']], [['hel'], ['dah'], ['lip']], [['tlet'], ['phap'], ['xpix']], [['hi    letheti    get a gf hellomyfrieonhello df hellomyfriend'], ['de    hapdape    cap w cb dahhkiubneakjdahhk zb dahhkiubneajz'], ['lm    pixlixm    kix e kj lippsqcjvmisrlipps hj lippsqcjvmirh']], [['abcdefghijfklmnopeetrgftqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefbghijklaapncbpmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnjopqrstiixvkjxuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['hi    et a rgf hellomyfrienhelb&cd&^lod'], ['de    ap w ncb dahhkiubneajdahx&yz&^hkz'], ['lm    ix e vkj lippsqcjvmirlipf&gh&^psh']], [['hellomyfrienhelb&cd&^lod'], ['dahhkiubneajdahx&yz&^hkz'], ['lippsqcjvmirlipf&gh&^psh']], [['helowythehquickbrownfhhiorld'], ['dahksupdadmqeygxnksjbddeknhz'], ['lipsacxliluymgofvsarjllmsvph']], [['ohhelyfrienhellod'], ['kddahubneajdahhkz'], ['sllipcjvmirlippsh']], [['hi    ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de    ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['bythequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo&cd&d^'], ['xupdamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk&yz&z^'], ['fcxliuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs&gh&h^']], [['hellomyfrienhellod'], ['dahhkiubneajdahhkz'], ['lippsqcjvmirlippsh']], [['hi    et a ohhellomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['eeetrgft'], ['aaapncbp'], ['iiixvkjx']], [['hellomyfriendoxjumpsovelrthelazydo'], ['dahhkiubneajzktfqilokrahnpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszipvxlipedchs']], [['hellomyfrienhellood'], ['dahhkiubneajdahhkkz'], ['lippsqcjvmirlippssh']], [['ythequickbrownfoxthequickbheti'], ['updamqeygxnksjbktpdamqeygxdape'], ['cxliuymgofvsarjsbxliuymgoflixm']], [['hellomyfrietrgf'], ['dahhkiubneapncb'], ['lippsqcjvmixvkj']], [['hellomyfrieonhello'], ['dahhkiubneakjdahhk'], ['lippsqcjvmisrlipps']], [['ehel'], ['adah'], ['ilip']], [['helflomyfrietrgf'], ['dahbhkiubneapncb'], ['lipjpsqcjvmixvkj']], [['hhellyomyfrienhellod'], ['ddahhukiubneajdahhkz'], ['llippcsqcjvmirlippsh']], [['helloetmthelquickbrownfoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['ythehelloetmthelquickbrownfoxjumpsoverthelazydoyienhellodnfhi'], ['updadahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkueajdahhkzjbde'], ['cxlilippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscmirlippshrjlm']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsovierthi'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokreanpde'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszmivxlm']], [['heti    get a gfrieonhello d'], ['dape    cap w cbneakjdahhk z'], ['lixm    kix e kjvmisrlipps h']], [['eeet'], ['aaap'], ['iiix']], [['hi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellod'], ['de    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippsh']], [['hi    et ehia rgf hellomyfrienhellod'], ['de    ap adew ncb dahhkiubneajdahhkz'], ['lm    ix ilme vkj lippsqcjvmirlippsh']], [['let'], ['hap'], ['pix']], [['hellomyfriendoxjumpsovelrathelazydo'], ['dahhkiubneajzktfqilokrahnwpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszipvexlipedchs']], [['hi    et a gf helloetmyfrienhellothequickbhetid'], ['de    ap w cb dahhkapiubneajdahhkpdamqeygxdapez'], ['lm    ix e kj lippsixqcjvmirlippsxliuymgoflixmh']], [['heti    get a mgf hehi    et ehia rgf hellomyfrienhellodllomyfrienhellod'], ['dape    cap w icb dade    ap adew ncb dahhkiubneajdahhkzhhkiubneajdahhkz'], ['lixm    kix e qkj lilm    ix ilme vkj lippsqcjvmirlippshppsqcjvmirlippsh']], [['helloomyfrienheod'], ['dahhkkiubneajdakz'], ['lippssqcjvmirlish']], [['hi   helowythehquickbrownfhhiorld ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de   dahksupdadmqeygxnksjbddeknhz ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm   lipsacxliluymgofvsarjllmsvph ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['hello heloworlthequickbheti    get a gf hellomyfrienhellodrownfoxjumpsothequickbhetiverthelazydo'], ['dahhk dahksknhpdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokpdamqeygxdaperanpdahwvuzk'], ['lipps lipsasvpxliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwsxliuymgoflixmzivxlipedchs']], [['abcdefghijklmnopqrstuvwxyzythequickbrownfoxjumpsoveletthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqilokrahappdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqtwszipixxlipedchs']], [['d'], ['z'], ['h']], [['hi    et a ohhelolomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w kddahkhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e sllipspsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['hellomyfrienhellodllomyfrienhellod'], ['dahhkiubneajdahhkzhhkiubneajdahhkz'], ['lippsqcjvmirlippshppsqcjvmirlippsh']], [['hhelothequickbrownfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksjbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsarjsbyqtwsziovxlipedchs']], [['heti    get a mgf hehi   e et ehia rgf hellomyfrienhellodllomyfrhoienhellod'], ['dape    cap w icb dade   a ap adew ncb dahhkiubneajdahhkzhhkiubndkeajdahhkz'], ['lixm    kix e qkj lilm   i ix ilme vkj lippsqcjvmirlippshppsqcjvlsmirlippsh']], [['helll'], ['dahhh'], ['lippp']], [['helothequickbrownfoxjumpsgetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqilocapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkixszilvxlipedchs']], [['hellthi'], ['dahhpde'], ['lippxlm']], [['hellomyfrrienhelb&cd&^lod'], ['dahhkiubnneajdahx&yz&^hkz'], ['lippsqcjvvmirlipf&gh&^psh']], [['yzzzzzzzzzzzzzzzzzzzzzzzzhel'], ['uvvvvvvvvvvvvvvvvvvvvvvvvdah'], ['cddddddddddddddddddddddddlip']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmirlippsh']], [['hellomyfrieendoxjumpsovelrthelazydo'], ['dahhkiubneaajzktfqilokrahnpdahwvuzk'], ['lippsqcjvmiirhsbnyqtwszipvxlipedchs']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogodoworld'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhz'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchskshsasvph']], [['ythequickbrownfhi    et a gf hellomyfriendoxjumpsojverthelazydo'], ['updamqeygxnksjbde    ap w cb dahhkiubneajzktfqilokfranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lippsqcjvmirhsbnyqtwsnzivxlipedchs']], [['hellomyfrienhellodllomyfrhoienhellod'], ['dahhkiubneajdahhkzhhkiubndkeajdahhkz'], ['lippsqcjvmirlippshppsqcjvlsmirlippsh']], [['woolrld'], ['skkhnhz'], ['asspvph']], [['bcd'], ['xyz'], ['fgh']], [['hellomyfergetienhellod'], ['dahhkiubancapeajdahhkz'], ['lippsqcjivkixmirlippsh']], [['bcdhellomyfrienhelb&cd&^lod'], ['xyzdahhkiubneajdahx&yz&^hkz'], ['fghlippsqcjvmirlipf&gh&^psh']], [['helothequickbrowonfoxumpsovekrthelazydo'], ['dahkpdamqeygxnkskjbktqilokragnpdahwvuzk'], ['lipsxliuymgofvsasrjsbyqtwsziovxlipedchs']], [['hhellomyfriod'], ['ddahhkiubnekz'], ['llippsqcjvmsh']], [['mgf'], ['icb'], ['qkj']], [['etrf'], ['apnb'], ['ixvj']], [['helhi'], ['dahde'], ['liplm']], [['bcd&%'], ['xyz&%'], ['fgh&%']], [['hhi    et a ohhellomyfrienhellodrgf hellomyfrienhellodellomyfrienhellood'], ['dde    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkzahhkiubneajdahhkkz'], ['llm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippshippsqcjvmirlippssh']], [['e'], ['a'], ['i']], [['hi    et a rgf hellomyfrienhelb&cd&^llod'], ['de    ap w ncb dahhkiubneajdahx&yz&^hhkz'], ['lm    ix e vkj lippsqcjvmirlipf&gh&^ppsh']], [['bcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lod'], ['xyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkz'], ['fghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^psh']], [['wwxy'], ['sstu'], ['aabc']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoi    t a gf hellomyfrieonhello d'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzke    p w cb dahhkiubneakjdahhk z'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsm    x e kj lippsqcjvmisrlipps h']], [['hlelll'], ['dhahhh'], ['lpippp']], [['eheel'], ['adaah'], ['iliip']], [['heti    get a gfrieonhello helothequickbrownfoxumpsovekrthelazydod'], ['dape    cap w cbneakjdahhk dahkpdamqeygxnksjbktqilokragnpdahwvuzkz'], ['lixm    kix e kjvmisrlipps lipsxliuymgofvsarjsbyqtwsziovxlipedchsh']], [['heolo'], ['dakhk'], ['lisps']], [['ehelhellomyfrienhelb&cd&^lod'], ['adahdahhkiubneajdahx&yz&^hkz'], ['iliplippsqcjvmirlipf&gh&^psh']], [['helloetmyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthigfthequickbhetid'], ['dahhkapiubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdecbpdamqeygxdapez'], ['lippsixqcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmkjxliuymgoflixmh']], [['ehelloetmyfrthirgft'], ['adahhkapiubnpdencbp'], ['ilippsixqcjvxlmvkjx']], [['helbcd&^%lomyfriendoxhi    etrgf hhellomyfrienhellodjumpsoverthelawwxyzydo&cd&d^'], ['dahxyz&^%hkiubneajzktde    apncb ddahhkiubneajdahhkzfqilokranpdahwsstuvuzk&yz&z^'], ['lipfgh&^%psqcjvmirhsblm    ixvkj llippsqcjvmirlippshnyqtwszivxlipeaabcdchs&gh&h^']], [['ohhelolomyfrienhellodrgf'], ['kddahkhkiubneajdahhkzncb'], ['sllipspsqcjvmirlippshvkj']], [['thequickbrownfoxjumpsoverthi    et a gf helloetmyfrienhellodhelazydo'], ['pdamqeygxnksjbktfqilokranpde    ap w cb dahhkapiubneajdahhkzdahwvuzk'], ['xliuymgofvsarjsbnyqtwszivxlm    ix e kj lippsixqcjvmirlippshlipedchs']], [['helloetmyfrienhellothequickbhetid'], ['dahhkapiubneajdahhkpdamqeygxdapez'], ['lippsixqcjvmirlippsxliuymgoflixmh']], [['trhequickbrownfoxjumpsoverthelazydog'], ['pndamqeygxnksjbktfqilokranpdahwvuzkc'], ['xvliuymgofvsarjsbnyqtwszivxlipedchsk']], [['hellomyfriendoxjumpsojverthelazydo'], ['dahhkiubneajzktfqilokfranpdahwvuzk'], ['lippsqcjvmirhsbnyqtwsnzivxlipedchs']], [['eeetrgfthellomyfrienhellodrownfoxjumpsoverthelazydo'], ['aaapncbpdahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['iiixvkjxlippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['gfrieonhello'], ['cbneakjdahhk'], ['kjvmisrlipps']], [['heloo'], ['dahkk'], ['lipss']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrienhellodget'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneajdahhkzcap'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmirlippshkix']], [['helloomyfrienhhi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellodeod'], ['dahhkkiubneajdde    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkzakz'], ['lippssqcjvmirllm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippshish']], [['ehellgft'], ['adahhcbp'], ['ilippkjx']], [['hehi    et a ohhelolomyfrienhellodrgf hellomyfrienhellodlflomyfrietrgf'], ['dade    ap w kddahkhkiubneajdahhkzncb dahhkiubneajdahhkzhbhkiubneapncb'], ['lilm    ix e sllipspsqcjvmirlippshvkj lippsqcjvmirlippshpjpsqcjvmixvkj']], [['hello wlorld'], ['dahhk shknhz'], ['lipps apsvph']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodhelazydoexyy'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzdahwvuzkatuu'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshlipedchsibcc']], [['abcdefghijklmnopqrsquickbrownfoxjumpsovferthelazydo'], ['wxyzabcdefghijklmnomqeygxnksjbktfqilokrbanpdahwvuzk'], ['efghijklmnopqrstuvwuymgofvsarjsbnyqtwszjivxlipedchs']], [['helloetmyfrienhellod'], ['dahhkapiubneajdahhkz'], ['lippsixqcjvmirlippsh']], [['hi    helotheqolod'], ['de    dahkpdamkhkz'], ['lm    lipsxliuspsh']], [['wxabcdefghijklmoxjumpsoverthelazydoexyy'], ['stwxyzabcdefghiktfqilokranpdahwvuzkatuu'], ['abefghijklmnopqsbnyqtwszivxlipedchsibcc']], [['thequickbrownfoxjumpsovertheazydo'], ['pdamqeygxnksjbktfqilokranpdawvuzk'], ['xliuymgofvsarjsbnyqtwszivxliedchs']], [['hi    et ehia rgf hfrienhehellomyfrienhellodrownfoxjumpsoverthelazydojumpsoverthelazydollod'], ['de    ap adew ncb dbneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilokranpdahwvuzkhhkz'], ['lm    ix ilme vkj ljvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwszivxlipedchsppsh']], [['abcdefghijfklmnopeetrgftqazydo'], ['wxyzabcdefbghijklaapncbpmwvuzk'], ['efghijklmnjopqrstiixvkjxuedchs']], [['helothequickbrownfonxjumpsgetoverthelazydo'], ['dahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzk'], ['lipsxliuymgofvsarjsrbnyqtwkixszivxlipedchs']], [['hellomyfrie'], ['dahhkiubnea'], ['lippsqcjvmi']], [['eehia'], ['aadew'], ['iilme']], [['bcohhellomyfrienhellodd'], ['xykddahhkiubneajdahhkzz'], ['fgsllippsqcjvmirlippshh']], [['helbcdhhellyomyfrienhellod&^%lomyfriendoxjumpsoverthelazydo&cd&d^'], ['dahxyzddahhukiubneajdahhkz&^%hkiubneajzktfqilokranpdahwvuzk&yz&z^'], ['lipfghllippcsqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxlipedchs&gh&h^']], [['hellomyfergetienhelllod'], ['dahhkiubancapeajdahhhkz'], ['lippsqcjivkixmirlipppsh']], [['helbcd&^%lomyfriendoxhihhello'], ['dahxyz&^%hkiubneajzktdeddahhk'], ['lipfgh&^%psqcjvmirhsblmllipps']], [['aa'], ['ww'], ['ee']], [['hi    ehi    et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de    ade    ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupompsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlkilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytsqtwszivxlipedchsibcc']], [['hello heti    get a gf hellomyfrieonhello dd'], ['dahhk dape    cap w cb dahhkiubneakjdahhk zz'], ['lipps lixm    kix e kj lippsqcjvmisrlipps hh']], [['helothequickbrownfoxjuhielazydo'], ['dahkpdamqeygxnksjbktfqdeahwvuzk'], ['lipsxliuymgofvsarjsbnylmipedchs']], [['hello heti    get a gf hellomyfheti    get a mgf hellomyfrienhellodo dd'], ['dahhk dape    cap w cb dahhkiubdape    cap w icb dahhkiubneajdahhkzk zz'], ['lipps lixm    kix e kj lippsqcjlixm    kix e qkj lippsqcjvmirlippshs hh']], [['hello helowhellomyfrrienhelb&cd&^lodorld'], ['dahhk dahksdahhkiubnneajdahx&yz&^hkzknhz'], ['lipps lipsalippsqcjvvmirlipf&gh&^pshsvph']], [['yzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cddddddddddddddiliipddddddddddd']], [['bcohhellomyfrieythequickbrownfoxthequickbhetinhellodd'], ['xykddahhkiubneaupdamqeygxnksjbktpdamqeygxdapejdahhkzz'], ['fgsllippsqcjvmicxliuymgofvsarjsbxliuymgoflixmrlippshh']], [['hhellomyffrienhellod'], ['ddahhkiubbneajdahhkz'], ['llippsqcjjvmirlippsh']], [['ef'], ['ab'], ['ij']], [['helloetmyfrienhellodhequicokbrownfoxjumpsoverthelzazydogod'], ['dahhkapiubneajdahhkzdamqeykgxnksjbktfqilokranpdahvwvuzkckz'], ['lippsixqcjvmirlippshliuymgsofvsarjsbnyqtwszivxlipdedchsksh']], [['erghi'], ['ancde'], ['ivklm']], [['hhellomyfriengfrieonhellohellodnhellodlod'], ['ddahhkiubneajcbneakjdahhkdahhkzjdahhkzhkz'], ['llippsqcjvmirkjvmisrlippslippshrlippshpsh']], [['helothequickbrownfoxjumpsgmetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqilociapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkqixszilvxlipedchs']], [['hellb&helothequickbrownfoxjumpsgetoverthelazydocd&^frietrogf'], ['dahhx&dahkpdamqeygxnksjbktfqilocapkranpdahwvuzkyz&^bneapnkcb'], ['lippf&lipsxliuymgofvsarjsbnyqtwkixszivxlipedchsgh&^jvmixvskj']], [['hi    et a gfi hellomyfrie'], ['de    ap w cbe dahhkiubnea'], ['lm    ix e kjm lippsqcjvmi']], [['hello helowhellomyhellomyfrienhelb&cd&^lodfrrienhelb&cd&^lodorld'], ['dahhk dahksdahhkiudahhkiubneajdahx&yz&^hkzbnneajdahx&yz&^hkzknhz'], ['lipps lipsalippsqclippsqcjvmirlipf&gh&^pshjvvmirlipf&gh&^pshsvph']], [['hi    et a rgf hellomyfrietnhelb&cd&^lod'], ['de    ap w ncb dahhkiubneapjdahx&yz&^hkz'], ['lm    ix e vkj lippsqcjvmixrlipf&gh&^psh']], [['hi    et a gf lhgfrieonhelloellomyfrie'], ['de    ap w cb hdcbneakjdahhkahhkiubnea'], ['lm    ix e kj plkjvmisrlippsippsqcjvmi']], [['hellomyfrieonhellod'], ['dahhkiubneakjdahhkz'], ['lippsqcjvmisrlippsh']], [['helbcd&^hellomyfrienhellodellomyfrienhellood%lomyfriendoxhihhello'], ['dahxyz&^dahhkiubneajdahhkzahhkiubneajdahhkkz%hkiubneajzktdeddahhk'], ['lipfgh&^lippsqcjvmirlippshippsqcjvmirlippssh%psqcjvmirhsblmllipps']], [['get'], ['cap'], ['kix']], [['helhlellllthi'], ['dahdhahhhhpde'], ['liplpippppxlm']], [['helloetmyfrienhellohellomyfrienhellodrownfoxjumpsoverthelazydothequickbhetid'], ['dahhkapiubneajdahhkdahhkiubneajdahhkznksjbktfqilokranpdahwvuzkpdamqeygxdapez'], ['lippsixqcjvmirlippslippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsxliuymgoflixmh']], [['hi    et ehia rgf he llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['de    ap adew ncb da hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['lm    ix ilme vkj li ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['hi    ehi   l et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de    ade   h ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm    ilm   p ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['hbcd&^%eo'], ['dxyz&^%ak'], ['lfgh&^%is']], [['ohhelolomyfetrienhellrgf'], ['kddahkhkiubapneajdahhncb'], ['sllipspsqcjixvmirlippvkj']], [['thequicukbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqeyqgxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuymgyoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['helloetmyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthigbhetiid'], ['dahhkapiubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdecxdapeez'], ['lippsixqcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmkflixmmh']], [['hellomyfrrienhelb&cdlod'], ['dahhkiubnneajdahx&yzhkz'], ['lippsqcjvvmirlipf&ghpsh']], [['helowythequicckbrownfhihi    et a gf hellomyfriendorld'], ['dahksupdamqeyygxnksjbdede    ap w cb dahhkiubneajzknhz'], ['lipsacxliuymggofvsarjlmlm    ix e kj lippsqcjvmirhsvph']], [['abcdefghijklmnopqrstuvwxwxabcdefghijklmnopqrstuvwxyyzythequickbrhownfoxjumpsoverthelazydoe'], ['wxyzabcdefghijklmnopqrststwxyzabcdefghijklmnopqrstuuvupdamqeygxndksjbktfqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxyzababefghijklmnopqrstuvwxyzabccdcxliuymgofvlsarjsbnyqtwszivxlipedchsi']], [['efrgft'], ['abncbp'], ['ijvkjx']], [['ythequickbrownfoxjumpsoverthelazydoythequickbrownoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokranpdahwvuzkupdamqeygxnksjktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszivxlipedchscxliuymgofvsarsbnyqtwszivxlipedchs']], [['ehehif'], ['adadeb'], ['ililmj']], [['heheti    get a gf hellomyfrieonhellyodllomyfergetienhelllob&cd&^d'], ['dadape    cap w cb dahhkiubneakjdahhukzhhkiubancapeajdahhhkx&yz&^z'], ['lilixm    kix e kj lippsqcjvmisrlippcshppsqcjivkixmirlipppsf&gh&^h']], [['hi    et aheallomyfriendoxjumpsoverthelazydo gf helloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['de    ap wdawhhkiubneajzktfqilokranpdahwvuzk cb dahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix elieppsqcjvmirhsbnyqtwszivxlipedchs kj lippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['hi e   let a gf hellomyfriend'], ['de a   hap w cb dahhkiubneajz'], ['lm i   pix e kj lippsqcjvmirh']], [['hllelll'], ['dhhahhh'], ['lppippp']], [['hhellyomyfrielod'], ['ddahhukiubneahkz'], ['llippcsqcjvmipsh']], [['hello wbcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lodlorld'], ['dahhk sxyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkzhknhz'], ['lipps afghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^pshpsvph']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodlomyferienhellodt'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzhkiubaneajdahhkzp'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshpsqcjivmirlippshx']], [['hi    et ehia rgf hfrienhehellomyfrienhellodrownfoxjumpsoverthelazydojumpsthelazydollod'], ['de    ap adew ncb dbneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilopdahwvuzkhhkz'], ['lm    ix ilme vkj ljvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwxlipedchsppsh']], [['ft'], ['bp'], ['jx']], [['yzzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cdddddddddddddddiliipddddddddddd']], [['ythequichi'], ['updamqeyde'], ['cxliuymglm']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazeydog'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvauzkc'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedichsk']], [['aickbrownfoxjumpsoveletthelazydo'], ['weygxnksjbktfqilokrahappdahwvuzk'], ['emgofvsarjsbnyqtwszipixxlipedchs']], [['b&helothequickownfoxjumpsgetoverthelazydocd&^'], ['x&dahkpdamqeygksjbktfqilocapkranpdahwvuzkyz&^'], ['f&lipsxliuymgosarjsbnyqtwkixszivxlipedchsgh&^']], [['helothequickbrownfoxjumphellomyfergetienhelllodsoverthelazydo'], ['dahkpdamqeygxnksjbktfqildahhkiubancapeajdahhhkzokranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtlippsqcjivkixmirlipppshwszivxlipedchs']], [['df'], ['zb'], ['hj']], [['b&helothequickownfoxjumpsgetovcerthelazydocd&^'], ['x&dahkpdamqeygksjbktfqilocapkryanpdahwvuzkyz&^'], ['f&lipsxliuymgosarjsbnyqtwkixszgivxlipedchsgh&^']], [['hehi'], ['dade'], ['lilm']], [['hhelloetmyfrienhellodhelazydol'], ['ddahhkapiubneajdahhkzdahwvuzkh'], ['llippsixqcjvmirlippshlipedchsp']], [['hehi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellodlothequickbrownfoxumpsoverthelazydo'], ['dade    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkzhkpdamqeygxnksjbktqilokranpdahwvuzk'], ['lilm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippshpsxliuymgofvsarjsbyqtwszivxlipedchs']], [['ythequickbrownfoxjum'], ['updamqeygxnksjbktfqi'], ['cxliuymgofvsarjsbnyq']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodkbrownfhi'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzgxnksjbde'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshofvsarjlm']], [['helothequetovehrthelazydo'], ['dahkpdamqapkradnpdahwvuzk'], ['lipsxliuyixszilvxlipedchs']], [['hi   helowythehquickbrownfhhiorlde ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de   dahksupdadmqeygxnksjbddeknhza ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm   lipsacxliluymgofvsarjllmsvphi ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['hellomyfrreienhelb&cdlod'], ['dahhkiubnnaeajdahx&yzhkz'], ['lippsqcjvvimirlipf&ghpsh']], [['llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['hhelothequickbrowhelowythequicckbrownfhihinfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksdahksupdamqeyygxnksjbdedejbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsalipsacxliuymggofvsarjlmlmrjsbyqtwsziovxlipedchs']], [['thequickbheti'], ['pdamqeygxdape'], ['xliuymgoflixm']], [['heti    get a gf hellomyfrieonhelllo d'], ['dape    cap w cb dahhkiubneakjdahhhk z'], ['lixm    kix e kj lippsqcjvmisrlippps h']], [['fwwxy'], ['bsstu'], ['jaabc']], [['hhi    et a ohhellomyfrienhellodrgf hellomyfrienhellodellomyfrienhelloold'], ['dde    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkzahhkiubneajdahhkkhz'], ['llm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippshippsqcjvmirlippssph']], [['helhlellelltihi'], ['dahdhahhahhpede'], ['liplpippippxmlm']], [['bcohhellomyfyrienhellodd'], ['xykddahhkiubuneajdahhkzz'], ['fgsllippsqcjcvmirlippshh']], [['hhelllomyfriod'], ['ddahhhkiubnekz'], ['llipppsqcjvmsh']], [['hellomyfrienhellodrownfooxjumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbkktfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjssbnyqtwszivxlipedchs']], [['helloetmyfrienhellzodhequickbrownfoxjumpsoverthelazydogodoworld'], ['dahhkapiubneajdahhvkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhz'], ['lippsixqcjvmirlippdshliuymgofvsarjsbnyqtwszivxlipedchskshsasvph']], [['yzzzzzzzzzzzzzzeheelzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvadaahvvvvvvvvvvvv'], ['cddddddddddddddiliipdddddddddddd']], [['etrgf'], ['apncb'], ['ixvkj']], [['hi l   ehi   l et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de h   ade   h ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm p   ilm   p ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['yzhzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvdvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cdlddddddddddddddiliipddddddddddd']], [['ythequickbrownfoxjumpsovownoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokrksjktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszsarsbnyqtwszivxlipedchs']], [['yywahellomyfriendoxjumupsoverthelazydoxy'], ['uuswdahhkiubneajzktfqiqlokranpdahwvuzktu'], ['ccaelippsqcjvmirhsbnyqytwszivxlipedchsbc']], [['hhellyoomyfrielod'], ['ddahhukkiubneahkz'], ['llippcssqcjvmipsh']], [['bcohhellhomyfrienhellodd'], ['xykddahhdkiubneajdahhkzz'], ['fgsllipplsqcjvmirlippshh']], [['ehelothequickbrownfonxjumpsgetoverthelazydot'], ['adahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzkp'], ['ilipsxliuymgofvsarjsrbnyqtwkixszivxlipedchsx']], [['hlel'], ['dhah'], ['lpip']], [['helloetmyfrthi'], ['dahhkapiubnpde'], ['lippsixqcjvxlm']], [['hellomyfergetienfhelllod'], ['dahhkiubancapeajbdahhhkz'], ['lippsqcjivkixmirjlipppsh']], [['helowythequicckbrownfhihi    ethhelothequickbrownfoxumpsovekrthelazydo a gf hellomyfriendorld'], ['dahksupdamqeyygxnksjbdede    apddahkpdamqeygxnksjbktqilokragnpdahwvuzk w cb dahhkiubneajzknhz'], ['lipsacxliuymggofvsarjlmlm    ixllipsxliuymgofvsarjsbyqtwsziovxlipedchs e kj lippsqcjvmirhsvph']], [['ohhhelllellomyfrienhellod'], ['kdddahhhahhkiubneajdahhkz'], ['slllipppippsqcjvmirlippsh']], [['eff'], ['abb'], ['ijj']], [['h eti    get a mgf hellomyfrienhellod'], ['d ape    cap w icb dahhkiubneajdahhkz'], ['l ixm    kix e qkj lippsqcjvmirlippsh']], [['hellomyfrietnhelb&cd&^lod'], ['dahhkiubneapjdahx&yz&^hkz'], ['lippsqcjvmixrlipf&gh&^psh']], [['b&cdheythequickbrownfoxjumpshi'], ['x&yzdaupdamqeygxnksjbktfqilode'], ['f&ghlicxliuymgofvsarjsbnyqtwlm']], [['helhlomyfriend'], ['dahdhkiubneajz'], ['liplpsqcjvmirh']], [['hhelothequickbrowhelhowythequicckbrownfhihinfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksdahdksupdamqeyygxnksjbdedejbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsaliplsacxliuymggofvsarjlmlmrjsbyqtwsziovxlipedchs']], [['hi    et a rg f hellomyfrietnhelb&cd&^lod'], ['de    ap w nc b dahhkiubneapjdahx&yz&^hkz'], ['lm    ix e vk j lippsqcjvmixrlipf&gh&^psh']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsoverthelazydoexyyd'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpdahwvuzkatuuz'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxlipedchsibcch']], [['hi    et a helolomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w dahkhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e lipspsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['helolomyfrienhellorgf'], ['dahkhkiubneajdahhkncb'], ['lipspsqcjvmirlippsvkj']], [['heeloo'], ['daahkk'], ['liipss']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsovertyhelazydoexyyd'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpudahwvuzkatuuz'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxclipedchsibcch']], [['fhellfomyfrie'], ['bdahhbkiubnea'], ['jlippjsqcjvmi']], [['gget'], ['ccap'], ['kkix']], [['heelazydo'], ['daahwvuzk'], ['liipedchs']], [['eeetrwxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupompsoverthelazydoexyygft'], ['aaapnstwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlkilokranpdahwvuzkatuucbp'], ['iiixvabefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytsqtwszivxlipedchsibcckjx']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodsoverthelazydo'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzokranpdahwvuzk'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshwszivxlipedchs']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrieunhellodget'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneaqjdahhkzcap'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmiyrlippshkix']], [['ahellomyfriendoxjumupsoverthelazydo'], ['wdahhkiubneajzktfqiqlokranpdahwvuzk'], ['elippsqcjvmirhsbnyqytwszivxlipedchs']], [['helowythehquickbrownfhhiorlde'], ['dahksupdadmqeygxnksjbddeknhza'], ['lipsacxliluymgofvsarjllmsvphi']], [['ithi'], ['epde'], ['mxlm']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsovertyhelazydoexyyhellomyfrienhelb&cd&^loddeeetrgft'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpudahwvuzkatuudahhkiubneajdahx&yz&^hkzzaaapncbp'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxclipedchsibcclippsqcjvmirlipf&gh&^pshhiiixvkjx']], [['hellomyfrietrogf'], ['dahhkiubneapnkcb'], ['lippsqcjvmixvskj']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoi'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzke'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsm']], [['ythequickbrowunfoxthequickbheti'], ['updamqeygxnksqjbktpdamqeygxdape'], ['cxliuymgofvsayrjsbxliuymgoflixm']], [['bcohhellomyfyrienhellofdwxabcdefghijklmoxjumpsovertyhelazydoexyyd'], ['xykddahhkiubuneajdahhkbzstwxyzabcdefghiktfqilokranpudahwvuzkatuuz'], ['fgsllippsqcjcvmirlippsjhabefghijklmnopqsbnyqtwszivxclipedchsibcch']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelcazydoi    t a gf hellomyfrieonhello d'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahywvuzke    p w cb dahhkiubneakjdahhk z'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipgedchsm    x e kj lippsqcjvmisrlipps h']], [['hi    et ehia rgf he llomyfrihi    et a helolomyfrienhellodrgf hellomyfrienhellodverthelazyollod'], ['de    ap adew ncb da hhkiubnede    ap w dahkhkiubneajdahhkzncb dahhkiubneajdahhkzranpdahwvukhhkz'], ['lm    ix ilme vkj li ppsqcjvmlm    ix e lipspsqcjvmirlippshvkj lippsqcjvmirlippshzivxlipedcsppsh']], [['helhlellelltiihi'], ['dahdhahhahhpeede'], ['liplpippippxmmlm']], [['ohhhelllellomyfrienheellod'], ['kdddahhhahhkiubneajdaahhkz'], ['slllipppippsqcjvmirliippsh']], [['hhellyomyfrienyhello'], ['ddahhukiubneajudahhk'], ['llippcsqcjvmirclipps']], [['ohhhelllellomyfriabcdefghijfklmnopeetrgftqrstuvwxyzythequickbrhownfoxjumpsoverthelahzydoenhellod'], ['kdddahhhahhkiubnewxyzabcdefbghijklaapncbpmnopqrstuvupdamqeygxndksjbktfqilokranpdahwdvuzkajdahhkz'], ['slllipppippsqcjvmefghijklmnjopqrstiixvkjxuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipeldchsirlippsh']], [['hellomyfrienhellodlflomyfrietrgf'], ['dahhkiubneajdahhkzhbhkiubneapncb'], ['lippsqcjvmirlippshpjpsqcjvmixvkj']], [['helxloetmthequickbrowoxjumpsoverthelazydoyfrieunhellodget'], ['dahthkapipdamqeygxnksktfqilokranpdahwvuzkubneaqjdahhkzcap'], ['lipbpsixqxliuymgofvsasbnyqtwszivxlipedchscjvmiyrlippshkix']], [['helhlellelletiihi'], ['dahdhahhahhapeede'], ['liplpippippixmmlm']], [['abcdefghijklmnopqrsteuvwxwxabcdefghijklmnopqrstuvwxyyzythequickbrhownfoxjsumpsoverthelazydoe'], ['wxyzabcdefghijklmnopaqrststwxyzabcdefghijklmnopqrstuuvupdamqeygxndksjbktfoqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxiyzababefghijklmnopqrstuvwxyzabccdcxliuymgofvlsarjsbnwyqtwszivxlipedchsi']], [['hhellomyfriengrieonhellohellodnhellodlod'], ['ddahhkiubneajcneakjdahhkdahhkzjdahhkzhkz'], ['llippsqcjvmirkvmisrlippslippshrlippshpsh']], [['hhellyomyfriehello'], ['ddahhukiubneadahhk'], ['llippcsqcjvmilipps']], [['bcd&hellomoyfrienhellodrownfoxjumpsoverthhhellomyfriengfrieonhellohellodelazydo%'], ['xyz&dahhkikubneajdahhkznksjbktfqilokranpdddahhkiubneajcbneakjdahhkdahhkzahwvuzk%'], ['fgh&lippsqscjvmirlippshvsarjsbnyqtwszivxlllippsqcjvmirkjvmisrlippslippshipedchs%']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydooexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchssibcc']], [['hi    elt a rgf hellomyfrienhellod'], ['de    ahp w ncb dahhkiubneajdahhkz'], ['lm    ipx e vkj lippsqcjvmirlippsh']], [['helflomyfriietrgf'], ['dahbhkiubneeapncb'], ['lipjpsqcjvmmixvkj']], [['ehiabcdefghijklmnopqrwnfxjumpsoveletthelazydoa'], ['adewxyzabcdefghijklmnsjbtfqilokrahappdahwvuzkw'], ['ilmefghijklmnopqrstuvarjbnyqtwszipixxlipedchse']], [['healloetmyfrienhellodhequickbrownfoxjumpsoverthelazeydog'], ['dawhhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvauzkc'], ['lieppsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedichsk']], [['lhgfrieonhelloellomyfrie'], ['hdcbneakjdahhkahhkiubnea'], ['plkjvmisrlippsippsqcjvmi']], [['hhellylomyfrienhellod'], ['ddahhuhkiubneajdahhkz'], ['llippcpsqcjvmirlippsh']], [['hfsoverthigfthequickbhetid'], ['dbokranpdecbpdamqeygxdapez'], ['ljwszivxlmkjxliuymgoflixmh']], [['yywbcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lodlorldwxy'], ['uusxyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkzhknhzstu'], ['ccafghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^pshpsvphabc']], [['bcdhellomyfrieonhellod&^%'], ['xyzdahhkiubneakjdahhkz&^%'], ['fghlippsqcjvmisrlippsh&^%']], [['aheallomyfriendoxjumpsoverthelazydo'], ['wdawhhkiubneajzktfqilokranpdahwvuzk'], ['elieppsqcjvmirhsbnyqtwszivxlipedchs']], [['aheallomyfriendoxjumpsoverthwxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsovierthielazydo'], ['wdawhhkiubneajzktfqilokranpdstwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokreanpdeahwvuzk'], ['elieppsqcjvmirhsbnyqtwszivxlabefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszmivxlmipedchs']], [['hhellohelloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogodoworldmyfrienhellodeod'], ['ddahhkdahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhziubneajdahhkzakz'], ['llippslippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchskshsasvphqcjvmirlippshish']], [['eflie'], ['abhea'], ['ijpmi']], [['ohhelyfrienhellood'], ['kddahubneajdahhkkz'], ['sllipcjvmirlippssh']], [['ehellioetmhi'], ['adahhekapide'], ['ilippmsixqlm']], [['ahellomyfriendoxjumupsoverthelaefzydo'], ['wdahhkiubneajzktfqiqlokranpdahwabvuzk'], ['elippsqcjvmirhsbnyqytwszivxlipeijdchs']], [['hellomyfrieonhenllod'], ['dahhkiubneakjdajhhkz'], ['lippsqcjvmisrlirppsh']], [['hlelloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['dhahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lpippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['hi    helothelbcd&^%lomyfriendoxhihhelloheqolod'], ['de    dahkpdahxyz&^%hkiubneajzktdeddahhkdamkhkz'], ['lm    lipsxlipfgh&^%psqcjvmirhsblmllippsliuspsh']], [['helloomyfrienhhi    ehi    et a gf hellomyfrietrogf hhellohehetimyfrienhellodeod'], ['dahhkkiubneajdde    ade    ap w cb dahhkiubneapnkcb ddahhkdadapeiubneajdahhkzakz'], ['lippssqcjvmirllm    ilm    ix e kj lippsqcjvmixvskj llippslilixmqcjvmirlippshish']], [['hl'], ['dh'], ['lp']], [['helhii'], ['dahdee'], ['liplmm']], [['hellomyfriendoxjumpsojvertaheallomyfriendoxjumpsoverthelazydoazydo'], ['dahhkiubneajzktfqilokfranpwdawhhkiubneajzktfqilokranpdahwvuzkwvuzk'], ['lippsqcjvmirhsbnyqtwsnzivxelieppsqcjvmirhsbnyqtwszivxlipedchsedchs']], [['hellomyfrienhellodverthelazyollod'], ['dahhkiubneajdahhkzranpdahwvukhhkz'], ['lippsqcjvmirlippshzivxlipedcsppsh']], [['eheihif'], ['adaedeb'], ['ilimlmj']], [['helothequickbrownfoxjumtpsgmetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqiplociapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqxtwkqixszilvxlipedchs']], [['ythequickbrownfoxthuickbheti'], ['updamqeygxnksjbktpdqeygxdape'], ['cxliuymgofvsarjsbxlymgoflixm']], [['hi  df  et ehia rgf he llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['de  zb  ap adew ncb da hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['lm  hj  ix ilme vkj li ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['fhellfomyfrieheeloo'], ['bdahhbkiubneadaahkk'], ['jlippjsqcjvmiliipss']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodhelazydoexyyzzzzzzzzzzzzzzzzzzet'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzdahwvuzkatuuvvvvvvvvvvvvvvvvvvap'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshlipedchsibccddddddddddddddddddix']], [['ohhellomyfrienheellod'], ['kddahhkiubneajdaahhkz'], ['sllippsqcjvmirliippsh']], [['iheheti'], ['edadape'], ['mlilixm']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodlomyferienhellodtgf'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzhkiubaneajdahhkzpcb'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshpsqcjivmirlippshxkj']], [['hello heti    get a gf hellomyllo dd'], ['dahhk dape    cap w cb dahhkiuhhk zz'], ['lipps lixm    kix e kj lippsqcpps hh']], [['f'], ['b'], ['j']], [['eehhi    et a gf helloetmthelquickbrownfoxjumpsohverthelazydoyfrienhellodia'], ['aadde    ap w cb dahhkapipdahmqeygxnksjbktfqilokdranpdahwvuzkubneajdahhkzew'], ['iillm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwslzivxlipedchscjvmirlippshme']], [['heti    get a mgf hellomyfrienhellodhl'], ['dape    cap w icb dahhkiubneajdahhkzdh'], ['lixm    kix e qkj lippsqcjvmirlippshlp']], [['thequhelothequickbrownfoxjumpsgetovehrthelazydoyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqdahkpdamqeygxnksjbktfqilocapkradnpdahwvuzkubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuylipsxliuymgofvsarjsbnyqtwkixszilvxlipedchscjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['helolomyfrienhhelloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodellorgf'], ['dahkhkiubneajddahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzahhkncb'], ['lipspsqcjvmirllippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshippsvkj']], [['hellomyferienhelhabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoiod'], ['dahhkiubaneajdahdwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkekz'], ['lippsqcjivmirliplefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsmsh']], [['heeoloo'], ['daakhkk'], ['liispss']], [['hellomyfrienhellodxjumpsoverthelazydo'], ['dahhkiubneajdahhkztfqilokranpdahwvuzk'], ['lippsqcjvmirlippshbnyqtwszivxlipedchs']], [['aickbrownfoxjhumpsoveletthelazydo'], ['weygxnksjbktfdqilokrahappdahwvuzk'], ['emgofvsarjsbnlyqtwszipixxlipedchs']], [['hhellomyfriengfrieonhellohellodoverthelazydoythequickbrownoxjumpsoverthelazydollomyfrietrgf'], ['ddahhkiubneajcbneakjdahhkdahhkzkranpdahwvuzkupdamqeygxnksjktfqilokranpdahwvuzkhhkiubneapncb'], ['llippsqcjvmirkjvmisrlippslippshszivxlipedchscxliuymgofvsarsbnyqtwszivxlipedchsppsqcjvmixvkj']], [['helbcdhhellyomyfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhukiubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['hi    et a gf helllomyfrienhellood'], ['de    ap w cb dahhhkiubneajdahhkkz'], ['lm    ix e kj lipppsqcjvmirlippssh']], [['hellomyfrienhellodrownfoxjumpsothequickbhetiverthelazydohi'], ['dahhkiubneajdahhkznksjbktfqilokpdamqeygxdaperanpdahwvuzkde'], ['lippsqcjvmirlippshvsarjsbnyqtwsxliuymgoflixmzivxlipedchslm']], [['hhelloetmyhi    et a gf hellomyfriendfrienhellodhelazydol'], ['ddahhkapiude    ap w cb dahhkiubneajzbneajdahhkzdahwvuzkh'], ['llippsixqclm    ix e kj lippsqcjvmirhjvmirlippshlipedchsp']], [['wlorld'], ['shknhz'], ['apsvph']], [['helolnhello dd'], ['dahkhjdahhk zz'], ['lipsprlipps hh']], [['ythbequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['updxamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['cxlfiuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['hellomdyfriendoxjumpsojverthelazydo'], ['dahhkizubneajzktfqilokfranpdahwvuzk'], ['lippsqhcjvmirhsbnyqtwsnzivxlipedchs']], [['helloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['helbcdhhellyom&yfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhuki&ubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsq&cjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['helbcdhhellyofmyfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhukbiubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsjqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['llomyfrienhehellomyfrienhellooxjumpsoverthelazyollod'], ['hhkiubneajdadahhkiubneajdahhkktfqilokranpdahwvukhhkz'], ['ppsqcjvmirlilippsqcjvmirlippssbnyqtwszivxlipedcsppsh']], [['yzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthi'], ['uvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpde'], ['cdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlm']], [['helolnhelnlo'], ['dahkhjdahjhk'], ['lipsprliprps']], [['wxxyyworld'], ['sttuusknhz'], ['abbccasvph']], [['bcohhellomyfhi'], ['xykddahhkiubde'], ['fgsllippsqcjlm']], [['heloethequickbrownfoxjumpsgmetovehrthelazydo'], ['dahkapdamqeygxnksjbktfqilociapkradnpdahwvuzk'], ['lipsixliuymgofvsarjsbnyqtwkqixszilvxlipedchs']], [['yzhzzzzzzzzzzzzzzeyheelzzzzzzzzzzz'], ['uvdvvvvvvvvvvvvvvaudaahvvvvvvvvvvv'], ['cdlddddddddddddddicliipddddddddddd']], [['hi    et a gf helloetmthelquickbrownfoxjumpsoverthnelazydoyfrienhellod'], ['de    ap w cb dahhkapipdahmqeygxnksjbktfqilokranpdjahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwszivxlripedchscjvmirlippsh']], [['helloetmpsoverthelazydoyfrienhellodfhelllod'], ['dahhkapilokranpdahwvuzkubneajdahhkzbdahhhkz'], ['lippsixqtwszivxlipedchscjvmirlippshjlipppsh']], [['hellll'], ['dahhhh'], ['lipppp']], [['helhlelthi'], ['dahdhahpde'], ['liplpipxlm']], [['ohhellomyfrieod'], ['kddahhkiubneakz'], ['sllippsqcjvmish']], [['helothelbcd&^%lomyfriendoxhihhelloheqolod'], ['dahkpdahxyz&^%hkiubneajzktdeddahhkdamkhkz'], ['lipsxlipfgh&^%psqcjvmirhsblmllippsliuspsh']], [['ohhelllomyfriend'], ['kddahhhkiubneajz'], ['sllipppsqcjvmirh']], [['hellhi'], ['dahhde'], ['lipplm']], [['thelothequickbrownfonxjumpsgetoverthelazydo'], ['pdahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzk'], ['xlipsxliuymgofvsarjsrbnyqtwkixszivxlipedchs']], [['hhhellyomyfrienhellodl'], ['dddahhukiubneajdahhkzh'], ['lllippcsqcjvmirlippshp']], [['ohhelolomyfrienhellodgf'], ['kddahkhkiubneajdahhkzcb'], ['sllipspsqcjvmirlippshkj']], [['hhellomyfriengfrieonhelheti    get a gf hellomyfrieonhello dlohellod'], ['ddahhkiubneajcbneakjdahdape    cap w cb dahhkiubneakjdahhk zhkdahhkz'], ['llippsqcjvmirkjvmisrliplixm    kix e kj lippsqcjvmisrlipps hpslippsh']], [['hhelyfrienhellod'], ['ddahubneajdahhkz'], ['llipcjvmirlippsh']], [['b&cc^'], ['x&yy^'], ['f&gg^']], [['heti    get a gfrieonhello helothequickbrownfoxumpsovekrthelazydodehel'], ['dape    cap w cbneakjdahhk dahkpdamqeygxnksjbktqilokragnpdahwvuzkzadah'], ['lixm    kix e kjvmisrlipps lipsxliuymgofvsarjsbyqtwsziovxlipedchshilip']], [['hello helowhellomyfrrienhelhb&cd&^lodorld'], ['dahhk dahksdahhkiubnneajdahdx&yz&^hkzknhz'], ['lipps lipsalippsqcjvvmirliplf&gh&^pshsvph']], [['bchllomyfhi'], ['xydhhkiubde'], ['fglppsqcjlm']], [['hhellomyfrienhellodehi'], ['ddahhkiubneajdahhkzade'], ['llippsqcjvmirlippshilm']], [['helothequickbrownfoxumpsovekrthelazydodehel'], ['dahkpdamqeygxnksjbktqilokragnpdahwvuzkzadah'], ['lipsxliuymgofvsarjsbyqtwsziovxlipedchshilip']], [['gehelloetmpsoverthelazydoyfrienhellodfhelllod'], ['cadahhkapilokranpdahwvuzkubneajdahhkzbdahhhkz'], ['kilippsixqtwszivxlipedchscjvmirlippshjlipppsh']], [['hellomyfrienhelleodrownfoxjumpabcdefghijklmnopqrstuvwxyzythequickbrownfoxjumhello'], ['dahhkiubneajdahhakznksjbktfqilwxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqidahhk'], ['lippsqcjvmirlippishvsarjsbnyqtefghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqlipps']], [['heti    get a gfrieonhello helothequicikbrownfoxumpsovekrthelazydodehel'], ['dape    cap w cbneakjdahhk dahkpdamqeyegxnksjbktqilokragnpdahwvuzkzadah'], ['lixm    kix e kjvmisrlipps lipsxliuymgmofvsarjsbyqtwsziovxlipedchshilip']], [['hod'], ['dkz'], ['lsh']], [['hhelloehellomyfrieonhelllotmyhi    et a gf hellomyfriendfrienhellodhelazydol'], ['ddahhkadahhkiubneakjdahhhkpiude    ap w cb dahhkiubneajzbneajdahhkzdahwvuzkh'], ['llippsilippsqcjvmisrlipppsxqclm    ix e kj lippsqcjvmirhjvmirlippshlipedchsp']], [['hhellomyfriengfrieonhelheti'], ['ddahhkiubneajcbneakjdahdape'], ['llippsqcjvmirkjvmisrliplixm']], [['ehabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelcazydoit'], ['adwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahywvuzkep'], ['ilefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipgedchsmx']], [['ehelloetyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthiet'], ['adahhkapubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdeap'], ['ilippsixcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmix']], [['%bcd&^%'], ['%xyz&^%'], ['%fgh&^%']], [['thequickbromwnfoxjumpsoverthelazydog'], ['pdamqeygxnkisjbktfqilokranpdahwvuzkc'], ['xliuymgofvsqarjsbnyqtwszivxlipedchsk']], [['theqcuickbrownfoxjumpsoverthelazydog'], ['pdamyqeygxnksjbktfqilokranpdahwvuzkc'], ['xliugymgofvsarjsbnyqtwszivxlipedchsk']], [['hi    et a gf helbcd&^%lomyfriend'], ['de    ap w cb dahxyz&^%hkiubneajz'], ['lm    ix e kj lipfgh&^%psqcjvmirh']], [['yzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvv'], ['cdddddddddddddddd']], [['hellogfa world'], ['dahhkcbw sknhz'], ['lippskje asvph']], [['hi    et a gf helbcd&^%lomy friend'], ['de    ap w cb dahxyz&^%hkiu bneajz'], ['lm    ix e kj lipfgh&^%psqc jvmirh']], [['bcdd&^%'], ['xyzz&^%'], ['fghh&^%']], [['%bcdhello&^%'], ['%xyzdahhk&^%'], ['%fghlipps&^%']], [['thequicerthelazydog'], ['pdamqeyanpdahwvuzkc'], ['xliuymgivxlipedchsk']], [['%bcdhelwxylo&^%'], ['%xyzdahstuhk&^%'], ['%fghlipabcps&^%']], [['ehello'], ['adahhk'], ['ilipps']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcddddddddddddddddddddddddddddddddd']], [['hellogfa worl d'], ['dahhkcbw sknh z'], ['lippskje asvp h']], [['hi    et a gf hellogmyfriend'], ['de    ap w cb dahhkciubneajz'], ['lm    ix e kj lippskqcjvmirh']], [['%bc^d&^%'], ['%xy^z&^%'], ['%fg^h&^%']], [['bc&^%'], ['xy&^%'], ['fg&^%']], [['abcdefghijklmnopqrstuvxyz'], ['wxyzabcdefghijklmnopqrtuv'], ['efghijklmnopqrstuvwxyzbcd']], [['thequicerthelazydoag'], ['pdamqeyanpdahwvuzkwc'], ['xliuymgivxlipedchsek']], [['thequicertthelazydog'], ['pdamqeyanppdahwvuzkc'], ['xliuymgivxxlipedchsk']], [['hellogfa'], ['dahhkcbw'], ['lippskje']], [['thequickbrthequicerthelazydogownfoxjumpsoverthelazydo'], ['pdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokranpdahwvuzk'], ['xliuymgofvxliuymgivxlipedchsksarjsbnyqtwszivxlipedchs']], [['bc&^%thequicerthelazydogbc&^%'], ['xy&^%pdamqeyanpdahwvuzkcxy&^%'], ['fg&^%xliuymgivxlipedchskfg&^%']], [['abcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyz'], ['wxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuv'], ['efghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcd']], [['thequickbrownfoxydo'], ['pdamqeygxnksjbktuzk'], ['xliuymgofvsarjsbchs']], [['thequicwkbrthequicerthelazydogownofoxjumpsoverthelazydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilokranpdahwvuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwszivxlipedchs']], [['thequickborownfoxydo'], ['pdamqeygxknksjbktuzk'], ['xliuymgofsvsarjsbchs']], [['world'], ['sknhz'], ['asvph']], [['abcdefghihjklmnopqrstuvxyz'], ['wxyzabcdedfghijklmnopqrtuv'], ['efghijklmlnopqrstuvwxyzbcd']], [['hi    ehellot a gf hellogmyfriend'], ['de    adahhkp w cb dahhkciubneajz'], ['lm    ilippsx e kj lippskqcjvmirh']], [['hi    et a gf helbcmd&^%lomyfriend'], ['de    ap w cb dahxyiz&^%hkiubneajz'], ['lm    ix e kj lipfgqh&^%psqcjvmirh']], [['%b^c^d&^%'], ['%x^y^z&^%'], ['%f^g^h&^%']], [['hellomyfriend'], ['dahhkiubneajz'], ['lippsqcjvmirh']], [['helbcd&^%lomy'], ['dahxyz&^%hkiu'], ['lipfgh&^%psqc']], [['thequickbromwnfoxjumpsovertheletazydog'], ['pdamqeygxnkisjbktfqilokranpdahapwvuzkc'], ['xliuymgofvsqarjsbnyqtwszivxlipixedchsk']], [['hellogmyfriend'], ['dahhkciubneajz'], ['lippskqcjvmirh']], [['thequicekbromwnfoxjumpsoverthelazydog'], ['pdamqeyagxnkisjbktfqilokranpdahwvuzkc'], ['xliuymgiofvsqarjsbnyqtwszivxlipedchsk']], [['yzz'], ['uvv'], ['cdd']], [['hi    ehellott a gf hellogmyfriend'], ['de    adahhkpp w cb dahhkciubneajz'], ['lm    ilippsxx e kj lippskqcjvmirh']], [['thkbrownfoxjumpsoverthelazydo'], ['pdgxnksjbktfqilokranpdahwvuzk'], ['xlofvsarjsbnyqtwszivxlipedchs']], [['thequickbrownfoxjumpsoverthelazydfo'], ['pdamqeygxnksjbktfqilokranpdahwvuzbk'], ['xliuymgofvsarjsbnyqtwszivxlipedchjs']], [['theqcuickbrownfoxjumpsoverthelazbydog'], ['pdamyqeygxnksjbktfqilokranpdahwvxuzkc'], ['xliugymgofvsarjsbnyqtwszivxlipedfchsk']], [['theqcuickabcdefghihjklmnopqrstuvxyzbrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghijklmnopqrtuvxnksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['helllogfa'], ['dahhhkcbw'], ['lipppskje']], [['thequickbrthequicerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymgivxlipedchsksarjsbnyqtwszipedchs']], [['bc&^%thequicerthelazydothkbrownfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnksjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvsarjsbnyqtwszivxlipedchs&^%']], [['bc&^hello%'], ['xy&^dahhk%'], ['fg&^lipps%']], [['ehellott'], ['adahhkpp'], ['ilippsxx']], [['thequickbromwnfoxjumpsoverdog'], ['pdamqeygxnkisjbktfqilokranzkc'], ['xliuymgofvsqarjsbnyqtwszivhsk']], [['hellogfa wetorld'], ['dahhkcbw sapknhz'], ['lippskje aixsvph']], [['wetorld'], ['sapknhz'], ['aixsvph']], [['hi    et a gf helbcdhi    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzde    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlm    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['hi    et a gf helbcmd&^%lo myfriend'], ['de    ap w cb dahxyiz&^%hk iubneajz'], ['lm    ix e kj lipfgqh&^%ps qcjvmirh']], [['thequicerthequicekbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgiofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['thequiuckbrownfoxjumpsoverthelazydo'], ['pdamqeqygxnksjbktfqilokranpdahwvuzk'], ['xliuymygofvsarjsbnyqtwszivxlipedchs']], [['bc&^%thequicerthelazydoghelbcmd&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchsklipfgqh&^%psfg&^%']], [['helbcd&^thequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfgh&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['bc&thequicertthelazydog^%'], ['xy&pdamqeyanppdahwvuzkc^%'], ['fg&xliuymgivxxlipedchsk^%']], [['theqthequicerthequicekbromwnfoxjumpsoverthelazydogthelazydogdog'], ['pdampdamqeyanpdamqeyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkczkc'], ['xliuxliuymgivxliuymgiofvsqarjsbnyqtwszivxlipedchskxlipedchskhsk']], [['hi    et  a gf helbcmld&^%lo myfriend'], ['de    ap  w cb dahxyihz&^%hk iubneajz'], ['lm    ix  e kj lipfgqph&^%ps qcjvmirh']], [['afbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyz'], ['wbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuv'], ['ejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcd']], [['bc&^%thequicerthelazydoghelbcmd&&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchsklipfgqh&&^%psfg&^%']], [['ehelloyzz'], ['adahhkuvv'], ['ilippscdd']], [['hi r   et a gf helbcmd&^%lomyfriend'], ['de n   ap w cb dahxyiz&^%hkiubneajz'], ['lm v   ix e kj lipfgqh&^%psqcjvmirh']], [['gf%b^c^d&^%'], ['cb%x^y^z&^%'], ['kj%f^g^h&^%']], [['thequtickborownfoxydo'], ['pdamqpeygxknksjbktuzk'], ['xliuyxmgofsvsarjsbchs']], [['thequicerthequicezkbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyavgxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgidofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['bc&^%thequicerthelazydohighelbcmd&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkdecdahxyiz&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchslmklipfgqh&^%psfg&^%']], [['hellogmythequicertthelazydogfriend'], ['dahhkciupdamqeyanppdahwvuzkcbneajz'], ['lippskqcxliuymgivxxlipedchskjvmirh']], [['ello'], ['ahhk'], ['ipps']], [['hellogfa wethorld'], ['dahhkcbw sapdknhz'], ['lippskje aixlsvph']], [['bcello&^%'], ['xyahhk&^%'], ['fgipps&^%']], [['hellogmyfriend&^%lomyfriend'], ['dahhkciubneajz&^%hkiubneajz'], ['lippskqcjvmirh&^%psqcjvmirh']], [['yzyz'], ['uvuv'], ['cdcd']], [['helbcy'], ['dahxyu'], ['lipfgc']], [['hellogmyfriend&^%lomyfriendgf'], ['dahhkciubneajz&^%hkiubneajzcb'], ['lippskqcjvmirh&^%psqcjvmirhkj']], [['afbcdefghijklhellogfa'], ['wbxyzabcdefghdahhkcbw'], ['ejfghijklmnoplippskje']], [['ehellot'], ['adahhkp'], ['ilippsx']], [['theqkbrownfoxydo'], ['pdamgxnksjbktuzk'], ['xliuofvsarjsbchs']], [['worl'], ['sknh'], ['asvp']], [['thequickbrownfoxbcdd&^%ydo'], ['pdamqeygxnksjbktxyzz&^%uzk'], ['xliuymgofvsarjsbfghh&^%chs']], [['hi    et a gf helbcdhibc&^%    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzdexy&^%    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlmfg&^%    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['worlwxyyd'], ['sknhstuuz'], ['asvpabcch']], [['yzzz'], ['uvvv'], ['cddd']], [['ehe'], ['ada'], ['ili']], [['helbcmd&^%lomyfriend'], ['dahxyiz&^%hkiubneajz'], ['lipfgqh&^%psqcjvmirh']], [['hi    et a gf hellogmyfiend'], ['de    ap w cb dahhkciubeajz'], ['lm    ix e kj lippskqcjmirh']], [['hellogfaello'], ['dahhkcbwahhk'], ['lippskjeipps']], [['glhello'], ['chdahhk'], ['kplipps']], [['hellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfriendfriend'], ['dahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmirhjvmirh']], [['theqcuickabcdefghihjklmnoownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghijkksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqrssarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddddddddddddddddddddddddddddddd']], [['heleloo'], ['dahahkk'], ['lipipss']], [['hellogfa worwethorld'], ['dahhkcbw sknsapdknhz'], ['lippskje asvaixlsvph']], [['%bcthkbrownfoxjumpsoverthelazydod&^%'], ['%xypdgxnksjbktfqilokranpdahwvuzkz&^%'], ['%fgxlofvsarjsbnyqtwszivxlipedchsh&^%']], [['%bcdhelwxylo&&^%'], ['%xyzdahstuhk&&^%'], ['%fghlipabcps&&^%']], [['eheellot'], ['adaahhkp'], ['iliippsx']], [['helllo '], ['dahhhk '], ['lippps ']], [['hi    eiend'], ['de    aeajz'], ['lm    imirh']], [['hi    et a gf helbc%bc^d&^%d&^%lomy friend'], ['de    ap w cb dahxy%xy^z&^%z&^%hkiu bneajz'], ['lm    ix e kj lipfg%fg^h&^%h&^%psqc jvmirh']], [['ywxy'], ['ustu'], ['cabc']], [['hwellogfa wethorld'], ['dsahhkcbw sapdknhz'], ['laippskje aixlsvph']], [['helbcmd&^%lomyfiend'], ['dahxyiz&^%hkiubeajz'], ['lipfgqh&^%psqcjmirh']], [['helbcdworlwxyyd&^thequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyzsknhstuuz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfghasvpabcch&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['helllo'], ['dahhhk'], ['lippps']], [['woworwethorldrlwxyyd'], ['sksknsapdknhznhstuuz'], ['asasvaixlsvphvpabcch']], [['thequiceurtthelazydog'], ['pdamqeyaqnppdahwvuzkc'], ['xliuymgiyvxxlipedchsk']], [['hi    et  a g^f helbcmld&^%lo myfriend'], ['de    ap  w c^b dahxyihz&^%hk iubneajz'], ['lm    ix  e k^j lipfgqph&^%ps qcjvmirh']], [['hhellogmythequicertthelazydogfriendelbcmd&^%lomyfiend'], ['ddahhkciupdamqeyanppdahwvuzkcbneajzahxyiz&^%hkiubeajz'], ['llippskqcxliuymgivxxlipedchskjvmirhipfgqh&^%psqcjmirh']], [['hellomyfrienduvxyz'], ['dahhkiubneajzqrtuv'], ['lippsqcjvmirhyzbcd']], [['thequicerthequicezkbroomwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyavgxnkkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgidofvssqarjsbnyqtwszivxlipedchskxlipedchsk']], [['fgf'], ['bcb'], ['jkj']], [['yzyzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvv'], ['cdcdddddddddddd']], [['helbcdworlwxyyd&^thequiuckbrownfoxjumpsoverthelazydothequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyzsknhstuuz&^pdamqeqygxnksjbktfqilokranpdahwvuzkpdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfghasvpabcch&^xliuymygofvsarjsbnyqtwszivxlipedchsxliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['theqeutickborownfoxydo'], ['pdamaqpeygxknksjbktuzk'], ['xliuiyxmgofsvsarjsbchs']], [['thequickbrownfoxjumpsoverthelazyd'], ['pdamqeygxnksjbktfqilokranpdahwvuz'], ['xliuymgofvsarjsbnyqtwszivxlipedch']], [['bc&^%thequicerthelazydothkbroswnfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnkosjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvswarjsbnyqtwszivxlipedchs&^%']], [['woworwethorlldrlwxd'], ['sksknsapdknhhznhstz'], ['asasvaixlsvpphvpabh']], [['%b^c^d&^d%'], ['%x^y^z&^z%'], ['%f^g^h&^h%']], [['gglhello'], ['cchdahhk'], ['kkplipps']], [['%bcdheolwxylo&&^%'], ['%xyzdakhstuhk&&^%'], ['%fghlispabcps&&^%']], [['thequicertthequickbrthequicerthelazydogownfoxjumpsovelazydohelazydoag'], ['pdamqeyanppdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokrahwvuzkdahwvuzkwc'], ['xliuymgivxxliuymgofvxliuymgivxlipedchsksarjsbnyqtwszipedchslipedchsek']], [['hi    et a gf helbcmhelbcmd&^%lomyfriendd&^%lo myfriend'], ['de    ap w cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubneajz'], ['lm    ix e kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjvmirh']], [['s'], ['o'], ['w']], [['bc&^%thequicerthela^zydoghelbcmd&&^%lobc&^%'], ['xy&^%pdamqeyanpdahw^vuzkcdahxyiz&&^%hkxy&^%'], ['fg&^%xliuymgivxlipe^dchsklipfgqh&&^%psfg&^%']], [['thequickborownfoxydfo'], ['pdamqeygxknksjbktuzbk'], ['xliuymgofsvsarjsbchjs']], [['%bcdhelwxyl%'], ['%xyzdahstuh%'], ['%fghlipabcp%']], [['thequickbromownfoxjumpsoverdog'], ['pdamqeygxnkiksjbktfqilokranzkc'], ['xliuymgofvsqsarjsbnyqtwszivhsk']], [['hellogmyfriend&^%lomyfrienehellott'], ['dahhkciubneajz&^%hkiubneajadahhkpp'], ['lippskqcjvmirh&^%psqcjvmirilippsxx']], [['helbcthequickbrownfoxbcdd&^%ydoy'], ['dahxypdamqeygxnksjbktxyzz&^%uzku'], ['lipfgxliuymgofvsarjsbfghh&^%chsc']], [['ggff'], ['ccbb'], ['kkjj']], [['hhillogfaello'], ['ddehhkcbwahhk'], ['llmppskjeipps']], [['thequicwkbrthequicerthelazydogownofoxjumpszydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilovuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwdchs']], [['worethorld'], ['sknapdknhz'], ['asvixlsvph']], [['thequiceurtazydog'], ['pdamqeyaqnpwvuzkc'], ['xliuymgiyvxedchsk']], [['helbcmd&^%lomyfriendxy'], ['dahxyiz&^%hkiubneajztu'], ['lipfgqh&^%psqcjvmirhbc']], [['helbcthequickbryzzoy'], ['dahxypdamqeygxnuvvku'], ['lipfgxliuymgofvcddsc']], [['hwellogfa wethorldd'], ['dsahhkcbw sapdknhzz'], ['laippskje aixlsvphh']], [['worwethorld'], ['sknsapdknhz'], ['asvaixlsvph']], [['o%bcdhelwxylo&^%'], ['k%xyzdahstuhk&^%'], ['s%fghlipabcps&^%']], [['eehello'], ['aadahhk'], ['iilipps']], [['thequicydog'], ['pdamqeyuzkc'], ['xliuymgchsk']], [['hi    et  a g^f hhelbcd&^%lomyelbcmld&^%lo myfriend'], ['de    ap  w c^b ddahxyz&^%hkiuahxyihz&^%hk iubneajz'], ['lm    ix  e k^j llipfgh&^%psqcipfgqph&^%ps qcjvmirh']], [['theqkbrowfnfoxydo'], ['pdamgxnksbjbktuzk'], ['xliuofvsajrjsbchs']], [['hi    et a gf helbcdhibc&^%    et a abcdefghihjklmnopqrstuvxyzllogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzdexy&^%    ap w wxyzabcdedfghijklmnopqrtuvhhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlmfg&^%    ix e efghijklmlnopqrstuvwxyzbcdppskqcjvmirh&^%psqcjvmirh']], [['hwellogfa'], ['dsahhkcbw'], ['laippskje']], [['hi r  et a gf helbcmd&^%lomyfriend'], ['de n  ap w cb dahxyiz&^%hkiubneajz'], ['lm v  ix e kj lipfgqh&^%psqcjvmirh']], [['abcdefghijklmnopqrstuhi    et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde    ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm    ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['thkbrownfoxjumpsoverth%bcdhelwxylo&^%elazydo'], ['pdgxnksjbktfqilokranpd%xyzdahstuhk&^%ahwvuzk'], ['xlofvsarjsbnyqtwszivxl%fghlipabcps&^%ipedchs']], [['bc&thequicerttheworwethorldlazydog^%'], ['xy&pdamqeyanppdasknsapdknhzhwvuzkc^%'], ['fg&xliuymgivxxliasvaixlsvphpedchsk^%']], [['wyorlwxyyd'], ['suknhstuuz'], ['acsvpabcch']], [['hi    et a gf helbcmhelbcmd&^%lomyfriendd&^%lo myfend'], ['de    ap w cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubajz'], ['lm    ix e kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjirh']], [['hhelbcd&^%lomyelbcmld&^%lo'], ['ddahxyz&^%hkiuahxyihz&^%hk'], ['llipfgh&^%psqcipfgqph&^%ps']], [['thequickbrownfoxjumpsovworwethorlderthelazyd'], ['pdamqeygxnksjbktfqilokrsknsapdknhzanpdahwvuz'], ['xliuymgofvsarjsbnyqtwszasvaixlsvphivxlipedch']], [['thequicwkbrthequicerthelazydogaownofoxjumpsoverthelazydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcwksjkbktfqilokranpdahwvuzk'], ['xliuymgaofvxliuymgivxlipedchskesarsjsbnyqtwszivxlipedchs']], [['%bdcthkbrownfoxjumpsoverthelazydod&^%'], ['%xzypdgxnksjbktfqilokranpdahwvuzkz&^%'], ['%fhgxlofvsarjsbnyqtwszivxlipedchsh&^%']], [['worlwxd'], ['sknhstz'], ['asvpabh']], [['herienduvxyz'], ['daneajzqrtuv'], ['livmirhyzbcd']], [['hi    et a gf hellogmyfriiend'], ['de    ap w cb dahhkciubneeajz'], ['lm    ix e kj lippskqcjvmmirh']], [['boc&^hello%'], ['xky&^dahhk%'], ['fsg&^lipps%']], [['abcdyzzefghijklmnopqrstuvxyz'], ['wxyzuvvabcdefghijklmnopqrtuv'], ['efghcddijklmnopqrstuvwxyzbcd']], [['yxwxy'], ['utstu'], ['cbabc']], [['yzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddlippsdddddddddddddddddddddddddddd']], [['ahwellogfa wethorldd'], ['wdsahhkcbw sapdknhzz'], ['elaippskje aixlsvphh']], [['hi    et a gf helbcmd&^%l o myfriend'], ['de    ap w cb dahxyiz&^%h k iubneajz'], ['lm    ix e kj lipfgqh&^%p s qcjvmirh']], [['hellogymyfriend&^%lomyfriendgf'], ['dahhkcuiubneajz&^%hkiubneajzcb'], ['lippskcqcjvmirh&^%psqcjvmirhkj']], [['hellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfririend'], ['dahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneneajz'], ['lippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmvmirh']], [['heflbcmyd&^%lomyfriend'], ['dabhxyiuz&^%hkiubneajz'], ['lijpfgqch&^%psqcjvmirh']], [['myfriendvwxyz'], ['iubneajzrstuv'], ['qcjvmirhzabcd']], [['theqcuickabcdefghihjklmehellotnfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghiadahhkpjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqilippsxrjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['thequickbrthequiceerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeyaanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymgiivxlipedchsksarjsbnyqtwszipedchs']], [['thequhelbcmld&^%loicerthelazy%doag'], ['pdamqdahxyihz&^%hkeyanpdahwvu%zkwc'], ['xliuylipfgqph&^%psmgivxlipedc%hsek']], [['%bcdhelloo&^%'], ['%xyzdahhkk&^%'], ['%fghlippss&^%']], [['hellogmyfrithequickbromwnfoxjumpsoverthelazydogend&^%lomhi'], ['dahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuzkcajz&^%hkide'], ['lippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedchskirh&^%psqlm']], [['afbcdefghijklhellogfa worl damnoyfrienduvxyz'], ['wbxyzabcdefghdahhkcbw sknh zwijkubneajzqrtuv'], ['ejfghijklmnoplippskje asvp heqrscjvmirhyzbcd']], [['%%bc^d&^%'], ['%%xy^z&^%'], ['%%fg^h&^%']], [['gfs'], ['cbo'], ['kjw']], [['hloglfa'], ['dhkchbw'], ['lpskpje']], [['thequicerpsoverthelazydogthelazydog'], ['pdamqeyanlokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivtwszivxlipedchskxlipedchsk']], [['gghelbcdworlwxyyd&^thequickbrownfoxjumpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabcch&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqcplipps']], [['hellogmyfiend'], ['dahhkciubeajz'], ['lippskqcjmirh']], [['thequiutckbrownfoxjumpstoverthelazydo'], ['pdamqeqpygxnksjbktfqilopkranpdahwvuzk'], ['xliuymyxgofvsarjsbnyqtwxszivxlipedchs']], [['helelooywxy'], ['dahahkkustu'], ['lipipsscabc']], [['bc&thequicertthelazydg^%'], ['xy&pdamqeyanppdahwvuzc^%'], ['fg&xliuymgivxxlipedchk^%']], [['helbc%bc^d&^%d&^%lomy'], ['dahxy%xy^z&^%z&^%hkiu'], ['lipfg%fg^h&^%h&^%psqc']], [['hi    etabcdefghijklhellogfa  a g^f helbcmld'], ['de    apwxyzabcdefghdahhkcbw  w c^b dahxyihz'], ['lm    ixefghijklmnoplippskje  e k^j lipfgqph']], [['helllogfa wethorld'], ['dahhhkcbw sapdknhz'], ['lipppskje aixlsvph']], [['hellhi    et a gf helbcd&^%lomyfriendlogfa'], ['dahhde    ap w cb dahxyz&^%hkiubneajzhkcbw'], ['lipplm    ix e kj lipfgh&^%psqcjvmirhpskje']], [['abcdefghijklmnopqrstuhi    et  g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde    ap  c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm    ix  k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['hello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzd'], ['dahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvz'], ['lipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdh']], [['helbcmld&^%lo'], ['dahxyihz&^%hk'], ['lipfgqph&^%ps']], [['hellogmyfriend&^%lomyfriendgfboc&^hello%'], ['dahhkciubneajz&^%hkiubneajzcbxky&^dahhk%'], ['lippskqcjvmirh&^%psqcjvmirhkjfsg&^lipps%']], [['abcdyzzefghijklmnopqrsthi    ehellot a gnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp w cjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx e krhyzbcd']], [['helbcmld'], ['dahxyihz'], ['lipfgqph']], [['heriennduvxyz'], ['daneajjzqrtuv'], ['livmirrhyzbcd']], [['hellogmyfriend&^%lomhi    et a %lo myfriendfriend'], ['dahhkciubneajz&^%hkide    ap w %hk iubneajzbneajz'], ['lippskqcjvmirh&^%psqlm    ix e %ps qcjvmirhjvmirh']], [['yzzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cddcdddddddddddddddddddddddddddddddddd']], [['boc&hi    et  a g^f helbcmld&^%lo myfriend^heo%'], ['xky&de    ap  w c^b dahxyihz&^%hk iubneajz^dak%'], ['fsg&lm    ix  e k^j lipfgqph&^%ps qcjvmirh^lis%']], [['abcdyzzefghijklmnopqrsthi    ehellot agnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp wcjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx ekrhyzbcd']], [['thequickbromohwellogfa wethorldwnfoxjumpsoverdog'], ['pdamqeygxnkikdsahhkcbw sapdknhzsjbktfqilokranzkc'], ['xliuymgofvsqslaippskje aixlsvpharjsbnyqtwszivhsk']], [['hihihellogmyfriendellogmyfriiend'], ['dededahhkciubneajzahhkciubneeajz'], ['lmlmlippskqcjvmirhippskqcjvmmirh']], [['bdcd&^%'], ['xzyz&^%'], ['fhgh&^%']], [['thequickbrownfoxydhhillogfaelloo'], ['pdamqeygxnksjbktuzddehhkcbwahhkk'], ['xliuymgofvsarjsbchllmppskjeippss']], [['helbcdhibc&^%'], ['dahxyzdexy&^%'], ['lipfghlmfg&^%']], [['thequiutckbrownfoxjumpstovelazydo'], ['pdamqeqpygxnksjbktfqilopkrahwvuzk'], ['xliuymyxgofvsarjsbnyqtwxszipedchs']], [['bc&^%thequicerthelazydothkbroswnfoxjumpsovtheqkbrownfoxydoerthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnkosjbktfqilokrpdamgxnksjbktuzkanpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvswarjsbnyqtwszxliuofvsarjsbchsivxlipedchs&^%']], [['theqcuickabcdefghinhjklmnopqrstuvxyzbrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdejdfghijklmnopqrtuvxnksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmrlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddddddddddddddddddddddddddddd']], [['herienduvxyhi    et a gf hellogmyfienddz'], ['daneajzqrtude    ap w cb dahhkciubeajzzv'], ['livmirhyzbclm    ix e kj lippskqcjmirhhd']], [['hi    et a gf heflbcmhelbcmd&^%lomyfriendd&^%lo cmyfend'], ['de    ap w cb dabhxyidahxyiz&^%hkiubneajzz&^%hk yiubajz'], ['lm    ix e kj lijpfgqlipfgqh&^%psqcjvmirhh&^%ps gqcjirh']], [['gghelbcdworlwxyyd&^thequickbrownfoxjuthequickbromownfoxjumpsoverdogmpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuz&^pdamqeygxnksjbktfqpdamqeygxnkiksjbktfqilokranzkcilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabcch&^xliuymgofvsarjsbnyxliuymgofvsqsarjsbnyqtwszivhskqtwszivxlipedchs%psqcplipps']], [['hellogmyfrithequiend&^%lomhi s   et a gf helbcmd&^%lo myfriendfriend'], ['dahhkciubnepdamqeajz&^%hkide o   ap w cb dahxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmxliuymirh&^%psqlm w   ix e kj lipfgqh&^%ps qcjvmirhjvmirh']], [['ywxytheqcuickbrownfoxjumpsoverthelazydog'], ['ustupdamyqeygxnksjbktfqilokranpdahwvuzkc'], ['cabcxliugymgofvsarjsbnyqtwszivxlipedchsk']], [['hellogfa wetoorld'], ['dahhkcbw sapkknhz'], ['lippskje aixssvph']], [['bcbcmd&^%lobc&^%'], ['xyxyiz&^%hkxy&^%'], ['fgfgqh&^%psfg&^%']], [['theqcuickabcdefghihjklmehellotnfoxjumpsoverthoelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghiadahhkpjbktfqilokranpdkahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqilippsxrjsbnyqtwszivxlsiplippskqcjvmirhedchsk']], [['abcdyzzefghijklmnopqrsthhelbcdhii    ehellot a gnduvxyz'], ['wxyzuvvabcdefghijklmnopddahxyzdee    adahhkp w cjzqrtuv'], ['efghcddijklmnopqrstuvwxllipfghlmm    ilippsx e krhyzbcd']], [['gnduvxyz%bcdhelwxyl%'], ['cjzqrtuv%xyzdahstuh%'], ['krhyzbcd%fghlipabcp%']], [['r'], ['n'], ['v']], [['hi    et a gf helbcd&^%lomy fiend'], ['de    ap w cb dahxyz&^%hkiu beajz'], ['lm    ix e kj lipfgh&^%psqc jmirh']], [['bc&thequicertthelazydhellog^%'], ['xy&pdamqeyanppdahwvuzdahhkc^%'], ['fg&xliuymgivxxlipedchlippsk^%']], [['ob%'], ['kx%'], ['sf%']], [['%%bc^d&hellogfa worwethorld^%'], ['%%xy^z&dahhkcbw sknsapdknhz^%'], ['%%fg^h&lippskje asvaixlsvph^%']], [['wxabcdefghijklmnopqrstuhi    et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['stwxyzabcdefghijklmnopqde    ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['abefghijklmnopqrstuvwxylm    ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['gfhello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzds'], ['cbdahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvzo'], ['kjlipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdhw']], [['hi    et a gftheqkbrowfnfoxydo helbcmhelbcmd&^%lomyfiriendd&^%lo myfrd'], ['de    ap w cbpdamgxnksbjbktuzk dahxyidahxyiz&^%hkiubeneajzz&^%hk iubnz'], ['lm    ix e kjxliuofvsajrjsbchs lipfgqlipfgqh&^%psqcjmvmirhh&^%ps qcjvh']], [['ehebc&^hello%'], ['adaxy&^dahhk%'], ['ilifg&^lipps%']], [['abcdyzzefghijklmnopqrsthi    ehellot ahellhi gnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp wdahhde cjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx elipplm krhyzbcd']], [['hellogmyfienid'], ['dahhkciubeajez'], ['lippskqcjmirmh']], [['hhelelooywxy'], ['ddahahkkustu'], ['llipipsscabc']], [['hellthequiuckbrownfoxjumpsoverthelazydoaaogfa worl d'], ['dahhpdamqeqygxnksjbktfqilokranpdahwvuzkwwkcbw sknh z'], ['lippxliuymygofvsarjsbnyqtwszivxlipedchseeskje asvp h']], [['fgyzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzzf'], ['bcuvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvvb'], ['jkcdcdddddlippsddddddddddddddddddddddddddddj']], [['thequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfo'], ['pdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbk'], ['xliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjs']], [['hi    et a gf helbcdhi    et a gf helylogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzde    ap w cb dahuhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlm    ix e kj lipcpskqcjvmirh&^%psqcjvmirh']], [['bcdd&^%%'], ['xyzz&^%%'], ['fghh&^%%']], [['%bob%cd&^%'], ['%xkx%yz&^%'], ['%fsf%gh&^%']], [['hi    et  ah gf helbcmld&^%lo myfriend'], ['de    ap  wd cb dahxyihz&^%hk iubneajz'], ['lm    ix  el kj lipfgqph&^%ps qcjvmirh']], [['hi r  et a gf helbcmd&^% lomyfriend'], ['de n  ap w cb dahxyiz&^% hkiubneajz'], ['lm v  ix e kj lipfgqh&^% psqcjvmirh']], [['bc&^%thequicerthelazydoghelbcmd&^%lobc&^yzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzz%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&^%hkxy&^uvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvv%'], ['fg&^%xliuymgivxlipedchsklipfgqh&^%psfg&^cdcdddddlippsdddddddddddddddddddddddddddd%']], [['hellogmyfrithequickbromwnfoxjumpsoverthelazylbcmd&^%lo myfriendfriend'], ['dahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuhxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedcpfgqh&^%ps qcjvmirhjvmirh']], [['hi    ehellott a gf hellogmyfrielnd'], ['de    adahhkpp w cb dahhkciubneahjz'], ['lm    ilippsxx e kj lippskqcjvmiprh']], [['worlwxdgf%b^c^d&^%'], ['sknhstzcb%x^y^z&^%'], ['asvpabhkj%f^g^h&^%']], [['hhelelooywxys'], ['ddahahkkustuo'], ['llipipsscabcw']], [['booc&^hello%'], ['xkky&^dahhk%'], ['fssg&^lipps%']], [['hellogmyfriend&^%lomyfrithequickbrownfoxjumpsovworwethorlderthelazydf'], ['dahhkciubneajz&^%hkiubnepdamqeygxnksjbktfqilokrsknsapdknhzanpdahwvuzb'], ['lippskqcjvmirh&^%psqcjvmxliuymgofvsarjsbnyqtwszasvaixlsvphivxlipedchj']], [['bc&^%thequicertwethorldwnfoxjumpsoverdoghelazydogmd&&abc&^%'], ['xy&^%pdamqeyanpsapdknhzsjbktfqilokranzkcdahwvuzkciz&&wxy&^%'], ['fg&^%xliuymgivxaixlsvpharjsbnyqtwszivhsklipedchskqh&&efg&^%']], [['thequtickborobc&thequicertthelazydg^%wnfoxydo'], ['pdamqpeygxknkxy&pdamqeyanppdahwvuzc^%sjbktuzk'], ['xliuyxmgofsvsfg&xliuymgivxxlipedchk^%arjsbchs']], [['bc&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['xy&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['fg&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']], [['hellogmyfthequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfoiend'], ['dahhkciubpdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbkeajz'], ['lippskqcjxliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjsmirh']], [['thequicetazydog'], ['pdamqeyapwvuzkc'], ['xliuymgixedchsk']], [['hellogmyfrriend&^%lomyfriendgf'], ['dahhkciubnneajz&^%hkiubneajzcb'], ['lippskqcjvvmirh&^%psqcjvmirhkj']], [['woretaahorld'], ['sknapwwdknhz'], ['asvixeelsvph']], [['ld'], ['hz'], ['ph']], [['helelooywxyhi    eiend'], ['dahahkkustude    aeajz'], ['lipipsscabclm    imirh']], [['woretarahorld'], ['sknapwnwdknhz'], ['asvixevelsvph']], [['bcdd&^d%'], ['xyzz&^z%'], ['fghh&^h%']], [['gghelbcdworlwxyybrownfoxjumpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuxnksjbktfqilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabccfvsarjsbnyqtwszivxlipedchs%psqcplipps']], [['whellomyfrienduvxyhelbcthequickbrownfoxbcdd&^%ydoyrlwxyyd'], ['sdahhkiubneajzqrtudahxypdamqeygxnksjbktxyzz&^%uzkunhstuuz'], ['alippsqcjvmirhyzbclipfgxliuymgofvsarjsbfghh&^%chscvpabcch']], [['wethorldwnfoxjumpsoverdog'], ['sapdknhzsjbktfqilokranzkc'], ['aixlsvpharjsbnyqtwszivhsk']], [['etabcdefghijklhellogfa'], ['apwxyzabcdefghdahhkcbw'], ['ixefghijklmnoplippskje']], [['hi    et sa gf helbcdhi    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap ow cb dahxyzde    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix we kj lipfghlm    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['thequicwkbrthequicerthelazydogownofoxjumpszytdo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilovupzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwdcxhs']], [['theqcuickabcdefghihjklmno%bcdhethequieceurtthelazydogydog'], ['pdamyqeygwxyzabcdedfghijk%xyzdapdamqeayaqnppdahwvuzkcuzkc'], ['xliugymgoefghijklmlnopqrs%fghlixliuymigiyvxxlipedchskchsk']], [['ahellhi'], ['wdahhde'], ['elipplm']], [['hi    et a gf helleomyfriened'], ['de    ap w cb dahhakiubneajaz'], ['lm    ix e kj lippisqcjvmirih']], [['hi    et a g'], ['de    ap w c'], ['lm    ix e k']], [['helbcmd&^%l'], ['dahxyiz&^%h'], ['lipfgqh&^%p']], [['helbc%bc^d&^%d&^%lomworwethorld^%y'], ['dahxy%xy^z&^%z&^%hkisknsapdknhz^%u'], ['lipfg%fg^h&^%h&^%psqasvaixlsvph^%c']], [['rgfhello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzds'], ['ncbdahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvzo'], ['vkjlipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdhw']], [['myfedamnopqrstrhind'], ['iubazwijklmnopndejz'], ['qcjiheqrstuvwxvlmrh']], [['abcdefghijklmnopqrstuvxyo%bcdhelwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyzdahstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghlipabcps&^%d']], [['hi    e g'], ['de    a c'], ['lm    i k']], [['ahelthequickbrownfoxydolhi'], ['wdahpdamqeygxnksjbktuzkhde'], ['elipxliuymgofvsarjsbchsplm']], [['thequicerthequcekbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuygiofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['bc&^%thequicyxwxyeroswnfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyutstuankosjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgcbabcivswarjsbnyqtwszivxlipedchs&^%']], [['bchi r  et a gf helbcmd&^% lomyfriend&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['xyde n  ap w cb dahxyiz&^% hkiubneajz&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['fglm v  ix e kj lipfgqh&^% psqcjvmirh&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']], [['worlafbcdefghijklhellogfa'], ['sknhwbxyzabcdefghdahhkcbw'], ['asvpejfghijklmnoplippskje']], [['ghellogmyfrithequickbromwnfoxjumpsoverthelazylbcmd&^%lofs'], ['cdahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuhxyiz&^%hkbo'], ['klippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedcpfgqh&^%psjw']], [['heflbklmnopqrsthilomyfriend'], ['dabhxghijklmnopdehkiubneajz'], ['lijpfopqrstuvwxlmpsqcjvmirh']], [['abcdyzzefghijklmnopqrsthi    ehellot a gnd'], ['wxyzuvvabcdefghijklmnopde    adahhkp w cjz'], ['efghcddijklmnopqrstuvwxlm    ilippsx e krh']], [['heyzzzbcdhibc&^%'], ['dauvvvxyzdexy&^%'], ['licdddfghlmfg&^%']], [['yzyyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdccdddddddddddddddddddddddddddddddddd']], [['abcdefghijklmnopqrstuvxyo%bcdhelhellogfa wetorldwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyzdahdahhkcbw sapknhzstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghliplippskje aixsvphabcps&^%d']], [['%%bdc^d&^%'], ['%%xzy^z&^%'], ['%%fhg^h&^%']], [['helbcmlld'], ['dahxyihhz'], ['lipfgqpph']], [['myfrieendvwxyz'], ['iubneaajzrstuv'], ['qcjvmiirhzabcd']], [['bc&thequricertthelazydog^%'], ['xy&pdamqneyanppdahwvuzkc^%'], ['fg&xliuyvmgivxxlipedchsk^%']], [['bc&^%thequicehwellogfa wethorldhelazydogbc&^%'], ['xy&^%pdamqeyadsahhkcbw sapdknhzdahwvuzkcxy&^%'], ['fg&^%xliuymgilaippskje aixlsvphlipedchskfg&^%']], [['hi    et a gf helbcd&^%lomy yfriend'], ['de    ap w cb dahxyz&^%hkiu ubneajz'], ['lm    ix e kj lipfgh&^%psqc cjvmirh']], [['hi    et a gf helbcmd&^%lo myfrhellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfririendiend'], ['de    ap w cb dahxyiz&^%hk iubndahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneneajzeajz'], ['lm    ix e kj lipfgqh&^%ps qcjvlippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmvmirhmirh']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzmyfriend^heo%zzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvviubneajz^dak%vvvvv'], ['cdcdddddddddddddddddddddddddddqcjvmirh^lis%ddddd']], [['thehelbc%bc^d&^%d&^%lomyquicerpsoverthelazydogthelazydog'], ['pdadahxy%xy^z&^%z&^%hkiumqeyanlokranpdahwvuzkcpdahwvuzkc'], ['xlilipfg%fg^h&^%h&^%psqcuymgivtwszivxlipedchskxlipedchsk']], [['eeheabcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzo'], ['aadawxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvk'], ['iiliefghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcds']], [['helylogmyfriend&^%lomyfriend'], ['dahuhkciubneajz&^%hkiubneajz'], ['lipcpskqcjvmirh&^%psqcjvmirh']], [['theqfkbrowfnfoxydo'], ['pdambgxnksbjbktuzk'], ['xliujofvsajrjsbchs']], [['eello'], ['aahhk'], ['iipps']], [['bc&threquicertthelazydhellog^%'], ['xy&pdnamqeyanppdahwvuzdahhkc^%'], ['fg&xlviuymgivxxlipedchlippsk^%']], [['hi    et a gf hiend'], ['de    ap w cb deajz'], ['lm    ix e kj lmirh']], [['hellond'], ['dahhkjz'], ['lippsrh']], [['hi    etg^f helbcmld'], ['de    apc^b dahxyihz'], ['lm    ixk^j lipfgqph']], [['yzzzzob%zzzzzzzzzzzzzzzzzzzzz'], ['uvvvvkx%vvvvvvvvvvvvvvvvvvvvv'], ['cddddsf%ddddddddddddddddddddd']], [['abcdefghijklmnopqrstuhi'], ['wxyzabcdefghijklmnopqde'], ['efghijklmnopqrstuvwxylm']], [['hi r   et a gf helbcmd&^%lomyfiend'], ['de n   ap w cb dahxyiz&^%hkiubeajz'], ['lm v   ix e kj lipfgqh&^%psqcjmirh']], [['hi r  et helelooa gf helbcmd&^%lomyfriend'], ['de n  ap dahahkkw cb dahxyiz&^%hkiubneajz'], ['lm v  ix lipipsse kj lipfgqh&^%psqcjvmirh']], [['hellomyfrienduvxyzo'], ['dahhkiubneajzqrtuvk'], ['lippsqcjvmirhyzbcds']], [['myhi    et a gf heflbcmhelbcmd&^%lomyfriendd&^%lo cmyfendfriendvwxyz'], ['iude    ap w cb dabhxyidahxyiz&^%hkiubneajzz&^%hk yiubajzbneajzrstuv'], ['qclm    ix e kj lijpfgqlipfgqh&^%psqcjvmirhh&^%ps gqcjirhjvmirhzabcd']], [['thequicwkbrthequicerthelazydogownofoxjheleloompszydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfdahahkkilovuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnlipipssqtwdchs']], [['hielbecmd&^%loomyfriend'], ['deahxayiz&^%hkkiubneajz'], ['lmipfigqh&^%pssqcjvmirh']], [['orlwxyyd'], ['knhstuuz'], ['svpabcch']], [['hello oworrld'], ['dahhk ksknnhz'], ['lipps sasvvph']], [['ggfgf'], ['ccbcb'], ['kkjkj']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzhellogmyfriend&^%lomhizzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvdahhkciubneajz&^%hkidevvvvvvvvvvv'], ['cdcdddddddddddddddddddddddlippskqcjvmirh&^%psqlmddddddddddd']], [['gabcdefghijklmnopqrstuvxyfo%bcdhelhellogfagfgf'], ['cwxyzabcdefghijklmnopqrtubk%xyzdahdahhkcbwcbcb'], ['kefghijklmnopqrstuvwxyzbcjs%fghliplippskjekjkj']], [['gf%^b^c^d&^%'], ['cb%^x^y^z&^%'], ['kj%^f^g^h&^%']], [['thequhelbcmld&i^%loicerthelazy%doag'], ['pdamqdahxyihz&e^%hkeyanpdahwvu%zkwc'], ['xliuylipfgqph&m^%psmgivxlipedc%hsek']], [['hellogymyfriend&^%lomyfriendgthequickbrthequicerthelazydogownfoxjumpsoverthelazydof'], ['dahhkcuiubneajz&^%hkiubneajzcpdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokranpdahwvuzkb'], ['lippskcqcjvmirh&^%psqcjvmirhkxliuymgofvxliuymgivxlipedchsksarjsbnyqtwszivxlipedchsj']], [['abcdetuvxyz'], ['wxyzapqrtuv'], ['efghixyzbcd']], [['hhillogfaell%b^c^d&^d%o'], ['ddehhkcbwahh%x^y^z&^z%k'], ['llmppskjeipp%f^g^h&^h%s']], [['bc&^%uthequicertdhelazydohigheblbcmd&^%lobc&^%'], ['xy&^%qpdamqeyanpzdahwvuzkdecdaxhxyiz&^%hkxy&^%'], ['fg&^%yxliuymgivxhlipedchslmklifpfgqh&^%psfg&^%']], [['rworl'], ['nsknh'], ['vasvp']], [['hellogymyfriend&^%lomyfrriendgf'], ['dahhkcuiubneajz&^%hkiubnneajzcb'], ['lippskcqcjvmirh&^%psqcjvvmirhkj']], [['heflbcmhelbcmd&^%lomyfriendd&^%lo'], ['dabhxyidahxyiz&^%hkiubneajzz&^%hk'], ['lijpfgqlipfgqh&^%psqcjvmirhh&^%ps']], [['bb'], ['xx'], ['ff']], [['worlafbcdefghhelbcmd&^%lomyfriendijklhellogfa'], ['sknhwbxyzabcddahxyiz&^%hkiubneajzefghdahhkcbw'], ['asvpejfghijkllipfgqh&^%psqcjvmirhmnoplippskje']], [['athequicwkbrthequicerthelazydogaownofoxjumpsoverthelazydo'], ['wpdamqeysgxnpdamqeyanpdahwvuzkcwksjkbktfqilokranpdahwvuzk'], ['exliuymgaofvxliuymgivxlipedchskesarsjsbnyqtwszivxlipedchs']], [['ahellogfa'], ['wdahhkcbw'], ['elippskje']], [['hi    et aa gf helbcmhelbcmd&^%lomyfriendd&^%lo myfriend'], ['de    ap ww cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubneajz'], ['lm    ix ee kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjvmirh']], [['worwethorld^%'], ['sknsapdknhz^%'], ['asvaixlsvph^%']], [['hhehi    etabcdefghijklhellogfa  a g^f helbcmldlelooywxys'], ['ddade    apwxyzabcdefghdahhkcbw  w c^b dahxyihzhahkkustuo'], ['llilm    ixefghijklmnoplippskje  e k^j lipfgqphpipsscabcw']], [['g^f'], ['c^b'], ['k^j']], [['abcdefghijklmnopqrstuhi     et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde     ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm     ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['thequickbrthequicqerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeymanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymguivxlipedchsksarjsbnyqtwszipedchs']], [['worlafbcdefghijklhellheyzzzbcdhibc&^%ogfa'], ['sknhwbxyzabcdefghdahhdauvvvxyzdexy&^%kcbw'], ['asvpejfghijklmnoplipplicdddfghlmfg&^%skje']], [['abcdyzzefghijklmnopqrsthi'], ['wxyzuvvabcdefghijklmnopde'], ['efghcddijklmnopqrstuvwxlm']], [['hi%%bc^d&hellogfa worwetbc&thequricertthelazydog^%horld^%'], ['de%%xy^z&dahhkcbw sknsapxy&pdamqneyanppdahwvuzkc^%dknhz^%'], ['lm%%fg^h&lippskje asvaixfg&xliuyvmgivxxlipedchsk^%lsvph^%']], [['o%bcdhe&^%'], ['k%xyzda&^%'], ['s%fghli&^%']], [['%bdcthkbrvownfoxjumpsoverthelazydod&^%'], ['%xzypdgxnrksjbktfqilokranpdahwvuzkz&^%'], ['%fhgxlofvzsarjsbnyqtwszivxlipedchsh&^%']], [['hmyfriendfyfriendelgflo'], ['diubneajzbubneajzahcbhk'], ['lqcjvmirhjcjvmirhipkjps']], [['thequhellogmyfthequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfoiendrtazydog'], ['pdamqdahhkciubpdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbkeajznpwvuzkc'], ['xliuylippskqcjxliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjsmirhvxedchsk']], [['theqcuickbrownfoxjumpsoverthbc&^%thequicerthela^zydoghelbcmd&&^%lobc&^%og'], ['pdamyqeygxnksjbktfqilokranpdxy&^%pdamqeyanpdahw^vuzkcdahxyiz&&^%hkxy&^%kc'], ['xliugymgofvsarjsbnyqtwszivxlfg&^%xliuymgivxlipe^dchsklipfgqh&&^%psfg&^%sk']], [['thequickbrownfoxjumpsovertheloazydfo'], ['pdamqeygxnksjbktfqilokranpdahkwvuzbk'], ['xliuymgofvsarjsbnyqtwszivxlipsedchjs']], [['yzzzz'], ['uvvvv'], ['cdddd']], [['bcddd&^%'], ['xyzzz&^%'], ['fghhh&^%']], [['worwetbc&thequricertthelazydog^%horld^%'], ['sknsapxy&pdamqneyanppdahwvuzkc^%dknhz^%'], ['asvaixfg&xliuyvmgivxxlipedchsk^%lsvph^%']], [['hellogfatoorld'], ['dahhkcbwpkknhz'], ['lippskjexssvph']], [['theqcuickbrownfoxjumheleloopsooverthelazbydog'], ['pdamyqeygxnksjbktfqidahahkklokkranpdahwvxuzkc'], ['xliugymgofvsarjsbnyqlipipsstwsszivxlipedfchsk']], [['hi    et a gf hethequickborownfoxydolbcd&^%lomyfriend'], ['de    ap w cb dapdamqeygxknksjbktuzkhxyz&^%hkiubneajz'], ['lm    ix e kj lixliuymgofsvsarjsbchspfgh&^%psqcjvmirh']], [['woworwethorlldrwlwxd'], ['sksknsapdknhhznshstz'], ['asasvaixlsvpphvapabh']], [['theqcrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamynksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['heflbklmnopqrsthilomyfrien'], ['dabhxghijklmnopdehkiubneaj'], ['lijpfopqrstuvwxlmpsqcjvmir']], [['hi    ehellot a gf helahelthequickbrownfoxydolhilogmyfriend'], ['de    adahhkp w cb dahwdahpdamqeygxnksjbktuzkhdehkciubneajz'], ['lm    ilippsx e kj lipelipxliuymgofvsarjsbchsplmpskqcjvmirh']], [['helbcml'], ['dahxyih'], ['lipfgqp']], [['hellogmyfriithequiend&^%lomhi'], ['dahhkciubneepdamqeajz&^%hkide'], ['lippskqcjvmmxliuymirh&^%psqlm']], [['helbc%bc^d&^%d&^%lommworwethorld^%y'], ['dahxy%xy^z&^%z&^%hkiisknsapdknhz^%u'], ['lipfg%fg^h&^%h&^%psqqasvaixlsvph^%c']], [['wxabcdefghijklmnopqrstuhi'], ['stwxyzabcdefghijklmnopqde'], ['abefghijklmnopqrstuvwxylm']], [['afbcdefghijklhellogfa xyz'], ['wbxyzabcdefghdahhkcbw tuv'], ['ejfghijklmnoplippskje bcd']], [['abcdefghijklhellogfa'], ['wxyzabcdefghdahhkcbw'], ['efghijklmnoplippskje']], [['hwelhellogfa wethorldlogfa wethorldd'], ['dsahdahhkcbw sapdknhzhkcbw sapdknhzz'], ['laiplippskje aixlsvphpskje aixlsvphh']], [['bc&^%thequicerth^elazydogbc&^%'], ['xy&^%pdamqeyanpd^ahwvuzkcxy&^%'], ['fg&^%xliuymgivxl^ipedchskfg&^%']], [['h ello oworrld'], ['d ahhk ksknnhz'], ['l ipps sasvvph']], [['ggherthelazydou%lomylhello'], ['ccdanpdahwvuzkq%hkiuhdahhk'], ['kklivxlipedchsy%psqcplipps']], [['%bcdhelwxyl&o&^%'], ['%xyzdahstuh&k&^%'], ['%fghlipabcp&s&^%']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzztheqcuickabcdefghihjklmnopqrstuvxyzbrownfoxjumpsoverthelhellzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvpdamyqeygwxyzabcdedfghijklmnopqrtuvxnksjbktfqilokranpdahdahhvv'], ['cdcdddddddddddddddddddddddddddddxliugymgoefghijklmlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippdd']], [['abacdefghijklmnopqrstuvwxyz'], ['wxwyzabcdefghijklmnopqrstuv'], ['efeghijklmnopqrstuvwxyzabcd']], [['thequickbrownftheqcuickabcdefghihjklmno%bcdhethequieceurtthelazydogydogoxjumpsoverthelazyd'], ['pdamqeygxnksjbpdamyqeygwxyzabcdedfghijk%xyzdapdamqeayaqnppdahwvuzkcuzkcktfqilokranpdahwvuz'], ['xliuymgofvsarjxliugymgoefghijklmlnopqrs%fghlixliuymigiyvxxlipedchskchsksbnyqtwszivxlipedch']], [['thheflbcmhelbcmd&^%lomyfriendd&^%louiceurtazydog'], ['pddabhxyidahxyiz&^%hkiubneajzz&^%hkqeyaqnpwvuzkc'], ['xllijpfgqlipfgqh&^%psqcjvmirhh&^%psymgiyvxedchsk']], [['abcdefghijklmnopqrstuvxyo%bcdxhelwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyztdahstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghblipabcps&^%d']], [['hefmnopqrsthilomyfrien'], ['dabijklmnopdehkiubneaj'], ['lijqrstuvwxlmpsqcjvmir']], [['zyzzz'], ['vuvvv'], ['dcddd']], [['lomyfriend&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['hkiubneajz&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['psqcjvmirh&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']]], [[['hi'], ['de'], ['lm']], [['asdfghjkl'], ['wozbcdfgh'], ['ewhjklnop']], [['gf'], ['cb'], ['kj']], [['et'], ['ap'], ['ix']], [['faewfawefaewg'], ['bwasbwsabwasc'], ['jeiajeaijeiak']], [['hellomyfriend'], ['dahhkiubneajz'], ['lippsqcjvmirh']], [['dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'], ['ztvzhijehbqdiehqbdhedqbjiheijqbdheijqbdbqyqbd'], ['hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl']], [['a'], ['w'], ['e']], [['abcde'], ['wxyza'], ['efghi']], [['uvwxyz'], ['qrstuv'], ['yzabcd']], [['test123'], ['paop123'], ['xiwx123']], [['1a2b3c'], ['1w2x3y'], ['1e2f3g']], [['hello world'], ['dahhk sknhz'], ['lipps asvph']], [['monitor'], ['ikjepkn'], ['qsrmxsv']], [['abc'], ['wxy'], ['efg']], [['kmt'], ['gip'], ['oqx']], [['park'], ['lwng'], ['tevo']], [['mtkmt'], ['ipgip'], ['qxoqx']], [['testpark123'], ['paoplwng123'], ['xiwxtevo123']], [['uvuvwxyzwxyz'], ['qrqrstuvstuv'], ['yzyzabcdabcd']], [['abcdetest123'], ['wxyzapaop123'], ['efghixiwx123']], [['testpark1233'], ['paoplwng1233'], ['xiwxtevo1233']], [['parrte1a2b3cstpark123'], ['lwnnpa1w2x3yoplwng123'], ['tevvxi1e2f3gwxtevo123']], [['pamonitork'], ['lwikjepkng'], ['teqsrmxsvo']], [['uvwabcxyuz'], ['qrswxytuqv'], ['yzaefgbcyd']], [['uvuvwxyzwxz'], ['qrqrstuvstv'], ['yzyzabcdabd']], [['t'], ['p'], ['x']], [['uvz'], ['qrv'], ['yzd']], [['kuvz'], ['gqrv'], ['oyzd']], [['kkuvz'], ['ggqrv'], ['ooyzd']], [['abct'], ['wxyp'], ['efgx']], [['tes2tpark1233'], ['pao2plwng1233'], ['xiw2xtevo1233']], [['at'], ['wp'], ['ex']], [['tkmtkmtuvwabcxyuzmt'], ['pgipgipqrswxytuqvip'], ['xoqxoqxyzaefgbcydqx']], [['uvuvwxyzwxzyz'], ['qrqrstuvstvuv'], ['yzyzabcdabdcd']], [['tkmtkmtuvwabuvuvwxyzwxzcxyuzmt'], ['pgipgipqrswxqrqrstuvstvytuqvip'], ['xoqxoqxyzaefyzyzabcdabdgbcydqx']], [['tsest123'], ['poaop123'], ['xwiwx123']], [['uvutvwxyzwxzyz'], ['qrqprstuvstvuv'], ['yzyxzabcdabdcd']], [['uvwparrkxyz'], ['qrslwnngtuv'], ['yzatevvobcd']], [['tsest123aparrte1a2b3cstpark123'], ['poaop123wlwnnpa1w2x3yoplwng123'], ['xwiwx123etevvxi1e2f3gwxtevo123']], [['abctabcde'], ['wxypwxyza'], ['efgxefghi']], [['tes2testpark123tpark1233'], ['pao2paoplwng123plwng1233'], ['xiw2xiwxtevo123xtevo1233']], [['uvwabbczxyuz'], ['qrswxxyvtuqv'], ['yzaeffgdbcyd']], [['uvvz'], ['qrrv'], ['yzzd']], [['tsest123aparrte1a2b3cstpatrk123'], ['poaop123wlwnnpa1w2x3yoplwpng123'], ['xwiwx123etevvxi1e2f3gwxtexvo123']], [['paabctak'], ['lwwxypwg'], ['teefgxeo']], [['zz'], ['vv'], ['dd']], [['pararte1a2b3cstpark123'], ['lwnwnpa1w2x3yoplwng123'], ['tevevxi1e2f3gwxtevo123']], [['pamonintork'], ['lwikjejpkng'], ['teqsrmrxsvo']], [['uvutvwxyzwxzyzabckuvz'], ['qrqprstuvstvuvwxygqrv'], ['yzyxzabcdabdcdefgoyzd']], [['uvutvwzzxyzwxzyz'], ['qrqprsvvtuvstvuv'], ['yzyxzaddbcdabdcd']], [['tabcdtabcde'], ['pwxyzpwxyza'], ['xefghxefghi']], [['uvwxwyz'], ['qrstsuv'], ['yzabacd']], [['aabcde'], ['wwxyza'], ['eefghi']], [['cpararte1a2b3cstpark1abct23'], ['ylwnwnpa1w2x3yoplwng1wxyp23'], ['gtevevxi1e2f3gwxtevo1efgx23']], [['tse3st23'], ['poa3op23'], ['xwi3wx23']], [['mtuvwxyzkmt'], ['ipqrstuvgip'], ['qxyzabcdoqx']], [['tsest123aparrte1a2b3cstapark123'], ['poaop123wlwnnpa1w2x3yopwlwng123'], ['xwiwx123etevvxi1e2f3gwxetevo123']], [['cpaararuvvzte1a2b3cstpark1abct23'], ['ylwwnwnqrrvpa1w2x3yoplwng1wxyp23'], ['gteevevyzzdxi1e2f3gwxtevo1efgx23']], [['tse32st23'], ['poa32op23'], ['xwi32wx23']], [['uvutvwxyzwxzyzabckumtkmtvz'], ['qrqprstuvstvuvwxygqipgiprv'], ['yzyxzabcdabdcdefgoyqxoqxzd']], [['uvwaubcxyuz'], ['qrswqxytuqv'], ['yzaeyfgbcyd']], [['abuvutvwxyzwxzyzabckuvzct'], ['wxqrqprstuvstvuvwxygqrvyp'], ['efyzyxzabcdabdcdefgoyzdgx']], [['tes2testppark1233'], ['pao2paopllwng1233'], ['xiw2xiwxttevo1233']], [['uvwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz'], ['qrstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv'], ['yzabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad']], [['xuvuvwxyzwxzyz'], ['tqrqrstuvstvuv'], ['byzyzabcdabdcd']], [['wuvwxyz'], ['sqrstuv'], ['ayzabcd']], [['aabdcde'], ['wwxzyza'], ['eefhghi']], [['uvwxyzwxyz'], ['qrstuvstuv'], ['yzabcdabcd']], [['cpararte1a2b3cstpark1abctuvwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz23'], ['ylwnwnpa1w2x3yoplwng1wxypqrstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv23'], ['gtevevxi1e2f3gwxtevo1efgxyzabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad23']], [['tkumtkmtuvwabuvuvwxyzwxzcxyuzmt'], ['pgqipgipqrswxqrqrstuvstvytuqvip'], ['xoyqxoqxyzaefyzyzabcdabdgbcydqx']], [['uvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywz'], ['qrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusv'], ['yzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcad']], [['wuvwxyzz'], ['sqrstuvv'], ['ayzabcdd']], [['xzyzabckumtkmtvz'], ['tvuvwxygqipgiprv'], ['bdcdefgoyqxoqxzd']], [['zzz'], ['vvv'], ['ddd']], [['ts2e3st23'], ['po2a3op23'], ['xw2i3wx23']], [['uvzmonitorz'], ['qrvikjepknv'], ['yzdqsrmxsvd']], [['t3se3'], ['p3oa3'], ['x3wi3']], [['uvutvwzzxz'], ['qrqprsvvtv'], ['yzyxzaddbd']], [['uvuvzwxyzwxz'], ['qrqrvstuvstv'], ['yzyzdabcdabd']], [['cpararteuvwxwyz1a2b3cstpark1abct23'], ['ylwnwnpaqrstsuv1w2x3yoplwng1wxyp23'], ['gtevevxiyzabacd1e2f3gwxtevo1efgx23']], [['stsest123'], ['opoaop123'], ['wxwiwx123']], [['tsest123aparrte1a2b3cstapark1213'], ['poaop123wlwnnpa1w2x3yopwlwng1213'], ['xwiwx123etevvxi1e2f3gwxetevo1213']], [['uvutvwvxyzwxzuvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywz'], ['qrqprsrtuvstvqrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusv'], ['yzyxzazbcdabdyzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcad']], [['kparrte1a2b3cstpark123'], ['glwnnpa1w2x3yoplwng123'], ['otevvxi1e2f3gwxtevo123']], [['pamonintorkpamonitoork'], ['lwikjejpknglwikjepkkng'], ['teqsrmrxsvoteqsrmxssvo']], [['tsestcpararte1a2b3cstpark1abct23123apa3'], ['poaopylwnwnpa1w2x3yoplwng1wxyp23123wlw3'], ['xwiwxgtevevxi1e2f3gwxtevo1efgx23123ete3']], [['abctest123'], ['wxypaop123'], ['efgxiwx123']], [['xzyzauvwxyzwxyzbckumtzkmtvz'], ['tvuvwqrstuvstuvxygqipvgiprv'], ['bdcdeyzabcdabcdfgoyqxdoqxzd']], [['1testpark1233'], ['1paoplwng1233'], ['1xiwxtevo1233']], [['tse32st233'], ['poa32op233'], ['xwi32wx233']], [['testtpark'], ['paopplwng'], ['xiwxxtevo']], [['abuvutvwxystsest123zwxzyzabckuvzct'], ['wxqrqprstuopoaop123vstvuvwxygqrvyp'], ['efyzyxzabcwxwiwx123dabdcdefgoyzdgx']], [['kmuvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywzt'], ['giqrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusvp'], ['oqyzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcadx']], [['xzyzabckumtkmtvzz'], ['tvuvwxygqipgiprvv'], ['bdcdefgoyqxoqxzdd']], [['uvuvwxyzzyzpamonitork'], ['qrqrstuvvuvlwikjepkng'], ['yzyzabcddcdteqsrmxsvo']], [['ut3se3vwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz'], ['qp3oa3rstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv'], ['yx3wi3zabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad']], [['abuvutvwxyzwxvzyzabckuvzct'], ['wxqrqprstuvstrvuvwxygqrvyp'], ['efyzyxzabcdabzdcdefgoyzdgx']], [['monitormuvvztkmt'], ['ikjepkniqrrvpgip'], ['qsrmxsvqyzzdxoqx']], [['uvxwpuvuvwxyzwxyzarrkxyz'], ['qrtslqrqrstuvstuvwnngtuv'], ['yzbatyzyzabcdabcdevvobcd']], [['uvwxzwyz'], ['qrstvsuv'], ['yzabdacd']], [['monitomrmuvvztkmt'], ['ikjepkiniqrrvpgip'], ['qsrmxsqvqyzzdxoqx']], [['parrte1a2b3cstpark123uvwabcxyuzuvwaxbbczxyuz'], ['lwnnpa1w2x3yoplwng123qrswxytuqvqrswtxxyvtuqv'], ['tevvxi1e2f3gwxtevo123yzaefgbcydyzaebffgdbcyd']], [['uvutvwxyzwxzyzabckuvzabctest123'], ['qrqprstuvstvuvwxygqrvwxypaop123'], ['yzyxzabcdabdcdefgoyzdefgxiwx123']], [['parkk'], ['lwngg'], ['tevoo']], [['uvwabbcxzxyuz'], ['qrswxxytvtuqv'], ['yzaeffgbdbcyd']], [['parrte1a2b3cst2park123'], ['lwnnpa1w2x3yop2lwng123'], ['tevvxi1e2f3gwx2tevo123']], [['bcd&^%'], ['xyz&^%'], ['fgh&^%']], [['thequickbrownfoxjumpsoverthelazydog'], ['pdamqeygxnksjbktfqilokranpdahwvuzkc'], ['xliuymgofvsarjsbnyqtwszivxlipedchsk']], [['abcdefghijklmnopqrstuvwxyz'], ['wxyzabcdefghijklmnopqrstuv'], ['efghijklmnopqrstuvwxyzabcd']], [['wxy'], ['stu'], ['abc']], [['yzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cddddddddddddddddddddddddd']], [['hi    et a gf hellomyfriend'], ['de    ap w cb dahhkiubneajz'], ['lm    ix e kj lippsqcjvmirh']], [['thequickbrownfoxjumpsoverthelazydo'], ['pdamqeygxnksjbktfqilokranpdahwvuzk'], ['xliuymgofvsarjsbnyqtwszivxlipedchs']], [['hi    et a gf hellomyfrienhellod'], ['de    ap w cb dahhkiubneajdahhkz'], ['lm    ix e kj lippsqcjvmirlippsh']], [['et'], ['ap'], ['ix']], [['hello'], ['dahhk'], ['lipps']], [['wxxy'], ['sttu'], ['abbc']], [['ho'], ['dk'], ['ls']], [['helo'], ['dahk'], ['lips']], [['heti    get a gf hellomyfrienhellod'], ['dape    cap w cb dahhkiubneajdahhkz'], ['lixm    kix e kj lippsqcjvmirlippsh']], [['helothequickbrownfoxjumpsoverthelazydo'], ['dahkpdamqeygxnksjbktfqilokranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwszivxlipedchs']], [['yzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdddddddddddddddddddddddddd']], [['hbcd&^%elo'], ['dxyz&^%ahk'], ['lfgh&^%ips']], [['b&cd&^'], ['x&yz&^'], ['f&gh&^']], [['ythequickbrownfoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszivxlipedchs']], [['hello heloworld'], ['dahhk dahksknhz'], ['lipps lipsasvph']], [['heloworld'], ['dahksknhz'], ['lipsasvph']], [['abcdefghijklmnopqrstuvwxyzythequickbrownfoxjumpsoverthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqilokranpdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqtwszivxlipedchs']], [['hi    et a rgf hellomyfrienhellod'], ['de    ap w ncb dahhkiubneajdahhkz'], ['lm    ix e vkj lippsqcjvmirlippsh']], [['heti    get a gf hellomyferienhellod'], ['dape    cap w cb dahhkiubaneajdahhkz'], ['lixm    kix e kj lippsqcjivmirlippsh']], [['hi    et a gf helloetmyfrienhellod'], ['de    ap w cb dahhkapiubneajdahhkz'], ['lm    ix e kj lippsixqcjvmirlippsh']], [['hi'], ['de'], ['lm']], [['thi    et a gf helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydog'], ['pde    ap w cb dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkc'], ['xlm    ix e kj lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchsk']], [['rgf'], ['ncb'], ['vkj']], [['abcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['helothequickbrownfoxumpsoverthelazydo'], ['dahkpdamqeygxnksjbktqilokranpdahwvuzk'], ['lipsxliuymgofvsarjsbyqtwszivxlipedchs']], [['abcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoe'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsi']], [['helothequickbrownfoxumpsovekrthelazydo'], ['dahkpdamqeygxnksjbktqilokragnpdahwvuzk'], ['lipsxliuymgofvsarjsbyqtwsziovxlipedchs']], [['helothequickbrownfoxjumpsgetoverthelazydo'], ['dahkpdamqeygxnksjbktfqilocapkranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkixszivxlipedchs']], [['hi    et  a gf hellomyfrienhellod'], ['de    ap  w cb dahhkiubneajdahhkz'], ['lm    ix  e kj lippsqcjvmirlippsh']], [['yywxy'], ['uustu'], ['ccabc']], [['ythequickbrownfhi    et a gf hellomyfriendoxjumpsoverthelazydo'], ['updamqeygxnksjbde    ap w cb dahhkiubneajzktfqilokranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lippsqcjvmirhsbnyqtwszivxlipedchs']], [['hi    etrgf hhellomyfrienhellod'], ['de    apncb ddahhkiubneajdahhkz'], ['lm    ixvkj llippsqcjvmirlippsh']], [['hhellomyfrienhellod'], ['ddahhkiubneajdahhkz'], ['llippsqcjvmirlippsh']], [['abcdefghijfklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefbghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnjopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['hellomyfriendoxjumpsoverthelazydo'], ['dahhkiubneajzktfqilokranpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszivxlipedchs']], [['thequickbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['heti    get a gf hellomyfrieonhellod'], ['dape    cap w cb dahhkiubneakjdahhkz'], ['lixm    kix e kj lippsqcjvmisrlippsh']], [['hi    et a gf hellomyfrienhellood'], ['de    ap w cb dahhkiubneajdahhkkz'], ['lm    ix e kj lippsqcjvmirlippssh']], [['yywx'], ['uust'], ['ccab']], [['ythequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['updamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['helowythequickbrownfhiorld'], ['dahksupdamqeygxnksjbdeknhz'], ['lipsacxliuymgofvsarjlmsvph']], [['wxxyy'], ['sttuu'], ['abbcc']], [['hi    let a gf hellomyfriend'], ['de    hap w cb dahhkiubneajz'], ['lm    pix e kj lippsqcjvmirh']], [['yzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdddddddddddddddddddddddd']], [['hhellomyfrinhellod'], ['ddahhkiubnejdahhkz'], ['llippsqcjvmrlippsh']], [['hellomyfrienhellodrownfoxjumpsoverthelazydojumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwszivxlipedchs']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogod'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckz'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchsksh']], [['hi    et a gf hellomyfrie'], ['de    ap w cb dahhkiubnea'], ['lm    ix e kj lippsqcjvmi']], [['ythequickbrownfhi'], ['updamqeygxnksjbde'], ['cxliuymgofvsarjlm']], [['heti    get a gf hellomyfrieonhello d'], ['dape    cap w cb dahhkiubneakjdahhk z'], ['lixm    kix e kj lippsqcjvmisrlipps h']], [['gf'], ['cb'], ['kj']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsibcc']], [['heti    get a mgf hellomyfrienhellod'], ['dape    cap w icb dahhkiubneajdahhkz'], ['lixm    kix e qkj lippsqcjvmirlippsh']], [['hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['eetrgft'], ['aapncbp'], ['iixvkjx']], [['eetrgf'], ['aapncb'], ['iixvkj']], [['hellomyferienhellod'], ['dahhkiubaneajdahhkz'], ['lippsqcjivmirlippsh']], [['b&helothequickbrownfoxjumpsgetoverthelazydocd&^'], ['x&dahkpdamqeygxnksjbktfqilocapkranpdahwvuzkyz&^'], ['f&lipsxliuymgofvsarjsbnyqtwkixszivxlipedchsgh&^']], [['hi    et a gf helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellod'], ['de    ap w cb dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['hi    et a gf hellomyfrienheod'], ['de    ap w cb dahhkiubneajdakz'], ['lm    ix e kj lippsqcjvmirlish']], [['yywxxy'], ['uusttu'], ['ccabbc']], [['helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['ohhellomyfrienhellod'], ['kddahhkiubneajdahhkz'], ['sllippsqcjvmirlippsh']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupmpsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytqtwszivxlipedchsibcc']], [['a'], ['w'], ['e']], [['hello heloworlthequickbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['dahhk dahksknhpdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['lipps lipsasvpxliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['ohhellomyfriend'], ['kddahhkiubneajz'], ['sllippsqcjvmirh']], [['hellomyfrienheod'], ['dahhkiubneajdakz'], ['lippsqcjvmirlish']], [['wolrld'], ['skhnhz'], ['aspvph']], [['hi    et a gf helloetmthelquickbrownfoxjumpsoverthelazydoyfrienhellod'], ['de    ap w cb dahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['heloworlthequickbheti'], ['dahksknhpdamqeygxdape'], ['lipsasvpxliuymgoflixm']], [['ergft'], ['ancbp'], ['ivkjx']], [['hel'], ['dah'], ['lip']], [['tlet'], ['phap'], ['xpix']], [['hi    letheti    get a gf hellomyfrieonhello df hellomyfriend'], ['de    hapdape    cap w cb dahhkiubneakjdahhk zb dahhkiubneajz'], ['lm    pixlixm    kix e kj lippsqcjvmisrlipps hj lippsqcjvmirh']], [['abcdefghijfklmnopeetrgftqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefbghijklaapncbpmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnjopqrstiixvkjxuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['hi    et a rgf hellomyfrienhelb&cd&^lod'], ['de    ap w ncb dahhkiubneajdahx&yz&^hkz'], ['lm    ix e vkj lippsqcjvmirlipf&gh&^psh']], [['hellomyfrienhelb&cd&^lod'], ['dahhkiubneajdahx&yz&^hkz'], ['lippsqcjvmirlipf&gh&^psh']], [['helowythehquickbrownfhhiorld'], ['dahksupdadmqeygxnksjbddeknhz'], ['lipsacxliluymgofvsarjllmsvph']], [['ohhelyfrienhellod'], ['kddahubneajdahhkz'], ['sllipcjvmirlippsh']], [['hi    ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de    ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['bythequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo&cd&d^'], ['xupdamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk&yz&z^'], ['fcxliuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs&gh&h^']], [['hellomyfrienhellod'], ['dahhkiubneajdahhkz'], ['lippsqcjvmirlippsh']], [['hi    et a ohhellomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['eeetrgft'], ['aaapncbp'], ['iiixvkjx']], [['hellomyfriendoxjumpsovelrthelazydo'], ['dahhkiubneajzktfqilokrahnpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszipvxlipedchs']], [['hellomyfrienhellood'], ['dahhkiubneajdahhkkz'], ['lippsqcjvmirlippssh']], [['ythequickbrownfoxthequickbheti'], ['updamqeygxnksjbktpdamqeygxdape'], ['cxliuymgofvsarjsbxliuymgoflixm']], [['hellomyfrietrgf'], ['dahhkiubneapncb'], ['lippsqcjvmixvkj']], [['hellomyfrieonhello'], ['dahhkiubneakjdahhk'], ['lippsqcjvmisrlipps']], [['ehel'], ['adah'], ['ilip']], [['helflomyfrietrgf'], ['dahbhkiubneapncb'], ['lipjpsqcjvmixvkj']], [['hhellyomyfrienhellod'], ['ddahhukiubneajdahhkz'], ['llippcsqcjvmirlippsh']], [['helloetmthelquickbrownfoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['ythehelloetmthelquickbrownfoxjumpsoverthelazydoyienhellodnfhi'], ['updadahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkueajdahhkzjbde'], ['cxlilippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscmirlippshrjlm']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsovierthi'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokreanpde'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszmivxlm']], [['heti    get a gfrieonhello d'], ['dape    cap w cbneakjdahhk z'], ['lixm    kix e kjvmisrlipps h']], [['eeet'], ['aaap'], ['iiix']], [['hi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellod'], ['de    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippsh']], [['hi    et ehia rgf hellomyfrienhellod'], ['de    ap adew ncb dahhkiubneajdahhkz'], ['lm    ix ilme vkj lippsqcjvmirlippsh']], [['let'], ['hap'], ['pix']], [['hellomyfriendoxjumpsovelrathelazydo'], ['dahhkiubneajzktfqilokrahnwpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszipvexlipedchs']], [['hi    et a gf helloetmyfrienhellothequickbhetid'], ['de    ap w cb dahhkapiubneajdahhkpdamqeygxdapez'], ['lm    ix e kj lippsixqcjvmirlippsxliuymgoflixmh']], [['heti    get a mgf hehi    et ehia rgf hellomyfrienhellodllomyfrienhellod'], ['dape    cap w icb dade    ap adew ncb dahhkiubneajdahhkzhhkiubneajdahhkz'], ['lixm    kix e qkj lilm    ix ilme vkj lippsqcjvmirlippshppsqcjvmirlippsh']], [['helloomyfrienheod'], ['dahhkkiubneajdakz'], ['lippssqcjvmirlish']], [['hi   helowythehquickbrownfhhiorld ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de   dahksupdadmqeygxnksjbddeknhz ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm   lipsacxliluymgofvsarjllmsvph ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['hello heloworlthequickbheti    get a gf hellomyfrienhellodrownfoxjumpsothequickbhetiverthelazydo'], ['dahhk dahksknhpdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokpdamqeygxdaperanpdahwvuzk'], ['lipps lipsasvpxliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwsxliuymgoflixmzivxlipedchs']], [['abcdefghijklmnopqrstuvwxyzythequickbrownfoxjumpsoveletthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqilokrahappdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqtwszipixxlipedchs']], [['d'], ['z'], ['h']], [['hi    et a ohhelolomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w kddahkhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e sllipspsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['hellomyfrienhellodllomyfrienhellod'], ['dahhkiubneajdahhkzhhkiubneajdahhkz'], ['lippsqcjvmirlippshppsqcjvmirlippsh']], [['hhelothequickbrownfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksjbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsarjsbyqtwsziovxlipedchs']], [['heti    get a mgf hehi   e et ehia rgf hellomyfrienhellodllomyfrhoienhellod'], ['dape    cap w icb dade   a ap adew ncb dahhkiubneajdahhkzhhkiubndkeajdahhkz'], ['lixm    kix e qkj lilm   i ix ilme vkj lippsqcjvmirlippshppsqcjvlsmirlippsh']], [['helll'], ['dahhh'], ['lippp']], [['helothequickbrownfoxjumpsgetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqilocapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkixszilvxlipedchs']], [['hellthi'], ['dahhpde'], ['lippxlm']], [['hellomyfrrienhelb&cd&^lod'], ['dahhkiubnneajdahx&yz&^hkz'], ['lippsqcjvvmirlipf&gh&^psh']], [['yzzzzzzzzzzzzzzzzzzzzzzzzhel'], ['uvvvvvvvvvvvvvvvvvvvvvvvvdah'], ['cddddddddddddddddddddddddlip']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmirlippsh']], [['hellomyfrieendoxjumpsovelrthelazydo'], ['dahhkiubneaajzktfqilokrahnpdahwvuzk'], ['lippsqcjvmiirhsbnyqtwszipvxlipedchs']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogodoworld'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhz'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchskshsasvph']], [['ythequickbrownfhi    et a gf hellomyfriendoxjumpsojverthelazydo'], ['updamqeygxnksjbde    ap w cb dahhkiubneajzktfqilokfranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lippsqcjvmirhsbnyqtwsnzivxlipedchs']], [['hellomyfrienhellodllomyfrhoienhellod'], ['dahhkiubneajdahhkzhhkiubndkeajdahhkz'], ['lippsqcjvmirlippshppsqcjvlsmirlippsh']], [['woolrld'], ['skkhnhz'], ['asspvph']], [['bcd'], ['xyz'], ['fgh']], [['hellomyfergetienhellod'], ['dahhkiubancapeajdahhkz'], ['lippsqcjivkixmirlippsh']], [['bcdhellomyfrienhelb&cd&^lod'], ['xyzdahhkiubneajdahx&yz&^hkz'], ['fghlippsqcjvmirlipf&gh&^psh']], [['helothequickbrowonfoxumpsovekrthelazydo'], ['dahkpdamqeygxnkskjbktqilokragnpdahwvuzk'], ['lipsxliuymgofvsasrjsbyqtwsziovxlipedchs']], [['hhellomyfriod'], ['ddahhkiubnekz'], ['llippsqcjvmsh']], [['mgf'], ['icb'], ['qkj']], [['etrf'], ['apnb'], ['ixvj']], [['helhi'], ['dahde'], ['liplm']], [['bcd&%'], ['xyz&%'], ['fgh&%']], [['hhi    et a ohhellomyfrienhellodrgf hellomyfrienhellodellomyfrienhellood'], ['dde    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkzahhkiubneajdahhkkz'], ['llm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippshippsqcjvmirlippssh']], [['e'], ['a'], ['i']], [['hi    et a rgf hellomyfrienhelb&cd&^llod'], ['de    ap w ncb dahhkiubneajdahx&yz&^hhkz'], ['lm    ix e vkj lippsqcjvmirlipf&gh&^ppsh']], [['bcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lod'], ['xyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkz'], ['fghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^psh']], [['wwxy'], ['sstu'], ['aabc']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoi    t a gf hellomyfrieonhello d'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzke    p w cb dahhkiubneakjdahhk z'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsm    x e kj lippsqcjvmisrlipps h']], [['hlelll'], ['dhahhh'], ['lpippp']], [['eheel'], ['adaah'], ['iliip']], [['heti    get a gfrieonhello helothequickbrownfoxumpsovekrthelazydod'], ['dape    cap w cbneakjdahhk dahkpdamqeygxnksjbktqilokragnpdahwvuzkz'], ['lixm    kix e kjvmisrlipps lipsxliuymgofvsarjsbyqtwsziovxlipedchsh']], [['heolo'], ['dakhk'], ['lisps']], [['ehelhellomyfrienhelb&cd&^lod'], ['adahdahhkiubneajdahx&yz&^hkz'], ['iliplippsqcjvmirlipf&gh&^psh']], [['helloetmyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthigfthequickbhetid'], ['dahhkapiubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdecbpdamqeygxdapez'], ['lippsixqcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmkjxliuymgoflixmh']], [['ehelloetmyfrthirgft'], ['adahhkapiubnpdencbp'], ['ilippsixqcjvxlmvkjx']], [['helbcd&^%lomyfriendoxhi    etrgf hhellomyfrienhellodjumpsoverthelawwxyzydo&cd&d^'], ['dahxyz&^%hkiubneajzktde    apncb ddahhkiubneajdahhkzfqilokranpdahwsstuvuzk&yz&z^'], ['lipfgh&^%psqcjvmirhsblm    ixvkj llippsqcjvmirlippshnyqtwszivxlipeaabcdchs&gh&h^']], [['ohhelolomyfrienhellodrgf'], ['kddahkhkiubneajdahhkzncb'], ['sllipspsqcjvmirlippshvkj']], [['thequickbrownfoxjumpsoverthi    et a gf helloetmyfrienhellodhelazydo'], ['pdamqeygxnksjbktfqilokranpde    ap w cb dahhkapiubneajdahhkzdahwvuzk'], ['xliuymgofvsarjsbnyqtwszivxlm    ix e kj lippsixqcjvmirlippshlipedchs']], [['helloetmyfrienhellothequickbhetid'], ['dahhkapiubneajdahhkpdamqeygxdapez'], ['lippsixqcjvmirlippsxliuymgoflixmh']], [['trhequickbrownfoxjumpsoverthelazydog'], ['pndamqeygxnksjbktfqilokranpdahwvuzkc'], ['xvliuymgofvsarjsbnyqtwszivxlipedchsk']], [['hellomyfriendoxjumpsojverthelazydo'], ['dahhkiubneajzktfqilokfranpdahwvuzk'], ['lippsqcjvmirhsbnyqtwsnzivxlipedchs']], [['eeetrgfthellomyfrienhellodrownfoxjumpsoverthelazydo'], ['aaapncbpdahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['iiixvkjxlippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['gfrieonhello'], ['cbneakjdahhk'], ['kjvmisrlipps']], [['heloo'], ['dahkk'], ['lipss']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrienhellodget'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneajdahhkzcap'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmirlippshkix']], [['helloomyfrienhhi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellodeod'], ['dahhkkiubneajdde    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkzakz'], ['lippssqcjvmirllm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippshish']], [['ehellgft'], ['adahhcbp'], ['ilippkjx']], [['hehi    et a ohhelolomyfrienhellodrgf hellomyfrienhellodlflomyfrietrgf'], ['dade    ap w kddahkhkiubneajdahhkzncb dahhkiubneajdahhkzhbhkiubneapncb'], ['lilm    ix e sllipspsqcjvmirlippshvkj lippsqcjvmirlippshpjpsqcjvmixvkj']], [['hello wlorld'], ['dahhk shknhz'], ['lipps apsvph']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodhelazydoexyy'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzdahwvuzkatuu'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshlipedchsibcc']], [['abcdefghijklmnopqrsquickbrownfoxjumpsovferthelazydo'], ['wxyzabcdefghijklmnomqeygxnksjbktfqilokrbanpdahwvuzk'], ['efghijklmnopqrstuvwuymgofvsarjsbnyqtwszjivxlipedchs']], [['helloetmyfrienhellod'], ['dahhkapiubneajdahhkz'], ['lippsixqcjvmirlippsh']], [['hi    helotheqolod'], ['de    dahkpdamkhkz'], ['lm    lipsxliuspsh']], [['wxabcdefghijklmoxjumpsoverthelazydoexyy'], ['stwxyzabcdefghiktfqilokranpdahwvuzkatuu'], ['abefghijklmnopqsbnyqtwszivxlipedchsibcc']], [['thequickbrownfoxjumpsovertheazydo'], ['pdamqeygxnksjbktfqilokranpdawvuzk'], ['xliuymgofvsarjsbnyqtwszivxliedchs']], [['hi    et ehia rgf hfrienhehellomyfrienhellodrownfoxjumpsoverthelazydojumpsoverthelazydollod'], ['de    ap adew ncb dbneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilokranpdahwvuzkhhkz'], ['lm    ix ilme vkj ljvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwszivxlipedchsppsh']], [['abcdefghijfklmnopeetrgftqazydo'], ['wxyzabcdefbghijklaapncbpmwvuzk'], ['efghijklmnjopqrstiixvkjxuedchs']], [['helothequickbrownfonxjumpsgetoverthelazydo'], ['dahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzk'], ['lipsxliuymgofvsarjsrbnyqtwkixszivxlipedchs']], [['hellomyfrie'], ['dahhkiubnea'], ['lippsqcjvmi']], [['eehia'], ['aadew'], ['iilme']], [['bcohhellomyfrienhellodd'], ['xykddahhkiubneajdahhkzz'], ['fgsllippsqcjvmirlippshh']], [['helbcdhhellyomyfrienhellod&^%lomyfriendoxjumpsoverthelazydo&cd&d^'], ['dahxyzddahhukiubneajdahhkz&^%hkiubneajzktfqilokranpdahwvuzk&yz&z^'], ['lipfghllippcsqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxlipedchs&gh&h^']], [['hellomyfergetienhelllod'], ['dahhkiubancapeajdahhhkz'], ['lippsqcjivkixmirlipppsh']], [['helbcd&^%lomyfriendoxhihhello'], ['dahxyz&^%hkiubneajzktdeddahhk'], ['lipfgh&^%psqcjvmirhsblmllipps']], [['aa'], ['ww'], ['ee']], [['hi    ehi    et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de    ade    ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupompsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlkilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytsqtwszivxlipedchsibcc']], [['hello heti    get a gf hellomyfrieonhello dd'], ['dahhk dape    cap w cb dahhkiubneakjdahhk zz'], ['lipps lixm    kix e kj lippsqcjvmisrlipps hh']], [['helothequickbrownfoxjuhielazydo'], ['dahkpdamqeygxnksjbktfqdeahwvuzk'], ['lipsxliuymgofvsarjsbnylmipedchs']], [['hello heti    get a gf hellomyfheti    get a mgf hellomyfrienhellodo dd'], ['dahhk dape    cap w cb dahhkiubdape    cap w icb dahhkiubneajdahhkzk zz'], ['lipps lixm    kix e kj lippsqcjlixm    kix e qkj lippsqcjvmirlippshs hh']], [['hello helowhellomyfrrienhelb&cd&^lodorld'], ['dahhk dahksdahhkiubnneajdahx&yz&^hkzknhz'], ['lipps lipsalippsqcjvvmirlipf&gh&^pshsvph']], [['yzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cddddddddddddddiliipddddddddddd']], [['bcohhellomyfrieythequickbrownfoxthequickbhetinhellodd'], ['xykddahhkiubneaupdamqeygxnksjbktpdamqeygxdapejdahhkzz'], ['fgsllippsqcjvmicxliuymgofvsarjsbxliuymgoflixmrlippshh']], [['hhellomyffrienhellod'], ['ddahhkiubbneajdahhkz'], ['llippsqcjjvmirlippsh']], [['ef'], ['ab'], ['ij']], [['helloetmyfrienhellodhequicokbrownfoxjumpsoverthelzazydogod'], ['dahhkapiubneajdahhkzdamqeykgxnksjbktfqilokranpdahvwvuzkckz'], ['lippsixqcjvmirlippshliuymgsofvsarjsbnyqtwszivxlipdedchsksh']], [['erghi'], ['ancde'], ['ivklm']], [['hhellomyfriengfrieonhellohellodnhellodlod'], ['ddahhkiubneajcbneakjdahhkdahhkzjdahhkzhkz'], ['llippsqcjvmirkjvmisrlippslippshrlippshpsh']], [['helothequickbrownfoxjumpsgmetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqilociapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkqixszilvxlipedchs']], [['hellb&helothequickbrownfoxjumpsgetoverthelazydocd&^frietrogf'], ['dahhx&dahkpdamqeygxnksjbktfqilocapkranpdahwvuzkyz&^bneapnkcb'], ['lippf&lipsxliuymgofvsarjsbnyqtwkixszivxlipedchsgh&^jvmixvskj']], [['hi    et a gfi hellomyfrie'], ['de    ap w cbe dahhkiubnea'], ['lm    ix e kjm lippsqcjvmi']], [['hello helowhellomyhellomyfrienhelb&cd&^lodfrrienhelb&cd&^lodorld'], ['dahhk dahksdahhkiudahhkiubneajdahx&yz&^hkzbnneajdahx&yz&^hkzknhz'], ['lipps lipsalippsqclippsqcjvmirlipf&gh&^pshjvvmirlipf&gh&^pshsvph']], [['hi    et a rgf hellomyfrietnhelb&cd&^lod'], ['de    ap w ncb dahhkiubneapjdahx&yz&^hkz'], ['lm    ix e vkj lippsqcjvmixrlipf&gh&^psh']], [['hi    et a gf lhgfrieonhelloellomyfrie'], ['de    ap w cb hdcbneakjdahhkahhkiubnea'], ['lm    ix e kj plkjvmisrlippsippsqcjvmi']], [['hellomyfrieonhellod'], ['dahhkiubneakjdahhkz'], ['lippsqcjvmisrlippsh']], [['helbcd&^hellomyfrienhellodellomyfrienhellood%lomyfriendoxhihhello'], ['dahxyz&^dahhkiubneajdahhkzahhkiubneajdahhkkz%hkiubneajzktdeddahhk'], ['lipfgh&^lippsqcjvmirlippshippsqcjvmirlippssh%psqcjvmirhsblmllipps']], [['get'], ['cap'], ['kix']], [['helhlellllthi'], ['dahdhahhhhpde'], ['liplpippppxlm']], [['helloetmyfrienhellohellomyfrienhellodrownfoxjumpsoverthelazydothequickbhetid'], ['dahhkapiubneajdahhkdahhkiubneajdahhkznksjbktfqilokranpdahwvuzkpdamqeygxdapez'], ['lippsixqcjvmirlippslippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsxliuymgoflixmh']], [['hi    et ehia rgf he llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['de    ap adew ncb da hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['lm    ix ilme vkj li ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['hi    ehi   l et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de    ade   h ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm    ilm   p ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['hbcd&^%eo'], ['dxyz&^%ak'], ['lfgh&^%is']], [['ohhelolomyfetrienhellrgf'], ['kddahkhkiubapneajdahhncb'], ['sllipspsqcjixvmirlippvkj']], [['thequicukbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqeyqgxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuymgyoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['helloetmyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthigbhetiid'], ['dahhkapiubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdecxdapeez'], ['lippsixqcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmkflixmmh']], [['hellomyfrrienhelb&cdlod'], ['dahhkiubnneajdahx&yzhkz'], ['lippsqcjvvmirlipf&ghpsh']], [['helowythequicckbrownfhihi    et a gf hellomyfriendorld'], ['dahksupdamqeyygxnksjbdede    ap w cb dahhkiubneajzknhz'], ['lipsacxliuymggofvsarjlmlm    ix e kj lippsqcjvmirhsvph']], [['abcdefghijklmnopqrstuvwxwxabcdefghijklmnopqrstuvwxyyzythequickbrhownfoxjumpsoverthelazydoe'], ['wxyzabcdefghijklmnopqrststwxyzabcdefghijklmnopqrstuuvupdamqeygxndksjbktfqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxyzababefghijklmnopqrstuvwxyzabccdcxliuymgofvlsarjsbnyqtwszivxlipedchsi']], [['efrgft'], ['abncbp'], ['ijvkjx']], [['ythequickbrownfoxjumpsoverthelazydoythequickbrownoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokranpdahwvuzkupdamqeygxnksjktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszivxlipedchscxliuymgofvsarsbnyqtwszivxlipedchs']], [['ehehif'], ['adadeb'], ['ililmj']], [['heheti    get a gf hellomyfrieonhellyodllomyfergetienhelllob&cd&^d'], ['dadape    cap w cb dahhkiubneakjdahhukzhhkiubancapeajdahhhkx&yz&^z'], ['lilixm    kix e kj lippsqcjvmisrlippcshppsqcjivkixmirlipppsf&gh&^h']], [['hi    et aheallomyfriendoxjumpsoverthelazydo gf helloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['de    ap wdawhhkiubneajzktfqilokranpdahwvuzk cb dahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix elieppsqcjvmirhsbnyqtwszivxlipedchs kj lippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['hi e   let a gf hellomyfriend'], ['de a   hap w cb dahhkiubneajz'], ['lm i   pix e kj lippsqcjvmirh']], [['hllelll'], ['dhhahhh'], ['lppippp']], [['hhellyomyfrielod'], ['ddahhukiubneahkz'], ['llippcsqcjvmipsh']], [['hello wbcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lodlorld'], ['dahhk sxyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkzhknhz'], ['lipps afghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^pshpsvph']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodlomyferienhellodt'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzhkiubaneajdahhkzp'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshpsqcjivmirlippshx']], [['hi    et ehia rgf hfrienhehellomyfrienhellodrownfoxjumpsoverthelazydojumpsthelazydollod'], ['de    ap adew ncb dbneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilopdahwvuzkhhkz'], ['lm    ix ilme vkj ljvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwxlipedchsppsh']], [['ft'], ['bp'], ['jx']], [['yzzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cdddddddddddddddiliipddddddddddd']], [['ythequichi'], ['updamqeyde'], ['cxliuymglm']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazeydog'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvauzkc'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedichsk']], [['aickbrownfoxjumpsoveletthelazydo'], ['weygxnksjbktfqilokrahappdahwvuzk'], ['emgofvsarjsbnyqtwszipixxlipedchs']], [['b&helothequickownfoxjumpsgetoverthelazydocd&^'], ['x&dahkpdamqeygksjbktfqilocapkranpdahwvuzkyz&^'], ['f&lipsxliuymgosarjsbnyqtwkixszivxlipedchsgh&^']], [['helothequickbrownfoxjumphellomyfergetienhelllodsoverthelazydo'], ['dahkpdamqeygxnksjbktfqildahhkiubancapeajdahhhkzokranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtlippsqcjivkixmirlipppshwszivxlipedchs']], [['df'], ['zb'], ['hj']], [['b&helothequickownfoxjumpsgetovcerthelazydocd&^'], ['x&dahkpdamqeygksjbktfqilocapkryanpdahwvuzkyz&^'], ['f&lipsxliuymgosarjsbnyqtwkixszgivxlipedchsgh&^']], [['hehi'], ['dade'], ['lilm']], [['hhelloetmyfrienhellodhelazydol'], ['ddahhkapiubneajdahhkzdahwvuzkh'], ['llippsixqcjvmirlippshlipedchsp']], [['hehi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellodlothequickbrownfoxumpsoverthelazydo'], ['dade    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkzhkpdamqeygxnksjbktqilokranpdahwvuzk'], ['lilm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippshpsxliuymgofvsarjsbyqtwszivxlipedchs']], [['ythequickbrownfoxjum'], ['updamqeygxnksjbktfqi'], ['cxliuymgofvsarjsbnyq']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodkbrownfhi'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzgxnksjbde'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshofvsarjlm']], [['helothequetovehrthelazydo'], ['dahkpdamqapkradnpdahwvuzk'], ['lipsxliuyixszilvxlipedchs']], [['hi   helowythehquickbrownfhhiorlde ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de   dahksupdadmqeygxnksjbddeknhza ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm   lipsacxliluymgofvsarjllmsvphi ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['hellomyfrreienhelb&cdlod'], ['dahhkiubnnaeajdahx&yzhkz'], ['lippsqcjvvimirlipf&ghpsh']], [['llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['hhelothequickbrowhelowythequicckbrownfhihinfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksdahksupdamqeyygxnksjbdedejbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsalipsacxliuymggofvsarjlmlmrjsbyqtwsziovxlipedchs']], [['thequickbheti'], ['pdamqeygxdape'], ['xliuymgoflixm']], [['heti    get a gf hellomyfrieonhelllo d'], ['dape    cap w cb dahhkiubneakjdahhhk z'], ['lixm    kix e kj lippsqcjvmisrlippps h']], [['fwwxy'], ['bsstu'], ['jaabc']], [['hhi    et a ohhellomyfrienhellodrgf hellomyfrienhellodellomyfrienhelloold'], ['dde    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkzahhkiubneajdahhkkhz'], ['llm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippshippsqcjvmirlippssph']], [['helhlellelltihi'], ['dahdhahhahhpede'], ['liplpippippxmlm']], [['bcohhellomyfyrienhellodd'], ['xykddahhkiubuneajdahhkzz'], ['fgsllippsqcjcvmirlippshh']], [['hhelllomyfriod'], ['ddahhhkiubnekz'], ['llipppsqcjvmsh']], [['hellomyfrienhellodrownfooxjumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbkktfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjssbnyqtwszivxlipedchs']], [['helloetmyfrienhellzodhequickbrownfoxjumpsoverthelazydogodoworld'], ['dahhkapiubneajdahhvkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhz'], ['lippsixqcjvmirlippdshliuymgofvsarjsbnyqtwszivxlipedchskshsasvph']], [['yzzzzzzzzzzzzzzeheelzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvadaahvvvvvvvvvvvv'], ['cddddddddddddddiliipdddddddddddd']], [['etrgf'], ['apncb'], ['ixvkj']], [['hi l   ehi   l et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de h   ade   h ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm p   ilm   p ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['yzhzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvdvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cdlddddddddddddddiliipddddddddddd']], [['ythequickbrownfoxjumpsovownoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokrksjktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszsarsbnyqtwszivxlipedchs']], [['yywahellomyfriendoxjumupsoverthelazydoxy'], ['uuswdahhkiubneajzktfqiqlokranpdahwvuzktu'], ['ccaelippsqcjvmirhsbnyqytwszivxlipedchsbc']], [['hhellyoomyfrielod'], ['ddahhukkiubneahkz'], ['llippcssqcjvmipsh']], [['bcohhellhomyfrienhellodd'], ['xykddahhdkiubneajdahhkzz'], ['fgsllipplsqcjvmirlippshh']], [['ehelothequickbrownfonxjumpsgetoverthelazydot'], ['adahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzkp'], ['ilipsxliuymgofvsarjsrbnyqtwkixszivxlipedchsx']], [['hlel'], ['dhah'], ['lpip']], [['helloetmyfrthi'], ['dahhkapiubnpde'], ['lippsixqcjvxlm']], [['hellomyfergetienfhelllod'], ['dahhkiubancapeajbdahhhkz'], ['lippsqcjivkixmirjlipppsh']], [['helowythequicckbrownfhihi    ethhelothequickbrownfoxumpsovekrthelazydo a gf hellomyfriendorld'], ['dahksupdamqeyygxnksjbdede    apddahkpdamqeygxnksjbktqilokragnpdahwvuzk w cb dahhkiubneajzknhz'], ['lipsacxliuymggofvsarjlmlm    ixllipsxliuymgofvsarjsbyqtwsziovxlipedchs e kj lippsqcjvmirhsvph']], [['ohhhelllellomyfrienhellod'], ['kdddahhhahhkiubneajdahhkz'], ['slllipppippsqcjvmirlippsh']], [['eff'], ['abb'], ['ijj']], [['h eti    get a mgf hellomyfrienhellod'], ['d ape    cap w icb dahhkiubneajdahhkz'], ['l ixm    kix e qkj lippsqcjvmirlippsh']], [['hellomyfrietnhelb&cd&^lod'], ['dahhkiubneapjdahx&yz&^hkz'], ['lippsqcjvmixrlipf&gh&^psh']], [['b&cdheythequickbrownfoxjumpshi'], ['x&yzdaupdamqeygxnksjbktfqilode'], ['f&ghlicxliuymgofvsarjsbnyqtwlm']], [['helhlomyfriend'], ['dahdhkiubneajz'], ['liplpsqcjvmirh']], [['hhelothequickbrowhelhowythequicckbrownfhihinfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksdahdksupdamqeyygxnksjbdedejbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsaliplsacxliuymggofvsarjlmlmrjsbyqtwsziovxlipedchs']], [['hi    et a rg f hellomyfrietnhelb&cd&^lod'], ['de    ap w nc b dahhkiubneapjdahx&yz&^hkz'], ['lm    ix e vk j lippsqcjvmixrlipf&gh&^psh']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsoverthelazydoexyyd'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpdahwvuzkatuuz'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxlipedchsibcch']], [['hi    et a helolomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w dahkhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e lipspsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['helolomyfrienhellorgf'], ['dahkhkiubneajdahhkncb'], ['lipspsqcjvmirlippsvkj']], [['heeloo'], ['daahkk'], ['liipss']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsovertyhelazydoexyyd'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpudahwvuzkatuuz'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxclipedchsibcch']], [['fhellfomyfrie'], ['bdahhbkiubnea'], ['jlippjsqcjvmi']], [['gget'], ['ccap'], ['kkix']], [['heelazydo'], ['daahwvuzk'], ['liipedchs']], [['eeetrwxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupompsoverthelazydoexyygft'], ['aaapnstwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlkilokranpdahwvuzkatuucbp'], ['iiixvabefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytsqtwszivxlipedchsibcckjx']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodsoverthelazydo'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzokranpdahwvuzk'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshwszivxlipedchs']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrieunhellodget'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneaqjdahhkzcap'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmiyrlippshkix']], [['ahellomyfriendoxjumupsoverthelazydo'], ['wdahhkiubneajzktfqiqlokranpdahwvuzk'], ['elippsqcjvmirhsbnyqytwszivxlipedchs']], [['helowythehquickbrownfhhiorlde'], ['dahksupdadmqeygxnksjbddeknhza'], ['lipsacxliluymgofvsarjllmsvphi']], [['ithi'], ['epde'], ['mxlm']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsovertyhelazydoexyyhellomyfrienhelb&cd&^loddeeetrgft'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpudahwvuzkatuudahhkiubneajdahx&yz&^hkzzaaapncbp'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxclipedchsibcclippsqcjvmirlipf&gh&^pshhiiixvkjx']], [['hellomyfrietrogf'], ['dahhkiubneapnkcb'], ['lippsqcjvmixvskj']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoi'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzke'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsm']], [['ythequickbrowunfoxthequickbheti'], ['updamqeygxnksqjbktpdamqeygxdape'], ['cxliuymgofvsayrjsbxliuymgoflixm']], [['bcohhellomyfyrienhellofdwxabcdefghijklmoxjumpsovertyhelazydoexyyd'], ['xykddahhkiubuneajdahhkbzstwxyzabcdefghiktfqilokranpudahwvuzkatuuz'], ['fgsllippsqcjcvmirlippsjhabefghijklmnopqsbnyqtwszivxclipedchsibcch']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelcazydoi    t a gf hellomyfrieonhello d'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahywvuzke    p w cb dahhkiubneakjdahhk z'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipgedchsm    x e kj lippsqcjvmisrlipps h']], [['hi    et ehia rgf he llomyfrihi    et a helolomyfrienhellodrgf hellomyfrienhellodverthelazyollod'], ['de    ap adew ncb da hhkiubnede    ap w dahkhkiubneajdahhkzncb dahhkiubneajdahhkzranpdahwvukhhkz'], ['lm    ix ilme vkj li ppsqcjvmlm    ix e lipspsqcjvmirlippshvkj lippsqcjvmirlippshzivxlipedcsppsh']], [['helhlellelltiihi'], ['dahdhahhahhpeede'], ['liplpippippxmmlm']], [['ohhhelllellomyfrienheellod'], ['kdddahhhahhkiubneajdaahhkz'], ['slllipppippsqcjvmirliippsh']], [['hhellyomyfrienyhello'], ['ddahhukiubneajudahhk'], ['llippcsqcjvmirclipps']], [['ohhhelllellomyfriabcdefghijfklmnopeetrgftqrstuvwxyzythequickbrhownfoxjumpsoverthelahzydoenhellod'], ['kdddahhhahhkiubnewxyzabcdefbghijklaapncbpmnopqrstuvupdamqeygxndksjbktfqilokranpdahwdvuzkajdahhkz'], ['slllipppippsqcjvmefghijklmnjopqrstiixvkjxuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipeldchsirlippsh']], [['hellomyfrienhellodlflomyfrietrgf'], ['dahhkiubneajdahhkzhbhkiubneapncb'], ['lippsqcjvmirlippshpjpsqcjvmixvkj']], [['helxloetmthequickbrowoxjumpsoverthelazydoyfrieunhellodget'], ['dahthkapipdamqeygxnksktfqilokranpdahwvuzkubneaqjdahhkzcap'], ['lipbpsixqxliuymgofvsasbnyqtwszivxlipedchscjvmiyrlippshkix']], [['helhlellelletiihi'], ['dahdhahhahhapeede'], ['liplpippippixmmlm']], [['abcdefghijklmnopqrsteuvwxwxabcdefghijklmnopqrstuvwxyyzythequickbrhownfoxjsumpsoverthelazydoe'], ['wxyzabcdefghijklmnopaqrststwxyzabcdefghijklmnopqrstuuvupdamqeygxndksjbktfoqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxiyzababefghijklmnopqrstuvwxyzabccdcxliuymgofvlsarjsbnwyqtwszivxlipedchsi']], [['hhellomyfriengrieonhellohellodnhellodlod'], ['ddahhkiubneajcneakjdahhkdahhkzjdahhkzhkz'], ['llippsqcjvmirkvmisrlippslippshrlippshpsh']], [['hhellyomyfriehello'], ['ddahhukiubneadahhk'], ['llippcsqcjvmilipps']], [['bcd&hellomoyfrienhellodrownfoxjumpsoverthhhellomyfriengfrieonhellohellodelazydo%'], ['xyz&dahhkikubneajdahhkznksjbktfqilokranpdddahhkiubneajcbneakjdahhkdahhkzahwvuzk%'], ['fgh&lippsqscjvmirlippshvsarjsbnyqtwszivxlllippsqcjvmirkjvmisrlippslippshipedchs%']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydooexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchssibcc']], [['hi    elt a rgf hellomyfrienhellod'], ['de    ahp w ncb dahhkiubneajdahhkz'], ['lm    ipx e vkj lippsqcjvmirlippsh']], [['helflomyfriietrgf'], ['dahbhkiubneeapncb'], ['lipjpsqcjvmmixvkj']], [['ehiabcdefghijklmnopqrwnfxjumpsoveletthelazydoa'], ['adewxyzabcdefghijklmnsjbtfqilokrahappdahwvuzkw'], ['ilmefghijklmnopqrstuvarjbnyqtwszipixxlipedchse']], [['healloetmyfrienhellodhequickbrownfoxjumpsoverthelazeydog'], ['dawhhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvauzkc'], ['lieppsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedichsk']], [['lhgfrieonhelloellomyfrie'], ['hdcbneakjdahhkahhkiubnea'], ['plkjvmisrlippsippsqcjvmi']], [['hhellylomyfrienhellod'], ['ddahhuhkiubneajdahhkz'], ['llippcpsqcjvmirlippsh']], [['hfsoverthigfthequickbhetid'], ['dbokranpdecbpdamqeygxdapez'], ['ljwszivxlmkjxliuymgoflixmh']], [['yywbcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lodlorldwxy'], ['uusxyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkzhknhzstu'], ['ccafghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^pshpsvphabc']], [['bcdhellomyfrieonhellod&^%'], ['xyzdahhkiubneakjdahhkz&^%'], ['fghlippsqcjvmisrlippsh&^%']], [['aheallomyfriendoxjumpsoverthelazydo'], ['wdawhhkiubneajzktfqilokranpdahwvuzk'], ['elieppsqcjvmirhsbnyqtwszivxlipedchs']], [['aheallomyfriendoxjumpsoverthwxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsovierthielazydo'], ['wdawhhkiubneajzktfqilokranpdstwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokreanpdeahwvuzk'], ['elieppsqcjvmirhsbnyqtwszivxlabefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszmivxlmipedchs']], [['hhellohelloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogodoworldmyfrienhellodeod'], ['ddahhkdahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhziubneajdahhkzakz'], ['llippslippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchskshsasvphqcjvmirlippshish']], [['eflie'], ['abhea'], ['ijpmi']], [['ohhelyfrienhellood'], ['kddahubneajdahhkkz'], ['sllipcjvmirlippssh']], [['ehellioetmhi'], ['adahhekapide'], ['ilippmsixqlm']], [['ahellomyfriendoxjumupsoverthelaefzydo'], ['wdahhkiubneajzktfqiqlokranpdahwabvuzk'], ['elippsqcjvmirhsbnyqytwszivxlipeijdchs']], [['hellomyfrieonhenllod'], ['dahhkiubneakjdajhhkz'], ['lippsqcjvmisrlirppsh']], [['hlelloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['dhahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lpippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['hi    helothelbcd&^%lomyfriendoxhihhelloheqolod'], ['de    dahkpdahxyz&^%hkiubneajzktdeddahhkdamkhkz'], ['lm    lipsxlipfgh&^%psqcjvmirhsblmllippsliuspsh']], [['helloomyfrienhhi    ehi    et a gf hellomyfrietrogf hhellohehetimyfrienhellodeod'], ['dahhkkiubneajdde    ade    ap w cb dahhkiubneapnkcb ddahhkdadapeiubneajdahhkzakz'], ['lippssqcjvmirllm    ilm    ix e kj lippsqcjvmixvskj llippslilixmqcjvmirlippshish']], [['hl'], ['dh'], ['lp']], [['helhii'], ['dahdee'], ['liplmm']], [['hellomyfriendoxjumpsojvertaheallomyfriendoxjumpsoverthelazydoazydo'], ['dahhkiubneajzktfqilokfranpwdawhhkiubneajzktfqilokranpdahwvuzkwvuzk'], ['lippsqcjvmirhsbnyqtwsnzivxelieppsqcjvmirhsbnyqtwszivxlipedchsedchs']], [['hellomyfrienhellodverthelazyollod'], ['dahhkiubneajdahhkzranpdahwvukhhkz'], ['lippsqcjvmirlippshzivxlipedcsppsh']], [['eheihif'], ['adaedeb'], ['ilimlmj']], [['helothequickbrownfoxjumtpsgmetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqiplociapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqxtwkqixszilvxlipedchs']], [['ythequickbrownfoxthuickbheti'], ['updamqeygxnksjbktpdqeygxdape'], ['cxliuymgofvsarjsbxlymgoflixm']], [['hi  df  et ehia rgf he llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['de  zb  ap adew ncb da hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['lm  hj  ix ilme vkj li ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['fhellfomyfrieheeloo'], ['bdahhbkiubneadaahkk'], ['jlippjsqcjvmiliipss']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodhelazydoexyyzzzzzzzzzzzzzzzzzzet'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzdahwvuzkatuuvvvvvvvvvvvvvvvvvvap'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshlipedchsibccddddddddddddddddddix']], [['ohhellomyfrienheellod'], ['kddahhkiubneajdaahhkz'], ['sllippsqcjvmirliippsh']], [['iheheti'], ['edadape'], ['mlilixm']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodlomyferienhellodtgf'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzhkiubaneajdahhkzpcb'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshpsqcjivmirlippshxkj']], [['hello heti    get a gf hellomyllo dd'], ['dahhk dape    cap w cb dahhkiuhhk zz'], ['lipps lixm    kix e kj lippsqcpps hh']], [['f'], ['b'], ['j']], [['eehhi    et a gf helloetmthelquickbrownfoxjumpsohverthelazydoyfrienhellodia'], ['aadde    ap w cb dahhkapipdahmqeygxnksjbktfqilokdranpdahwvuzkubneajdahhkzew'], ['iillm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwslzivxlipedchscjvmirlippshme']], [['heti    get a mgf hellomyfrienhellodhl'], ['dape    cap w icb dahhkiubneajdahhkzdh'], ['lixm    kix e qkj lippsqcjvmirlippshlp']], [['thequhelothequickbrownfoxjumpsgetovehrthelazydoyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqdahkpdamqeygxnksjbktfqilocapkradnpdahwvuzkubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuylipsxliuymgofvsarjsbnyqtwkixszilvxlipedchscjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['helolomyfrienhhelloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodellorgf'], ['dahkhkiubneajddahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzahhkncb'], ['lipspsqcjvmirllippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshippsvkj']], [['hellomyferienhelhabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoiod'], ['dahhkiubaneajdahdwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkekz'], ['lippsqcjivmirliplefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsmsh']], [['heeoloo'], ['daakhkk'], ['liispss']], [['hellomyfrienhellodxjumpsoverthelazydo'], ['dahhkiubneajdahhkztfqilokranpdahwvuzk'], ['lippsqcjvmirlippshbnyqtwszivxlipedchs']], [['aickbrownfoxjhumpsoveletthelazydo'], ['weygxnksjbktfdqilokrahappdahwvuzk'], ['emgofvsarjsbnlyqtwszipixxlipedchs']], [['hhellomyfriengfrieonhellohellodoverthelazydoythequickbrownoxjumpsoverthelazydollomyfrietrgf'], ['ddahhkiubneajcbneakjdahhkdahhkzkranpdahwvuzkupdamqeygxnksjktfqilokranpdahwvuzkhhkiubneapncb'], ['llippsqcjvmirkjvmisrlippslippshszivxlipedchscxliuymgofvsarsbnyqtwszivxlipedchsppsqcjvmixvkj']], [['helbcdhhellyomyfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhukiubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['hi    et a gf helllomyfrienhellood'], ['de    ap w cb dahhhkiubneajdahhkkz'], ['lm    ix e kj lipppsqcjvmirlippssh']], [['hellomyfrienhellodrownfoxjumpsothequickbhetiverthelazydohi'], ['dahhkiubneajdahhkznksjbktfqilokpdamqeygxdaperanpdahwvuzkde'], ['lippsqcjvmirlippshvsarjsbnyqtwsxliuymgoflixmzivxlipedchslm']], [['hhelloetmyhi    et a gf hellomyfriendfrienhellodhelazydol'], ['ddahhkapiude    ap w cb dahhkiubneajzbneajdahhkzdahwvuzkh'], ['llippsixqclm    ix e kj lippsqcjvmirhjvmirlippshlipedchsp']], [['wlorld'], ['shknhz'], ['apsvph']], [['helolnhello dd'], ['dahkhjdahhk zz'], ['lipsprlipps hh']], [['ythbequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['updxamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['cxlfiuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['hellomdyfriendoxjumpsojverthelazydo'], ['dahhkizubneajzktfqilokfranpdahwvuzk'], ['lippsqhcjvmirhsbnyqtwsnzivxlipedchs']], [['helloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['helbcdhhellyom&yfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhuki&ubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsq&cjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['helbcdhhellyofmyfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhukbiubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsjqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['llomyfrienhehellomyfrienhellooxjumpsoverthelazyollod'], ['hhkiubneajdadahhkiubneajdahhkktfqilokranpdahwvukhhkz'], ['ppsqcjvmirlilippsqcjvmirlippssbnyqtwszivxlipedcsppsh']], [['yzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthi'], ['uvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpde'], ['cdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlm']], [['helolnhelnlo'], ['dahkhjdahjhk'], ['lipsprliprps']], [['wxxyyworld'], ['sttuusknhz'], ['abbccasvph']], [['bcohhellomyfhi'], ['xykddahhkiubde'], ['fgsllippsqcjlm']], [['heloethequickbrownfoxjumpsgmetovehrthelazydo'], ['dahkapdamqeygxnksjbktfqilociapkradnpdahwvuzk'], ['lipsixliuymgofvsarjsbnyqtwkqixszilvxlipedchs']], [['yzhzzzzzzzzzzzzzzeyheelzzzzzzzzzzz'], ['uvdvvvvvvvvvvvvvvaudaahvvvvvvvvvvv'], ['cdlddddddddddddddicliipddddddddddd']], [['hi    et a gf helloetmthelquickbrownfoxjumpsoverthnelazydoyfrienhellod'], ['de    ap w cb dahhkapipdahmqeygxnksjbktfqilokranpdjahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwszivxlripedchscjvmirlippsh']], [['helloetmpsoverthelazydoyfrienhellodfhelllod'], ['dahhkapilokranpdahwvuzkubneajdahhkzbdahhhkz'], ['lippsixqtwszivxlipedchscjvmirlippshjlipppsh']], [['hellll'], ['dahhhh'], ['lipppp']], [['helhlelthi'], ['dahdhahpde'], ['liplpipxlm']], [['ohhellomyfrieod'], ['kddahhkiubneakz'], ['sllippsqcjvmish']], [['helothelbcd&^%lomyfriendoxhihhelloheqolod'], ['dahkpdahxyz&^%hkiubneajzktdeddahhkdamkhkz'], ['lipsxlipfgh&^%psqcjvmirhsblmllippsliuspsh']], [['ohhelllomyfriend'], ['kddahhhkiubneajz'], ['sllipppsqcjvmirh']], [['hellhi'], ['dahhde'], ['lipplm']], [['thelothequickbrownfonxjumpsgetoverthelazydo'], ['pdahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzk'], ['xlipsxliuymgofvsarjsrbnyqtwkixszivxlipedchs']], [['hhhellyomyfrienhellodl'], ['dddahhukiubneajdahhkzh'], ['lllippcsqcjvmirlippshp']], [['ohhelolomyfrienhellodgf'], ['kddahkhkiubneajdahhkzcb'], ['sllipspsqcjvmirlippshkj']], [['hhellomyfriengfrieonhelheti    get a gf hellomyfrieonhello dlohellod'], ['ddahhkiubneajcbneakjdahdape    cap w cb dahhkiubneakjdahhk zhkdahhkz'], ['llippsqcjvmirkjvmisrliplixm    kix e kj lippsqcjvmisrlipps hpslippsh']], [['hhelyfrienhellod'], ['ddahubneajdahhkz'], ['llipcjvmirlippsh']], [['b&cc^'], ['x&yy^'], ['f&gg^']], [['heti    get a gfrieonhello helothequickbrownfoxumpsovekrthelazydodehel'], ['dape    cap w cbneakjdahhk dahkpdamqeygxnksjbktqilokragnpdahwvuzkzadah'], ['lixm    kix e kjvmisrlipps lipsxliuymgofvsarjsbyqtwsziovxlipedchshilip']], [['hello helowhellomyfrrienhelhb&cd&^lodorld'], ['dahhk dahksdahhkiubnneajdahdx&yz&^hkzknhz'], ['lipps lipsalippsqcjvvmirliplf&gh&^pshsvph']], [['bchllomyfhi'], ['xydhhkiubde'], ['fglppsqcjlm']], [['hhellomyfrienhellodehi'], ['ddahhkiubneajdahhkzade'], ['llippsqcjvmirlippshilm']], [['helothequickbrownfoxumpsovekrthelazydodehel'], ['dahkpdamqeygxnksjbktqilokragnpdahwvuzkzadah'], ['lipsxliuymgofvsarjsbyqtwsziovxlipedchshilip']], [['gehelloetmpsoverthelazydoyfrienhellodfhelllod'], ['cadahhkapilokranpdahwvuzkubneajdahhkzbdahhhkz'], ['kilippsixqtwszivxlipedchscjvmirlippshjlipppsh']], [['hellomyfrienhelleodrownfoxjumpabcdefghijklmnopqrstuvwxyzythequickbrownfoxjumhello'], ['dahhkiubneajdahhakznksjbktfqilwxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqidahhk'], ['lippsqcjvmirlippishvsarjsbnyqtefghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqlipps']], [['heti    get a gfrieonhello helothequicikbrownfoxumpsovekrthelazydodehel'], ['dape    cap w cbneakjdahhk dahkpdamqeyegxnksjbktqilokragnpdahwvuzkzadah'], ['lixm    kix e kjvmisrlipps lipsxliuymgmofvsarjsbyqtwsziovxlipedchshilip']], [['hod'], ['dkz'], ['lsh']], [['hhelloehellomyfrieonhelllotmyhi    et a gf hellomyfriendfrienhellodhelazydol'], ['ddahhkadahhkiubneakjdahhhkpiude    ap w cb dahhkiubneajzbneajdahhkzdahwvuzkh'], ['llippsilippsqcjvmisrlipppsxqclm    ix e kj lippsqcjvmirhjvmirlippshlipedchsp']], [['hhellomyfriengfrieonhelheti'], ['ddahhkiubneajcbneakjdahdape'], ['llippsqcjvmirkjvmisrliplixm']], [['ehabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelcazydoit'], ['adwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahywvuzkep'], ['ilefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipgedchsmx']], [['ehelloetyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthiet'], ['adahhkapubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdeap'], ['ilippsixcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmix']], [['%bcd&^%'], ['%xyz&^%'], ['%fgh&^%']], [['thequickbromwnfoxjumpsoverthelazydog'], ['pdamqeygxnkisjbktfqilokranpdahwvuzkc'], ['xliuymgofvsqarjsbnyqtwszivxlipedchsk']], [['theqcuickbrownfoxjumpsoverthelazydog'], ['pdamyqeygxnksjbktfqilokranpdahwvuzkc'], ['xliugymgofvsarjsbnyqtwszivxlipedchsk']], [['hi    et a gf helbcd&^%lomyfriend'], ['de    ap w cb dahxyz&^%hkiubneajz'], ['lm    ix e kj lipfgh&^%psqcjvmirh']], [['yzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvv'], ['cdddddddddddddddd']], [['hellogfa world'], ['dahhkcbw sknhz'], ['lippskje asvph']], [['hi    et a gf helbcd&^%lomy friend'], ['de    ap w cb dahxyz&^%hkiu bneajz'], ['lm    ix e kj lipfgh&^%psqc jvmirh']], [['bcdd&^%'], ['xyzz&^%'], ['fghh&^%']], [['%bcdhello&^%'], ['%xyzdahhk&^%'], ['%fghlipps&^%']], [['thequicerthelazydog'], ['pdamqeyanpdahwvuzkc'], ['xliuymgivxlipedchsk']], [['%bcdhelwxylo&^%'], ['%xyzdahstuhk&^%'], ['%fghlipabcps&^%']], [['ehello'], ['adahhk'], ['ilipps']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcddddddddddddddddddddddddddddddddd']], [['hellogfa worl d'], ['dahhkcbw sknh z'], ['lippskje asvp h']], [['hi    et a gf hellogmyfriend'], ['de    ap w cb dahhkciubneajz'], ['lm    ix e kj lippskqcjvmirh']], [['%bc^d&^%'], ['%xy^z&^%'], ['%fg^h&^%']], [['bc&^%'], ['xy&^%'], ['fg&^%']], [['abcdefghijklmnopqrstuvxyz'], ['wxyzabcdefghijklmnopqrtuv'], ['efghijklmnopqrstuvwxyzbcd']], [['thequicerthelazydoag'], ['pdamqeyanpdahwvuzkwc'], ['xliuymgivxlipedchsek']], [['thequicertthelazydog'], ['pdamqeyanppdahwvuzkc'], ['xliuymgivxxlipedchsk']], [['hellogfa'], ['dahhkcbw'], ['lippskje']], [['thequickbrthequicerthelazydogownfoxjumpsoverthelazydo'], ['pdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokranpdahwvuzk'], ['xliuymgofvxliuymgivxlipedchsksarjsbnyqtwszivxlipedchs']], [['bc&^%thequicerthelazydogbc&^%'], ['xy&^%pdamqeyanpdahwvuzkcxy&^%'], ['fg&^%xliuymgivxlipedchskfg&^%']], [['abcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyz'], ['wxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuv'], ['efghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcd']], [['thequickbrownfoxydo'], ['pdamqeygxnksjbktuzk'], ['xliuymgofvsarjsbchs']], [['thequicwkbrthequicerthelazydogownofoxjumpsoverthelazydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilokranpdahwvuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwszivxlipedchs']], [['thequickborownfoxydo'], ['pdamqeygxknksjbktuzk'], ['xliuymgofsvsarjsbchs']], [['world'], ['sknhz'], ['asvph']], [['abcdefghihjklmnopqrstuvxyz'], ['wxyzabcdedfghijklmnopqrtuv'], ['efghijklmlnopqrstuvwxyzbcd']], [['hi    ehellot a gf hellogmyfriend'], ['de    adahhkp w cb dahhkciubneajz'], ['lm    ilippsx e kj lippskqcjvmirh']], [['hi    et a gf helbcmd&^%lomyfriend'], ['de    ap w cb dahxyiz&^%hkiubneajz'], ['lm    ix e kj lipfgqh&^%psqcjvmirh']], [['%b^c^d&^%'], ['%x^y^z&^%'], ['%f^g^h&^%']], [['hellomyfriend'], ['dahhkiubneajz'], ['lippsqcjvmirh']], [['helbcd&^%lomy'], ['dahxyz&^%hkiu'], ['lipfgh&^%psqc']], [['thequickbromwnfoxjumpsovertheletazydog'], ['pdamqeygxnkisjbktfqilokranpdahapwvuzkc'], ['xliuymgofvsqarjsbnyqtwszivxlipixedchsk']], [['hellogmyfriend'], ['dahhkciubneajz'], ['lippskqcjvmirh']], [['thequicekbromwnfoxjumpsoverthelazydog'], ['pdamqeyagxnkisjbktfqilokranpdahwvuzkc'], ['xliuymgiofvsqarjsbnyqtwszivxlipedchsk']], [['yzz'], ['uvv'], ['cdd']], [['hi    ehellott a gf hellogmyfriend'], ['de    adahhkpp w cb dahhkciubneajz'], ['lm    ilippsxx e kj lippskqcjvmirh']], [['thkbrownfoxjumpsoverthelazydo'], ['pdgxnksjbktfqilokranpdahwvuzk'], ['xlofvsarjsbnyqtwszivxlipedchs']], [['thequickbrownfoxjumpsoverthelazydfo'], ['pdamqeygxnksjbktfqilokranpdahwvuzbk'], ['xliuymgofvsarjsbnyqtwszivxlipedchjs']], [['theqcuickbrownfoxjumpsoverthelazbydog'], ['pdamyqeygxnksjbktfqilokranpdahwvxuzkc'], ['xliugymgofvsarjsbnyqtwszivxlipedfchsk']], [['theqcuickabcdefghihjklmnopqrstuvxyzbrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghijklmnopqrtuvxnksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['helllogfa'], ['dahhhkcbw'], ['lipppskje']], [['thequickbrthequicerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymgivxlipedchsksarjsbnyqtwszipedchs']], [['bc&^%thequicerthelazydothkbrownfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnksjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvsarjsbnyqtwszivxlipedchs&^%']], [['bc&^hello%'], ['xy&^dahhk%'], ['fg&^lipps%']], [['ehellott'], ['adahhkpp'], ['ilippsxx']], [['thequickbromwnfoxjumpsoverdog'], ['pdamqeygxnkisjbktfqilokranzkc'], ['xliuymgofvsqarjsbnyqtwszivhsk']], [['hellogfa wetorld'], ['dahhkcbw sapknhz'], ['lippskje aixsvph']], [['wetorld'], ['sapknhz'], ['aixsvph']], [['hi    et a gf helbcdhi    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzde    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlm    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['hi    et a gf helbcmd&^%lo myfriend'], ['de    ap w cb dahxyiz&^%hk iubneajz'], ['lm    ix e kj lipfgqh&^%ps qcjvmirh']], [['thequicerthequicekbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgiofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['thequiuckbrownfoxjumpsoverthelazydo'], ['pdamqeqygxnksjbktfqilokranpdahwvuzk'], ['xliuymygofvsarjsbnyqtwszivxlipedchs']], [['bc&^%thequicerthelazydoghelbcmd&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchsklipfgqh&^%psfg&^%']], [['helbcd&^thequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfgh&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['bc&thequicertthelazydog^%'], ['xy&pdamqeyanppdahwvuzkc^%'], ['fg&xliuymgivxxlipedchsk^%']], [['theqthequicerthequicekbromwnfoxjumpsoverthelazydogthelazydogdog'], ['pdampdamqeyanpdamqeyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkczkc'], ['xliuxliuymgivxliuymgiofvsqarjsbnyqtwszivxlipedchskxlipedchskhsk']], [['hi    et  a gf helbcmld&^%lo myfriend'], ['de    ap  w cb dahxyihz&^%hk iubneajz'], ['lm    ix  e kj lipfgqph&^%ps qcjvmirh']], [['afbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyz'], ['wbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuv'], ['ejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcd']], [['bc&^%thequicerthelazydoghelbcmd&&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchsklipfgqh&&^%psfg&^%']], [['ehelloyzz'], ['adahhkuvv'], ['ilippscdd']], [['hi r   et a gf helbcmd&^%lomyfriend'], ['de n   ap w cb dahxyiz&^%hkiubneajz'], ['lm v   ix e kj lipfgqh&^%psqcjvmirh']], [['gf%b^c^d&^%'], ['cb%x^y^z&^%'], ['kj%f^g^h&^%']], [['thequtickborownfoxydo'], ['pdamqpeygxknksjbktuzk'], ['xliuyxmgofsvsarjsbchs']], [['thequicerthequicezkbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyavgxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgidofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['bc&^%thequicerthelazydohighelbcmd&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkdecdahxyiz&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchslmklipfgqh&^%psfg&^%']], [['hellogmythequicertthelazydogfriend'], ['dahhkciupdamqeyanppdahwvuzkcbneajz'], ['lippskqcxliuymgivxxlipedchskjvmirh']], [['ello'], ['ahhk'], ['ipps']], [['hellogfa wethorld'], ['dahhkcbw sapdknhz'], ['lippskje aixlsvph']], [['bcello&^%'], ['xyahhk&^%'], ['fgipps&^%']], [['hellogmyfriend&^%lomyfriend'], ['dahhkciubneajz&^%hkiubneajz'], ['lippskqcjvmirh&^%psqcjvmirh']], [['yzyz'], ['uvuv'], ['cdcd']], [['helbcy'], ['dahxyu'], ['lipfgc']], [['hellogmyfriend&^%lomyfriendgf'], ['dahhkciubneajz&^%hkiubneajzcb'], ['lippskqcjvmirh&^%psqcjvmirhkj']], [['afbcdefghijklhellogfa'], ['wbxyzabcdefghdahhkcbw'], ['ejfghijklmnoplippskje']], [['ehellot'], ['adahhkp'], ['ilippsx']], [['theqkbrownfoxydo'], ['pdamgxnksjbktuzk'], ['xliuofvsarjsbchs']], [['worl'], ['sknh'], ['asvp']], [['thequickbrownfoxbcdd&^%ydo'], ['pdamqeygxnksjbktxyzz&^%uzk'], ['xliuymgofvsarjsbfghh&^%chs']], [['hi    et a gf helbcdhibc&^%    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzdexy&^%    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlmfg&^%    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['worlwxyyd'], ['sknhstuuz'], ['asvpabcch']], [['yzzz'], ['uvvv'], ['cddd']], [['ehe'], ['ada'], ['ili']], [['helbcmd&^%lomyfriend'], ['dahxyiz&^%hkiubneajz'], ['lipfgqh&^%psqcjvmirh']], [['hi    et a gf hellogmyfiend'], ['de    ap w cb dahhkciubeajz'], ['lm    ix e kj lippskqcjmirh']], [['hellogfaello'], ['dahhkcbwahhk'], ['lippskjeipps']], [['glhello'], ['chdahhk'], ['kplipps']], [['hellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfriendfriend'], ['dahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmirhjvmirh']], [['theqcuickabcdefghihjklmnoownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghijkksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqrssarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddddddddddddddddddddddddddddddd']], [['heleloo'], ['dahahkk'], ['lipipss']], [['hellogfa worwethorld'], ['dahhkcbw sknsapdknhz'], ['lippskje asvaixlsvph']], [['%bcthkbrownfoxjumpsoverthelazydod&^%'], ['%xypdgxnksjbktfqilokranpdahwvuzkz&^%'], ['%fgxlofvsarjsbnyqtwszivxlipedchsh&^%']], [['%bcdhelwxylo&&^%'], ['%xyzdahstuhk&&^%'], ['%fghlipabcps&&^%']], [['eheellot'], ['adaahhkp'], ['iliippsx']], [['helllo '], ['dahhhk '], ['lippps ']], [['hi    eiend'], ['de    aeajz'], ['lm    imirh']], [['hi    et a gf helbc%bc^d&^%d&^%lomy friend'], ['de    ap w cb dahxy%xy^z&^%z&^%hkiu bneajz'], ['lm    ix e kj lipfg%fg^h&^%h&^%psqc jvmirh']], [['ywxy'], ['ustu'], ['cabc']], [['hwellogfa wethorld'], ['dsahhkcbw sapdknhz'], ['laippskje aixlsvph']], [['helbcmd&^%lomyfiend'], ['dahxyiz&^%hkiubeajz'], ['lipfgqh&^%psqcjmirh']], [['helbcdworlwxyyd&^thequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyzsknhstuuz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfghasvpabcch&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['helllo'], ['dahhhk'], ['lippps']], [['woworwethorldrlwxyyd'], ['sksknsapdknhznhstuuz'], ['asasvaixlsvphvpabcch']], [['thequiceurtthelazydog'], ['pdamqeyaqnppdahwvuzkc'], ['xliuymgiyvxxlipedchsk']], [['hi    et  a g^f helbcmld&^%lo myfriend'], ['de    ap  w c^b dahxyihz&^%hk iubneajz'], ['lm    ix  e k^j lipfgqph&^%ps qcjvmirh']], [['hhellogmythequicertthelazydogfriendelbcmd&^%lomyfiend'], ['ddahhkciupdamqeyanppdahwvuzkcbneajzahxyiz&^%hkiubeajz'], ['llippskqcxliuymgivxxlipedchskjvmirhipfgqh&^%psqcjmirh']], [['hellomyfrienduvxyz'], ['dahhkiubneajzqrtuv'], ['lippsqcjvmirhyzbcd']], [['thequicerthequicezkbroomwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyavgxnkkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgidofvssqarjsbnyqtwszivxlipedchskxlipedchsk']], [['fgf'], ['bcb'], ['jkj']], [['yzyzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvv'], ['cdcdddddddddddd']], [['helbcdworlwxyyd&^thequiuckbrownfoxjumpsoverthelazydothequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyzsknhstuuz&^pdamqeqygxnksjbktfqilokranpdahwvuzkpdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfghasvpabcch&^xliuymygofvsarjsbnyqtwszivxlipedchsxliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['theqeutickborownfoxydo'], ['pdamaqpeygxknksjbktuzk'], ['xliuiyxmgofsvsarjsbchs']], [['thequickbrownfoxjumpsoverthelazyd'], ['pdamqeygxnksjbktfqilokranpdahwvuz'], ['xliuymgofvsarjsbnyqtwszivxlipedch']], [['bc&^%thequicerthelazydothkbroswnfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnkosjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvswarjsbnyqtwszivxlipedchs&^%']], [['woworwethorlldrlwxd'], ['sksknsapdknhhznhstz'], ['asasvaixlsvpphvpabh']], [['%b^c^d&^d%'], ['%x^y^z&^z%'], ['%f^g^h&^h%']], [['gglhello'], ['cchdahhk'], ['kkplipps']], [['%bcdheolwxylo&&^%'], ['%xyzdakhstuhk&&^%'], ['%fghlispabcps&&^%']], [['thequicertthequickbrthequicerthelazydogownfoxjumpsovelazydohelazydoag'], ['pdamqeyanppdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokrahwvuzkdahwvuzkwc'], ['xliuymgivxxliuymgofvxliuymgivxlipedchsksarjsbnyqtwszipedchslipedchsek']], [['hi    et a gf helbcmhelbcmd&^%lomyfriendd&^%lo myfriend'], ['de    ap w cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubneajz'], ['lm    ix e kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjvmirh']], [['s'], ['o'], ['w']], [['bc&^%thequicerthela^zydoghelbcmd&&^%lobc&^%'], ['xy&^%pdamqeyanpdahw^vuzkcdahxyiz&&^%hkxy&^%'], ['fg&^%xliuymgivxlipe^dchsklipfgqh&&^%psfg&^%']], [['thequickborownfoxydfo'], ['pdamqeygxknksjbktuzbk'], ['xliuymgofsvsarjsbchjs']], [['%bcdhelwxyl%'], ['%xyzdahstuh%'], ['%fghlipabcp%']], [['thequickbromownfoxjumpsoverdog'], ['pdamqeygxnkiksjbktfqilokranzkc'], ['xliuymgofvsqsarjsbnyqtwszivhsk']], [['hellogmyfriend&^%lomyfrienehellott'], ['dahhkciubneajz&^%hkiubneajadahhkpp'], ['lippskqcjvmirh&^%psqcjvmirilippsxx']], [['helbcthequickbrownfoxbcdd&^%ydoy'], ['dahxypdamqeygxnksjbktxyzz&^%uzku'], ['lipfgxliuymgofvsarjsbfghh&^%chsc']], [['ggff'], ['ccbb'], ['kkjj']], [['hhillogfaello'], ['ddehhkcbwahhk'], ['llmppskjeipps']], [['thequicwkbrthequicerthelazydogownofoxjumpszydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilovuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwdchs']], [['worethorld'], ['sknapdknhz'], ['asvixlsvph']], [['thequiceurtazydog'], ['pdamqeyaqnpwvuzkc'], ['xliuymgiyvxedchsk']], [['helbcmd&^%lomyfriendxy'], ['dahxyiz&^%hkiubneajztu'], ['lipfgqh&^%psqcjvmirhbc']], [['helbcthequickbryzzoy'], ['dahxypdamqeygxnuvvku'], ['lipfgxliuymgofvcddsc']], [['hwellogfa wethorldd'], ['dsahhkcbw sapdknhzz'], ['laippskje aixlsvphh']], [['worwethorld'], ['sknsapdknhz'], ['asvaixlsvph']], [['o%bcdhelwxylo&^%'], ['k%xyzdahstuhk&^%'], ['s%fghlipabcps&^%']], [['eehello'], ['aadahhk'], ['iilipps']], [['thequicydog'], ['pdamqeyuzkc'], ['xliuymgchsk']], [['hi    et  a g^f hhelbcd&^%lomyelbcmld&^%lo myfriend'], ['de    ap  w c^b ddahxyz&^%hkiuahxyihz&^%hk iubneajz'], ['lm    ix  e k^j llipfgh&^%psqcipfgqph&^%ps qcjvmirh']], [['theqkbrowfnfoxydo'], ['pdamgxnksbjbktuzk'], ['xliuofvsajrjsbchs']], [['hi    et a gf helbcdhibc&^%    et a abcdefghihjklmnopqrstuvxyzllogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzdexy&^%    ap w wxyzabcdedfghijklmnopqrtuvhhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlmfg&^%    ix e efghijklmlnopqrstuvwxyzbcdppskqcjvmirh&^%psqcjvmirh']], [['hwellogfa'], ['dsahhkcbw'], ['laippskje']], [['hi r  et a gf helbcmd&^%lomyfriend'], ['de n  ap w cb dahxyiz&^%hkiubneajz'], ['lm v  ix e kj lipfgqh&^%psqcjvmirh']], [['abcdefghijklmnopqrstuhi    et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde    ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm    ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['thkbrownfoxjumpsoverth%bcdhelwxylo&^%elazydo'], ['pdgxnksjbktfqilokranpd%xyzdahstuhk&^%ahwvuzk'], ['xlofvsarjsbnyqtwszivxl%fghlipabcps&^%ipedchs']], [['bc&thequicerttheworwethorldlazydog^%'], ['xy&pdamqeyanppdasknsapdknhzhwvuzkc^%'], ['fg&xliuymgivxxliasvaixlsvphpedchsk^%']], [['wyorlwxyyd'], ['suknhstuuz'], ['acsvpabcch']], [['hi    et a gf helbcmhelbcmd&^%lomyfriendd&^%lo myfend'], ['de    ap w cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubajz'], ['lm    ix e kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjirh']], [['hhelbcd&^%lomyelbcmld&^%lo'], ['ddahxyz&^%hkiuahxyihz&^%hk'], ['llipfgh&^%psqcipfgqph&^%ps']], [['thequickbrownfoxjumpsovworwethorlderthelazyd'], ['pdamqeygxnksjbktfqilokrsknsapdknhzanpdahwvuz'], ['xliuymgofvsarjsbnyqtwszasvaixlsvphivxlipedch']], [['thequicwkbrthequicerthelazydogaownofoxjumpsoverthelazydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcwksjkbktfqilokranpdahwvuzk'], ['xliuymgaofvxliuymgivxlipedchskesarsjsbnyqtwszivxlipedchs']], [['%bdcthkbrownfoxjumpsoverthelazydod&^%'], ['%xzypdgxnksjbktfqilokranpdahwvuzkz&^%'], ['%fhgxlofvsarjsbnyqtwszivxlipedchsh&^%']], [['worlwxd'], ['sknhstz'], ['asvpabh']], [['herienduvxyz'], ['daneajzqrtuv'], ['livmirhyzbcd']], [['hi    et a gf hellogmyfriiend'], ['de    ap w cb dahhkciubneeajz'], ['lm    ix e kj lippskqcjvmmirh']], [['boc&^hello%'], ['xky&^dahhk%'], ['fsg&^lipps%']], [['abcdyzzefghijklmnopqrstuvxyz'], ['wxyzuvvabcdefghijklmnopqrtuv'], ['efghcddijklmnopqrstuvwxyzbcd']], [['yxwxy'], ['utstu'], ['cbabc']], [['yzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddlippsdddddddddddddddddddddddddddd']], [['ahwellogfa wethorldd'], ['wdsahhkcbw sapdknhzz'], ['elaippskje aixlsvphh']], [['hi    et a gf helbcmd&^%l o myfriend'], ['de    ap w cb dahxyiz&^%h k iubneajz'], ['lm    ix e kj lipfgqh&^%p s qcjvmirh']], [['hellogymyfriend&^%lomyfriendgf'], ['dahhkcuiubneajz&^%hkiubneajzcb'], ['lippskcqcjvmirh&^%psqcjvmirhkj']], [['hellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfririend'], ['dahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneneajz'], ['lippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmvmirh']], [['heflbcmyd&^%lomyfriend'], ['dabhxyiuz&^%hkiubneajz'], ['lijpfgqch&^%psqcjvmirh']], [['myfriendvwxyz'], ['iubneajzrstuv'], ['qcjvmirhzabcd']], [['theqcuickabcdefghihjklmehellotnfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghiadahhkpjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqilippsxrjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['thequickbrthequiceerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeyaanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymgiivxlipedchsksarjsbnyqtwszipedchs']], [['thequhelbcmld&^%loicerthelazy%doag'], ['pdamqdahxyihz&^%hkeyanpdahwvu%zkwc'], ['xliuylipfgqph&^%psmgivxlipedc%hsek']], [['%bcdhelloo&^%'], ['%xyzdahhkk&^%'], ['%fghlippss&^%']], [['hellogmyfrithequickbromwnfoxjumpsoverthelazydogend&^%lomhi'], ['dahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuzkcajz&^%hkide'], ['lippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedchskirh&^%psqlm']], [['afbcdefghijklhellogfa worl damnoyfrienduvxyz'], ['wbxyzabcdefghdahhkcbw sknh zwijkubneajzqrtuv'], ['ejfghijklmnoplippskje asvp heqrscjvmirhyzbcd']], [['%%bc^d&^%'], ['%%xy^z&^%'], ['%%fg^h&^%']], [['gfs'], ['cbo'], ['kjw']], [['hloglfa'], ['dhkchbw'], ['lpskpje']], [['thequicerpsoverthelazydogthelazydog'], ['pdamqeyanlokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivtwszivxlipedchskxlipedchsk']], [['gghelbcdworlwxyyd&^thequickbrownfoxjumpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabcch&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqcplipps']], [['hellogmyfiend'], ['dahhkciubeajz'], ['lippskqcjmirh']], [['thequiutckbrownfoxjumpstoverthelazydo'], ['pdamqeqpygxnksjbktfqilopkranpdahwvuzk'], ['xliuymyxgofvsarjsbnyqtwxszivxlipedchs']], [['helelooywxy'], ['dahahkkustu'], ['lipipsscabc']], [['bc&thequicertthelazydg^%'], ['xy&pdamqeyanppdahwvuzc^%'], ['fg&xliuymgivxxlipedchk^%']], [['helbc%bc^d&^%d&^%lomy'], ['dahxy%xy^z&^%z&^%hkiu'], ['lipfg%fg^h&^%h&^%psqc']], [['hi    etabcdefghijklhellogfa  a g^f helbcmld'], ['de    apwxyzabcdefghdahhkcbw  w c^b dahxyihz'], ['lm    ixefghijklmnoplippskje  e k^j lipfgqph']], [['helllogfa wethorld'], ['dahhhkcbw sapdknhz'], ['lipppskje aixlsvph']], [['hellhi    et a gf helbcd&^%lomyfriendlogfa'], ['dahhde    ap w cb dahxyz&^%hkiubneajzhkcbw'], ['lipplm    ix e kj lipfgh&^%psqcjvmirhpskje']], [['abcdefghijklmnopqrstuhi    et  g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde    ap  c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm    ix  k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['hello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzd'], ['dahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvz'], ['lipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdh']], [['helbcmld&^%lo'], ['dahxyihz&^%hk'], ['lipfgqph&^%ps']], [['hellogmyfriend&^%lomyfriendgfboc&^hello%'], ['dahhkciubneajz&^%hkiubneajzcbxky&^dahhk%'], ['lippskqcjvmirh&^%psqcjvmirhkjfsg&^lipps%']], [['abcdyzzefghijklmnopqrsthi    ehellot a gnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp w cjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx e krhyzbcd']], [['helbcmld'], ['dahxyihz'], ['lipfgqph']], [['heriennduvxyz'], ['daneajjzqrtuv'], ['livmirrhyzbcd']], [['hellogmyfriend&^%lomhi    et a %lo myfriendfriend'], ['dahhkciubneajz&^%hkide    ap w %hk iubneajzbneajz'], ['lippskqcjvmirh&^%psqlm    ix e %ps qcjvmirhjvmirh']], [['yzzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cddcdddddddddddddddddddddddddddddddddd']], [['boc&hi    et  a g^f helbcmld&^%lo myfriend^heo%'], ['xky&de    ap  w c^b dahxyihz&^%hk iubneajz^dak%'], ['fsg&lm    ix  e k^j lipfgqph&^%ps qcjvmirh^lis%']], [['abcdyzzefghijklmnopqrsthi    ehellot agnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp wcjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx ekrhyzbcd']], [['thequickbromohwellogfa wethorldwnfoxjumpsoverdog'], ['pdamqeygxnkikdsahhkcbw sapdknhzsjbktfqilokranzkc'], ['xliuymgofvsqslaippskje aixlsvpharjsbnyqtwszivhsk']], [['hihihellogmyfriendellogmyfriiend'], ['dededahhkciubneajzahhkciubneeajz'], ['lmlmlippskqcjvmirhippskqcjvmmirh']], [['bdcd&^%'], ['xzyz&^%'], ['fhgh&^%']], [['thequickbrownfoxydhhillogfaelloo'], ['pdamqeygxnksjbktuzddehhkcbwahhkk'], ['xliuymgofvsarjsbchllmppskjeippss']], [['helbcdhibc&^%'], ['dahxyzdexy&^%'], ['lipfghlmfg&^%']], [['thequiutckbrownfoxjumpstovelazydo'], ['pdamqeqpygxnksjbktfqilopkrahwvuzk'], ['xliuymyxgofvsarjsbnyqtwxszipedchs']], [['bc&^%thequicerthelazydothkbroswnfoxjumpsovtheqkbrownfoxydoerthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnkosjbktfqilokrpdamgxnksjbktuzkanpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvswarjsbnyqtwszxliuofvsarjsbchsivxlipedchs&^%']], [['theqcuickabcdefghinhjklmnopqrstuvxyzbrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdejdfghijklmnopqrtuvxnksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmrlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddddddddddddddddddddddddddddd']], [['herienduvxyhi    et a gf hellogmyfienddz'], ['daneajzqrtude    ap w cb dahhkciubeajzzv'], ['livmirhyzbclm    ix e kj lippskqcjmirhhd']], [['hi    et a gf heflbcmhelbcmd&^%lomyfriendd&^%lo cmyfend'], ['de    ap w cb dabhxyidahxyiz&^%hkiubneajzz&^%hk yiubajz'], ['lm    ix e kj lijpfgqlipfgqh&^%psqcjvmirhh&^%ps gqcjirh']], [['gghelbcdworlwxyyd&^thequickbrownfoxjuthequickbromownfoxjumpsoverdogmpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuz&^pdamqeygxnksjbktfqpdamqeygxnkiksjbktfqilokranzkcilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabcch&^xliuymgofvsarjsbnyxliuymgofvsqsarjsbnyqtwszivhskqtwszivxlipedchs%psqcplipps']], [['hellogmyfrithequiend&^%lomhi s   et a gf helbcmd&^%lo myfriendfriend'], ['dahhkciubnepdamqeajz&^%hkide o   ap w cb dahxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmxliuymirh&^%psqlm w   ix e kj lipfgqh&^%ps qcjvmirhjvmirh']], [['ywxytheqcuickbrownfoxjumpsoverthelazydog'], ['ustupdamyqeygxnksjbktfqilokranpdahwvuzkc'], ['cabcxliugymgofvsarjsbnyqtwszivxlipedchsk']], [['hellogfa wetoorld'], ['dahhkcbw sapkknhz'], ['lippskje aixssvph']], [['bcbcmd&^%lobc&^%'], ['xyxyiz&^%hkxy&^%'], ['fgfgqh&^%psfg&^%']], [['theqcuickabcdefghihjklmehellotnfoxjumpsoverthoelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghiadahhkpjbktfqilokranpdkahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqilippsxrjsbnyqtwszivxlsiplippskqcjvmirhedchsk']], [['abcdyzzefghijklmnopqrsthhelbcdhii    ehellot a gnduvxyz'], ['wxyzuvvabcdefghijklmnopddahxyzdee    adahhkp w cjzqrtuv'], ['efghcddijklmnopqrstuvwxllipfghlmm    ilippsx e krhyzbcd']], [['gnduvxyz%bcdhelwxyl%'], ['cjzqrtuv%xyzdahstuh%'], ['krhyzbcd%fghlipabcp%']], [['r'], ['n'], ['v']], [['hi    et a gf helbcd&^%lomy fiend'], ['de    ap w cb dahxyz&^%hkiu beajz'], ['lm    ix e kj lipfgh&^%psqc jmirh']], [['bc&thequicertthelazydhellog^%'], ['xy&pdamqeyanppdahwvuzdahhkc^%'], ['fg&xliuymgivxxlipedchlippsk^%']], [['ob%'], ['kx%'], ['sf%']], [['%%bc^d&hellogfa worwethorld^%'], ['%%xy^z&dahhkcbw sknsapdknhz^%'], ['%%fg^h&lippskje asvaixlsvph^%']], [['wxabcdefghijklmnopqrstuhi    et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['stwxyzabcdefghijklmnopqde    ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['abefghijklmnopqrstuvwxylm    ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['gfhello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzds'], ['cbdahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvzo'], ['kjlipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdhw']], [['hi    et a gftheqkbrowfnfoxydo helbcmhelbcmd&^%lomyfiriendd&^%lo myfrd'], ['de    ap w cbpdamgxnksbjbktuzk dahxyidahxyiz&^%hkiubeneajzz&^%hk iubnz'], ['lm    ix e kjxliuofvsajrjsbchs lipfgqlipfgqh&^%psqcjmvmirhh&^%ps qcjvh']], [['ehebc&^hello%'], ['adaxy&^dahhk%'], ['ilifg&^lipps%']], [['abcdyzzefghijklmnopqrsthi    ehellot ahellhi gnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp wdahhde cjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx elipplm krhyzbcd']], [['hellogmyfienid'], ['dahhkciubeajez'], ['lippskqcjmirmh']], [['hhelelooywxy'], ['ddahahkkustu'], ['llipipsscabc']], [['hellthequiuckbrownfoxjumpsoverthelazydoaaogfa worl d'], ['dahhpdamqeqygxnksjbktfqilokranpdahwvuzkwwkcbw sknh z'], ['lippxliuymygofvsarjsbnyqtwszivxlipedchseeskje asvp h']], [['fgyzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzzf'], ['bcuvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvvb'], ['jkcdcdddddlippsddddddddddddddddddddddddddddj']], [['thequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfo'], ['pdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbk'], ['xliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjs']], [['hi    et a gf helbcdhi    et a gf helylogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzde    ap w cb dahuhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlm    ix e kj lipcpskqcjvmirh&^%psqcjvmirh']], [['bcdd&^%%'], ['xyzz&^%%'], ['fghh&^%%']], [['%bob%cd&^%'], ['%xkx%yz&^%'], ['%fsf%gh&^%']], [['hi    et  ah gf helbcmld&^%lo myfriend'], ['de    ap  wd cb dahxyihz&^%hk iubneajz'], ['lm    ix  el kj lipfgqph&^%ps qcjvmirh']], [['hi r  et a gf helbcmd&^% lomyfriend'], ['de n  ap w cb dahxyiz&^% hkiubneajz'], ['lm v  ix e kj lipfgqh&^% psqcjvmirh']], [['bc&^%thequicerthelazydoghelbcmd&^%lobc&^yzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzz%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&^%hkxy&^uvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvv%'], ['fg&^%xliuymgivxlipedchsklipfgqh&^%psfg&^cdcdddddlippsdddddddddddddddddddddddddddd%']], [['hellogmyfrithequickbromwnfoxjumpsoverthelazylbcmd&^%lo myfriendfriend'], ['dahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuhxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedcpfgqh&^%ps qcjvmirhjvmirh']], [['hi    ehellott a gf hellogmyfrielnd'], ['de    adahhkpp w cb dahhkciubneahjz'], ['lm    ilippsxx e kj lippskqcjvmiprh']], [['worlwxdgf%b^c^d&^%'], ['sknhstzcb%x^y^z&^%'], ['asvpabhkj%f^g^h&^%']], [['hhelelooywxys'], ['ddahahkkustuo'], ['llipipsscabcw']], [['booc&^hello%'], ['xkky&^dahhk%'], ['fssg&^lipps%']], [['hellogmyfriend&^%lomyfrithequickbrownfoxjumpsovworwethorlderthelazydf'], ['dahhkciubneajz&^%hkiubnepdamqeygxnksjbktfqilokrsknsapdknhzanpdahwvuzb'], ['lippskqcjvmirh&^%psqcjvmxliuymgofvsarjsbnyqtwszasvaixlsvphivxlipedchj']], [['bc&^%thequicertwethorldwnfoxjumpsoverdoghelazydogmd&&abc&^%'], ['xy&^%pdamqeyanpsapdknhzsjbktfqilokranzkcdahwvuzkciz&&wxy&^%'], ['fg&^%xliuymgivxaixlsvpharjsbnyqtwszivhsklipedchskqh&&efg&^%']], [['thequtickborobc&thequicertthelazydg^%wnfoxydo'], ['pdamqpeygxknkxy&pdamqeyanppdahwvuzc^%sjbktuzk'], ['xliuyxmgofsvsfg&xliuymgivxxlipedchk^%arjsbchs']], [['bc&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['xy&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['fg&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']], [['hellogmyfthequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfoiend'], ['dahhkciubpdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbkeajz'], ['lippskqcjxliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjsmirh']], [['thequicetazydog'], ['pdamqeyapwvuzkc'], ['xliuymgixedchsk']], [['hellogmyfrriend&^%lomyfriendgf'], ['dahhkciubnneajz&^%hkiubneajzcb'], ['lippskqcjvvmirh&^%psqcjvmirhkj']], [['woretaahorld'], ['sknapwwdknhz'], ['asvixeelsvph']], [['ld'], ['hz'], ['ph']], [['helelooywxyhi    eiend'], ['dahahkkustude    aeajz'], ['lipipsscabclm    imirh']], [['woretarahorld'], ['sknapwnwdknhz'], ['asvixevelsvph']], [['bcdd&^d%'], ['xyzz&^z%'], ['fghh&^h%']], [['gghelbcdworlwxyybrownfoxjumpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuxnksjbktfqilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabccfvsarjsbnyqtwszivxlipedchs%psqcplipps']], [['whellomyfrienduvxyhelbcthequickbrownfoxbcdd&^%ydoyrlwxyyd'], ['sdahhkiubneajzqrtudahxypdamqeygxnksjbktxyzz&^%uzkunhstuuz'], ['alippsqcjvmirhyzbclipfgxliuymgofvsarjsbfghh&^%chscvpabcch']], [['wethorldwnfoxjumpsoverdog'], ['sapdknhzsjbktfqilokranzkc'], ['aixlsvpharjsbnyqtwszivhsk']], [['etabcdefghijklhellogfa'], ['apwxyzabcdefghdahhkcbw'], ['ixefghijklmnoplippskje']], [['hi    et sa gf helbcdhi    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap ow cb dahxyzde    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix we kj lipfghlm    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['thequicwkbrthequicerthelazydogownofoxjumpszytdo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilovupzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwdcxhs']], [['theqcuickabcdefghihjklmno%bcdhethequieceurtthelazydogydog'], ['pdamyqeygwxyzabcdedfghijk%xyzdapdamqeayaqnppdahwvuzkcuzkc'], ['xliugymgoefghijklmlnopqrs%fghlixliuymigiyvxxlipedchskchsk']], [['ahellhi'], ['wdahhde'], ['elipplm']], [['hi    et a gf helleomyfriened'], ['de    ap w cb dahhakiubneajaz'], ['lm    ix e kj lippisqcjvmirih']], [['hi    et a g'], ['de    ap w c'], ['lm    ix e k']], [['helbcmd&^%l'], ['dahxyiz&^%h'], ['lipfgqh&^%p']], [['helbc%bc^d&^%d&^%lomworwethorld^%y'], ['dahxy%xy^z&^%z&^%hkisknsapdknhz^%u'], ['lipfg%fg^h&^%h&^%psqasvaixlsvph^%c']], [['rgfhello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzds'], ['ncbdahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvzo'], ['vkjlipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdhw']], [['myfedamnopqrstrhind'], ['iubazwijklmnopndejz'], ['qcjiheqrstuvwxvlmrh']], [['abcdefghijklmnopqrstuvxyo%bcdhelwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyzdahstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghlipabcps&^%d']], [['hi    e g'], ['de    a c'], ['lm    i k']], [['ahelthequickbrownfoxydolhi'], ['wdahpdamqeygxnksjbktuzkhde'], ['elipxliuymgofvsarjsbchsplm']], [['thequicerthequcekbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuygiofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['bc&^%thequicyxwxyeroswnfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyutstuankosjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgcbabcivswarjsbnyqtwszivxlipedchs&^%']], [['bchi r  et a gf helbcmd&^% lomyfriend&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['xyde n  ap w cb dahxyiz&^% hkiubneajz&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['fglm v  ix e kj lipfgqh&^% psqcjvmirh&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']], [['worlafbcdefghijklhellogfa'], ['sknhwbxyzabcdefghdahhkcbw'], ['asvpejfghijklmnoplippskje']], [['ghellogmyfrithequickbromwnfoxjumpsoverthelazylbcmd&^%lofs'], ['cdahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuhxyiz&^%hkbo'], ['klippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedcpfgqh&^%psjw']], [['heflbklmnopqrsthilomyfriend'], ['dabhxghijklmnopdehkiubneajz'], ['lijpfopqrstuvwxlmpsqcjvmirh']], [['abcdyzzefghijklmnopqrsthi    ehellot a gnd'], ['wxyzuvvabcdefghijklmnopde    adahhkp w cjz'], ['efghcddijklmnopqrstuvwxlm    ilippsx e krh']], [['heyzzzbcdhibc&^%'], ['dauvvvxyzdexy&^%'], ['licdddfghlmfg&^%']], [['yzyyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdccdddddddddddddddddddddddddddddddddd']], [['abcdefghijklmnopqrstuvxyo%bcdhelhellogfa wetorldwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyzdahdahhkcbw sapknhzstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghliplippskje aixsvphabcps&^%d']], [['%%bdc^d&^%'], ['%%xzy^z&^%'], ['%%fhg^h&^%']], [['helbcmlld'], ['dahxyihhz'], ['lipfgqpph']], [['myfrieendvwxyz'], ['iubneaajzrstuv'], ['qcjvmiirhzabcd']], [['bc&thequricertthelazydog^%'], ['xy&pdamqneyanppdahwvuzkc^%'], ['fg&xliuyvmgivxxlipedchsk^%']], [['bc&^%thequicehwellogfa wethorldhelazydogbc&^%'], ['xy&^%pdamqeyadsahhkcbw sapdknhzdahwvuzkcxy&^%'], ['fg&^%xliuymgilaippskje aixlsvphlipedchskfg&^%']], [['hi    et a gf helbcd&^%lomy yfriend'], ['de    ap w cb dahxyz&^%hkiu ubneajz'], ['lm    ix e kj lipfgh&^%psqc cjvmirh']], [['hi    et a gf helbcmd&^%lo myfrhellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfririendiend'], ['de    ap w cb dahxyiz&^%hk iubndahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneneajzeajz'], ['lm    ix e kj lipfgqh&^%ps qcjvlippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmvmirhmirh']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzmyfriend^heo%zzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvviubneajz^dak%vvvvv'], ['cdcdddddddddddddddddddddddddddqcjvmirh^lis%ddddd']], [['thehelbc%bc^d&^%d&^%lomyquicerpsoverthelazydogthelazydog'], ['pdadahxy%xy^z&^%z&^%hkiumqeyanlokranpdahwvuzkcpdahwvuzkc'], ['xlilipfg%fg^h&^%h&^%psqcuymgivtwszivxlipedchskxlipedchsk']], [['eeheabcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzo'], ['aadawxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvk'], ['iiliefghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcds']], [['helylogmyfriend&^%lomyfriend'], ['dahuhkciubneajz&^%hkiubneajz'], ['lipcpskqcjvmirh&^%psqcjvmirh']], [['theqfkbrowfnfoxydo'], ['pdambgxnksbjbktuzk'], ['xliujofvsajrjsbchs']], [['eello'], ['aahhk'], ['iipps']], [['bc&threquicertthelazydhellog^%'], ['xy&pdnamqeyanppdahwvuzdahhkc^%'], ['fg&xlviuymgivxxlipedchlippsk^%']], [['hi    et a gf hiend'], ['de    ap w cb deajz'], ['lm    ix e kj lmirh']], [['hellond'], ['dahhkjz'], ['lippsrh']], [['hi    etg^f helbcmld'], ['de    apc^b dahxyihz'], ['lm    ixk^j lipfgqph']], [['yzzzzob%zzzzzzzzzzzzzzzzzzzzz'], ['uvvvvkx%vvvvvvvvvvvvvvvvvvvvv'], ['cddddsf%ddddddddddddddddddddd']], [['abcdefghijklmnopqrstuhi'], ['wxyzabcdefghijklmnopqde'], ['efghijklmnopqrstuvwxylm']], [['hi r   et a gf helbcmd&^%lomyfiend'], ['de n   ap w cb dahxyiz&^%hkiubeajz'], ['lm v   ix e kj lipfgqh&^%psqcjmirh']], [['hi r  et helelooa gf helbcmd&^%lomyfriend'], ['de n  ap dahahkkw cb dahxyiz&^%hkiubneajz'], ['lm v  ix lipipsse kj lipfgqh&^%psqcjvmirh']], [['hellomyfrienduvxyzo'], ['dahhkiubneajzqrtuvk'], ['lippsqcjvmirhyzbcds']], [['myhi    et a gf heflbcmhelbcmd&^%lomyfriendd&^%lo cmyfendfriendvwxyz'], ['iude    ap w cb dabhxyidahxyiz&^%hkiubneajzz&^%hk yiubajzbneajzrstuv'], ['qclm    ix e kj lijpfgqlipfgqh&^%psqcjvmirhh&^%ps gqcjirhjvmirhzabcd']], [['thequicwkbrthequicerthelazydogownofoxjheleloompszydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfdahahkkilovuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnlipipssqtwdchs']], [['hielbecmd&^%loomyfriend'], ['deahxayiz&^%hkkiubneajz'], ['lmipfigqh&^%pssqcjvmirh']], [['orlwxyyd'], ['knhstuuz'], ['svpabcch']], [['hello oworrld'], ['dahhk ksknnhz'], ['lipps sasvvph']], [['ggfgf'], ['ccbcb'], ['kkjkj']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzhellogmyfriend&^%lomhizzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvdahhkciubneajz&^%hkidevvvvvvvvvvv'], ['cdcdddddddddddddddddddddddlippskqcjvmirh&^%psqlmddddddddddd']], [['gabcdefghijklmnopqrstuvxyfo%bcdhelhellogfagfgf'], ['cwxyzabcdefghijklmnopqrtubk%xyzdahdahhkcbwcbcb'], ['kefghijklmnopqrstuvwxyzbcjs%fghliplippskjekjkj']], [['gf%^b^c^d&^%'], ['cb%^x^y^z&^%'], ['kj%^f^g^h&^%']], [['thequhelbcmld&i^%loicerthelazy%doag'], ['pdamqdahxyihz&e^%hkeyanpdahwvu%zkwc'], ['xliuylipfgqph&m^%psmgivxlipedc%hsek']], [['hellogymyfriend&^%lomyfriendgthequickbrthequicerthelazydogownfoxjumpsoverthelazydof'], ['dahhkcuiubneajz&^%hkiubneajzcpdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokranpdahwvuzkb'], ['lippskcqcjvmirh&^%psqcjvmirhkxliuymgofvxliuymgivxlipedchsksarjsbnyqtwszivxlipedchsj']], [['abcdetuvxyz'], ['wxyzapqrtuv'], ['efghixyzbcd']], [['hhillogfaell%b^c^d&^d%o'], ['ddehhkcbwahh%x^y^z&^z%k'], ['llmppskjeipp%f^g^h&^h%s']], [['bc&^%uthequicertdhelazydohigheblbcmd&^%lobc&^%'], ['xy&^%qpdamqeyanpzdahwvuzkdecdaxhxyiz&^%hkxy&^%'], ['fg&^%yxliuymgivxhlipedchslmklifpfgqh&^%psfg&^%']], [['rworl'], ['nsknh'], ['vasvp']], [['hellogymyfriend&^%lomyfrriendgf'], ['dahhkcuiubneajz&^%hkiubnneajzcb'], ['lippskcqcjvmirh&^%psqcjvvmirhkj']], [['heflbcmhelbcmd&^%lomyfriendd&^%lo'], ['dabhxyidahxyiz&^%hkiubneajzz&^%hk'], ['lijpfgqlipfgqh&^%psqcjvmirhh&^%ps']], [['bb'], ['xx'], ['ff']], [['worlafbcdefghhelbcmd&^%lomyfriendijklhellogfa'], ['sknhwbxyzabcddahxyiz&^%hkiubneajzefghdahhkcbw'], ['asvpejfghijkllipfgqh&^%psqcjvmirhmnoplippskje']], [['athequicwkbrthequicerthelazydogaownofoxjumpsoverthelazydo'], ['wpdamqeysgxnpdamqeyanpdahwvuzkcwksjkbktfqilokranpdahwvuzk'], ['exliuymgaofvxliuymgivxlipedchskesarsjsbnyqtwszivxlipedchs']], [['ahellogfa'], ['wdahhkcbw'], ['elippskje']], [['hi    et aa gf helbcmhelbcmd&^%lomyfriendd&^%lo myfriend'], ['de    ap ww cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubneajz'], ['lm    ix ee kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjvmirh']], [['worwethorld^%'], ['sknsapdknhz^%'], ['asvaixlsvph^%']], [['hhehi    etabcdefghijklhellogfa  a g^f helbcmldlelooywxys'], ['ddade    apwxyzabcdefghdahhkcbw  w c^b dahxyihzhahkkustuo'], ['llilm    ixefghijklmnoplippskje  e k^j lipfgqphpipsscabcw']], [['g^f'], ['c^b'], ['k^j']], [['abcdefghijklmnopqrstuhi     et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde     ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm     ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['thequickbrthequicqerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeymanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymguivxlipedchsksarjsbnyqtwszipedchs']], [['worlafbcdefghijklhellheyzzzbcdhibc&^%ogfa'], ['sknhwbxyzabcdefghdahhdauvvvxyzdexy&^%kcbw'], ['asvpejfghijklmnoplipplicdddfghlmfg&^%skje']], [['abcdyzzefghijklmnopqrsthi'], ['wxyzuvvabcdefghijklmnopde'], ['efghcddijklmnopqrstuvwxlm']], [['hi%%bc^d&hellogfa worwetbc&thequricertthelazydog^%horld^%'], ['de%%xy^z&dahhkcbw sknsapxy&pdamqneyanppdahwvuzkc^%dknhz^%'], ['lm%%fg^h&lippskje asvaixfg&xliuyvmgivxxlipedchsk^%lsvph^%']], [['o%bcdhe&^%'], ['k%xyzda&^%'], ['s%fghli&^%']], [['%bdcthkbrvownfoxjumpsoverthelazydod&^%'], ['%xzypdgxnrksjbktfqilokranpdahwvuzkz&^%'], ['%fhgxlofvzsarjsbnyqtwszivxlipedchsh&^%']], [['hmyfriendfyfriendelgflo'], ['diubneajzbubneajzahcbhk'], ['lqcjvmirhjcjvmirhipkjps']], [['thequhellogmyfthequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfoiendrtazydog'], ['pdamqdahhkciubpdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbkeajznpwvuzkc'], ['xliuylippskqcjxliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjsmirhvxedchsk']], [['theqcuickbrownfoxjumpsoverthbc&^%thequicerthela^zydoghelbcmd&&^%lobc&^%og'], ['pdamyqeygxnksjbktfqilokranpdxy&^%pdamqeyanpdahw^vuzkcdahxyiz&&^%hkxy&^%kc'], ['xliugymgofvsarjsbnyqtwszivxlfg&^%xliuymgivxlipe^dchsklipfgqh&&^%psfg&^%sk']], [['thequickbrownfoxjumpsovertheloazydfo'], ['pdamqeygxnksjbktfqilokranpdahkwvuzbk'], ['xliuymgofvsarjsbnyqtwszivxlipsedchjs']], [['yzzzz'], ['uvvvv'], ['cdddd']], [['bcddd&^%'], ['xyzzz&^%'], ['fghhh&^%']], [['worwetbc&thequricertthelazydog^%horld^%'], ['sknsapxy&pdamqneyanppdahwvuzkc^%dknhz^%'], ['asvaixfg&xliuyvmgivxxlipedchsk^%lsvph^%']], [['hellogfatoorld'], ['dahhkcbwpkknhz'], ['lippskjexssvph']], [['theqcuickbrownfoxjumheleloopsooverthelazbydog'], ['pdamyqeygxnksjbktfqidahahkklokkranpdahwvxuzkc'], ['xliugymgofvsarjsbnyqlipipsstwsszivxlipedfchsk']], [['hi    et a gf hethequickborownfoxydolbcd&^%lomyfriend'], ['de    ap w cb dapdamqeygxknksjbktuzkhxyz&^%hkiubneajz'], ['lm    ix e kj lixliuymgofsvsarjsbchspfgh&^%psqcjvmirh']], [['woworwethorlldrwlwxd'], ['sksknsapdknhhznshstz'], ['asasvaixlsvpphvapabh']], [['theqcrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamynksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['heflbklmnopqrsthilomyfrien'], ['dabhxghijklmnopdehkiubneaj'], ['lijpfopqrstuvwxlmpsqcjvmir']], [['hi    ehellot a gf helahelthequickbrownfoxydolhilogmyfriend'], ['de    adahhkp w cb dahwdahpdamqeygxnksjbktuzkhdehkciubneajz'], ['lm    ilippsx e kj lipelipxliuymgofvsarjsbchsplmpskqcjvmirh']], [['helbcml'], ['dahxyih'], ['lipfgqp']], [['hellogmyfriithequiend&^%lomhi'], ['dahhkciubneepdamqeajz&^%hkide'], ['lippskqcjvmmxliuymirh&^%psqlm']], [['helbc%bc^d&^%d&^%lommworwethorld^%y'], ['dahxy%xy^z&^%z&^%hkiisknsapdknhz^%u'], ['lipfg%fg^h&^%h&^%psqqasvaixlsvph^%c']], [['wxabcdefghijklmnopqrstuhi'], ['stwxyzabcdefghijklmnopqde'], ['abefghijklmnopqrstuvwxylm']], [['afbcdefghijklhellogfa xyz'], ['wbxyzabcdefghdahhkcbw tuv'], ['ejfghijklmnoplippskje bcd']], [['abcdefghijklhellogfa'], ['wxyzabcdefghdahhkcbw'], ['efghijklmnoplippskje']], [['hwelhellogfa wethorldlogfa wethorldd'], ['dsahdahhkcbw sapdknhzhkcbw sapdknhzz'], ['laiplippskje aixlsvphpskje aixlsvphh']], [['bc&^%thequicerth^elazydogbc&^%'], ['xy&^%pdamqeyanpd^ahwvuzkcxy&^%'], ['fg&^%xliuymgivxl^ipedchskfg&^%']], [['h ello oworrld'], ['d ahhk ksknnhz'], ['l ipps sasvvph']], [['ggherthelazydou%lomylhello'], ['ccdanpdahwvuzkq%hkiuhdahhk'], ['kklivxlipedchsy%psqcplipps']], [['%bcdhelwxyl&o&^%'], ['%xyzdahstuh&k&^%'], ['%fghlipabcp&s&^%']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzztheqcuickabcdefghihjklmnopqrstuvxyzbrownfoxjumpsoverthelhellzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvpdamyqeygwxyzabcdedfghijklmnopqrtuvxnksjbktfqilokranpdahdahhvv'], ['cdcdddddddddddddddddddddddddddddxliugymgoefghijklmlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippdd']], [['abacdefghijklmnopqrstuvwxyz'], ['wxwyzabcdefghijklmnopqrstuv'], ['efeghijklmnopqrstuvwxyzabcd']], [['thequickbrownftheqcuickabcdefghihjklmno%bcdhethequieceurtthelazydogydogoxjumpsoverthelazyd'], ['pdamqeygxnksjbpdamyqeygwxyzabcdedfghijk%xyzdapdamqeayaqnppdahwvuzkcuzkcktfqilokranpdahwvuz'], ['xliuymgofvsarjxliugymgoefghijklmlnopqrs%fghlixliuymigiyvxxlipedchskchsksbnyqtwszivxlipedch']], [['thheflbcmhelbcmd&^%lomyfriendd&^%louiceurtazydog'], ['pddabhxyidahxyiz&^%hkiubneajzz&^%hkqeyaqnpwvuzkc'], ['xllijpfgqlipfgqh&^%psqcjvmirhh&^%psymgiyvxedchsk']], [['abcdefghijklmnopqrstuvxyo%bcdxhelwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyztdahstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghblipabcps&^%d']], [['hefmnopqrsthilomyfrien'], ['dabijklmnopdehkiubneaj'], ['lijqrstuvwxlmpsqcjvmir']], [['zyzzz'], ['vuvvv'], ['dcddd']], [['lomyfriend&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['hkiubneajz&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['psqcjvmirh&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']]], [[['hi'], ['de'], ['lm']], [['asdfghjkl'], ['wozbcdfgh'], ['ewhjklnop']], [['gf'], ['cb'], ['kj']], [['et'], ['ap'], ['ix']], [['faewfawefaewg'], ['bwasbwsabwasc'], ['jeiajeaijeiak']], [['hellomyfriend'], ['dahhkiubneajz'], ['lippsqcjvmirh']], [['dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'], ['ztvzhijehbqdiehqbdhedqbjiheijqbdheijqbdbqyqbd'], ['hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl']], [['a'], ['w'], ['e']], [['abcde'], ['wxyza'], ['efghi']], [['uvwxyz'], ['qrstuv'], ['yzabcd']], [['test123'], ['paop123'], ['xiwx123']], [['1a2b3c'], ['1w2x3y'], ['1e2f3g']], [['hello world'], ['dahhk sknhz'], ['lipps asvph']], [['monitor'], ['ikjepkn'], ['qsrmxsv']], [['abc'], ['wxy'], ['efg']], [['kmt'], ['gip'], ['oqx']], [['park'], ['lwng'], ['tevo']], [['mtkmt'], ['ipgip'], ['qxoqx']], [['testpark123'], ['paoplwng123'], ['xiwxtevo123']], [['uvuvwxyzwxyz'], ['qrqrstuvstuv'], ['yzyzabcdabcd']], [['abcdetest123'], ['wxyzapaop123'], ['efghixiwx123']], [['testpark1233'], ['paoplwng1233'], ['xiwxtevo1233']], [['parrte1a2b3cstpark123'], ['lwnnpa1w2x3yoplwng123'], ['tevvxi1e2f3gwxtevo123']], [['pamonitork'], ['lwikjepkng'], ['teqsrmxsvo']], [['uvwabcxyuz'], ['qrswxytuqv'], ['yzaefgbcyd']], [['uvuvwxyzwxz'], ['qrqrstuvstv'], ['yzyzabcdabd']], [['t'], ['p'], ['x']], [['uvz'], ['qrv'], ['yzd']], [['kuvz'], ['gqrv'], ['oyzd']], [['kkuvz'], ['ggqrv'], ['ooyzd']], [['abct'], ['wxyp'], ['efgx']], [['tes2tpark1233'], ['pao2plwng1233'], ['xiw2xtevo1233']], [['at'], ['wp'], ['ex']], [['tkmtkmtuvwabcxyuzmt'], ['pgipgipqrswxytuqvip'], ['xoqxoqxyzaefgbcydqx']], [['uvuvwxyzwxzyz'], ['qrqrstuvstvuv'], ['yzyzabcdabdcd']], [['tkmtkmtuvwabuvuvwxyzwxzcxyuzmt'], ['pgipgipqrswxqrqrstuvstvytuqvip'], ['xoqxoqxyzaefyzyzabcdabdgbcydqx']], [['tsest123'], ['poaop123'], ['xwiwx123']], [['uvutvwxyzwxzyz'], ['qrqprstuvstvuv'], ['yzyxzabcdabdcd']], [['uvwparrkxyz'], ['qrslwnngtuv'], ['yzatevvobcd']], [['tsest123aparrte1a2b3cstpark123'], ['poaop123wlwnnpa1w2x3yoplwng123'], ['xwiwx123etevvxi1e2f3gwxtevo123']], [['abctabcde'], ['wxypwxyza'], ['efgxefghi']], [['tes2testpark123tpark1233'], ['pao2paoplwng123plwng1233'], ['xiw2xiwxtevo123xtevo1233']], [['uvwabbczxyuz'], ['qrswxxyvtuqv'], ['yzaeffgdbcyd']], [['uvvz'], ['qrrv'], ['yzzd']], [['tsest123aparrte1a2b3cstpatrk123'], ['poaop123wlwnnpa1w2x3yoplwpng123'], ['xwiwx123etevvxi1e2f3gwxtexvo123']], [['paabctak'], ['lwwxypwg'], ['teefgxeo']], [['zz'], ['vv'], ['dd']], [['pararte1a2b3cstpark123'], ['lwnwnpa1w2x3yoplwng123'], ['tevevxi1e2f3gwxtevo123']], [['pamonintork'], ['lwikjejpkng'], ['teqsrmrxsvo']], [['uvutvwxyzwxzyzabckuvz'], ['qrqprstuvstvuvwxygqrv'], ['yzyxzabcdabdcdefgoyzd']], [['uvutvwzzxyzwxzyz'], ['qrqprsvvtuvstvuv'], ['yzyxzaddbcdabdcd']], [['tabcdtabcde'], ['pwxyzpwxyza'], ['xefghxefghi']], [['uvwxwyz'], ['qrstsuv'], ['yzabacd']], [['aabcde'], ['wwxyza'], ['eefghi']], [['cpararte1a2b3cstpark1abct23'], ['ylwnwnpa1w2x3yoplwng1wxyp23'], ['gtevevxi1e2f3gwxtevo1efgx23']], [['tse3st23'], ['poa3op23'], ['xwi3wx23']], [['mtuvwxyzkmt'], ['ipqrstuvgip'], ['qxyzabcdoqx']], [['tsest123aparrte1a2b3cstapark123'], ['poaop123wlwnnpa1w2x3yopwlwng123'], ['xwiwx123etevvxi1e2f3gwxetevo123']], [['cpaararuvvzte1a2b3cstpark1abct23'], ['ylwwnwnqrrvpa1w2x3yoplwng1wxyp23'], ['gteevevyzzdxi1e2f3gwxtevo1efgx23']], [['tse32st23'], ['poa32op23'], ['xwi32wx23']], [['uvutvwxyzwxzyzabckumtkmtvz'], ['qrqprstuvstvuvwxygqipgiprv'], ['yzyxzabcdabdcdefgoyqxoqxzd']], [['uvwaubcxyuz'], ['qrswqxytuqv'], ['yzaeyfgbcyd']], [['abuvutvwxyzwxzyzabckuvzct'], ['wxqrqprstuvstvuvwxygqrvyp'], ['efyzyxzabcdabdcdefgoyzdgx']], [['tes2testppark1233'], ['pao2paopllwng1233'], ['xiw2xiwxttevo1233']], [['uvwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz'], ['qrstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv'], ['yzabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad']], [['xuvuvwxyzwxzyz'], ['tqrqrstuvstvuv'], ['byzyzabcdabdcd']], [['wuvwxyz'], ['sqrstuv'], ['ayzabcd']], [['aabdcde'], ['wwxzyza'], ['eefhghi']], [['uvwxyzwxyz'], ['qrstuvstuv'], ['yzabcdabcd']], [['cpararte1a2b3cstpark1abctuvwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz23'], ['ylwnwnpa1w2x3yoplwng1wxypqrstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv23'], ['gtevevxi1e2f3gwxtevo1efgxyzabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad23']], [['tkumtkmtuvwabuvuvwxyzwxzcxyuzmt'], ['pgqipgipqrswxqrqrstuvstvytuqvip'], ['xoyqxoqxyzaefyzyzabcdabdgbcydqx']], [['uvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywz'], ['qrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusv'], ['yzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcad']], [['wuvwxyzz'], ['sqrstuvv'], ['ayzabcdd']], [['xzyzabckumtkmtvz'], ['tvuvwxygqipgiprv'], ['bdcdefgoyqxoqxzd']], [['zzz'], ['vvv'], ['ddd']], [['ts2e3st23'], ['po2a3op23'], ['xw2i3wx23']], [['uvzmonitorz'], ['qrvikjepknv'], ['yzdqsrmxsvd']], [['t3se3'], ['p3oa3'], ['x3wi3']], [['uvutvwzzxz'], ['qrqprsvvtv'], ['yzyxzaddbd']], [['uvuvzwxyzwxz'], ['qrqrvstuvstv'], ['yzyzdabcdabd']], [['cpararteuvwxwyz1a2b3cstpark1abct23'], ['ylwnwnpaqrstsuv1w2x3yoplwng1wxyp23'], ['gtevevxiyzabacd1e2f3gwxtevo1efgx23']], [['stsest123'], ['opoaop123'], ['wxwiwx123']], [['tsest123aparrte1a2b3cstapark1213'], ['poaop123wlwnnpa1w2x3yopwlwng1213'], ['xwiwx123etevvxi1e2f3gwxetevo1213']], [['uvutvwvxyzwxzuvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywz'], ['qrqprsrtuvstvqrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusv'], ['yzyxzazbcdabdyzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcad']], [['kparrte1a2b3cstpark123'], ['glwnnpa1w2x3yoplwng123'], ['otevvxi1e2f3gwxtevo123']], [['pamonintorkpamonitoork'], ['lwikjejpknglwikjepkkng'], ['teqsrmrxsvoteqsrmxssvo']], [['tsestcpararte1a2b3cstpark1abct23123apa3'], ['poaopylwnwnpa1w2x3yoplwng1wxyp23123wlw3'], ['xwiwxgtevevxi1e2f3gwxtevo1efgx23123ete3']], [['abctest123'], ['wxypaop123'], ['efgxiwx123']], [['xzyzauvwxyzwxyzbckumtzkmtvz'], ['tvuvwqrstuvstuvxygqipvgiprv'], ['bdcdeyzabcdabcdfgoyqxdoqxzd']], [['1testpark1233'], ['1paoplwng1233'], ['1xiwxtevo1233']], [['tse32st233'], ['poa32op233'], ['xwi32wx233']], [['testtpark'], ['paopplwng'], ['xiwxxtevo']], [['abuvutvwxystsest123zwxzyzabckuvzct'], ['wxqrqprstuopoaop123vstvuvwxygqrvyp'], ['efyzyxzabcwxwiwx123dabdcdefgoyzdgx']], [['kmuvwxpaabctakyzuvutvuvutvwxyzwxzyztsest123aparrte1a2b3cstapark123wxyzwxzywzt'], ['giqrstlwwxypwguvqrqprqrqprstuvstvuvpoaop123wlwnnpa1w2x3yopwlwng123stuvstvusvp'], ['oqyzabteefgxeocdyzyxzyzyxzabcdabdcdxwiwx123etevvxi1e2f3gwxetevo123abcdabdcadx']], [['xzyzabckumtkmtvzz'], ['tvuvwxygqipgiprvv'], ['bdcdefgoyqxoqxzdd']], [['uvuvwxyzzyzpamonitork'], ['qrqrstuvvuvlwikjepkng'], ['yzyzabcddcdteqsrmxsvo']], [['ut3se3vwxpaabctakyzuvutvuvutvwxyzwxzyzwxyzwxzywz'], ['qp3oa3rstlwwxypwguvqrqprqrqprstuvstvuvstuvstvusv'], ['yx3wi3zabteefgxeocdyzyxzyzyxzabcdabdcdabcdabdcad']], [['abuvutvwxyzwxvzyzabckuvzct'], ['wxqrqprstuvstrvuvwxygqrvyp'], ['efyzyxzabcdabzdcdefgoyzdgx']], [['monitormuvvztkmt'], ['ikjepkniqrrvpgip'], ['qsrmxsvqyzzdxoqx']], [['uvxwpuvuvwxyzwxyzarrkxyz'], ['qrtslqrqrstuvstuvwnngtuv'], ['yzbatyzyzabcdabcdevvobcd']], [['uvwxzwyz'], ['qrstvsuv'], ['yzabdacd']], [['monitomrmuvvztkmt'], ['ikjepkiniqrrvpgip'], ['qsrmxsqvqyzzdxoqx']], [['parrte1a2b3cstpark123uvwabcxyuzuvwaxbbczxyuz'], ['lwnnpa1w2x3yoplwng123qrswxytuqvqrswtxxyvtuqv'], ['tevvxi1e2f3gwxtevo123yzaefgbcydyzaebffgdbcyd']], [['uvutvwxyzwxzyzabckuvzabctest123'], ['qrqprstuvstvuvwxygqrvwxypaop123'], ['yzyxzabcdabdcdefgoyzdefgxiwx123']], [['parkk'], ['lwngg'], ['tevoo']], [['uvwabbcxzxyuz'], ['qrswxxytvtuqv'], ['yzaeffgbdbcyd']], [['parrte1a2b3cst2park123'], ['lwnnpa1w2x3yop2lwng123'], ['tevvxi1e2f3gwx2tevo123']], [['bcd&^%'], ['xyz&^%'], ['fgh&^%']], [['thequickbrownfoxjumpsoverthelazydog'], ['pdamqeygxnksjbktfqilokranpdahwvuzkc'], ['xliuymgofvsarjsbnyqtwszivxlipedchsk']], [['abcdefghijklmnopqrstuvwxyz'], ['wxyzabcdefghijklmnopqrstuv'], ['efghijklmnopqrstuvwxyzabcd']], [['wxy'], ['stu'], ['abc']], [['yzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cddddddddddddddddddddddddd']], [['hi    et a gf hellomyfriend'], ['de    ap w cb dahhkiubneajz'], ['lm    ix e kj lippsqcjvmirh']], [['thequickbrownfoxjumpsoverthelazydo'], ['pdamqeygxnksjbktfqilokranpdahwvuzk'], ['xliuymgofvsarjsbnyqtwszivxlipedchs']], [['hi    et a gf hellomyfrienhellod'], ['de    ap w cb dahhkiubneajdahhkz'], ['lm    ix e kj lippsqcjvmirlippsh']], [['et'], ['ap'], ['ix']], [['hello'], ['dahhk'], ['lipps']], [['wxxy'], ['sttu'], ['abbc']], [['ho'], ['dk'], ['ls']], [['helo'], ['dahk'], ['lips']], [['heti    get a gf hellomyfrienhellod'], ['dape    cap w cb dahhkiubneajdahhkz'], ['lixm    kix e kj lippsqcjvmirlippsh']], [['helothequickbrownfoxjumpsoverthelazydo'], ['dahkpdamqeygxnksjbktfqilokranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwszivxlipedchs']], [['yzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdddddddddddddddddddddddddd']], [['hbcd&^%elo'], ['dxyz&^%ahk'], ['lfgh&^%ips']], [['b&cd&^'], ['x&yz&^'], ['f&gh&^']], [['ythequickbrownfoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszivxlipedchs']], [['hello heloworld'], ['dahhk dahksknhz'], ['lipps lipsasvph']], [['heloworld'], ['dahksknhz'], ['lipsasvph']], [['abcdefghijklmnopqrstuvwxyzythequickbrownfoxjumpsoverthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqilokranpdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqtwszivxlipedchs']], [['hi    et a rgf hellomyfrienhellod'], ['de    ap w ncb dahhkiubneajdahhkz'], ['lm    ix e vkj lippsqcjvmirlippsh']], [['heti    get a gf hellomyferienhellod'], ['dape    cap w cb dahhkiubaneajdahhkz'], ['lixm    kix e kj lippsqcjivmirlippsh']], [['hi    et a gf helloetmyfrienhellod'], ['de    ap w cb dahhkapiubneajdahhkz'], ['lm    ix e kj lippsixqcjvmirlippsh']], [['hi'], ['de'], ['lm']], [['thi    et a gf helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydog'], ['pde    ap w cb dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkc'], ['xlm    ix e kj lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchsk']], [['rgf'], ['ncb'], ['vkj']], [['abcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['helothequickbrownfoxumpsoverthelazydo'], ['dahkpdamqeygxnksjbktqilokranpdahwvuzk'], ['lipsxliuymgofvsarjsbyqtwszivxlipedchs']], [['abcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoe'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsi']], [['helothequickbrownfoxumpsovekrthelazydo'], ['dahkpdamqeygxnksjbktqilokragnpdahwvuzk'], ['lipsxliuymgofvsarjsbyqtwsziovxlipedchs']], [['helothequickbrownfoxjumpsgetoverthelazydo'], ['dahkpdamqeygxnksjbktfqilocapkranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkixszivxlipedchs']], [['hi    et  a gf hellomyfrienhellod'], ['de    ap  w cb dahhkiubneajdahhkz'], ['lm    ix  e kj lippsqcjvmirlippsh']], [['yywxy'], ['uustu'], ['ccabc']], [['ythequickbrownfhi    et a gf hellomyfriendoxjumpsoverthelazydo'], ['updamqeygxnksjbde    ap w cb dahhkiubneajzktfqilokranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lippsqcjvmirhsbnyqtwszivxlipedchs']], [['hi    etrgf hhellomyfrienhellod'], ['de    apncb ddahhkiubneajdahhkz'], ['lm    ixvkj llippsqcjvmirlippsh']], [['hhellomyfrienhellod'], ['ddahhkiubneajdahhkz'], ['llippsqcjvmirlippsh']], [['abcdefghijfklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefbghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnjopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['hellomyfriendoxjumpsoverthelazydo'], ['dahhkiubneajzktfqilokranpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszivxlipedchs']], [['thequickbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['heti    get a gf hellomyfrieonhellod'], ['dape    cap w cb dahhkiubneakjdahhkz'], ['lixm    kix e kj lippsqcjvmisrlippsh']], [['hi    et a gf hellomyfrienhellood'], ['de    ap w cb dahhkiubneajdahhkkz'], ['lm    ix e kj lippsqcjvmirlippssh']], [['yywx'], ['uust'], ['ccab']], [['ythequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['updamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['helowythequickbrownfhiorld'], ['dahksupdamqeygxnksjbdeknhz'], ['lipsacxliuymgofvsarjlmsvph']], [['wxxyy'], ['sttuu'], ['abbcc']], [['hi    let a gf hellomyfriend'], ['de    hap w cb dahhkiubneajz'], ['lm    pix e kj lippsqcjvmirh']], [['yzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdddddddddddddddddddddddd']], [['hhellomyfrinhellod'], ['ddahhkiubnejdahhkz'], ['llippsqcjvmrlippsh']], [['hellomyfrienhellodrownfoxjumpsoverthelazydojumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwszivxlipedchs']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogod'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckz'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchsksh']], [['hi    et a gf hellomyfrie'], ['de    ap w cb dahhkiubnea'], ['lm    ix e kj lippsqcjvmi']], [['ythequickbrownfhi'], ['updamqeygxnksjbde'], ['cxliuymgofvsarjlm']], [['heti    get a gf hellomyfrieonhello d'], ['dape    cap w cb dahhkiubneakjdahhk z'], ['lixm    kix e kj lippsqcjvmisrlipps h']], [['gf'], ['cb'], ['kj']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsibcc']], [['heti    get a mgf hellomyfrienhellod'], ['dape    cap w icb dahhkiubneajdahhkz'], ['lixm    kix e qkj lippsqcjvmirlippsh']], [['hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['eetrgft'], ['aapncbp'], ['iixvkjx']], [['eetrgf'], ['aapncb'], ['iixvkj']], [['hellomyferienhellod'], ['dahhkiubaneajdahhkz'], ['lippsqcjivmirlippsh']], [['b&helothequickbrownfoxjumpsgetoverthelazydocd&^'], ['x&dahkpdamqeygxnksjbktfqilocapkranpdahwvuzkyz&^'], ['f&lipsxliuymgofvsarjsbnyqtwkixszivxlipedchsgh&^']], [['hi    et a gf helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellod'], ['de    ap w cb dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['hi    et a gf hellomyfrienheod'], ['de    ap w cb dahhkiubneajdakz'], ['lm    ix e kj lippsqcjvmirlish']], [['yywxxy'], ['uusttu'], ['ccabbc']], [['helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['ohhellomyfrienhellod'], ['kddahhkiubneajdahhkz'], ['sllippsqcjvmirlippsh']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupmpsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytqtwszivxlipedchsibcc']], [['a'], ['w'], ['e']], [['hello heloworlthequickbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['dahhk dahksknhpdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['lipps lipsasvpxliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['ohhellomyfriend'], ['kddahhkiubneajz'], ['sllippsqcjvmirh']], [['hellomyfrienheod'], ['dahhkiubneajdakz'], ['lippsqcjvmirlish']], [['wolrld'], ['skhnhz'], ['aspvph']], [['hi    et a gf helloetmthelquickbrownfoxjumpsoverthelazydoyfrienhellod'], ['de    ap w cb dahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['heloworlthequickbheti'], ['dahksknhpdamqeygxdape'], ['lipsasvpxliuymgoflixm']], [['ergft'], ['ancbp'], ['ivkjx']], [['hel'], ['dah'], ['lip']], [['tlet'], ['phap'], ['xpix']], [['hi    letheti    get a gf hellomyfrieonhello df hellomyfriend'], ['de    hapdape    cap w cb dahhkiubneakjdahhk zb dahhkiubneajz'], ['lm    pixlixm    kix e kj lippsqcjvmisrlipps hj lippsqcjvmirh']], [['abcdefghijfklmnopeetrgftqrstuvwxyzythequickbrhownfoxjumpsoverthelazydo'], ['wxyzabcdefbghijklaapncbpmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzk'], ['efghijklmnjopqrstiixvkjxuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchs']], [['hi    et a rgf hellomyfrienhelb&cd&^lod'], ['de    ap w ncb dahhkiubneajdahx&yz&^hkz'], ['lm    ix e vkj lippsqcjvmirlipf&gh&^psh']], [['hellomyfrienhelb&cd&^lod'], ['dahhkiubneajdahx&yz&^hkz'], ['lippsqcjvmirlipf&gh&^psh']], [['helowythehquickbrownfhhiorld'], ['dahksupdadmqeygxnksjbddeknhz'], ['lipsacxliluymgofvsarjllmsvph']], [['ohhelyfrienhellod'], ['kddahubneajdahhkz'], ['sllipcjvmirlippsh']], [['hi    ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de    ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['bythequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo&cd&d^'], ['xupdamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk&yz&z^'], ['fcxliuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs&gh&h^']], [['hellomyfrienhellod'], ['dahhkiubneajdahhkz'], ['lippsqcjvmirlippsh']], [['hi    et a ohhellomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['eeetrgft'], ['aaapncbp'], ['iiixvkjx']], [['hellomyfriendoxjumpsovelrthelazydo'], ['dahhkiubneajzktfqilokrahnpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszipvxlipedchs']], [['hellomyfrienhellood'], ['dahhkiubneajdahhkkz'], ['lippsqcjvmirlippssh']], [['ythequickbrownfoxthequickbheti'], ['updamqeygxnksjbktpdamqeygxdape'], ['cxliuymgofvsarjsbxliuymgoflixm']], [['hellomyfrietrgf'], ['dahhkiubneapncb'], ['lippsqcjvmixvkj']], [['hellomyfrieonhello'], ['dahhkiubneakjdahhk'], ['lippsqcjvmisrlipps']], [['ehel'], ['adah'], ['ilip']], [['helflomyfrietrgf'], ['dahbhkiubneapncb'], ['lipjpsqcjvmixvkj']], [['hhellyomyfrienhellod'], ['ddahhukiubneajdahhkz'], ['llippcsqcjvmirlippsh']], [['helloetmthelquickbrownfoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscjvmirlippsh']], [['ythehelloetmthelquickbrownfoxjumpsoverthelazydoyienhellodnfhi'], ['updadahhkapipdahmqeygxnksjbktfqilokranpdahwvuzkueajdahhkzjbde'], ['cxlilippsixqxlipuymgofvsarjsbnyqtwszivxlipedchscmirlippshrjlm']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsovierthi'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokreanpde'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszmivxlm']], [['heti    get a gfrieonhello d'], ['dape    cap w cbneakjdahhk z'], ['lixm    kix e kjvmisrlipps h']], [['eeet'], ['aaap'], ['iiix']], [['hi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellod'], ['de    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippsh']], [['hi    et ehia rgf hellomyfrienhellod'], ['de    ap adew ncb dahhkiubneajdahhkz'], ['lm    ix ilme vkj lippsqcjvmirlippsh']], [['let'], ['hap'], ['pix']], [['hellomyfriendoxjumpsovelrathelazydo'], ['dahhkiubneajzktfqilokrahnwpdahwvuzk'], ['lippsqcjvmirhsbnyqtwszipvexlipedchs']], [['hi    et a gf helloetmyfrienhellothequickbhetid'], ['de    ap w cb dahhkapiubneajdahhkpdamqeygxdapez'], ['lm    ix e kj lippsixqcjvmirlippsxliuymgoflixmh']], [['heti    get a mgf hehi    et ehia rgf hellomyfrienhellodllomyfrienhellod'], ['dape    cap w icb dade    ap adew ncb dahhkiubneajdahhkzhhkiubneajdahhkz'], ['lixm    kix e qkj lilm    ix ilme vkj lippsqcjvmirlippshppsqcjvmirlippsh']], [['helloomyfrienheod'], ['dahhkkiubneajdakz'], ['lippssqcjvmirlish']], [['hi   helowythehquickbrownfhhiorld ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de   dahksupdadmqeygxnksjbddeknhz ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm   lipsacxliluymgofvsarjllmsvph ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['hello heloworlthequickbheti    get a gf hellomyfrienhellodrownfoxjumpsothequickbhetiverthelazydo'], ['dahhk dahksknhpdamqeygxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokpdamqeygxdaperanpdahwvuzk'], ['lipps lipsasvpxliuymgoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwsxliuymgoflixmzivxlipedchs']], [['abcdefghijklmnopqrstuvwxyzythequickbrownfoxjumpsoveletthelazydo'], ['wxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqilokrahappdahwvuzk'], ['efghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqtwszipixxlipedchs']], [['d'], ['z'], ['h']], [['hi    et a ohhelolomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w kddahkhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e sllipspsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['hellomyfrienhellodllomyfrienhellod'], ['dahhkiubneajdahhkzhhkiubneajdahhkz'], ['lippsqcjvmirlippshppsqcjvmirlippsh']], [['hhelothequickbrownfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksjbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsarjsbyqtwsziovxlipedchs']], [['heti    get a mgf hehi   e et ehia rgf hellomyfrienhellodllomyfrhoienhellod'], ['dape    cap w icb dade   a ap adew ncb dahhkiubneajdahhkzhhkiubndkeajdahhkz'], ['lixm    kix e qkj lilm   i ix ilme vkj lippsqcjvmirlippshppsqcjvlsmirlippsh']], [['helll'], ['dahhh'], ['lippp']], [['helothequickbrownfoxjumpsgetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqilocapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkixszilvxlipedchs']], [['hellthi'], ['dahhpde'], ['lippxlm']], [['hellomyfrrienhelb&cd&^lod'], ['dahhkiubnneajdahx&yz&^hkz'], ['lippsqcjvvmirlipf&gh&^psh']], [['yzzzzzzzzzzzzzzzzzzzzzzzzhel'], ['uvvvvvvvvvvvvvvvvvvvvvvvvdah'], ['cddddddddddddddddddddddddlip']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmirlippsh']], [['hellomyfrieendoxjumpsovelrthelazydo'], ['dahhkiubneaajzktfqilokrahnpdahwvuzk'], ['lippsqcjvmiirhsbnyqtwszipvxlipedchs']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogodoworld'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhz'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchskshsasvph']], [['ythequickbrownfhi    et a gf hellomyfriendoxjumpsojverthelazydo'], ['updamqeygxnksjbde    ap w cb dahhkiubneajzktfqilokfranpdahwvuzk'], ['cxliuymgofvsarjlm    ix e kj lippsqcjvmirhsbnyqtwsnzivxlipedchs']], [['hellomyfrienhellodllomyfrhoienhellod'], ['dahhkiubneajdahhkzhhkiubndkeajdahhkz'], ['lippsqcjvmirlippshppsqcjvlsmirlippsh']], [['woolrld'], ['skkhnhz'], ['asspvph']], [['bcd'], ['xyz'], ['fgh']], [['hellomyfergetienhellod'], ['dahhkiubancapeajdahhkz'], ['lippsqcjivkixmirlippsh']], [['bcdhellomyfrienhelb&cd&^lod'], ['xyzdahhkiubneajdahx&yz&^hkz'], ['fghlippsqcjvmirlipf&gh&^psh']], [['helothequickbrowonfoxumpsovekrthelazydo'], ['dahkpdamqeygxnkskjbktqilokragnpdahwvuzk'], ['lipsxliuymgofvsasrjsbyqtwsziovxlipedchs']], [['hhellomyfriod'], ['ddahhkiubnekz'], ['llippsqcjvmsh']], [['mgf'], ['icb'], ['qkj']], [['etrf'], ['apnb'], ['ixvj']], [['helhi'], ['dahde'], ['liplm']], [['bcd&%'], ['xyz&%'], ['fgh&%']], [['hhi    et a ohhellomyfrienhellodrgf hellomyfrienhellodellomyfrienhellood'], ['dde    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkzahhkiubneajdahhkkz'], ['llm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippshippsqcjvmirlippssh']], [['e'], ['a'], ['i']], [['hi    et a rgf hellomyfrienhelb&cd&^llod'], ['de    ap w ncb dahhkiubneajdahx&yz&^hhkz'], ['lm    ix e vkj lippsqcjvmirlipf&gh&^ppsh']], [['bcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lod'], ['xyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkz'], ['fghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^psh']], [['wwxy'], ['sstu'], ['aabc']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoi    t a gf hellomyfrieonhello d'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzke    p w cb dahhkiubneakjdahhk z'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsm    x e kj lippsqcjvmisrlipps h']], [['hlelll'], ['dhahhh'], ['lpippp']], [['eheel'], ['adaah'], ['iliip']], [['heti    get a gfrieonhello helothequickbrownfoxumpsovekrthelazydod'], ['dape    cap w cbneakjdahhk dahkpdamqeygxnksjbktqilokragnpdahwvuzkz'], ['lixm    kix e kjvmisrlipps lipsxliuymgofvsarjsbyqtwsziovxlipedchsh']], [['heolo'], ['dakhk'], ['lisps']], [['ehelhellomyfrienhelb&cd&^lod'], ['adahdahhkiubneajdahx&yz&^hkz'], ['iliplippsqcjvmirlipf&gh&^psh']], [['helloetmyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthigfthequickbhetid'], ['dahhkapiubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdecbpdamqeygxdapez'], ['lippsixqcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmkjxliuymgoflixmh']], [['ehelloetmyfrthirgft'], ['adahhkapiubnpdencbp'], ['ilippsixqcjvxlmvkjx']], [['helbcd&^%lomyfriendoxhi    etrgf hhellomyfrienhellodjumpsoverthelawwxyzydo&cd&d^'], ['dahxyz&^%hkiubneajzktde    apncb ddahhkiubneajdahhkzfqilokranpdahwsstuvuzk&yz&z^'], ['lipfgh&^%psqcjvmirhsblm    ixvkj llippsqcjvmirlippshnyqtwszivxlipeaabcdchs&gh&h^']], [['ohhelolomyfrienhellodrgf'], ['kddahkhkiubneajdahhkzncb'], ['sllipspsqcjvmirlippshvkj']], [['thequickbrownfoxjumpsoverthi    et a gf helloetmyfrienhellodhelazydo'], ['pdamqeygxnksjbktfqilokranpde    ap w cb dahhkapiubneajdahhkzdahwvuzk'], ['xliuymgofvsarjsbnyqtwszivxlm    ix e kj lippsixqcjvmirlippshlipedchs']], [['helloetmyfrienhellothequickbhetid'], ['dahhkapiubneajdahhkpdamqeygxdapez'], ['lippsixqcjvmirlippsxliuymgoflixmh']], [['trhequickbrownfoxjumpsoverthelazydog'], ['pndamqeygxnksjbktfqilokranpdahwvuzkc'], ['xvliuymgofvsarjsbnyqtwszivxlipedchsk']], [['hellomyfriendoxjumpsojverthelazydo'], ['dahhkiubneajzktfqilokfranpdahwvuzk'], ['lippsqcjvmirhsbnyqtwsnzivxlipedchs']], [['eeetrgfthellomyfrienhellodrownfoxjumpsoverthelazydo'], ['aaapncbpdahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['iiixvkjxlippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['gfrieonhello'], ['cbneakjdahhk'], ['kjvmisrlipps']], [['heloo'], ['dahkk'], ['lipss']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrienhellodget'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneajdahhkzcap'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmirlippshkix']], [['helloomyfrienhhi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellodeod'], ['dahhkkiubneajdde    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkzakz'], ['lippssqcjvmirllm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippshish']], [['ehellgft'], ['adahhcbp'], ['ilippkjx']], [['hehi    et a ohhelolomyfrienhellodrgf hellomyfrienhellodlflomyfrietrgf'], ['dade    ap w kddahkhkiubneajdahhkzncb dahhkiubneajdahhkzhbhkiubneapncb'], ['lilm    ix e sllipspsqcjvmirlippshvkj lippsqcjvmirlippshpjpsqcjvmixvkj']], [['hello wlorld'], ['dahhk shknhz'], ['lipps apsvph']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodhelazydoexyy'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzdahwvuzkatuu'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshlipedchsibcc']], [['abcdefghijklmnopqrsquickbrownfoxjumpsovferthelazydo'], ['wxyzabcdefghijklmnomqeygxnksjbktfqilokrbanpdahwvuzk'], ['efghijklmnopqrstuvwuymgofvsarjsbnyqtwszjivxlipedchs']], [['helloetmyfrienhellod'], ['dahhkapiubneajdahhkz'], ['lippsixqcjvmirlippsh']], [['hi    helotheqolod'], ['de    dahkpdamkhkz'], ['lm    lipsxliuspsh']], [['wxabcdefghijklmoxjumpsoverthelazydoexyy'], ['stwxyzabcdefghiktfqilokranpdahwvuzkatuu'], ['abefghijklmnopqsbnyqtwszivxlipedchsibcc']], [['thequickbrownfoxjumpsovertheazydo'], ['pdamqeygxnksjbktfqilokranpdawvuzk'], ['xliuymgofvsarjsbnyqtwszivxliedchs']], [['hi    et ehia rgf hfrienhehellomyfrienhellodrownfoxjumpsoverthelazydojumpsoverthelazydollod'], ['de    ap adew ncb dbneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilokranpdahwvuzkhhkz'], ['lm    ix ilme vkj ljvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwszivxlipedchsppsh']], [['abcdefghijfklmnopeetrgftqazydo'], ['wxyzabcdefbghijklaapncbpmwvuzk'], ['efghijklmnjopqrstiixvkjxuedchs']], [['helothequickbrownfonxjumpsgetoverthelazydo'], ['dahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzk'], ['lipsxliuymgofvsarjsrbnyqtwkixszivxlipedchs']], [['hellomyfrie'], ['dahhkiubnea'], ['lippsqcjvmi']], [['eehia'], ['aadew'], ['iilme']], [['bcohhellomyfrienhellodd'], ['xykddahhkiubneajdahhkzz'], ['fgsllippsqcjvmirlippshh']], [['helbcdhhellyomyfrienhellod&^%lomyfriendoxjumpsoverthelazydo&cd&d^'], ['dahxyzddahhukiubneajdahhkz&^%hkiubneajzktfqilokranpdahwvuzk&yz&z^'], ['lipfghllippcsqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxlipedchs&gh&h^']], [['hellomyfergetienhelllod'], ['dahhkiubancapeajdahhhkz'], ['lippsqcjivkixmirlipppsh']], [['helbcd&^%lomyfriendoxhihhello'], ['dahxyz&^%hkiubneajzktdeddahhk'], ['lipfgh&^%psqcjvmirhsblmllipps']], [['aa'], ['ww'], ['ee']], [['hi    ehi    et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de    ade    ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm    ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupompsoverthelazydoexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlkilokranpdahwvuzkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytsqtwszivxlipedchsibcc']], [['hello heti    get a gf hellomyfrieonhello dd'], ['dahhk dape    cap w cb dahhkiubneakjdahhk zz'], ['lipps lixm    kix e kj lippsqcjvmisrlipps hh']], [['helothequickbrownfoxjuhielazydo'], ['dahkpdamqeygxnksjbktfqdeahwvuzk'], ['lipsxliuymgofvsarjsbnylmipedchs']], [['hello heti    get a gf hellomyfheti    get a mgf hellomyfrienhellodo dd'], ['dahhk dape    cap w cb dahhkiubdape    cap w icb dahhkiubneajdahhkzk zz'], ['lipps lixm    kix e kj lippsqcjlixm    kix e qkj lippsqcjvmirlippshs hh']], [['hello helowhellomyfrrienhelb&cd&^lodorld'], ['dahhk dahksdahhkiubnneajdahx&yz&^hkzknhz'], ['lipps lipsalippsqcjvvmirlipf&gh&^pshsvph']], [['yzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cddddddddddddddiliipddddddddddd']], [['bcohhellomyfrieythequickbrownfoxthequickbhetinhellodd'], ['xykddahhkiubneaupdamqeygxnksjbktpdamqeygxdapejdahhkzz'], ['fgsllippsqcjvmicxliuymgofvsarjsbxliuymgoflixmrlippshh']], [['hhellomyffrienhellod'], ['ddahhkiubbneajdahhkz'], ['llippsqcjjvmirlippsh']], [['ef'], ['ab'], ['ij']], [['helloetmyfrienhellodhequicokbrownfoxjumpsoverthelzazydogod'], ['dahhkapiubneajdahhkzdamqeykgxnksjbktfqilokranpdahvwvuzkckz'], ['lippsixqcjvmirlippshliuymgsofvsarjsbnyqtwszivxlipdedchsksh']], [['erghi'], ['ancde'], ['ivklm']], [['hhellomyfriengfrieonhellohellodnhellodlod'], ['ddahhkiubneajcbneakjdahhkdahhkzjdahhkzhkz'], ['llippsqcjvmirkjvmisrlippslippshrlippshpsh']], [['helothequickbrownfoxjumpsgmetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqilociapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtwkqixszilvxlipedchs']], [['hellb&helothequickbrownfoxjumpsgetoverthelazydocd&^frietrogf'], ['dahhx&dahkpdamqeygxnksjbktfqilocapkranpdahwvuzkyz&^bneapnkcb'], ['lippf&lipsxliuymgofvsarjsbnyqtwkixszivxlipedchsgh&^jvmixvskj']], [['hi    et a gfi hellomyfrie'], ['de    ap w cbe dahhkiubnea'], ['lm    ix e kjm lippsqcjvmi']], [['hello helowhellomyhellomyfrienhelb&cd&^lodfrrienhelb&cd&^lodorld'], ['dahhk dahksdahhkiudahhkiubneajdahx&yz&^hkzbnneajdahx&yz&^hkzknhz'], ['lipps lipsalippsqclippsqcjvmirlipf&gh&^pshjvvmirlipf&gh&^pshsvph']], [['hi    et a rgf hellomyfrietnhelb&cd&^lod'], ['de    ap w ncb dahhkiubneapjdahx&yz&^hkz'], ['lm    ix e vkj lippsqcjvmixrlipf&gh&^psh']], [['hi    et a gf lhgfrieonhelloellomyfrie'], ['de    ap w cb hdcbneakjdahhkahhkiubnea'], ['lm    ix e kj plkjvmisrlippsippsqcjvmi']], [['hellomyfrieonhellod'], ['dahhkiubneakjdahhkz'], ['lippsqcjvmisrlippsh']], [['helbcd&^hellomyfrienhellodellomyfrienhellood%lomyfriendoxhihhello'], ['dahxyz&^dahhkiubneajdahhkzahhkiubneajdahhkkz%hkiubneajzktdeddahhk'], ['lipfgh&^lippsqcjvmirlippshippsqcjvmirlippssh%psqcjvmirhsblmllipps']], [['get'], ['cap'], ['kix']], [['helhlellllthi'], ['dahdhahhhhpde'], ['liplpippppxlm']], [['helloetmyfrienhellohellomyfrienhellodrownfoxjumpsoverthelazydothequickbhetid'], ['dahhkapiubneajdahhkdahhkiubneajdahhkznksjbktfqilokranpdahwvuzkpdamqeygxdapez'], ['lippsixqcjvmirlippslippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsxliuymgoflixmh']], [['hi    et ehia rgf he llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['de    ap adew ncb da hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['lm    ix ilme vkj li ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['hi    ehi   l et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de    ade   h ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm    ilm   p ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['hbcd&^%eo'], ['dxyz&^%ak'], ['lfgh&^%is']], [['ohhelolomyfetrienhellrgf'], ['kddahkhkiubapneajdahhncb'], ['sllipspsqcjixvmirlippvkj']], [['thequicukbheti    get a gf hellomyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqeyqgxdape    cap w cb dahhkiubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuymgyoflixm    kix e kj lippsqcjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['helloetmyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthigbhetiid'], ['dahhkapiubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdecxdapeez'], ['lippsixqcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmkflixmmh']], [['hellomyfrrienhelb&cdlod'], ['dahhkiubnneajdahx&yzhkz'], ['lippsqcjvvmirlipf&ghpsh']], [['helowythequicckbrownfhihi    et a gf hellomyfriendorld'], ['dahksupdamqeyygxnksjbdede    ap w cb dahhkiubneajzknhz'], ['lipsacxliuymggofvsarjlmlm    ix e kj lippsqcjvmirhsvph']], [['abcdefghijklmnopqrstuvwxwxabcdefghijklmnopqrstuvwxyyzythequickbrhownfoxjumpsoverthelazydoe'], ['wxyzabcdefghijklmnopqrststwxyzabcdefghijklmnopqrstuuvupdamqeygxndksjbktfqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxyzababefghijklmnopqrstuvwxyzabccdcxliuymgofvlsarjsbnyqtwszivxlipedchsi']], [['efrgft'], ['abncbp'], ['ijvkjx']], [['ythequickbrownfoxjumpsoverthelazydoythequickbrownoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokranpdahwvuzkupdamqeygxnksjktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszivxlipedchscxliuymgofvsarsbnyqtwszivxlipedchs']], [['ehehif'], ['adadeb'], ['ililmj']], [['heheti    get a gf hellomyfrieonhellyodllomyfergetienhelllob&cd&^d'], ['dadape    cap w cb dahhkiubneakjdahhukzhhkiubancapeajdahhhkx&yz&^z'], ['lilixm    kix e kj lippsqcjvmisrlippcshppsqcjivkixmirlipppsf&gh&^h']], [['hi    et aheallomyfriendoxjumpsoverthelazydo gf helloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['de    ap wdawhhkiubneajzktfqilokranpdahwvuzk cb dahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lm    ix elieppsqcjvmirhsbnyqtwszivxlipedchs kj lippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['hi e   let a gf hellomyfriend'], ['de a   hap w cb dahhkiubneajz'], ['lm i   pix e kj lippsqcjvmirh']], [['hllelll'], ['dhhahhh'], ['lppippp']], [['hhellyomyfrielod'], ['ddahhukiubneahkz'], ['llippcsqcjvmipsh']], [['hello wbcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lodlorld'], ['dahhk sxyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkzhknhz'], ['lipps afghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^pshpsvph']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodlomyferienhellodt'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzhkiubaneajdahhkzp'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshpsqcjivmirlippshx']], [['hi    et ehia rgf hfrienhehellomyfrienhellodrownfoxjumpsoverthelazydojumpsthelazydollod'], ['de    ap adew ncb dbneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvuzkfqilopdahwvuzkhhkz'], ['lm    ix ilme vkj ljvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedchsnyqtwxlipedchsppsh']], [['ft'], ['bp'], ['jx']], [['yzzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cdddddddddddddddiliipddddddddddd']], [['ythequichi'], ['updamqeyde'], ['cxliuymglm']], [['helloetmyfrienhellodhequickbrownfoxjumpsoverthelazeydog'], ['dahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvauzkc'], ['lippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedichsk']], [['aickbrownfoxjumpsoveletthelazydo'], ['weygxnksjbktfqilokrahappdahwvuzk'], ['emgofvsarjsbnyqtwszipixxlipedchs']], [['b&helothequickownfoxjumpsgetoverthelazydocd&^'], ['x&dahkpdamqeygksjbktfqilocapkranpdahwvuzkyz&^'], ['f&lipsxliuymgosarjsbnyqtwkixszivxlipedchsgh&^']], [['helothequickbrownfoxjumphellomyfergetienhelllodsoverthelazydo'], ['dahkpdamqeygxnksjbktfqildahhkiubancapeajdahhhkzokranpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqtlippsqcjivkixmirlipppshwszivxlipedchs']], [['df'], ['zb'], ['hj']], [['b&helothequickownfoxjumpsgetovcerthelazydocd&^'], ['x&dahkpdamqeygksjbktfqilocapkryanpdahwvuzkyz&^'], ['f&lipsxliuymgosarjsbnyqtwkixszgivxlipedchsgh&^']], [['hehi'], ['dade'], ['lilm']], [['hhelloetmyfrienhellodhelazydol'], ['ddahhkapiubneajdahhkzdahwvuzkh'], ['llippsixqcjvmirlippshlipedchsp']], [['hehi    ehi    et a gf hellomyfrietrogf hhellomyfrienhellodlothequickbrownfoxumpsoverthelazydo'], ['dade    ade    ap w cb dahhkiubneapnkcb ddahhkiubneajdahhkzhkpdamqeygxnksjbktqilokranpdahwvuzk'], ['lilm    ilm    ix e kj lippsqcjvmixvskj llippsqcjvmirlippshpsxliuymgofvsarjsbyqtwszivxlipedchs']], [['ythequickbrownfoxjum'], ['updamqeygxnksjbktfqi'], ['cxliuymgofvsarjsbnyq']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodkbrownfhi'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzgxnksjbde'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshofvsarjlm']], [['helothequetovehrthelazydo'], ['dahkpdamqapkradnpdahwvuzk'], ['lipsxliuyixszilvxlipedchs']], [['hi   helowythehquickbrownfhhiorlde ehi    et a gf hellomyfrietrgf hhellomyfrienhellod'], ['de   dahksupdadmqeygxnksjbddeknhza ade    ap w cb dahhkiubneapncb ddahhkiubneajdahhkz'], ['lm   lipsacxliluymgofvsarjllmsvphi ilm    ix e kj lippsqcjvmixvkj llippsqcjvmirlippsh']], [['hellomyfrreienhelb&cdlod'], ['dahhkiubnnaeajdahx&yzhkz'], ['lippsqcjvvimirlipf&ghpsh']], [['llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['hhelothequickbrowhelowythequicckbrownfhihinfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksdahksupdamqeyygxnksjbdedejbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsalipsacxliuymggofvsarjlmlmrjsbyqtwsziovxlipedchs']], [['thequickbheti'], ['pdamqeygxdape'], ['xliuymgoflixm']], [['heti    get a gf hellomyfrieonhelllo d'], ['dape    cap w cb dahhkiubneakjdahhhk z'], ['lixm    kix e kj lippsqcjvmisrlippps h']], [['fwwxy'], ['bsstu'], ['jaabc']], [['hhi    et a ohhellomyfrienhellodrgf hellomyfrienhellodellomyfrienhelloold'], ['dde    ap w kddahhkiubneajdahhkzncb dahhkiubneajdahhkzahhkiubneajdahhkkhz'], ['llm    ix e sllippsqcjvmirlippshvkj lippsqcjvmirlippshippsqcjvmirlippssph']], [['helhlellelltihi'], ['dahdhahhahhpede'], ['liplpippippxmlm']], [['bcohhellomyfyrienhellodd'], ['xykddahhkiubuneajdahhkzz'], ['fgsllippsqcjcvmirlippshh']], [['hhelllomyfriod'], ['ddahhhkiubnekz'], ['llipppsqcjvmsh']], [['hellomyfrienhellodrownfooxjumpsoverthelazydo'], ['dahhkiubneajdahhkznksjbkktfqilokranpdahwvuzk'], ['lippsqcjvmirlippshvsarjssbnyqtwszivxlipedchs']], [['helloetmyfrienhellzodhequickbrownfoxjumpsoverthelazydogodoworld'], ['dahhkapiubneajdahhvkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhz'], ['lippsixqcjvmirlippdshliuymgofvsarjsbnyqtwszivxlipedchskshsasvph']], [['yzzzzzzzzzzzzzzeheelzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvadaahvvvvvvvvvvvv'], ['cddddddddddddddiliipdddddddddddd']], [['etrgf'], ['apncb'], ['ixvkj']], [['hi l   ehi   l et a gf hellomyfrietrgf hhellomyfriengfrieonhellohellod'], ['de h   ade   h ap w cb dahhkiubneapncb ddahhkiubneajcbneakjdahhkdahhkz'], ['lm p   ilm   p ix e kj lippsqcjvmixvkj llippsqcjvmirkjvmisrlippslippsh']], [['yzhzzzzzzzzzzzzzzeheelzzzzzzzzzzz'], ['uvdvvvvvvvvvvvvvvadaahvvvvvvvvvvv'], ['cdlddddddddddddddiliipddddddddddd']], [['ythequickbrownfoxjumpsovownoxjumpsoverthelazydo'], ['updamqeygxnksjbktfqilokrksjktfqilokranpdahwvuzk'], ['cxliuymgofvsarjsbnyqtwszsarsbnyqtwszivxlipedchs']], [['yywahellomyfriendoxjumupsoverthelazydoxy'], ['uuswdahhkiubneajzktfqiqlokranpdahwvuzktu'], ['ccaelippsqcjvmirhsbnyqytwszivxlipedchsbc']], [['hhellyoomyfrielod'], ['ddahhukkiubneahkz'], ['llippcssqcjvmipsh']], [['bcohhellhomyfrienhellodd'], ['xykddahhdkiubneajdahhkzz'], ['fgsllipplsqcjvmirlippshh']], [['ehelothequickbrownfonxjumpsgetoverthelazydot'], ['adahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzkp'], ['ilipsxliuymgofvsarjsrbnyqtwkixszivxlipedchsx']], [['hlel'], ['dhah'], ['lpip']], [['helloetmyfrthi'], ['dahhkapiubnpde'], ['lippsixqcjvxlm']], [['hellomyfergetienfhelllod'], ['dahhkiubancapeajbdahhhkz'], ['lippsqcjivkixmirjlipppsh']], [['helowythequicckbrownfhihi    ethhelothequickbrownfoxumpsovekrthelazydo a gf hellomyfriendorld'], ['dahksupdamqeyygxnksjbdede    apddahkpdamqeygxnksjbktqilokragnpdahwvuzk w cb dahhkiubneajzknhz'], ['lipsacxliuymggofvsarjlmlm    ixllipsxliuymgofvsarjsbyqtwsziovxlipedchs e kj lippsqcjvmirhsvph']], [['ohhhelllellomyfrienhellod'], ['kdddahhhahhkiubneajdahhkz'], ['slllipppippsqcjvmirlippsh']], [['eff'], ['abb'], ['ijj']], [['h eti    get a mgf hellomyfrienhellod'], ['d ape    cap w icb dahhkiubneajdahhkz'], ['l ixm    kix e qkj lippsqcjvmirlippsh']], [['hellomyfrietnhelb&cd&^lod'], ['dahhkiubneapjdahx&yz&^hkz'], ['lippsqcjvmixrlipf&gh&^psh']], [['b&cdheythequickbrownfoxjumpshi'], ['x&yzdaupdamqeygxnksjbktfqilode'], ['f&ghlicxliuymgofvsarjsbnyqtwlm']], [['helhlomyfriend'], ['dahdhkiubneajz'], ['liplpsqcjvmirh']], [['hhelothequickbrowhelhowythequicckbrownfhihinfoxumpsovekrthelazydo'], ['ddahkpdamqeygxnksdahdksupdamqeyygxnksjbdedejbktqilokragnpdahwvuzk'], ['llipsxliuymgofvsaliplsacxliuymggofvsarjlmlmrjsbyqtwsziovxlipedchs']], [['hi    et a rg f hellomyfrietnhelb&cd&^lod'], ['de    ap w nc b dahhkiubneapjdahx&yz&^hkz'], ['lm    ix e vk j lippsqcjvmixrlipf&gh&^psh']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsoverthelazydoexyyd'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpdahwvuzkatuuz'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxlipedchsibcch']], [['hi    et a helolomyfrienhellodrgf hellomyfrienhellod'], ['de    ap w dahkhkiubneajdahhkzncb dahhkiubneajdahhkz'], ['lm    ix e lipspsqcjvmirlippshvkj lippsqcjvmirlippsh']], [['helolomyfrienhellorgf'], ['dahkhkiubneajdahhkncb'], ['lipspsqcjvmirlippsvkj']], [['heeloo'], ['daahkk'], ['liipss']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsovertyhelazydoexyyd'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpudahwvuzkatuuz'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxclipedchsibcch']], [['fhellfomyfrie'], ['bdahhbkiubnea'], ['jlippjsqcjvmi']], [['gget'], ['ccap'], ['kkix']], [['heelazydo'], ['daahwvuzk'], ['liipedchs']], [['eeetrwxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjupompsoverthelazydoexyygft'], ['aaapnstwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqlkilokranpdahwvuzkatuucbp'], ['iiixvabefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnytsqtwszivxlipedchsibcckjx']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodsoverthelazydo'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzokranpdahwvuzk'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshwszivxlipedchs']], [['helloetmthequickbrowoxjumpsoverthelazydoyfrieunhellodget'], ['dahhkapipdamqeygxnksktfqilokranpdahwvuzkubneaqjdahhkzcap'], ['lippsixqxliuymgofvsasbnyqtwszivxlipedchscjvmiyrlippshkix']], [['ahellomyfriendoxjumupsoverthelazydo'], ['wdahhkiubneajzktfqiqlokranpdahwvuzk'], ['elippsqcjvmirhsbnyqytwszivxlipedchs']], [['helowythehquickbrownfhhiorlde'], ['dahksupdadmqeygxnksjbddeknhza'], ['lipsacxliluymgofvsarjllmsvphi']], [['ithi'], ['epde'], ['mxlm']], [['bcohhellomyfyrienhellodwxabcdefghijklmoxjumpsovertyhelazydoexyyhellomyfrienhelb&cd&^loddeeetrgft'], ['xykddahhkiubuneajdahhkzstwxyzabcdefghiktfqilokranpudahwvuzkatuudahhkiubneajdahx&yz&^hkzzaaapncbp'], ['fgsllippsqcjcvmirlippshabefghijklmnopqsbnyqtwszivxclipedchsibcclippsqcjvmirlipf&gh&^pshhiiixvkjx']], [['hellomyfrietrogf'], ['dahhkiubneapnkcb'], ['lippsqcjvmixvskj']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoi'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzke'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsm']], [['ythequickbrowunfoxthequickbheti'], ['updamqeygxnksqjbktpdamqeygxdape'], ['cxliuymgofvsayrjsbxliuymgoflixm']], [['bcohhellomyfyrienhellofdwxabcdefghijklmoxjumpsovertyhelazydoexyyd'], ['xykddahhkiubuneajdahhkbzstwxyzabcdefghiktfqilokranpudahwvuzkatuuz'], ['fgsllippsqcjcvmirlippsjhabefghijklmnopqsbnyqtwszivxclipedchsibcch']], [['habcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelcazydoi    t a gf hellomyfrieonhello d'], ['dwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahywvuzke    p w cb dahhkiubneakjdahhk z'], ['lefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipgedchsm    x e kj lippsqcjvmisrlipps h']], [['hi    et ehia rgf he llomyfrihi    et a helolomyfrienhellodrgf hellomyfrienhellodverthelazyollod'], ['de    ap adew ncb da hhkiubnede    ap w dahkhkiubneajdahhkzncb dahhkiubneajdahhkzranpdahwvukhhkz'], ['lm    ix ilme vkj li ppsqcjvmlm    ix e lipspsqcjvmirlippshvkj lippsqcjvmirlippshzivxlipedcsppsh']], [['helhlellelltiihi'], ['dahdhahhahhpeede'], ['liplpippippxmmlm']], [['ohhhelllellomyfrienheellod'], ['kdddahhhahhkiubneajdaahhkz'], ['slllipppippsqcjvmirliippsh']], [['hhellyomyfrienyhello'], ['ddahhukiubneajudahhk'], ['llippcsqcjvmirclipps']], [['ohhhelllellomyfriabcdefghijfklmnopeetrgftqrstuvwxyzythequickbrhownfoxjumpsoverthelahzydoenhellod'], ['kdddahhhahhkiubnewxyzabcdefbghijklaapncbpmnopqrstuvupdamqeygxndksjbktfqilokranpdahwdvuzkajdahhkz'], ['slllipppippsqcjvmefghijklmnjopqrstiixvkjxuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipeldchsirlippsh']], [['hellomyfrienhellodlflomyfrietrgf'], ['dahhkiubneajdahhkzhbhkiubneapncb'], ['lippsqcjvmirlippshpjpsqcjvmixvkj']], [['helxloetmthequickbrowoxjumpsoverthelazydoyfrieunhellodget'], ['dahthkapipdamqeygxnksktfqilokranpdahwvuzkubneaqjdahhkzcap'], ['lipbpsixqxliuymgofvsasbnyqtwszivxlipedchscjvmiyrlippshkix']], [['helhlellelletiihi'], ['dahdhahhahhapeede'], ['liplpippippixmmlm']], [['abcdefghijklmnopqrsteuvwxwxabcdefghijklmnopqrstuvwxyyzythequickbrhownfoxjsumpsoverthelazydoe'], ['wxyzabcdefghijklmnopaqrststwxyzabcdefghijklmnopqrstuuvupdamqeygxndksjbktfoqilokranpdahwvuzka'], ['efghijklmnopqrstuvwxiyzababefghijklmnopqrstuvwxyzabccdcxliuymgofvlsarjsbnwyqtwszivxlipedchsi']], [['hhellomyfriengrieonhellohellodnhellodlod'], ['ddahhkiubneajcneakjdahhkdahhkzjdahhkzhkz'], ['llippsqcjvmirkvmisrlippslippshrlippshpsh']], [['hhellyomyfriehello'], ['ddahhukiubneadahhk'], ['llippcsqcjvmilipps']], [['bcd&hellomoyfrienhellodrownfoxjumpsoverthhhellomyfriengfrieonhellohellodelazydo%'], ['xyz&dahhkikubneajdahhkznksjbktfqilokranpdddahhkiubneajcbneakjdahhkdahhkzahwvuzk%'], ['fgh&lippsqscjvmirlippshvsarjsbnyqtwszivxlllippsqcjvmirkjvmisrlippslippshipedchs%']], [['wxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydooexyy'], ['stwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkkatuu'], ['abefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchssibcc']], [['hi    elt a rgf hellomyfrienhellod'], ['de    ahp w ncb dahhkiubneajdahhkz'], ['lm    ipx e vkj lippsqcjvmirlippsh']], [['helflomyfriietrgf'], ['dahbhkiubneeapncb'], ['lipjpsqcjvmmixvkj']], [['ehiabcdefghijklmnopqrwnfxjumpsoveletthelazydoa'], ['adewxyzabcdefghijklmnsjbtfqilokrahappdahwvuzkw'], ['ilmefghijklmnopqrstuvarjbnyqtwszipixxlipedchse']], [['healloetmyfrienhellodhequickbrownfoxjumpsoverthelazeydog'], ['dawhhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvauzkc'], ['lieppsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedichsk']], [['lhgfrieonhelloellomyfrie'], ['hdcbneakjdahhkahhkiubnea'], ['plkjvmisrlippsippsqcjvmi']], [['hhellylomyfrienhellod'], ['ddahhuhkiubneajdahhkz'], ['llippcpsqcjvmirlippsh']], [['hfsoverthigfthequickbhetid'], ['dbokranpdecbpdamqeygxdapez'], ['ljwszivxlmkjxliuymgoflixmh']], [['yywbcdhellhelothequickbrowonfoxumpsovekrthelazydoomyfrienhelb&cd&^lodlorldwxy'], ['uusxyzdahhdahkpdamqeygxnkskjbktqilokragnpdahwvuzkkiubneajdahx&yz&^hkzhknhzstu'], ['ccafghlipplipsxliuymgofvsasrjsbyqtwsziovxlipedchssqcjvmirlipf&gh&^pshpsvphabc']], [['bcdhellomyfrieonhellod&^%'], ['xyzdahhkiubneakjdahhkz&^%'], ['fghlippsqcjvmisrlippsh&^%']], [['aheallomyfriendoxjumpsoverthelazydo'], ['wdawhhkiubneajzktfqilokranpdahwvuzk'], ['elieppsqcjvmirhsbnyqtwszivxlipedchs']], [['aheallomyfriendoxjumpsoverthwxabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsovierthielazydo'], ['wdawhhkiubneajzktfqilokranpdstwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokreanpdeahwvuzk'], ['elieppsqcjvmirhsbnyqtwszivxlabefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszmivxlmipedchs']], [['hhellohelloetmyfrienhellodhequickbrownfoxjumpsoverthelazydogodoworldmyfrienhellodeod'], ['ddahhkdahhkapiubneajdahhkzdamqeygxnksjbktfqilokranpdahwvuzkckzksknhziubneajdahhkzakz'], ['llippslippsixqcjvmirlippshliuymgofvsarjsbnyqtwszivxlipedchskshsasvphqcjvmirlippshish']], [['eflie'], ['abhea'], ['ijpmi']], [['ohhelyfrienhellood'], ['kddahubneajdahhkkz'], ['sllipcjvmirlippssh']], [['ehellioetmhi'], ['adahhekapide'], ['ilippmsixqlm']], [['ahellomyfriendoxjumupsoverthelaefzydo'], ['wdahhkiubneajzktfqiqlokranpdahwabvuzk'], ['elippsqcjvmirhsbnyqytwszivxlipeijdchs']], [['hellomyfrieonhenllod'], ['dahhkiubneakjdajhhkz'], ['lippsqcjvmisrlirppsh']], [['hlelloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['dhahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lpippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['hi    helothelbcd&^%lomyfriendoxhihhelloheqolod'], ['de    dahkpdahxyz&^%hkiubneajzktdeddahhkdamkhkz'], ['lm    lipsxlipfgh&^%psqcjvmirhsblmllippsliuspsh']], [['helloomyfrienhhi    ehi    et a gf hellomyfrietrogf hhellohehetimyfrienhellodeod'], ['dahhkkiubneajdde    ade    ap w cb dahhkiubneapnkcb ddahhkdadapeiubneajdahhkzakz'], ['lippssqcjvmirllm    ilm    ix e kj lippsqcjvmixvskj llippslilixmqcjvmirlippshish']], [['hl'], ['dh'], ['lp']], [['helhii'], ['dahdee'], ['liplmm']], [['hellomyfriendoxjumpsojvertaheallomyfriendoxjumpsoverthelazydoazydo'], ['dahhkiubneajzktfqilokfranpwdawhhkiubneajzktfqilokranpdahwvuzkwvuzk'], ['lippsqcjvmirhsbnyqtwsnzivxelieppsqcjvmirhsbnyqtwszivxlipedchsedchs']], [['hellomyfrienhellodverthelazyollod'], ['dahhkiubneajdahhkzranpdahwvukhhkz'], ['lippsqcjvmirlippshzivxlipedcsppsh']], [['eheihif'], ['adaedeb'], ['ilimlmj']], [['helothequickbrownfoxjumtpsgmetovehrthelazydo'], ['dahkpdamqeygxnksjbktfqiplociapkradnpdahwvuzk'], ['lipsxliuymgofvsarjsbnyqxtwkqixszilvxlipedchs']], [['ythequickbrownfoxthuickbheti'], ['updamqeygxnksjbktpdqeygxdape'], ['cxliuymgofvsarjsbxlymgoflixm']], [['hi  df  et ehia rgf he llomyfrienhehellomyfrienhellodrownfoxjumpsoverthelazyollod'], ['de  zb  ap adew ncb da hhkiubneajdadahhkiubneajdahhkznksjbktfqilokranpdahwvukhhkz'], ['lm  hj  ix ilme vkj li ppsqcjvmirlilippsqcjvmirlippshvsarjsbnyqtwszivxlipedcsppsh']], [['fhellfomyfrieheeloo'], ['bdahhbkiubneadaahkk'], ['jlippjsqcjvmiliipss']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodhelazydoexyyzzzzzzzzzzzzzzzzzzet'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzdahwvuzkatuuvvvvvvvvvvvvvvvvvvap'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshlipedchsibccddddddddddddddddddix']], [['ohhellomyfrienheellod'], ['kddahhkiubneajdaahhkz'], ['sllippsqcjvmirliippsh']], [['iheheti'], ['edadape'], ['mlilixm']], [['helloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodlomyferienhellodtgf'], ['dahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzhkiubaneajdahhkzpcb'], ['lippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshpsqcjivmirlippshxkj']], [['hello heti    get a gf hellomyllo dd'], ['dahhk dape    cap w cb dahhkiuhhk zz'], ['lipps lixm    kix e kj lippsqcpps hh']], [['f'], ['b'], ['j']], [['eehhi    et a gf helloetmthelquickbrownfoxjumpsohverthelazydoyfrienhellodia'], ['aadde    ap w cb dahhkapipdahmqeygxnksjbktfqilokdranpdahwvuzkubneajdahhkzew'], ['iillm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwslzivxlipedchscjvmirlippshme']], [['heti    get a mgf hellomyfrienhellodhl'], ['dape    cap w icb dahhkiubneajdahhkzdh'], ['lixm    kix e qkj lippsqcjvmirlippshlp']], [['thequhelothequickbrownfoxjumpsgetovehrthelazydoyfrienhellodrownfoxjumpsoverthelazydo'], ['pdamqdahkpdamqeygxnksjbktfqilocapkradnpdahwvuzkubneajdahhkznksjbktfqilokranpdahwvuzk'], ['xliuylipsxliuymgofvsarjsbnyqtwkixszilvxlipedchscjvmirlippshvsarjsbnyqtwszivxlipedchs']], [['helolomyfrienhhelloetmthequickbrownfoxjumpsoverthelazydoyfrienhellodellorgf'], ['dahkhkiubneajddahhkapipdamqeygxnksjbktfqilokranpdahwvuzkubneajdahhkzahhkncb'], ['lipspsqcjvmirllippsixqxliuymgofvsarjsbnyqtwszivxlipedchscjvmirlippshippsvkj']], [['hellomyferienhelhabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelazydoiod'], ['dahhkiubaneajdahdwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahwvuzkekz'], ['lippsqcjivmirliplefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipedchsmsh']], [['heeoloo'], ['daakhkk'], ['liispss']], [['hellomyfrienhellodxjumpsoverthelazydo'], ['dahhkiubneajdahhkztfqilokranpdahwvuzk'], ['lippsqcjvmirlippshbnyqtwszivxlipedchs']], [['aickbrownfoxjhumpsoveletthelazydo'], ['weygxnksjbktfdqilokrahappdahwvuzk'], ['emgofvsarjsbnlyqtwszipixxlipedchs']], [['hhellomyfriengfrieonhellohellodoverthelazydoythequickbrownoxjumpsoverthelazydollomyfrietrgf'], ['ddahhkiubneajcbneakjdahhkdahhkzkranpdahwvuzkupdamqeygxnksjktfqilokranpdahwvuzkhhkiubneapncb'], ['llippsqcjvmirkjvmisrlippslippshszivxlipedchscxliuymgofvsarsbnyqtwszivxlipedchsppsqcjvmixvkj']], [['helbcdhhellyomyfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhukiubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['hi    et a gf helllomyfrienhellood'], ['de    ap w cb dahhhkiubneajdahhkkz'], ['lm    ix e kj lipppsqcjvmirlippssh']], [['hellomyfrienhellodrownfoxjumpsothequickbhetiverthelazydohi'], ['dahhkiubneajdahhkznksjbktfqilokpdamqeygxdaperanpdahwvuzkde'], ['lippsqcjvmirlippshvsarjsbnyqtwsxliuymgoflixmzivxlipedchslm']], [['hhelloetmyhi    et a gf hellomyfriendfrienhellodhelazydol'], ['ddahhkapiude    ap w cb dahhkiubneajzbneajdahhkzdahwvuzkh'], ['llippsixqclm    ix e kj lippsqcjvmirhjvmirlippshlipedchsp']], [['wlorld'], ['shknhz'], ['apsvph']], [['helolnhello dd'], ['dahkhjdahhk zz'], ['lipsprlipps hh']], [['ythbequickbrownfhi    et a gf helbcd&^%lomyfriendoxjumpsoverthelazydo'], ['updxamqeygxnksjbde    ap w cb dahxyz&^%hkiubneajzktfqilokranpdahwvuzk'], ['cxlfiuymgofvsarjlm    ix e kj lipfgh&^%psqcjvmirhsbnyqtwszivxlipedchs']], [['hellomdyfriendoxjumpsojverthelazydo'], ['dahhkizubneajzktfqilokfranpdahwvuzk'], ['lippsqhcjvmirhsbnyqtwsnzivxlipedchs']], [['helloetmtheqoxjumpsoverthelazydoyfrienhellod'], ['dahhkapipdamktfqilokranpdahwvuzkubneajdahhkz'], ['lippsixqxliusbnyqtwszivxlipedchscjvmirlippsh']], [['helbcdhhellyom&yfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhuki&ubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsq&cjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['helbcdhhellyofmyfrienhellod&^%lomyfriendoxjumpsovertlhelazydo&cd&d^'], ['dahxyzddahhukbiubneajdahhkz&^%hkiubneajzktfqilokranphdahwvuzk&yz&z^'], ['lipfghllippcsjqcjvmirlippsh&^%psqcjvmirhsbnyqtwszivxplipedchs&gh&h^']], [['llomyfrienhehellomyfrienhellooxjumpsoverthelazyollod'], ['hhkiubneajdadahhkiubneajdahhkktfqilokranpdahwvukhhkz'], ['ppsqcjvmirlilippsqcjvmirlippssbnyqtwszivxlipedcsppsh']], [['yzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthi'], ['uvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpde'], ['cdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlm']], [['helolnhelnlo'], ['dahkhjdahjhk'], ['lipsprliprps']], [['wxxyyworld'], ['sttuusknhz'], ['abbccasvph']], [['bcohhellomyfhi'], ['xykddahhkiubde'], ['fgsllippsqcjlm']], [['heloethequickbrownfoxjumpsgmetovehrthelazydo'], ['dahkapdamqeygxnksjbktfqilociapkradnpdahwvuzk'], ['lipsixliuymgofvsarjsbnyqtwkqixszilvxlipedchs']], [['yzhzzzzzzzzzzzzzzeyheelzzzzzzzzzzz'], ['uvdvvvvvvvvvvvvvvaudaahvvvvvvvvvvv'], ['cdlddddddddddddddicliipddddddddddd']], [['hi    et a gf helloetmthelquickbrownfoxjumpsoverthnelazydoyfrienhellod'], ['de    ap w cb dahhkapipdahmqeygxnksjbktfqilokranpdjahwvuzkubneajdahhkz'], ['lm    ix e kj lippsixqxlipuymgofvsarjsbnyqtwszivxlripedchscjvmirlippsh']], [['helloetmpsoverthelazydoyfrienhellodfhelllod'], ['dahhkapilokranpdahwvuzkubneajdahhkzbdahhhkz'], ['lippsixqtwszivxlipedchscjvmirlippshjlipppsh']], [['hellll'], ['dahhhh'], ['lipppp']], [['helhlelthi'], ['dahdhahpde'], ['liplpipxlm']], [['ohhellomyfrieod'], ['kddahhkiubneakz'], ['sllippsqcjvmish']], [['helothelbcd&^%lomyfriendoxhihhelloheqolod'], ['dahkpdahxyz&^%hkiubneajzktdeddahhkdamkhkz'], ['lipsxlipfgh&^%psqcjvmirhsblmllippsliuspsh']], [['ohhelllomyfriend'], ['kddahhhkiubneajz'], ['sllipppsqcjvmirh']], [['hellhi'], ['dahhde'], ['lipplm']], [['thelothequickbrownfonxjumpsgetoverthelazydo'], ['pdahkpdamqeygxnksjbkjtfqilocapkranpdahwvuzk'], ['xlipsxliuymgofvsarjsrbnyqtwkixszivxlipedchs']], [['hhhellyomyfrienhellodl'], ['dddahhukiubneajdahhkzh'], ['lllippcsqcjvmirlippshp']], [['ohhelolomyfrienhellodgf'], ['kddahkhkiubneajdahhkzcb'], ['sllipspsqcjvmirlippshkj']], [['hhellomyfriengfrieonhelheti    get a gf hellomyfrieonhello dlohellod'], ['ddahhkiubneajcbneakjdahdape    cap w cb dahhkiubneakjdahhk zhkdahhkz'], ['llippsqcjvmirkjvmisrliplixm    kix e kj lippsqcjvmisrlipps hpslippsh']], [['hhelyfrienhellod'], ['ddahubneajdahhkz'], ['llipcjvmirlippsh']], [['b&cc^'], ['x&yy^'], ['f&gg^']], [['heti    get a gfrieonhello helothequickbrownfoxumpsovekrthelazydodehel'], ['dape    cap w cbneakjdahhk dahkpdamqeygxnksjbktqilokragnpdahwvuzkzadah'], ['lixm    kix e kjvmisrlipps lipsxliuymgofvsarjsbyqtwsziovxlipedchshilip']], [['hello helowhellomyfrrienhelhb&cd&^lodorld'], ['dahhk dahksdahhkiubnneajdahdx&yz&^hkzknhz'], ['lipps lipsalippsqcjvvmirliplf&gh&^pshsvph']], [['bchllomyfhi'], ['xydhhkiubde'], ['fglppsqcjlm']], [['hhellomyfrienhellodehi'], ['ddahhkiubneajdahhkzade'], ['llippsqcjvmirlippshilm']], [['helothequickbrownfoxumpsovekrthelazydodehel'], ['dahkpdamqeygxnksjbktqilokragnpdahwvuzkzadah'], ['lipsxliuymgofvsarjsbyqtwsziovxlipedchshilip']], [['gehelloetmpsoverthelazydoyfrienhellodfhelllod'], ['cadahhkapilokranpdahwvuzkubneajdahhkzbdahhhkz'], ['kilippsixqtwszivxlipedchscjvmirlippshjlipppsh']], [['hellomyfrienhelleodrownfoxjumpabcdefghijklmnopqrstuvwxyzythequickbrownfoxjumhello'], ['dahhkiubneajdahhakznksjbktfqilwxyzabcdefghijklmnopqrstuvupdamqeygxnksjbktfqidahhk'], ['lippsqcjvmirlippishvsarjsbnyqtefghijklmnopqrstuvwxyzabcdcxliuymgofvsarjsbnyqlipps']], [['heti    get a gfrieonhello helothequicikbrownfoxumpsovekrthelazydodehel'], ['dape    cap w cbneakjdahhk dahkpdamqeyegxnksjbktqilokragnpdahwvuzkzadah'], ['lixm    kix e kjvmisrlipps lipsxliuymgmofvsarjsbyqtwsziovxlipedchshilip']], [['hod'], ['dkz'], ['lsh']], [['hhelloehellomyfrieonhelllotmyhi    et a gf hellomyfriendfrienhellodhelazydol'], ['ddahhkadahhkiubneakjdahhhkpiude    ap w cb dahhkiubneajzbneajdahhkzdahwvuzkh'], ['llippsilippsqcjvmisrlipppsxqclm    ix e kj lippsqcjvmirhjvmirlippshlipedchsp']], [['hhellomyfriengfrieonhelheti'], ['ddahhkiubneajcbneakjdahdape'], ['llippsqcjvmirkjvmisrliplixm']], [['ehabcdefghijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthelcazydoit'], ['adwxyzabcdefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdahywvuzkep'], ['ilefghijklmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlipgedchsmx']], [['ehelloetyfrienhelloyzwxabcdefghcijklmnopqrstuvwxyzythequickbrhownfoxjumpsoverthiet'], ['adahhkapubneajdahhkuvstwxyzabcdyefghijklmnopqrstuvupdamqeygxndksjbktfqilokranpdeap'], ['ilippsixcjvmirlippscdabefghijklgmnopqrstuvwxyzabcdcxliuymgofvlsarjsbnyqtwszivxlmix']], [['%bcd&^%'], ['%xyz&^%'], ['%fgh&^%']], [['thequickbromwnfoxjumpsoverthelazydog'], ['pdamqeygxnkisjbktfqilokranpdahwvuzkc'], ['xliuymgofvsqarjsbnyqtwszivxlipedchsk']], [['theqcuickbrownfoxjumpsoverthelazydog'], ['pdamyqeygxnksjbktfqilokranpdahwvuzkc'], ['xliugymgofvsarjsbnyqtwszivxlipedchsk']], [['hi    et a gf helbcd&^%lomyfriend'], ['de    ap w cb dahxyz&^%hkiubneajz'], ['lm    ix e kj lipfgh&^%psqcjvmirh']], [['yzzzzzzzzzzzzzzzz'], ['uvvvvvvvvvvvvvvvv'], ['cdddddddddddddddd']], [['hellogfa world'], ['dahhkcbw sknhz'], ['lippskje asvph']], [['hi    et a gf helbcd&^%lomy friend'], ['de    ap w cb dahxyz&^%hkiu bneajz'], ['lm    ix e kj lipfgh&^%psqc jvmirh']], [['bcdd&^%'], ['xyzz&^%'], ['fghh&^%']], [['%bcdhello&^%'], ['%xyzdahhk&^%'], ['%fghlipps&^%']], [['thequicerthelazydog'], ['pdamqeyanpdahwvuzkc'], ['xliuymgivxlipedchsk']], [['%bcdhelwxylo&^%'], ['%xyzdahstuhk&^%'], ['%fghlipabcps&^%']], [['ehello'], ['adahhk'], ['ilipps']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcddddddddddddddddddddddddddddddddd']], [['hellogfa worl d'], ['dahhkcbw sknh z'], ['lippskje asvp h']], [['hi    et a gf hellogmyfriend'], ['de    ap w cb dahhkciubneajz'], ['lm    ix e kj lippskqcjvmirh']], [['%bc^d&^%'], ['%xy^z&^%'], ['%fg^h&^%']], [['bc&^%'], ['xy&^%'], ['fg&^%']], [['abcdefghijklmnopqrstuvxyz'], ['wxyzabcdefghijklmnopqrtuv'], ['efghijklmnopqrstuvwxyzbcd']], [['thequicerthelazydoag'], ['pdamqeyanpdahwvuzkwc'], ['xliuymgivxlipedchsek']], [['thequicertthelazydog'], ['pdamqeyanppdahwvuzkc'], ['xliuymgivxxlipedchsk']], [['hellogfa'], ['dahhkcbw'], ['lippskje']], [['thequickbrthequicerthelazydogownfoxjumpsoverthelazydo'], ['pdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokranpdahwvuzk'], ['xliuymgofvxliuymgivxlipedchsksarjsbnyqtwszivxlipedchs']], [['bc&^%thequicerthelazydogbc&^%'], ['xy&^%pdamqeyanpdahwvuzkcxy&^%'], ['fg&^%xliuymgivxlipedchskfg&^%']], [['abcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyz'], ['wxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuv'], ['efghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcd']], [['thequickbrownfoxydo'], ['pdamqeygxnksjbktuzk'], ['xliuymgofvsarjsbchs']], [['thequicwkbrthequicerthelazydogownofoxjumpsoverthelazydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilokranpdahwvuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwszivxlipedchs']], [['thequickborownfoxydo'], ['pdamqeygxknksjbktuzk'], ['xliuymgofsvsarjsbchs']], [['world'], ['sknhz'], ['asvph']], [['abcdefghihjklmnopqrstuvxyz'], ['wxyzabcdedfghijklmnopqrtuv'], ['efghijklmlnopqrstuvwxyzbcd']], [['hi    ehellot a gf hellogmyfriend'], ['de    adahhkp w cb dahhkciubneajz'], ['lm    ilippsx e kj lippskqcjvmirh']], [['hi    et a gf helbcmd&^%lomyfriend'], ['de    ap w cb dahxyiz&^%hkiubneajz'], ['lm    ix e kj lipfgqh&^%psqcjvmirh']], [['%b^c^d&^%'], ['%x^y^z&^%'], ['%f^g^h&^%']], [['hellomyfriend'], ['dahhkiubneajz'], ['lippsqcjvmirh']], [['helbcd&^%lomy'], ['dahxyz&^%hkiu'], ['lipfgh&^%psqc']], [['thequickbromwnfoxjumpsovertheletazydog'], ['pdamqeygxnkisjbktfqilokranpdahapwvuzkc'], ['xliuymgofvsqarjsbnyqtwszivxlipixedchsk']], [['hellogmyfriend'], ['dahhkciubneajz'], ['lippskqcjvmirh']], [['thequicekbromwnfoxjumpsoverthelazydog'], ['pdamqeyagxnkisjbktfqilokranpdahwvuzkc'], ['xliuymgiofvsqarjsbnyqtwszivxlipedchsk']], [['yzz'], ['uvv'], ['cdd']], [['hi    ehellott a gf hellogmyfriend'], ['de    adahhkpp w cb dahhkciubneajz'], ['lm    ilippsxx e kj lippskqcjvmirh']], [['thkbrownfoxjumpsoverthelazydo'], ['pdgxnksjbktfqilokranpdahwvuzk'], ['xlofvsarjsbnyqtwszivxlipedchs']], [['thequickbrownfoxjumpsoverthelazydfo'], ['pdamqeygxnksjbktfqilokranpdahwvuzbk'], ['xliuymgofvsarjsbnyqtwszivxlipedchjs']], [['theqcuickbrownfoxjumpsoverthelazbydog'], ['pdamyqeygxnksjbktfqilokranpdahwvxuzkc'], ['xliugymgofvsarjsbnyqtwszivxlipedfchsk']], [['theqcuickabcdefghihjklmnopqrstuvxyzbrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghijklmnopqrtuvxnksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['helllogfa'], ['dahhhkcbw'], ['lipppskje']], [['thequickbrthequicerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymgivxlipedchsksarjsbnyqtwszipedchs']], [['bc&^%thequicerthelazydothkbrownfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnksjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvsarjsbnyqtwszivxlipedchs&^%']], [['bc&^hello%'], ['xy&^dahhk%'], ['fg&^lipps%']], [['ehellott'], ['adahhkpp'], ['ilippsxx']], [['thequickbromwnfoxjumpsoverdog'], ['pdamqeygxnkisjbktfqilokranzkc'], ['xliuymgofvsqarjsbnyqtwszivhsk']], [['hellogfa wetorld'], ['dahhkcbw sapknhz'], ['lippskje aixsvph']], [['wetorld'], ['sapknhz'], ['aixsvph']], [['hi    et a gf helbcdhi    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzde    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlm    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['hi    et a gf helbcmd&^%lo myfriend'], ['de    ap w cb dahxyiz&^%hk iubneajz'], ['lm    ix e kj lipfgqh&^%ps qcjvmirh']], [['thequicerthequicekbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgiofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['thequiuckbrownfoxjumpsoverthelazydo'], ['pdamqeqygxnksjbktfqilokranpdahwvuzk'], ['xliuymygofvsarjsbnyqtwszivxlipedchs']], [['bc&^%thequicerthelazydoghelbcmd&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchsklipfgqh&^%psfg&^%']], [['helbcd&^thequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfgh&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['bc&thequicertthelazydog^%'], ['xy&pdamqeyanppdahwvuzkc^%'], ['fg&xliuymgivxxlipedchsk^%']], [['theqthequicerthequicekbromwnfoxjumpsoverthelazydogthelazydogdog'], ['pdampdamqeyanpdamqeyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkczkc'], ['xliuxliuymgivxliuymgiofvsqarjsbnyqtwszivxlipedchskxlipedchskhsk']], [['hi    et  a gf helbcmld&^%lo myfriend'], ['de    ap  w cb dahxyihz&^%hk iubneajz'], ['lm    ix  e kj lipfgqph&^%ps qcjvmirh']], [['afbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyz'], ['wbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuv'], ['ejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcd']], [['bc&^%thequicerthelazydoghelbcmd&&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchsklipfgqh&&^%psfg&^%']], [['ehelloyzz'], ['adahhkuvv'], ['ilippscdd']], [['hi r   et a gf helbcmd&^%lomyfriend'], ['de n   ap w cb dahxyiz&^%hkiubneajz'], ['lm v   ix e kj lipfgqh&^%psqcjvmirh']], [['gf%b^c^d&^%'], ['cb%x^y^z&^%'], ['kj%f^g^h&^%']], [['thequtickborownfoxydo'], ['pdamqpeygxknksjbktuzk'], ['xliuyxmgofsvsarjsbchs']], [['thequicerthequicezkbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyavgxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgidofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['bc&^%thequicerthelazydohighelbcmd&^%lobc&^%'], ['xy&^%pdamqeyanpdahwvuzkdecdahxyiz&^%hkxy&^%'], ['fg&^%xliuymgivxlipedchslmklipfgqh&^%psfg&^%']], [['hellogmythequicertthelazydogfriend'], ['dahhkciupdamqeyanppdahwvuzkcbneajz'], ['lippskqcxliuymgivxxlipedchskjvmirh']], [['ello'], ['ahhk'], ['ipps']], [['hellogfa wethorld'], ['dahhkcbw sapdknhz'], ['lippskje aixlsvph']], [['bcello&^%'], ['xyahhk&^%'], ['fgipps&^%']], [['hellogmyfriend&^%lomyfriend'], ['dahhkciubneajz&^%hkiubneajz'], ['lippskqcjvmirh&^%psqcjvmirh']], [['yzyz'], ['uvuv'], ['cdcd']], [['helbcy'], ['dahxyu'], ['lipfgc']], [['hellogmyfriend&^%lomyfriendgf'], ['dahhkciubneajz&^%hkiubneajzcb'], ['lippskqcjvmirh&^%psqcjvmirhkj']], [['afbcdefghijklhellogfa'], ['wbxyzabcdefghdahhkcbw'], ['ejfghijklmnoplippskje']], [['ehellot'], ['adahhkp'], ['ilippsx']], [['theqkbrownfoxydo'], ['pdamgxnksjbktuzk'], ['xliuofvsarjsbchs']], [['worl'], ['sknh'], ['asvp']], [['thequickbrownfoxbcdd&^%ydo'], ['pdamqeygxnksjbktxyzz&^%uzk'], ['xliuymgofvsarjsbfghh&^%chs']], [['hi    et a gf helbcdhibc&^%    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzdexy&^%    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlmfg&^%    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['worlwxyyd'], ['sknhstuuz'], ['asvpabcch']], [['yzzz'], ['uvvv'], ['cddd']], [['ehe'], ['ada'], ['ili']], [['helbcmd&^%lomyfriend'], ['dahxyiz&^%hkiubneajz'], ['lipfgqh&^%psqcjvmirh']], [['hi    et a gf hellogmyfiend'], ['de    ap w cb dahhkciubeajz'], ['lm    ix e kj lippskqcjmirh']], [['hellogfaello'], ['dahhkcbwahhk'], ['lippskjeipps']], [['glhello'], ['chdahhk'], ['kplipps']], [['hellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfriendfriend'], ['dahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmirhjvmirh']], [['theqcuickabcdefghihjklmnoownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghijkksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqrssarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddddddddddddddddddddddddddddddd']], [['heleloo'], ['dahahkk'], ['lipipss']], [['hellogfa worwethorld'], ['dahhkcbw sknsapdknhz'], ['lippskje asvaixlsvph']], [['%bcthkbrownfoxjumpsoverthelazydod&^%'], ['%xypdgxnksjbktfqilokranpdahwvuzkz&^%'], ['%fgxlofvsarjsbnyqtwszivxlipedchsh&^%']], [['%bcdhelwxylo&&^%'], ['%xyzdahstuhk&&^%'], ['%fghlipabcps&&^%']], [['eheellot'], ['adaahhkp'], ['iliippsx']], [['helllo '], ['dahhhk '], ['lippps ']], [['hi    eiend'], ['de    aeajz'], ['lm    imirh']], [['hi    et a gf helbc%bc^d&^%d&^%lomy friend'], ['de    ap w cb dahxy%xy^z&^%z&^%hkiu bneajz'], ['lm    ix e kj lipfg%fg^h&^%h&^%psqc jvmirh']], [['ywxy'], ['ustu'], ['cabc']], [['hwellogfa wethorld'], ['dsahhkcbw sapdknhz'], ['laippskje aixlsvph']], [['helbcmd&^%lomyfiend'], ['dahxyiz&^%hkiubeajz'], ['lipfgqh&^%psqcjmirh']], [['helbcdworlwxyyd&^thequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyzsknhstuuz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfghasvpabcch&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['helllo'], ['dahhhk'], ['lippps']], [['woworwethorldrlwxyyd'], ['sksknsapdknhznhstuuz'], ['asasvaixlsvphvpabcch']], [['thequiceurtthelazydog'], ['pdamqeyaqnppdahwvuzkc'], ['xliuymgiyvxxlipedchsk']], [['hi    et  a g^f helbcmld&^%lo myfriend'], ['de    ap  w c^b dahxyihz&^%hk iubneajz'], ['lm    ix  e k^j lipfgqph&^%ps qcjvmirh']], [['hhellogmythequicertthelazydogfriendelbcmd&^%lomyfiend'], ['ddahhkciupdamqeyanppdahwvuzkcbneajzahxyiz&^%hkiubeajz'], ['llippskqcxliuymgivxxlipedchskjvmirhipfgqh&^%psqcjmirh']], [['hellomyfrienduvxyz'], ['dahhkiubneajzqrtuv'], ['lippsqcjvmirhyzbcd']], [['thequicerthequicezkbroomwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqeyavgxnkkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuymgidofvssqarjsbnyqtwszivxlipedchskxlipedchsk']], [['fgf'], ['bcb'], ['jkj']], [['yzyzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvv'], ['cdcdddddddddddd']], [['helbcdworlwxyyd&^thequiuckbrownfoxjumpsoverthelazydothequickbrownfoxjumpsoverthelazydo%lomy'], ['dahxyzsknhstuuz&^pdamqeqygxnksjbktfqilokranpdahwvuzkpdamqeygxnksjbktfqilokranpdahwvuzk%hkiu'], ['lipfghasvpabcch&^xliuymygofvsarjsbnyqtwszivxlipedchsxliuymgofvsarjsbnyqtwszivxlipedchs%psqc']], [['theqeutickborownfoxydo'], ['pdamaqpeygxknksjbktuzk'], ['xliuiyxmgofsvsarjsbchs']], [['thequickbrownfoxjumpsoverthelazyd'], ['pdamqeygxnksjbktfqilokranpdahwvuz'], ['xliuymgofvsarjsbnyqtwszivxlipedch']], [['bc&^%thequicerthelazydothkbroswnfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnkosjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvswarjsbnyqtwszivxlipedchs&^%']], [['woworwethorlldrlwxd'], ['sksknsapdknhhznhstz'], ['asasvaixlsvpphvpabh']], [['%b^c^d&^d%'], ['%x^y^z&^z%'], ['%f^g^h&^h%']], [['gglhello'], ['cchdahhk'], ['kkplipps']], [['%bcdheolwxylo&&^%'], ['%xyzdakhstuhk&&^%'], ['%fghlispabcps&&^%']], [['thequicertthequickbrthequicerthelazydogownfoxjumpsovelazydohelazydoag'], ['pdamqeyanppdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokrahwvuzkdahwvuzkwc'], ['xliuymgivxxliuymgofvxliuymgivxlipedchsksarjsbnyqtwszipedchslipedchsek']], [['hi    et a gf helbcmhelbcmd&^%lomyfriendd&^%lo myfriend'], ['de    ap w cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubneajz'], ['lm    ix e kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjvmirh']], [['s'], ['o'], ['w']], [['bc&^%thequicerthela^zydoghelbcmd&&^%lobc&^%'], ['xy&^%pdamqeyanpdahw^vuzkcdahxyiz&&^%hkxy&^%'], ['fg&^%xliuymgivxlipe^dchsklipfgqh&&^%psfg&^%']], [['thequickborownfoxydfo'], ['pdamqeygxknksjbktuzbk'], ['xliuymgofsvsarjsbchjs']], [['%bcdhelwxyl%'], ['%xyzdahstuh%'], ['%fghlipabcp%']], [['thequickbromownfoxjumpsoverdog'], ['pdamqeygxnkiksjbktfqilokranzkc'], ['xliuymgofvsqsarjsbnyqtwszivhsk']], [['hellogmyfriend&^%lomyfrienehellott'], ['dahhkciubneajz&^%hkiubneajadahhkpp'], ['lippskqcjvmirh&^%psqcjvmirilippsxx']], [['helbcthequickbrownfoxbcdd&^%ydoy'], ['dahxypdamqeygxnksjbktxyzz&^%uzku'], ['lipfgxliuymgofvsarjsbfghh&^%chsc']], [['ggff'], ['ccbb'], ['kkjj']], [['hhillogfaello'], ['ddehhkcbwahhk'], ['llmppskjeipps']], [['thequicwkbrthequicerthelazydogownofoxjumpszydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilovuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwdchs']], [['worethorld'], ['sknapdknhz'], ['asvixlsvph']], [['thequiceurtazydog'], ['pdamqeyaqnpwvuzkc'], ['xliuymgiyvxedchsk']], [['helbcmd&^%lomyfriendxy'], ['dahxyiz&^%hkiubneajztu'], ['lipfgqh&^%psqcjvmirhbc']], [['helbcthequickbryzzoy'], ['dahxypdamqeygxnuvvku'], ['lipfgxliuymgofvcddsc']], [['hwellogfa wethorldd'], ['dsahhkcbw sapdknhzz'], ['laippskje aixlsvphh']], [['worwethorld'], ['sknsapdknhz'], ['asvaixlsvph']], [['o%bcdhelwxylo&^%'], ['k%xyzdahstuhk&^%'], ['s%fghlipabcps&^%']], [['eehello'], ['aadahhk'], ['iilipps']], [['thequicydog'], ['pdamqeyuzkc'], ['xliuymgchsk']], [['hi    et  a g^f hhelbcd&^%lomyelbcmld&^%lo myfriend'], ['de    ap  w c^b ddahxyz&^%hkiuahxyihz&^%hk iubneajz'], ['lm    ix  e k^j llipfgh&^%psqcipfgqph&^%ps qcjvmirh']], [['theqkbrowfnfoxydo'], ['pdamgxnksbjbktuzk'], ['xliuofvsajrjsbchs']], [['hi    et a gf helbcdhibc&^%    et a abcdefghihjklmnopqrstuvxyzllogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzdexy&^%    ap w wxyzabcdedfghijklmnopqrtuvhhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlmfg&^%    ix e efghijklmlnopqrstuvwxyzbcdppskqcjvmirh&^%psqcjvmirh']], [['hwellogfa'], ['dsahhkcbw'], ['laippskje']], [['hi r  et a gf helbcmd&^%lomyfriend'], ['de n  ap w cb dahxyiz&^%hkiubneajz'], ['lm v  ix e kj lipfgqh&^%psqcjvmirh']], [['abcdefghijklmnopqrstuhi    et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde    ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm    ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['thkbrownfoxjumpsoverth%bcdhelwxylo&^%elazydo'], ['pdgxnksjbktfqilokranpd%xyzdahstuhk&^%ahwvuzk'], ['xlofvsarjsbnyqtwszivxl%fghlipabcps&^%ipedchs']], [['bc&thequicerttheworwethorldlazydog^%'], ['xy&pdamqeyanppdasknsapdknhzhwvuzkc^%'], ['fg&xliuymgivxxliasvaixlsvphpedchsk^%']], [['wyorlwxyyd'], ['suknhstuuz'], ['acsvpabcch']], [['hi    et a gf helbcmhelbcmd&^%lomyfriendd&^%lo myfend'], ['de    ap w cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubajz'], ['lm    ix e kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjirh']], [['hhelbcd&^%lomyelbcmld&^%lo'], ['ddahxyz&^%hkiuahxyihz&^%hk'], ['llipfgh&^%psqcipfgqph&^%ps']], [['thequickbrownfoxjumpsovworwethorlderthelazyd'], ['pdamqeygxnksjbktfqilokrsknsapdknhzanpdahwvuz'], ['xliuymgofvsarjsbnyqtwszasvaixlsvphivxlipedch']], [['thequicwkbrthequicerthelazydogaownofoxjumpsoverthelazydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcwksjkbktfqilokranpdahwvuzk'], ['xliuymgaofvxliuymgivxlipedchskesarsjsbnyqtwszivxlipedchs']], [['%bdcthkbrownfoxjumpsoverthelazydod&^%'], ['%xzypdgxnksjbktfqilokranpdahwvuzkz&^%'], ['%fhgxlofvsarjsbnyqtwszivxlipedchsh&^%']], [['worlwxd'], ['sknhstz'], ['asvpabh']], [['herienduvxyz'], ['daneajzqrtuv'], ['livmirhyzbcd']], [['hi    et a gf hellogmyfriiend'], ['de    ap w cb dahhkciubneeajz'], ['lm    ix e kj lippskqcjvmmirh']], [['boc&^hello%'], ['xky&^dahhk%'], ['fsg&^lipps%']], [['abcdyzzefghijklmnopqrstuvxyz'], ['wxyzuvvabcdefghijklmnopqrtuv'], ['efghcddijklmnopqrstuvwxyzbcd']], [['yxwxy'], ['utstu'], ['cbabc']], [['yzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddlippsdddddddddddddddddddddddddddd']], [['ahwellogfa wethorldd'], ['wdsahhkcbw sapdknhzz'], ['elaippskje aixlsvphh']], [['hi    et a gf helbcmd&^%l o myfriend'], ['de    ap w cb dahxyiz&^%h k iubneajz'], ['lm    ix e kj lipfgqh&^%p s qcjvmirh']], [['hellogymyfriend&^%lomyfriendgf'], ['dahhkcuiubneajz&^%hkiubneajzcb'], ['lippskcqcjvmirh&^%psqcjvmirhkj']], [['hellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfririend'], ['dahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneneajz'], ['lippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmvmirh']], [['heflbcmyd&^%lomyfriend'], ['dabhxyiuz&^%hkiubneajz'], ['lijpfgqch&^%psqcjvmirh']], [['myfriendvwxyz'], ['iubneajzrstuv'], ['qcjvmirhzabcd']], [['theqcuickabcdefghihjklmehellotnfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghiadahhkpjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqilippsxrjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['thequickbrthequiceerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeyaanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymgiivxlipedchsksarjsbnyqtwszipedchs']], [['thequhelbcmld&^%loicerthelazy%doag'], ['pdamqdahxyihz&^%hkeyanpdahwvu%zkwc'], ['xliuylipfgqph&^%psmgivxlipedc%hsek']], [['%bcdhelloo&^%'], ['%xyzdahhkk&^%'], ['%fghlippss&^%']], [['hellogmyfrithequickbromwnfoxjumpsoverthelazydogend&^%lomhi'], ['dahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuzkcajz&^%hkide'], ['lippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedchskirh&^%psqlm']], [['afbcdefghijklhellogfa worl damnoyfrienduvxyz'], ['wbxyzabcdefghdahhkcbw sknh zwijkubneajzqrtuv'], ['ejfghijklmnoplippskje asvp heqrscjvmirhyzbcd']], [['%%bc^d&^%'], ['%%xy^z&^%'], ['%%fg^h&^%']], [['gfs'], ['cbo'], ['kjw']], [['hloglfa'], ['dhkchbw'], ['lpskpje']], [['thequicerpsoverthelazydogthelazydog'], ['pdamqeyanlokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivtwszivxlipedchskxlipedchsk']], [['gghelbcdworlwxyyd&^thequickbrownfoxjumpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuz&^pdamqeygxnksjbktfqilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabcch&^xliuymgofvsarjsbnyqtwszivxlipedchs%psqcplipps']], [['hellogmyfiend'], ['dahhkciubeajz'], ['lippskqcjmirh']], [['thequiutckbrownfoxjumpstoverthelazydo'], ['pdamqeqpygxnksjbktfqilopkranpdahwvuzk'], ['xliuymyxgofvsarjsbnyqtwxszivxlipedchs']], [['helelooywxy'], ['dahahkkustu'], ['lipipsscabc']], [['bc&thequicertthelazydg^%'], ['xy&pdamqeyanppdahwvuzc^%'], ['fg&xliuymgivxxlipedchk^%']], [['helbc%bc^d&^%d&^%lomy'], ['dahxy%xy^z&^%z&^%hkiu'], ['lipfg%fg^h&^%h&^%psqc']], [['hi    etabcdefghijklhellogfa  a g^f helbcmld'], ['de    apwxyzabcdefghdahhkcbw  w c^b dahxyihz'], ['lm    ixefghijklmnoplippskje  e k^j lipfgqph']], [['helllogfa wethorld'], ['dahhhkcbw sapdknhz'], ['lipppskje aixlsvph']], [['hellhi    et a gf helbcd&^%lomyfriendlogfa'], ['dahhde    ap w cb dahxyz&^%hkiubneajzhkcbw'], ['lipplm    ix e kj lipfgh&^%psqcjvmirhpskje']], [['abcdefghijklmnopqrstuhi    et  g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde    ap  c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm    ix  k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['hello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzd'], ['dahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvz'], ['lipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdh']], [['helbcmld&^%lo'], ['dahxyihz&^%hk'], ['lipfgqph&^%ps']], [['hellogmyfriend&^%lomyfriendgfboc&^hello%'], ['dahhkciubneajz&^%hkiubneajzcbxky&^dahhk%'], ['lippskqcjvmirh&^%psqcjvmirhkjfsg&^lipps%']], [['abcdyzzefghijklmnopqrsthi    ehellot a gnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp w cjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx e krhyzbcd']], [['helbcmld'], ['dahxyihz'], ['lipfgqph']], [['heriennduvxyz'], ['daneajjzqrtuv'], ['livmirrhyzbcd']], [['hellogmyfriend&^%lomhi    et a %lo myfriendfriend'], ['dahhkciubneajz&^%hkide    ap w %hk iubneajzbneajz'], ['lippskqcjvmirh&^%psqlm    ix e %ps qcjvmirhjvmirh']], [['yzzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cddcdddddddddddddddddddddddddddddddddd']], [['boc&hi    et  a g^f helbcmld&^%lo myfriend^heo%'], ['xky&de    ap  w c^b dahxyihz&^%hk iubneajz^dak%'], ['fsg&lm    ix  e k^j lipfgqph&^%ps qcjvmirh^lis%']], [['abcdyzzefghijklmnopqrsthi    ehellot agnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp wcjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx ekrhyzbcd']], [['thequickbromohwellogfa wethorldwnfoxjumpsoverdog'], ['pdamqeygxnkikdsahhkcbw sapdknhzsjbktfqilokranzkc'], ['xliuymgofvsqslaippskje aixlsvpharjsbnyqtwszivhsk']], [['hihihellogmyfriendellogmyfriiend'], ['dededahhkciubneajzahhkciubneeajz'], ['lmlmlippskqcjvmirhippskqcjvmmirh']], [['bdcd&^%'], ['xzyz&^%'], ['fhgh&^%']], [['thequickbrownfoxydhhillogfaelloo'], ['pdamqeygxnksjbktuzddehhkcbwahhkk'], ['xliuymgofvsarjsbchllmppskjeippss']], [['helbcdhibc&^%'], ['dahxyzdexy&^%'], ['lipfghlmfg&^%']], [['thequiutckbrownfoxjumpstovelazydo'], ['pdamqeqpygxnksjbktfqilopkrahwvuzk'], ['xliuymyxgofvsarjsbnyqtwxszipedchs']], [['bc&^%thequicerthelazydothkbroswnfoxjumpsovtheqkbrownfoxydoerthelazydo&^%'], ['xy&^%pdamqeyanpdahwvuzkpdgxnkosjbktfqilokrpdamgxnksjbktuzkanpdahwvuzk&^%'], ['fg&^%xliuymgivxlipedchsxlofvswarjsbnyqtwszxliuofvsarjsbchsivxlipedchs&^%']], [['theqcuickabcdefghinhjklmnopqrstuvxyzbrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdejdfghijklmnopqrtuvxnksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmrlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdcdddddddddddddddddddddddddddddddd']], [['herienduvxyhi    et a gf hellogmyfienddz'], ['daneajzqrtude    ap w cb dahhkciubeajzzv'], ['livmirhyzbclm    ix e kj lippskqcjmirhhd']], [['hi    et a gf heflbcmhelbcmd&^%lomyfriendd&^%lo cmyfend'], ['de    ap w cb dabhxyidahxyiz&^%hkiubneajzz&^%hk yiubajz'], ['lm    ix e kj lijpfgqlipfgqh&^%psqcjvmirhh&^%ps gqcjirh']], [['gghelbcdworlwxyyd&^thequickbrownfoxjuthequickbromownfoxjumpsoverdogmpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuz&^pdamqeygxnksjbktfqpdamqeygxnkiksjbktfqilokranzkcilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabcch&^xliuymgofvsarjsbnyxliuymgofvsqsarjsbnyqtwszivhskqtwszivxlipedchs%psqcplipps']], [['hellogmyfrithequiend&^%lomhi s   et a gf helbcmd&^%lo myfriendfriend'], ['dahhkciubnepdamqeajz&^%hkide o   ap w cb dahxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmxliuymirh&^%psqlm w   ix e kj lipfgqh&^%ps qcjvmirhjvmirh']], [['ywxytheqcuickbrownfoxjumpsoverthelazydog'], ['ustupdamyqeygxnksjbktfqilokranpdahwvuzkc'], ['cabcxliugymgofvsarjsbnyqtwszivxlipedchsk']], [['hellogfa wetoorld'], ['dahhkcbw sapkknhz'], ['lippskje aixssvph']], [['bcbcmd&^%lobc&^%'], ['xyxyiz&^%hkxy&^%'], ['fgfgqh&^%psfg&^%']], [['theqcuickabcdefghihjklmehellotnfoxjumpsoverthoelhellogmyfriendazydog'], ['pdamyqeygwxyzabcdedfghiadahhkpjbktfqilokranpdkahdahhkciubneajzwvuzkc'], ['xliugymgoefghijklmlnopqilippsxrjsbnyqtwszivxlsiplippskqcjvmirhedchsk']], [['abcdyzzefghijklmnopqrsthhelbcdhii    ehellot a gnduvxyz'], ['wxyzuvvabcdefghijklmnopddahxyzdee    adahhkp w cjzqrtuv'], ['efghcddijklmnopqrstuvwxllipfghlmm    ilippsx e krhyzbcd']], [['gnduvxyz%bcdhelwxyl%'], ['cjzqrtuv%xyzdahstuh%'], ['krhyzbcd%fghlipabcp%']], [['r'], ['n'], ['v']], [['hi    et a gf helbcd&^%lomy fiend'], ['de    ap w cb dahxyz&^%hkiu beajz'], ['lm    ix e kj lipfgh&^%psqc jmirh']], [['bc&thequicertthelazydhellog^%'], ['xy&pdamqeyanppdahwvuzdahhkc^%'], ['fg&xliuymgivxxlipedchlippsk^%']], [['ob%'], ['kx%'], ['sf%']], [['%%bc^d&hellogfa worwethorld^%'], ['%%xy^z&dahhkcbw sknsapdknhz^%'], ['%%fg^h&lippskje asvaixlsvph^%']], [['wxabcdefghijklmnopqrstuhi    et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['stwxyzabcdefghijklmnopqde    ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['abefghijklmnopqrstuvwxylm    ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['gfhello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzds'], ['cbdahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvzo'], ['kjlipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdhw']], [['hi    et a gftheqkbrowfnfoxydo helbcmhelbcmd&^%lomyfiriendd&^%lo myfrd'], ['de    ap w cbpdamgxnksbjbktuzk dahxyidahxyiz&^%hkiubeneajzz&^%hk iubnz'], ['lm    ix e kjxliuofvsajrjsbchs lipfgqlipfgqh&^%psqcjmvmirhh&^%ps qcjvh']], [['ehebc&^hello%'], ['adaxy&^dahhk%'], ['ilifg&^lipps%']], [['abcdyzzefghijklmnopqrsthi    ehellot ahellhi gnduvxyz'], ['wxyzuvvabcdefghijklmnopde    adahhkp wdahhde cjzqrtuv'], ['efghcddijklmnopqrstuvwxlm    ilippsx elipplm krhyzbcd']], [['hellogmyfienid'], ['dahhkciubeajez'], ['lippskqcjmirmh']], [['hhelelooywxy'], ['ddahahkkustu'], ['llipipsscabc']], [['hellthequiuckbrownfoxjumpsoverthelazydoaaogfa worl d'], ['dahhpdamqeqygxnksjbktfqilokranpdahwvuzkwwkcbw sknh z'], ['lippxliuymygofvsarjsbnyqtwszivxlipedchseeskje asvp h']], [['fgyzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzzf'], ['bcuvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvvb'], ['jkcdcdddddlippsddddddddddddddddddddddddddddj']], [['thequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfo'], ['pdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbk'], ['xliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjs']], [['hi    et a gf helbcdhi    et a gf helylogmyfriend&^%lomyfriend'], ['de    ap w cb dahxyzde    ap w cb dahuhkciubneajz&^%hkiubneajz'], ['lm    ix e kj lipfghlm    ix e kj lipcpskqcjvmirh&^%psqcjvmirh']], [['bcdd&^%%'], ['xyzz&^%%'], ['fghh&^%%']], [['%bob%cd&^%'], ['%xkx%yz&^%'], ['%fsf%gh&^%']], [['hi    et  ah gf helbcmld&^%lo myfriend'], ['de    ap  wd cb dahxyihz&^%hk iubneajz'], ['lm    ix  el kj lipfgqph&^%ps qcjvmirh']], [['hi r  et a gf helbcmd&^% lomyfriend'], ['de n  ap w cb dahxyiz&^% hkiubneajz'], ['lm v  ix e kj lipfgqh&^% psqcjvmirh']], [['bc&^%thequicerthelazydoghelbcmd&^%lobc&^yzyzzzzzhellozzzzzzzzzzzzzzzzzzzzzzzzzzzz%'], ['xy&^%pdamqeyanpdahwvuzkcdahxyiz&^%hkxy&^uvuvvvvvdahhkvvvvvvvvvvvvvvvvvvvvvvvvvvvv%'], ['fg&^%xliuymgivxlipedchsklipfgqh&^%psfg&^cdcdddddlippsdddddddddddddddddddddddddddd%']], [['hellogmyfrithequickbromwnfoxjumpsoverthelazylbcmd&^%lo myfriendfriend'], ['dahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuhxyiz&^%hk iubneajzbneajz'], ['lippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedcpfgqh&^%ps qcjvmirhjvmirh']], [['hi    ehellott a gf hellogmyfrielnd'], ['de    adahhkpp w cb dahhkciubneahjz'], ['lm    ilippsxx e kj lippskqcjvmiprh']], [['worlwxdgf%b^c^d&^%'], ['sknhstzcb%x^y^z&^%'], ['asvpabhkj%f^g^h&^%']], [['hhelelooywxys'], ['ddahahkkustuo'], ['llipipsscabcw']], [['booc&^hello%'], ['xkky&^dahhk%'], ['fssg&^lipps%']], [['hellogmyfriend&^%lomyfrithequickbrownfoxjumpsovworwethorlderthelazydf'], ['dahhkciubneajz&^%hkiubnepdamqeygxnksjbktfqilokrsknsapdknhzanpdahwvuzb'], ['lippskqcjvmirh&^%psqcjvmxliuymgofvsarjsbnyqtwszasvaixlsvphivxlipedchj']], [['bc&^%thequicertwethorldwnfoxjumpsoverdoghelazydogmd&&abc&^%'], ['xy&^%pdamqeyanpsapdknhzsjbktfqilokranzkcdahwvuzkciz&&wxy&^%'], ['fg&^%xliuymgivxaixlsvpharjsbnyqtwszivhsklipedchskqh&&efg&^%']], [['thequtickborobc&thequicertthelazydg^%wnfoxydo'], ['pdamqpeygxknkxy&pdamqeyanppdahwvuzc^%sjbktuzk'], ['xliuyxmgofsvsfg&xliuymgivxxlipedchk^%arjsbchs']], [['bc&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['xy&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['fg&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']], [['hellogmyfthequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfoiend'], ['dahhkciubpdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbkeajz'], ['lippskqcjxliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjsmirh']], [['thequicetazydog'], ['pdamqeyapwvuzkc'], ['xliuymgixedchsk']], [['hellogmyfrriend&^%lomyfriendgf'], ['dahhkciubnneajz&^%hkiubneajzcb'], ['lippskqcjvvmirh&^%psqcjvmirhkj']], [['woretaahorld'], ['sknapwwdknhz'], ['asvixeelsvph']], [['ld'], ['hz'], ['ph']], [['helelooywxyhi    eiend'], ['dahahkkustude    aeajz'], ['lipipsscabclm    imirh']], [['woretarahorld'], ['sknapwnwdknhz'], ['asvixevelsvph']], [['bcdd&^d%'], ['xyzz&^z%'], ['fghh&^h%']], [['gghelbcdworlwxyybrownfoxjumpsoverthelazydo%lomylhello'], ['ccdahxyzsknhstuuxnksjbktfqilokranpdahwvuzk%hkiuhdahhk'], ['kklipfghasvpabccfvsarjsbnyqtwszivxlipedchs%psqcplipps']], [['whellomyfrienduvxyhelbcthequickbrownfoxbcdd&^%ydoyrlwxyyd'], ['sdahhkiubneajzqrtudahxypdamqeygxnksjbktxyzz&^%uzkunhstuuz'], ['alippsqcjvmirhyzbclipfgxliuymgofvsarjsbfghh&^%chscvpabcch']], [['wethorldwnfoxjumpsoverdog'], ['sapdknhzsjbktfqilokranzkc'], ['aixlsvpharjsbnyqtwszivhsk']], [['etabcdefghijklhellogfa'], ['apwxyzabcdefghdahhkcbw'], ['ixefghijklmnoplippskje']], [['hi    et sa gf helbcdhi    et a gf hellogmyfriend&^%lomyfriend'], ['de    ap ow cb dahxyzde    ap w cb dahhkciubneajz&^%hkiubneajz'], ['lm    ix we kj lipfghlm    ix e kj lippskqcjvmirh&^%psqcjvmirh']], [['thequicwkbrthequicerthelazydogownofoxjumpszytdo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfqilovupzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnyqtwdcxhs']], [['theqcuickabcdefghihjklmno%bcdhethequieceurtthelazydogydog'], ['pdamyqeygwxyzabcdedfghijk%xyzdapdamqeayaqnppdahwvuzkcuzkc'], ['xliugymgoefghijklmlnopqrs%fghlixliuymigiyvxxlipedchskchsk']], [['ahellhi'], ['wdahhde'], ['elipplm']], [['hi    et a gf helleomyfriened'], ['de    ap w cb dahhakiubneajaz'], ['lm    ix e kj lippisqcjvmirih']], [['hi    et a g'], ['de    ap w c'], ['lm    ix e k']], [['helbcmd&^%l'], ['dahxyiz&^%h'], ['lipfgqh&^%p']], [['helbc%bc^d&^%d&^%lomworwethorld^%y'], ['dahxy%xy^z&^%z&^%hkisknsapdknhz^%u'], ['lipfg%fg^h&^%h&^%psqasvaixlsvph^%c']], [['rgfhello worlafbcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzds'], ['ncbdahhk sknhwbxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvzo'], ['vkjlipps asvpejfghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcdhw']], [['myfedamnopqrstrhind'], ['iubazwijklmnopndejz'], ['qcjiheqrstuvwxvlmrh']], [['abcdefghijklmnopqrstuvxyo%bcdhelwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyzdahstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghlipabcps&^%d']], [['hi    e g'], ['de    a c'], ['lm    i k']], [['ahelthequickbrownfoxydolhi'], ['wdahpdamqeygxnksjbktuzkhde'], ['elipxliuymgofvsarjsbchsplm']], [['thequicerthequcekbromwnfoxjumpsoverthelazydogthelazydog'], ['pdamqeyanpdamqyagxnkisjbktfqilokranpdahwvuzkcpdahwvuzkc'], ['xliuymgivxliuygiofvsqarjsbnyqtwszivxlipedchskxlipedchsk']], [['bc&^%thequicyxwxyeroswnfoxjumpsoverthelazydo&^%'], ['xy&^%pdamqeyutstuankosjbktfqilokranpdahwvuzk&^%'], ['fg&^%xliuymgcbabcivswarjsbnyqtwszivxlipedchs&^%']], [['bchi r  et a gf helbcmd&^% lomyfriend&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['xyde n  ap w cb dahxyiz&^% hkiubneajz&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['fglm v  ix e kj lipfgqh&^% psqcjvmirh&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']], [['worlafbcdefghijklhellogfa'], ['sknhwbxyzabcdefghdahhkcbw'], ['asvpejfghijklmnoplippskje']], [['ghellogmyfrithequickbromwnfoxjumpsoverthelazylbcmd&^%lofs'], ['cdahhkciubnepdamqeygxnkisjbktfqilokranpdahwvuhxyiz&^%hkbo'], ['klippskqcjvmxliuymgofvsqarjsbnyqtwszivxlipedcpfgqh&^%psjw']], [['heflbklmnopqrsthilomyfriend'], ['dabhxghijklmnopdehkiubneajz'], ['lijpfopqrstuvwxlmpsqcjvmirh']], [['abcdyzzefghijklmnopqrsthi    ehellot a gnd'], ['wxyzuvvabcdefghijklmnopde    adahhkp w cjz'], ['efghcddijklmnopqrstuvwxlm    ilippsx e krh']], [['heyzzzbcdhibc&^%'], ['dauvvvxyzdexy&^%'], ['licdddfghlmfg&^%']], [['yzyyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'], ['uvuuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'], ['cdccdddddddddddddddddddddddddddddddddd']], [['abcdefghijklmnopqrstuvxyo%bcdhelhellogfa wetorldwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyzdahdahhkcbw sapknhzstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghliplippskje aixsvphabcps&^%d']], [['%%bdc^d&^%'], ['%%xzy^z&^%'], ['%%fhg^h&^%']], [['helbcmlld'], ['dahxyihhz'], ['lipfgqpph']], [['myfrieendvwxyz'], ['iubneaajzrstuv'], ['qcjvmiirhzabcd']], [['bc&thequricertthelazydog^%'], ['xy&pdamqneyanppdahwvuzkc^%'], ['fg&xliuyvmgivxxlipedchsk^%']], [['bc&^%thequicehwellogfa wethorldhelazydogbc&^%'], ['xy&^%pdamqeyadsahhkcbw sapdknhzdahwvuzkcxy&^%'], ['fg&^%xliuymgilaippskje aixlsvphlipedchskfg&^%']], [['hi    et a gf helbcd&^%lomy yfriend'], ['de    ap w cb dahxyz&^%hkiu ubneajz'], ['lm    ix e kj lipfgh&^%psqc cjvmirh']], [['hi    et a gf helbcmd&^%lo myfrhellogmyfriend&^%lomhi    et a gf helbcmd&^%lo myfririendiend'], ['de    ap w cb dahxyiz&^%hk iubndahhkciubneajz&^%hkide    ap w cb dahxyiz&^%hk iubneneajzeajz'], ['lm    ix e kj lipfgqh&^%ps qcjvlippskqcjvmirh&^%psqlm    ix e kj lipfgqh&^%ps qcjvmvmirhmirh']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzmyfriend^heo%zzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvviubneajz^dak%vvvvv'], ['cdcdddddddddddddddddddddddddddqcjvmirh^lis%ddddd']], [['thehelbc%bc^d&^%d&^%lomyquicerpsoverthelazydogthelazydog'], ['pdadahxy%xy^z&^%z&^%hkiumqeyanlokranpdahwvuzkcpdahwvuzkc'], ['xlilipfg%fg^h&^%h&^%psqcuymgivtwszivxlipedchskxlipedchsk']], [['eeheabcdefghijklhellogfa worl damnopqrstrhi    et a gf hellomyfrienduvxyzo'], ['aadawxyzabcdefghdahhkcbw sknh zwijklmnopnde    ap w cb dahhkiubneajzqrtuvk'], ['iiliefghijklmnoplippskje asvp heqrstuvwxvlm    ix e kj lippsqcjvmirhyzbcds']], [['helylogmyfriend&^%lomyfriend'], ['dahuhkciubneajz&^%hkiubneajz'], ['lipcpskqcjvmirh&^%psqcjvmirh']], [['theqfkbrowfnfoxydo'], ['pdambgxnksbjbktuzk'], ['xliujofvsajrjsbchs']], [['eello'], ['aahhk'], ['iipps']], [['bc&threquicertthelazydhellog^%'], ['xy&pdnamqeyanppdahwvuzdahhkc^%'], ['fg&xlviuymgivxxlipedchlippsk^%']], [['hi    et a gf hiend'], ['de    ap w cb deajz'], ['lm    ix e kj lmirh']], [['hellond'], ['dahhkjz'], ['lippsrh']], [['hi    etg^f helbcmld'], ['de    apc^b dahxyihz'], ['lm    ixk^j lipfgqph']], [['yzzzzob%zzzzzzzzzzzzzzzzzzzzz'], ['uvvvvkx%vvvvvvvvvvvvvvvvvvvvv'], ['cddddsf%ddddddddddddddddddddd']], [['abcdefghijklmnopqrstuhi'], ['wxyzabcdefghijklmnopqde'], ['efghijklmnopqrstuvwxylm']], [['hi r   et a gf helbcmd&^%lomyfiend'], ['de n   ap w cb dahxyiz&^%hkiubeajz'], ['lm v   ix e kj lipfgqh&^%psqcjmirh']], [['hi r  et helelooa gf helbcmd&^%lomyfriend'], ['de n  ap dahahkkw cb dahxyiz&^%hkiubneajz'], ['lm v  ix lipipsse kj lipfgqh&^%psqcjvmirh']], [['hellomyfrienduvxyzo'], ['dahhkiubneajzqrtuvk'], ['lippsqcjvmirhyzbcds']], [['myhi    et a gf heflbcmhelbcmd&^%lomyfriendd&^%lo cmyfendfriendvwxyz'], ['iude    ap w cb dabhxyidahxyiz&^%hkiubneajzz&^%hk yiubajzbneajzrstuv'], ['qclm    ix e kj lijpfgqlipfgqh&^%psqcjvmirhh&^%ps gqcjirhjvmirhzabcd']], [['thequicwkbrthequicerthelazydogownofoxjheleloompszydo'], ['pdamqeysgxnpdamqeyanpdahwvuzkcksjkbktfdahahkkilovuzk'], ['xliuymgaofvxliuymgivxlipedchsksarsjsbnlipipssqtwdchs']], [['hielbecmd&^%loomyfriend'], ['deahxayiz&^%hkkiubneajz'], ['lmipfigqh&^%pssqcjvmirh']], [['orlwxyyd'], ['knhstuuz'], ['svpabcch']], [['hello oworrld'], ['dahhk ksknnhz'], ['lipps sasvvph']], [['ggfgf'], ['ccbcb'], ['kkjkj']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzhellogmyfriend&^%lomhizzzzzzzzzzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvdahhkciubneajz&^%hkidevvvvvvvvvvv'], ['cdcdddddddddddddddddddddddlippskqcjvmirh&^%psqlmddddddddddd']], [['gabcdefghijklmnopqrstuvxyfo%bcdhelhellogfagfgf'], ['cwxyzabcdefghijklmnopqrtubk%xyzdahdahhkcbwcbcb'], ['kefghijklmnopqrstuvwxyzbcjs%fghliplippskjekjkj']], [['gf%^b^c^d&^%'], ['cb%^x^y^z&^%'], ['kj%^f^g^h&^%']], [['thequhelbcmld&i^%loicerthelazy%doag'], ['pdamqdahxyihz&e^%hkeyanpdahwvu%zkwc'], ['xliuylipfgqph&m^%psmgivxlipedc%hsek']], [['hellogymyfriend&^%lomyfriendgthequickbrthequicerthelazydogownfoxjumpsoverthelazydof'], ['dahhkcuiubneajz&^%hkiubneajzcpdamqeygxnpdamqeyanpdahwvuzkcksjbktfqilokranpdahwvuzkb'], ['lippskcqcjvmirh&^%psqcjvmirhkxliuymgofvxliuymgivxlipedchsksarjsbnyqtwszivxlipedchsj']], [['abcdetuvxyz'], ['wxyzapqrtuv'], ['efghixyzbcd']], [['hhillogfaell%b^c^d&^d%o'], ['ddehhkcbwahh%x^y^z&^z%k'], ['llmppskjeipp%f^g^h&^h%s']], [['bc&^%uthequicertdhelazydohigheblbcmd&^%lobc&^%'], ['xy&^%qpdamqeyanpzdahwvuzkdecdaxhxyiz&^%hkxy&^%'], ['fg&^%yxliuymgivxhlipedchslmklifpfgqh&^%psfg&^%']], [['rworl'], ['nsknh'], ['vasvp']], [['hellogymyfriend&^%lomyfrriendgf'], ['dahhkcuiubneajz&^%hkiubnneajzcb'], ['lippskcqcjvmirh&^%psqcjvvmirhkj']], [['heflbcmhelbcmd&^%lomyfriendd&^%lo'], ['dabhxyidahxyiz&^%hkiubneajzz&^%hk'], ['lijpfgqlipfgqh&^%psqcjvmirhh&^%ps']], [['bb'], ['xx'], ['ff']], [['worlafbcdefghhelbcmd&^%lomyfriendijklhellogfa'], ['sknhwbxyzabcddahxyiz&^%hkiubneajzefghdahhkcbw'], ['asvpejfghijkllipfgqh&^%psqcjvmirhmnoplippskje']], [['athequicwkbrthequicerthelazydogaownofoxjumpsoverthelazydo'], ['wpdamqeysgxnpdamqeyanpdahwvuzkcwksjkbktfqilokranpdahwvuzk'], ['exliuymgaofvxliuymgivxlipedchskesarsjsbnyqtwszivxlipedchs']], [['ahellogfa'], ['wdahhkcbw'], ['elippskje']], [['hi    et aa gf helbcmhelbcmd&^%lomyfriendd&^%lo myfriend'], ['de    ap ww cb dahxyidahxyiz&^%hkiubneajzz&^%hk iubneajz'], ['lm    ix ee kj lipfgqlipfgqh&^%psqcjvmirhh&^%ps qcjvmirh']], [['worwethorld^%'], ['sknsapdknhz^%'], ['asvaixlsvph^%']], [['hhehi    etabcdefghijklhellogfa  a g^f helbcmldlelooywxys'], ['ddade    apwxyzabcdefghdahhkcbw  w c^b dahxyihzhahkkustuo'], ['llilm    ixefghijklmnoplippskje  e k^j lipfgqphpipsscabcw']], [['g^f'], ['c^b'], ['k^j']], [['abcdefghijklmnopqrstuhi     et  a g^fglhello helbcmld&^%lo myfriendvwxyz'], ['wxyzabcdefghijklmnopqde     ap  w c^bchdahhk dahxyihz&^%hk iubneajzrstuv'], ['efghijklmnopqrstuvwxylm     ix  e k^jkplipps lipfgqph&^%ps qcjvmirhzabcd']], [['thequickbrthequicqerthelazydogownfoxjumpsovelazydo'], ['pdamqeygxnpdamqeymanpdahwvuzkcksjbktfqilokrahwvuzk'], ['xliuymgofvxliuymguivxlipedchsksarjsbnyqtwszipedchs']], [['worlafbcdefghijklhellheyzzzbcdhibc&^%ogfa'], ['sknhwbxyzabcdefghdahhdauvvvxyzdexy&^%kcbw'], ['asvpejfghijklmnoplipplicdddfghlmfg&^%skje']], [['abcdyzzefghijklmnopqrsthi'], ['wxyzuvvabcdefghijklmnopde'], ['efghcddijklmnopqrstuvwxlm']], [['hi%%bc^d&hellogfa worwetbc&thequricertthelazydog^%horld^%'], ['de%%xy^z&dahhkcbw sknsapxy&pdamqneyanppdahwvuzkc^%dknhz^%'], ['lm%%fg^h&lippskje asvaixfg&xliuyvmgivxxlipedchsk^%lsvph^%']], [['o%bcdhe&^%'], ['k%xyzda&^%'], ['s%fghli&^%']], [['%bdcthkbrvownfoxjumpsoverthelazydod&^%'], ['%xzypdgxnrksjbktfqilokranpdahwvuzkz&^%'], ['%fhgxlofvzsarjsbnyqtwszivxlipedchsh&^%']], [['hmyfriendfyfriendelgflo'], ['diubneajzbubneajzahcbhk'], ['lqcjvmirhjcjvmirhipkjps']], [['thequhellogmyfthequickbeheofgyzyzzzzzhellozzzzezzzzzzzzzzzzzzzzzzzzzzzzfoiendrtazydog'], ['pdamqdahhkciubpdamqeygxadakbcuvuvvvvvdahhkvvvvavvvvvvvvvvvvvvvvvvvvvvvvbkeajznpwvuzkc'], ['xliuylippskqcjxliuymgofilisjkcdcdddddlippsddddiddddddddddddddddddddddddjsmirhvxedchsk']], [['theqcuickbrownfoxjumpsoverthbc&^%thequicerthela^zydoghelbcmd&&^%lobc&^%og'], ['pdamyqeygxnksjbktfqilokranpdxy&^%pdamqeyanpdahw^vuzkcdahxyiz&&^%hkxy&^%kc'], ['xliugymgofvsarjsbnyqtwszivxlfg&^%xliuymgivxlipe^dchsklipfgqh&&^%psfg&^%sk']], [['thequickbrownfoxjumpsovertheloazydfo'], ['pdamqeygxnksjbktfqilokranpdahkwvuzbk'], ['xliuymgofvsarjsbnyqtwszivxlipsedchjs']], [['yzzzz'], ['uvvvv'], ['cdddd']], [['bcddd&^%'], ['xyzzz&^%'], ['fghhh&^%']], [['worwetbc&thequricertthelazydog^%horld^%'], ['sknsapxy&pdamqneyanppdahwvuzkc^%dknhz^%'], ['asvaixfg&xliuyvmgivxxlipedchsk^%lsvph^%']], [['hellogfatoorld'], ['dahhkcbwpkknhz'], ['lippskjexssvph']], [['theqcuickbrownfoxjumheleloopsooverthelazbydog'], ['pdamyqeygxnksjbktfqidahahkklokkranpdahwvxuzkc'], ['xliugymgofvsarjsbnyqlipipsstwsszivxlipedfchsk']], [['hi    et a gf hethequickborownfoxydolbcd&^%lomyfriend'], ['de    ap w cb dapdamqeygxknksjbktuzkhxyz&^%hkiubneajz'], ['lm    ix e kj lixliuymgofsvsarjsbchspfgh&^%psqcjvmirh']], [['woworwethorlldrwlwxd'], ['sksknsapdknhhznshstz'], ['asasvaixlsvpphvapabh']], [['theqcrownfoxjumpsoverthelhellogmyfriendazydog'], ['pdamynksjbktfqilokranpdahdahhkciubneajzwvuzkc'], ['xliugvsarjsbnyqtwszivxliplippskqcjvmirhedchsk']], [['heflbklmnopqrsthilomyfrien'], ['dabhxghijklmnopdehkiubneaj'], ['lijpfopqrstuvwxlmpsqcjvmir']], [['hi    ehellot a gf helahelthequickbrownfoxydolhilogmyfriend'], ['de    adahhkp w cb dahwdahpdamqeygxnksjbktuzkhdehkciubneajz'], ['lm    ilippsx e kj lipelipxliuymgofvsarjsbchsplmpskqcjvmirh']], [['helbcml'], ['dahxyih'], ['lipfgqp']], [['hellogmyfriithequiend&^%lomhi'], ['dahhkciubneepdamqeajz&^%hkide'], ['lippskqcjvmmxliuymirh&^%psqlm']], [['helbc%bc^d&^%d&^%lommworwethorld^%y'], ['dahxy%xy^z&^%z&^%hkiisknsapdknhz^%u'], ['lipfg%fg^h&^%h&^%psqqasvaixlsvph^%c']], [['wxabcdefghijklmnopqrstuhi'], ['stwxyzabcdefghijklmnopqde'], ['abefghijklmnopqrstuvwxylm']], [['afbcdefghijklhellogfa xyz'], ['wbxyzabcdefghdahhkcbw tuv'], ['ejfghijklmnoplippskje bcd']], [['abcdefghijklhellogfa'], ['wxyzabcdefghdahhkcbw'], ['efghijklmnoplippskje']], [['hwelhellogfa wethorldlogfa wethorldd'], ['dsahdahhkcbw sapdknhzhkcbw sapdknhzz'], ['laiplippskje aixlsvphpskje aixlsvphh']], [['bc&^%thequicerth^elazydogbc&^%'], ['xy&^%pdamqeyanpd^ahwvuzkcxy&^%'], ['fg&^%xliuymgivxl^ipedchskfg&^%']], [['h ello oworrld'], ['d ahhk ksknnhz'], ['l ipps sasvvph']], [['ggherthelazydou%lomylhello'], ['ccdanpdahwvuzkq%hkiuhdahhk'], ['kklivxlipedchsy%psqcplipps']], [['%bcdhelwxyl&o&^%'], ['%xyzdahstuh&k&^%'], ['%fghlipabcp&s&^%']], [['yzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzztheqcuickabcdefghihjklmnopqrstuvxyzbrownfoxjumpsoverthelhellzz'], ['uvuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvpdamyqeygwxyzabcdedfghijklmnopqrtuvxnksjbktfqilokranpdahdahhvv'], ['cdcdddddddddddddddddddddddddddddxliugymgoefghijklmlnopqrstuvwxyzbcdfvsarjsbnyqtwszivxliplippdd']], [['abacdefghijklmnopqrstuvwxyz'], ['wxwyzabcdefghijklmnopqrstuv'], ['efeghijklmnopqrstuvwxyzabcd']], [['thequickbrownftheqcuickabcdefghihjklmno%bcdhethequieceurtthelazydogydogoxjumpsoverthelazyd'], ['pdamqeygxnksjbpdamyqeygwxyzabcdedfghijk%xyzdapdamqeayaqnppdahwvuzkcuzkcktfqilokranpdahwvuz'], ['xliuymgofvsarjxliugymgoefghijklmlnopqrs%fghlixliuymigiyvxxlipedchskchsksbnyqtwszivxlipedch']], [['thheflbcmhelbcmd&^%lomyfriendd&^%louiceurtazydog'], ['pddabhxyidahxyiz&^%hkiubneajzz&^%hkqeyaqnpwvuzkc'], ['xllijpfgqlipfgqh&^%psqcjvmirhh&^%psymgiyvxedchsk']], [['abcdefghijklmnopqrstuvxyo%bcdxhelwxylo&^%z'], ['wxyzabcdefghijklmnopqrtuk%xyztdahstuhk&^%v'], ['efghijklmnopqrstuvwxyzbcs%fghblipabcps&^%d']], [['hefmnopqrsthilomyfrien'], ['dabijklmnopdehkiubneaj'], ['lijqrstuvwxlmpsqcjvmir']], [['zyzzz'], ['vuvvv'], ['dcddd']], [['lomyfriend&thequicerthequiceurtthelazydogttheworwethorldlazydog^%'], ['hkiubneajz&pdamqeyanpdamqeyaqnppdahwvuzkcppdasknsapdknhzhwvuzkc^%'], ['psqcjvmirh&xliuymgivxliuymgiyvxxlipedchskxxliasvaixlsvphpedchsk^%']]]]"}
{"task_id": "HumanEval/90", "requirement": "from typing import List\n\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    return unique_sorted[1] if len(unique_sorted) > 1 else None", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]"], "outputs": "[[2], [2], [None], [None], [20], [None], [2], [None], [None], [-3]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5]], [[5, 1, 4, 3, 2]], [[]], [[1, 1]], [[10, 20, 30, 40]], [[5, 5, 5, 5]], [[2, 1]], [[1]], [[0, 0, 0, 0]], [[-1, -2, -3, -4]]]", "input_output_examples": "[[[[1, 2, 3, 4, 5]], [[5, 1, 4, 3, 2]], [[]], [[1, 1]]], [[2], [2], [None], [None]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/91", "requirement": "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    boredom_count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            boredom_count += 1\n    return boredom_count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    boredom_count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            boredom_count += 1\n    return boredom_count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    boredom_count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            boredom_count += 1\n    return boredom_count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0].lower() == 'i':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    boredom_count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            boredom_count += 1\n    return boredom_count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    boredom_count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            boredom_count += 1\n    return boredom_count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    boredom_count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            boredom_count += 1\n    return boredom_count"], "outputs": "[[0], [1], [1], [1], [20], [4], [2], [1], [1], [1], [1], [3], [0], [4], [2], [8], [3], [2], [2], [3]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Hello world'], ['The sky is blue. The sun is shining. I love this weather'], ['I am bored. This is fun!'], ['I think, therefore I am.'], ['I.I.I.I.I.I.I.I.I.I.I.I.I.I.I.I.I.I.I.I.'], ['I am happy. I am sad. I am excited. I am tired.'], ['This is a test. I wonder if it works? I hope so!'], ['I'], ['I.'], ['I?'], ['I!'], ['I am the walrus. I am the eggman. I am the walrus.'], ['No boredom here. Just a regular sentence.'], ['I am. I am not. I am. I am not.'], ['I am the one who knocks. I am the danger.'], ['I am. I am. I am. I am. I am. I am. I am. I am.'], ['I am the beginning. I am the end. I am the one who will always be.'], ['I am the alpha and the omega. I am the beginning and the end.'], ['I am the one who is bored. I am the one who is not bored.'], ['I am the one who is bored. I am the one who is not bored. I am the one who is bored.']]", "input_output_examples": "[[['Hello world'], ['The sky is blue. The sun is shining. I love this weather']], [[0], [1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 0.0, "repaired_passk": 0.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/92", "requirement": "def any_int(x: int, y: int, z: int) -> bool:\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def any_int(x: int, y: int, z: int) -> bool:\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "def any_int(x: int, y: int, z: int) -> bool:\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or y == x + z or z == x + y)", "def any_int(x: int, y: int, z: int) -> bool:\n    if not all((isinstance(n, int) for n in [x, y, z])):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "def any_int(x: int, y: int, z: int) -> bool:\n    if not all((isinstance(n, int) for n in (x, y, z))):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "def any_int(x: int, y: int, z: int) -> bool:\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not all((isinstance(i, int) for i in [x, y, z])):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "def any_int(x: int, y: int, z: int) -> bool:\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "def any_int(x: int, y: int, z: int) -> bool:\n    return x == y + z or y == x + z or z == x + y"], "outputs": "[[True], [False], [True], [False], [True], [True], [True], [False], [True], [True]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[5, 2, 7], [3, 2, 2], [3, -2, 1], [3.6, -2.2, 2], [0, 0, 0], [-1, -2, -3], [100, 50, 50], [1, 2, 3.5], [10, 20, 30], [-5, 5, 0]]", "input_output_examples": "[[[5, 2, 7], [3, 2, 2], [3, -2, 1], [3.6, -2.2, 2]], [[True], [False], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 0.6, "repaired_passk": 0.6, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/93", "requirement": "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char.swapcase())\n    return ''.join(encoded_message)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char.swapcase())\n    return ''.join(encoded_message)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char.swapcase())\n    return ''.join(encoded_message)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char.swapcase())\n    return ''.join(encoded_message)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char.swapcase())\n    return ''.join(encoded_message)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char.swapcase())\n    return ''.join(encoded_message)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char.swapcase())\n    return ''.join(encoded_message)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char.swapcase())\n    return ''.join(encoded_message)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char.swapcase())\n    return ''.join(encoded_message)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n    for char in message:\n        if char in vowels:\n            new_char = chr(ord(char) + 2) if char.lower() != 'y' else 'a' if char == 'y' else 'A'\n            if new_char.lower() not in 'abcdefghijklmnopqrstuvwxyz':\n                new_char = chr(ord(new_char) - 26)\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char.swapcase())\n    return ''.join(encoded_message)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    result = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            result.append(new_char)\n        else:\n            result.append(char.swapcase())\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char.swapcase())\n    return ''.join(encoded_message)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char.swapcase())\n    return ''.join(encoded_message)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char.swapcase())\n    return ''.join(encoded_message)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    result = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            result.append(new_char)\n        else:\n            result.append(char.swapcase())\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char.swapcase())\n    return ''.join(encoded_message)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char.swapcase())\n    return ''.join(encoded_message)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char.swapcase())\n    return ''.join(encoded_message)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char.swapcase())\n    return ''.join(encoded_message)"], "outputs": "[['TgST'], ['tHkS kS c MgSScGg'], ['hGllQ wQrld'], ['cGkQw'], ['BcDfGh'], ['123!@#'], [''], ['CcbBcCdDGgfFgGhHKkjJkKlLmMnNQqpPqQrRsStTWwvVwWxXyYzZ']]", "probability": 0.95, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[['test'], ['TgST'], ['TGST']], [['This is a message'], ['tHkS kS c MgSScGg'], ['tHKS KS C MGSSCGG']]]"}, {"programs_str": ["def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    result = []\n    for char in message:\n        if char in vowels:\n            new_char = chr(ord(char) + 2) if char.lower() != 'y' else 'a' if char == 'y' else 'A'\n            if new_char.lower() not in 'abcdefghijklmnopqrstuvwxyz':\n                new_char = chr(ord(new_char) - 26)\n            result.append(new_char.swapcase())\n        else:\n            result.append(char.swapcase())\n    return ''.join(result)"], "outputs": "[['TGST'], ['tHKS KS C MGSSCGG'], ['hgllq wqrld'], ['CgKqW'], ['BcDfGh'], ['123!@#'], [''], ['cCbBcCdDgGfFgGhHkKjJkKlLmMnNqQpPqQrRsStTwWvVwWxXyYzZ']]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[['test'], ['This is a message'], ['HELLO WORLD'], ['aEiOu'], ['bCdFgH'], ['123!@#'], [''], ['AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz']]", "input_output_examples": "[[['test'], ['This is a message']], [['TGST'], ['tHKS KS C MGSSCGG']]]", "weighted_test_consistency": 0.05, "at_least_one_align": true, "ambiguity": 0.618198478557978}, "repaired_clusters": null, "original_passk": 0.0, "repaired_passk": 0.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/94", "requirement": "from typing import List\n\n\ndef skjkasdkd(lst: List[int]) -> int:\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    max_prime = max(primes)\n    return sum((int(digit) for digit in str(max_prime)))", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum(map(int, str(largest_prime)))", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    max_prime = max(primes)\n    return sum(map(int, str(max_prime)))", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(digit) for digit in str(largest_prime)))", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    max_prime = max(primes)\n    return sum(map(int, str(max_prime)))", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(digit) for digit in str(largest_prime)))", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum(map(int, str(largest_prime)))", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    max_prime = max(primes)\n    return sum(map(int, str(max_prime)))", "from typing import List\nimport math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    max_prime = max(primes)\n    return sum((int(digit) for digit in str(max_prime)))", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    max_prime = max(primes)\n    return sum((int(digit) for digit in str(max_prime)))", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    max_prime = max(primes)\n    return sum(map(int, str(max_prime)))", "from typing import List\nimport math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(digit) for digit in str(largest_prime)))", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum(map(int, str(largest_prime)))", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    max_prime = max(primes)\n    return sum(map(int, str(max_prime)))", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum(map(int, str(largest_prime)))", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    max_prime = max(primes)\n    return sum(map(int, str(max_prime)))", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(digit) for digit in str(largest_prime)))", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(digit) for digit in str(largest_prime)))", "from typing import List\nimport math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    return sum(map(int, str(largest_prime))) if largest_prime != -1 else 0"], "outputs": "[[10], [25], [13], [11], [3], [7], [0], [0], [0], [2], [4], [0], [0], [25]]", "probability": 0.95, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    return sum(map(int, str(largest_prime)))"], "outputs": "[[10], [25], [13], [11], [3], [7], ['ValueError'], ['ValueError'], ['ValueError'], [2], [4], ['ValueError'], ['ValueError'], [25]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[[0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]], [[1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]], [[1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]], [[0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]], [[0, 81, 12, 3, 1, 21]], [[0, 8, 1, 2, 1, 7]], [[]], [[0, 0, 0, 0, 0]], [[1, 1, 1, 1, 1]], [[2, 2, 2, 2, 2]], [[3, 5, 7, 11, 13]], [[4, 6, 8, 9, 10]], [[100, 200, 300, 400, 500]], [[997, 991, 983, 977, 971]]]", "input_output_examples": "[[[[0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]], [[1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]], [[1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]], [[0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]], [[0, 81, 12, 3, 1, 21]], [[0, 8, 1, 2, 1, 7]]], [[10], [25], [13], [11], [3], [7]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.1431984785579781}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/95", "requirement": "from typing import Dict\n\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all((isinstance(key, str) and key.islower() for key in keys)):\n        return True\n    if all((isinstance(key, str) and key.isupper() for key in keys)):\n        return True\n    return False", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all((isinstance(key, str) and key == key.lower() for key in keys)):\n        return True\n    if all((isinstance(key, str) and key == key.upper() for key in keys)):\n        return True\n    return False", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all((isinstance(key, str) and key.islower() for key in keys)):\n        return True\n    if all((isinstance(key, str) and key.isupper() for key in keys)):\n        return True\n    return False", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all((isinstance(key, str) and key.islower() for key in keys)):\n        return True\n    if all((isinstance(key, str) and key.isupper() for key in keys)):\n        return True\n    return False", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all((isinstance(key, str) and key.islower() for key in keys)):\n        return True\n    if all((isinstance(key, str) and key.isupper() for key in keys)):\n        return True\n    return False", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all((isinstance(key, str) and key.islower() for key in keys)):\n        return True\n    if all((isinstance(key, str) and key.isupper() for key in keys)):\n        return True\n    return False", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all((isinstance(key, str) and key.islower() for key in keys)):\n        return True\n    if all((isinstance(key, str) and key.isupper() for key in keys)):\n        return True\n    return False", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all((isinstance(key, str) and key.islower() for key in keys)):\n        return True\n    if all((isinstance(key, str) and key.isupper() for key in keys)):\n        return True\n    return False", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all((isinstance(key, str) and key.islower() for key in keys)):\n        return True\n    if all((isinstance(key, str) and key.isupper() for key in keys)):\n        return True\n    return False", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all((isinstance(key, str) and key.islower() for key in keys)):\n        return True\n    if all((isinstance(key, str) and key.isupper() for key in keys)):\n        return True\n    return False", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all((isinstance(key, str) and key.islower() for key in keys)):\n        return True\n    if all((isinstance(key, str) and key.isupper() for key in keys)):\n        return True\n    return False", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all((isinstance(key, str) and key.islower() for key in keys)):\n        return True\n    if all((isinstance(key, str) and key.isupper() for key in keys)):\n        return True\n    return False", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all((isinstance(key, str) and key.islower() for key in keys)):\n        return True\n    if all((isinstance(key, str) and key.isupper() for key in keys)):\n        return True\n    return False", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all((isinstance(key, str) and key.islower() for key in keys)):\n        return True\n    if all((isinstance(key, str) and key.isupper() for key in keys)):\n        return True\n    return False", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if not all((isinstance(key, str) for key in keys)):\n        return False\n    if all((key.islower() for key in keys)):\n        return True\n    if all((key.isupper() for key in keys)):\n        return True\n    return False", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all((isinstance(key, str) and key.islower() for key in keys)):\n        return True\n    if all((isinstance(key, str) and key.isupper() for key in keys)):\n        return True\n    return False", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all((isinstance(key, str) and key.islower() for key in keys)):\n        return True\n    if all((isinstance(key, str) and key.isupper() for key in keys)):\n        return True\n    return False", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if not all((isinstance(key, str) for key in keys)):\n        return False\n    lower_case = all((key.islower() for key in keys))\n    upper_case = all((key.isupper() for key in keys))\n    return lower_case or upper_case", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all((isinstance(key, str) and key.islower() for key in keys)):\n        return True\n    if all((isinstance(key, str) and key.isupper() for key in keys)):\n        return True\n    return False", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all((isinstance(key, str) and key.islower() for key in keys)):\n        return True\n    if all((isinstance(key, str) and key.isupper() for key in keys)):\n        return True\n    return False"], "outputs": "[[True], [False], [False], [False], [True], [False], [True], [True], [False], [False]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[{'a': 'apple', 'b': 'banana'}], [{'a': 'apple', 'A': 'banana', 'B': 'banana'}], [{'a': 'apple', 8: 'banana'}], [{'Name': 'John', 'Age': '36', 'City': 'Houston'}], [{'STATE': 'NC', 'ZIP': '12345'}], [{}], [{'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}], [{'KEY1': 'value1', 'KEY2': 'value2', 'KEY3': 'value3'}], [{'Key1': 'value1', 'key2': 'value2', 'KEY3': 'value3'}], [{'key': 'value', 1: 'one'}]]", "input_output_examples": "[[[{'a': 'apple', 'b': 'banana'}], [{'a': 'apple', 'A': 'banana', 'B': 'banana'}], [{'a': 'apple', 8: 'banana'}], [{'Name': 'John', 'Age': '36', 'City': 'Houston'}], [{'STATE': 'NC', 'ZIP': '12345'}]], [[True], [False], [False], [False], [True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 0.8, "repaired_passk": 0.8, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/96", "requirement": "from typing import List\n\n\ndef count_up_to(n: int) -> List[int]:\n    \"\"\"Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes", "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes", "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes", "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes", "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"], "outputs": "[[[2, 3]], [[2, 3, 5, 7]], [[]], [[2, 3, 5, 7, 11, 13, 17, 19]], [[]], [[2, 3, 5, 7, 11, 13, 17]], [[]], [[2]], [[2, 3, 5]], [[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[5], [11], [0], [20], [1], [18], [2], [3], [7], [100]]", "input_output_examples": "[[[5], [11], [0], [20], [1], [18]], [[[2, 3]], [[2, 3, 5, 7]], [[]], [[2, 3, 5, 7, 11, 13, 17, 19]], [[]], [[2, 3, 5, 7, 11, 13, 17]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/97", "requirement": "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def multiply(a: int, b: int) -> int:\n    return a % 10 * (b % 10)", "def multiply(a: int, b: int) -> int:\n    return a % 10 * (b % 10)", "def multiply(a: int, b: int) -> int:\n    return a % 10 * (b % 10)", "def multiply(a: int, b: int) -> int:\n    return a % 10 * (b % 10)", "def multiply(a: int, b: int) -> int:\n    return a % 10 * (b % 10)", "def multiply(a: int, b: int) -> int:\n    return a % 10 * (b % 10)", "def multiply(a: int, b: int) -> int:\n    return a % 10 * (b % 10)", "def multiply(a: int, b: int) -> int:\n    return a % 10 * (b % 10)", "def multiply(a: int, b: int) -> int:\n    return a % 10 * (b % 10)", "def multiply(a: int, b: int) -> int:\n    return a % 10 * (b % 10)", "def multiply(a: int, b: int) -> int:\n    return a % 10 * (b % 10)", "def multiply(a: int, b: int) -> int:\n    return a % 10 * (b % 10)", "def multiply(a: int, b: int) -> int:\n    return a % 10 * (b % 10)", "def multiply(a: int, b: int) -> int:\n    return a % 10 * (b % 10)", "def multiply(a: int, b: int) -> int:\n    return a % 10 * (b % 10)", "def multiply(a: int, b: int) -> int:\n    return a % 10 * (b % 10)", "def multiply(a: int, b: int) -> int:\n    return a % 10 * (b % 10)", "def multiply(a: int, b: int) -> int:\n    return a % 10 * (b % 10)", "def multiply(a: int, b: int) -> int:\n    return a % 10 * (b % 10)"], "outputs": "[[16], [72], [0], [20], [0], [0], [81], [1], [42], [0]]", "probability": 0.95, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def multiply(a: int, b: int) -> int:\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    return unit_a * unit_b"], "outputs": "[[16], [72], [0], [20], [0], [0], [81], [81], [18], [0]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[148, 412], [19, 28], [2020, 1851], [14, -15], [0, 123], [123, 0], [9, 9], [-9, -9], [-123, 456], [100, 100]]", "input_output_examples": "[[[148, 412], [19, 28], [2020, 1851], [14, -15]], [[16], [72], [0], [20]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.1431984785579781}, "repaired_clusters": null, "original_passk": 0.0, "repaired_passk": 0.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/98", "requirement": "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i, char in enumerate(s) if i % 2 == 0 and char in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i, char in enumerate(s) if i % 2 == 0 and char in vowels))", "def count_upper(s: str) -> int:\n    return sum((1 for i, char in enumerate(s) if i % 2 == 0 and char in 'AEIOU'))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i, char in enumerate(s) if i % 2 == 0 and char in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i, char in enumerate(s) if i % 2 == 0 and char in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"], "outputs": "[[1], [0], [0], [3], [0], [5], [0], [0], [0], [0], [3], [0], [0], [0], [3]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['aBCdEf'], ['abcdefg'], ['dBBE'], ['AeIoU'], ['aEiOu'], ['ABCDEFGHIJKLMNOPQRSTUVWXYZ'], ['aBcDeFgHiJkLmNoPqRsTuVwXyZ'], [''], ['12345'], ['!@#$%^&*()'], ['AaAaAa'], ['BbBbBb'], ['CcCcCc'], ['DdDdDd'], ['EeEeEe']]", "input_output_examples": "[[['aBCdEf'], ['abcdefg'], ['dBBE']], [[1], [0], [0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/99", "requirement": "def closest_integer(value: str) -> int:\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero.\n    '''", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor = math.floor(num)\n    ceil = math.ceil(num)\n    if abs(num - floor) == abs(num - ceil):\n        return ceil if num > 0 else floor\n    return round(num)", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor = math.floor(num)\n    ceil = math.ceil(num)\n    if abs(num - floor) == abs(num - ceil):\n        return ceil if ceil > 0 else floor\n    else:\n        return round(num)", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor = math.floor(num)\n    ceil = math.ceil(num)\n    if abs(num - floor) == abs(num - ceil):\n        return ceil if num > 0 else floor\n    return round(num)", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor = math.floor(num)\n    ceil = math.ceil(num)\n    if abs(num - floor) == abs(num - ceil):\n        return ceil if num > 0 else floor\n    return round(num)", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor = math.floor(num)\n    ceil = math.ceil(num)\n    if abs(num - floor) < abs(num - ceil):\n        return floor\n    elif abs(num - floor) > abs(num - ceil):\n        return ceil\n    else:\n        return ceil if num > 0 else floor", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor = math.floor(num)\n    ceil = math.ceil(num)\n    if abs(num - floor) < abs(num - ceil):\n        return floor\n    elif abs(num - floor) > abs(num - ceil):\n        return ceil\n    else:\n        return ceil if ceil > 0 else floor", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor = math.floor(num)\n    ceil = math.ceil(num)\n    if abs(num - floor) < abs(num - ceil):\n        return floor\n    elif abs(num - floor) > abs(num - ceil):\n        return ceil\n    else:\n        return ceil if num > 0 else floor", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor = math.floor(num)\n    ceil = math.ceil(num)\n    if abs(num - floor) < abs(num - ceil):\n        return floor\n    elif abs(num - floor) > abs(num - ceil):\n        return ceil\n    else:\n        return ceil if ceil > 0 else floor", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor = math.floor(num)\n    ceil = math.ceil(num)\n    if abs(num - floor) < abs(num - ceil):\n        return floor\n    elif abs(num - floor) > abs(num - ceil):\n        return ceil\n    else:\n        return ceil if num > 0 else floor", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor = math.floor(num)\n    ceil = math.ceil(num)\n    if abs(num - floor) < abs(num - ceil):\n        return floor\n    elif abs(num - floor) > abs(num - ceil):\n        return ceil\n    else:\n        return ceil if ceil > 0 else floor", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor = math.floor(num)\n    ceil = math.ceil(num)\n    if abs(num - floor) < abs(num - ceil):\n        return floor\n    elif abs(num - floor) > abs(num - ceil):\n        return ceil\n    else:\n        return ceil if ceil > 0 else floor", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor = math.floor(num)\n    ceil = math.ceil(num)\n    if abs(num - floor) == abs(num - ceil):\n        return ceil if num > 0 else floor\n    return round(num)", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor = math.floor(num)\n    ceil = math.ceil(num)\n    if abs(num - floor) == abs(num - ceil):\n        return ceil if num > 0 else floor\n    return round(num)", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor = math.floor(num)\n    ceil = math.ceil(num)\n    if abs(num - floor) < abs(num - ceil):\n        return floor\n    elif abs(num - floor) > abs(num - ceil):\n        return ceil\n    else:\n        return ceil if ceil > 0 else floor", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor = math.floor(num)\n    ceil = math.ceil(num)\n    if abs(num - floor) < abs(num - ceil):\n        return floor\n    elif abs(num - floor) > abs(num - ceil):\n        return ceil\n    else:\n        return ceil if num > 0 else floor", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor = math.floor(num)\n    ceil = math.ceil(num)\n    if abs(num - floor) == abs(num - ceil):\n        return ceil if num > 0 else floor\n    else:\n        return round(num)", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor = math.floor(num)\n    ceil = math.ceil(num)\n    if abs(num - floor) < abs(num - ceil):\n        return floor\n    elif abs(num - floor) > abs(num - ceil):\n        return ceil\n    else:\n        return ceil if ceil > 0 else floor", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor = math.floor(num)\n    ceil = math.ceil(num)\n    if abs(num - floor) < abs(num - ceil):\n        return floor\n    elif abs(num - floor) > abs(num - ceil):\n        return ceil\n    else:\n        return ceil if num > 0 else floor", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor = math.floor(num)\n    ceil = math.ceil(num)\n    if abs(num - floor) == abs(num - ceil):\n        return ceil if num > 0 else floor\n    else:\n        return round(num)", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor = math.floor(num)\n    ceil = math.ceil(num)\n    if abs(num - floor) == abs(num - ceil):\n        return ceil if num > 0 else floor\n    return round(num)"], "outputs": "[[10], [15], [15], [-15], [0], [0], [0], [-1], [1], [1000], [-1000], [123], [-123], [1000000000], [-1000000000]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['10'], ['15.3'], ['14.5'], ['-14.5'], ['0'], ['0.4'], ['-0.4'], ['-0.5'], ['0.5'], ['999.999'], ['-999.999'], ['123.456'], ['-123.456'], ['1000000000.000000001'], ['-1000000000.000000001']]", "input_output_examples": "[[['10'], ['15.3'], ['14.5'], ['-14.5']], [[10], [15], [15], [-15]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/100", "requirement": "from typing import List\n\n\ndef make_a_pile(n: int) -> List[int]:\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"", "repaired_requirement": "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    \"\"\"\n    Given a positive integer n, generates a list representing the number of stones in each level of a pile with n levels.\n    The first level has n stones. Each subsequent level has:\n        - the next odd number of stones if the current level has an odd number of stones.\n        - the next even number of stones if the current level has an even number of stones.\n    \n    Args:\n        n (int): The number of levels in the pile. Must be a positive integer.\n    \n    Returns:\n        List[int]: A list where the i-th element represents the number of stones in the (i+1)-th level.\n    \n    Examples:\n        >>> make_a_pile(3)\n        [3, 5, 7]\n        >>> make_a_pile(4)\n        [4, 5, 7, 9]\n    \"\"\"", "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        current = current + 1 if current % 2 == 0 else current + 2\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile"], "outputs": "[[[3, 5, 7]], [[4, 5, 7, 9]], [[1]], [[10, 11, 13, 15, 17, 19, 21, 23, 25, 27]], [[]], [[]]]", "probability": 0.5, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 0:\n            current += 1\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 0:\n            current += 1\n        else:\n            current += 1\n    return pile"], "outputs": "[[[3, 4, 5]], [[4, 5, 6, 7]], [[1]], [[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], [[]], [[]]]", "probability": 0.1, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[3], [[3, 4, 5]], [[3, 5, 7]]]]"}, {"programs_str": ["from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 2\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 2\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 2\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 2\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 2\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 2\n    return pile"], "outputs": "[[[3, 5, 7]], [[4, 6, 8, 10]], [[1]], [[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]], [[]], [[]]]", "probability": 0.3, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = [n]\n    for i in range(1, n):\n        if pile[-1] % 2 == 1:\n            pile.append(pile[-1] + 2)\n        else:\n            pile.append(pile[-1] + 1)\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = [n]\n    current = n\n    for _ in range(1, n):\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n        pile.append(current)\n    return pile"], "outputs": "[[[3, 5, 7]], [[4, 5, 7, 9]], [[1]], [[10, 11, 13, 15, 17, 19, 21, 23, 25, 27]], [[0]], [[-5]]]", "probability": 0.1, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8427376486136672, "llm_generated_inputs": "[[3], [4], [1], [10], [0], [-5]]", "input_output_examples": "[[[3]], [[[3, 5, 7]]]]", "weighted_test_consistency": 0.9, "at_least_one_align": true, "ambiguity": 0.4713688243068336}, "repaired_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current_stones = n\n    for _ in range(n):\n        pile.append(current_stones)\n        if current_stones % 2 == 1:\n            current_stones += 2\n        else:\n            current_stones += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 0:\n            current += 1\n        else:\n            current += 2\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 0:\n            current += 1\n        else:\n            current += 2\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile"], "outputs": "[[[3, 5, 7]], [[4, 5, 7, 9]], [[1]], [[10, 11, 13, 15, 17, 19, 21, 23, 25, 27]], [[]], [[]]]", "probability": 0.95, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = [n]\n    for i in range(1, n):\n        if pile[-1] % 2 == 1:\n            pile.append(pile[-1] + 2)\n        else:\n            pile.append(pile[-1] + 1)\n    return pile"], "outputs": "[[[3, 5, 7]], [[4, 5, 7, 9]], [[1]], [[10, 11, 13, 15, 17, 19, 21, 23, 25, 27]], [[0]], [[-5]]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[3], [4], [1], [10], [0], [-5]]", "input_output_examples": "[[[3]], [[[3, 5, 7]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.1431984785579781}, "original_passk": 0.5, "repaired_passk": 0.0, "generated_programs": ["from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = [n]\n    for i in range(1, n):\n        if pile[i - 1] % 2 == 1:\n            pile.append(pile[i - 1] + 2)\n        else:\n            pile.append(pile[i - 1] + 1)\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 0:\n            current += 1\n        else:\n            current += 2\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 0:\n            current += 1\n        else:\n            current += 2\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile", "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 1\n    return pile"], "failed_inputs_outputs": "[[[[4], [[4, 5, 7, 9]], [[4, 6, 8, 10]]], [[6], [[6, 7, 9, 11, 13, 15]], [[6, 8, 10, 12, 14, 16]]], [[8], [[8, 9, 11, 13, 15, 17, 19, 21]], [[8, 10, 12, 14, 16, 18, 20, 22]]], [[2], [[2, 3]], [[2, 4]]], [[10], [[10, 11, 13, 15, 17, 19, 21, 23, 25, 27]], [[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]]], [[20], [[20, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57]], [[20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58]]], [[12], [[12, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33]], [[12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]]], [[14], [[14, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]], [[14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]]], [[16], [[16, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45]], [[16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46]]], [[24], [[24, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69]], [[24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70]]], [[22], [[22, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63]], [[22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64]]], [[4], [[4, 5, 7, 9]], [[4, 6, 8, 10]]], [[18], [[18, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51]], [[18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52]]], [[8], [[8, 9, 11, 13, 15, 17, 19, 21]], [[8, 10, 12, 14, 16, 18, 20, 22]]], [[6], [[6, 7, 9, 11, 13, 15]], [[6, 8, 10, 12, 14, 16]]]], [[[4], [[4, 5, 7, 9]], [[4, 6, 8, 10]]], [[6], [[6, 7, 9, 11, 13, 15]], [[6, 8, 10, 12, 14, 16]]], [[8], [[8, 9, 11, 13, 15, 17, 19, 21]], [[8, 10, 12, 14, 16, 18, 20, 22]]], [[2], [[2, 3]], [[2, 4]]], [[10], [[10, 11, 13, 15, 17, 19, 21, 23, 25, 27]], [[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]]], [[20], [[20, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57]], [[20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58]]], [[12], [[12, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33]], [[12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]]], [[14], [[14, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]], [[14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]]], [[16], [[16, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45]], [[16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46]]], [[24], [[24, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69]], [[24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70]]], [[22], [[22, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63]], [[22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64]]], [[4], [[4, 5, 7, 9]], [[4, 6, 8, 10]]], [[18], [[18, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51]], [[18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52]]], [[8], [[8, 9, 11, 13, 15, 17, 19, 21]], [[8, 10, 12, 14, 16, 18, 20, 22]]], [[6], [[6, 7, 9, 11, 13, 15]], [[6, 8, 10, 12, 14, 16]]]], [[[4], [[4, 5, 7, 9]], [[4, 6, 8, 10]]], [[6], [[6, 7, 9, 11, 13, 15]], [[6, 8, 10, 12, 14, 16]]], [[8], [[8, 9, 11, 13, 15, 17, 19, 21]], [[8, 10, 12, 14, 16, 18, 20, 22]]], [[2], [[2, 3]], [[2, 4]]], [[10], [[10, 11, 13, 15, 17, 19, 21, 23, 25, 27]], [[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]]], [[20], [[20, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57]], [[20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58]]], [[12], [[12, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33]], [[12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]]], [[14], [[14, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]], [[14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]]], [[16], [[16, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45]], [[16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46]]], [[24], [[24, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69]], [[24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70]]], [[22], [[22, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63]], [[22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64]]], [[4], [[4, 5, 7, 9]], [[4, 6, 8, 10]]], [[18], [[18, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51]], [[18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52]]], [[8], [[8, 9, 11, 13, 15, 17, 19, 21]], [[8, 10, 12, 14, 16, 18, 20, 22]]], [[6], [[6, 7, 9, 11, 13, 15]], [[6, 8, 10, 12, 14, 16]]]], [[[4], [[4, 5, 7, 9]], [[4, 6, 8, 10]]], [[6], [[6, 7, 9, 11, 13, 15]], [[6, 8, 10, 12, 14, 16]]], [[8], [[8, 9, 11, 13, 15, 17, 19, 21]], [[8, 10, 12, 14, 16, 18, 20, 22]]], [[2], [[2, 3]], [[2, 4]]], [[10], [[10, 11, 13, 15, 17, 19, 21, 23, 25, 27]], [[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]]], [[20], [[20, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57]], [[20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58]]], [[12], [[12, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33]], [[12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]]], [[14], [[14, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]], [[14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]]], [[16], [[16, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45]], [[16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46]]], [[24], [[24, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69]], [[24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70]]], [[22], [[22, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63]], [[22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64]]], [[4], [[4, 5, 7, 9]], [[4, 6, 8, 10]]], [[18], [[18, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51]], [[18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52]]], [[8], [[8, 9, 11, 13, 15, 17, 19, 21]], [[8, 10, 12, 14, 16, 18, 20, 22]]], [[6], [[6, 7, 9, 11, 13, 15]], [[6, 8, 10, 12, 14, 16]]]], [[[4], [[4, 5, 7, 9]], [[4, 6, 8, 10]]], [[6], [[6, 7, 9, 11, 13, 15]], [[6, 8, 10, 12, 14, 16]]], [[8], [[8, 9, 11, 13, 15, 17, 19, 21]], [[8, 10, 12, 14, 16, 18, 20, 22]]], [[2], [[2, 3]], [[2, 4]]], [[10], [[10, 11, 13, 15, 17, 19, 21, 23, 25, 27]], [[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]]], [[20], [[20, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57]], [[20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58]]], [[12], [[12, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33]], [[12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]]], [[14], [[14, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]], [[14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]]], [[16], [[16, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45]], [[16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46]]], [[24], [[24, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69]], [[24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70]]], [[22], [[22, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63]], [[22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64]]], [[4], [[4, 5, 7, 9]], [[4, 6, 8, 10]]], [[18], [[18, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51]], [[18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52]]], [[8], [[8, 9, 11, 13, 15, 17, 19, 21]], [[8, 10, 12, 14, 16, 18, 20, 22]]], [[6], [[6, 7, 9, 11, 13, 15]], [[6, 8, 10, 12, 14, 16]]]], [[[4], [[4, 5, 7, 9]], [[4, 6, 8, 10]]], [[6], [[6, 7, 9, 11, 13, 15]], [[6, 8, 10, 12, 14, 16]]], [[8], [[8, 9, 11, 13, 15, 17, 19, 21]], [[8, 10, 12, 14, 16, 18, 20, 22]]], [[2], [[2, 3]], [[2, 4]]], [[10], [[10, 11, 13, 15, 17, 19, 21, 23, 25, 27]], [[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]]], [[20], [[20, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57]], [[20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58]]], [[12], [[12, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33]], [[12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]]], [[14], [[14, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]], [[14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]]], [[16], [[16, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45]], [[16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46]]], [[24], [[24, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69]], [[24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70]]], [[22], [[22, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63]], [[22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64]]], [[4], [[4, 5, 7, 9]], [[4, 6, 8, 10]]], [[18], [[18, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51]], [[18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52]]], [[8], [[8, 9, 11, 13, 15, 17, 19, 21]], [[8, 10, 12, 14, 16, 18, 20, 22]]], [[6], [[6, 7, 9, 11, 13, 15]], [[6, 8, 10, 12, 14, 16]]]], [[[4], [[4, 5, 7, 9]], [[4, 6, 8, 10]]], [[6], [[6, 7, 9, 11, 13, 15]], [[6, 8, 10, 12, 14, 16]]], [[8], [[8, 9, 11, 13, 15, 17, 19, 21]], [[8, 10, 12, 14, 16, 18, 20, 22]]], [[2], [[2, 3]], [[2, 4]]], [[10], [[10, 11, 13, 15, 17, 19, 21, 23, 25, 27]], [[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]]], [[20], [[20, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57]], [[20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58]]], [[12], [[12, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33]], [[12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]]], [[14], [[14, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]], [[14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]]], [[16], [[16, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45]], [[16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46]]], [[24], [[24, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69]], [[24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70]]], [[22], [[22, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63]], [[22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64]]], [[4], [[4, 5, 7, 9]], [[4, 6, 8, 10]]], [[18], [[18, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51]], [[18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52]]], [[8], [[8, 9, 11, 13, 15, 17, 19, 21]], [[8, 10, 12, 14, 16, 18, 20, 22]]], [[6], [[6, 7, 9, 11, 13, 15]], [[6, 8, 10, 12, 14, 16]]]], [[[4], [[4, 5, 7, 9]], [[4, 6, 8, 10]]], [[6], [[6, 7, 9, 11, 13, 15]], [[6, 8, 10, 12, 14, 16]]], [[8], [[8, 9, 11, 13, 15, 17, 19, 21]], [[8, 10, 12, 14, 16, 18, 20, 22]]], [[2], [[2, 3]], [[2, 4]]], [[10], [[10, 11, 13, 15, 17, 19, 21, 23, 25, 27]], [[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]]], [[20], [[20, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57]], [[20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58]]], [[12], [[12, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33]], [[12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]]], [[14], [[14, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]], [[14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]]], [[16], [[16, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45]], [[16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46]]], [[24], [[24, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69]], [[24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70]]], [[22], [[22, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63]], [[22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64]]], [[4], [[4, 5, 7, 9]], [[4, 6, 8, 10]]], [[18], [[18, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51]], [[18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52]]], [[8], [[8, 9, 11, 13, 15, 17, 19, 21]], [[8, 10, 12, 14, 16, 18, 20, 22]]], [[6], [[6, 7, 9, 11, 13, 15]], [[6, 8, 10, 12, 14, 16]]]], [[[4], [[4, 5, 7, 9]], [[4, 6, 8, 10]]], [[6], [[6, 7, 9, 11, 13, 15]], [[6, 8, 10, 12, 14, 16]]], [[8], [[8, 9, 11, 13, 15, 17, 19, 21]], [[8, 10, 12, 14, 16, 18, 20, 22]]], [[2], [[2, 3]], [[2, 4]]], [[10], [[10, 11, 13, 15, 17, 19, 21, 23, 25, 27]], [[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]]], [[20], [[20, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57]], [[20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58]]], [[12], [[12, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33]], [[12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]]], [[14], [[14, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]], [[14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]]], [[16], [[16, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45]], [[16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46]]], [[24], [[24, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69]], [[24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70]]], [[22], [[22, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63]], [[22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64]]], [[4], [[4, 5, 7, 9]], [[4, 6, 8, 10]]], [[18], [[18, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51]], [[18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52]]], [[8], [[8, 9, 11, 13, 15, 17, 19, 21]], [[8, 10, 12, 14, 16, 18, 20, 22]]], [[6], [[6, 7, 9, 11, 13, 15]], [[6, 8, 10, 12, 14, 16]]]], [[[4], [[4, 5, 7, 9]], [[4, 6, 8, 10]]], [[6], [[6, 7, 9, 11, 13, 15]], [[6, 8, 10, 12, 14, 16]]], [[8], [[8, 9, 11, 13, 15, 17, 19, 21]], [[8, 10, 12, 14, 16, 18, 20, 22]]], [[2], [[2, 3]], [[2, 4]]], [[10], [[10, 11, 13, 15, 17, 19, 21, 23, 25, 27]], [[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]]], [[20], [[20, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57]], [[20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58]]], [[12], [[12, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33]], [[12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]]], [[14], [[14, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]], [[14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]]], [[16], [[16, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45]], [[16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46]]], [[24], [[24, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69]], [[24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70]]], [[22], [[22, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63]], [[22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64]]], [[4], [[4, 5, 7, 9]], [[4, 6, 8, 10]]], [[18], [[18, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51]], [[18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52]]], [[8], [[8, 9, 11, 13, 15, 17, 19, 21]], [[8, 10, 12, 14, 16, 18, 20, 22]]], [[6], [[6, 7, 9, 11, 13, 15]], [[6, 8, 10, 12, 14, 16]]]]]"}
{"task_id": "HumanEval/101", "requirement": "from typing import List\n\n\ndef words_string(s: str) -> List[str]:\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \"\"\"", "repaired_requirement": "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    \"\"\"\n    Splits a string of words separated by commas or spaces into a list of words.\n    \n    The function first replaces all commas with spaces, then splits the string into words based on spaces.\n    Leading and trailing whitespace from each word is removed.\n\n    Args:\n        s (str): The input string containing words separated by commas or spaces.\n\n    Returns:\n        List[str]: A list of words with leading and trailing whitespace removed.\n    \"\"\"", "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]"], "outputs": "[[['Hi', 'my', 'name', 'is', 'John']], [['One', 'two', 'three', 'four', 'five', 'six']], [['apple', 'banana', 'cherry']], [['This', 'is', 'a', 'test']], [['SingleWord']], [['Leading', 'spaces', 'trailing', 'spaces']], [['Multiple', 'Commas']], [[]], [[]], [['Mixed', 'Spaces', 'And', 'Commas']]]", "probability": 0.35, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef words_string(s: str) -> List[str]:\n    import re\n    return re.split('[,\\\\s]+', s.strip())", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    import re\n    return re.split('[,\\\\s]+', s.strip())", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    import re\n    return re.split('[,\\\\s]+', s.strip())", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    import re\n    return re.split('[,\\\\s]+', s.strip())"], "outputs": "[[['Hi', 'my', 'name', 'is', 'John']], [['One', 'two', 'three', 'four', 'five', 'six']], [['apple', 'banana', 'cherry']], [['This', 'is', 'a', 'test']], [['SingleWord']], [['Leading', 'spaces', 'trailing', 'spaces']], [['', 'Multiple', 'Commas', '']], [['']], [['']], [['Mixed', 'Spaces', 'And', 'Commas']]]", "probability": 0.2, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nimport re\n\ndef words_string(s: str) -> List[str]:\n    return re.split('[,\\\\s]+', s.strip()) if s else []"], "outputs": "[[['Hi', 'my', 'name', 'is', 'John']], [['One', 'two', 'three', 'four', 'five', 'six']], [['apple', 'banana', 'cherry']], [['This', 'is', 'a', 'test']], [['SingleWord']], [['Leading', 'spaces', 'trailing', 'spaces']], [['', 'Multiple', 'Commas', '']], [['']], [[]], [['Mixed', 'Spaces', 'And', 'Commas']]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nimport re\n\ndef words_string(s: str) -> List[str]:\n    return re.split('[,\\\\s]+', s.strip()) if s.strip() else []", "from typing import List\nimport re\n\ndef words_string(s: str) -> List[str]:\n    return re.split('[,\\\\s]+', s.strip()) if s.strip() else []", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    import re\n    return re.split('[,\\\\s]+', s.strip()) if s.strip() else []", "from typing import List\nimport re\n\ndef words_string(s: str) -> List[str]:\n    return re.split('[,\\\\s]+', s.strip()) if s.strip() else []", "from typing import List\nimport re\n\ndef words_string(s: str) -> List[str]:\n    return re.split('[,\\\\s]+', s.strip()) if s.strip() else []", "from typing import List\nimport re\n\ndef words_string(s: str) -> List[str]:\n    return re.split('[,\\\\s]+', s.strip()) if s.strip() else []", "from typing import List\nimport re\n\ndef words_string(s: str) -> List[str]:\n    return re.split('[,\\\\s]+', s.strip()) if s.strip() else []"], "outputs": "[[['Hi', 'my', 'name', 'is', 'John']], [['One', 'two', 'three', 'four', 'five', 'six']], [['apple', 'banana', 'cherry']], [['This', 'is', 'a', 'test']], [['SingleWord']], [['Leading', 'spaces', 'trailing', 'spaces']], [['', 'Multiple', 'Commas', '']], [[]], [[]], [['Mixed', 'Spaces', 'And', 'Commas']]]", "probability": 0.35, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef words_string(s: str) -> List[str]:\n    if ',' in s:\n        return [word.strip() for word in s.split(',')]\n    else:\n        return s.split()"], "outputs": "[[['Hi', 'my name is John']], [['One', 'two', 'three', 'four', 'five', 'six']], [['apple', 'banana', 'cherry']], [['This', 'is', 'a', 'test']], [['SingleWord']], [['Leading spaces', 'trailing spaces']], [['', '', 'Multiple', '', 'Commas', '', '', '']], [[]], [[]], [['Mixed', 'Spaces', 'And', 'Commas']]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[['Hi, my name is John'], [['Hi', 'my name is John']], [['Hi', 'my', 'name', 'is', 'John']]]]"}], "entropy": 0.8427391243319117, "llm_generated_inputs": "[['Hi, my name is John'], ['One, two, three, four, five, six'], ['apple, banana, cherry'], ['This is a test'], ['SingleWord'], ['   Leading spaces, trailing spaces   '], [',,Multiple,,Commas,,,'], ['   '], [''], ['Mixed   ,  Spaces ,And, Commas']]", "input_output_examples": "[[['Hi, my name is John'], ['One, two, three, four, five, six']], [[['Hi', 'my', 'name', 'is', 'John']], [['One', 'two', 'three', 'four', 'five', 'six']]]]", "weighted_test_consistency": 0.975, "at_least_one_align": true, "ambiguity": 0.43386956216595585}, "repaired_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    s = s.replace(',', ' ')\n    words = s.split()\n    return [word.strip() for word in words]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    s = s.replace(',', ' ')\n    words = s.split()\n    return [word.strip() for word in words]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]"], "outputs": "[[['Hi', 'my', 'name', 'is', 'John']], [['One', 'two', 'three', 'four', 'five', 'six']], [['apple', 'banana', 'cherry']], [['This', 'is', 'a', 'test']], [['SingleWord']], [['Leading', 'spaces', 'trailing', 'spaces']], [['Multiple', 'Commas']], [[]], [[]], [['Mixed', 'Spaces', 'And', 'Commas']]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Hi, my name is John'], ['One, two, three, four, five, six'], ['apple, banana, cherry'], ['This is a test'], ['SingleWord'], ['   Leading spaces, trailing spaces   '], [',,Multiple,,Commas,,,'], ['   '], [''], ['Mixed   ,  Spaces ,And, Commas']]", "input_output_examples": "[[['Hi, my name is John'], ['One, two, three, four, five, six']], [[['Hi', 'my', 'name', 'is', 'John']], [['One', 'two', 'three', 'four', 'five', 'six']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "original_passk": 0.09999999999999998, "repaired_passk": 1.0, "generated_programs": ["from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    s = s.replace(',', ' ')\n    return [word.strip() for word in s.split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    s = s.replace(',', ' ')\n    words = s.split()\n    return [word.strip() for word in words]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]", "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    return [word.strip() for word in s.replace(',', ' ').split()]"], "failed_inputs_outputs": "[[], [], [], [], [], [], [], [], [], []]"}
{"task_id": "HumanEval/102", "requirement": "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"", "repaired_requirement": "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes two integers x and y and returns the largest even integer in the range [x, y] inclusive. If x is greater than y, the function should consider the range [y, x] inclusive. If there is no even number in the range, the function should return -1.\"\"\"", "original_clusters": {"cluster_list": [{"programs_str": ["def choose_num(x: int, y: int) -> int:\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "def choose_num(x: int, y: int) -> int:\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "def choose_num(x: int, y: int) -> int:\n    max_even = -1\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            max_even = num\n            break\n    return max_even", "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "def choose_num(x: int, y: int) -> int:\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "def choose_num(x: int, y: int) -> int:\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "def choose_num(x: int, y: int) -> int:\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "def choose_num(x: int, y: int) -> int:\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "def choose_num(x: int, y: int) -> int:\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "def choose_num(x: int, y: int) -> int:\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        return -1\n    max_even = -1\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            max_even = num\n            break\n    return max_even", "def choose_num(x: int, y: int) -> int:\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even"], "outputs": "[[14], [-1], [10], [-1], [2], [2], [104], [100], [0], [0]]", "probability": 0.65, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def choose_num(x: int, y: int) -> int:\n    max_even = -1\n    for num in range(min(x, y), max(x, y) + 1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        x, y = (y, x)\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        x, y = (y, x)\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "def choose_num(x: int, y: int) -> int:\n    max_even = -1\n    for num in range(min(x, y), max(x, y) + 1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "def choose_num(x: int, y: int) -> int:\n    max_even = -1\n    for num in range(min(x, y), max(x, y) + 1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "def choose_num(x: int, y: int) -> int:\n    max_even = -1\n    for num in range(min(x, y), max(x, y) + 1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even"], "outputs": "[[14], [12], [10], [-1], [2], [2], [104], [100], [0], [0]]", "probability": 0.35, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[[13, 12], [12], [-1]]]"}], "entropy": 0.9340680553754911, "llm_generated_inputs": "[[12, 15], [13, 12], [10, 10], [11, 11], [1, 3], [2, 2], [100, 105], [99, 101], [0, 0], [0, 1]]", "input_output_examples": "[[[12, 15], [13, 12]], [[14], [-1]]]", "weighted_test_consistency": 0.825, "at_least_one_align": true, "ambiguity": 0.5545340276877455}, "repaired_clusters": {"cluster_list": [{"programs_str": ["def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start, end = (min(x, y), max(x, y))\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even"], "outputs": "[[14], [12], [10], [-1], [2], [2], [104], [100], [0], [0]]", "probability": 1.0, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[[13, 12], [12], [-1]]]"}], "entropy": 0, "llm_generated_inputs": "[[12, 15], [13, 12], [10, 10], [11, 11], [1, 3], [2, 2], [100, 105], [99, 101], [0, 0], [0, 1]]", "input_output_examples": "[[[12, 15], [13, 12]], [[14], [-1]]]", "weighted_test_consistency": 0.5, "at_least_one_align": false, "ambiguity": 0.25}, "original_passk": 0.19999999999999996, "repaired_passk": 0.0, "generated_programs": ["def choose_num(x: int, y: int) -> int:\n    start, end = (min(x, y), max(x, y))\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        x, y = (y, x)\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        x, y = (y, x)\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        x, y = (y, x)\n    largest_even = -1\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    start = min(x, y)\n    end = max(x, y)\n    largest_even = -1\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "def choose_num(x: int, y: int) -> int:\n    if x > y:\n        x, y = (y, x)\n    largest_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num > largest_even:\n            largest_even = num\n    return largest_even"], "failed_inputs_outputs": "[[[[13, 12], [12], [-1]], [[5234, 5233], [5234], [-1]], [[27, 10], [26], [-1]], [[100, 6], [100], [-1]], [[101, 6], [100], [-1]], [[21, 3], [20], [-1]], [[100, 35], [100], [-1]], [[60, 50], [60], [-1]], [[28, 1], [28], [-1]], [[200, 5], [200], [-1]], [[60, 6], [60], [-1]], [[30, 6], [30], [-1]], [[30, 1], [30], [-1]], [[21, 5], [20], [-1]], [[6, 5], [6], [-1]], [[13, 10], [12], [-1]], [[199, 12], [198], [-1]], [[14, 13], [14], [-1]], [[60, 11], [60], [-1]], [[100, 30], [100], [-1]], [[15, 14], [14], [-1]], [[36, 29], [36], [-1]], [[12, 11], [12], [-1]], [[100, 15], [100], [-1]], [[100, 13], [100], [-1]], [[200, 101], [200], [-1]], [[101, 15], [100], [-1]], [[36, 35], [36], [-1]], [[30, 21], [30], [-1]], [[12, 3], [12], [-1]], [[10, 4], [10], [-1]], [[21, 20], [20], [-1]], [[200, 199], [200], [-1]], [[99, 5], [98], [-1]], [[60, 21], [60], [-1]], [[20, 5], [20], [-1]], [[100, 98], [100], [-1]], [[60, 59], [60], [-1]], [[59, 21], [58], [-1]], [[101, 34], [100], [-1]], [[201, 1], [200], [-1]], [[50, 3], [50], [-1]], [[201, 200], [200], [-1]], [[201, 199], [200], [-1]], [[61, 60], [60], [-1]], [[999, 998], [998], [-1]], [[31, 1], [30], [-1]], [[100, 23], [100], [-1]], [[101, 100], [100], [-1]], [[101, 18], [100], [-1]], [[998, 31], [998], [-1]], [[2000, 21], [2000], [-1]], [[1000, 2], [1000], [-1]], [[8, 1], [8], [-1]], [[10, 2], [10], [-1]], [[31, 20], [30], [-1]], [[32, 1], [32], [-1]], [[20, 19], [20], [-1]], [[99, 31], [98], [-1]], [[32, 7], [32], [-1]], [[32, 6], [32], [-1]], [[2000, 998], [2000], [-1]], [[102, 22], [102], [-1]], [[1000, 24], [1000], [-1]], [[18, 6], [18], [-1]], [[100, 10], [100], [-1]], [[24, 7], [24], [-1]], [[1000, 22], [1000], [-1]], [[23, 21], [22], [-1]], [[32, 3], [32], [-1]], [[9, 5], [8], [-1]], [[3, 1], [2], [-1]], [[8, 7], [8], [-1]], [[3, 2], [2], [-1]], [[27, 6], [26], [-1]], [[20, 7], [20], [-1]], [[2, 1], [2], [-1]], [[100, 31], [100], [-1]], [[23, 18], [22], [-1]], [[99, 32], [98], [-1]], [[1000, 10], [1000], [-1]], [[1000, 1], [1000], [-1]], [[100, 22], [100], [-1]], [[23, 6], [22], [-1]], [[18, 8], [18], [-1]], [[33, 32], [32], [-1]], [[2001, 2000], [2000], [-1]], [[1000, 28], [1000], [-1]], [[22, 4], [22], [-1]], [[8, 2], [8], [-1]], [[11, 10], [10], [-1]], [[32, 22], [32], [-1]], [[29, 28], [28], [-1]], [[99, 10], [98], [-1]], [[7, 1], [6], [-1]], [[17, 7], [16], [-1]], [[1999, 28], [1998], [-1]], [[21, 19], [20], [-1]], [[998, 100], [998], [-1]], [[24, 10], [24], [-1]], [[33, 24], [32], [-1]], [[99, 6], [98], [-1]], [[998, 32], [998], [-1]], [[25, 20], [24], [-1]], [[33, 3], [32], [-1]], [[31, 18], [30], [-1]], [[22, 17], [22], [-1]], [[99, 3], [98], [-1]], [[11, 5], [10], [-1]], [[999, 102], [998], [-1]], [[4, 2], [4], [-1]], [[24, 9], [24], [-1]], [[99, 20], [98], [-1]], [[11, 9], [10], [-1]], [[32, 11], [32], [-1]], [[1000, 6], [1000], [-1]], [[1999, 1], [1998], [-1]], [[29, 1], [28], [-1]], [[1001, 18], [1000], [-1]], [[29, 18], [28], [-1]], [[2000, 99], [2000], [-1]], [[32, 18], [32], [-1]], [[10, 1], [10], [-1]], [[26, 25], [26], [-1]], [[28, 2], [28], [-1]], [[27, 10], [26], [-1]], [[2000, 16], [2000], [-1]], [[102, 10], [102], [-1]], [[999, 18], [998], [-1]], [[9, 8], [8], [-1]], [[9, 6], [8], [-1]], [[2000, 101], [2000], [-1]], [[22, 8], [22], [-1]], [[16, 6], [16], [-1]], [[101, 20], [100], [-1]], [[18, 17], [18], [-1]], [[10, 5], [10], [-1]], [[22, 21], [22], [-1]], [[999, 24], [998], [-1]], [[22, 10], [22], [-1]], [[7, 6], [6], [-1]], [[99, 26], [98], [-1]], [[102, 20], [102], [-1]], [[103, 7], [102], [-1]], [[1999, 21], [1998], [-1]], [[1999, 997], [1998], [-1]], [[1003, 1002], [1002], [-1]], [[32, 10], [32], [-1]], [[7, 3], [6], [-1]], [[31, 16], [30], [-1]], [[99, 98], [98], [-1]], [[100, 21], [100], [-1]], [[100, 11], [100], [-1]], [[98, 32], [98], [-1]], [[24, 6], [24], [-1]], [[1003, 1001], [1002], [-1]], [[1999, 1000], [1998], [-1]], [[30, 7], [30], [-1]], [[999, 99], [998], [-1]], [[34, 25], [34], [-1]], [[19, 3], [18], [-1]], [[34, 4], [34], [-1]], [[7, 2], [6], [-1]], [[1999, 19], [1998], [-1]], [[1001, 7], [1000], [-1]], [[22, 5], [22], [-1]], [[22, 6], [22], [-1]], [[32, 21], [32], [-1]], [[29, 6], [28], [-1]], [[16, 3], [16], [-1]], [[998, 10], [998], [-1]], [[1999, 99], [1998], [-1]], [[27, 7], [26], [-1]], [[34, 5], [34], [-1]], [[104, 7], [104], [-1]], [[100, 62], [100], [-1]], [[28, 27], [28], [-1]], [[100, 3], [100], [-1]], [[98, 21], [98], [-1]], [[25, 17], [24], [-1]], [[24, 23], [24], [-1]], [[1003, 998], [1002], [-1]], [[998, 997], [998], [-1]], [[22, 1], [22], [-1]], [[101, 32], [100], [-1]], [[1000, 999], [1000], [-1]], [[999, 28], [998], [-1]], [[100, 99], [100], [-1]], [[34, 33], [34], [-1]], [[30, 3], [30], [-1]], [[1000, 29], [1000], [-1]], [[18, 3], [18], [-1]], [[98, 7], [98], [-1]], [[34, 2], [34], [-1]], [[1001, 70], [1000], [-1]], [[1001, 998], [1000], [-1]], [[21, 18], [20], [-1]], [[998, 8], [998], [-1]], [[23, 1], [22], [-1]], [[2000, 3], [2000], [-1]], [[1004, 1003], [1004], [-1]], [[103, 99], [102], [-1]], [[1003, 7], [1002], [-1]], [[5, 3], [4], [-1]], [[1002, 1001], [1002], [-1]], [[102, 101], [102], [-1]], [[2000, 1004], [2000], [-1]], [[21, 8], [20], [-1]], [[99, 70], [98], [-1]], [[20, 8], [20], [-1]], [[33, 30], [32], [-1]], [[25, 9], [24], [-1]], [[31, 4], [30], [-1]], [[70, 5], [70], [-1]], [[31, 28], [30], [-1]], [[1999, 1004], [1998], [-1]], [[104, 29], [104], [-1]], [[997, 4], [996], [-1]], [[1000, 19], [1000], [-1]], [[23, 10], [22], [-1]], [[998, 6], [998], [-1]], [[30, 29], [30], [-1]], [[70, 32], [70], [-1]], [[27, 20], [26], [-1]], [[102, 21], [102], [-1]], [[8, 3], [8], [-1]], [[19, 4], [18], [-1]], [[33, 6], [32], [-1]], [[102, 99], [102], [-1]], [[28, 12], [28], [-1]], [[1001, 99], [1000], [-1]], [[999, 23], [998], [-1]], [[18, 1], [18], [-1]], [[103, 6], [102], [-1]], [[8, 6], [8], [-1]], [[28, 25], [28], [-1]], [[99, 12], [98], [-1]], [[32, 30], [32], [-1]], [[104, 27], [104], [-1]], [[28, 17], [28], [-1]], [[11, 8], [10], [-1]], [[2000, 24], [2000], [-1]], [[32, 31], [32], [-1]], [[26, 23], [26], [-1]], [[27, 26], [26], [-1]], [[29, 17], [28], [-1]], [[32, 23], [32], [-1]], [[22, 9], [22], [-1]], [[17, 5], [16], [-1]], [[34, 20], [34], [-1]], [[9, 2], [8], [-1]], [[35, 1], [34], [-1]], [[2000, 23], [2000], [-1]], [[2000, 62], [2000], [-1]], [[100, 63], [100], [-1]], [[996, 4], [996], [-1]], [[18, 4], [18], [-1]], [[101, 71], [100], [-1]], [[1003, 20], [1002], [-1]], [[70, 21], [70], [-1]], [[10, 3], [10], [-1]], [[72, 71], [72], [-1]], [[31, 17], [30], [-1]], [[62, 21], [62], [-1]], [[2001, 21], [2000], [-1]], [[1004, 18], [1004], [-1]], [[18, 2], [18], [-1]], [[104, 103], [104], [-1]], [[27, 18], [26], [-1]], [[1999, 98], [1998], [-1]], [[21, 7], [20], [-1]], [[30, 17], [30], [-1]], [[17, 8], [16], [-1]], [[29, 12], [28], [-1]], [[2001, 16], [2000], [-1]], [[27, 23], [26], [-1]], [[2000, 999], [2000], [-1]], [[30, 23], [30], [-1]], [[23, 8], [22], [-1]], [[27, 17], [26], [-1]], [[2000, 17], [2000], [-1]], [[999, 30], [998], [-1]], [[2000, 100], [2000], [-1]], [[30, 2], [30], [-1]], [[21, 10], [20], [-1]], [[100, 2], [100], [-1]], [[99, 2], [98], [-1]], [[99, 23], [98], [-1]], [[1000, 9], [1000], [-1]], [[30, 22], [30], [-1]], [[1000, 17], [1000], [-1]], [[999, 17], [998], [-1]], [[999, 100], [998], [-1]], [[31, 21], [30], [-1]], [[2001, 20], [2000], [-1]], [[27, 2], [26], [-1]], [[23, 9], [22], [-1]], [[29, 23], [28], [-1]], [[1999, 29], [1998], [-1]], [[999, 1], [998], [-1]], [[99, 7], [98], [-1]], [[5, 2], [4], [-1]], [[10, 9], [10], [-1]], [[30, 16], [30], [-1]], [[22, 18], [22], [-1]], [[1999, 999], [1998], [-1]], [[1999, 31], [1998], [-1]], [[99, 16], [98], [-1]], [[16, 10], [16], [-1]], [[11, 2], [10], [-1]], [[999, 9], [998], [-1]], [[99, 1], [98], [-1]], [[31, 7], [30], [-1]], [[23, 17], [22], [-1]], [[2000, 18], [2000], [-1]], [[99, 17], [98], [-1]], [[10, 7], [10], [-1]], [[21, 16], [20], [-1]], [[23, 7], [22], [-1]], [[1999, 8], [1998], [-1]], [[999, 20], [998], [-1]], [[1000, 16], [1000], [-1]], [[999, 21], [998], [-1]], [[26, 7], [26], [-1]], [[18, 7], [18], [-1]], [[44, 43], [44], [-1]], [[30, 10], [30], [-1]], [[2000, 7], [2000], [-1]], [[99, 24], [98], [-1]], [[2000, 1], [2000], [-1]], [[999, 10], [998], [-1]], [[1001, 24], [1000], [-1]], [[29, 22], [28], [-1]], [[2000, 20], [2000], [-1]], [[2001, 100], [2000], [-1]], [[99, 30], [98], [-1]], [[102, 30], [102], [-1]], [[999, 5], [998], [-1]], [[19, 7], [18], [-1]], [[2001, 1001], [2000], [-1]], [[102, 15], [102], [-1]], [[999, 19], [998], [-1]], [[2002, 31], [2002], [-1]], [[98, 17], [98], [-1]], [[2002, 30], [2002], [-1]], [[2001, 9], [2000], [-1]], [[1999, 11], [1998], [-1]], [[31, 8], [30], [-1]], [[1999, 17], [1998], [-1]], [[28, 8], [28], [-1]], [[24, 17], [24], [-1]], [[29, 5], [28], [-1]], [[1001, 11], [1000], [-1]], [[999, 26], [998], [-1]], [[44, 9], [44], [-1]], [[2002, 997], [2002], [-1]], [[2000, 10], [2000], [-1]], [[2000, 5], [2000], [-1]], [[101, 10], [100], [-1]], [[2003, 11], [2002], [-1]], [[31, 6], [30], [-1]], [[30, 5], [30], [-1]], [[2001, 7], [2000], [-1]], [[1999, 30], [1998], [-1]], [[24, 5], [24], [-1]], [[1001, 23], [1000], [-1]], [[998, 1], [998], [-1]], [[15, 10], [14], [-1]], [[16, 9], [16], [-1]], [[102, 24], [102], [-1]], [[998, 29], [998], [-1]], [[2002, 2000], [2002], [-1]], [[44, 6], [44], [-1]], [[102, 100], [102], [-1]], [[1001, 100], [1000], [-1]], [[15, 2], [14], [-1]], [[2002, 10], [2002], [-1]], [[23, 15], [22], [-1]], [[25, 5], [24], [-1]], [[1001, 22], [1000], [-1]], [[99, 21], [98], [-1]], [[2000, 1000], [2000], [-1]], [[32, 5], [32], [-1]], [[2004, 2003], [2004], [-1]], [[18, 16], [18], [-1]], [[2001, 17], [2000], [-1]], [[2002, 2001], [2002], [-1]], [[30, 15], [30], [-1]], [[1002, 22], [1002], [-1]], [[31, 10], [30], [-1]], [[998, 101], [998], [-1]], [[23, 22], [22], [-1]], [[101, 21], [100], [-1]], [[998, 23], [998], [-1]], [[2003, 7], [2002], [-1]], [[43, 1], [42], [-1]], [[1001, 20], [1000], [-1]], [[1001, 30], [1000], [-1]], [[1998, 999], [1998], [-1]], [[1998, 9], [1998], [-1]], [[998, 28], [998], [-1]], [[24, 20], [24], [-1]], [[999, 7], [998], [-1]], [[99, 25], [98], [-1]], [[1001, 101], [1000], [-1]], [[16, 1], [16], [-1]], [[100, 5], [100], [-1]], [[25, 24], [24], [-1]], [[2000, 9], [2000], [-1]], [[1998, 31], [1998], [-1]], [[1999, 27], [1998], [-1]], [[31, 14], [30], [-1]], [[1999, 101], [1998], [-1]], [[998, 9], [998], [-1]], [[997, 23], [996], [-1]], [[26, 6], [26], [-1]], [[997, 101], [996], [-1]], [[2004, 31], [2004], [-1]], [[31, 30], [30], [-1]], [[1000, 23], [1000], [-1]], [[24, 16], [24], [-1]], [[28, 16], [28], [-1]], [[100, 19], [100], [-1]], [[44, 7], [44], [-1]], [[16, 5], [16], [-1]], [[997, 22], [996], [-1]], [[16, 15], [16], [-1]], [[2000, 1999], [2000], [-1]], [[1999, 102], [1998], [-1]], [[103, 102], [102], [-1]], [[31, 24], [30], [-1]], [[21, 6], [20], [-1]], [[26, 5], [26], [-1]], [[1000, 998], [1000], [-1]], [[2004, 8], [2004], [-1]], [[9, 7], [8], [-1]], [[20, 16], [20], [-1]], [[103, 27], [102], [-1]], [[102, 18], [102], [-1]], [[6, 4], [6], [-1]], [[2001, 104], [2000], [-1]], [[100, 43], [100], [-1]], [[1998, 43], [1998], [-1]], [[2002, 999], [2002], [-1]], [[43, 30], [42], [-1]], [[102, 9], [102], [-1]], [[2003, 5], [2002], [-1]], [[1002, 102], [1002], [-1]], [[1999, 998], [1998], [-1]], [[2003, 10], [2002], [-1]], [[14, 2], [14], [-1]], [[1000, 30], [1000], [-1]], [[22, 11], [22], [-1]], [[8, 5], [8], [-1]], [[96, 4], [96], [-1]], [[12, 8], [12], [-1]], [[18, 9], [18], [-1]], [[23, 20], [22], [-1]]], [[[13, 12], [12], [-1]], [[5234, 5233], [5234], [-1]], [[27, 10], [26], [-1]], [[100, 6], [100], [-1]], [[101, 6], [100], [-1]], [[21, 3], [20], [-1]], [[100, 35], [100], [-1]], [[60, 50], [60], [-1]], [[28, 1], [28], [-1]], [[200, 5], [200], [-1]], [[60, 6], [60], [-1]], [[30, 6], [30], [-1]], [[30, 1], [30], [-1]], [[21, 5], [20], [-1]], [[6, 5], [6], [-1]], [[13, 10], [12], [-1]], [[199, 12], [198], [-1]], [[14, 13], [14], [-1]], [[60, 11], [60], [-1]], [[100, 30], [100], [-1]], [[15, 14], [14], [-1]], [[36, 29], [36], [-1]], [[12, 11], [12], [-1]], [[100, 15], [100], [-1]], [[100, 13], [100], [-1]], [[200, 101], [200], [-1]], [[101, 15], [100], [-1]], [[36, 35], [36], [-1]], [[30, 21], [30], [-1]], [[12, 3], [12], [-1]], [[10, 4], [10], [-1]], [[21, 20], [20], [-1]], [[200, 199], [200], [-1]], [[99, 5], [98], [-1]], [[60, 21], [60], [-1]], [[20, 5], [20], [-1]], [[100, 98], [100], [-1]], [[60, 59], [60], [-1]], [[59, 21], [58], [-1]], [[101, 34], [100], [-1]], [[201, 1], [200], [-1]], [[50, 3], [50], [-1]], [[201, 200], [200], [-1]], [[201, 199], [200], [-1]], [[61, 60], [60], [-1]], [[999, 998], [998], [-1]], [[31, 1], [30], [-1]], [[100, 23], [100], [-1]], [[101, 100], [100], [-1]], [[101, 18], [100], [-1]], [[998, 31], [998], [-1]], [[2000, 21], [2000], [-1]], [[1000, 2], [1000], [-1]], [[8, 1], [8], [-1]], [[10, 2], [10], [-1]], [[31, 20], [30], [-1]], [[32, 1], [32], [-1]], [[20, 19], [20], [-1]], [[99, 31], [98], [-1]], [[32, 7], [32], [-1]], [[32, 6], [32], [-1]], [[2000, 998], [2000], [-1]], [[102, 22], [102], [-1]], [[1000, 24], [1000], [-1]], [[18, 6], [18], [-1]], [[100, 10], [100], [-1]], [[24, 7], [24], [-1]], [[1000, 22], [1000], [-1]], [[23, 21], [22], [-1]], [[32, 3], [32], [-1]], [[9, 5], [8], [-1]], [[3, 1], [2], [-1]], [[8, 7], [8], [-1]], [[3, 2], [2], [-1]], [[27, 6], [26], [-1]], [[20, 7], [20], [-1]], [[2, 1], [2], [-1]], [[100, 31], [100], [-1]], [[23, 18], [22], [-1]], [[99, 32], [98], [-1]], [[1000, 10], [1000], [-1]], [[1000, 1], [1000], [-1]], [[100, 22], [100], [-1]], [[23, 6], [22], [-1]], [[18, 8], [18], [-1]], [[33, 32], [32], [-1]], [[2001, 2000], [2000], [-1]], [[1000, 28], [1000], [-1]], [[22, 4], [22], [-1]], [[8, 2], [8], [-1]], [[11, 10], [10], [-1]], [[32, 22], [32], [-1]], [[29, 28], [28], [-1]], [[99, 10], [98], [-1]], [[7, 1], [6], [-1]], [[17, 7], [16], [-1]], [[1999, 28], [1998], [-1]], [[21, 19], [20], [-1]], [[998, 100], [998], [-1]], [[24, 10], [24], [-1]], [[33, 24], [32], [-1]], [[99, 6], [98], [-1]], [[998, 32], [998], [-1]], [[25, 20], [24], [-1]], [[33, 3], [32], [-1]], [[31, 18], [30], [-1]], [[22, 17], [22], [-1]], [[99, 3], [98], [-1]], [[11, 5], [10], [-1]], [[999, 102], [998], [-1]], [[4, 2], [4], [-1]], [[24, 9], [24], [-1]], [[99, 20], [98], [-1]], [[11, 9], [10], [-1]], [[32, 11], [32], [-1]], [[1000, 6], [1000], [-1]], [[1999, 1], [1998], [-1]], [[29, 1], [28], [-1]], [[1001, 18], [1000], [-1]], [[29, 18], [28], [-1]], [[2000, 99], [2000], [-1]], [[32, 18], [32], [-1]], [[10, 1], [10], [-1]], [[26, 25], [26], [-1]], [[28, 2], [28], [-1]], [[27, 10], [26], [-1]], [[2000, 16], [2000], [-1]], [[102, 10], [102], [-1]], [[999, 18], [998], [-1]], [[9, 8], [8], [-1]], [[9, 6], [8], [-1]], [[2000, 101], [2000], [-1]], [[22, 8], [22], [-1]], [[16, 6], [16], [-1]], [[101, 20], [100], [-1]], [[18, 17], [18], [-1]], [[10, 5], [10], [-1]], [[22, 21], [22], [-1]], [[999, 24], [998], [-1]], [[22, 10], [22], [-1]], [[7, 6], [6], [-1]], [[99, 26], [98], [-1]], [[102, 20], [102], [-1]], [[103, 7], [102], [-1]], [[1999, 21], [1998], [-1]], [[1999, 997], [1998], [-1]], [[1003, 1002], [1002], [-1]], [[32, 10], [32], [-1]], [[7, 3], [6], [-1]], [[31, 16], [30], [-1]], [[99, 98], [98], [-1]], [[100, 21], [100], [-1]], [[100, 11], [100], [-1]], [[98, 32], [98], [-1]], [[24, 6], [24], [-1]], [[1003, 1001], [1002], [-1]], [[1999, 1000], [1998], [-1]], [[30, 7], [30], [-1]], [[999, 99], [998], [-1]], [[34, 25], [34], [-1]], [[19, 3], [18], [-1]], [[34, 4], [34], [-1]], [[7, 2], [6], [-1]], [[1999, 19], [1998], [-1]], [[1001, 7], [1000], [-1]], [[22, 5], [22], [-1]], [[22, 6], [22], [-1]], [[32, 21], [32], [-1]], [[29, 6], [28], [-1]], [[16, 3], [16], [-1]], [[998, 10], [998], [-1]], [[1999, 99], [1998], [-1]], [[27, 7], [26], [-1]], [[34, 5], [34], [-1]], [[104, 7], [104], [-1]], [[100, 62], [100], [-1]], [[28, 27], [28], [-1]], [[100, 3], [100], [-1]], [[98, 21], [98], [-1]], [[25, 17], [24], [-1]], [[24, 23], [24], [-1]], [[1003, 998], [1002], [-1]], [[998, 997], [998], [-1]], [[22, 1], [22], [-1]], [[101, 32], [100], [-1]], [[1000, 999], [1000], [-1]], [[999, 28], [998], [-1]], [[100, 99], [100], [-1]], [[34, 33], [34], [-1]], [[30, 3], [30], [-1]], [[1000, 29], [1000], [-1]], [[18, 3], [18], [-1]], [[98, 7], [98], [-1]], [[34, 2], [34], [-1]], [[1001, 70], [1000], [-1]], [[1001, 998], [1000], [-1]], [[21, 18], [20], [-1]], [[998, 8], [998], [-1]], [[23, 1], [22], [-1]], [[2000, 3], [2000], [-1]], [[1004, 1003], [1004], [-1]], [[103, 99], [102], [-1]], [[1003, 7], [1002], [-1]], [[5, 3], [4], [-1]], [[1002, 1001], [1002], [-1]], [[102, 101], [102], [-1]], [[2000, 1004], [2000], [-1]], [[21, 8], [20], [-1]], [[99, 70], [98], [-1]], [[20, 8], [20], [-1]], [[33, 30], [32], [-1]], [[25, 9], [24], [-1]], [[31, 4], [30], [-1]], [[70, 5], [70], [-1]], [[31, 28], [30], [-1]], [[1999, 1004], [1998], [-1]], [[104, 29], [104], [-1]], [[997, 4], [996], [-1]], [[1000, 19], [1000], [-1]], [[23, 10], [22], [-1]], [[998, 6], [998], [-1]], [[30, 29], [30], [-1]], [[70, 32], [70], [-1]], [[27, 20], [26], [-1]], [[102, 21], [102], [-1]], [[8, 3], [8], [-1]], [[19, 4], [18], [-1]], [[33, 6], [32], [-1]], [[102, 99], [102], [-1]], [[28, 12], [28], [-1]], [[1001, 99], [1000], [-1]], [[999, 23], [998], [-1]], [[18, 1], [18], [-1]], [[103, 6], [102], [-1]], [[8, 6], [8], [-1]], [[28, 25], [28], [-1]], [[99, 12], [98], [-1]], [[32, 30], [32], [-1]], [[104, 27], [104], [-1]], [[28, 17], [28], [-1]], [[11, 8], [10], [-1]], [[2000, 24], [2000], [-1]], [[32, 31], [32], [-1]], [[26, 23], [26], [-1]], [[27, 26], [26], [-1]], [[29, 17], [28], [-1]], [[32, 23], [32], [-1]], [[22, 9], [22], [-1]], [[17, 5], [16], [-1]], [[34, 20], [34], [-1]], [[9, 2], [8], [-1]], [[35, 1], [34], [-1]], [[2000, 23], [2000], [-1]], [[2000, 62], [2000], [-1]], [[100, 63], [100], [-1]], [[996, 4], [996], [-1]], [[18, 4], [18], [-1]], [[101, 71], [100], [-1]], [[1003, 20], [1002], [-1]], [[70, 21], [70], [-1]], [[10, 3], [10], [-1]], [[72, 71], [72], [-1]], [[31, 17], [30], [-1]], [[62, 21], [62], [-1]], [[2001, 21], [2000], [-1]], [[1004, 18], [1004], [-1]], [[18, 2], [18], [-1]], [[104, 103], [104], [-1]], [[27, 18], [26], [-1]], [[1999, 98], [1998], [-1]], [[21, 7], [20], [-1]], [[30, 17], [30], [-1]], [[17, 8], [16], [-1]], [[29, 12], [28], [-1]], [[2001, 16], [2000], [-1]], [[27, 23], [26], [-1]], [[2000, 999], [2000], [-1]], [[30, 23], [30], [-1]], [[23, 8], [22], [-1]], [[27, 17], [26], [-1]], [[2000, 17], [2000], [-1]], [[999, 30], [998], [-1]], [[2000, 100], [2000], [-1]], [[30, 2], [30], [-1]], [[21, 10], [20], [-1]], [[100, 2], [100], [-1]], [[99, 2], [98], [-1]], [[99, 23], [98], [-1]], [[1000, 9], [1000], [-1]], [[30, 22], [30], [-1]], [[1000, 17], [1000], [-1]], [[999, 17], [998], [-1]], [[999, 100], [998], [-1]], [[31, 21], [30], [-1]], [[2001, 20], [2000], [-1]], [[27, 2], [26], [-1]], [[23, 9], [22], [-1]], [[29, 23], [28], [-1]], [[1999, 29], [1998], [-1]], [[999, 1], [998], [-1]], [[99, 7], [98], [-1]], [[5, 2], [4], [-1]], [[10, 9], [10], [-1]], [[30, 16], [30], [-1]], [[22, 18], [22], [-1]], [[1999, 999], [1998], [-1]], [[1999, 31], [1998], [-1]], [[99, 16], [98], [-1]], [[16, 10], [16], [-1]], [[11, 2], [10], [-1]], [[999, 9], [998], [-1]], [[99, 1], [98], [-1]], [[31, 7], [30], [-1]], [[23, 17], [22], [-1]], [[2000, 18], [2000], [-1]], [[99, 17], [98], [-1]], [[10, 7], [10], [-1]], [[21, 16], [20], [-1]], [[23, 7], [22], [-1]], [[1999, 8], [1998], [-1]], [[999, 20], [998], [-1]], [[1000, 16], [1000], [-1]], [[999, 21], [998], [-1]], [[26, 7], [26], [-1]], [[18, 7], [18], [-1]], [[44, 43], [44], [-1]], [[30, 10], [30], [-1]], [[2000, 7], [2000], [-1]], [[99, 24], [98], [-1]], [[2000, 1], [2000], [-1]], [[999, 10], [998], [-1]], [[1001, 24], [1000], [-1]], [[29, 22], [28], [-1]], [[2000, 20], [2000], [-1]], [[2001, 100], [2000], [-1]], [[99, 30], [98], [-1]], [[102, 30], [102], [-1]], [[999, 5], [998], [-1]], [[19, 7], [18], [-1]], [[2001, 1001], [2000], [-1]], [[102, 15], [102], [-1]], [[999, 19], [998], [-1]], [[2002, 31], [2002], [-1]], [[98, 17], [98], [-1]], [[2002, 30], [2002], [-1]], [[2001, 9], [2000], [-1]], [[1999, 11], [1998], [-1]], [[31, 8], [30], [-1]], [[1999, 17], [1998], [-1]], [[28, 8], [28], [-1]], [[24, 17], [24], [-1]], [[29, 5], [28], [-1]], [[1001, 11], [1000], [-1]], [[999, 26], [998], [-1]], [[44, 9], [44], [-1]], [[2002, 997], [2002], [-1]], [[2000, 10], [2000], [-1]], [[2000, 5], [2000], [-1]], [[101, 10], [100], [-1]], [[2003, 11], [2002], [-1]], [[31, 6], [30], [-1]], [[30, 5], [30], [-1]], [[2001, 7], [2000], [-1]], [[1999, 30], [1998], [-1]], [[24, 5], [24], [-1]], [[1001, 23], [1000], [-1]], [[998, 1], [998], [-1]], [[15, 10], [14], [-1]], [[16, 9], [16], [-1]], [[102, 24], [102], [-1]], [[998, 29], [998], [-1]], [[2002, 2000], [2002], [-1]], [[44, 6], [44], [-1]], [[102, 100], [102], [-1]], [[1001, 100], [1000], [-1]], [[15, 2], [14], [-1]], [[2002, 10], [2002], [-1]], [[23, 15], [22], [-1]], [[25, 5], [24], [-1]], [[1001, 22], [1000], [-1]], [[99, 21], [98], [-1]], [[2000, 1000], [2000], [-1]], [[32, 5], [32], [-1]], [[2004, 2003], [2004], [-1]], [[18, 16], [18], [-1]], [[2001, 17], [2000], [-1]], [[2002, 2001], [2002], [-1]], [[30, 15], [30], [-1]], [[1002, 22], [1002], [-1]], [[31, 10], [30], [-1]], [[998, 101], [998], [-1]], [[23, 22], [22], [-1]], [[101, 21], [100], [-1]], [[998, 23], [998], [-1]], [[2003, 7], [2002], [-1]], [[43, 1], [42], [-1]], [[1001, 20], [1000], [-1]], [[1001, 30], [1000], [-1]], [[1998, 999], [1998], [-1]], [[1998, 9], [1998], [-1]], [[998, 28], [998], [-1]], [[24, 20], [24], [-1]], [[999, 7], [998], [-1]], [[99, 25], [98], [-1]], [[1001, 101], [1000], [-1]], [[16, 1], [16], [-1]], [[100, 5], [100], [-1]], [[25, 24], [24], [-1]], [[2000, 9], [2000], [-1]], [[1998, 31], [1998], [-1]], [[1999, 27], [1998], [-1]], [[31, 14], [30], [-1]], [[1999, 101], [1998], [-1]], [[998, 9], [998], [-1]], [[997, 23], [996], [-1]], [[26, 6], [26], [-1]], [[997, 101], [996], [-1]], [[2004, 31], [2004], [-1]], [[31, 30], [30], [-1]], [[1000, 23], [1000], [-1]], [[24, 16], [24], [-1]], [[28, 16], [28], [-1]], [[100, 19], [100], [-1]], [[44, 7], [44], [-1]], [[16, 5], [16], [-1]], [[997, 22], [996], [-1]], [[16, 15], [16], [-1]], [[2000, 1999], [2000], [-1]], [[1999, 102], [1998], [-1]], [[103, 102], [102], [-1]], [[31, 24], [30], [-1]], [[21, 6], [20], [-1]], [[26, 5], [26], [-1]], [[1000, 998], [1000], [-1]], [[2004, 8], [2004], [-1]], [[9, 7], [8], [-1]], [[20, 16], [20], [-1]], [[103, 27], [102], [-1]], [[102, 18], [102], [-1]], [[6, 4], [6], [-1]], [[2001, 104], [2000], [-1]], [[100, 43], [100], [-1]], [[1998, 43], [1998], [-1]], [[2002, 999], [2002], [-1]], [[43, 30], [42], [-1]], [[102, 9], [102], [-1]], [[2003, 5], [2002], [-1]], [[1002, 102], [1002], [-1]], [[1999, 998], [1998], [-1]], [[2003, 10], [2002], [-1]], [[14, 2], [14], [-1]], [[1000, 30], [1000], [-1]], [[22, 11], [22], [-1]], [[8, 5], [8], [-1]], [[96, 4], [96], [-1]], [[12, 8], [12], [-1]], [[18, 9], [18], [-1]], [[23, 20], [22], [-1]]], [[[13, 12], [12], [-1]], [[5234, 5233], [5234], [-1]], [[27, 10], [26], [-1]], [[100, 6], [100], [-1]], [[101, 6], [100], [-1]], [[21, 3], [20], [-1]], [[100, 35], [100], [-1]], [[60, 50], [60], [-1]], [[28, 1], [28], [-1]], [[200, 5], [200], [-1]], [[60, 6], [60], [-1]], [[30, 6], [30], [-1]], [[30, 1], [30], [-1]], [[21, 5], [20], [-1]], [[6, 5], [6], [-1]], [[13, 10], [12], [-1]], [[199, 12], [198], [-1]], [[14, 13], [14], [-1]], [[60, 11], [60], [-1]], [[100, 30], [100], [-1]], [[15, 14], [14], [-1]], [[36, 29], [36], [-1]], [[12, 11], [12], [-1]], [[100, 15], [100], [-1]], [[100, 13], [100], [-1]], [[200, 101], [200], [-1]], [[101, 15], [100], [-1]], [[36, 35], [36], [-1]], [[30, 21], [30], [-1]], [[12, 3], [12], [-1]], [[10, 4], [10], [-1]], [[21, 20], [20], [-1]], [[200, 199], [200], [-1]], [[99, 5], [98], [-1]], [[60, 21], [60], [-1]], [[20, 5], [20], [-1]], [[100, 98], [100], [-1]], [[60, 59], [60], [-1]], [[59, 21], [58], [-1]], [[101, 34], [100], [-1]], [[201, 1], [200], [-1]], [[50, 3], [50], [-1]], [[201, 200], [200], [-1]], [[201, 199], [200], [-1]], [[61, 60], [60], [-1]], [[999, 998], [998], [-1]], [[31, 1], [30], [-1]], [[100, 23], [100], [-1]], [[101, 100], [100], [-1]], [[101, 18], [100], [-1]], [[998, 31], [998], [-1]], [[2000, 21], [2000], [-1]], [[1000, 2], [1000], [-1]], [[8, 1], [8], [-1]], [[10, 2], [10], [-1]], [[31, 20], [30], [-1]], [[32, 1], [32], [-1]], [[20, 19], [20], [-1]], [[99, 31], [98], [-1]], [[32, 7], [32], [-1]], [[32, 6], [32], [-1]], [[2000, 998], [2000], [-1]], [[102, 22], [102], [-1]], [[1000, 24], [1000], [-1]], [[18, 6], [18], [-1]], [[100, 10], [100], [-1]], [[24, 7], [24], [-1]], [[1000, 22], [1000], [-1]], [[23, 21], [22], [-1]], [[32, 3], [32], [-1]], [[9, 5], [8], [-1]], [[3, 1], [2], [-1]], [[8, 7], [8], [-1]], [[3, 2], [2], [-1]], [[27, 6], [26], [-1]], [[20, 7], [20], [-1]], [[2, 1], [2], [-1]], [[100, 31], [100], [-1]], [[23, 18], [22], [-1]], [[99, 32], [98], [-1]], [[1000, 10], [1000], [-1]], [[1000, 1], [1000], [-1]], [[100, 22], [100], [-1]], [[23, 6], [22], [-1]], [[18, 8], [18], [-1]], [[33, 32], [32], [-1]], [[2001, 2000], [2000], [-1]], [[1000, 28], [1000], [-1]], [[22, 4], [22], [-1]], [[8, 2], [8], [-1]], [[11, 10], [10], [-1]], [[32, 22], [32], [-1]], [[29, 28], [28], [-1]], [[99, 10], [98], [-1]], [[7, 1], [6], [-1]], [[17, 7], [16], [-1]], [[1999, 28], [1998], [-1]], [[21, 19], [20], [-1]], [[998, 100], [998], [-1]], [[24, 10], [24], [-1]], [[33, 24], [32], [-1]], [[99, 6], [98], [-1]], [[998, 32], [998], [-1]], [[25, 20], [24], [-1]], [[33, 3], [32], [-1]], [[31, 18], [30], [-1]], [[22, 17], [22], [-1]], [[99, 3], [98], [-1]], [[11, 5], [10], [-1]], [[999, 102], [998], [-1]], [[4, 2], [4], [-1]], [[24, 9], [24], [-1]], [[99, 20], [98], [-1]], [[11, 9], [10], [-1]], [[32, 11], [32], [-1]], [[1000, 6], [1000], [-1]], [[1999, 1], [1998], [-1]], [[29, 1], [28], [-1]], [[1001, 18], [1000], [-1]], [[29, 18], [28], [-1]], [[2000, 99], [2000], [-1]], [[32, 18], [32], [-1]], [[10, 1], [10], [-1]], [[26, 25], [26], [-1]], [[28, 2], [28], [-1]], [[27, 10], [26], [-1]], [[2000, 16], [2000], [-1]], [[102, 10], [102], [-1]], [[999, 18], [998], [-1]], [[9, 8], [8], [-1]], [[9, 6], [8], [-1]], [[2000, 101], [2000], [-1]], [[22, 8], [22], [-1]], [[16, 6], [16], [-1]], [[101, 20], [100], [-1]], [[18, 17], [18], [-1]], [[10, 5], [10], [-1]], [[22, 21], [22], [-1]], [[999, 24], [998], [-1]], [[22, 10], [22], [-1]], [[7, 6], [6], [-1]], [[99, 26], [98], [-1]], [[102, 20], [102], [-1]], [[103, 7], [102], [-1]], [[1999, 21], [1998], [-1]], [[1999, 997], [1998], [-1]], [[1003, 1002], [1002], [-1]], [[32, 10], [32], [-1]], [[7, 3], [6], [-1]], [[31, 16], [30], [-1]], [[99, 98], [98], [-1]], [[100, 21], [100], [-1]], [[100, 11], [100], [-1]], [[98, 32], [98], [-1]], [[24, 6], [24], [-1]], [[1003, 1001], [1002], [-1]], [[1999, 1000], [1998], [-1]], [[30, 7], [30], [-1]], [[999, 99], [998], [-1]], [[34, 25], [34], [-1]], [[19, 3], [18], [-1]], [[34, 4], [34], [-1]], [[7, 2], [6], [-1]], [[1999, 19], [1998], [-1]], [[1001, 7], [1000], [-1]], [[22, 5], [22], [-1]], [[22, 6], [22], [-1]], [[32, 21], [32], [-1]], [[29, 6], [28], [-1]], [[16, 3], [16], [-1]], [[998, 10], [998], [-1]], [[1999, 99], [1998], [-1]], [[27, 7], [26], [-1]], [[34, 5], [34], [-1]], [[104, 7], [104], [-1]], [[100, 62], [100], [-1]], [[28, 27], [28], [-1]], [[100, 3], [100], [-1]], [[98, 21], [98], [-1]], [[25, 17], [24], [-1]], [[24, 23], [24], [-1]], [[1003, 998], [1002], [-1]], [[998, 997], [998], [-1]], [[22, 1], [22], [-1]], [[101, 32], [100], [-1]], [[1000, 999], [1000], [-1]], [[999, 28], [998], [-1]], [[100, 99], [100], [-1]], [[34, 33], [34], [-1]], [[30, 3], [30], [-1]], [[1000, 29], [1000], [-1]], [[18, 3], [18], [-1]], [[98, 7], [98], [-1]], [[34, 2], [34], [-1]], [[1001, 70], [1000], [-1]], [[1001, 998], [1000], [-1]], [[21, 18], [20], [-1]], [[998, 8], [998], [-1]], [[23, 1], [22], [-1]], [[2000, 3], [2000], [-1]], [[1004, 1003], [1004], [-1]], [[103, 99], [102], [-1]], [[1003, 7], [1002], [-1]], [[5, 3], [4], [-1]], [[1002, 1001], [1002], [-1]], [[102, 101], [102], [-1]], [[2000, 1004], [2000], [-1]], [[21, 8], [20], [-1]], [[99, 70], [98], [-1]], [[20, 8], [20], [-1]], [[33, 30], [32], [-1]], [[25, 9], [24], [-1]], [[31, 4], [30], [-1]], [[70, 5], [70], [-1]], [[31, 28], [30], [-1]], [[1999, 1004], [1998], [-1]], [[104, 29], [104], [-1]], [[997, 4], [996], [-1]], [[1000, 19], [1000], [-1]], [[23, 10], [22], [-1]], [[998, 6], [998], [-1]], [[30, 29], [30], [-1]], [[70, 32], [70], [-1]], [[27, 20], [26], [-1]], [[102, 21], [102], [-1]], [[8, 3], [8], [-1]], [[19, 4], [18], [-1]], [[33, 6], [32], [-1]], [[102, 99], [102], [-1]], [[28, 12], [28], [-1]], [[1001, 99], [1000], [-1]], [[999, 23], [998], [-1]], [[18, 1], [18], [-1]], [[103, 6], [102], [-1]], [[8, 6], [8], [-1]], [[28, 25], [28], [-1]], [[99, 12], [98], [-1]], [[32, 30], [32], [-1]], [[104, 27], [104], [-1]], [[28, 17], [28], [-1]], [[11, 8], [10], [-1]], [[2000, 24], [2000], [-1]], [[32, 31], [32], [-1]], [[26, 23], [26], [-1]], [[27, 26], [26], [-1]], [[29, 17], [28], [-1]], [[32, 23], [32], [-1]], [[22, 9], [22], [-1]], [[17, 5], [16], [-1]], [[34, 20], [34], [-1]], [[9, 2], [8], [-1]], [[35, 1], [34], [-1]], [[2000, 23], [2000], [-1]], [[2000, 62], [2000], [-1]], [[100, 63], [100], [-1]], [[996, 4], [996], [-1]], [[18, 4], [18], [-1]], [[101, 71], [100], [-1]], [[1003, 20], [1002], [-1]], [[70, 21], [70], [-1]], [[10, 3], [10], [-1]], [[72, 71], [72], [-1]], [[31, 17], [30], [-1]], [[62, 21], [62], [-1]], [[2001, 21], [2000], [-1]], [[1004, 18], [1004], [-1]], [[18, 2], [18], [-1]], [[104, 103], [104], [-1]], [[27, 18], [26], [-1]], [[1999, 98], [1998], [-1]], [[21, 7], [20], [-1]], [[30, 17], [30], [-1]], [[17, 8], [16], [-1]], [[29, 12], [28], [-1]], [[2001, 16], [2000], [-1]], [[27, 23], [26], [-1]], [[2000, 999], [2000], [-1]], [[30, 23], [30], [-1]], [[23, 8], [22], [-1]], [[27, 17], [26], [-1]], [[2000, 17], [2000], [-1]], [[999, 30], [998], [-1]], [[2000, 100], [2000], [-1]], [[30, 2], [30], [-1]], [[21, 10], [20], [-1]], [[100, 2], [100], [-1]], [[99, 2], [98], [-1]], [[99, 23], [98], [-1]], [[1000, 9], [1000], [-1]], [[30, 22], [30], [-1]], [[1000, 17], [1000], [-1]], [[999, 17], [998], [-1]], [[999, 100], [998], [-1]], [[31, 21], [30], [-1]], [[2001, 20], [2000], [-1]], [[27, 2], [26], [-1]], [[23, 9], [22], [-1]], [[29, 23], [28], [-1]], [[1999, 29], [1998], [-1]], [[999, 1], [998], [-1]], [[99, 7], [98], [-1]], [[5, 2], [4], [-1]], [[10, 9], [10], [-1]], [[30, 16], [30], [-1]], [[22, 18], [22], [-1]], [[1999, 999], [1998], [-1]], [[1999, 31], [1998], [-1]], [[99, 16], [98], [-1]], [[16, 10], [16], [-1]], [[11, 2], [10], [-1]], [[999, 9], [998], [-1]], [[99, 1], [98], [-1]], [[31, 7], [30], [-1]], [[23, 17], [22], [-1]], [[2000, 18], [2000], [-1]], [[99, 17], [98], [-1]], [[10, 7], [10], [-1]], [[21, 16], [20], [-1]], [[23, 7], [22], [-1]], [[1999, 8], [1998], [-1]], [[999, 20], [998], [-1]], [[1000, 16], [1000], [-1]], [[999, 21], [998], [-1]], [[26, 7], [26], [-1]], [[18, 7], [18], [-1]], [[44, 43], [44], [-1]], [[30, 10], [30], [-1]], [[2000, 7], [2000], [-1]], [[99, 24], [98], [-1]], [[2000, 1], [2000], [-1]], [[999, 10], [998], [-1]], [[1001, 24], [1000], [-1]], [[29, 22], [28], [-1]], [[2000, 20], [2000], [-1]], [[2001, 100], [2000], [-1]], [[99, 30], [98], [-1]], [[102, 30], [102], [-1]], [[999, 5], [998], [-1]], [[19, 7], [18], [-1]], [[2001, 1001], [2000], [-1]], [[102, 15], [102], [-1]], [[999, 19], [998], [-1]], [[2002, 31], [2002], [-1]], [[98, 17], [98], [-1]], [[2002, 30], [2002], [-1]], [[2001, 9], [2000], [-1]], [[1999, 11], [1998], [-1]], [[31, 8], [30], [-1]], [[1999, 17], [1998], [-1]], [[28, 8], [28], [-1]], [[24, 17], [24], [-1]], [[29, 5], [28], [-1]], [[1001, 11], [1000], [-1]], [[999, 26], [998], [-1]], [[44, 9], [44], [-1]], [[2002, 997], [2002], [-1]], [[2000, 10], [2000], [-1]], [[2000, 5], [2000], [-1]], [[101, 10], [100], [-1]], [[2003, 11], [2002], [-1]], [[31, 6], [30], [-1]], [[30, 5], [30], [-1]], [[2001, 7], [2000], [-1]], [[1999, 30], [1998], [-1]], [[24, 5], [24], [-1]], [[1001, 23], [1000], [-1]], [[998, 1], [998], [-1]], [[15, 10], [14], [-1]], [[16, 9], [16], [-1]], [[102, 24], [102], [-1]], [[998, 29], [998], [-1]], [[2002, 2000], [2002], [-1]], [[44, 6], [44], [-1]], [[102, 100], [102], [-1]], [[1001, 100], [1000], [-1]], [[15, 2], [14], [-1]], [[2002, 10], [2002], [-1]], [[23, 15], [22], [-1]], [[25, 5], [24], [-1]], [[1001, 22], [1000], [-1]], [[99, 21], [98], [-1]], [[2000, 1000], [2000], [-1]], [[32, 5], [32], [-1]], [[2004, 2003], [2004], [-1]], [[18, 16], [18], [-1]], [[2001, 17], [2000], [-1]], [[2002, 2001], [2002], [-1]], [[30, 15], [30], [-1]], [[1002, 22], [1002], [-1]], [[31, 10], [30], [-1]], [[998, 101], [998], [-1]], [[23, 22], [22], [-1]], [[101, 21], [100], [-1]], [[998, 23], [998], [-1]], [[2003, 7], [2002], [-1]], [[43, 1], [42], [-1]], [[1001, 20], [1000], [-1]], [[1001, 30], [1000], [-1]], [[1998, 999], [1998], [-1]], [[1998, 9], [1998], [-1]], [[998, 28], [998], [-1]], [[24, 20], [24], [-1]], [[999, 7], [998], [-1]], [[99, 25], [98], [-1]], [[1001, 101], [1000], [-1]], [[16, 1], [16], [-1]], [[100, 5], [100], [-1]], [[25, 24], [24], [-1]], [[2000, 9], [2000], [-1]], [[1998, 31], [1998], [-1]], [[1999, 27], [1998], [-1]], [[31, 14], [30], [-1]], [[1999, 101], [1998], [-1]], [[998, 9], [998], [-1]], [[997, 23], [996], [-1]], [[26, 6], [26], [-1]], [[997, 101], [996], [-1]], [[2004, 31], [2004], [-1]], [[31, 30], [30], [-1]], [[1000, 23], [1000], [-1]], [[24, 16], [24], [-1]], [[28, 16], [28], [-1]], [[100, 19], [100], [-1]], [[44, 7], [44], [-1]], [[16, 5], [16], [-1]], [[997, 22], [996], [-1]], [[16, 15], [16], [-1]], [[2000, 1999], [2000], [-1]], [[1999, 102], [1998], [-1]], [[103, 102], [102], [-1]], [[31, 24], [30], [-1]], [[21, 6], [20], [-1]], [[26, 5], [26], [-1]], [[1000, 998], [1000], [-1]], [[2004, 8], [2004], [-1]], [[9, 7], [8], [-1]], [[20, 16], [20], [-1]], [[103, 27], [102], [-1]], [[102, 18], [102], [-1]], [[6, 4], [6], [-1]], [[2001, 104], [2000], [-1]], [[100, 43], [100], [-1]], [[1998, 43], [1998], [-1]], [[2002, 999], [2002], [-1]], [[43, 30], [42], [-1]], [[102, 9], [102], [-1]], [[2003, 5], [2002], [-1]], [[1002, 102], [1002], [-1]], [[1999, 998], [1998], [-1]], [[2003, 10], [2002], [-1]], [[14, 2], [14], [-1]], [[1000, 30], [1000], [-1]], [[22, 11], [22], [-1]], [[8, 5], [8], [-1]], [[96, 4], [96], [-1]], [[12, 8], [12], [-1]], [[18, 9], [18], [-1]], [[23, 20], [22], [-1]]], [[[13, 12], [12], [-1]], [[5234, 5233], [5234], [-1]], [[27, 10], [26], [-1]], [[100, 6], [100], [-1]], [[101, 6], [100], [-1]], [[21, 3], [20], [-1]], [[100, 35], [100], [-1]], [[60, 50], [60], [-1]], [[28, 1], [28], [-1]], [[200, 5], [200], [-1]], [[60, 6], [60], [-1]], [[30, 6], [30], [-1]], [[30, 1], [30], [-1]], [[21, 5], [20], [-1]], [[6, 5], [6], [-1]], [[13, 10], [12], [-1]], [[199, 12], [198], [-1]], [[14, 13], [14], [-1]], [[60, 11], [60], [-1]], [[100, 30], [100], [-1]], [[15, 14], [14], [-1]], [[36, 29], [36], [-1]], [[12, 11], [12], [-1]], [[100, 15], [100], [-1]], [[100, 13], [100], [-1]], [[200, 101], [200], [-1]], [[101, 15], [100], [-1]], [[36, 35], [36], [-1]], [[30, 21], [30], [-1]], [[12, 3], [12], [-1]], [[10, 4], [10], [-1]], [[21, 20], [20], [-1]], [[200, 199], [200], [-1]], [[99, 5], [98], [-1]], [[60, 21], [60], [-1]], [[20, 5], [20], [-1]], [[100, 98], [100], [-1]], [[60, 59], [60], [-1]], [[59, 21], [58], [-1]], [[101, 34], [100], [-1]], [[201, 1], [200], [-1]], [[50, 3], [50], [-1]], [[201, 200], [200], [-1]], [[201, 199], [200], [-1]], [[61, 60], [60], [-1]], [[999, 998], [998], [-1]], [[31, 1], [30], [-1]], [[100, 23], [100], [-1]], [[101, 100], [100], [-1]], [[101, 18], [100], [-1]], [[998, 31], [998], [-1]], [[2000, 21], [2000], [-1]], [[1000, 2], [1000], [-1]], [[8, 1], [8], [-1]], [[10, 2], [10], [-1]], [[31, 20], [30], [-1]], [[32, 1], [32], [-1]], [[20, 19], [20], [-1]], [[99, 31], [98], [-1]], [[32, 7], [32], [-1]], [[32, 6], [32], [-1]], [[2000, 998], [2000], [-1]], [[102, 22], [102], [-1]], [[1000, 24], [1000], [-1]], [[18, 6], [18], [-1]], [[100, 10], [100], [-1]], [[24, 7], [24], [-1]], [[1000, 22], [1000], [-1]], [[23, 21], [22], [-1]], [[32, 3], [32], [-1]], [[9, 5], [8], [-1]], [[3, 1], [2], [-1]], [[8, 7], [8], [-1]], [[3, 2], [2], [-1]], [[27, 6], [26], [-1]], [[20, 7], [20], [-1]], [[2, 1], [2], [-1]], [[100, 31], [100], [-1]], [[23, 18], [22], [-1]], [[99, 32], [98], [-1]], [[1000, 10], [1000], [-1]], [[1000, 1], [1000], [-1]], [[100, 22], [100], [-1]], [[23, 6], [22], [-1]], [[18, 8], [18], [-1]], [[33, 32], [32], [-1]], [[2001, 2000], [2000], [-1]], [[1000, 28], [1000], [-1]], [[22, 4], [22], [-1]], [[8, 2], [8], [-1]], [[11, 10], [10], [-1]], [[32, 22], [32], [-1]], [[29, 28], [28], [-1]], [[99, 10], [98], [-1]], [[7, 1], [6], [-1]], [[17, 7], [16], [-1]], [[1999, 28], [1998], [-1]], [[21, 19], [20], [-1]], [[998, 100], [998], [-1]], [[24, 10], [24], [-1]], [[33, 24], [32], [-1]], [[99, 6], [98], [-1]], [[998, 32], [998], [-1]], [[25, 20], [24], [-1]], [[33, 3], [32], [-1]], [[31, 18], [30], [-1]], [[22, 17], [22], [-1]], [[99, 3], [98], [-1]], [[11, 5], [10], [-1]], [[999, 102], [998], [-1]], [[4, 2], [4], [-1]], [[24, 9], [24], [-1]], [[99, 20], [98], [-1]], [[11, 9], [10], [-1]], [[32, 11], [32], [-1]], [[1000, 6], [1000], [-1]], [[1999, 1], [1998], [-1]], [[29, 1], [28], [-1]], [[1001, 18], [1000], [-1]], [[29, 18], [28], [-1]], [[2000, 99], [2000], [-1]], [[32, 18], [32], [-1]], [[10, 1], [10], [-1]], [[26, 25], [26], [-1]], [[28, 2], [28], [-1]], [[27, 10], [26], [-1]], [[2000, 16], [2000], [-1]], [[102, 10], [102], [-1]], [[999, 18], [998], [-1]], [[9, 8], [8], [-1]], [[9, 6], [8], [-1]], [[2000, 101], [2000], [-1]], [[22, 8], [22], [-1]], [[16, 6], [16], [-1]], [[101, 20], [100], [-1]], [[18, 17], [18], [-1]], [[10, 5], [10], [-1]], [[22, 21], [22], [-1]], [[999, 24], [998], [-1]], [[22, 10], [22], [-1]], [[7, 6], [6], [-1]], [[99, 26], [98], [-1]], [[102, 20], [102], [-1]], [[103, 7], [102], [-1]], [[1999, 21], [1998], [-1]], [[1999, 997], [1998], [-1]], [[1003, 1002], [1002], [-1]], [[32, 10], [32], [-1]], [[7, 3], [6], [-1]], [[31, 16], [30], [-1]], [[99, 98], [98], [-1]], [[100, 21], [100], [-1]], [[100, 11], [100], [-1]], [[98, 32], [98], [-1]], [[24, 6], [24], [-1]], [[1003, 1001], [1002], [-1]], [[1999, 1000], [1998], [-1]], [[30, 7], [30], [-1]], [[999, 99], [998], [-1]], [[34, 25], [34], [-1]], [[19, 3], [18], [-1]], [[34, 4], [34], [-1]], [[7, 2], [6], [-1]], [[1999, 19], [1998], [-1]], [[1001, 7], [1000], [-1]], [[22, 5], [22], [-1]], [[22, 6], [22], [-1]], [[32, 21], [32], [-1]], [[29, 6], [28], [-1]], [[16, 3], [16], [-1]], [[998, 10], [998], [-1]], [[1999, 99], [1998], [-1]], [[27, 7], [26], [-1]], [[34, 5], [34], [-1]], [[104, 7], [104], [-1]], [[100, 62], [100], [-1]], [[28, 27], [28], [-1]], [[100, 3], [100], [-1]], [[98, 21], [98], [-1]], [[25, 17], [24], [-1]], [[24, 23], [24], [-1]], [[1003, 998], [1002], [-1]], [[998, 997], [998], [-1]], [[22, 1], [22], [-1]], [[101, 32], [100], [-1]], [[1000, 999], [1000], [-1]], [[999, 28], [998], [-1]], [[100, 99], [100], [-1]], [[34, 33], [34], [-1]], [[30, 3], [30], [-1]], [[1000, 29], [1000], [-1]], [[18, 3], [18], [-1]], [[98, 7], [98], [-1]], [[34, 2], [34], [-1]], [[1001, 70], [1000], [-1]], [[1001, 998], [1000], [-1]], [[21, 18], [20], [-1]], [[998, 8], [998], [-1]], [[23, 1], [22], [-1]], [[2000, 3], [2000], [-1]], [[1004, 1003], [1004], [-1]], [[103, 99], [102], [-1]], [[1003, 7], [1002], [-1]], [[5, 3], [4], [-1]], [[1002, 1001], [1002], [-1]], [[102, 101], [102], [-1]], [[2000, 1004], [2000], [-1]], [[21, 8], [20], [-1]], [[99, 70], [98], [-1]], [[20, 8], [20], [-1]], [[33, 30], [32], [-1]], [[25, 9], [24], [-1]], [[31, 4], [30], [-1]], [[70, 5], [70], [-1]], [[31, 28], [30], [-1]], [[1999, 1004], [1998], [-1]], [[104, 29], [104], [-1]], [[997, 4], [996], [-1]], [[1000, 19], [1000], [-1]], [[23, 10], [22], [-1]], [[998, 6], [998], [-1]], [[30, 29], [30], [-1]], [[70, 32], [70], [-1]], [[27, 20], [26], [-1]], [[102, 21], [102], [-1]], [[8, 3], [8], [-1]], [[19, 4], [18], [-1]], [[33, 6], [32], [-1]], [[102, 99], [102], [-1]], [[28, 12], [28], [-1]], [[1001, 99], [1000], [-1]], [[999, 23], [998], [-1]], [[18, 1], [18], [-1]], [[103, 6], [102], [-1]], [[8, 6], [8], [-1]], [[28, 25], [28], [-1]], [[99, 12], [98], [-1]], [[32, 30], [32], [-1]], [[104, 27], [104], [-1]], [[28, 17], [28], [-1]], [[11, 8], [10], [-1]], [[2000, 24], [2000], [-1]], [[32, 31], [32], [-1]], [[26, 23], [26], [-1]], [[27, 26], [26], [-1]], [[29, 17], [28], [-1]], [[32, 23], [32], [-1]], [[22, 9], [22], [-1]], [[17, 5], [16], [-1]], [[34, 20], [34], [-1]], [[9, 2], [8], [-1]], [[35, 1], [34], [-1]], [[2000, 23], [2000], [-1]], [[2000, 62], [2000], [-1]], [[100, 63], [100], [-1]], [[996, 4], [996], [-1]], [[18, 4], [18], [-1]], [[101, 71], [100], [-1]], [[1003, 20], [1002], [-1]], [[70, 21], [70], [-1]], [[10, 3], [10], [-1]], [[72, 71], [72], [-1]], [[31, 17], [30], [-1]], [[62, 21], [62], [-1]], [[2001, 21], [2000], [-1]], [[1004, 18], [1004], [-1]], [[18, 2], [18], [-1]], [[104, 103], [104], [-1]], [[27, 18], [26], [-1]], [[1999, 98], [1998], [-1]], [[21, 7], [20], [-1]], [[30, 17], [30], [-1]], [[17, 8], [16], [-1]], [[29, 12], [28], [-1]], [[2001, 16], [2000], [-1]], [[27, 23], [26], [-1]], [[2000, 999], [2000], [-1]], [[30, 23], [30], [-1]], [[23, 8], [22], [-1]], [[27, 17], [26], [-1]], [[2000, 17], [2000], [-1]], [[999, 30], [998], [-1]], [[2000, 100], [2000], [-1]], [[30, 2], [30], [-1]], [[21, 10], [20], [-1]], [[100, 2], [100], [-1]], [[99, 2], [98], [-1]], [[99, 23], [98], [-1]], [[1000, 9], [1000], [-1]], [[30, 22], [30], [-1]], [[1000, 17], [1000], [-1]], [[999, 17], [998], [-1]], [[999, 100], [998], [-1]], [[31, 21], [30], [-1]], [[2001, 20], [2000], [-1]], [[27, 2], [26], [-1]], [[23, 9], [22], [-1]], [[29, 23], [28], [-1]], [[1999, 29], [1998], [-1]], [[999, 1], [998], [-1]], [[99, 7], [98], [-1]], [[5, 2], [4], [-1]], [[10, 9], [10], [-1]], [[30, 16], [30], [-1]], [[22, 18], [22], [-1]], [[1999, 999], [1998], [-1]], [[1999, 31], [1998], [-1]], [[99, 16], [98], [-1]], [[16, 10], [16], [-1]], [[11, 2], [10], [-1]], [[999, 9], [998], [-1]], [[99, 1], [98], [-1]], [[31, 7], [30], [-1]], [[23, 17], [22], [-1]], [[2000, 18], [2000], [-1]], [[99, 17], [98], [-1]], [[10, 7], [10], [-1]], [[21, 16], [20], [-1]], [[23, 7], [22], [-1]], [[1999, 8], [1998], [-1]], [[999, 20], [998], [-1]], [[1000, 16], [1000], [-1]], [[999, 21], [998], [-1]], [[26, 7], [26], [-1]], [[18, 7], [18], [-1]], [[44, 43], [44], [-1]], [[30, 10], [30], [-1]], [[2000, 7], [2000], [-1]], [[99, 24], [98], [-1]], [[2000, 1], [2000], [-1]], [[999, 10], [998], [-1]], [[1001, 24], [1000], [-1]], [[29, 22], [28], [-1]], [[2000, 20], [2000], [-1]], [[2001, 100], [2000], [-1]], [[99, 30], [98], [-1]], [[102, 30], [102], [-1]], [[999, 5], [998], [-1]], [[19, 7], [18], [-1]], [[2001, 1001], [2000], [-1]], [[102, 15], [102], [-1]], [[999, 19], [998], [-1]], [[2002, 31], [2002], [-1]], [[98, 17], [98], [-1]], [[2002, 30], [2002], [-1]], [[2001, 9], [2000], [-1]], [[1999, 11], [1998], [-1]], [[31, 8], [30], [-1]], [[1999, 17], [1998], [-1]], [[28, 8], [28], [-1]], [[24, 17], [24], [-1]], [[29, 5], [28], [-1]], [[1001, 11], [1000], [-1]], [[999, 26], [998], [-1]], [[44, 9], [44], [-1]], [[2002, 997], [2002], [-1]], [[2000, 10], [2000], [-1]], [[2000, 5], [2000], [-1]], [[101, 10], [100], [-1]], [[2003, 11], [2002], [-1]], [[31, 6], [30], [-1]], [[30, 5], [30], [-1]], [[2001, 7], [2000], [-1]], [[1999, 30], [1998], [-1]], [[24, 5], [24], [-1]], [[1001, 23], [1000], [-1]], [[998, 1], [998], [-1]], [[15, 10], [14], [-1]], [[16, 9], [16], [-1]], [[102, 24], [102], [-1]], [[998, 29], [998], [-1]], [[2002, 2000], [2002], [-1]], [[44, 6], [44], [-1]], [[102, 100], [102], [-1]], [[1001, 100], [1000], [-1]], [[15, 2], [14], [-1]], [[2002, 10], [2002], [-1]], [[23, 15], [22], [-1]], [[25, 5], [24], [-1]], [[1001, 22], [1000], [-1]], [[99, 21], [98], [-1]], [[2000, 1000], [2000], [-1]], [[32, 5], [32], [-1]], [[2004, 2003], [2004], [-1]], [[18, 16], [18], [-1]], [[2001, 17], [2000], [-1]], [[2002, 2001], [2002], [-1]], [[30, 15], [30], [-1]], [[1002, 22], [1002], [-1]], [[31, 10], [30], [-1]], [[998, 101], [998], [-1]], [[23, 22], [22], [-1]], [[101, 21], [100], [-1]], [[998, 23], [998], [-1]], [[2003, 7], [2002], [-1]], [[43, 1], [42], [-1]], [[1001, 20], [1000], [-1]], [[1001, 30], [1000], [-1]], [[1998, 999], [1998], [-1]], [[1998, 9], [1998], [-1]], [[998, 28], [998], [-1]], [[24, 20], [24], [-1]], [[999, 7], [998], [-1]], [[99, 25], [98], [-1]], [[1001, 101], [1000], [-1]], [[16, 1], [16], [-1]], [[100, 5], [100], [-1]], [[25, 24], [24], [-1]], [[2000, 9], [2000], [-1]], [[1998, 31], [1998], [-1]], [[1999, 27], [1998], [-1]], [[31, 14], [30], [-1]], [[1999, 101], [1998], [-1]], [[998, 9], [998], [-1]], [[997, 23], [996], [-1]], [[26, 6], [26], [-1]], [[997, 101], [996], [-1]], [[2004, 31], [2004], [-1]], [[31, 30], [30], [-1]], [[1000, 23], [1000], [-1]], [[24, 16], [24], [-1]], [[28, 16], [28], [-1]], [[100, 19], [100], [-1]], [[44, 7], [44], [-1]], [[16, 5], [16], [-1]], [[997, 22], [996], [-1]], [[16, 15], [16], [-1]], [[2000, 1999], [2000], [-1]], [[1999, 102], [1998], [-1]], [[103, 102], [102], [-1]], [[31, 24], [30], [-1]], [[21, 6], [20], [-1]], [[26, 5], [26], [-1]], [[1000, 998], [1000], [-1]], [[2004, 8], [2004], [-1]], [[9, 7], [8], [-1]], [[20, 16], [20], [-1]], [[103, 27], [102], [-1]], [[102, 18], [102], [-1]], [[6, 4], [6], [-1]], [[2001, 104], [2000], [-1]], [[100, 43], [100], [-1]], [[1998, 43], [1998], [-1]], [[2002, 999], [2002], [-1]], [[43, 30], [42], [-1]], [[102, 9], [102], [-1]], [[2003, 5], [2002], [-1]], [[1002, 102], [1002], [-1]], [[1999, 998], [1998], [-1]], [[2003, 10], [2002], [-1]], [[14, 2], [14], [-1]], [[1000, 30], [1000], [-1]], [[22, 11], [22], [-1]], [[8, 5], [8], [-1]], [[96, 4], [96], [-1]], [[12, 8], [12], [-1]], [[18, 9], [18], [-1]], [[23, 20], [22], [-1]]], [[[13, 12], [12], [-1]], [[5234, 5233], [5234], [-1]], [[27, 10], [26], [-1]], [[100, 6], [100], [-1]], [[101, 6], [100], [-1]], [[21, 3], [20], [-1]], [[100, 35], [100], [-1]], [[60, 50], [60], [-1]], [[28, 1], [28], [-1]], [[200, 5], [200], [-1]], [[60, 6], [60], [-1]], [[30, 6], [30], [-1]], [[30, 1], [30], [-1]], [[21, 5], [20], [-1]], [[6, 5], [6], [-1]], [[13, 10], [12], [-1]], [[199, 12], [198], [-1]], [[14, 13], [14], [-1]], [[60, 11], [60], [-1]], [[100, 30], [100], [-1]], [[15, 14], [14], [-1]], [[36, 29], [36], [-1]], [[12, 11], [12], [-1]], [[100, 15], [100], [-1]], [[100, 13], [100], [-1]], [[200, 101], [200], [-1]], [[101, 15], [100], [-1]], [[36, 35], [36], [-1]], [[30, 21], [30], [-1]], [[12, 3], [12], [-1]], [[10, 4], [10], [-1]], [[21, 20], [20], [-1]], [[200, 199], [200], [-1]], [[99, 5], [98], [-1]], [[60, 21], [60], [-1]], [[20, 5], [20], [-1]], [[100, 98], [100], [-1]], [[60, 59], [60], [-1]], [[59, 21], [58], [-1]], [[101, 34], [100], [-1]], [[201, 1], [200], [-1]], [[50, 3], [50], [-1]], [[201, 200], [200], [-1]], [[201, 199], [200], [-1]], [[61, 60], [60], [-1]], [[999, 998], [998], [-1]], [[31, 1], [30], [-1]], [[100, 23], [100], [-1]], [[101, 100], [100], [-1]], [[101, 18], [100], [-1]], [[998, 31], [998], [-1]], [[2000, 21], [2000], [-1]], [[1000, 2], [1000], [-1]], [[8, 1], [8], [-1]], [[10, 2], [10], [-1]], [[31, 20], [30], [-1]], [[32, 1], [32], [-1]], [[20, 19], [20], [-1]], [[99, 31], [98], [-1]], [[32, 7], [32], [-1]], [[32, 6], [32], [-1]], [[2000, 998], [2000], [-1]], [[102, 22], [102], [-1]], [[1000, 24], [1000], [-1]], [[18, 6], [18], [-1]], [[100, 10], [100], [-1]], [[24, 7], [24], [-1]], [[1000, 22], [1000], [-1]], [[23, 21], [22], [-1]], [[32, 3], [32], [-1]], [[9, 5], [8], [-1]], [[3, 1], [2], [-1]], [[8, 7], [8], [-1]], [[3, 2], [2], [-1]], [[27, 6], [26], [-1]], [[20, 7], [20], [-1]], [[2, 1], [2], [-1]], [[100, 31], [100], [-1]], [[23, 18], [22], [-1]], [[99, 32], [98], [-1]], [[1000, 10], [1000], [-1]], [[1000, 1], [1000], [-1]], [[100, 22], [100], [-1]], [[23, 6], [22], [-1]], [[18, 8], [18], [-1]], [[33, 32], [32], [-1]], [[2001, 2000], [2000], [-1]], [[1000, 28], [1000], [-1]], [[22, 4], [22], [-1]], [[8, 2], [8], [-1]], [[11, 10], [10], [-1]], [[32, 22], [32], [-1]], [[29, 28], [28], [-1]], [[99, 10], [98], [-1]], [[7, 1], [6], [-1]], [[17, 7], [16], [-1]], [[1999, 28], [1998], [-1]], [[21, 19], [20], [-1]], [[998, 100], [998], [-1]], [[24, 10], [24], [-1]], [[33, 24], [32], [-1]], [[99, 6], [98], [-1]], [[998, 32], [998], [-1]], [[25, 20], [24], [-1]], [[33, 3], [32], [-1]], [[31, 18], [30], [-1]], [[22, 17], [22], [-1]], [[99, 3], [98], [-1]], [[11, 5], [10], [-1]], [[999, 102], [998], [-1]], [[4, 2], [4], [-1]], [[24, 9], [24], [-1]], [[99, 20], [98], [-1]], [[11, 9], [10], [-1]], [[32, 11], [32], [-1]], [[1000, 6], [1000], [-1]], [[1999, 1], [1998], [-1]], [[29, 1], [28], [-1]], [[1001, 18], [1000], [-1]], [[29, 18], [28], [-1]], [[2000, 99], [2000], [-1]], [[32, 18], [32], [-1]], [[10, 1], [10], [-1]], [[26, 25], [26], [-1]], [[28, 2], [28], [-1]], [[27, 10], [26], [-1]], [[2000, 16], [2000], [-1]], [[102, 10], [102], [-1]], [[999, 18], [998], [-1]], [[9, 8], [8], [-1]], [[9, 6], [8], [-1]], [[2000, 101], [2000], [-1]], [[22, 8], [22], [-1]], [[16, 6], [16], [-1]], [[101, 20], [100], [-1]], [[18, 17], [18], [-1]], [[10, 5], [10], [-1]], [[22, 21], [22], [-1]], [[999, 24], [998], [-1]], [[22, 10], [22], [-1]], [[7, 6], [6], [-1]], [[99, 26], [98], [-1]], [[102, 20], [102], [-1]], [[103, 7], [102], [-1]], [[1999, 21], [1998], [-1]], [[1999, 997], [1998], [-1]], [[1003, 1002], [1002], [-1]], [[32, 10], [32], [-1]], [[7, 3], [6], [-1]], [[31, 16], [30], [-1]], [[99, 98], [98], [-1]], [[100, 21], [100], [-1]], [[100, 11], [100], [-1]], [[98, 32], [98], [-1]], [[24, 6], [24], [-1]], [[1003, 1001], [1002], [-1]], [[1999, 1000], [1998], [-1]], [[30, 7], [30], [-1]], [[999, 99], [998], [-1]], [[34, 25], [34], [-1]], [[19, 3], [18], [-1]], [[34, 4], [34], [-1]], [[7, 2], [6], [-1]], [[1999, 19], [1998], [-1]], [[1001, 7], [1000], [-1]], [[22, 5], [22], [-1]], [[22, 6], [22], [-1]], [[32, 21], [32], [-1]], [[29, 6], [28], [-1]], [[16, 3], [16], [-1]], [[998, 10], [998], [-1]], [[1999, 99], [1998], [-1]], [[27, 7], [26], [-1]], [[34, 5], [34], [-1]], [[104, 7], [104], [-1]], [[100, 62], [100], [-1]], [[28, 27], [28], [-1]], [[100, 3], [100], [-1]], [[98, 21], [98], [-1]], [[25, 17], [24], [-1]], [[24, 23], [24], [-1]], [[1003, 998], [1002], [-1]], [[998, 997], [998], [-1]], [[22, 1], [22], [-1]], [[101, 32], [100], [-1]], [[1000, 999], [1000], [-1]], [[999, 28], [998], [-1]], [[100, 99], [100], [-1]], [[34, 33], [34], [-1]], [[30, 3], [30], [-1]], [[1000, 29], [1000], [-1]], [[18, 3], [18], [-1]], [[98, 7], [98], [-1]], [[34, 2], [34], [-1]], [[1001, 70], [1000], [-1]], [[1001, 998], [1000], [-1]], [[21, 18], [20], [-1]], [[998, 8], [998], [-1]], [[23, 1], [22], [-1]], [[2000, 3], [2000], [-1]], [[1004, 1003], [1004], [-1]], [[103, 99], [102], [-1]], [[1003, 7], [1002], [-1]], [[5, 3], [4], [-1]], [[1002, 1001], [1002], [-1]], [[102, 101], [102], [-1]], [[2000, 1004], [2000], [-1]], [[21, 8], [20], [-1]], [[99, 70], [98], [-1]], [[20, 8], [20], [-1]], [[33, 30], [32], [-1]], [[25, 9], [24], [-1]], [[31, 4], [30], [-1]], [[70, 5], [70], [-1]], [[31, 28], [30], [-1]], [[1999, 1004], [1998], [-1]], [[104, 29], [104], [-1]], [[997, 4], [996], [-1]], [[1000, 19], [1000], [-1]], [[23, 10], [22], [-1]], [[998, 6], [998], [-1]], [[30, 29], [30], [-1]], [[70, 32], [70], [-1]], [[27, 20], [26], [-1]], [[102, 21], [102], [-1]], [[8, 3], [8], [-1]], [[19, 4], [18], [-1]], [[33, 6], [32], [-1]], [[102, 99], [102], [-1]], [[28, 12], [28], [-1]], [[1001, 99], [1000], [-1]], [[999, 23], [998], [-1]], [[18, 1], [18], [-1]], [[103, 6], [102], [-1]], [[8, 6], [8], [-1]], [[28, 25], [28], [-1]], [[99, 12], [98], [-1]], [[32, 30], [32], [-1]], [[104, 27], [104], [-1]], [[28, 17], [28], [-1]], [[11, 8], [10], [-1]], [[2000, 24], [2000], [-1]], [[32, 31], [32], [-1]], [[26, 23], [26], [-1]], [[27, 26], [26], [-1]], [[29, 17], [28], [-1]], [[32, 23], [32], [-1]], [[22, 9], [22], [-1]], [[17, 5], [16], [-1]], [[34, 20], [34], [-1]], [[9, 2], [8], [-1]], [[35, 1], [34], [-1]], [[2000, 23], [2000], [-1]], [[2000, 62], [2000], [-1]], [[100, 63], [100], [-1]], [[996, 4], [996], [-1]], [[18, 4], [18], [-1]], [[101, 71], [100], [-1]], [[1003, 20], [1002], [-1]], [[70, 21], [70], [-1]], [[10, 3], [10], [-1]], [[72, 71], [72], [-1]], [[31, 17], [30], [-1]], [[62, 21], [62], [-1]], [[2001, 21], [2000], [-1]], [[1004, 18], [1004], [-1]], [[18, 2], [18], [-1]], [[104, 103], [104], [-1]], [[27, 18], [26], [-1]], [[1999, 98], [1998], [-1]], [[21, 7], [20], [-1]], [[30, 17], [30], [-1]], [[17, 8], [16], [-1]], [[29, 12], [28], [-1]], [[2001, 16], [2000], [-1]], [[27, 23], [26], [-1]], [[2000, 999], [2000], [-1]], [[30, 23], [30], [-1]], [[23, 8], [22], [-1]], [[27, 17], [26], [-1]], [[2000, 17], [2000], [-1]], [[999, 30], [998], [-1]], [[2000, 100], [2000], [-1]], [[30, 2], [30], [-1]], [[21, 10], [20], [-1]], [[100, 2], [100], [-1]], [[99, 2], [98], [-1]], [[99, 23], [98], [-1]], [[1000, 9], [1000], [-1]], [[30, 22], [30], [-1]], [[1000, 17], [1000], [-1]], [[999, 17], [998], [-1]], [[999, 100], [998], [-1]], [[31, 21], [30], [-1]], [[2001, 20], [2000], [-1]], [[27, 2], [26], [-1]], [[23, 9], [22], [-1]], [[29, 23], [28], [-1]], [[1999, 29], [1998], [-1]], [[999, 1], [998], [-1]], [[99, 7], [98], [-1]], [[5, 2], [4], [-1]], [[10, 9], [10], [-1]], [[30, 16], [30], [-1]], [[22, 18], [22], [-1]], [[1999, 999], [1998], [-1]], [[1999, 31], [1998], [-1]], [[99, 16], [98], [-1]], [[16, 10], [16], [-1]], [[11, 2], [10], [-1]], [[999, 9], [998], [-1]], [[99, 1], [98], [-1]], [[31, 7], [30], [-1]], [[23, 17], [22], [-1]], [[2000, 18], [2000], [-1]], [[99, 17], [98], [-1]], [[10, 7], [10], [-1]], [[21, 16], [20], [-1]], [[23, 7], [22], [-1]], [[1999, 8], [1998], [-1]], [[999, 20], [998], [-1]], [[1000, 16], [1000], [-1]], [[999, 21], [998], [-1]], [[26, 7], [26], [-1]], [[18, 7], [18], [-1]], [[44, 43], [44], [-1]], [[30, 10], [30], [-1]], [[2000, 7], [2000], [-1]], [[99, 24], [98], [-1]], [[2000, 1], [2000], [-1]], [[999, 10], [998], [-1]], [[1001, 24], [1000], [-1]], [[29, 22], [28], [-1]], [[2000, 20], [2000], [-1]], [[2001, 100], [2000], [-1]], [[99, 30], [98], [-1]], [[102, 30], [102], [-1]], [[999, 5], [998], [-1]], [[19, 7], [18], [-1]], [[2001, 1001], [2000], [-1]], [[102, 15], [102], [-1]], [[999, 19], [998], [-1]], [[2002, 31], [2002], [-1]], [[98, 17], [98], [-1]], [[2002, 30], [2002], [-1]], [[2001, 9], [2000], [-1]], [[1999, 11], [1998], [-1]], [[31, 8], [30], [-1]], [[1999, 17], [1998], [-1]], [[28, 8], [28], [-1]], [[24, 17], [24], [-1]], [[29, 5], [28], [-1]], [[1001, 11], [1000], [-1]], [[999, 26], [998], [-1]], [[44, 9], [44], [-1]], [[2002, 997], [2002], [-1]], [[2000, 10], [2000], [-1]], [[2000, 5], [2000], [-1]], [[101, 10], [100], [-1]], [[2003, 11], [2002], [-1]], [[31, 6], [30], [-1]], [[30, 5], [30], [-1]], [[2001, 7], [2000], [-1]], [[1999, 30], [1998], [-1]], [[24, 5], [24], [-1]], [[1001, 23], [1000], [-1]], [[998, 1], [998], [-1]], [[15, 10], [14], [-1]], [[16, 9], [16], [-1]], [[102, 24], [102], [-1]], [[998, 29], [998], [-1]], [[2002, 2000], [2002], [-1]], [[44, 6], [44], [-1]], [[102, 100], [102], [-1]], [[1001, 100], [1000], [-1]], [[15, 2], [14], [-1]], [[2002, 10], [2002], [-1]], [[23, 15], [22], [-1]], [[25, 5], [24], [-1]], [[1001, 22], [1000], [-1]], [[99, 21], [98], [-1]], [[2000, 1000], [2000], [-1]], [[32, 5], [32], [-1]], [[2004, 2003], [2004], [-1]], [[18, 16], [18], [-1]], [[2001, 17], [2000], [-1]], [[2002, 2001], [2002], [-1]], [[30, 15], [30], [-1]], [[1002, 22], [1002], [-1]], [[31, 10], [30], [-1]], [[998, 101], [998], [-1]], [[23, 22], [22], [-1]], [[101, 21], [100], [-1]], [[998, 23], [998], [-1]], [[2003, 7], [2002], [-1]], [[43, 1], [42], [-1]], [[1001, 20], [1000], [-1]], [[1001, 30], [1000], [-1]], [[1998, 999], [1998], [-1]], [[1998, 9], [1998], [-1]], [[998, 28], [998], [-1]], [[24, 20], [24], [-1]], [[999, 7], [998], [-1]], [[99, 25], [98], [-1]], [[1001, 101], [1000], [-1]], [[16, 1], [16], [-1]], [[100, 5], [100], [-1]], [[25, 24], [24], [-1]], [[2000, 9], [2000], [-1]], [[1998, 31], [1998], [-1]], [[1999, 27], [1998], [-1]], [[31, 14], [30], [-1]], [[1999, 101], [1998], [-1]], [[998, 9], [998], [-1]], [[997, 23], [996], [-1]], [[26, 6], [26], [-1]], [[997, 101], [996], [-1]], [[2004, 31], [2004], [-1]], [[31, 30], [30], [-1]], [[1000, 23], [1000], [-1]], [[24, 16], [24], [-1]], [[28, 16], [28], [-1]], [[100, 19], [100], [-1]], [[44, 7], [44], [-1]], [[16, 5], [16], [-1]], [[997, 22], [996], [-1]], [[16, 15], [16], [-1]], [[2000, 1999], [2000], [-1]], [[1999, 102], [1998], [-1]], [[103, 102], [102], [-1]], [[31, 24], [30], [-1]], [[21, 6], [20], [-1]], [[26, 5], [26], [-1]], [[1000, 998], [1000], [-1]], [[2004, 8], [2004], [-1]], [[9, 7], [8], [-1]], [[20, 16], [20], [-1]], [[103, 27], [102], [-1]], [[102, 18], [102], [-1]], [[6, 4], [6], [-1]], [[2001, 104], [2000], [-1]], [[100, 43], [100], [-1]], [[1998, 43], [1998], [-1]], [[2002, 999], [2002], [-1]], [[43, 30], [42], [-1]], [[102, 9], [102], [-1]], [[2003, 5], [2002], [-1]], [[1002, 102], [1002], [-1]], [[1999, 998], [1998], [-1]], [[2003, 10], [2002], [-1]], [[14, 2], [14], [-1]], [[1000, 30], [1000], [-1]], [[22, 11], [22], [-1]], [[8, 5], [8], [-1]], [[96, 4], [96], [-1]], [[12, 8], [12], [-1]], [[18, 9], [18], [-1]], [[23, 20], [22], [-1]]], [[[13, 12], [12], [-1]], [[5234, 5233], [5234], [-1]], [[27, 10], [26], [-1]], [[100, 6], [100], [-1]], [[101, 6], [100], [-1]], [[21, 3], [20], [-1]], [[100, 35], [100], [-1]], [[60, 50], [60], [-1]], [[28, 1], [28], [-1]], [[200, 5], [200], [-1]], [[60, 6], [60], [-1]], [[30, 6], [30], [-1]], [[30, 1], [30], [-1]], [[21, 5], [20], [-1]], [[6, 5], [6], [-1]], [[13, 10], [12], [-1]], [[199, 12], [198], [-1]], [[14, 13], [14], [-1]], [[60, 11], [60], [-1]], [[100, 30], [100], [-1]], [[15, 14], [14], [-1]], [[36, 29], [36], [-1]], [[12, 11], [12], [-1]], [[100, 15], [100], [-1]], [[100, 13], [100], [-1]], [[200, 101], [200], [-1]], [[101, 15], [100], [-1]], [[36, 35], [36], [-1]], [[30, 21], [30], [-1]], [[12, 3], [12], [-1]], [[10, 4], [10], [-1]], [[21, 20], [20], [-1]], [[200, 199], [200], [-1]], [[99, 5], [98], [-1]], [[60, 21], [60], [-1]], [[20, 5], [20], [-1]], [[100, 98], [100], [-1]], [[60, 59], [60], [-1]], [[59, 21], [58], [-1]], [[101, 34], [100], [-1]], [[201, 1], [200], [-1]], [[50, 3], [50], [-1]], [[201, 200], [200], [-1]], [[201, 199], [200], [-1]], [[61, 60], [60], [-1]], [[999, 998], [998], [-1]], [[31, 1], [30], [-1]], [[100, 23], [100], [-1]], [[101, 100], [100], [-1]], [[101, 18], [100], [-1]], [[998, 31], [998], [-1]], [[2000, 21], [2000], [-1]], [[1000, 2], [1000], [-1]], [[8, 1], [8], [-1]], [[10, 2], [10], [-1]], [[31, 20], [30], [-1]], [[32, 1], [32], [-1]], [[20, 19], [20], [-1]], [[99, 31], [98], [-1]], [[32, 7], [32], [-1]], [[32, 6], [32], [-1]], [[2000, 998], [2000], [-1]], [[102, 22], [102], [-1]], [[1000, 24], [1000], [-1]], [[18, 6], [18], [-1]], [[100, 10], [100], [-1]], [[24, 7], [24], [-1]], [[1000, 22], [1000], [-1]], [[23, 21], [22], [-1]], [[32, 3], [32], [-1]], [[9, 5], [8], [-1]], [[3, 1], [2], [-1]], [[8, 7], [8], [-1]], [[3, 2], [2], [-1]], [[27, 6], [26], [-1]], [[20, 7], [20], [-1]], [[2, 1], [2], [-1]], [[100, 31], [100], [-1]], [[23, 18], [22], [-1]], [[99, 32], [98], [-1]], [[1000, 10], [1000], [-1]], [[1000, 1], [1000], [-1]], [[100, 22], [100], [-1]], [[23, 6], [22], [-1]], [[18, 8], [18], [-1]], [[33, 32], [32], [-1]], [[2001, 2000], [2000], [-1]], [[1000, 28], [1000], [-1]], [[22, 4], [22], [-1]], [[8, 2], [8], [-1]], [[11, 10], [10], [-1]], [[32, 22], [32], [-1]], [[29, 28], [28], [-1]], [[99, 10], [98], [-1]], [[7, 1], [6], [-1]], [[17, 7], [16], [-1]], [[1999, 28], [1998], [-1]], [[21, 19], [20], [-1]], [[998, 100], [998], [-1]], [[24, 10], [24], [-1]], [[33, 24], [32], [-1]], [[99, 6], [98], [-1]], [[998, 32], [998], [-1]], [[25, 20], [24], [-1]], [[33, 3], [32], [-1]], [[31, 18], [30], [-1]], [[22, 17], [22], [-1]], [[99, 3], [98], [-1]], [[11, 5], [10], [-1]], [[999, 102], [998], [-1]], [[4, 2], [4], [-1]], [[24, 9], [24], [-1]], [[99, 20], [98], [-1]], [[11, 9], [10], [-1]], [[32, 11], [32], [-1]], [[1000, 6], [1000], [-1]], [[1999, 1], [1998], [-1]], [[29, 1], [28], [-1]], [[1001, 18], [1000], [-1]], [[29, 18], [28], [-1]], [[2000, 99], [2000], [-1]], [[32, 18], [32], [-1]], [[10, 1], [10], [-1]], [[26, 25], [26], [-1]], [[28, 2], [28], [-1]], [[27, 10], [26], [-1]], [[2000, 16], [2000], [-1]], [[102, 10], [102], [-1]], [[999, 18], [998], [-1]], [[9, 8], [8], [-1]], [[9, 6], [8], [-1]], [[2000, 101], [2000], [-1]], [[22, 8], [22], [-1]], [[16, 6], [16], [-1]], [[101, 20], [100], [-1]], [[18, 17], [18], [-1]], [[10, 5], [10], [-1]], [[22, 21], [22], [-1]], [[999, 24], [998], [-1]], [[22, 10], [22], [-1]], [[7, 6], [6], [-1]], [[99, 26], [98], [-1]], [[102, 20], [102], [-1]], [[103, 7], [102], [-1]], [[1999, 21], [1998], [-1]], [[1999, 997], [1998], [-1]], [[1003, 1002], [1002], [-1]], [[32, 10], [32], [-1]], [[7, 3], [6], [-1]], [[31, 16], [30], [-1]], [[99, 98], [98], [-1]], [[100, 21], [100], [-1]], [[100, 11], [100], [-1]], [[98, 32], [98], [-1]], [[24, 6], [24], [-1]], [[1003, 1001], [1002], [-1]], [[1999, 1000], [1998], [-1]], [[30, 7], [30], [-1]], [[999, 99], [998], [-1]], [[34, 25], [34], [-1]], [[19, 3], [18], [-1]], [[34, 4], [34], [-1]], [[7, 2], [6], [-1]], [[1999, 19], [1998], [-1]], [[1001, 7], [1000], [-1]], [[22, 5], [22], [-1]], [[22, 6], [22], [-1]], [[32, 21], [32], [-1]], [[29, 6], [28], [-1]], [[16, 3], [16], [-1]], [[998, 10], [998], [-1]], [[1999, 99], [1998], [-1]], [[27, 7], [26], [-1]], [[34, 5], [34], [-1]], [[104, 7], [104], [-1]], [[100, 62], [100], [-1]], [[28, 27], [28], [-1]], [[100, 3], [100], [-1]], [[98, 21], [98], [-1]], [[25, 17], [24], [-1]], [[24, 23], [24], [-1]], [[1003, 998], [1002], [-1]], [[998, 997], [998], [-1]], [[22, 1], [22], [-1]], [[101, 32], [100], [-1]], [[1000, 999], [1000], [-1]], [[999, 28], [998], [-1]], [[100, 99], [100], [-1]], [[34, 33], [34], [-1]], [[30, 3], [30], [-1]], [[1000, 29], [1000], [-1]], [[18, 3], [18], [-1]], [[98, 7], [98], [-1]], [[34, 2], [34], [-1]], [[1001, 70], [1000], [-1]], [[1001, 998], [1000], [-1]], [[21, 18], [20], [-1]], [[998, 8], [998], [-1]], [[23, 1], [22], [-1]], [[2000, 3], [2000], [-1]], [[1004, 1003], [1004], [-1]], [[103, 99], [102], [-1]], [[1003, 7], [1002], [-1]], [[5, 3], [4], [-1]], [[1002, 1001], [1002], [-1]], [[102, 101], [102], [-1]], [[2000, 1004], [2000], [-1]], [[21, 8], [20], [-1]], [[99, 70], [98], [-1]], [[20, 8], [20], [-1]], [[33, 30], [32], [-1]], [[25, 9], [24], [-1]], [[31, 4], [30], [-1]], [[70, 5], [70], [-1]], [[31, 28], [30], [-1]], [[1999, 1004], [1998], [-1]], [[104, 29], [104], [-1]], [[997, 4], [996], [-1]], [[1000, 19], [1000], [-1]], [[23, 10], [22], [-1]], [[998, 6], [998], [-1]], [[30, 29], [30], [-1]], [[70, 32], [70], [-1]], [[27, 20], [26], [-1]], [[102, 21], [102], [-1]], [[8, 3], [8], [-1]], [[19, 4], [18], [-1]], [[33, 6], [32], [-1]], [[102, 99], [102], [-1]], [[28, 12], [28], [-1]], [[1001, 99], [1000], [-1]], [[999, 23], [998], [-1]], [[18, 1], [18], [-1]], [[103, 6], [102], [-1]], [[8, 6], [8], [-1]], [[28, 25], [28], [-1]], [[99, 12], [98], [-1]], [[32, 30], [32], [-1]], [[104, 27], [104], [-1]], [[28, 17], [28], [-1]], [[11, 8], [10], [-1]], [[2000, 24], [2000], [-1]], [[32, 31], [32], [-1]], [[26, 23], [26], [-1]], [[27, 26], [26], [-1]], [[29, 17], [28], [-1]], [[32, 23], [32], [-1]], [[22, 9], [22], [-1]], [[17, 5], [16], [-1]], [[34, 20], [34], [-1]], [[9, 2], [8], [-1]], [[35, 1], [34], [-1]], [[2000, 23], [2000], [-1]], [[2000, 62], [2000], [-1]], [[100, 63], [100], [-1]], [[996, 4], [996], [-1]], [[18, 4], [18], [-1]], [[101, 71], [100], [-1]], [[1003, 20], [1002], [-1]], [[70, 21], [70], [-1]], [[10, 3], [10], [-1]], [[72, 71], [72], [-1]], [[31, 17], [30], [-1]], [[62, 21], [62], [-1]], [[2001, 21], [2000], [-1]], [[1004, 18], [1004], [-1]], [[18, 2], [18], [-1]], [[104, 103], [104], [-1]], [[27, 18], [26], [-1]], [[1999, 98], [1998], [-1]], [[21, 7], [20], [-1]], [[30, 17], [30], [-1]], [[17, 8], [16], [-1]], [[29, 12], [28], [-1]], [[2001, 16], [2000], [-1]], [[27, 23], [26], [-1]], [[2000, 999], [2000], [-1]], [[30, 23], [30], [-1]], [[23, 8], [22], [-1]], [[27, 17], [26], [-1]], [[2000, 17], [2000], [-1]], [[999, 30], [998], [-1]], [[2000, 100], [2000], [-1]], [[30, 2], [30], [-1]], [[21, 10], [20], [-1]], [[100, 2], [100], [-1]], [[99, 2], [98], [-1]], [[99, 23], [98], [-1]], [[1000, 9], [1000], [-1]], [[30, 22], [30], [-1]], [[1000, 17], [1000], [-1]], [[999, 17], [998], [-1]], [[999, 100], [998], [-1]], [[31, 21], [30], [-1]], [[2001, 20], [2000], [-1]], [[27, 2], [26], [-1]], [[23, 9], [22], [-1]], [[29, 23], [28], [-1]], [[1999, 29], [1998], [-1]], [[999, 1], [998], [-1]], [[99, 7], [98], [-1]], [[5, 2], [4], [-1]], [[10, 9], [10], [-1]], [[30, 16], [30], [-1]], [[22, 18], [22], [-1]], [[1999, 999], [1998], [-1]], [[1999, 31], [1998], [-1]], [[99, 16], [98], [-1]], [[16, 10], [16], [-1]], [[11, 2], [10], [-1]], [[999, 9], [998], [-1]], [[99, 1], [98], [-1]], [[31, 7], [30], [-1]], [[23, 17], [22], [-1]], [[2000, 18], [2000], [-1]], [[99, 17], [98], [-1]], [[10, 7], [10], [-1]], [[21, 16], [20], [-1]], [[23, 7], [22], [-1]], [[1999, 8], [1998], [-1]], [[999, 20], [998], [-1]], [[1000, 16], [1000], [-1]], [[999, 21], [998], [-1]], [[26, 7], [26], [-1]], [[18, 7], [18], [-1]], [[44, 43], [44], [-1]], [[30, 10], [30], [-1]], [[2000, 7], [2000], [-1]], [[99, 24], [98], [-1]], [[2000, 1], [2000], [-1]], [[999, 10], [998], [-1]], [[1001, 24], [1000], [-1]], [[29, 22], [28], [-1]], [[2000, 20], [2000], [-1]], [[2001, 100], [2000], [-1]], [[99, 30], [98], [-1]], [[102, 30], [102], [-1]], [[999, 5], [998], [-1]], [[19, 7], [18], [-1]], [[2001, 1001], [2000], [-1]], [[102, 15], [102], [-1]], [[999, 19], [998], [-1]], [[2002, 31], [2002], [-1]], [[98, 17], [98], [-1]], [[2002, 30], [2002], [-1]], [[2001, 9], [2000], [-1]], [[1999, 11], [1998], [-1]], [[31, 8], [30], [-1]], [[1999, 17], [1998], [-1]], [[28, 8], [28], [-1]], [[24, 17], [24], [-1]], [[29, 5], [28], [-1]], [[1001, 11], [1000], [-1]], [[999, 26], [998], [-1]], [[44, 9], [44], [-1]], [[2002, 997], [2002], [-1]], [[2000, 10], [2000], [-1]], [[2000, 5], [2000], [-1]], [[101, 10], [100], [-1]], [[2003, 11], [2002], [-1]], [[31, 6], [30], [-1]], [[30, 5], [30], [-1]], [[2001, 7], [2000], [-1]], [[1999, 30], [1998], [-1]], [[24, 5], [24], [-1]], [[1001, 23], [1000], [-1]], [[998, 1], [998], [-1]], [[15, 10], [14], [-1]], [[16, 9], [16], [-1]], [[102, 24], [102], [-1]], [[998, 29], [998], [-1]], [[2002, 2000], [2002], [-1]], [[44, 6], [44], [-1]], [[102, 100], [102], [-1]], [[1001, 100], [1000], [-1]], [[15, 2], [14], [-1]], [[2002, 10], [2002], [-1]], [[23, 15], [22], [-1]], [[25, 5], [24], [-1]], [[1001, 22], [1000], [-1]], [[99, 21], [98], [-1]], [[2000, 1000], [2000], [-1]], [[32, 5], [32], [-1]], [[2004, 2003], [2004], [-1]], [[18, 16], [18], [-1]], [[2001, 17], [2000], [-1]], [[2002, 2001], [2002], [-1]], [[30, 15], [30], [-1]], [[1002, 22], [1002], [-1]], [[31, 10], [30], [-1]], [[998, 101], [998], [-1]], [[23, 22], [22], [-1]], [[101, 21], [100], [-1]], [[998, 23], [998], [-1]], [[2003, 7], [2002], [-1]], [[43, 1], [42], [-1]], [[1001, 20], [1000], [-1]], [[1001, 30], [1000], [-1]], [[1998, 999], [1998], [-1]], [[1998, 9], [1998], [-1]], [[998, 28], [998], [-1]], [[24, 20], [24], [-1]], [[999, 7], [998], [-1]], [[99, 25], [98], [-1]], [[1001, 101], [1000], [-1]], [[16, 1], [16], [-1]], [[100, 5], [100], [-1]], [[25, 24], [24], [-1]], [[2000, 9], [2000], [-1]], [[1998, 31], [1998], [-1]], [[1999, 27], [1998], [-1]], [[31, 14], [30], [-1]], [[1999, 101], [1998], [-1]], [[998, 9], [998], [-1]], [[997, 23], [996], [-1]], [[26, 6], [26], [-1]], [[997, 101], [996], [-1]], [[2004, 31], [2004], [-1]], [[31, 30], [30], [-1]], [[1000, 23], [1000], [-1]], [[24, 16], [24], [-1]], [[28, 16], [28], [-1]], [[100, 19], [100], [-1]], [[44, 7], [44], [-1]], [[16, 5], [16], [-1]], [[997, 22], [996], [-1]], [[16, 15], [16], [-1]], [[2000, 1999], [2000], [-1]], [[1999, 102], [1998], [-1]], [[103, 102], [102], [-1]], [[31, 24], [30], [-1]], [[21, 6], [20], [-1]], [[26, 5], [26], [-1]], [[1000, 998], [1000], [-1]], [[2004, 8], [2004], [-1]], [[9, 7], [8], [-1]], [[20, 16], [20], [-1]], [[103, 27], [102], [-1]], [[102, 18], [102], [-1]], [[6, 4], [6], [-1]], [[2001, 104], [2000], [-1]], [[100, 43], [100], [-1]], [[1998, 43], [1998], [-1]], [[2002, 999], [2002], [-1]], [[43, 30], [42], [-1]], [[102, 9], [102], [-1]], [[2003, 5], [2002], [-1]], [[1002, 102], [1002], [-1]], [[1999, 998], [1998], [-1]], [[2003, 10], [2002], [-1]], [[14, 2], [14], [-1]], [[1000, 30], [1000], [-1]], [[22, 11], [22], [-1]], [[8, 5], [8], [-1]], [[96, 4], [96], [-1]], [[12, 8], [12], [-1]], [[18, 9], [18], [-1]], [[23, 20], [22], [-1]]], [[[13, 12], [12], [-1]], [[5234, 5233], [5234], [-1]], [[27, 10], [26], [-1]], [[100, 6], [100], [-1]], [[101, 6], [100], [-1]], [[21, 3], [20], [-1]], [[100, 35], [100], [-1]], [[60, 50], [60], [-1]], [[28, 1], [28], [-1]], [[200, 5], [200], [-1]], [[60, 6], [60], [-1]], [[30, 6], [30], [-1]], [[30, 1], [30], [-1]], [[21, 5], [20], [-1]], [[6, 5], [6], [-1]], [[13, 10], [12], [-1]], [[199, 12], [198], [-1]], [[14, 13], [14], [-1]], [[60, 11], [60], [-1]], [[100, 30], [100], [-1]], [[15, 14], [14], [-1]], [[36, 29], [36], [-1]], [[12, 11], [12], [-1]], [[100, 15], [100], [-1]], [[100, 13], [100], [-1]], [[200, 101], [200], [-1]], [[101, 15], [100], [-1]], [[36, 35], [36], [-1]], [[30, 21], [30], [-1]], [[12, 3], [12], [-1]], [[10, 4], [10], [-1]], [[21, 20], [20], [-1]], [[200, 199], [200], [-1]], [[99, 5], [98], [-1]], [[60, 21], [60], [-1]], [[20, 5], [20], [-1]], [[100, 98], [100], [-1]], [[60, 59], [60], [-1]], [[59, 21], [58], [-1]], [[101, 34], [100], [-1]], [[201, 1], [200], [-1]], [[50, 3], [50], [-1]], [[201, 200], [200], [-1]], [[201, 199], [200], [-1]], [[61, 60], [60], [-1]], [[999, 998], [998], [-1]], [[31, 1], [30], [-1]], [[100, 23], [100], [-1]], [[101, 100], [100], [-1]], [[101, 18], [100], [-1]], [[998, 31], [998], [-1]], [[2000, 21], [2000], [-1]], [[1000, 2], [1000], [-1]], [[8, 1], [8], [-1]], [[10, 2], [10], [-1]], [[31, 20], [30], [-1]], [[32, 1], [32], [-1]], [[20, 19], [20], [-1]], [[99, 31], [98], [-1]], [[32, 7], [32], [-1]], [[32, 6], [32], [-1]], [[2000, 998], [2000], [-1]], [[102, 22], [102], [-1]], [[1000, 24], [1000], [-1]], [[18, 6], [18], [-1]], [[100, 10], [100], [-1]], [[24, 7], [24], [-1]], [[1000, 22], [1000], [-1]], [[23, 21], [22], [-1]], [[32, 3], [32], [-1]], [[9, 5], [8], [-1]], [[3, 1], [2], [-1]], [[8, 7], [8], [-1]], [[3, 2], [2], [-1]], [[27, 6], [26], [-1]], [[20, 7], [20], [-1]], [[2, 1], [2], [-1]], [[100, 31], [100], [-1]], [[23, 18], [22], [-1]], [[99, 32], [98], [-1]], [[1000, 10], [1000], [-1]], [[1000, 1], [1000], [-1]], [[100, 22], [100], [-1]], [[23, 6], [22], [-1]], [[18, 8], [18], [-1]], [[33, 32], [32], [-1]], [[2001, 2000], [2000], [-1]], [[1000, 28], [1000], [-1]], [[22, 4], [22], [-1]], [[8, 2], [8], [-1]], [[11, 10], [10], [-1]], [[32, 22], [32], [-1]], [[29, 28], [28], [-1]], [[99, 10], [98], [-1]], [[7, 1], [6], [-1]], [[17, 7], [16], [-1]], [[1999, 28], [1998], [-1]], [[21, 19], [20], [-1]], [[998, 100], [998], [-1]], [[24, 10], [24], [-1]], [[33, 24], [32], [-1]], [[99, 6], [98], [-1]], [[998, 32], [998], [-1]], [[25, 20], [24], [-1]], [[33, 3], [32], [-1]], [[31, 18], [30], [-1]], [[22, 17], [22], [-1]], [[99, 3], [98], [-1]], [[11, 5], [10], [-1]], [[999, 102], [998], [-1]], [[4, 2], [4], [-1]], [[24, 9], [24], [-1]], [[99, 20], [98], [-1]], [[11, 9], [10], [-1]], [[32, 11], [32], [-1]], [[1000, 6], [1000], [-1]], [[1999, 1], [1998], [-1]], [[29, 1], [28], [-1]], [[1001, 18], [1000], [-1]], [[29, 18], [28], [-1]], [[2000, 99], [2000], [-1]], [[32, 18], [32], [-1]], [[10, 1], [10], [-1]], [[26, 25], [26], [-1]], [[28, 2], [28], [-1]], [[27, 10], [26], [-1]], [[2000, 16], [2000], [-1]], [[102, 10], [102], [-1]], [[999, 18], [998], [-1]], [[9, 8], [8], [-1]], [[9, 6], [8], [-1]], [[2000, 101], [2000], [-1]], [[22, 8], [22], [-1]], [[16, 6], [16], [-1]], [[101, 20], [100], [-1]], [[18, 17], [18], [-1]], [[10, 5], [10], [-1]], [[22, 21], [22], [-1]], [[999, 24], [998], [-1]], [[22, 10], [22], [-1]], [[7, 6], [6], [-1]], [[99, 26], [98], [-1]], [[102, 20], [102], [-1]], [[103, 7], [102], [-1]], [[1999, 21], [1998], [-1]], [[1999, 997], [1998], [-1]], [[1003, 1002], [1002], [-1]], [[32, 10], [32], [-1]], [[7, 3], [6], [-1]], [[31, 16], [30], [-1]], [[99, 98], [98], [-1]], [[100, 21], [100], [-1]], [[100, 11], [100], [-1]], [[98, 32], [98], [-1]], [[24, 6], [24], [-1]], [[1003, 1001], [1002], [-1]], [[1999, 1000], [1998], [-1]], [[30, 7], [30], [-1]], [[999, 99], [998], [-1]], [[34, 25], [34], [-1]], [[19, 3], [18], [-1]], [[34, 4], [34], [-1]], [[7, 2], [6], [-1]], [[1999, 19], [1998], [-1]], [[1001, 7], [1000], [-1]], [[22, 5], [22], [-1]], [[22, 6], [22], [-1]], [[32, 21], [32], [-1]], [[29, 6], [28], [-1]], [[16, 3], [16], [-1]], [[998, 10], [998], [-1]], [[1999, 99], [1998], [-1]], [[27, 7], [26], [-1]], [[34, 5], [34], [-1]], [[104, 7], [104], [-1]], [[100, 62], [100], [-1]], [[28, 27], [28], [-1]], [[100, 3], [100], [-1]], [[98, 21], [98], [-1]], [[25, 17], [24], [-1]], [[24, 23], [24], [-1]], [[1003, 998], [1002], [-1]], [[998, 997], [998], [-1]], [[22, 1], [22], [-1]], [[101, 32], [100], [-1]], [[1000, 999], [1000], [-1]], [[999, 28], [998], [-1]], [[100, 99], [100], [-1]], [[34, 33], [34], [-1]], [[30, 3], [30], [-1]], [[1000, 29], [1000], [-1]], [[18, 3], [18], [-1]], [[98, 7], [98], [-1]], [[34, 2], [34], [-1]], [[1001, 70], [1000], [-1]], [[1001, 998], [1000], [-1]], [[21, 18], [20], [-1]], [[998, 8], [998], [-1]], [[23, 1], [22], [-1]], [[2000, 3], [2000], [-1]], [[1004, 1003], [1004], [-1]], [[103, 99], [102], [-1]], [[1003, 7], [1002], [-1]], [[5, 3], [4], [-1]], [[1002, 1001], [1002], [-1]], [[102, 101], [102], [-1]], [[2000, 1004], [2000], [-1]], [[21, 8], [20], [-1]], [[99, 70], [98], [-1]], [[20, 8], [20], [-1]], [[33, 30], [32], [-1]], [[25, 9], [24], [-1]], [[31, 4], [30], [-1]], [[70, 5], [70], [-1]], [[31, 28], [30], [-1]], [[1999, 1004], [1998], [-1]], [[104, 29], [104], [-1]], [[997, 4], [996], [-1]], [[1000, 19], [1000], [-1]], [[23, 10], [22], [-1]], [[998, 6], [998], [-1]], [[30, 29], [30], [-1]], [[70, 32], [70], [-1]], [[27, 20], [26], [-1]], [[102, 21], [102], [-1]], [[8, 3], [8], [-1]], [[19, 4], [18], [-1]], [[33, 6], [32], [-1]], [[102, 99], [102], [-1]], [[28, 12], [28], [-1]], [[1001, 99], [1000], [-1]], [[999, 23], [998], [-1]], [[18, 1], [18], [-1]], [[103, 6], [102], [-1]], [[8, 6], [8], [-1]], [[28, 25], [28], [-1]], [[99, 12], [98], [-1]], [[32, 30], [32], [-1]], [[104, 27], [104], [-1]], [[28, 17], [28], [-1]], [[11, 8], [10], [-1]], [[2000, 24], [2000], [-1]], [[32, 31], [32], [-1]], [[26, 23], [26], [-1]], [[27, 26], [26], [-1]], [[29, 17], [28], [-1]], [[32, 23], [32], [-1]], [[22, 9], [22], [-1]], [[17, 5], [16], [-1]], [[34, 20], [34], [-1]], [[9, 2], [8], [-1]], [[35, 1], [34], [-1]], [[2000, 23], [2000], [-1]], [[2000, 62], [2000], [-1]], [[100, 63], [100], [-1]], [[996, 4], [996], [-1]], [[18, 4], [18], [-1]], [[101, 71], [100], [-1]], [[1003, 20], [1002], [-1]], [[70, 21], [70], [-1]], [[10, 3], [10], [-1]], [[72, 71], [72], [-1]], [[31, 17], [30], [-1]], [[62, 21], [62], [-1]], [[2001, 21], [2000], [-1]], [[1004, 18], [1004], [-1]], [[18, 2], [18], [-1]], [[104, 103], [104], [-1]], [[27, 18], [26], [-1]], [[1999, 98], [1998], [-1]], [[21, 7], [20], [-1]], [[30, 17], [30], [-1]], [[17, 8], [16], [-1]], [[29, 12], [28], [-1]], [[2001, 16], [2000], [-1]], [[27, 23], [26], [-1]], [[2000, 999], [2000], [-1]], [[30, 23], [30], [-1]], [[23, 8], [22], [-1]], [[27, 17], [26], [-1]], [[2000, 17], [2000], [-1]], [[999, 30], [998], [-1]], [[2000, 100], [2000], [-1]], [[30, 2], [30], [-1]], [[21, 10], [20], [-1]], [[100, 2], [100], [-1]], [[99, 2], [98], [-1]], [[99, 23], [98], [-1]], [[1000, 9], [1000], [-1]], [[30, 22], [30], [-1]], [[1000, 17], [1000], [-1]], [[999, 17], [998], [-1]], [[999, 100], [998], [-1]], [[31, 21], [30], [-1]], [[2001, 20], [2000], [-1]], [[27, 2], [26], [-1]], [[23, 9], [22], [-1]], [[29, 23], [28], [-1]], [[1999, 29], [1998], [-1]], [[999, 1], [998], [-1]], [[99, 7], [98], [-1]], [[5, 2], [4], [-1]], [[10, 9], [10], [-1]], [[30, 16], [30], [-1]], [[22, 18], [22], [-1]], [[1999, 999], [1998], [-1]], [[1999, 31], [1998], [-1]], [[99, 16], [98], [-1]], [[16, 10], [16], [-1]], [[11, 2], [10], [-1]], [[999, 9], [998], [-1]], [[99, 1], [98], [-1]], [[31, 7], [30], [-1]], [[23, 17], [22], [-1]], [[2000, 18], [2000], [-1]], [[99, 17], [98], [-1]], [[10, 7], [10], [-1]], [[21, 16], [20], [-1]], [[23, 7], [22], [-1]], [[1999, 8], [1998], [-1]], [[999, 20], [998], [-1]], [[1000, 16], [1000], [-1]], [[999, 21], [998], [-1]], [[26, 7], [26], [-1]], [[18, 7], [18], [-1]], [[44, 43], [44], [-1]], [[30, 10], [30], [-1]], [[2000, 7], [2000], [-1]], [[99, 24], [98], [-1]], [[2000, 1], [2000], [-1]], [[999, 10], [998], [-1]], [[1001, 24], [1000], [-1]], [[29, 22], [28], [-1]], [[2000, 20], [2000], [-1]], [[2001, 100], [2000], [-1]], [[99, 30], [98], [-1]], [[102, 30], [102], [-1]], [[999, 5], [998], [-1]], [[19, 7], [18], [-1]], [[2001, 1001], [2000], [-1]], [[102, 15], [102], [-1]], [[999, 19], [998], [-1]], [[2002, 31], [2002], [-1]], [[98, 17], [98], [-1]], [[2002, 30], [2002], [-1]], [[2001, 9], [2000], [-1]], [[1999, 11], [1998], [-1]], [[31, 8], [30], [-1]], [[1999, 17], [1998], [-1]], [[28, 8], [28], [-1]], [[24, 17], [24], [-1]], [[29, 5], [28], [-1]], [[1001, 11], [1000], [-1]], [[999, 26], [998], [-1]], [[44, 9], [44], [-1]], [[2002, 997], [2002], [-1]], [[2000, 10], [2000], [-1]], [[2000, 5], [2000], [-1]], [[101, 10], [100], [-1]], [[2003, 11], [2002], [-1]], [[31, 6], [30], [-1]], [[30, 5], [30], [-1]], [[2001, 7], [2000], [-1]], [[1999, 30], [1998], [-1]], [[24, 5], [24], [-1]], [[1001, 23], [1000], [-1]], [[998, 1], [998], [-1]], [[15, 10], [14], [-1]], [[16, 9], [16], [-1]], [[102, 24], [102], [-1]], [[998, 29], [998], [-1]], [[2002, 2000], [2002], [-1]], [[44, 6], [44], [-1]], [[102, 100], [102], [-1]], [[1001, 100], [1000], [-1]], [[15, 2], [14], [-1]], [[2002, 10], [2002], [-1]], [[23, 15], [22], [-1]], [[25, 5], [24], [-1]], [[1001, 22], [1000], [-1]], [[99, 21], [98], [-1]], [[2000, 1000], [2000], [-1]], [[32, 5], [32], [-1]], [[2004, 2003], [2004], [-1]], [[18, 16], [18], [-1]], [[2001, 17], [2000], [-1]], [[2002, 2001], [2002], [-1]], [[30, 15], [30], [-1]], [[1002, 22], [1002], [-1]], [[31, 10], [30], [-1]], [[998, 101], [998], [-1]], [[23, 22], [22], [-1]], [[101, 21], [100], [-1]], [[998, 23], [998], [-1]], [[2003, 7], [2002], [-1]], [[43, 1], [42], [-1]], [[1001, 20], [1000], [-1]], [[1001, 30], [1000], [-1]], [[1998, 999], [1998], [-1]], [[1998, 9], [1998], [-1]], [[998, 28], [998], [-1]], [[24, 20], [24], [-1]], [[999, 7], [998], [-1]], [[99, 25], [98], [-1]], [[1001, 101], [1000], [-1]], [[16, 1], [16], [-1]], [[100, 5], [100], [-1]], [[25, 24], [24], [-1]], [[2000, 9], [2000], [-1]], [[1998, 31], [1998], [-1]], [[1999, 27], [1998], [-1]], [[31, 14], [30], [-1]], [[1999, 101], [1998], [-1]], [[998, 9], [998], [-1]], [[997, 23], [996], [-1]], [[26, 6], [26], [-1]], [[997, 101], [996], [-1]], [[2004, 31], [2004], [-1]], [[31, 30], [30], [-1]], [[1000, 23], [1000], [-1]], [[24, 16], [24], [-1]], [[28, 16], [28], [-1]], [[100, 19], [100], [-1]], [[44, 7], [44], [-1]], [[16, 5], [16], [-1]], [[997, 22], [996], [-1]], [[16, 15], [16], [-1]], [[2000, 1999], [2000], [-1]], [[1999, 102], [1998], [-1]], [[103, 102], [102], [-1]], [[31, 24], [30], [-1]], [[21, 6], [20], [-1]], [[26, 5], [26], [-1]], [[1000, 998], [1000], [-1]], [[2004, 8], [2004], [-1]], [[9, 7], [8], [-1]], [[20, 16], [20], [-1]], [[103, 27], [102], [-1]], [[102, 18], [102], [-1]], [[6, 4], [6], [-1]], [[2001, 104], [2000], [-1]], [[100, 43], [100], [-1]], [[1998, 43], [1998], [-1]], [[2002, 999], [2002], [-1]], [[43, 30], [42], [-1]], [[102, 9], [102], [-1]], [[2003, 5], [2002], [-1]], [[1002, 102], [1002], [-1]], [[1999, 998], [1998], [-1]], [[2003, 10], [2002], [-1]], [[14, 2], [14], [-1]], [[1000, 30], [1000], [-1]], [[22, 11], [22], [-1]], [[8, 5], [8], [-1]], [[96, 4], [96], [-1]], [[12, 8], [12], [-1]], [[18, 9], [18], [-1]], [[23, 20], [22], [-1]]], [[[13, 12], [12], [-1]], [[5234, 5233], [5234], [-1]], [[27, 10], [26], [-1]], [[100, 6], [100], [-1]], [[101, 6], [100], [-1]], [[21, 3], [20], [-1]], [[100, 35], [100], [-1]], [[60, 50], [60], [-1]], [[28, 1], [28], [-1]], [[200, 5], [200], [-1]], [[60, 6], [60], [-1]], [[30, 6], [30], [-1]], [[30, 1], [30], [-1]], [[21, 5], [20], [-1]], [[6, 5], [6], [-1]], [[13, 10], [12], [-1]], [[199, 12], [198], [-1]], [[14, 13], [14], [-1]], [[60, 11], [60], [-1]], [[100, 30], [100], [-1]], [[15, 14], [14], [-1]], [[36, 29], [36], [-1]], [[12, 11], [12], [-1]], [[100, 15], [100], [-1]], [[100, 13], [100], [-1]], [[200, 101], [200], [-1]], [[101, 15], [100], [-1]], [[36, 35], [36], [-1]], [[30, 21], [30], [-1]], [[12, 3], [12], [-1]], [[10, 4], [10], [-1]], [[21, 20], [20], [-1]], [[200, 199], [200], [-1]], [[99, 5], [98], [-1]], [[60, 21], [60], [-1]], [[20, 5], [20], [-1]], [[100, 98], [100], [-1]], [[60, 59], [60], [-1]], [[59, 21], [58], [-1]], [[101, 34], [100], [-1]], [[201, 1], [200], [-1]], [[50, 3], [50], [-1]], [[201, 200], [200], [-1]], [[201, 199], [200], [-1]], [[61, 60], [60], [-1]], [[999, 998], [998], [-1]], [[31, 1], [30], [-1]], [[100, 23], [100], [-1]], [[101, 100], [100], [-1]], [[101, 18], [100], [-1]], [[998, 31], [998], [-1]], [[2000, 21], [2000], [-1]], [[1000, 2], [1000], [-1]], [[8, 1], [8], [-1]], [[10, 2], [10], [-1]], [[31, 20], [30], [-1]], [[32, 1], [32], [-1]], [[20, 19], [20], [-1]], [[99, 31], [98], [-1]], [[32, 7], [32], [-1]], [[32, 6], [32], [-1]], [[2000, 998], [2000], [-1]], [[102, 22], [102], [-1]], [[1000, 24], [1000], [-1]], [[18, 6], [18], [-1]], [[100, 10], [100], [-1]], [[24, 7], [24], [-1]], [[1000, 22], [1000], [-1]], [[23, 21], [22], [-1]], [[32, 3], [32], [-1]], [[9, 5], [8], [-1]], [[3, 1], [2], [-1]], [[8, 7], [8], [-1]], [[3, 2], [2], [-1]], [[27, 6], [26], [-1]], [[20, 7], [20], [-1]], [[2, 1], [2], [-1]], [[100, 31], [100], [-1]], [[23, 18], [22], [-1]], [[99, 32], [98], [-1]], [[1000, 10], [1000], [-1]], [[1000, 1], [1000], [-1]], [[100, 22], [100], [-1]], [[23, 6], [22], [-1]], [[18, 8], [18], [-1]], [[33, 32], [32], [-1]], [[2001, 2000], [2000], [-1]], [[1000, 28], [1000], [-1]], [[22, 4], [22], [-1]], [[8, 2], [8], [-1]], [[11, 10], [10], [-1]], [[32, 22], [32], [-1]], [[29, 28], [28], [-1]], [[99, 10], [98], [-1]], [[7, 1], [6], [-1]], [[17, 7], [16], [-1]], [[1999, 28], [1998], [-1]], [[21, 19], [20], [-1]], [[998, 100], [998], [-1]], [[24, 10], [24], [-1]], [[33, 24], [32], [-1]], [[99, 6], [98], [-1]], [[998, 32], [998], [-1]], [[25, 20], [24], [-1]], [[33, 3], [32], [-1]], [[31, 18], [30], [-1]], [[22, 17], [22], [-1]], [[99, 3], [98], [-1]], [[11, 5], [10], [-1]], [[999, 102], [998], [-1]], [[4, 2], [4], [-1]], [[24, 9], [24], [-1]], [[99, 20], [98], [-1]], [[11, 9], [10], [-1]], [[32, 11], [32], [-1]], [[1000, 6], [1000], [-1]], [[1999, 1], [1998], [-1]], [[29, 1], [28], [-1]], [[1001, 18], [1000], [-1]], [[29, 18], [28], [-1]], [[2000, 99], [2000], [-1]], [[32, 18], [32], [-1]], [[10, 1], [10], [-1]], [[26, 25], [26], [-1]], [[28, 2], [28], [-1]], [[27, 10], [26], [-1]], [[2000, 16], [2000], [-1]], [[102, 10], [102], [-1]], [[999, 18], [998], [-1]], [[9, 8], [8], [-1]], [[9, 6], [8], [-1]], [[2000, 101], [2000], [-1]], [[22, 8], [22], [-1]], [[16, 6], [16], [-1]], [[101, 20], [100], [-1]], [[18, 17], [18], [-1]], [[10, 5], [10], [-1]], [[22, 21], [22], [-1]], [[999, 24], [998], [-1]], [[22, 10], [22], [-1]], [[7, 6], [6], [-1]], [[99, 26], [98], [-1]], [[102, 20], [102], [-1]], [[103, 7], [102], [-1]], [[1999, 21], [1998], [-1]], [[1999, 997], [1998], [-1]], [[1003, 1002], [1002], [-1]], [[32, 10], [32], [-1]], [[7, 3], [6], [-1]], [[31, 16], [30], [-1]], [[99, 98], [98], [-1]], [[100, 21], [100], [-1]], [[100, 11], [100], [-1]], [[98, 32], [98], [-1]], [[24, 6], [24], [-1]], [[1003, 1001], [1002], [-1]], [[1999, 1000], [1998], [-1]], [[30, 7], [30], [-1]], [[999, 99], [998], [-1]], [[34, 25], [34], [-1]], [[19, 3], [18], [-1]], [[34, 4], [34], [-1]], [[7, 2], [6], [-1]], [[1999, 19], [1998], [-1]], [[1001, 7], [1000], [-1]], [[22, 5], [22], [-1]], [[22, 6], [22], [-1]], [[32, 21], [32], [-1]], [[29, 6], [28], [-1]], [[16, 3], [16], [-1]], [[998, 10], [998], [-1]], [[1999, 99], [1998], [-1]], [[27, 7], [26], [-1]], [[34, 5], [34], [-1]], [[104, 7], [104], [-1]], [[100, 62], [100], [-1]], [[28, 27], [28], [-1]], [[100, 3], [100], [-1]], [[98, 21], [98], [-1]], [[25, 17], [24], [-1]], [[24, 23], [24], [-1]], [[1003, 998], [1002], [-1]], [[998, 997], [998], [-1]], [[22, 1], [22], [-1]], [[101, 32], [100], [-1]], [[1000, 999], [1000], [-1]], [[999, 28], [998], [-1]], [[100, 99], [100], [-1]], [[34, 33], [34], [-1]], [[30, 3], [30], [-1]], [[1000, 29], [1000], [-1]], [[18, 3], [18], [-1]], [[98, 7], [98], [-1]], [[34, 2], [34], [-1]], [[1001, 70], [1000], [-1]], [[1001, 998], [1000], [-1]], [[21, 18], [20], [-1]], [[998, 8], [998], [-1]], [[23, 1], [22], [-1]], [[2000, 3], [2000], [-1]], [[1004, 1003], [1004], [-1]], [[103, 99], [102], [-1]], [[1003, 7], [1002], [-1]], [[5, 3], [4], [-1]], [[1002, 1001], [1002], [-1]], [[102, 101], [102], [-1]], [[2000, 1004], [2000], [-1]], [[21, 8], [20], [-1]], [[99, 70], [98], [-1]], [[20, 8], [20], [-1]], [[33, 30], [32], [-1]], [[25, 9], [24], [-1]], [[31, 4], [30], [-1]], [[70, 5], [70], [-1]], [[31, 28], [30], [-1]], [[1999, 1004], [1998], [-1]], [[104, 29], [104], [-1]], [[997, 4], [996], [-1]], [[1000, 19], [1000], [-1]], [[23, 10], [22], [-1]], [[998, 6], [998], [-1]], [[30, 29], [30], [-1]], [[70, 32], [70], [-1]], [[27, 20], [26], [-1]], [[102, 21], [102], [-1]], [[8, 3], [8], [-1]], [[19, 4], [18], [-1]], [[33, 6], [32], [-1]], [[102, 99], [102], [-1]], [[28, 12], [28], [-1]], [[1001, 99], [1000], [-1]], [[999, 23], [998], [-1]], [[18, 1], [18], [-1]], [[103, 6], [102], [-1]], [[8, 6], [8], [-1]], [[28, 25], [28], [-1]], [[99, 12], [98], [-1]], [[32, 30], [32], [-1]], [[104, 27], [104], [-1]], [[28, 17], [28], [-1]], [[11, 8], [10], [-1]], [[2000, 24], [2000], [-1]], [[32, 31], [32], [-1]], [[26, 23], [26], [-1]], [[27, 26], [26], [-1]], [[29, 17], [28], [-1]], [[32, 23], [32], [-1]], [[22, 9], [22], [-1]], [[17, 5], [16], [-1]], [[34, 20], [34], [-1]], [[9, 2], [8], [-1]], [[35, 1], [34], [-1]], [[2000, 23], [2000], [-1]], [[2000, 62], [2000], [-1]], [[100, 63], [100], [-1]], [[996, 4], [996], [-1]], [[18, 4], [18], [-1]], [[101, 71], [100], [-1]], [[1003, 20], [1002], [-1]], [[70, 21], [70], [-1]], [[10, 3], [10], [-1]], [[72, 71], [72], [-1]], [[31, 17], [30], [-1]], [[62, 21], [62], [-1]], [[2001, 21], [2000], [-1]], [[1004, 18], [1004], [-1]], [[18, 2], [18], [-1]], [[104, 103], [104], [-1]], [[27, 18], [26], [-1]], [[1999, 98], [1998], [-1]], [[21, 7], [20], [-1]], [[30, 17], [30], [-1]], [[17, 8], [16], [-1]], [[29, 12], [28], [-1]], [[2001, 16], [2000], [-1]], [[27, 23], [26], [-1]], [[2000, 999], [2000], [-1]], [[30, 23], [30], [-1]], [[23, 8], [22], [-1]], [[27, 17], [26], [-1]], [[2000, 17], [2000], [-1]], [[999, 30], [998], [-1]], [[2000, 100], [2000], [-1]], [[30, 2], [30], [-1]], [[21, 10], [20], [-1]], [[100, 2], [100], [-1]], [[99, 2], [98], [-1]], [[99, 23], [98], [-1]], [[1000, 9], [1000], [-1]], [[30, 22], [30], [-1]], [[1000, 17], [1000], [-1]], [[999, 17], [998], [-1]], [[999, 100], [998], [-1]], [[31, 21], [30], [-1]], [[2001, 20], [2000], [-1]], [[27, 2], [26], [-1]], [[23, 9], [22], [-1]], [[29, 23], [28], [-1]], [[1999, 29], [1998], [-1]], [[999, 1], [998], [-1]], [[99, 7], [98], [-1]], [[5, 2], [4], [-1]], [[10, 9], [10], [-1]], [[30, 16], [30], [-1]], [[22, 18], [22], [-1]], [[1999, 999], [1998], [-1]], [[1999, 31], [1998], [-1]], [[99, 16], [98], [-1]], [[16, 10], [16], [-1]], [[11, 2], [10], [-1]], [[999, 9], [998], [-1]], [[99, 1], [98], [-1]], [[31, 7], [30], [-1]], [[23, 17], [22], [-1]], [[2000, 18], [2000], [-1]], [[99, 17], [98], [-1]], [[10, 7], [10], [-1]], [[21, 16], [20], [-1]], [[23, 7], [22], [-1]], [[1999, 8], [1998], [-1]], [[999, 20], [998], [-1]], [[1000, 16], [1000], [-1]], [[999, 21], [998], [-1]], [[26, 7], [26], [-1]], [[18, 7], [18], [-1]], [[44, 43], [44], [-1]], [[30, 10], [30], [-1]], [[2000, 7], [2000], [-1]], [[99, 24], [98], [-1]], [[2000, 1], [2000], [-1]], [[999, 10], [998], [-1]], [[1001, 24], [1000], [-1]], [[29, 22], [28], [-1]], [[2000, 20], [2000], [-1]], [[2001, 100], [2000], [-1]], [[99, 30], [98], [-1]], [[102, 30], [102], [-1]], [[999, 5], [998], [-1]], [[19, 7], [18], [-1]], [[2001, 1001], [2000], [-1]], [[102, 15], [102], [-1]], [[999, 19], [998], [-1]], [[2002, 31], [2002], [-1]], [[98, 17], [98], [-1]], [[2002, 30], [2002], [-1]], [[2001, 9], [2000], [-1]], [[1999, 11], [1998], [-1]], [[31, 8], [30], [-1]], [[1999, 17], [1998], [-1]], [[28, 8], [28], [-1]], [[24, 17], [24], [-1]], [[29, 5], [28], [-1]], [[1001, 11], [1000], [-1]], [[999, 26], [998], [-1]], [[44, 9], [44], [-1]], [[2002, 997], [2002], [-1]], [[2000, 10], [2000], [-1]], [[2000, 5], [2000], [-1]], [[101, 10], [100], [-1]], [[2003, 11], [2002], [-1]], [[31, 6], [30], [-1]], [[30, 5], [30], [-1]], [[2001, 7], [2000], [-1]], [[1999, 30], [1998], [-1]], [[24, 5], [24], [-1]], [[1001, 23], [1000], [-1]], [[998, 1], [998], [-1]], [[15, 10], [14], [-1]], [[16, 9], [16], [-1]], [[102, 24], [102], [-1]], [[998, 29], [998], [-1]], [[2002, 2000], [2002], [-1]], [[44, 6], [44], [-1]], [[102, 100], [102], [-1]], [[1001, 100], [1000], [-1]], [[15, 2], [14], [-1]], [[2002, 10], [2002], [-1]], [[23, 15], [22], [-1]], [[25, 5], [24], [-1]], [[1001, 22], [1000], [-1]], [[99, 21], [98], [-1]], [[2000, 1000], [2000], [-1]], [[32, 5], [32], [-1]], [[2004, 2003], [2004], [-1]], [[18, 16], [18], [-1]], [[2001, 17], [2000], [-1]], [[2002, 2001], [2002], [-1]], [[30, 15], [30], [-1]], [[1002, 22], [1002], [-1]], [[31, 10], [30], [-1]], [[998, 101], [998], [-1]], [[23, 22], [22], [-1]], [[101, 21], [100], [-1]], [[998, 23], [998], [-1]], [[2003, 7], [2002], [-1]], [[43, 1], [42], [-1]], [[1001, 20], [1000], [-1]], [[1001, 30], [1000], [-1]], [[1998, 999], [1998], [-1]], [[1998, 9], [1998], [-1]], [[998, 28], [998], [-1]], [[24, 20], [24], [-1]], [[999, 7], [998], [-1]], [[99, 25], [98], [-1]], [[1001, 101], [1000], [-1]], [[16, 1], [16], [-1]], [[100, 5], [100], [-1]], [[25, 24], [24], [-1]], [[2000, 9], [2000], [-1]], [[1998, 31], [1998], [-1]], [[1999, 27], [1998], [-1]], [[31, 14], [30], [-1]], [[1999, 101], [1998], [-1]], [[998, 9], [998], [-1]], [[997, 23], [996], [-1]], [[26, 6], [26], [-1]], [[997, 101], [996], [-1]], [[2004, 31], [2004], [-1]], [[31, 30], [30], [-1]], [[1000, 23], [1000], [-1]], [[24, 16], [24], [-1]], [[28, 16], [28], [-1]], [[100, 19], [100], [-1]], [[44, 7], [44], [-1]], [[16, 5], [16], [-1]], [[997, 22], [996], [-1]], [[16, 15], [16], [-1]], [[2000, 1999], [2000], [-1]], [[1999, 102], [1998], [-1]], [[103, 102], [102], [-1]], [[31, 24], [30], [-1]], [[21, 6], [20], [-1]], [[26, 5], [26], [-1]], [[1000, 998], [1000], [-1]], [[2004, 8], [2004], [-1]], [[9, 7], [8], [-1]], [[20, 16], [20], [-1]], [[103, 27], [102], [-1]], [[102, 18], [102], [-1]], [[6, 4], [6], [-1]], [[2001, 104], [2000], [-1]], [[100, 43], [100], [-1]], [[1998, 43], [1998], [-1]], [[2002, 999], [2002], [-1]], [[43, 30], [42], [-1]], [[102, 9], [102], [-1]], [[2003, 5], [2002], [-1]], [[1002, 102], [1002], [-1]], [[1999, 998], [1998], [-1]], [[2003, 10], [2002], [-1]], [[14, 2], [14], [-1]], [[1000, 30], [1000], [-1]], [[22, 11], [22], [-1]], [[8, 5], [8], [-1]], [[96, 4], [96], [-1]], [[12, 8], [12], [-1]], [[18, 9], [18], [-1]], [[23, 20], [22], [-1]]], [[[13, 12], [12], [-1]], [[5234, 5233], [5234], [-1]], [[27, 10], [26], [-1]], [[100, 6], [100], [-1]], [[101, 6], [100], [-1]], [[21, 3], [20], [-1]], [[100, 35], [100], [-1]], [[60, 50], [60], [-1]], [[28, 1], [28], [-1]], [[200, 5], [200], [-1]], [[60, 6], [60], [-1]], [[30, 6], [30], [-1]], [[30, 1], [30], [-1]], [[21, 5], [20], [-1]], [[6, 5], [6], [-1]], [[13, 10], [12], [-1]], [[199, 12], [198], [-1]], [[14, 13], [14], [-1]], [[60, 11], [60], [-1]], [[100, 30], [100], [-1]], [[15, 14], [14], [-1]], [[36, 29], [36], [-1]], [[12, 11], [12], [-1]], [[100, 15], [100], [-1]], [[100, 13], [100], [-1]], [[200, 101], [200], [-1]], [[101, 15], [100], [-1]], [[36, 35], [36], [-1]], [[30, 21], [30], [-1]], [[12, 3], [12], [-1]], [[10, 4], [10], [-1]], [[21, 20], [20], [-1]], [[200, 199], [200], [-1]], [[99, 5], [98], [-1]], [[60, 21], [60], [-1]], [[20, 5], [20], [-1]], [[100, 98], [100], [-1]], [[60, 59], [60], [-1]], [[59, 21], [58], [-1]], [[101, 34], [100], [-1]], [[201, 1], [200], [-1]], [[50, 3], [50], [-1]], [[201, 200], [200], [-1]], [[201, 199], [200], [-1]], [[61, 60], [60], [-1]], [[999, 998], [998], [-1]], [[31, 1], [30], [-1]], [[100, 23], [100], [-1]], [[101, 100], [100], [-1]], [[101, 18], [100], [-1]], [[998, 31], [998], [-1]], [[2000, 21], [2000], [-1]], [[1000, 2], [1000], [-1]], [[8, 1], [8], [-1]], [[10, 2], [10], [-1]], [[31, 20], [30], [-1]], [[32, 1], [32], [-1]], [[20, 19], [20], [-1]], [[99, 31], [98], [-1]], [[32, 7], [32], [-1]], [[32, 6], [32], [-1]], [[2000, 998], [2000], [-1]], [[102, 22], [102], [-1]], [[1000, 24], [1000], [-1]], [[18, 6], [18], [-1]], [[100, 10], [100], [-1]], [[24, 7], [24], [-1]], [[1000, 22], [1000], [-1]], [[23, 21], [22], [-1]], [[32, 3], [32], [-1]], [[9, 5], [8], [-1]], [[3, 1], [2], [-1]], [[8, 7], [8], [-1]], [[3, 2], [2], [-1]], [[27, 6], [26], [-1]], [[20, 7], [20], [-1]], [[2, 1], [2], [-1]], [[100, 31], [100], [-1]], [[23, 18], [22], [-1]], [[99, 32], [98], [-1]], [[1000, 10], [1000], [-1]], [[1000, 1], [1000], [-1]], [[100, 22], [100], [-1]], [[23, 6], [22], [-1]], [[18, 8], [18], [-1]], [[33, 32], [32], [-1]], [[2001, 2000], [2000], [-1]], [[1000, 28], [1000], [-1]], [[22, 4], [22], [-1]], [[8, 2], [8], [-1]], [[11, 10], [10], [-1]], [[32, 22], [32], [-1]], [[29, 28], [28], [-1]], [[99, 10], [98], [-1]], [[7, 1], [6], [-1]], [[17, 7], [16], [-1]], [[1999, 28], [1998], [-1]], [[21, 19], [20], [-1]], [[998, 100], [998], [-1]], [[24, 10], [24], [-1]], [[33, 24], [32], [-1]], [[99, 6], [98], [-1]], [[998, 32], [998], [-1]], [[25, 20], [24], [-1]], [[33, 3], [32], [-1]], [[31, 18], [30], [-1]], [[22, 17], [22], [-1]], [[99, 3], [98], [-1]], [[11, 5], [10], [-1]], [[999, 102], [998], [-1]], [[4, 2], [4], [-1]], [[24, 9], [24], [-1]], [[99, 20], [98], [-1]], [[11, 9], [10], [-1]], [[32, 11], [32], [-1]], [[1000, 6], [1000], [-1]], [[1999, 1], [1998], [-1]], [[29, 1], [28], [-1]], [[1001, 18], [1000], [-1]], [[29, 18], [28], [-1]], [[2000, 99], [2000], [-1]], [[32, 18], [32], [-1]], [[10, 1], [10], [-1]], [[26, 25], [26], [-1]], [[28, 2], [28], [-1]], [[27, 10], [26], [-1]], [[2000, 16], [2000], [-1]], [[102, 10], [102], [-1]], [[999, 18], [998], [-1]], [[9, 8], [8], [-1]], [[9, 6], [8], [-1]], [[2000, 101], [2000], [-1]], [[22, 8], [22], [-1]], [[16, 6], [16], [-1]], [[101, 20], [100], [-1]], [[18, 17], [18], [-1]], [[10, 5], [10], [-1]], [[22, 21], [22], [-1]], [[999, 24], [998], [-1]], [[22, 10], [22], [-1]], [[7, 6], [6], [-1]], [[99, 26], [98], [-1]], [[102, 20], [102], [-1]], [[103, 7], [102], [-1]], [[1999, 21], [1998], [-1]], [[1999, 997], [1998], [-1]], [[1003, 1002], [1002], [-1]], [[32, 10], [32], [-1]], [[7, 3], [6], [-1]], [[31, 16], [30], [-1]], [[99, 98], [98], [-1]], [[100, 21], [100], [-1]], [[100, 11], [100], [-1]], [[98, 32], [98], [-1]], [[24, 6], [24], [-1]], [[1003, 1001], [1002], [-1]], [[1999, 1000], [1998], [-1]], [[30, 7], [30], [-1]], [[999, 99], [998], [-1]], [[34, 25], [34], [-1]], [[19, 3], [18], [-1]], [[34, 4], [34], [-1]], [[7, 2], [6], [-1]], [[1999, 19], [1998], [-1]], [[1001, 7], [1000], [-1]], [[22, 5], [22], [-1]], [[22, 6], [22], [-1]], [[32, 21], [32], [-1]], [[29, 6], [28], [-1]], [[16, 3], [16], [-1]], [[998, 10], [998], [-1]], [[1999, 99], [1998], [-1]], [[27, 7], [26], [-1]], [[34, 5], [34], [-1]], [[104, 7], [104], [-1]], [[100, 62], [100], [-1]], [[28, 27], [28], [-1]], [[100, 3], [100], [-1]], [[98, 21], [98], [-1]], [[25, 17], [24], [-1]], [[24, 23], [24], [-1]], [[1003, 998], [1002], [-1]], [[998, 997], [998], [-1]], [[22, 1], [22], [-1]], [[101, 32], [100], [-1]], [[1000, 999], [1000], [-1]], [[999, 28], [998], [-1]], [[100, 99], [100], [-1]], [[34, 33], [34], [-1]], [[30, 3], [30], [-1]], [[1000, 29], [1000], [-1]], [[18, 3], [18], [-1]], [[98, 7], [98], [-1]], [[34, 2], [34], [-1]], [[1001, 70], [1000], [-1]], [[1001, 998], [1000], [-1]], [[21, 18], [20], [-1]], [[998, 8], [998], [-1]], [[23, 1], [22], [-1]], [[2000, 3], [2000], [-1]], [[1004, 1003], [1004], [-1]], [[103, 99], [102], [-1]], [[1003, 7], [1002], [-1]], [[5, 3], [4], [-1]], [[1002, 1001], [1002], [-1]], [[102, 101], [102], [-1]], [[2000, 1004], [2000], [-1]], [[21, 8], [20], [-1]], [[99, 70], [98], [-1]], [[20, 8], [20], [-1]], [[33, 30], [32], [-1]], [[25, 9], [24], [-1]], [[31, 4], [30], [-1]], [[70, 5], [70], [-1]], [[31, 28], [30], [-1]], [[1999, 1004], [1998], [-1]], [[104, 29], [104], [-1]], [[997, 4], [996], [-1]], [[1000, 19], [1000], [-1]], [[23, 10], [22], [-1]], [[998, 6], [998], [-1]], [[30, 29], [30], [-1]], [[70, 32], [70], [-1]], [[27, 20], [26], [-1]], [[102, 21], [102], [-1]], [[8, 3], [8], [-1]], [[19, 4], [18], [-1]], [[33, 6], [32], [-1]], [[102, 99], [102], [-1]], [[28, 12], [28], [-1]], [[1001, 99], [1000], [-1]], [[999, 23], [998], [-1]], [[18, 1], [18], [-1]], [[103, 6], [102], [-1]], [[8, 6], [8], [-1]], [[28, 25], [28], [-1]], [[99, 12], [98], [-1]], [[32, 30], [32], [-1]], [[104, 27], [104], [-1]], [[28, 17], [28], [-1]], [[11, 8], [10], [-1]], [[2000, 24], [2000], [-1]], [[32, 31], [32], [-1]], [[26, 23], [26], [-1]], [[27, 26], [26], [-1]], [[29, 17], [28], [-1]], [[32, 23], [32], [-1]], [[22, 9], [22], [-1]], [[17, 5], [16], [-1]], [[34, 20], [34], [-1]], [[9, 2], [8], [-1]], [[35, 1], [34], [-1]], [[2000, 23], [2000], [-1]], [[2000, 62], [2000], [-1]], [[100, 63], [100], [-1]], [[996, 4], [996], [-1]], [[18, 4], [18], [-1]], [[101, 71], [100], [-1]], [[1003, 20], [1002], [-1]], [[70, 21], [70], [-1]], [[10, 3], [10], [-1]], [[72, 71], [72], [-1]], [[31, 17], [30], [-1]], [[62, 21], [62], [-1]], [[2001, 21], [2000], [-1]], [[1004, 18], [1004], [-1]], [[18, 2], [18], [-1]], [[104, 103], [104], [-1]], [[27, 18], [26], [-1]], [[1999, 98], [1998], [-1]], [[21, 7], [20], [-1]], [[30, 17], [30], [-1]], [[17, 8], [16], [-1]], [[29, 12], [28], [-1]], [[2001, 16], [2000], [-1]], [[27, 23], [26], [-1]], [[2000, 999], [2000], [-1]], [[30, 23], [30], [-1]], [[23, 8], [22], [-1]], [[27, 17], [26], [-1]], [[2000, 17], [2000], [-1]], [[999, 30], [998], [-1]], [[2000, 100], [2000], [-1]], [[30, 2], [30], [-1]], [[21, 10], [20], [-1]], [[100, 2], [100], [-1]], [[99, 2], [98], [-1]], [[99, 23], [98], [-1]], [[1000, 9], [1000], [-1]], [[30, 22], [30], [-1]], [[1000, 17], [1000], [-1]], [[999, 17], [998], [-1]], [[999, 100], [998], [-1]], [[31, 21], [30], [-1]], [[2001, 20], [2000], [-1]], [[27, 2], [26], [-1]], [[23, 9], [22], [-1]], [[29, 23], [28], [-1]], [[1999, 29], [1998], [-1]], [[999, 1], [998], [-1]], [[99, 7], [98], [-1]], [[5, 2], [4], [-1]], [[10, 9], [10], [-1]], [[30, 16], [30], [-1]], [[22, 18], [22], [-1]], [[1999, 999], [1998], [-1]], [[1999, 31], [1998], [-1]], [[99, 16], [98], [-1]], [[16, 10], [16], [-1]], [[11, 2], [10], [-1]], [[999, 9], [998], [-1]], [[99, 1], [98], [-1]], [[31, 7], [30], [-1]], [[23, 17], [22], [-1]], [[2000, 18], [2000], [-1]], [[99, 17], [98], [-1]], [[10, 7], [10], [-1]], [[21, 16], [20], [-1]], [[23, 7], [22], [-1]], [[1999, 8], [1998], [-1]], [[999, 20], [998], [-1]], [[1000, 16], [1000], [-1]], [[999, 21], [998], [-1]], [[26, 7], [26], [-1]], [[18, 7], [18], [-1]], [[44, 43], [44], [-1]], [[30, 10], [30], [-1]], [[2000, 7], [2000], [-1]], [[99, 24], [98], [-1]], [[2000, 1], [2000], [-1]], [[999, 10], [998], [-1]], [[1001, 24], [1000], [-1]], [[29, 22], [28], [-1]], [[2000, 20], [2000], [-1]], [[2001, 100], [2000], [-1]], [[99, 30], [98], [-1]], [[102, 30], [102], [-1]], [[999, 5], [998], [-1]], [[19, 7], [18], [-1]], [[2001, 1001], [2000], [-1]], [[102, 15], [102], [-1]], [[999, 19], [998], [-1]], [[2002, 31], [2002], [-1]], [[98, 17], [98], [-1]], [[2002, 30], [2002], [-1]], [[2001, 9], [2000], [-1]], [[1999, 11], [1998], [-1]], [[31, 8], [30], [-1]], [[1999, 17], [1998], [-1]], [[28, 8], [28], [-1]], [[24, 17], [24], [-1]], [[29, 5], [28], [-1]], [[1001, 11], [1000], [-1]], [[999, 26], [998], [-1]], [[44, 9], [44], [-1]], [[2002, 997], [2002], [-1]], [[2000, 10], [2000], [-1]], [[2000, 5], [2000], [-1]], [[101, 10], [100], [-1]], [[2003, 11], [2002], [-1]], [[31, 6], [30], [-1]], [[30, 5], [30], [-1]], [[2001, 7], [2000], [-1]], [[1999, 30], [1998], [-1]], [[24, 5], [24], [-1]], [[1001, 23], [1000], [-1]], [[998, 1], [998], [-1]], [[15, 10], [14], [-1]], [[16, 9], [16], [-1]], [[102, 24], [102], [-1]], [[998, 29], [998], [-1]], [[2002, 2000], [2002], [-1]], [[44, 6], [44], [-1]], [[102, 100], [102], [-1]], [[1001, 100], [1000], [-1]], [[15, 2], [14], [-1]], [[2002, 10], [2002], [-1]], [[23, 15], [22], [-1]], [[25, 5], [24], [-1]], [[1001, 22], [1000], [-1]], [[99, 21], [98], [-1]], [[2000, 1000], [2000], [-1]], [[32, 5], [32], [-1]], [[2004, 2003], [2004], [-1]], [[18, 16], [18], [-1]], [[2001, 17], [2000], [-1]], [[2002, 2001], [2002], [-1]], [[30, 15], [30], [-1]], [[1002, 22], [1002], [-1]], [[31, 10], [30], [-1]], [[998, 101], [998], [-1]], [[23, 22], [22], [-1]], [[101, 21], [100], [-1]], [[998, 23], [998], [-1]], [[2003, 7], [2002], [-1]], [[43, 1], [42], [-1]], [[1001, 20], [1000], [-1]], [[1001, 30], [1000], [-1]], [[1998, 999], [1998], [-1]], [[1998, 9], [1998], [-1]], [[998, 28], [998], [-1]], [[24, 20], [24], [-1]], [[999, 7], [998], [-1]], [[99, 25], [98], [-1]], [[1001, 101], [1000], [-1]], [[16, 1], [16], [-1]], [[100, 5], [100], [-1]], [[25, 24], [24], [-1]], [[2000, 9], [2000], [-1]], [[1998, 31], [1998], [-1]], [[1999, 27], [1998], [-1]], [[31, 14], [30], [-1]], [[1999, 101], [1998], [-1]], [[998, 9], [998], [-1]], [[997, 23], [996], [-1]], [[26, 6], [26], [-1]], [[997, 101], [996], [-1]], [[2004, 31], [2004], [-1]], [[31, 30], [30], [-1]], [[1000, 23], [1000], [-1]], [[24, 16], [24], [-1]], [[28, 16], [28], [-1]], [[100, 19], [100], [-1]], [[44, 7], [44], [-1]], [[16, 5], [16], [-1]], [[997, 22], [996], [-1]], [[16, 15], [16], [-1]], [[2000, 1999], [2000], [-1]], [[1999, 102], [1998], [-1]], [[103, 102], [102], [-1]], [[31, 24], [30], [-1]], [[21, 6], [20], [-1]], [[26, 5], [26], [-1]], [[1000, 998], [1000], [-1]], [[2004, 8], [2004], [-1]], [[9, 7], [8], [-1]], [[20, 16], [20], [-1]], [[103, 27], [102], [-1]], [[102, 18], [102], [-1]], [[6, 4], [6], [-1]], [[2001, 104], [2000], [-1]], [[100, 43], [100], [-1]], [[1998, 43], [1998], [-1]], [[2002, 999], [2002], [-1]], [[43, 30], [42], [-1]], [[102, 9], [102], [-1]], [[2003, 5], [2002], [-1]], [[1002, 102], [1002], [-1]], [[1999, 998], [1998], [-1]], [[2003, 10], [2002], [-1]], [[14, 2], [14], [-1]], [[1000, 30], [1000], [-1]], [[22, 11], [22], [-1]], [[8, 5], [8], [-1]], [[96, 4], [96], [-1]], [[12, 8], [12], [-1]], [[18, 9], [18], [-1]], [[23, 20], [22], [-1]]], [[[13, 12], [12], [-1]], [[5234, 5233], [5234], [-1]], [[27, 10], [26], [-1]], [[100, 6], [100], [-1]], [[101, 6], [100], [-1]], [[21, 3], [20], [-1]], [[100, 35], [100], [-1]], [[60, 50], [60], [-1]], [[28, 1], [28], [-1]], [[200, 5], [200], [-1]], [[60, 6], [60], [-1]], [[30, 6], [30], [-1]], [[30, 1], [30], [-1]], [[21, 5], [20], [-1]], [[6, 5], [6], [-1]], [[13, 10], [12], [-1]], [[199, 12], [198], [-1]], [[14, 13], [14], [-1]], [[60, 11], [60], [-1]], [[100, 30], [100], [-1]], [[15, 14], [14], [-1]], [[36, 29], [36], [-1]], [[12, 11], [12], [-1]], [[100, 15], [100], [-1]], [[100, 13], [100], [-1]], [[200, 101], [200], [-1]], [[101, 15], [100], [-1]], [[36, 35], [36], [-1]], [[30, 21], [30], [-1]], [[12, 3], [12], [-1]], [[10, 4], [10], [-1]], [[21, 20], [20], [-1]], [[200, 199], [200], [-1]], [[99, 5], [98], [-1]], [[60, 21], [60], [-1]], [[20, 5], [20], [-1]], [[100, 98], [100], [-1]], [[60, 59], [60], [-1]], [[59, 21], [58], [-1]], [[101, 34], [100], [-1]], [[201, 1], [200], [-1]], [[50, 3], [50], [-1]], [[201, 200], [200], [-1]], [[201, 199], [200], [-1]], [[61, 60], [60], [-1]], [[999, 998], [998], [-1]], [[31, 1], [30], [-1]], [[100, 23], [100], [-1]], [[101, 100], [100], [-1]], [[101, 18], [100], [-1]], [[998, 31], [998], [-1]], [[2000, 21], [2000], [-1]], [[1000, 2], [1000], [-1]], [[8, 1], [8], [-1]], [[10, 2], [10], [-1]], [[31, 20], [30], [-1]], [[32, 1], [32], [-1]], [[20, 19], [20], [-1]], [[99, 31], [98], [-1]], [[32, 7], [32], [-1]], [[32, 6], [32], [-1]], [[2000, 998], [2000], [-1]], [[102, 22], [102], [-1]], [[1000, 24], [1000], [-1]], [[18, 6], [18], [-1]], [[100, 10], [100], [-1]], [[24, 7], [24], [-1]], [[1000, 22], [1000], [-1]], [[23, 21], [22], [-1]], [[32, 3], [32], [-1]], [[9, 5], [8], [-1]], [[3, 1], [2], [-1]], [[8, 7], [8], [-1]], [[3, 2], [2], [-1]], [[27, 6], [26], [-1]], [[20, 7], [20], [-1]], [[2, 1], [2], [-1]], [[100, 31], [100], [-1]], [[23, 18], [22], [-1]], [[99, 32], [98], [-1]], [[1000, 10], [1000], [-1]], [[1000, 1], [1000], [-1]], [[100, 22], [100], [-1]], [[23, 6], [22], [-1]], [[18, 8], [18], [-1]], [[33, 32], [32], [-1]], [[2001, 2000], [2000], [-1]], [[1000, 28], [1000], [-1]], [[22, 4], [22], [-1]], [[8, 2], [8], [-1]], [[11, 10], [10], [-1]], [[32, 22], [32], [-1]], [[29, 28], [28], [-1]], [[99, 10], [98], [-1]], [[7, 1], [6], [-1]], [[17, 7], [16], [-1]], [[1999, 28], [1998], [-1]], [[21, 19], [20], [-1]], [[998, 100], [998], [-1]], [[24, 10], [24], [-1]], [[33, 24], [32], [-1]], [[99, 6], [98], [-1]], [[998, 32], [998], [-1]], [[25, 20], [24], [-1]], [[33, 3], [32], [-1]], [[31, 18], [30], [-1]], [[22, 17], [22], [-1]], [[99, 3], [98], [-1]], [[11, 5], [10], [-1]], [[999, 102], [998], [-1]], [[4, 2], [4], [-1]], [[24, 9], [24], [-1]], [[99, 20], [98], [-1]], [[11, 9], [10], [-1]], [[32, 11], [32], [-1]], [[1000, 6], [1000], [-1]], [[1999, 1], [1998], [-1]], [[29, 1], [28], [-1]], [[1001, 18], [1000], [-1]], [[29, 18], [28], [-1]], [[2000, 99], [2000], [-1]], [[32, 18], [32], [-1]], [[10, 1], [10], [-1]], [[26, 25], [26], [-1]], [[28, 2], [28], [-1]], [[27, 10], [26], [-1]], [[2000, 16], [2000], [-1]], [[102, 10], [102], [-1]], [[999, 18], [998], [-1]], [[9, 8], [8], [-1]], [[9, 6], [8], [-1]], [[2000, 101], [2000], [-1]], [[22, 8], [22], [-1]], [[16, 6], [16], [-1]], [[101, 20], [100], [-1]], [[18, 17], [18], [-1]], [[10, 5], [10], [-1]], [[22, 21], [22], [-1]], [[999, 24], [998], [-1]], [[22, 10], [22], [-1]], [[7, 6], [6], [-1]], [[99, 26], [98], [-1]], [[102, 20], [102], [-1]], [[103, 7], [102], [-1]], [[1999, 21], [1998], [-1]], [[1999, 997], [1998], [-1]], [[1003, 1002], [1002], [-1]], [[32, 10], [32], [-1]], [[7, 3], [6], [-1]], [[31, 16], [30], [-1]], [[99, 98], [98], [-1]], [[100, 21], [100], [-1]], [[100, 11], [100], [-1]], [[98, 32], [98], [-1]], [[24, 6], [24], [-1]], [[1003, 1001], [1002], [-1]], [[1999, 1000], [1998], [-1]], [[30, 7], [30], [-1]], [[999, 99], [998], [-1]], [[34, 25], [34], [-1]], [[19, 3], [18], [-1]], [[34, 4], [34], [-1]], [[7, 2], [6], [-1]], [[1999, 19], [1998], [-1]], [[1001, 7], [1000], [-1]], [[22, 5], [22], [-1]], [[22, 6], [22], [-1]], [[32, 21], [32], [-1]], [[29, 6], [28], [-1]], [[16, 3], [16], [-1]], [[998, 10], [998], [-1]], [[1999, 99], [1998], [-1]], [[27, 7], [26], [-1]], [[34, 5], [34], [-1]], [[104, 7], [104], [-1]], [[100, 62], [100], [-1]], [[28, 27], [28], [-1]], [[100, 3], [100], [-1]], [[98, 21], [98], [-1]], [[25, 17], [24], [-1]], [[24, 23], [24], [-1]], [[1003, 998], [1002], [-1]], [[998, 997], [998], [-1]], [[22, 1], [22], [-1]], [[101, 32], [100], [-1]], [[1000, 999], [1000], [-1]], [[999, 28], [998], [-1]], [[100, 99], [100], [-1]], [[34, 33], [34], [-1]], [[30, 3], [30], [-1]], [[1000, 29], [1000], [-1]], [[18, 3], [18], [-1]], [[98, 7], [98], [-1]], [[34, 2], [34], [-1]], [[1001, 70], [1000], [-1]], [[1001, 998], [1000], [-1]], [[21, 18], [20], [-1]], [[998, 8], [998], [-1]], [[23, 1], [22], [-1]], [[2000, 3], [2000], [-1]], [[1004, 1003], [1004], [-1]], [[103, 99], [102], [-1]], [[1003, 7], [1002], [-1]], [[5, 3], [4], [-1]], [[1002, 1001], [1002], [-1]], [[102, 101], [102], [-1]], [[2000, 1004], [2000], [-1]], [[21, 8], [20], [-1]], [[99, 70], [98], [-1]], [[20, 8], [20], [-1]], [[33, 30], [32], [-1]], [[25, 9], [24], [-1]], [[31, 4], [30], [-1]], [[70, 5], [70], [-1]], [[31, 28], [30], [-1]], [[1999, 1004], [1998], [-1]], [[104, 29], [104], [-1]], [[997, 4], [996], [-1]], [[1000, 19], [1000], [-1]], [[23, 10], [22], [-1]], [[998, 6], [998], [-1]], [[30, 29], [30], [-1]], [[70, 32], [70], [-1]], [[27, 20], [26], [-1]], [[102, 21], [102], [-1]], [[8, 3], [8], [-1]], [[19, 4], [18], [-1]], [[33, 6], [32], [-1]], [[102, 99], [102], [-1]], [[28, 12], [28], [-1]], [[1001, 99], [1000], [-1]], [[999, 23], [998], [-1]], [[18, 1], [18], [-1]], [[103, 6], [102], [-1]], [[8, 6], [8], [-1]], [[28, 25], [28], [-1]], [[99, 12], [98], [-1]], [[32, 30], [32], [-1]], [[104, 27], [104], [-1]], [[28, 17], [28], [-1]], [[11, 8], [10], [-1]], [[2000, 24], [2000], [-1]], [[32, 31], [32], [-1]], [[26, 23], [26], [-1]], [[27, 26], [26], [-1]], [[29, 17], [28], [-1]], [[32, 23], [32], [-1]], [[22, 9], [22], [-1]], [[17, 5], [16], [-1]], [[34, 20], [34], [-1]], [[9, 2], [8], [-1]], [[35, 1], [34], [-1]], [[2000, 23], [2000], [-1]], [[2000, 62], [2000], [-1]], [[100, 63], [100], [-1]], [[996, 4], [996], [-1]], [[18, 4], [18], [-1]], [[101, 71], [100], [-1]], [[1003, 20], [1002], [-1]], [[70, 21], [70], [-1]], [[10, 3], [10], [-1]], [[72, 71], [72], [-1]], [[31, 17], [30], [-1]], [[62, 21], [62], [-1]], [[2001, 21], [2000], [-1]], [[1004, 18], [1004], [-1]], [[18, 2], [18], [-1]], [[104, 103], [104], [-1]], [[27, 18], [26], [-1]], [[1999, 98], [1998], [-1]], [[21, 7], [20], [-1]], [[30, 17], [30], [-1]], [[17, 8], [16], [-1]], [[29, 12], [28], [-1]], [[2001, 16], [2000], [-1]], [[27, 23], [26], [-1]], [[2000, 999], [2000], [-1]], [[30, 23], [30], [-1]], [[23, 8], [22], [-1]], [[27, 17], [26], [-1]], [[2000, 17], [2000], [-1]], [[999, 30], [998], [-1]], [[2000, 100], [2000], [-1]], [[30, 2], [30], [-1]], [[21, 10], [20], [-1]], [[100, 2], [100], [-1]], [[99, 2], [98], [-1]], [[99, 23], [98], [-1]], [[1000, 9], [1000], [-1]], [[30, 22], [30], [-1]], [[1000, 17], [1000], [-1]], [[999, 17], [998], [-1]], [[999, 100], [998], [-1]], [[31, 21], [30], [-1]], [[2001, 20], [2000], [-1]], [[27, 2], [26], [-1]], [[23, 9], [22], [-1]], [[29, 23], [28], [-1]], [[1999, 29], [1998], [-1]], [[999, 1], [998], [-1]], [[99, 7], [98], [-1]], [[5, 2], [4], [-1]], [[10, 9], [10], [-1]], [[30, 16], [30], [-1]], [[22, 18], [22], [-1]], [[1999, 999], [1998], [-1]], [[1999, 31], [1998], [-1]], [[99, 16], [98], [-1]], [[16, 10], [16], [-1]], [[11, 2], [10], [-1]], [[999, 9], [998], [-1]], [[99, 1], [98], [-1]], [[31, 7], [30], [-1]], [[23, 17], [22], [-1]], [[2000, 18], [2000], [-1]], [[99, 17], [98], [-1]], [[10, 7], [10], [-1]], [[21, 16], [20], [-1]], [[23, 7], [22], [-1]], [[1999, 8], [1998], [-1]], [[999, 20], [998], [-1]], [[1000, 16], [1000], [-1]], [[999, 21], [998], [-1]], [[26, 7], [26], [-1]], [[18, 7], [18], [-1]], [[44, 43], [44], [-1]], [[30, 10], [30], [-1]], [[2000, 7], [2000], [-1]], [[99, 24], [98], [-1]], [[2000, 1], [2000], [-1]], [[999, 10], [998], [-1]], [[1001, 24], [1000], [-1]], [[29, 22], [28], [-1]], [[2000, 20], [2000], [-1]], [[2001, 100], [2000], [-1]], [[99, 30], [98], [-1]], [[102, 30], [102], [-1]], [[999, 5], [998], [-1]], [[19, 7], [18], [-1]], [[2001, 1001], [2000], [-1]], [[102, 15], [102], [-1]], [[999, 19], [998], [-1]], [[2002, 31], [2002], [-1]], [[98, 17], [98], [-1]], [[2002, 30], [2002], [-1]], [[2001, 9], [2000], [-1]], [[1999, 11], [1998], [-1]], [[31, 8], [30], [-1]], [[1999, 17], [1998], [-1]], [[28, 8], [28], [-1]], [[24, 17], [24], [-1]], [[29, 5], [28], [-1]], [[1001, 11], [1000], [-1]], [[999, 26], [998], [-1]], [[44, 9], [44], [-1]], [[2002, 997], [2002], [-1]], [[2000, 10], [2000], [-1]], [[2000, 5], [2000], [-1]], [[101, 10], [100], [-1]], [[2003, 11], [2002], [-1]], [[31, 6], [30], [-1]], [[30, 5], [30], [-1]], [[2001, 7], [2000], [-1]], [[1999, 30], [1998], [-1]], [[24, 5], [24], [-1]], [[1001, 23], [1000], [-1]], [[998, 1], [998], [-1]], [[15, 10], [14], [-1]], [[16, 9], [16], [-1]], [[102, 24], [102], [-1]], [[998, 29], [998], [-1]], [[2002, 2000], [2002], [-1]], [[44, 6], [44], [-1]], [[102, 100], [102], [-1]], [[1001, 100], [1000], [-1]], [[15, 2], [14], [-1]], [[2002, 10], [2002], [-1]], [[23, 15], [22], [-1]], [[25, 5], [24], [-1]], [[1001, 22], [1000], [-1]], [[99, 21], [98], [-1]], [[2000, 1000], [2000], [-1]], [[32, 5], [32], [-1]], [[2004, 2003], [2004], [-1]], [[18, 16], [18], [-1]], [[2001, 17], [2000], [-1]], [[2002, 2001], [2002], [-1]], [[30, 15], [30], [-1]], [[1002, 22], [1002], [-1]], [[31, 10], [30], [-1]], [[998, 101], [998], [-1]], [[23, 22], [22], [-1]], [[101, 21], [100], [-1]], [[998, 23], [998], [-1]], [[2003, 7], [2002], [-1]], [[43, 1], [42], [-1]], [[1001, 20], [1000], [-1]], [[1001, 30], [1000], [-1]], [[1998, 999], [1998], [-1]], [[1998, 9], [1998], [-1]], [[998, 28], [998], [-1]], [[24, 20], [24], [-1]], [[999, 7], [998], [-1]], [[99, 25], [98], [-1]], [[1001, 101], [1000], [-1]], [[16, 1], [16], [-1]], [[100, 5], [100], [-1]], [[25, 24], [24], [-1]], [[2000, 9], [2000], [-1]], [[1998, 31], [1998], [-1]], [[1999, 27], [1998], [-1]], [[31, 14], [30], [-1]], [[1999, 101], [1998], [-1]], [[998, 9], [998], [-1]], [[997, 23], [996], [-1]], [[26, 6], [26], [-1]], [[997, 101], [996], [-1]], [[2004, 31], [2004], [-1]], [[31, 30], [30], [-1]], [[1000, 23], [1000], [-1]], [[24, 16], [24], [-1]], [[28, 16], [28], [-1]], [[100, 19], [100], [-1]], [[44, 7], [44], [-1]], [[16, 5], [16], [-1]], [[997, 22], [996], [-1]], [[16, 15], [16], [-1]], [[2000, 1999], [2000], [-1]], [[1999, 102], [1998], [-1]], [[103, 102], [102], [-1]], [[31, 24], [30], [-1]], [[21, 6], [20], [-1]], [[26, 5], [26], [-1]], [[1000, 998], [1000], [-1]], [[2004, 8], [2004], [-1]], [[9, 7], [8], [-1]], [[20, 16], [20], [-1]], [[103, 27], [102], [-1]], [[102, 18], [102], [-1]], [[6, 4], [6], [-1]], [[2001, 104], [2000], [-1]], [[100, 43], [100], [-1]], [[1998, 43], [1998], [-1]], [[2002, 999], [2002], [-1]], [[43, 30], [42], [-1]], [[102, 9], [102], [-1]], [[2003, 5], [2002], [-1]], [[1002, 102], [1002], [-1]], [[1999, 998], [1998], [-1]], [[2003, 10], [2002], [-1]], [[14, 2], [14], [-1]], [[1000, 30], [1000], [-1]], [[22, 11], [22], [-1]], [[8, 5], [8], [-1]], [[96, 4], [96], [-1]], [[12, 8], [12], [-1]], [[18, 9], [18], [-1]], [[23, 20], [22], [-1]]]]"}
{"task_id": "HumanEval/103", "requirement": "from typing import Union\n\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    average = round(total / (m - n + 1))\n    return bin(average)", "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded = round(avg)\n    return bin(rounded)", "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    average = round(total / (m - n + 1))\n    return bin(average)", "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    average = round(total / (m - n + 1))\n    return bin(average)", "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    count = m - n + 1\n    average = round(total / count)\n    return bin(average)", "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)", "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    average = round(total / (m - n + 1))\n    return bin(average)", "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    average = round(total / (m - n + 1))\n    return bin(average)", "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    count = m - n + 1\n    average = round(total / count)\n    return bin(average)", "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    count = m - n + 1\n    average = round(total / count)\n    return bin(average)", "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    average = round(total / (m - n + 1))\n    return bin(average)"], "outputs": "[['0b11'], [-1], ['0b1111'], ['0b11010'], ['0b0'], ['0b1'], ['0b0'], ['0b10010110'], ['0b1111101000'], ['0b1111']]", "probability": 0.95, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)[2:]"], "outputs": "[['11'], [-1], ['1111'], ['11010'], ['0'], ['1'], ['0'], ['10010110'], ['1111101000'], ['1111']]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.25, "failed_input_output_examples": "[[[1, 5], ['11'], ['0b11']], [[10, 20], ['1111'], ['0b1111']], [[20, 33], ['11010'], ['0b11010']]]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[1, 5], [7, 5], [10, 20], [20, 33], [0, 0], [1, 1], [-1, 1], [100, 200], [999, 1001], [15, 15]]", "input_output_examples": "[[[1, 5], [7, 5], [10, 20], [20, 33]], [['0b11'], [-1], ['0b1111'], ['0b11010']]]", "weighted_test_consistency": 0.9624999999999999, "at_least_one_align": true, "ambiguity": 0.16194847855797814}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/104", "requirement": "from typing import List\n\n\ndef unique_digits(x: List[int]) -> List[int]:\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\n    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n //= 10\n        return False\n    return sorted([num for num in x if not has_even_digit(num)])", "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\n    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)", "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\n    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)", "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\n    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)", "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\n    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)", "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\n    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    result = [num for num in x if not has_even_digit(num)]\n    result.sort()\n    return result", "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\n    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n //= 10\n        return False\n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)", "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\n    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)", "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\n    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    return sorted([num for num in x if not has_even_digit(num)])", "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\n    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    return sorted([num for num in x if not has_even_digit(num)])", "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\n    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    result = [num for num in x if not has_even_digit(num)]\n    result.sort()\n    return result", "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\n    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)", "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\n    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    return sorted([num for num in x if not has_even_digit(num)])", "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\n    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    result = [num for num in x if not has_even_digit(num)]\n    result.sort()\n    return result", "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\n    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)", "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\n    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)", "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\n    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)", "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\n    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)", "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\n    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)", "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\n    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    result = [num for num in x if not has_even_digit(num)]\n    result.sort()\n    return result"], "outputs": "[[[1, 15, 33]], [[]], [[1, 3, 5, 7, 9]], [[]], [[13579, 97531]], [[]], [[111, 1111, 11111]], [[]], [[]], [[13, 57, 91]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[15, 33, 1422, 1]], [[152, 323, 1422, 10]], [[1, 3, 5, 7, 9]], [[22, 44, 66, 88]], [[13579, 2468, 97531, 8642]], [[]], [[111, 1111, 11111]], [[123, 456, 789]], [[2, 4, 6, 8]], [[13, 57, 91, 24]]]", "input_output_examples": "[[[[15, 33, 1422, 1]], [[152, 323, 1422, 10]]], [[[1, 15, 33]], [[]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/105", "requirement": "from typing import List\n\n\ndef by_length(arr: List[int]) -> List[str]:\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    Constraints:\n    - The input array may contain integers of any value.\n    - Only integers between 1 and 9 (inclusive) should be processed.\n\n    Notes:\n    - Skip numbers outside the range of 1 to 9.\n    - The final output should be the names of the digits in reversed order of the sorted valid numbers.\n    - If the input array is empty, the returned result should also be an empty array.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    valid_numbers = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [digit_names[num - 1] for num in valid_numbers]", "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    valid_numbers = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [digit_names[num - 1] for num in valid_numbers]", "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered = [x for x in arr if 1 <= x <= 9]\n    filtered.sort(reverse=True)\n    return [digit_names[x - 1] for x in filtered]", "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    return [digit_names[x - 1] for x in filtered]", "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered = [x for x in arr if 1 <= x <= 9]\n    filtered.sort(reverse=True)\n    return [digit_names[x - 1] for x in filtered]", "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered = [x for x in arr if 1 <= x <= 9]\n    sorted_filtered = sorted(filtered)\n    reversed_sorted = sorted_filtered[::-1]\n    return [digit_names[x - 1] for x in reversed_sorted]", "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered = [x for x in arr if 1 <= x <= 9]\n    filtered.sort()\n    filtered.reverse()\n    return [digit_names[x - 1] for x in filtered]", "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered = [x for x in arr if 1 <= x <= 9]\n    sorted_filtered = sorted(filtered)\n    reversed_sorted = sorted_filtered[::-1]\n    return [digit_names[x - 1] for x in reversed_sorted]", "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered = [x for x in arr if 1 <= x <= 9]\n    sorted_filtered = sorted(filtered)\n    reversed_sorted = sorted_filtered[::-1]\n    return [digit_names[i - 1] for i in reversed_sorted]", "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered = sorted([x for x in arr if 1 <= x <= 9])\n    reversed_filtered = filtered[::-1]\n    return [digit_names[x - 1] for x in reversed_filtered]", "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    return [digit_names[x - 1] for x in filtered]", "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered = [x for x in arr if 1 <= x <= 9]\n    filtered.sort(reverse=True)\n    return [digit_names[x - 1] for x in filtered]", "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    valid_numbers = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [digit_names[num - 1] for num in valid_numbers]", "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    valid_numbers = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [digit_names[num - 1] for num in valid_numbers]", "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered = [x for x in arr if 1 <= x <= 9]\n    filtered.sort(reverse=True)\n    return [digit_names[x - 1] for x in filtered]", "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    valid_numbers = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [digit_names[num - 1] for num in valid_numbers]", "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered = [x for x in arr if 1 <= x <= 9]\n    sorted_filtered = sorted(filtered)\n    reversed_sorted = sorted_filtered[::-1]\n    return [digit_names[x - 1] for x in reversed_sorted]", "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered = [x for x in arr if 1 <= x <= 9]\n    sorted_filtered = sorted(filtered)\n    reversed_sorted = sorted_filtered[::-1]\n    result = [digit_names[x - 1] for x in reversed_sorted]\n    return result", "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered = [x for x in arr if 1 <= x <= 9]\n    filtered.sort(reverse=True)\n    return [digit_names[x - 1] for x in filtered]", "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    valid_numbers = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [digit_names[num - 1] for num in valid_numbers]"], "outputs": "[[['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']], [[]], [['One']], [['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']], [[]], [['Five', 'Four', 'Three', 'Two', 'One']], [[]], [['One', 'One', 'One', 'One']]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[2, 1, 1, 4, 5, 8, 2, 3]], [[]], [[1, -1, 55]], [[9, 8, 7, 6, 5, 4, 3, 2, 1]], [[10, 11, 12]], [[1, 2, 3, 10, 4, 5]], [[0, 0, 0]], [[1, 1, 1, 1]]]", "input_output_examples": "[[[[2, 1, 1, 4, 5, 8, 2, 3]], [[]], [[1, -1, 55]]], [[['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']], [[]], [['One']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/106", "requirement": "from typing import List\n\n\ndef f(n: int) -> List[int]:\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\nimport math\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "from typing import List\nimport math\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "from typing import List\nimport math\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "from typing import List\nimport math\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "from typing import List\nimport math\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "from typing import List\nimport math\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "from typing import List\nimport math\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "from typing import List\nimport math\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "from typing import List\nimport math\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "from typing import List\nimport math\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "from typing import List\nfrom math import factorial\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "from typing import List\nimport math\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "from typing import List\nimport math\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "from typing import List\nimport math\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "from typing import List\nimport math\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "from typing import List\nimport math\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "from typing import List\nimport math\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "from typing import List\nimport math\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "from typing import List\nimport math\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "from typing import List\nimport math\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"], "outputs": "[[[1]], [[1, 2]], [[1, 2, 6, 24, 15]], [[1, 2, 6, 24, 15, 720]], [[]], [[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [5], [6], [0], [10]]", "input_output_examples": "[[[5]], [[[1, 2, 6, 24, 15]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/107", "requirement": "from typing import Tuple\n\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        s = str(num)\n        if s == s[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        s = str(i)\n        if s == s[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"], "outputs": "[[(0, 1)], [(1, 1)], [(1, 2)], [(4, 5)], [(4, 6)], [(8, 10)], [(8, 11)], [(48, 60)], [(48, 60)], [(28, 30)], [(8, 13)], [(24, 30)], [(38, 49)], [(8, 12)], [(11, 20)], [(18, 24)], [(48, 58)], [(33, 40)], [(18, 22)], [(4, 6)]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [3], [10], [12], [100], [101], [999], [1000], [500], [123], [456], [789], [111], [222], [333], [987], [654], [321], [13]]", "input_output_examples": "[[[3], [12]], [[(1, 2)], [(4, 6)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/108", "requirement": "from typing import List\n\n\ndef count_nums(arr: List[int]) -> int:\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    \"\"\"", "repaired_requirement": "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    \"\"\"\n    Counts the number of integers in the array where the sum of the digits is greater than 0.\n    For negative numbers, the first digit is treated as negative in the sum.\n\n    Args:\n        arr (List[int]): A list of integers to process.\n\n    Returns:\n        int: The count of numbers in the array where the sum of the digits is greater than 0.\n\n    Example:\n        >>> count_nums([123, -456, 789])\n        2\n        >>> count_nums([-123, 0, 456])\n        1\n    \"\"\"", "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    return sum((1 for num in arr if sum((int(digit) for digit in str(num))) > 0))", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    return sum((1 for num in arr if sum((int(digit) for digit in str(num))) > 0))", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    return sum((1 for num in arr if sum((int(digit) for digit in str(num))) > 0))", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    return sum((1 for num in arr if sum((int(digit) for digit in str(num))) > 0))", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    return sum((1 for num in arr if sum((int(digit) for digit in str(num))) > 0))", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    return sum((1 for num in arr if sum((int(digit) for digit in str(num))) > 0))", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    return sum((1 for num in arr if sum((int(digit) for digit in str(num))) > 0))", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    return sum((1 for num in arr if sum((int(digit) for digit in str(num))) > 0))", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_of_digits(n: int) -> int:\n        return sum((int(digit) for digit in str(n)))\n    return sum((1 for num in arr if sum_of_digits(num) > 0))"], "outputs": "[[0], ['ValueError'], [3], [0], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError']]", "probability": 0.45, "is_align_req": false, "test_consistency": 0.6666666666666667, "failed_input_output_examples": "[[[[-1, 11, -11]], ['ValueError'], [1]]]"}, {"programs_str": ["from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    return sum((1 for num in arr if sum((int(digit) for digit in str(num) if digit != '-')) > 0))", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_of_digits(n: int) -> int:\n        if n < 0:\n            n = -n\n        return sum((int(digit) for digit in str(n)))\n    return sum((1 for num in arr if sum_of_digits(num) > 0))"], "outputs": "[[0], [3], [3], [0], [3], [5], [4], [5]]", "probability": 0.1, "is_align_req": false, "test_consistency": 0.6666666666666667, "failed_input_output_examples": "[[[[-1, 11, -11]], [3], [1]]]"}, {"programs_str": ["from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    return sum((1 for num in arr if sum((int(digit) if i == 0 or num >= 0 else -int(digit) for i, digit in enumerate(str(abs(num))))) > 0))"], "outputs": "[[0], [2], [3], [0], [1], [5], [2], [3]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.6666666666666667, "failed_input_output_examples": "[[[[-1, 11, -11]], [2], [1]]]"}, {"programs_str": ["from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n: int) -> int:\n        sign = -1 if n < 0 else 1\n        return sum((int(digit) * (sign if i == 0 else 1) for i, digit in enumerate(str(abs(n)))))\n    return sum((1 for num in arr if sum_digits(num) > 0))", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_of_digits(n: int) -> int:\n        if n < 0:\n            n = -n\n            return -sum(map(int, str(n)[:1])) + sum(map(int, str(n)[1:]))\n        return sum(map(int, str(n)))\n    return sum((1 for num in arr if sum_of_digits(num) > 0))", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n: int) -> int:\n        sign = -1 if n < 0 else 1\n        return sum((int(digit) * (sign if i == 0 else 1) for i, digit in enumerate(str(abs(n)))))\n    return sum((1 for num in arr if sum_digits(num) > 0))"], "outputs": "[[0], [1], [3], [0], [3], [3], [4], [5]]", "probability": 0.15, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n: int) -> int:\n        total = 0\n        sign = -1 if n < 0 else 1\n        n = abs(n)\n        while n > 0:\n            total += n % 10\n            n = n // 10\n        return sign * total\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_of_digits(n: int) -> int:\n        total = 0\n        sign = -1 if n < 0 else 1\n        n = abs(n)\n        while n > 0:\n            total += n % 10\n            n //= 10\n        return sign * total\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n: int) -> int:\n        total = 0\n        sign = -1 if n < 0 else 1\n        n = abs(n)\n        while n > 0:\n            total += n % 10\n            n = n // 10\n        return total * sign\n    return sum((1 for num in arr if sum_digits(num) > 0))", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n: int) -> int:\n        sign = -1 if n < 0 else 1\n        n = abs(n)\n        total = 0\n        while n > 0:\n            total += n % 10\n            n //= 10\n        return sign * total\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count"], "outputs": "[[0], [1], [3], [0], [1], [3], [2], [3]]", "probability": 0.2, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n: int) -> int:\n        sign = -1 if n < 0 else 1\n        n = abs(n)\n        total = 0\n        while n > 0:\n            total += sign * (n % 10)\n            sign = 1\n            n //= 10\n        return total\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count"], "outputs": "[[0], [1], [3], [0], [2], [5], [3], [5]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8347190601520083, "llm_generated_inputs": "[[[]], [[-1, 11, -11]], [[1, 1, 2]], [[0, 0, 0]], [[-123, 456, -789]], [[10, -20, 30, -40, 50]], [[123, -456, 789, 0, -123]], [[111, 222, 333, -444, -555]]]", "input_output_examples": "[[[[]], [[-1, 11, -11]], [[1, 1, 2]]], [[0], [1], [3]]]", "weighted_test_consistency": 0.8, "at_least_one_align": true, "ambiguity": 0.5173595300760041}, "repaired_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    count = 0\n    for num in arr:\n        s = str(num)\n        total = 0\n        for i, char in enumerate(s):\n            if i == 0 and char == '-':\n                total -= int(s[1])\n            else:\n                total += int(char)\n        if total > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    count = 0\n    for num in arr:\n        s = str(num)\n        total = 0\n        for i, char in enumerate(s):\n            if i == 0 and char == '-':\n                total -= int(s[i + 1])\n            elif char != '-':\n                total += int(char)\n        if total > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    count = 0\n    for num in arr:\n        s = str(num)\n        total = 0\n        for i, char in enumerate(s):\n            if char == '-':\n                total -= int(s[i + 1])\n            else:\n                total += int(char)\n        if total > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    count = 0\n    for num in arr:\n        s = str(num)\n        total = 0\n        for i, char in enumerate(s):\n            if i == 0 and char == '-':\n                total -= int(s[1]) if len(s) > 1 else 0\n            else:\n                total += int(char)\n        if total > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    count = 0\n    for num in arr:\n        s = str(num)\n        digit_sum = 0\n        for i, char in enumerate(s):\n            if i == 0 and char == '-':\n                digit_sum -= int(s[i + 1])\n            else:\n                digit_sum += int(char)\n        if digit_sum > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    count = 0\n    for num in arr:\n        s = str(num)\n        total = 0\n        for i, char in enumerate(s):\n            if i == 0 and char == '-':\n                total -= int(s[1])\n            else:\n                total += int(char)\n        if total > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    count = 0\n    for num in arr:\n        s = str(num)\n        total = 0\n        for i, char in enumerate(s):\n            if i == 0 and char == '-':\n                total -= int(s[i + 1])\n            else:\n                total += int(char)\n        if total > 0:\n            count += 1\n    return count"], "outputs": "[[0], [2], [3], [0], [3], [3], [4], [5]]", "probability": 0.35, "is_align_req": false, "test_consistency": 0.6666666666666667, "failed_input_output_examples": "[[[[-1, 11, -11]], [2], [1]]]"}, {"programs_str": ["from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    count = 0\n    for num in arr:\n        s = str(num)\n        digit_sum = 0\n        for i, char in enumerate(s):\n            if char == '-':\n                continue\n            if i == 0 and s[0] == '-':\n                digit_sum -= int(char)\n            else:\n                digit_sum += int(char)\n        if digit_sum > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    count = 0\n    for num in arr:\n        s = str(num)\n        digit_sum = 0\n        for i, char in enumerate(s):\n            if char == '-':\n                continue\n            if i == 0 and s[0] == '-':\n                digit_sum -= int(char)\n            else:\n                digit_sum += int(char)\n        if digit_sum > 0:\n            count += 1\n    return count"], "outputs": "[[0], [3], [3], [0], [3], [5], [4], [5]]", "probability": 0.1, "is_align_req": false, "test_consistency": 0.6666666666666667, "failed_input_output_examples": "[[[[-1, 11, -11]], [3], [1]]]"}, {"programs_str": ["from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n: int) -> int:\n        s = str(n)\n        total = 0\n        if s[0] == '-':\n            total -= int(s[1])\n            for c in s[2:]:\n                total += int(c)\n        else:\n            for c in s:\n                total += int(c)\n        return total\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    count = 0\n    for num in arr:\n        if num == 0:\n            continue\n        num_str = str(num)\n        if num_str[0] == '-':\n            digit_sum = -int(num_str[1])\n            for digit in num_str[2:]:\n                digit_sum += int(digit)\n        else:\n            digit_sum = 0\n            for digit in num_str:\n                digit_sum += int(digit)\n        if digit_sum > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    count = 0\n    for num in arr:\n        s = str(num)\n        if s[0] == '-':\n            digit_sum = -int(s[1])\n            for c in s[2:]:\n                digit_sum += int(c)\n        else:\n            digit_sum = 0\n            for c in s:\n                digit_sum += int(c)\n        if digit_sum > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n: int) -> int:\n        s = str(n)\n        if s[0] == '-':\n            return -int(s[1]) + sum((int(d) for d in s[2:]))\n        return sum((int(d) for d in s))\n    return sum((1 for num in arr if sum_digits(num) > 0))", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n: int) -> int:\n        s = str(n)\n        if s[0] == '-':\n            return int(s[0] + s[1]) + sum((int(d) for d in s[2:]))\n        else:\n            return sum((int(d) for d in s))\n    return sum((1 for num in arr if sum_digits(num) > 0))"], "outputs": "[[0], [1], [3], [0], [3], [3], [4], [5]]", "probability": 0.25, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n: int) -> int:\n        sign = -1 if n < 0 else 1\n        n = abs(n)\n        total = 0\n        while n > 0:\n            digit = n % 10\n            total += digit\n            n = n // 10\n        return sign * total\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n: int) -> int:\n        sign = -1 if n < 0 else 1\n        n = abs(n)\n        total = 0\n        while n > 0:\n            total += n % 10\n            n = n // 10\n        return sign * total\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n: int) -> int:\n        sign = -1 if n < 0 else 1\n        n = abs(n)\n        total = 0\n        while n > 0:\n            digit = n % 10\n            total += digit\n            n = n // 10\n        return total * sign\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n: int) -> int:\n        sign = -1 if n < 0 else 1\n        n = abs(n)\n        total = 0\n        while n > 0:\n            total += n % 10\n            n = n // 10\n        return sign * total\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n: int) -> int:\n        sign = -1 if n < 0 else 1\n        n = abs(n)\n        total = 0\n        while n > 0:\n            total += n % 10\n            n = n // 10\n        return sign * total if sign == -1 else total\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n: int) -> int:\n        sign = -1 if n < 0 else 1\n        n = abs(n)\n        total = 0\n        while n > 0:\n            digit = n % 10\n            total += digit\n            n = n // 10\n        return total * sign\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count"], "outputs": "[[0], [1], [3], [0], [1], [3], [2], [3]]", "probability": 0.3, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.9416915491145068, "llm_generated_inputs": "[[[]], [[-1, 11, -11]], [[1, 1, 2]], [[0, 0, 0]], [[-123, 456, -789]], [[10, -20, 30, -40, 50]], [[123, -456, 789, 0, -123]], [[111, 222, 333, -444, -555]]]", "input_output_examples": "[[[[]], [[-1, 11, -11]], [[1, 1, 2]]], [[0], [1], [3]]]", "weighted_test_consistency": 0.85, "at_least_one_align": true, "ambiguity": 0.5458457745572534}, "original_passk": 0.30000000000000004, "repaired_passk": 0.4, "generated_programs": ["from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n: int) -> int:\n        sign = -1 if n < 0 else 1\n        n = abs(n)\n        total = 0\n        while n > 0:\n            total += n % 10\n            n = n // 10\n        return sign * total if sign == -1 else total\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n: int) -> int:\n        sign = -1 if n < 0 else 1\n        digits = list(map(int, str(abs(n))))\n        if sign == -1:\n            digits[0] *= -1\n        return sum(digits)\n    return sum((1 for num in arr if sum_digits(num) > 0))", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n: int) -> int:\n        sign = -1 if n < 0 else 1\n        n = abs(n)\n        total = 0\n        while n > 0:\n            digit = n % 10\n            total += digit\n            n = n // 10\n        return sign * total\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n):\n        if n < 0:\n            digits = [int(d) for d in str(abs(n))]\n            digits[0] = -digits[0]\n            return sum(digits)\n        else:\n            return sum((int(d) for d in str(n)))\n    return sum((1 for num in arr if sum_digits(num) > 0))", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    count = 0\n    for num in arr:\n        if num < 0:\n            digits = list(str(num))\n            sum_digits = -int(digits[1]) + sum((int(d) for d in digits[2:]))\n        else:\n            sum_digits = sum((int(d) for d in str(num)))\n        if sum_digits > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    count = 0\n    for num in arr:\n        s = str(num)\n        total = 0\n        for i, char in enumerate(s):\n            if i == 0 and char == '-':\n                total -= int(s[1])\n            else:\n                total += int(char)\n        if total > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    count = 0\n    for num in arr:\n        s = str(num)\n        total = 0\n        for i, char in enumerate(s):\n            if i == 0 and char == '-':\n                continue\n            digit = int(char)\n            if i == 0 and s[0] == '-':\n                digit = -digit\n            total += digit\n        if total > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    count = 0\n    for num in arr:\n        s = str(num)\n        total = 0\n        for i, char in enumerate(s):\n            if char == '-':\n                continue\n            digit = int(char)\n            if i == 0 and s[0] == '-':\n                digit = -digit\n            total += digit\n        if total > 0:\n            count += 1\n    return count", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n: int) -> int:\n        sign = -1 if n < 0 else 1\n        digits = [int(d) for d in str(abs(n))]\n        return sign * digits[0] + sum(digits[1:]) if n < 0 else sum(digits)\n    return sum((1 for num in arr if sum_digits(num) > 0))", "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n\n    def sum_digits(n: int) -> int:\n        s = str(n)\n        total = 0\n        for i, char in enumerate(s):\n            if i == 0 and char == '-':\n                continue\n            digit = int(char)\n            if i == 0 and s[0] == '-':\n                total -= digit\n            else:\n                total += digit\n        return total\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count"], "failed_inputs_outputs": "[[[[[12, 23, 34, -45, -56, 0]], [3], [5]], [[[123, -456, 789]], [2], [3]], [[[-10, -11, -12, 13, 14, -20]], [2], [3]], [[[123, 456, 789, -987, -654, -321]], [3], [5]], [[[100, -250, 375, 500, -750]], [3], [4]], [[[99, 999, 666, -5555]], [3], [4]], [[[123, 456, 789, 790, -987, -654]], [4], [6]], [[[-5555, -12, 101, -202, 303, -404, 505, -606]], [3], [5]], [[[100, -250, 375, -750]], [2], [3]], [[[15, -10, -11, -12, 13, 14, -20]], [3], [4]], [[[99, -250, 375, -750]], [2], [3]], [[[303, -405, -405, -606]], [1], [3]], [[[99, 99, 999, 666, -5555]], [4], [5]], [[[99, -250, 375]], [2], [3]], [[[101, -987, 303, -404, -606]], [2], [3]], [[[99, 99, 666, -5554, -5555]], [3], [5]], [[[99, 99, 666, -5554, -5555, 99]], [4], [6]], [[[-10, 123, -12, 13, 14, -20]], [3], [4]], [[[99, 666, -5554, -5555, -5554]], [2], [5]], [[[99, 999, -202, 30, -5555, -202]], [3], [4]], [[[-10, -11, -12, 0, 14, -20]], [1], [2]], [[[99, 999, -202, 30, -5555, -202, 30]], [4], [5]], [[[15, -10, -11, -12, 13, 14]], [3], [4]], [[[123, 456, 789, -987, -654, -5555, -321]], [3], [6]], [[[999, 666, -5555]], [2], [3]], [[[456, 789, 790, -987, -654, 790]], [4], [6]], [[[99, 999, -202, 30, -750, -5555, -202, 30]], [4], [5]], [[[-405, 303, -405, -405, -606]], [1], [4]], [[[999, 665, 666, -5555]], [3], [4]], [[[123, -456, 789, 123]], [3], [4]], [[[15, -10, -11, -12, 14, -20]], [2], [3]], [[[123, 456, 789, -987, -654]], [3], [5]], [[[999, -1, -404, -750, 999, -19, 0]], [2], [3]], [[[100, -250, 375]], [2], [3]], [[[99, -250, 375, -750, -750]], [2], [3]], [[[-251, 99, -250, 375, -750]], [2], [4]], [[[99, 999, -202, 30, -5555, -202, 30, -202]], [4], [5]], [[[15, -10, -11, -12, 14, 14, -20]], [3], [4]], [[[-10, -11, -12, 13, 14, -20, 14]], [3], [4]], [[[-405, 506, 303, -405, -405, -606]], [2], [5]], [[[-405, -456, 303, -405, -405, -606]], [1], [5]], [[[99, 999, 666, -5555, 99]], [4], [5]], [[[-405, 506, -250, -405, -405, -606]], [1], [5]], [[[99, 999, -250, -202, 30, -5555, -202, 30, 999]], [5], [7]], [[[-605, 303, -405, -405, -5555, -606, -606]], [1], [4]], [[[456, 789, 789, 790, -987, -654]], [4], [6]], [[[-1, -404, 30, 999, -20, 0, 0, -19, 999]], [3], [4]], [[[-1, -404, 14, 30, 999, -20, 0, 0, -19, 999]], [4], [5]], [[[99, 99, 999, 666, -5555, 666]], [5], [6]], [[[100, -250, 375, -250]], [2], [4]], [[[-12, -201, 101, -202, 303, -404, 505, -605, 302]], [4], [5]], [[[99, -5554, 999, 666, -5555, 99]], [4], [6]], [[[-405, 506, 303, -405, -405, -606, -405]], [2], [6]], [[[456, 789, 790, -987, -654]], [3], [5]], [[[99, -5554, 999, 666, -5555]], [3], [5]], [[[123, -456, 789, 789, -456]], [3], [5]], [[[99, 999, -203, 30, -5555, -202, 30, -202]], [4], [6]], [[[999, -202, 30, -5555, -202]], [2], [3]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9]], [8], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9]], [20], [21]], [[[1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [10], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [13], [17]], [[[-1, -2, 0, -123456789, 123456789]], [1], [2]], [[[-987654321, 987654321, -123456789, 123456789]], [2], [4]], [[[-999999999, -999999998, -999999997, -999999996, -999999995, -999999994, -999999993, -999999992, -999999991, -999999990]], [0], [10]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [12], [14]], [[[-999999999, -999999998, -999999997, -999999996, -999999995, -999999993, -999999992, -999999991, -999999990]], [0], [9]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, 999999]], [9], [14]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 999999, -22222, 3333, -4444, 555, 666, -77, 88, 9, 999999]], [10], [15]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [13], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [8], [13]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [10], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [8], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [21], [22]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [14], [16]], [[[1111, 2223, 7, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [12], [19]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [12], [20]], [[[1000000, 999999, 14, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [9], [13]], [[[1000000, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [7], [12]], [[[-1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [13], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, 3333]], [9], [14]], [[[-1, -10, -9999, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [14], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [8], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999]], [8], [12]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333]], [9], [13]], [[[0, -2, 0, -123456789, 123456789]], [1], [2]], [[[1, 2, 3, 4, 5, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [12], [16]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, -10]], [14], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [13], [16]], [[[1111, 4, 7, 9999, 4444, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 1111]], [13], [21]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777]], [14], [17]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10]], [13], [14]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 88]], [7], [11]], [[[1000000, 999999, -888888, -123456, 2000000002, 11111, 3333, -4444, 666, -77, 88, 88]], [8], [11]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [14], [16]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [13], [16]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [11], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333, 999999]], [10], [14]], [[[1000000, -1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777]], [13], [15]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [13], [15]], [[[1111, 4, 7, 9999, 4444, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111]], [13], [19]], [[[1111, 2223, 7, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444]], [13], [21]], [[[1111, 4, 7, 9999, 4444, -7770, -3331, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111]], [13], [20]], [[[1111, 4, 7, 9999, 4444, -7770, -3331, -5555, 6666, -199, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111]], [13], [21]], [[[1000000, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [7], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 9999]], [14], [18]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555]], [10], [19]], [[[-987654321, 987654321, 2220, 123456789]], [3], [4]], [[[-1, -10, 10, -11, -12, 555, 796, 123456789, -990, -1000, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [13], [15]], [[[1111, 4, 7, 9999, 4444, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111, 2219]], [14], [20]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123]], [15], [18]], [[[1, 2, 3, 4, 5, 6, -7770, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [12], [17]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 999]], [13], [17]], [[[1111, 4, 7, 9999, 4444, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111, 2219, 1111]], [15], [21]], [[[-987654321, 987654321, 2220, 987654321]], [3], [4]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 777, -10000, 123456789, 777, 777]], [13], [15]], [[[1111, 2223, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444]], [12], [20]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 999998, -987655, 9, -987654, -987654]], [9], [17]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777]], [13], [15]], [[[1111, 4, 7, 9999, -7770, -3331, -5555, 6666, -199, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111]], [12], [20]], [[[1000000, 999999, 3, -987654, 11111, -22222, 3333, -4444, 555, 666, 88, 9, 999999]], [10], [13]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999]], [13], [18]], [[[1000000, 1000000000, 999999, 14, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [10], [14]], [[[1000000, 2, 999999, 3, -987654, 11111, -22222, 3333, -4444, 555, 666, 88, 9, 999999]], [11], [14]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [12], [15]], [[[-1, -10, -11, 19, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [14], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [21], [22]], [[[1111, 2223, -3332, -3333, 4444, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555]], [10], [19]], [[[1, -100, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [14], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 1000000, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [22], [23]], [[[1111, 4, 7, 9999, 4444, -7770, -3331, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111, 6660]], [14], [21]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 9999]], [14], [19]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [12], [16]], [[[432, -123456, 0, -123456789, 123456789]], [2], [4]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 1110, 6666, -7777, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -9999]], [12], [21]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [16], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [16], [19]], [[[1000000, 987654321, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [9], [14]], [[[1111, 2223, 7, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, 4444]], [13], [19]], [[[1000000, 999999, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999]], [8], [11]], [[[1111, 2223, -3332, -3333, 4444, 6666, -7777, 8888, -9999, 2219, -3330, 4440, -5550, -7770, 8880, -9990, -5555, 2219]], [9], [18]], [[[-987654321, 987654321, 2220, 123456789, 987654321]], [4], [5]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, -10]], [13], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, 666, -77, 88, 88, -888888]], [7], [11]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655]], [7], [13]], [[[1000000, 999999, 100, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999, 999999]], [10], [12]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, 10, 20, -3333, 30, -100, 777, -10000, 123456789, 777]], [12], [16]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, -9990, -5555]], [10], [18]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777]], [13], [16]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, -77, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [13], [16]], [[[1, -100, 2, 3, 4, 5, 6, 7, 9, 13, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [15], [19]], [[[1000000, 999999, -888888, -123457, -987654, 11111, 3333, 666, -77, 88, 88, -888888]], [7], [11]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 7]], [14], [16]], [[[1111, 2223, 7, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, -987654, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444]], [13], [22]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [13], [16]], [[[-10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10]], [12], [13]], [[[1000000, 1000000000, 999999, 14, -123456, -987654, 11111, -123457, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [10], [15]], [[[0, 0, 30, 0, -999999999, 0, 0, 0, 0, 99, 0]], [2], [3]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 555, 666, -77, 88, 9, 999999]], [9], [13]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [15], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 777, 777]], [14], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777]], [14], [18]], [[[1, 2, 3, 4, 5, 6, -999999993, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [13], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [21], [22]], [[[1000000, 8, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [8], [16]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [13], [18]], [[[1112, 2223, -3332, -3333, 4444, 6666, -7777, 8888, -9999, 2219, -3330, 4440, -5550, -7770, 8880, -9990, -5555, 2219]], [9], [18]], [[[-1, 0, -10, 10, -11, -12, 555, 796, 123456789, -990, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [13], [15]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -999999991, 99999, -1111111]], [15], [19]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -3330]], [11], [20]], [[[1000000, 999999, -888888, -123457, -987654, 11111, 3333, 666, -77, 88, 88, 100]], [8], [11]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777]], [15], [19]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [14], [18]], [[[7, 1111, 2223, 7, 9999, 4444, -7770, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, 4444]], [14], [20]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18, 8, 5]], [23], [24]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [15], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 999999, -22222, -4444, 555, -77, 88, 9, 999999]], [8], [13]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 433, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [14], [16]], [[[1000000, 987654321, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, -987654, 88, 9, 999999]], [9], [15]], [[[-1, -10, -990, -11, 2219, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [16], [19]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 1111, 8888]], [12], [20]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, 2220, 100, -199, 432, 10, 20, -3333, 30, -100, 777, -10000, 123456789, 777]], [13], [17]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999]], [13], [18]], [[[1000000, 999999, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999, 9]], [9], [12]], [[[1000000, -888888, -123456, 2000000002, 11111, 3333, -4444, 666, -77, 88, 88]], [7], [10]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -22222]], [8], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 555, 666, -77, 88, -987655, 11111, -888888]], [8], [14]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 666, 777, -10000, 19, 123456789, 777, -10]], [14], [15]], [[[1111, 4, 7, 9999, 4444, -7770, -5555, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111]], [12], [18]], [[[1000000, -1, -10, -11, -12, -9999, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777]], [13], [16]], [[[1000000, -888888, -123456, 11111, -22221, 3333, -4444, 666, -77, 88, 9, 999999]], [7], [11]], [[[-22221, 1000000001, 2000000002, 3000000003, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -6000000006]], [5], [6]], [[[1000000, 999999, -888888, -123456, -987654, -22222, 3333, -4444, 555, 666, -77, 88, 999998, -987655, 9, -987654, -987654]], [8], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, 666, -77, 88, 88, -22222, -888888, 88]], [8], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [12], [17]], [[[-1, -10, -11, 31, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [14], [16]], [[[1000000, -888888, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [7], [11]], [[[-1, -2, 0, -123456789, 123456789, 0]], [1], [2]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [13], [15]], [[[1111, 4, 7, 9999, 4444, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -3330, 1111]], [12], [19]], [[[1000000, 1000000000, 999999, 14, -123456, -987654, 11111, -123457, 3333, -4444, 555, 666, -77, 88, 9, -987654, 1000000000]], [11], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999, -123456]], [8], [14]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [15], [19]], [[[1, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [14], [18]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, -987655, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [11], [15]], [[[1111, 2223, 9999, 4444, -10000, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444]], [12], [20]], [[[665, 1000000, 999999, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999, 999999]], [10], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 5]], [14], [19]], [[[1000000, 999999, -888888, 2222, -123456, -987654, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [8], [14]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -990, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [11], [18]], [[[-1, -10, -11, -12, 555, 797, -45, 667, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777]], [14], [16]], [[[-1, -10, -987654321, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [15], [20]], [[[-1, -10, -11, 31, -12, 555, 797, -45, -990, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [14], [16]], [[[-1, 0, -10, 10, -11, 555, 796, 123456789, -990, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [13], [14]], [[[1111, 2223, 7, 9999, 4444, 6666, -7777, 8888, -9999, 1110, 2219, -7770, -5550, 6660, -7770, 8880, -9990]], [11], [17]], [[[-987654320, 987654321, 2220, 123456789, 987654321]], [4], [5]], [[[0, -2, 0, -123456789, 123456789, -2]], [1], [2]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777]], [15], [18]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, -990]], [15], [18]], [[[1112, 2223, -3332, -3333, 4444, 6666, -7777, 8888, -9999, 2219, -3330, 4440, -5550, -7770, 8880, -9990, -5555, -123456789]], [8], [18]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777]], [15], [19]], [[[1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [20], [21]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 122, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [15], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789, 777]], [16], [20]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 778, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [14], [16]], [[[1111, 2223, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, -7770, -5555, 8880, -9990]], [9], [17]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [12], [18]], [[[1, -100, 3, 4, 5, 6, 7, 9, 13, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [14], [18]], [[[1000000, 999999, -888888, 2222, -123456, -987654, 3333, -4444, 554, 666, -77, 88, -987655, 9, -987654, 999999]], [9], [15]], [[[-1, -10, -987654321, -990, -11, -12, -999, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [14], [20]], [[[999998, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333, 999999, 11111]], [12], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 797, 777, 777]], [14], [17]], [[[-1000, 1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [10], [18]], [[[-6000000006, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 7]], [13], [18]], [[[-1, -10, -987654321, -990, -11, -12, -999, -45, -990, -1000, 999, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [14], [20]], [[[1000000, 999999, -888888, -4443, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 88]], [7], [12]], [[[-1000, 1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 123456788, 6660, -7770, 8880, -9990]], [11], [18]], [[[0, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 100]], [13], [17]], [[[999999, 999999, -888888, -123456, 2, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [8], [13]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 88, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 10]], [16], [18]], [[[-1, 10, -11, -12, 555, 797, -45, -990, -1000, -987655, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [11], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, -990]], [15], [18]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [15], [19]], [[[1000000, 999999, -888888, -987654, 11111, -123456, 3334, -4444, 666, -77, 88, 88]], [7], [11]], [[[-1, -10, 10, 665, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, -77, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [14], [17]], [[[-1, -2, 0, -123456789, 123456789, 0, 0]], [1], [2]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111]], [12], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 20, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [11], [14]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1]], [13], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30]], [16], [19]], [[[1, 11, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [15], [19]], [[[1000000, -888888, -123456, -987654, 11111, -22222, 3333, 555, 666, -77, 88, 9, 999999]], [8], [12]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, -99999, 666, -77, 88, 9, 3333]], [8], [13]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [13], [15]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, 99999]], [13], [19]], [[[1, -100, 3, 4, 5, 6, 7, 9, 13, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999, 6]], [15], [19]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 999]], [14], [19]], [[[0, -2, 0, -123456789, 123456789, -2, -2]], [1], [2]], [[[1111, 4, 7, 9999, 4444, -7770, -3331, -5555, 6666, -199, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111, -7770]], [13], [22]], [[[-1, -2, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -2, -10000, 123456789]], [12], [14]], [[[-1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, -99, 20, 30, 4, 666, 777, -10000, 123456789, 777]], [12], [14]], [[[-1, -990, -11, 2219, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [16], [19]], [[[1000000, 999999, 14, -123456, -987654, 11111, -4444, 3333, -4444, 555, 1000001, 666, -77, 88, 9, -987654]], [10], [15]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777]], [14], [18]], [[[999998, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333, 11111]], [11], [14]], [[[1, 2, 3, 4, 5, 6, 7, 99999, 9, -1000000000, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [12], [16]], [[[-1, -10, -990, -11, -12, 797, 8880, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 777, 777, -45]], [15], [19]], [[[1111, 2223, 7, 9999, 4444, 666, -5555, 6666, -7777, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [12], [19]], [[[1, 2, 3, 5, 6, 7, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 9999]], [13], [18]], [[[-1, -2, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -2, -10000, 123456789, 555]], [13], [15]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111, 2]], [16], [19]], [[[1111, 4, 7, 9999, 4444, -7770, -3331, 6666, -199, 1, -7777, 8888, -9999, 1110, 2219, 1000001, -3330, 4440, 6660, -7770, 8880, 1111, -7770]], [15], [23]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, 9, 999999]], [9], [14]], [[[999999, 999999, -888888, -123456, -987655, 2, 3333, -4444, 555, 666, -77, 88, -987655, -987654]], [7], [13]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 3334, 777, 777]], [14], [17]], [[[-987654321, 987654321, 2220, -987654320, 987654320, 2220, 2220]], [5], [7]], [[[-987654320, 987654320, 2220, 123456789]], [3], [4]], [[[1111, 2223, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, -7770, -5555, 8880, -9990, -9990]], [9], [18]], [[[88, 999998, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [12], [15]], [[[2223, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, -7770, -5555, 8880]], [8], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 797, 777, 777, 123]], [14], [17]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -9999, 1110, 2219, -999999991, 4445, -3330, 4440, -5550, 6660, -10, 8880, -9990]], [12], [20]], [[[2222, 2223, -3332, -3333, 4444, 6666, -7777, 8888, -9999, 2219, -3330, 4440, -5550, -7770, 8880, -9990, -5555, 2219]], [9], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 1000000, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18, -199]], [22], [24]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30, 777]], [17], [20]], [[[-1, -10, 10, -11, -12, 555, 797, 99, -45, -990, -1000, 100, -98, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [15], [19]], [[[-1, 10, -11, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [12], [14]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12]], [13], [18]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, -4444, 555, 666, -77, 88, 9, 999999]], [8], [13]], [[[1000000, 8, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 666, 88, -987655, 9, -987654, -987654, 11111]], [10], [18]], [[[1111, 2223, 7, 9999, 4444, 666, -5555, 6666, -7777, -9999, 1110, 2219, -3330, -5550, 6660, -7770, 8880, -9990]], [11], [18]], [[[2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 999]], [13], [18]], [[[1111, 2223, 7, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, 17, -7770, 8880, -9990]], [13], [20]], [[[1000000001, 3000000003, -4000000004, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [8], [9]], [[[1111, 7, 9999, 4444, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [11], [19]], [[[1, 1, 10000, 2, 3, 4, 5, 19, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [14], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999, 3333]], [9], [14]], [[[1111, 2223, 7, 9999, -1000000000, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444]], [13], [21]], [[[1, 2, 10000, 2, 3, 4, 5, 19, -100, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111, 2]], [15], [18]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12]], [13], [18]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 100]], [13], [15]], [[[-1, -10, -11, -12, 555, 797, -45, 667, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, -10000]], [14], [16]], [[[1000000, 8, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 2000000002, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [9], [17]], [[[-1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797]], [14], [16]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10]], [15], [17]], [[[665, 1000000, 999999, -123456, -987654, 11111, 3333, -4444, -77, 88, 9, 999999, 999999]], [9], [12]], [[[-1, -10, -11, -12, 555, 797, 99, -45, -990, -1000, 100, -98, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12, -990]], [14], [18]], [[[1111, 4, 7, 9999, 4444, -7770, -3331, -5555, 6666, -199, -7777, -999999991, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111, -7770]], [12], [22]], [[[1000000, 0, -10, -11, -12, 555, 797, -45, -990, -1000, 100, -1, 123, 432, 10, 20, 30, 666, 777, -10000, -3332, 777, 777]], [13], [16]], [[[-987654319, 987654320, 2220, 123456789]], [3], [4]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 88, 123, 432, 10, 20, 30, 666, -5555, -10000, 123456789, 777, 777, 10]], [15], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 432, 19, 20, -199, -99, -9, 9]], [22], [23]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 13, 14, 15, 17, 18, 19, 20, -199, -99, -9, 18, 18]], [21], [22]], [[[1000000, 999999, -888888, -123457, -987654, 11111, 3333, 666, 100, 88, 88, 6]], [9], [12]], [[[1, -100, 3, 4, 5, 6, 7, 9, 13, 16, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [15], [19]], [[[1000000, -888888, -987654, 11111, -22222, 3333, 4445, 666, -77, 88, 9, 999999]], [8], [11]], [[[1000000001, 3000000003, -4000000003, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [8], [9]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, 9, 999999, -4444]], [9], [15]], [[[1000000, -888888, -987654, 11111, -22222, 3333, -4444, 666, -77, -22223, 88, 9, 999999]], [7], [12]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -990, 1110, 2219, -3330, 4440, -5550, 6660, -7770, -3331, 8880, -9990]], [11], [19]], [[[1000000, -888888, -123456, -987654, 11111, 999999, -22222, -4444, 555, -77, 88, 9, 999999]], [7], [12]], [[[1, 2, 10000, 2, 3, 4, 5, 19, -100, 8, 9, -99, 99, 999, -9999, 9999, -999999991, -123456789, -1111111, 2]], [14], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 999999]], [8], [14]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 3333, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1]], [14], [17]], [[[1000000, 999999, -888888, -123456, -987654, 778, -22222, 3333, 555, 666, -77, 88, -987655, 11111, -888888]], [8], [14]], [[[-1000, 1111, 2222, -3333, 4444, -5555, 6665, -7777, 8888, -2, -9999, 1110, 2220, -3330, 4440, 123456788, 6660, -7770, 8880, -9990]], [11], [18]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, -11]], [12], [15]], [[[1000000001, 3000000003, -4000000003, -888888, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, -4000000003, 2000000002]], [8], [9]], [[[1000000001, 3000000003, -4000000004, -888887, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002]], [7], [8]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 4441, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [11], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 797, 777, 777, -990, 797]], [17], [20]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 433, 432, 10, 20, 30, 666, 6666, 777, -10000, 123456789, 778]], [15], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, -10000]], [13], [16]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, -99, 5]], [13], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333]], [8], [13]], [[[1000000, 999999, -888888, -123456, -987654, -22222, 3333, -4444, 555, 666, -77, 88, 999998, -987655, 778, -987654, -987654, -77]], [8], [16]], [[[1111, 4, 7, 9999, 4444, -7770, -3331, -5555, -5555, 6666, -199, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111]], [13], [22]], [[[1111, 4, 7, 9999, -7770, -3331, -5555, 6666, -199, -7777, 8888, -9999, 1110, -999999996, -3330, 4440, 6660, -7770, 8880, 1111, 1111]], [12], [21]], [[[1111, 4, 7, 9999, -7770, -3331, -5556, 6666, -199, -7777, 8888, -9999, 1110, -999999996, -3330, 4440, 6660, -7770, 8880, 1111, 1111]], [12], [21]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 5, -9999]], [14], [20]], [[[-1000, 1111, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [9], [17]], [[[1111, 4, 7, 9999, 4443, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3331, 4440, 6660, -7770, 8880, 1111, 2219]], [14], [20]], [[[-1, -10, -990, -12, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 777, 797]], [16], [21]], [[[-1, -10, 31, -12, 555, 797, -45, -990, -1000, 100, -1111111, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [14], [17]], [[[1111, 4, 7, 9999, 4443, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3331, 2, 6660, -7770, 8880, 1111, 2219, 6666]], [15], [21]], [[[-3330, 2223, -3332, -3333, 4444, 6666, -7777, 8888, -9999, 2219, -3330, 4440, -5550, -7770, 8880, -9990, -5555, -123456789]], [7], [18]], [[[-1, -11, 10, -11, -12, 555, 797, 123, -45, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12, 797]], [14], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, 1000000]], [9], [14]], [[[1111, 2223, -3332, -3333, 4444, 6666, -7777, 8888, -9999, 2219, -3330, 4440, -5550, -7770, 8880, -9990, -5555, 2219, 2223]], [10], [19]], [[[999999, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [7], [13]], [[[1, 10000, 2, 3, 4, 3, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [15], [19]], [[[999999, -888888, -123456, 2, 3333, -4444, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [7], [13]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 4444, 1111]], [14], [22]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 797, 777, 777, 777]], [14], [18]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777, -45]], [15], [20]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 999999, 3333]], [7], [12]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 4441, 8888, -9999, 1110, 2219, -3330, -5550, 6660, -7770, 8880, -9990]], [10], [18]], [[[432, 0, -123456789, 123456789, -123456789, 0]], [2], [4]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5550]], [10], [19]], [[[1111, 2223, 7, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, 17, -7770, 8880, -9990, 8888]], [14], [21]], [[[1000000, -888888, 11110, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [8], [11]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, -9990, -9, -5555, -3330]], [10], [19]], [[[1000000, 999999, -888888, -123456, -987654, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 778, -987654, -987654, -77]], [7], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, -4444]], [8], [14]], [[[2223, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, 3334, -3330, 4440, -5550, -7770, -5555, 8880]], [9], [16]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1]], [12], [15]], [[[-1, -999999999, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, -12, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30, 777]], [17], [22]], [[[-1, 10, -11, -12, 555, 797, -45, -990, -1000, -987655, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [10], [14]], [[[8888, 999999, 14, -123456, 11111, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [9], [12]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18, 8, 5, 20]], [24], [25]], [[[-1, -10, 10, -11, 778, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 777, -10000, 123456789, 777, 777]], [14], [16]], [[[432, 0, -123456789, 123456789, -123456789, 0, 123456789]], [3], [5]], [[[0, -1, -10, 10, -11, -12, 555, 797, 777, -45, -990, -9990, -1000, 100, 123, 432, 88, 30, 777, -10000, 123456789, 777, 777]], [13], [16]], [[[1111, 4, 7, 9999, 4, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111, 2219, 4444]], [15], [21]], [[[-1, -10, 10, -11, -12, 20, 555, 797, -45, 3334, -1000, 100, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [16], [20]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 18, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [9], [17]], [[[1, 2, 5000000005, 3, 4, 5, 6, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999]], [13], [18]], [[[999998, 1000000, 999999, -888888, -987654, 3333, -4444, 555, 666, -77, 88, 9, 3333, 11111, 999998, -77]], [11], [14]], [[[-1, -10, 433, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [15], [19]], [[[1111, 2223, -3333, 4444, 1110, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5550]], [11], [20]], [[[-22221, 1000000001, 2000000002, -999999990, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -6000000006, -4000000004]], [4], [6]], [[[-1, -10, -990, -11, -12, 797, 16, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 3334, 777, 777]], [15], [17]], [[[8888, 999999, 14, -123456, 11111, 3333, -4444, 11112, 555, 666, -77, 88, 9, -987654]], [10], [13]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, 99999, 1]], [14], [20]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 4441, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 1112, 6660, -7770, 8880, -9990]], [12], [20]], [[[0, -1, -10, 10, -12, 1000000001, 555, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1, 30]], [14], [17]], [[[0, -2, 0, -5556, 123456789, -2, -2]], [1], [2]], [[[1000000, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [7], [12]], [[[1000000, 999999, -888888, -123456, -987654, 4440, 3333, 666, -77, 88, 88, -22222, -888888, 88]], [8], [13]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -9999, 1110, 2219, -999999991, 4445, -3330, 4440, -5550, 6660, -10, 8880, 998, -9990]], [13], [21]], [[[1, 2, 10000, 2, 3, 4, 5, 19, -9, 8, 1111, 9, -99, 99, -999, 999, -9999, 9999, -999999991, 99999, -1111111, 3, 19]], [17], [21]], [[[1, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111]], [11], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 797, 777, 777, -990, 797, 797]], [18], [21]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, -1, 999999, -123456, -4444]], [8], [15]], [[[1000000, 999999, -888888, -123456, 2000000002, 11111, 3333, 666, -77, 88, 88]], [8], [10]], [[[-987654321, 8888, 2220, 123456789, 123456788, -999999995, 987654321]], [5], [7]], [[[1111, 4, 7, 9999, -7770, -3331, -5555, 6666, -199, -7777, 8888, -9999, 1110, 88, -999999996, -3330, 4440, 6660, -7770, 8880, 1111, 1111, 9999]], [14], [23]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777, -45]], [15], [19]], [[[-123456789, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111, 2]], [15], [19]], [[[-1, 10, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [12], [14]], [[[1111, 2223, 7, 9999, 6660, 4444, -7770, -5555, 6666, -7777, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -3330]], [12], [21]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 776, 797, 777, 777, 123, 797]], [16], [19]], [[[1111, 4, 7, 9999, 4444, -7770, -3331, -5555, 6666, -199, -7777, -999999991, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111, -7770, 6660, 2219]], [14], [24]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, 4]], [12], [18]], [[[-1, -10, -11, 31, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, -10000]], [14], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 2219, 777, 777, 797, 777, 777, 100]], [17], [20]], [[[-1, -10, -990, -11, 2219, 797, -45, -990, -1000, 2000000003, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, -10, 777, 123, 123456789]], [17], [20]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, -11, 123456788]], [14], [18]], [[[1000000, 999999, 14, -123456, -987654, 11111, -4444, 3333, 122, -4444, 555, 1000001, 666, -77, 88, -987654]], [10], [15]], [[[-987654320, 123456789, 2, 987654320, 2220, 123456789]], [5], [6]], [[[1000000, -1, -10, -11, -12, -9999, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777, -45]], [13], [17]], [[[-1, -10, 10, -11, -12, 555, 797, 11, -45, -990, -1000, 100, 88, 123, 432, 10, 20, 30, 666, 777, -10000, 778, 777, 10]], [16], [18]], [[[1111, 2223, 7, 9999, 4444, -5555, 6666, 18, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, 4444]], [14], [19]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9, 10]], [22], [23]], [[[1111, 2223, 9999, 4444, -10000, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 10000, 4444]], [13], [21]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 87, -987655, 999999]], [8], [14]], [[[-987654321, 123456789, 987654321, 987654321]], [3], [4]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 122, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [22], [23]], [[[9, 1000000, 8, -888888, -123456, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654, -123456]], [9], [17]], [[[1111, 4, 7, 9999, 4444, -7770, -3331, -5555, 6666, -199, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1110, -7770, 4]], [14], [23]], [[[-1, -999999999, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 9, -12, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30, 777]], [17], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [22], [23]], [[[1111, -77, 2223, -3333, 4444, -5555, 6666, -7777, 8888, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 1111, 8888, 6660]], [13], [21]], [[[-1000, 1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 123456788, -999999991, -7770, 8880, -9990, -1000]], [10], [18]], [[[8888, -888888, -5555, 14, -123456, 11111, 3333, -4444, 11112, 555, 666, -77, 88, 9, -987654]], [9], [14]], [[[-22221, 19, 2000000002, -999999990, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -6000000006, -4000000004]], [4], [6]], [[[1111, 2223, 7, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, 4444, 6660]], [14], [20]], [[[1111, 4, 7, 9999, 4444, -7770, -3331, -5555, -5555, 6666, -199, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, 8880, 1111]], [13], [21]], [[[1000000, 0, -10, -11, -12, 30, 555, 797, -45, -990, -1000, 100, -1, 123, 432, 10, 20, 30, 666, 777, -10000, -3332, 777, 777]], [14], [17]], [[[1111, 4, 7, 9999, 4444, -7770, -5555, 6666, -7777, 1112, 8888, -1111111, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111, 2219, 1111]], [16], [23]], [[[0, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 101]], [13], [17]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [20], [21]], [[[1000000001, 3000000003, -4000000003, -888888, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, -4000000003, 2000000002]], [8], [9]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, -10000, 123456789, 777]], [12], [14]], [[[88, 999998, 18, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [13], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 777, 777, 123, 123456789, 777, -12]], [16], [21]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 797, 777]], [13], [16]], [[[1111, -1111111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 6660, -7770, 8880, -9990, -9, -5555, 1111]], [11], [20]], [[[1000000001, 3000000003, -4000000004, -888887, 5000000005, -3333, 2000000002, 2000000002, 2000000002]], [6], [8]], [[[1111, 4, 7, 9999, -7770, -3331, -5555, 6666, -199, -7777, 8888, 1110, -999999996, -3330, -9990, 6660, -7770, 8880, 1111, 1111]], [11], [20]], [[[1111, 2223, -3333, 4444, 1110, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5550, -9990]], [11], [21]], [[[999998, 18, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [12], [15]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 666]], [14], [16]], [[[1000000, 999999, -123456, -987654, 11111, 3333, -4444, -99999, 666, -77, 88, 9, 3333, -888887, 9]], [9], [14]], [[[1111, 4, 7, 9999, 4444, -7770, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 1111]], [13], [20]], [[[1000000, -888888, -987654, 11111, -22222, 3333, 666, -77, -22223, 88, 9, 999999]], [7], [11]], [[[1, 2, 3, 4, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 9999]], [13], [17]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, -4444, 11111]], [9], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 1000001, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [22], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 999999, -4444, -77]], [8], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 797, 777, 777, -999999991]], [13], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [12], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 123456788, 777, 777, 797, 777, -11, 123456788]], [13], [16]], [[[1, 2, 3, 4, 7, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9]], [21], [22]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 101, 777, 777, 797, 777, 777]], [16], [19]], [[[0, -1, -10, 10, -11, 5, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -999999998, -10000, 123456789, 777, 777, -1]], [14], [18]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, -999999996, 1110, 2219, -3330, 4440, 6660, -7770, 8880, -9990, -5555, -3330]], [10], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 797, 777, 777, -990, 797, 797, -1000]], [18], [21]], [[[1000000, 999999, -888888, -123456, -987653, 11111, -22222, 3333, -4444, -77, 666, -77, 999999, 3333, -77]], [7], [12]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 29, 666, 777, -9999, 798, 123456788, 777, 777, 797, 777, 777]], [16], [20]], [[[0, -1, -10, 10, -11, -12, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1]], [11], [14]], [[[-1, -10, -990, -11, -12, 797, 1112, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, -990]], [16], [19]], [[[-1, -10, 10, -11, -12, -99, 555, 797, -45, -990, -1000, 100, 123, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 29, 123456789, 777, 10, -1, -12]], [16], [20]], [[[-1111111, 1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, 999, -9999, -99999, 99999, -1111111, 99999]], [13], [19]], [[[1111, 2223, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, 15, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444]], [13], [21]], [[[1111, 4, 7, 9999, -5551, 4444, -7770, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 1111]], [13], [21]], [[[-1, -10, -11, 19, 555, 797, -45, -990, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [14], [15]], [[[-22221, 1000000001, 2000000002, 3000000003, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -123456789]], [5], [7]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -990, 1110, 2219, -3330, 4440, -5550, 6659, -7770, -3331, 8880, -9990]], [11], [19]], [[[-1, -999999991, -11, 19, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 3, -10000, 123456789, 777, 777, 432]], [15], [17]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -3331, -9990, -3330]], [11], [21]], [[[1, 2, 3, 4, 5, 6, 7, 8, 1000001, 667, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [23], [24]], [[[-1, -10, -11, 31, -12, 555, -888887, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, 123456789, 777, 777]], [13], [16]], [[[1000000, -1, -10, -11, -12, -9999, 555, 797, -45, -990, -1000, 100, 555, 123, 432, 10, 20, 30, 666, 777, 433, -10000, 777]], [14], [17]], [[[1111, 2223, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, -5550, 6660, -7770, 8880, -9990, -5555, 4444]], [11], [19]], [[[1000000, 999999, -888888, -987654, 11111, 999999, -22222, 3334, -4444, 555, 666, -77, 88, 9, 999999]], [10], [14]], [[[-1, -10, 10, -10, -12, 555, 797, 123456789, -990, -1000, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [13], [15]], [[[-987656, -987655, -1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 778, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [14], [18]], [[[-1, -990, -11, 2219, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 19, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [17], [20]], [[[1111, 2223, 7, 9999, 4444, -5555, -3330, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444, 6667]], [14], [23]], [[[1000000, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, 9, -987654, 555]], [8], [13]], [[[1000000, -888888, -123456, -987654, 11111, -22222, 3333, 666, -77, 88, 9, 999999, -22221, -888888]], [7], [13]], [[[1, 1, 10000, 2, 3, 4, 5, 19, 8, 9, -99, -99, 99, -999, 999, -9999, 9999, 99999, -1111111]], [14], [17]], [[[1000000, 999999, -888888, -123456, -987654, -999999999, 11111, -22222, 3333, -999999996, -4444, 666, -77, 88, 9, 999999, -123456]], [8], [16]], [[[-1, -10, -990, -11, -12, 797, 16, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 3334, 777, 777, -1000, -10]], [15], [17]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 432]], [12], [15]], [[[-1, -11, 10, -11, 554, 797, 123, -45, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12, 797]], [14], [18]], [[[1111, 2223, 7, 9999, 4444, -5555, -3330, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5554, 4444, 6667]], [14], [23]], [[[1000000, -888888, -987654, 11111, -22222, 3333, 666, -77, 88, 9, 999999]], [7], [10]], [[[-1, -10, 10, -11, -12, 555, 797, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, -10]], [13], [14]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, 777]], [14], [17]], [[[1000000001, 3000000003, -4000000003, -888888, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, -4000000003, 2000000002, 2000000002, 1000000001]], [10], [11]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, -987654319, 777, 797, 777, 777, 123, -990, 10]], [15], [19]], [[[-1, 10, -11, -12, 797, -45, -990, -1000, -1000, 123, 432, 20, 10, 30, 666, 777, -10000, 123456789, 1000001, 123]], [12], [14]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000003, -22223, -6000000006, 2000000002, 2000000002]], [7], [8]], [[[1111, 4, 7, 9999, 4444, -7770, -5555, 6666, -7777, 1111, 1112, 8888, -1111111, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 6660, 1111, -9990, 1111]], [17], [25]], [[[0, -1, -10, -9, -12, 1000000001, 555, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1, 30]], [13], [16]], [[[1000000, 1000000000, 999999, 14, -123456, -987655, 11111, 3333, -4444, 555, 666, -77, -100, 88, 9, -987654]], [10], [14]], [[[1000000, -1, -10, -9999, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777]], [13], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 20]], [21], [22]], [[[-1, -10, -990, -11, -12, 797, -5555, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 2219, 777, 777, 797, 777, 777, 100, 100, 778]], [19], [22]], [[[-1, -123457, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 797, 797, 777, -990, 797, -990]], [17], [21]], [[[1111, 2223, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444, -7777]], [12], [21]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 667, 777, -10000, 123456789, 777, -10]], [13], [14]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 797, 777, 777, -990]], [14], [17]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, -99999, 666, -77, 88, 9, 3333, -888887, 9, 999999]], [10], [16]], [[[1000000, 999999, -888888, 2222, -123456, -987654, 3333, -4444, 554, 666, 999999, 88, -987655, 9, -987654, 10, 999999]], [11], [17]], [[[1111, 12, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -3330]], [12], [21]], [[[1000000, 999999, -888888, -5554, -123456, -987654, 666, 3333, -4444, 555, 666, -77, 88, 9, -987654, 555]], [9], [15]], [[[-123456789, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111]], [14], [18]], [[[-123456789, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -9999, 9999, -999999991, 99999, -1111111]], [13], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 797, 777]], [12], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789, 10]], [17], [20]], [[[1112, 2223, -3332, -3333, 4444, 6666, -7777, 8888, -9999, 2219, -3330, 4440, -5550, -7770, 8880, -9990, -5555, 2219, -5555]], [9], [19]], [[[1000000001, 3000000003, -4000000003, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [9], [10]], [[[1, 2, 3, 4, 5, 6, 7, 8, 1000001, 9, 10, 11, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [21], [22]], [[[7, 1111, 2223, 7, 9999, -7770, -999, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, 4444]], [12], [19]], [[[1111, -7777, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, -7770, -5555, 8880, 20, -9990]], [9], [18]], [[[1000000001, 2000000002, 1000000001, -999999994, 1000000002, -4000000003, -4000000004, -6000000006, -6000000006, 1000000001]], [5], [6]], [[[1000000001, 3000000003, -4000000004, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, -3332, 2000000002]], [7], [9]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -990, 31, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 797, -10]], [14], [18]], [[[-1000, 1111, 2222, -3333, 4444, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [10], [17]], [[[1000000, 999999, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, -1, 999999, -123456, -4444]], [8], [14]], [[[88, 999998, 1000000, 999999, 1000000001, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [13], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -7777, -10000, 777, 777, 797, 777]], [12], [16]], [[[1000000, 1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, -4444, 11111]], [10], [16]], [[[9223372036854775807, -9223372036854775808]], [1], [2]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -45]], [9], [10]], [[[-987654321, 987654321, -123456789, -123456789, 123456789]], [2], [5]], [[[-987654321, 987654322, 987654321, -123456789, -123456789, 123456789]], [3], [6]], [[[-1, 2000000002, 0, -123456789, 123456789, 0]], [2], [3]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9]], [21], [22]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [9], [17]], [[[-987654321, 987654322, 123456789, 987654321, -123456789, -123456789, 123456789]], [4], [7]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [8], [15]], [[[1111, 2222, -3333, 4444, -5555, -7777, -7770, -5550, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [9], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444]], [8], [16]], [[[1000000, 999999, -888888, -123456, 5000000005, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [9], [16]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, -7770, 8880, -9990]], [8], [16]], [[[-987654321, 987654322, 123456789, 987654321, -123456789, -123456789, 123456789, 987654321]], [5], [8]], [[[-987654321, 987654322, -12, -123456789, -123456789, 123456789, 987654321]], [3], [7]], [[[-1, -10, 10, -11, -12, 555, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [11], [13]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444]], [9], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444]], [9], [17]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9]], [20], [21]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [20], [21]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006]], [3], [4]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111]], [13], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, 88, 9, -4444, -4444]], [11], [18]], [[[1111, -3333, 4444, -5555, -7777, 8889, -9999, 1110, 2220, -3330, 4440, -5550, -7770, 8880, -9990]], [7], [15]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888]], [10], [19]], [[[-987654321, 987654322, 987654321, -123456790, -123456789, 123456789]], [3], [6]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -999999994]], [3], [5]], [[[-987654321, 987654321, -123456789, -123456789, 123456789, 123456789]], [3], [6]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [19], [20]], [[[-987654321, 987654322, 123456789, 987654321, -123456789, -123456789, 987654321]], [4], [7]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [11], [20]], [[[-987654321, 987654322, 123456789, -11, -123456789, -123456789, 987654321]], [3], [6]], [[[1, 2, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14]], [21], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444, -987654]], [9], [18]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006]], [3], [4]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [10], [20]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14]], [22], [23]], [[[1000000001, -999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994]], [4], [6]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [12], [16]], [[[1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 100, 6660, -7770, -4000000004, -9990]], [10], [17]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, -123456, 17, 18, 19, 20, -199, -99, -9, -9, 7]], [19], [21]], [[[-9999, 2222, -3333, 4444, -5555, -12, -7777, 13, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [11], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 665, -77, 88, 9, -4444, -4444]], [8], [15]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 5000000005]], [4], [7]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 5, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [21], [22]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, 999, -9999, 9999, -99999, 99999, -1111111]], [12], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 665, -77, 88, 9, -4444, -4444, 9]], [9], [16]], [[[2222, -3333, 4444, -5555, -12, -7777, 13, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [11], [22]], [[[1111, 2222, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [10], [19]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15]], [21], [22]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -999999994, -6000000006, -999999994, -999999994, 5000000005]], [4], [8]], [[[1000000, 999999, -888888, -123456, 5000000005, -4443, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [9], [17]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14]], [21], [23]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14, 8]], [23], [24]], [[[1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 100, 88, 6660, -7770, -4000000004, -9990]], [11], [18]], [[[1111, 2222, -3333, 4444, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [11], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111]], [9], [17]], [[[1000000, 999999, -888888, -123456, 5000000005, -4443, -987654, -123457, 11111, -22222, 3333, -4444, 555, 666, -77, -999999997, 0, 9, -4444, -4444]], [8], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444]], [11], [19]], [[[-999, 1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -3333, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [13], [19]], [[[0, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111]], [12], [17]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [20], [21]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [20], [21]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7771, 8880, -9990, 8888]], [11], [20]], [[[1000000001, -999999994, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 5000000005]], [5], [8]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 2, 30, 666, 777, -10000, 123456789, 432]], [14], [16]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 2000000000, 5000000005]], [6], [10]], [[[-1, -10, 10, -11, -12, 555, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 556, -990]], [12], [14]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 2, 30, 666, 777, -10000, 123456789, 432, -1000]], [14], [16]], [[[-4443, 987654322, 987654321, -123456790, -123456789, 123456789]], [3], [6]], [[[5, -999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 5]], [5], [7]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, 665, -9]], [22], [23]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 17, 18, 19, 20, -199, -4444, -9, 15]], [22], [24]], [[[1, -999999997, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15, 12]], [21], [23]], [[[2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [8], [16]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888, -9990]], [11], [21]], [[[987654322, 123456789, 987654321, -123456789, -123456789, 123456789]], [4], [6]], [[[-987654321, 987654322, -12, -123456790, -123456789, 123456789, 987654321]], [3], [7]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -7770, 4444]], [10], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, 666]], [11], [19]], [[[-1, -10, 10, -11, -12, 555, 1, 797, -45, -990, -1000, 100, 123, 10, 20, 2, 30, 666, 777, 123, 123456789, 432, -1000]], [15], [17]], [[[1000000001, -999999994, 2000000001, 5000000005, -999999994, -6000000006, -999999994, -999999994, 5000000005]], [4], [8]], [[[1000000, 999999, 1111, -123456, 5000000005, -4443, -987654, -123457, 11111, -22222, 3333, -4444, 555, 666, -77, -999999997, 0, 9, -4444, -4444]], [9], [18]], [[[6660, -987654321, 987654323, 987654321, -123456789, -123456789, 123456789, 123456789]], [5], [8]], [[[1000000, 999999, -888888, -123456, 5000000005, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444, 88]], [10], [17]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 30, 666, 777, -10000, 123456789, -11]], [11], [13]], [[[100, 987654322, 123456789, 9999, 987654321, -123456789, -123456789, 987654321]], [6], [8]], [[[-1, -10, 10, -11, -12, 555, -45, -990, -1000, 100, 432, 10, 20, 30, 666, 777, -10000, 123456789, 556, -990]], [11], [13]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 19, 20, -199, -99, -9]], [21], [22]], [[[6660, -987654321, 987654323, 987654321, -123456789, -123456789, 123456789, -12]], [4], [8]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 4444]], [10], [18]], [[[6660, -987654321, 987654323, 987654321, -123456789, 14, 123456789, -12]], [5], [8]], [[[-987654321, -987654321, 987654322, 123456789, 987654321, -123456789, -123456789, 987654321]], [4], [8]], [[[6660, -987654320, 987654323, 987654321, -123456789, -123456789, 123456789, -12]], [4], [8]], [[[-987654321, 987654322, 987654321, -123456789, 123456789]], [3], [5]], [[[2222, -3333, 4444, -5555, -12, -7777, 13, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, 2220, 6660, -7770, 8880, -9990, 8888, -3333]], [11], [22]], [[[2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7771, 8880, -9990, 8888]], [10], [19]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99]], [13], [18]], [[[-9999, 2222, -3333, 4444, -5555, -12, -7777, 13, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, 2220, 6660, -7770, 8880, -9990, 8888]], [11], [22]], [[[6660, -987654321, 987654323, 987654321, -123456789, -123456789, 123456789, 987654321, 123456789]], [6], [9]], [[[1, 2, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, -199, -9, -9, 14]], [22], [23]], [[[1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -9]], [18], [19]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20]], [21], [22]], [[[-9999, 2222, -3333, 4444, -5555, -12, -7777, -999, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [10], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111, -4444]], [9], [18]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, 4440, -5550, -7770, 8880, -5554, -9990]], [8], [16]], [[[2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7771, 8880, 8888]], [10], [18]], [[[1111, 2222, -3334, 4444, -5555, -7777, 8888, -9999, 1110, 2220, 4440, -5550, -7770, 8880, -5554, -9990]], [8], [16]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -3333]], [9], [18]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, -9999, -99, 99, 999, -9999, 9999, -99999, 99999, -1111111]], [11], [15]], [[[987654322, 123456789, -123456789, -123456789, 123456789]], [3], [5]], [[[1111, 2222, -3333, 4444, -5555, 8888, -9999, 1110, -5551, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 4444]], [10], [18]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, 99, 14, 10]], [23], [25]], [[[987654322, -12, -123456788, -123456789, -123456789, 123456789, 987654321, -12]], [3], [8]], [[[1111, 2222, -3333, 4444, -7777, 8888, -9999, 1110, -7776, 2220, 2000000001, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [12], [19]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 10, 20, 30, 666, 777, -10000, 123456789]], [10], [12]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [12], [15]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -999, 18, 19, 20, -199, -99, -9, -9]], [20], [22]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [11], [15]], [[[-9999, 2222, -3333, 2223, 4444, -5555, -12, -7777, 13, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, -5550, 2220, 6660, -4444, 8880, -9990, 8888, 2222]], [13], [25]], [[[1111, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, 8880, -9990, -3333]], [8], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666]], [11], [18]], [[[1000000001, 2000000002, -9990, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006]], [5], [6]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666, 555, 9]], [13], [20]], [[[-987654321, 0, 987654322, 123456789, 987654321, -123456789, -123456789, 123456789]], [4], [7]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 13, 18, 19, 20, -199, -9, 14]], [22], [24]], [[[1000000001, 1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006]], [4], [5]], [[[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 13]], [21], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 555, 665, -77, 88, 9, -4444, -4444, 9]], [9], [15]], [[[-987654321, -123456, 0, 987654322, 123456789, 987654321, -123456789, -123456789, 123456789]], [4], [8]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 1000000, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666]], [12], [18]], [[[1111, 2222, -3333, 4444, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -999999998, 8880, -9990, 8888]], [11], [19]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 5000000006, 2000000000, 5000000005]], [7], [11]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999993, -999999994, 2000000000, 5000000005]], [6], [10]], [[[1110, 2222, -3334, 4444, -5555, -7777, 8888, -9999, 1110, 2220, 4440, -5550, -7770, 8880, -5554, -9990]], [8], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444, -987654, -987654]], [9], [19]], [[[1000000001, -999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 9]], [5], [7]], [[[1, 2, 3, 88, 4, 5, 16, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, 665, -9, 19]], [25], [26]], [[[1, 2, 3, 4, 5, 6, 7, -6000000006, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [19], [20]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 123, 30, 666, 777, -10000, 123456789]], [12], [16]], [[[987654322, 123456789, 987654321, -123456789, -123456789, 123456789, -123456789]], [4], [7]], [[[1, 2, 3, 4, 5, 4444, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [20], [22]], [[[2222, -3333, 4444, -5555, -12, -7777, 13, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888, -7777, 6660]], [12], [24]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -999, 18, 19, 20, -199, -99, -9, -9, 19]], [21], [23]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, -99999, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, 2222, -99999]], [10], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99, 1]], [14], [20]], [[[1, 2, 2000000001, 4, 5, 6, 7, 8, 18, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14]], [22], [23]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 13, 18, 19, 20, -199, -9]], [21], [23]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14, 17]], [22], [24]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -199, -99, -9, 3]], [20], [22]], [[[2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7771, 8880, -9990, 8888, 2222]], [11], [20]], [[[-10000, 2, -1, 3, 4, 5, 6, 7, 8, -9999, -99, 99, 999, -9999, 9999, -99999, 99999, -1111111]], [11], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, -4444, 10]], [12], [21]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -3330]], [9], [18]], [[[-987654321, -123456, 0, 987654322, 123456789, 987654321, -123456789, -123456789, 123456789, -123456789]], [4], [9]], [[[987654322, 123456789, -123456789, -123456789, 123456789, 123456789]], [4], [6]], [[[-9999, 2222, -3333, 2223, 4444, -5555, -12, -7777, 13, 8887, -9999, 1110, -7776, -7769, 2220, -3330, 4440, -5550, 2220, 6660, -4444, 8880, -9990, 8888, 2222, -4444]], [13], [26]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, -1000, 100, 123, -123456790, 10, 20, 30, 666, 777, -10000, 123456789]], [10], [14]], [[[-4443, 987654322, 987654321, -123456790, -123456789]], [2], [5]], [[[1110, 2222, -3334, 4444, -7777, 8888, -9999, 2220, 4440, -5550, -7770, 8880, -5554, -9990]], [7], [14]], [[[1111, -10000, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [10], [19]], [[[987654322, 123456789, 987654321, -123456789, -123456789, 123456789, -123456789, -5555]], [4], [8]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -45, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9]], [21], [23]], [[[1111, -10000, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -3333, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [10], [19]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -123456790, 432, 20, 30, -11, 666, 777, -10000, 123456789]], [11], [14]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, -4444, 10]], [11], [20]], [[[1111, 2222, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, -9990]], [10], [20]], [[[6660, -987654321, 987654323, 987654321, -123456789, -123456789, 123456789, 6661, -12]], [5], [9]], [[[-987654321, 987654322, 123456789, -987654320, -11, -123456789, -123456789, 987654321]], [3], [7]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 9998, 99999, -1111111, -99, 1]], [15], [21]], [[[-987654320, 987654323, 987654321, -123456789, -123456789, 123456789, -12]], [3], [7]], [[[-987654321, 987654321, -123456789, 123456789, -123456789]], [2], [5]], [[[-999999999, -999999998, -999999997, -999999996, -999999995, -999999994, -999999993, -999999992, -999999991, -999999990, -999999995]], [0], [11]], [[[1, 2, 2000000001, 4, 5, 6, -999999990, 7, 8, 18, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14]], [22], [24]], [[[2222, 4444, -5555, -11, -7777, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [8], [17]], [[[1, 2, 3, 4, 5, 8, 8, 5000000006, 10, 11, 12, 13, 14, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15]], [20], [21]], [[[1, 2, 3, 88, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, 665, -9, 19]], [24], [25]], [[[-999999994, -999999998, -999999997, -999999996, -999999995, -999999994, -999999993, -999999992, -999999991, -999999990]], [0], [10]], [[[1000000001, 2000000002, 3000000004, -123456790, 5000000005, -6000000006, -6000000006]], [4], [5]], [[[-1, -10, 10, -11, -12, -999999997, 797, -990, -1000, 100, 123, -123456790, 432, 10, 20, 123, 30, 666, 777, -10000, 123456789, -123456790]], [12], [16]], [[[0, 0, 0, 0, -999999992, 0, 0, 0, 0, 1, 1]], [2], [3]], [[[1111, 2222, 4444, -5555, -7777, -7770, -5550, 8888, -9999, 1110, 2220, -3330, 4440, -5550, -22222, 6660, -7770, 8880, -9990]], [9], [19]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 13, 18, 19, 20, -199, -9, 10]], [22], [24]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 10, -4444, -4000000004, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, -4444, 10]], [10], [19]], [[[-987654321, 987654322, 2000000000, 987654321, -123456790, -123456789, 123456789]], [4], [7]], [[[1000000, 999999, -888888, -123456, 11111, -22222, 3333, -4444, 555, 665, -77, 88, 9, -4444, -4444, 9]], [9], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 17]], [21], [22]], [[[-9999, 2222, -3333, 4444, -5555, -12, -7777, 13, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, 2220, 6660, -13, -7770, 8880, -9990, 8888]], [11], [23]], [[[1, 2, 3, 4, 5, 123, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [20], [22]], [[[1, 2, 3, 4, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 9998, 99999, -1111111, -99, 1]], [14], [20]], [[[-987654321, 987654322, 123456789, -123456789, 8888, -123456789, 123456789, 987654321]], [5], [8]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -22222, -7770, 8880, -9990, -7770, 4444]], [10], [20]], [[[5, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 5]], [5], [6]], [[[6660, -987654321, 987654323, -123456789, -123456789, 123456789, -12]], [3], [7]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, 99, 14, 10]], [22], [24]], [[[-987654321, 987654322, 1999999999, 987654321, -123456790, 123456789]], [4], [6]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -22222, -7770, 8880, -9990, -7770, 4444, 2220]], [11], [21]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 10, 20, 30, 666, 777, -10000, 10]], [10], [12]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -99, -9, 3]], [20], [21]], [[[2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555]], [8], [17]], [[[1, 2, 3, 4, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, -199, -9, -9, 14]], [21], [22]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -99, -9, 3, 16, 9]], [22], [23]], [[[1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 1109, 6660, -7770, 8880, -9990, 4440]], [12], [20]], [[[0, 0, 0, 0, 0, 0, 0, 0, 0, -13, 1, 1, 0]], [2], [3]], [[[1000000, 999999, -123456, -987654, 11111, -22222, 3333, 10, -4444, 16, 666, -77, 9, -7777, 88, -4444, -4444, 666]], [10], [17]], [[[1111, 2222, -3333, 4444, -5555, -7777, -7770, -5550, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, -9990]], [8], [18]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -6000000006, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000005]], [8], [12]], [[[-1, 2000000002, 0, -123456789, 123456789, 0, -1]], [2], [3]], [[[2222, -3333, 4444, -5555, -12, -7776, 13, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 2220, 6660, -7770, 8880, -9990, 8888, -3333]], [10], [21]], [[[5, -999999994, 5000000005, 5, 2000000001, -4000000004, 5000000005, -6000000006, 6660, 5]], [7], [8]], [[[-9999, -12, 2222, -3333, 4444, -5555, -12, -7777, -999, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 555]], [10], [24]], [[[-987654320, -4444, -987654320]], [0], [3]], [[[987654322, 123456789, -123456789, 123456789, -123456789]], [3], [5]], [[[1000000001, -999999994, -123456790, 8, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 2000000000, 5000000005]], [7], [10]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -199, -99, -9, 3, -199, -123456788, 16]], [21], [25]], [[[1, 2, 3, 4, 5, 123, 7, 8, 9, -7769, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [19], [22]], [[[-10000, 2, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999]], [11], [14]], [[[-987654321, 14, -123456789, 123456789]], [2], [4]], [[[-987654321, 987654321, 1, -123456789, -123456789, 123456789]], [3], [6]], [[[1000000002, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -6000000006, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000005, 2000000001]], [9], [13]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -3333, 6660]], [10], [19]], [[[5, -999999994, 5000000005, 5000000005, 5, 2000000001, -4000000004, 5000000005, -6000000006, 6660, 5]], [8], [9]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006, -999999994]], [3], [5]], [[[-3333, 4444, -5555, -12, -7777, 13, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, 2220, 6660, -7770, 8880, -9990, 8888, -3333]], [10], [21]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 1000000, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666, -22222]], [12], [19]], [[[-999, 1, 2, 3, 4, 5, 6, 8, 9, -99, 99, -3333, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [12], [18]], [[[1, 2, 3, 4, 5, 8, 8, 5000000006, 10, 11, 12, 13, 14, 12, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15]], [21], [22]], [[[1111, 2222, 4444, -5555, -11, -7777, 8888, -4443, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [10], [20]], [[[1000000002, -999999994, -123456790, 8, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 2000000000, 5000000005, 1000000002]], [8], [11]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000005]], [8], [12]], [[[-987654320, 987654323, 987654321, -123456789, -123456789, 123456789]], [3], [6]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, 4440, -5550, -7770, 8880, -9990, -999999993, 2220]], [9], [17]], [[[-987654321, 987654321, 3333, -123456789, 123456789, -123456789]], [3], [6]], [[[-9999, 2222, -3333, 4444, -5555, -12, -7777, 13, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, 2220, 6660, -7777, 8880, -9990, 8888]], [11], [22]], [[[1000000, 999999, 1111, -123456, 5000000005, -4443, -987654, -123457, 11111, -22222, 3333, -4444, 555, 666, -77, -999999997, 0, 9, -4444]], [9], [17]], [[[-987654322, 987654321, -123456789, 123456789, -123456789]], [2], [5]], [[[6660, -987654321, 987654323, 6659, 987654321, -123456789, -123456789, 123456789, 123456789]], [6], [9]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 11, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [19], [20]], [[[1111, 2222, -3333, 4444, -5555, -7777, -7770, -5550, 8889, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, -9990]], [8], [18]], [[[1, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14]], [20], [21]], [[[1000000, 999999, -888888, -123456, -987654, -3333, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111]], [9], [18]], [[[-987654321, 14, -987654322, -123456789, 123456789]], [2], [5]], [[[1111, -3333, 4444, -5555, -7777, 8889, -9999, 1110, 2220, -3330, 4440, -5550, -7770, 8880, -9990, 8889]], [8], [16]], [[[1, 2, 3, 4, 5, 123, 7, 8, -7769, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [18], [21]], [[[-9999, 2222, -3333, 4444, -5555, -12, -7777, 13, 8888, -9999, 556, 1110, -7776, -7769, 2220, -3330, 4440, 2220, 6660, -13, -7770, 8880, -9990, 8888]], [12], [24]], [[[-1, -10, 10, -11, 555, -45, -990, -1000, 100, 432, 10, 20, 30, 666, 777, -10000, 123456789, 556, -990]], [11], [12]], [[[1, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, -199, -9, -9, 14]], [19], [20]], [[[1111, 2222, -3333, 4444, -5555, -7777, -7770, -5550, 8888, -9999, 1110, 2220, -3330, 4440, 2000000002, -5550, 6660, -7770]], [9], [18]], [[[-9999, -12, 2222, -3333, 4444, 8881, -5555, -12, -7777, -999, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 555, 8888]], [12], [25]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -77, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99]], [13], [18]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006, -999999994, 5000000005]], [4], [6]], [[[-123456789, 100, 987654322, 9999, 987654321, -123456789, -987654322, -123456789, 987654321]], [5], [9]], [[[987654322, -12, -123456788, -123456789, 123456789, 987654321, -12]], [3], [7]], [[[-999999994, -999999998, -999999997, -999999996, -999999995, -999999994, -999999993, -999999992, -999999991, -999999990, -999999994]], [0], [11]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, -3333]], [10], [20]], [[[1, 2, 3, 4, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 9998, 123, -1111111, -99, 1]], [13], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 665, 88, 9, -4444, -4444, 9]], [9], [16]], [[[-123456789, 987654321, -7770, 987654322, 9999, 987654321, -123456789, -987654322, -123456789, 987654321]], [5], [10]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111, -888888]], [9], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 665, -77, -77, 88, 9, -4444, -4444, 9]], [9], [16]], [[[-987654321, 123456789, 987654321]], [2], [3]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -999, 18, 19, 20, -199, 8, -9, -8, 19]], [22], [24]], [[[2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7771, 8880, -9990, 8888, 8888]], [11], [20]], [[[1111, 2222, -3333, 4444, -5555, -7777, -7770, -5550, 8888, -9999, 1110, 2220, -3330, 4440, 2000000002, -5550, 6660, -7770, -3330]], [9], [19]], [[[1000000, 999999, -888888, -123456, -987654, -3333, 11111, -22222, 3333, -4444, 555, 99, 665, -77, 88, 9, -4444, -4444, 11111, -888888]], [10], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444, -77]], [9], [17]], [[[-987654321, -123456789, 123456788, -123456789]], [1], [4]], [[[1, 2, -5555, 3, 4, 2, 5, 665, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, 99, 14, 10]], [23], [25]], [[[1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, -7770, 1109, 6660, -7770, 8880, -9990, 4440]], [12], [21]], [[[987654322, 123456789, -123456789, 123456789, -123456789, 2000000000]], [4], [6]], [[[1000000001, -999999994, -123456790, -999999993, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999993, -999999994, 2000000000, 5000000005]], [6], [11]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99, 1]], [14], [19]], [[[1000000, 999999, -888888, -123456, -4443, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [8], [16]], [[[-99999, 1000000001, 2000000002, 15, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006]], [6], [7]], [[[1111, -10000, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -3333, 2220, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [10], [18]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 2220]], [10], [18]], [[[1111, 2222, -3333, 4444, -5555, -11, -7776, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [10], [20]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444]], [10], [17]], [[[1111, 2222, -3333, 4444, -7777, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -22222, -7770, 8880, -9990, -7770, 4444]], [9], [18]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888, -9990, -9999]], [11], [22]], [[[1, 2, 3, 4, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 1109, -99999, 9998, 99999, -1111111, -99, 1]], [14], [20]], [[[1, 2, 3, 8, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -9999, 16, 17, 18, 19, 17, 20, -99, -9, 17, 8, 1, -9]], [24], [25]], [[[16, -987654321, 14, -999999990, -123456789, 123456789]], [3], [6]], [[[1111, 2222, -3333, 4444, -5555, -9999, 1110, -5551, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 4444, -3333]], [9], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444, 88]], [9], [16]], [[[-987654321, 987654322, 123456789, 987654321, -123456789, -123456789, 123456789, 987654321, -123456789, -123456789]], [5], [10]], [[[1111, 2222, -3333, 4444, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -3330, 4440]], [10], [18]], [[[-99, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, -123456, 17, 18, 19, 20, -199, -99, -9, -9, 7]], [19], [21]], [[[-10000, 2, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, 9999]], [12], [15]], [[[1000000, 999999, -888888, -123456, 5000000005, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [9], [15]], [[[1000000, 999999, -888889, -123456, 5000000005, 11111, -22222, 3333, -4444, -76, 555, 666, 88, 9, -4444, -4444]], [9], [15]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -22222, -7770, 8880, -7776, -9990, -7770, 4444, 2220, -22222]], [11], [23]], [[[1000000, 999999, -888888, -123455, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444]], [9], [16]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, -22222, -7770, 8880, -7776, -9990, -7770, 4444, 2220, -22222]], [10], [22]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, -9999, -99, 99, 999, -9999, -123457, -99999, 99999, -1111111]], [10], [15]], [[[-999999997, 2000000002, 1111, 15, 3000000003, -6000000006]], [4], [5]], [[[-987654321, -123456789, 987654321, -123456789, 123456789]], [2], [5]], [[[1111, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 4443, -5550, 6660, 8880, -9990, -3333, 8880, 4444, 8880, 4444]], [13], [21]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, 4444, 6660]], [12], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 555, 665, -77, -77, 88, 9, -4444, -4444, 9]], [9], [15]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, 100, 123, -123456790, 432, 10, 20, 123, 30, 666, 777, -10000, 123456789]], [12], [16]], [[[1111, 2222, -3334, 4444, -5555, -7777, 8888, -10000, 1110, 2220, 4440, -5550, -7770, 8880, -5554, -9990]], [8], [15]], [[[1111, 2222, 4444, -5555, -7777, -7770, -5550, 8888, -9999, 1110, 2220, -3330, 4440, -5550, -22222, 6660, -7770, 8880, -9990, 2220]], [10], [20]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14, 17, 2]], [23], [25]], [[[1111, 2222, -3333, 4444, -7777, 8888, -9999, 1111, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -999999998, 8880, -9990, 8888]], [11], [19]], [[[1111, 2222, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [9], [16]], [[[1, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, -199, -9, -9, 14, -9]], [19], [20]], [[[1111, 2000000001, 2222, 4444, -5555, -7770, -5550, 8888, -9999, 1110, 2220, -3330, -5550, -22222, 6660, -7770, 8880, -9990]], [9], [18]], [[[1000000, 999999, -888888, -123456, -987654, -4444, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444]], [11], [20]], [[[6660, -987654321, 987654323, 99, -123456789, -123456789, 123456789, 123456789]], [5], [8]], [[[-199, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20]], [20], [22]], [[[1111, 2222, -3333, 4444, -5555, 8888, -9999, 1110, -5551, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 4444, -5550]], [10], [19]], [[[1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20, 8]], [22], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444, 667, 11111, 666, 555, 9, 999999, -888888]], [15], [23]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789, -990]], [12], [15]], [[[6660, -987654321, 987654323, 987654321, -123456789, -99, -123456789, 123456789, 987654321, 123456789]], [6], [9]], [[[100, -123456790, 987654322, 9999, 987654321, -123456789, -987654322, -123456789, 987654321]], [5], [9]], [[[1, 10, 3, 4, 5, 123, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 18, 19, 20, -199, -99, -9, -9, -199]], [21], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -123457, -77, 9, 88, 9, -4444, -4444, 667, 11111, 666, 555, 9, 999999, -888888]], [14], [23]], [[[1, 2, 3, 4, 5, 6, 7, 8, 3333, -99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99]], [12], [17]], [[[-999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 5, -999999994]], [4], [7]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999995, -999999994, -999999993, 2000000000, 5000000005]], [6], [11]], [[[-999999994, 2000000001, 5000000005, -999999994, -6000000006, -999999994, -999999994, 5000000005]], [3], [7]], [[[1111, 2222, 4444, -5555, -7777, -7770, -5550, 8888, -9999, 1110, 2220, -3330, 4440, -5550, -22222, 6660, -7770, 8880, -9990, 2220, -9990]], [10], [21]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -22222, 5000000006, 8880, -7776, -9990, -7770, 4444, 2220, -22222, 4440]], [13], [24]], [[[-1, -10, 10, -11, -12, 554, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789, -991, 797]], [13], [17]], [[[1110, 2222, -3334, 4444, -5555, -7777, 8888, -9999, 1110, 2220, 4440, -5550, -7770, 8881, -5554, -9990]], [8], [16]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 11, 13, 14, 15, 16, 17, 18, 8881, 19, 20, -199, -99, 20, -9, -99]], [21], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20, -9]], [21], [22]], [[[1, 2, 1111, 3, 8, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -9999, 16, 18, 19, 17, 20, -99, -9, 17, 8, 1, -9]], [24], [25]], [[[1, 2, 3, 88, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 17, 20, -199, 665, -9, 19]], [23], [24]], [[[987654322, 123456789, -123456789, 123456789, 12, -123456789, -123456789]], [4], [7]], [[[1111, 2222, -3333, 4444, -5555, -11, -7776, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -7776, -9990]], [10], [21]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000004, 2000000001]], [9], [13]], [[[-987654321, 987654320, 987654321, -123456789, 123456789]], [3], [5]]], [], [[[[12, 23, 34, -45, -56, 0]], [3], [5]], [[[123, -456, 789]], [2], [3]], [[[-10, -11, -12, 13, 14, -20]], [2], [3]], [[[123, 456, 789, -987, -654, -321]], [3], [5]], [[[100, -250, 375, 500, -750]], [3], [4]], [[[99, 999, 666, -5555]], [3], [4]], [[[123, 456, 789, 790, -987, -654]], [4], [6]], [[[-5555, -12, 101, -202, 303, -404, 505, -606]], [3], [5]], [[[100, -250, 375, -750]], [2], [3]], [[[15, -10, -11, -12, 13, 14, -20]], [3], [4]], [[[99, -250, 375, -750]], [2], [3]], [[[303, -405, -405, -606]], [1], [3]], [[[99, 99, 999, 666, -5555]], [4], [5]], [[[99, -250, 375]], [2], [3]], [[[101, -987, 303, -404, -606]], [2], [3]], [[[99, 99, 666, -5554, -5555]], [3], [5]], [[[99, 99, 666, -5554, -5555, 99]], [4], [6]], [[[-10, 123, -12, 13, 14, -20]], [3], [4]], [[[99, 666, -5554, -5555, -5554]], [2], [5]], [[[99, 999, -202, 30, -5555, -202]], [3], [4]], [[[-10, -11, -12, 0, 14, -20]], [1], [2]], [[[99, 999, -202, 30, -5555, -202, 30]], [4], [5]], [[[15, -10, -11, -12, 13, 14]], [3], [4]], [[[123, 456, 789, -987, -654, -5555, -321]], [3], [6]], [[[999, 666, -5555]], [2], [3]], [[[456, 789, 790, -987, -654, 790]], [4], [6]], [[[99, 999, -202, 30, -750, -5555, -202, 30]], [4], [5]], [[[-405, 303, -405, -405, -606]], [1], [4]], [[[999, 665, 666, -5555]], [3], [4]], [[[123, -456, 789, 123]], [3], [4]], [[[15, -10, -11, -12, 14, -20]], [2], [3]], [[[123, 456, 789, -987, -654]], [3], [5]], [[[999, -1, -404, -750, 999, -19, 0]], [2], [3]], [[[100, -250, 375]], [2], [3]], [[[99, -250, 375, -750, -750]], [2], [3]], [[[-251, 99, -250, 375, -750]], [2], [4]], [[[99, 999, -202, 30, -5555, -202, 30, -202]], [4], [5]], [[[15, -10, -11, -12, 14, 14, -20]], [3], [4]], [[[-10, -11, -12, 13, 14, -20, 14]], [3], [4]], [[[-405, 506, 303, -405, -405, -606]], [2], [5]], [[[-405, -456, 303, -405, -405, -606]], [1], [5]], [[[99, 999, 666, -5555, 99]], [4], [5]], [[[-405, 506, -250, -405, -405, -606]], [1], [5]], [[[99, 999, -250, -202, 30, -5555, -202, 30, 999]], [5], [7]], [[[-605, 303, -405, -405, -5555, -606, -606]], [1], [4]], [[[456, 789, 789, 790, -987, -654]], [4], [6]], [[[-1, -404, 30, 999, -20, 0, 0, -19, 999]], [3], [4]], [[[-1, -404, 14, 30, 999, -20, 0, 0, -19, 999]], [4], [5]], [[[99, 99, 999, 666, -5555, 666]], [5], [6]], [[[100, -250, 375, -250]], [2], [4]], [[[-12, -201, 101, -202, 303, -404, 505, -605, 302]], [4], [5]], [[[99, -5554, 999, 666, -5555, 99]], [4], [6]], [[[-405, 506, 303, -405, -405, -606, -405]], [2], [6]], [[[456, 789, 790, -987, -654]], [3], [5]], [[[99, -5554, 999, 666, -5555]], [3], [5]], [[[123, -456, 789, 789, -456]], [3], [5]], [[[99, 999, -203, 30, -5555, -202, 30, -202]], [4], [6]], [[[999, -202, 30, -5555, -202]], [2], [3]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9]], [8], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9]], [20], [21]], [[[1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [10], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [13], [17]], [[[-1, -2, 0, -123456789, 123456789]], [1], [2]], [[[-987654321, 987654321, -123456789, 123456789]], [2], [4]], [[[-999999999, -999999998, -999999997, -999999996, -999999995, -999999994, -999999993, -999999992, -999999991, -999999990]], [0], [10]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [12], [14]], [[[-999999999, -999999998, -999999997, -999999996, -999999995, -999999993, -999999992, -999999991, -999999990]], [0], [9]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, 999999]], [9], [14]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 999999, -22222, 3333, -4444, 555, 666, -77, 88, 9, 999999]], [10], [15]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [13], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [8], [13]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [10], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [8], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [21], [22]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [14], [16]], [[[1111, 2223, 7, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [12], [19]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [12], [20]], [[[1000000, 999999, 14, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [9], [13]], [[[1000000, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [7], [12]], [[[-1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [13], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, 3333]], [9], [14]], [[[-1, -10, -9999, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [14], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [8], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999]], [8], [12]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333]], [9], [13]], [[[0, -2, 0, -123456789, 123456789]], [1], [2]], [[[1, 2, 3, 4, 5, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [12], [16]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, -10]], [14], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [13], [16]], [[[1111, 4, 7, 9999, 4444, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 1111]], [13], [21]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777]], [14], [17]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10]], [13], [14]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 88]], [7], [11]], [[[1000000, 999999, -888888, -123456, 2000000002, 11111, 3333, -4444, 666, -77, 88, 88]], [8], [11]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [14], [16]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [13], [16]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [11], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333, 999999]], [10], [14]], [[[1000000, -1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777]], [13], [15]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [13], [15]], [[[1111, 4, 7, 9999, 4444, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111]], [13], [19]], [[[1111, 2223, 7, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444]], [13], [21]], [[[1111, 4, 7, 9999, 4444, -7770, -3331, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111]], [13], [20]], [[[1111, 4, 7, 9999, 4444, -7770, -3331, -5555, 6666, -199, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111]], [13], [21]], [[[1000000, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [7], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 9999]], [14], [18]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555]], [10], [19]], [[[-987654321, 987654321, 2220, 123456789]], [3], [4]], [[[-1, -10, 10, -11, -12, 555, 796, 123456789, -990, -1000, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [13], [15]], [[[1111, 4, 7, 9999, 4444, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111, 2219]], [14], [20]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123]], [15], [18]], [[[1, 2, 3, 4, 5, 6, -7770, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [12], [17]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 999]], [13], [17]], [[[1111, 4, 7, 9999, 4444, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111, 2219, 1111]], [15], [21]], [[[-987654321, 987654321, 2220, 987654321]], [3], [4]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 777, -10000, 123456789, 777, 777]], [13], [15]], [[[1111, 2223, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444]], [12], [20]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 999998, -987655, 9, -987654, -987654]], [9], [17]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777]], [13], [15]], [[[1111, 4, 7, 9999, -7770, -3331, -5555, 6666, -199, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111]], [12], [20]], [[[1000000, 999999, 3, -987654, 11111, -22222, 3333, -4444, 555, 666, 88, 9, 999999]], [10], [13]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999]], [13], [18]], [[[1000000, 1000000000, 999999, 14, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [10], [14]], [[[1000000, 2, 999999, 3, -987654, 11111, -22222, 3333, -4444, 555, 666, 88, 9, 999999]], [11], [14]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [12], [15]], [[[-1, -10, -11, 19, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [14], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [21], [22]], [[[1111, 2223, -3332, -3333, 4444, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555]], [10], [19]], [[[1, -100, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [14], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 1000000, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [22], [23]], [[[1111, 4, 7, 9999, 4444, -7770, -3331, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111, 6660]], [14], [21]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 9999]], [14], [19]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [12], [16]], [[[432, -123456, 0, -123456789, 123456789]], [2], [4]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 1110, 6666, -7777, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -9999]], [12], [21]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [16], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [16], [19]], [[[1000000, 987654321, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [9], [14]], [[[1111, 2223, 7, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, 4444]], [13], [19]], [[[1000000, 999999, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999]], [8], [11]], [[[1111, 2223, -3332, -3333, 4444, 6666, -7777, 8888, -9999, 2219, -3330, 4440, -5550, -7770, 8880, -9990, -5555, 2219]], [9], [18]], [[[-987654321, 987654321, 2220, 123456789, 987654321]], [4], [5]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, -10]], [13], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, 666, -77, 88, 88, -888888]], [7], [11]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655]], [7], [13]], [[[1000000, 999999, 100, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999, 999999]], [10], [12]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, 10, 20, -3333, 30, -100, 777, -10000, 123456789, 777]], [12], [16]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, -9990, -5555]], [10], [18]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777]], [13], [16]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, -77, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [13], [16]], [[[1, -100, 2, 3, 4, 5, 6, 7, 9, 13, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [15], [19]], [[[1000000, 999999, -888888, -123457, -987654, 11111, 3333, 666, -77, 88, 88, -888888]], [7], [11]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 7]], [14], [16]], [[[1111, 2223, 7, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, -987654, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444]], [13], [22]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [13], [16]], [[[-10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10]], [12], [13]], [[[1000000, 1000000000, 999999, 14, -123456, -987654, 11111, -123457, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [10], [15]], [[[0, 0, 30, 0, -999999999, 0, 0, 0, 0, 99, 0]], [2], [3]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 555, 666, -77, 88, 9, 999999]], [9], [13]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [15], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 777, 777]], [14], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777]], [14], [18]], [[[1, 2, 3, 4, 5, 6, -999999993, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [13], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [21], [22]], [[[1000000, 8, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [8], [16]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [13], [18]], [[[1112, 2223, -3332, -3333, 4444, 6666, -7777, 8888, -9999, 2219, -3330, 4440, -5550, -7770, 8880, -9990, -5555, 2219]], [9], [18]], [[[-1, 0, -10, 10, -11, -12, 555, 796, 123456789, -990, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [13], [15]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -999999991, 99999, -1111111]], [15], [19]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -3330]], [11], [20]], [[[1000000, 999999, -888888, -123457, -987654, 11111, 3333, 666, -77, 88, 88, 100]], [8], [11]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777]], [15], [19]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [14], [18]], [[[7, 1111, 2223, 7, 9999, 4444, -7770, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, 4444]], [14], [20]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18, 8, 5]], [23], [24]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [15], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 999999, -22222, -4444, 555, -77, 88, 9, 999999]], [8], [13]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 433, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [14], [16]], [[[1000000, 987654321, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, -987654, 88, 9, 999999]], [9], [15]], [[[-1, -10, -990, -11, 2219, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [16], [19]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 1111, 8888]], [12], [20]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, 2220, 100, -199, 432, 10, 20, -3333, 30, -100, 777, -10000, 123456789, 777]], [13], [17]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999]], [13], [18]], [[[1000000, 999999, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999, 9]], [9], [12]], [[[1000000, -888888, -123456, 2000000002, 11111, 3333, -4444, 666, -77, 88, 88]], [7], [10]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -22222]], [8], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 555, 666, -77, 88, -987655, 11111, -888888]], [8], [14]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 666, 777, -10000, 19, 123456789, 777, -10]], [14], [15]], [[[1111, 4, 7, 9999, 4444, -7770, -5555, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111]], [12], [18]], [[[1000000, -1, -10, -11, -12, -9999, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777]], [13], [16]], [[[1000000, -888888, -123456, 11111, -22221, 3333, -4444, 666, -77, 88, 9, 999999]], [7], [11]], [[[-22221, 1000000001, 2000000002, 3000000003, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -6000000006]], [5], [6]], [[[1000000, 999999, -888888, -123456, -987654, -22222, 3333, -4444, 555, 666, -77, 88, 999998, -987655, 9, -987654, -987654]], [8], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, 666, -77, 88, 88, -22222, -888888, 88]], [8], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [12], [17]], [[[-1, -10, -11, 31, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [14], [16]], [[[1000000, -888888, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [7], [11]], [[[-1, -2, 0, -123456789, 123456789, 0]], [1], [2]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [13], [15]], [[[1111, 4, 7, 9999, 4444, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -3330, 1111]], [12], [19]], [[[1000000, 1000000000, 999999, 14, -123456, -987654, 11111, -123457, 3333, -4444, 555, 666, -77, 88, 9, -987654, 1000000000]], [11], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999, -123456]], [8], [14]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [15], [19]], [[[1, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [14], [18]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, -987655, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [11], [15]], [[[1111, 2223, 9999, 4444, -10000, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444]], [12], [20]], [[[665, 1000000, 999999, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999, 999999]], [10], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 5]], [14], [19]], [[[1000000, 999999, -888888, 2222, -123456, -987654, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [8], [14]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -990, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [11], [18]], [[[-1, -10, -11, -12, 555, 797, -45, 667, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777]], [14], [16]], [[[-1, -10, -987654321, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [15], [20]], [[[-1, -10, -11, 31, -12, 555, 797, -45, -990, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [14], [16]], [[[-1, 0, -10, 10, -11, 555, 796, 123456789, -990, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [13], [14]], [[[1111, 2223, 7, 9999, 4444, 6666, -7777, 8888, -9999, 1110, 2219, -7770, -5550, 6660, -7770, 8880, -9990]], [11], [17]], [[[-987654320, 987654321, 2220, 123456789, 987654321]], [4], [5]], [[[0, -2, 0, -123456789, 123456789, -2]], [1], [2]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777]], [15], [18]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, -990]], [15], [18]], [[[1112, 2223, -3332, -3333, 4444, 6666, -7777, 8888, -9999, 2219, -3330, 4440, -5550, -7770, 8880, -9990, -5555, -123456789]], [8], [18]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777]], [15], [19]], [[[1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [20], [21]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 122, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [15], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789, 777]], [16], [20]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 778, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [14], [16]], [[[1111, 2223, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, -7770, -5555, 8880, -9990]], [9], [17]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [12], [18]], [[[1, -100, 3, 4, 5, 6, 7, 9, 13, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [14], [18]], [[[1000000, 999999, -888888, 2222, -123456, -987654, 3333, -4444, 554, 666, -77, 88, -987655, 9, -987654, 999999]], [9], [15]], [[[-1, -10, -987654321, -990, -11, -12, -999, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [14], [20]], [[[999998, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333, 999999, 11111]], [12], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 797, 777, 777]], [14], [17]], [[[-1000, 1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [10], [18]], [[[-6000000006, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 7]], [13], [18]], [[[-1, -10, -987654321, -990, -11, -12, -999, -45, -990, -1000, 999, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [14], [20]], [[[1000000, 999999, -888888, -4443, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 88]], [7], [12]], [[[-1000, 1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 123456788, 6660, -7770, 8880, -9990]], [11], [18]], [[[0, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 100]], [13], [17]], [[[999999, 999999, -888888, -123456, 2, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [8], [13]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 88, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 10]], [16], [18]], [[[-1, 10, -11, -12, 555, 797, -45, -990, -1000, -987655, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [11], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, -990]], [15], [18]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [15], [19]], [[[1000000, 999999, -888888, -987654, 11111, -123456, 3334, -4444, 666, -77, 88, 88]], [7], [11]], [[[-1, -10, 10, 665, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, -77, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [14], [17]], [[[-1, -2, 0, -123456789, 123456789, 0, 0]], [1], [2]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111]], [12], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 20, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [11], [14]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1]], [13], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30]], [16], [19]], [[[1, 11, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [15], [19]], [[[1000000, -888888, -123456, -987654, 11111, -22222, 3333, 555, 666, -77, 88, 9, 999999]], [8], [12]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, -99999, 666, -77, 88, 9, 3333]], [8], [13]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [13], [15]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, 99999]], [13], [19]], [[[1, -100, 3, 4, 5, 6, 7, 9, 13, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999, 6]], [15], [19]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 999]], [14], [19]], [[[0, -2, 0, -123456789, 123456789, -2, -2]], [1], [2]], [[[1111, 4, 7, 9999, 4444, -7770, -3331, -5555, 6666, -199, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111, -7770]], [13], [22]], [[[-1, -2, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -2, -10000, 123456789]], [12], [14]], [[[-1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, -99, 20, 30, 4, 666, 777, -10000, 123456789, 777]], [12], [14]], [[[-1, -990, -11, 2219, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [16], [19]], [[[1000000, 999999, 14, -123456, -987654, 11111, -4444, 3333, -4444, 555, 1000001, 666, -77, 88, 9, -987654]], [10], [15]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777]], [14], [18]], [[[999998, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333, 11111]], [11], [14]], [[[1, 2, 3, 4, 5, 6, 7, 99999, 9, -1000000000, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [12], [16]], [[[-1, -10, -990, -11, -12, 797, 8880, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 777, 777, -45]], [15], [19]], [[[1111, 2223, 7, 9999, 4444, 666, -5555, 6666, -7777, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [12], [19]], [[[1, 2, 3, 5, 6, 7, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 9999]], [13], [18]], [[[-1, -2, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -2, -10000, 123456789, 555]], [13], [15]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111, 2]], [16], [19]], [[[1111, 4, 7, 9999, 4444, -7770, -3331, 6666, -199, 1, -7777, 8888, -9999, 1110, 2219, 1000001, -3330, 4440, 6660, -7770, 8880, 1111, -7770]], [15], [23]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, 9, 999999]], [9], [14]], [[[999999, 999999, -888888, -123456, -987655, 2, 3333, -4444, 555, 666, -77, 88, -987655, -987654]], [7], [13]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 3334, 777, 777]], [14], [17]], [[[-987654321, 987654321, 2220, -987654320, 987654320, 2220, 2220]], [5], [7]], [[[-987654320, 987654320, 2220, 123456789]], [3], [4]], [[[1111, 2223, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, -7770, -5555, 8880, -9990, -9990]], [9], [18]], [[[88, 999998, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [12], [15]], [[[2223, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, -7770, -5555, 8880]], [8], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 797, 777, 777, 123]], [14], [17]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -9999, 1110, 2219, -999999991, 4445, -3330, 4440, -5550, 6660, -10, 8880, -9990]], [12], [20]], [[[2222, 2223, -3332, -3333, 4444, 6666, -7777, 8888, -9999, 2219, -3330, 4440, -5550, -7770, 8880, -9990, -5555, 2219]], [9], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 1000000, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18, -199]], [22], [24]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30, 777]], [17], [20]], [[[-1, -10, 10, -11, -12, 555, 797, 99, -45, -990, -1000, 100, -98, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [15], [19]], [[[-1, 10, -11, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [12], [14]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12]], [13], [18]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, -4444, 555, 666, -77, 88, 9, 999999]], [8], [13]], [[[1000000, 8, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 666, 88, -987655, 9, -987654, -987654, 11111]], [10], [18]], [[[1111, 2223, 7, 9999, 4444, 666, -5555, 6666, -7777, -9999, 1110, 2219, -3330, -5550, 6660, -7770, 8880, -9990]], [11], [18]], [[[2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 999]], [13], [18]], [[[1111, 2223, 7, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, 17, -7770, 8880, -9990]], [13], [20]], [[[1000000001, 3000000003, -4000000004, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [8], [9]], [[[1111, 7, 9999, 4444, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [11], [19]], [[[1, 1, 10000, 2, 3, 4, 5, 19, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [14], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999, 3333]], [9], [14]], [[[1111, 2223, 7, 9999, -1000000000, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444]], [13], [21]], [[[1, 2, 10000, 2, 3, 4, 5, 19, -100, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111, 2]], [15], [18]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12]], [13], [18]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 100]], [13], [15]], [[[-1, -10, -11, -12, 555, 797, -45, 667, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, -10000]], [14], [16]], [[[1000000, 8, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 2000000002, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [9], [17]], [[[-1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797]], [14], [16]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10]], [15], [17]], [[[665, 1000000, 999999, -123456, -987654, 11111, 3333, -4444, -77, 88, 9, 999999, 999999]], [9], [12]], [[[-1, -10, -11, -12, 555, 797, 99, -45, -990, -1000, 100, -98, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12, -990]], [14], [18]], [[[1111, 4, 7, 9999, 4444, -7770, -3331, -5555, 6666, -199, -7777, -999999991, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111, -7770]], [12], [22]], [[[1000000, 0, -10, -11, -12, 555, 797, -45, -990, -1000, 100, -1, 123, 432, 10, 20, 30, 666, 777, -10000, -3332, 777, 777]], [13], [16]], [[[-987654319, 987654320, 2220, 123456789]], [3], [4]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 88, 123, 432, 10, 20, 30, 666, -5555, -10000, 123456789, 777, 777, 10]], [15], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 432, 19, 20, -199, -99, -9, 9]], [22], [23]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 13, 14, 15, 17, 18, 19, 20, -199, -99, -9, 18, 18]], [21], [22]], [[[1000000, 999999, -888888, -123457, -987654, 11111, 3333, 666, 100, 88, 88, 6]], [9], [12]], [[[1, -100, 3, 4, 5, 6, 7, 9, 13, 16, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [15], [19]], [[[1000000, -888888, -987654, 11111, -22222, 3333, 4445, 666, -77, 88, 9, 999999]], [8], [11]], [[[1000000001, 3000000003, -4000000003, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [8], [9]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, 9, 999999, -4444]], [9], [15]], [[[1000000, -888888, -987654, 11111, -22222, 3333, -4444, 666, -77, -22223, 88, 9, 999999]], [7], [12]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -990, 1110, 2219, -3330, 4440, -5550, 6660, -7770, -3331, 8880, -9990]], [11], [19]], [[[1000000, -888888, -123456, -987654, 11111, 999999, -22222, -4444, 555, -77, 88, 9, 999999]], [7], [12]], [[[1, 2, 10000, 2, 3, 4, 5, 19, -100, 8, 9, -99, 99, 999, -9999, 9999, -999999991, -123456789, -1111111, 2]], [14], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 999999]], [8], [14]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 3333, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1]], [14], [17]], [[[1000000, 999999, -888888, -123456, -987654, 778, -22222, 3333, 555, 666, -77, 88, -987655, 11111, -888888]], [8], [14]], [[[-1000, 1111, 2222, -3333, 4444, -5555, 6665, -7777, 8888, -2, -9999, 1110, 2220, -3330, 4440, 123456788, 6660, -7770, 8880, -9990]], [11], [18]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, -11]], [12], [15]], [[[1000000001, 3000000003, -4000000003, -888888, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, -4000000003, 2000000002]], [8], [9]], [[[1000000001, 3000000003, -4000000004, -888887, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002]], [7], [8]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 4441, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [11], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 797, 777, 777, -990, 797]], [17], [20]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 433, 432, 10, 20, 30, 666, 6666, 777, -10000, 123456789, 778]], [15], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, -10000]], [13], [16]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, -99, 5]], [13], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333]], [8], [13]], [[[1000000, 999999, -888888, -123456, -987654, -22222, 3333, -4444, 555, 666, -77, 88, 999998, -987655, 778, -987654, -987654, -77]], [8], [16]], [[[1111, 4, 7, 9999, 4444, -7770, -3331, -5555, -5555, 6666, -199, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111]], [13], [22]], [[[1111, 4, 7, 9999, -7770, -3331, -5555, 6666, -199, -7777, 8888, -9999, 1110, -999999996, -3330, 4440, 6660, -7770, 8880, 1111, 1111]], [12], [21]], [[[1111, 4, 7, 9999, -7770, -3331, -5556, 6666, -199, -7777, 8888, -9999, 1110, -999999996, -3330, 4440, 6660, -7770, 8880, 1111, 1111]], [12], [21]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 5, -9999]], [14], [20]], [[[-1000, 1111, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [9], [17]], [[[1111, 4, 7, 9999, 4443, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3331, 4440, 6660, -7770, 8880, 1111, 2219]], [14], [20]], [[[-1, -10, -990, -12, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 777, 797]], [16], [21]], [[[-1, -10, 31, -12, 555, 797, -45, -990, -1000, 100, -1111111, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [14], [17]], [[[1111, 4, 7, 9999, 4443, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3331, 2, 6660, -7770, 8880, 1111, 2219, 6666]], [15], [21]], [[[-3330, 2223, -3332, -3333, 4444, 6666, -7777, 8888, -9999, 2219, -3330, 4440, -5550, -7770, 8880, -9990, -5555, -123456789]], [7], [18]], [[[-1, -11, 10, -11, -12, 555, 797, 123, -45, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12, 797]], [14], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, 1000000]], [9], [14]], [[[1111, 2223, -3332, -3333, 4444, 6666, -7777, 8888, -9999, 2219, -3330, 4440, -5550, -7770, 8880, -9990, -5555, 2219, 2223]], [10], [19]], [[[999999, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [7], [13]], [[[1, 10000, 2, 3, 4, 3, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [15], [19]], [[[999999, -888888, -123456, 2, 3333, -4444, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [7], [13]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 4444, 1111]], [14], [22]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 797, 777, 777, 777]], [14], [18]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777, -45]], [15], [20]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 999999, 3333]], [7], [12]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 4441, 8888, -9999, 1110, 2219, -3330, -5550, 6660, -7770, 8880, -9990]], [10], [18]], [[[432, 0, -123456789, 123456789, -123456789, 0]], [2], [4]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5550]], [10], [19]], [[[1111, 2223, 7, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, 17, -7770, 8880, -9990, 8888]], [14], [21]], [[[1000000, -888888, 11110, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [8], [11]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, -9990, -9, -5555, -3330]], [10], [19]], [[[1000000, 999999, -888888, -123456, -987654, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 778, -987654, -987654, -77]], [7], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, -4444]], [8], [14]], [[[2223, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, 3334, -3330, 4440, -5550, -7770, -5555, 8880]], [9], [16]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1]], [12], [15]], [[[-1, -999999999, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, -12, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30, 777]], [17], [22]], [[[-1, 10, -11, -12, 555, 797, -45, -990, -1000, -987655, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [10], [14]], [[[8888, 999999, 14, -123456, 11111, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [9], [12]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18, 8, 5, 20]], [24], [25]], [[[-1, -10, 10, -11, 778, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 777, -10000, 123456789, 777, 777]], [14], [16]], [[[432, 0, -123456789, 123456789, -123456789, 0, 123456789]], [3], [5]], [[[0, -1, -10, 10, -11, -12, 555, 797, 777, -45, -990, -9990, -1000, 100, 123, 432, 88, 30, 777, -10000, 123456789, 777, 777]], [13], [16]], [[[1111, 4, 7, 9999, 4, -7770, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111, 2219, 4444]], [15], [21]], [[[-1, -10, 10, -11, -12, 20, 555, 797, -45, 3334, -1000, 100, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [16], [20]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 18, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [9], [17]], [[[1, 2, 5000000005, 3, 4, 5, 6, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999]], [13], [18]], [[[999998, 1000000, 999999, -888888, -987654, 3333, -4444, 555, 666, -77, 88, 9, 3333, 11111, 999998, -77]], [11], [14]], [[[-1, -10, 433, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [15], [19]], [[[1111, 2223, -3333, 4444, 1110, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5550]], [11], [20]], [[[-22221, 1000000001, 2000000002, -999999990, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -6000000006, -4000000004]], [4], [6]], [[[-1, -10, -990, -11, -12, 797, 16, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 3334, 777, 777]], [15], [17]], [[[8888, 999999, 14, -123456, 11111, 3333, -4444, 11112, 555, 666, -77, 88, 9, -987654]], [10], [13]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, 99999, 1]], [14], [20]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 4441, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 1112, 6660, -7770, 8880, -9990]], [12], [20]], [[[0, -1, -10, 10, -12, 1000000001, 555, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1, 30]], [14], [17]], [[[0, -2, 0, -5556, 123456789, -2, -2]], [1], [2]], [[[1000000, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [7], [12]], [[[1000000, 999999, -888888, -123456, -987654, 4440, 3333, 666, -77, 88, 88, -22222, -888888, 88]], [8], [13]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -9999, 1110, 2219, -999999991, 4445, -3330, 4440, -5550, 6660, -10, 8880, 998, -9990]], [13], [21]], [[[1, 2, 10000, 2, 3, 4, 5, 19, -9, 8, 1111, 9, -99, 99, -999, 999, -9999, 9999, -999999991, 99999, -1111111, 3, 19]], [17], [21]], [[[1, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111]], [11], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 797, 777, 777, -990, 797, 797]], [18], [21]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, -1, 999999, -123456, -4444]], [8], [15]], [[[1000000, 999999, -888888, -123456, 2000000002, 11111, 3333, 666, -77, 88, 88]], [8], [10]], [[[-987654321, 8888, 2220, 123456789, 123456788, -999999995, 987654321]], [5], [7]], [[[1111, 4, 7, 9999, -7770, -3331, -5555, 6666, -199, -7777, 8888, -9999, 1110, 88, -999999996, -3330, 4440, 6660, -7770, 8880, 1111, 1111, 9999]], [14], [23]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777, -45]], [15], [19]], [[[-123456789, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111, 2]], [15], [19]], [[[-1, 10, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [12], [14]], [[[1111, 2223, 7, 9999, 6660, 4444, -7770, -5555, 6666, -7777, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -3330]], [12], [21]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 776, 797, 777, 777, 123, 797]], [16], [19]], [[[1111, 4, 7, 9999, 4444, -7770, -3331, -5555, 6666, -199, -7777, -999999991, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111, -7770, 6660, 2219]], [14], [24]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, 4]], [12], [18]], [[[-1, -10, -11, 31, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, -10000]], [14], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 2219, 777, 777, 797, 777, 777, 100]], [17], [20]], [[[-1, -10, -990, -11, 2219, 797, -45, -990, -1000, 2000000003, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, -10, 777, 123, 123456789]], [17], [20]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, -11, 123456788]], [14], [18]], [[[1000000, 999999, 14, -123456, -987654, 11111, -4444, 3333, 122, -4444, 555, 1000001, 666, -77, 88, -987654]], [10], [15]], [[[-987654320, 123456789, 2, 987654320, 2220, 123456789]], [5], [6]], [[[1000000, -1, -10, -11, -12, -9999, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777, -45]], [13], [17]], [[[-1, -10, 10, -11, -12, 555, 797, 11, -45, -990, -1000, 100, 88, 123, 432, 10, 20, 30, 666, 777, -10000, 778, 777, 10]], [16], [18]], [[[1111, 2223, 7, 9999, 4444, -5555, 6666, 18, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, 4444]], [14], [19]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9, 10]], [22], [23]], [[[1111, 2223, 9999, 4444, -10000, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 10000, 4444]], [13], [21]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 87, -987655, 999999]], [8], [14]], [[[-987654321, 123456789, 987654321, 987654321]], [3], [4]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 122, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [22], [23]], [[[9, 1000000, 8, -888888, -123456, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654, -123456]], [9], [17]], [[[1111, 4, 7, 9999, 4444, -7770, -3331, -5555, 6666, -199, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1110, -7770, 4]], [14], [23]], [[[-1, -999999999, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 9, -12, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30, 777]], [17], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [22], [23]], [[[1111, -77, 2223, -3333, 4444, -5555, 6666, -7777, 8888, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 1111, 8888, 6660]], [13], [21]], [[[-1000, 1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 123456788, -999999991, -7770, 8880, -9990, -1000]], [10], [18]], [[[8888, -888888, -5555, 14, -123456, 11111, 3333, -4444, 11112, 555, 666, -77, 88, 9, -987654]], [9], [14]], [[[-22221, 19, 2000000002, -999999990, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -6000000006, -4000000004]], [4], [6]], [[[1111, 2223, 7, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, 4444, 6660]], [14], [20]], [[[1111, 4, 7, 9999, 4444, -7770, -3331, -5555, -5555, 6666, -199, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, 8880, 1111]], [13], [21]], [[[1000000, 0, -10, -11, -12, 30, 555, 797, -45, -990, -1000, 100, -1, 123, 432, 10, 20, 30, 666, 777, -10000, -3332, 777, 777]], [14], [17]], [[[1111, 4, 7, 9999, 4444, -7770, -5555, 6666, -7777, 1112, 8888, -1111111, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 1111, 2219, 1111]], [16], [23]], [[[0, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 101]], [13], [17]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [20], [21]], [[[1000000001, 3000000003, -4000000003, -888888, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, -4000000003, 2000000002]], [8], [9]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, -10000, 123456789, 777]], [12], [14]], [[[88, 999998, 18, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [13], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 777, 777, 123, 123456789, 777, -12]], [16], [21]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 797, 777]], [13], [16]], [[[1111, -1111111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 6660, -7770, 8880, -9990, -9, -5555, 1111]], [11], [20]], [[[1000000001, 3000000003, -4000000004, -888887, 5000000005, -3333, 2000000002, 2000000002, 2000000002]], [6], [8]], [[[1111, 4, 7, 9999, -7770, -3331, -5555, 6666, -199, -7777, 8888, 1110, -999999996, -3330, -9990, 6660, -7770, 8880, 1111, 1111]], [11], [20]], [[[1111, 2223, -3333, 4444, 1110, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5550, -9990]], [11], [21]], [[[999998, 18, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [12], [15]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 666]], [14], [16]], [[[1000000, 999999, -123456, -987654, 11111, 3333, -4444, -99999, 666, -77, 88, 9, 3333, -888887, 9]], [9], [14]], [[[1111, 4, 7, 9999, 4444, -7770, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 1111]], [13], [20]], [[[1000000, -888888, -987654, 11111, -22222, 3333, 666, -77, -22223, 88, 9, 999999]], [7], [11]], [[[1, 2, 3, 4, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 9999]], [13], [17]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, -4444, 11111]], [9], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 1000001, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [22], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 999999, -4444, -77]], [8], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 797, 777, 777, -999999991]], [13], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [12], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 123456788, 777, 777, 797, 777, -11, 123456788]], [13], [16]], [[[1, 2, 3, 4, 7, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9]], [21], [22]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 101, 777, 777, 797, 777, 777]], [16], [19]], [[[0, -1, -10, 10, -11, 5, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -999999998, -10000, 123456789, 777, 777, -1]], [14], [18]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, -999999996, 1110, 2219, -3330, 4440, 6660, -7770, 8880, -9990, -5555, -3330]], [10], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 797, 777, 777, -990, 797, 797, -1000]], [18], [21]], [[[1000000, 999999, -888888, -123456, -987653, 11111, -22222, 3333, -4444, -77, 666, -77, 999999, 3333, -77]], [7], [12]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 29, 666, 777, -9999, 798, 123456788, 777, 777, 797, 777, 777]], [16], [20]], [[[0, -1, -10, 10, -11, -12, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1]], [11], [14]], [[[-1, -10, -990, -11, -12, 797, 1112, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, -990]], [16], [19]], [[[-1, -10, 10, -11, -12, -99, 555, 797, -45, -990, -1000, 100, 123, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 29, 123456789, 777, 10, -1, -12]], [16], [20]], [[[-1111111, 1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, 999, -9999, -99999, 99999, -1111111, 99999]], [13], [19]], [[[1111, 2223, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, 15, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444]], [13], [21]], [[[1111, 4, 7, 9999, -5551, 4444, -7770, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 1111]], [13], [21]], [[[-1, -10, -11, 19, 555, 797, -45, -990, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [14], [15]], [[[-22221, 1000000001, 2000000002, 3000000003, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -123456789]], [5], [7]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -990, 1110, 2219, -3330, 4440, -5550, 6659, -7770, -3331, 8880, -9990]], [11], [19]], [[[-1, -999999991, -11, 19, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 3, -10000, 123456789, 777, 777, 432]], [15], [17]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -3331, -9990, -3330]], [11], [21]], [[[1, 2, 3, 4, 5, 6, 7, 8, 1000001, 667, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [23], [24]], [[[-1, -10, -11, 31, -12, 555, -888887, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, 123456789, 777, 777]], [13], [16]], [[[1000000, -1, -10, -11, -12, -9999, 555, 797, -45, -990, -1000, 100, 555, 123, 432, 10, 20, 30, 666, 777, 433, -10000, 777]], [14], [17]], [[[1111, 2223, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, -5550, 6660, -7770, 8880, -9990, -5555, 4444]], [11], [19]], [[[1000000, 999999, -888888, -987654, 11111, 999999, -22222, 3334, -4444, 555, 666, -77, 88, 9, 999999]], [10], [14]], [[[-1, -10, 10, -10, -12, 555, 797, 123456789, -990, -1000, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [13], [15]], [[[-987656, -987655, -1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 778, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [14], [18]], [[[-1, -990, -11, 2219, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 19, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [17], [20]], [[[1111, 2223, 7, 9999, 4444, -5555, -3330, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444, 6667]], [14], [23]], [[[1000000, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, 9, -987654, 555]], [8], [13]], [[[1000000, -888888, -123456, -987654, 11111, -22222, 3333, 666, -77, 88, 9, 999999, -22221, -888888]], [7], [13]], [[[1, 1, 10000, 2, 3, 4, 5, 19, 8, 9, -99, -99, 99, -999, 999, -9999, 9999, 99999, -1111111]], [14], [17]], [[[1000000, 999999, -888888, -123456, -987654, -999999999, 11111, -22222, 3333, -999999996, -4444, 666, -77, 88, 9, 999999, -123456]], [8], [16]], [[[-1, -10, -990, -11, -12, 797, 16, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 3334, 777, 777, -1000, -10]], [15], [17]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 432]], [12], [15]], [[[-1, -11, 10, -11, 554, 797, 123, -45, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12, 797]], [14], [18]], [[[1111, 2223, 7, 9999, 4444, -5555, -3330, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5554, 4444, 6667]], [14], [23]], [[[1000000, -888888, -987654, 11111, -22222, 3333, 666, -77, 88, 9, 999999]], [7], [10]], [[[-1, -10, 10, -11, -12, 555, 797, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, -10]], [13], [14]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, 777]], [14], [17]], [[[1000000001, 3000000003, -4000000003, -888888, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, -4000000003, 2000000002, 2000000002, 1000000001]], [10], [11]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, -987654319, 777, 797, 777, 777, 123, -990, 10]], [15], [19]], [[[-1, 10, -11, -12, 797, -45, -990, -1000, -1000, 123, 432, 20, 10, 30, 666, 777, -10000, 123456789, 1000001, 123]], [12], [14]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000003, -22223, -6000000006, 2000000002, 2000000002]], [7], [8]], [[[1111, 4, 7, 9999, 4444, -7770, -5555, 6666, -7777, 1111, 1112, 8888, -1111111, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, 6660, 1111, -9990, 1111]], [17], [25]], [[[0, -1, -10, -9, -12, 1000000001, 555, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1, 30]], [13], [16]], [[[1000000, 1000000000, 999999, 14, -123456, -987655, 11111, 3333, -4444, 555, 666, -77, -100, 88, 9, -987654]], [10], [14]], [[[1000000, -1, -10, -9999, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777]], [13], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 20]], [21], [22]], [[[-1, -10, -990, -11, -12, 797, -5555, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 2219, 777, 777, 797, 777, 777, 100, 100, 778]], [19], [22]], [[[-1, -123457, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 797, 797, 777, -990, 797, -990]], [17], [21]], [[[1111, 2223, 9999, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444, -7777]], [12], [21]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 667, 777, -10000, 123456789, 777, -10]], [13], [14]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 797, 777, 777, -990]], [14], [17]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, -99999, 666, -77, 88, 9, 3333, -888887, 9, 999999]], [10], [16]], [[[1000000, 999999, -888888, 2222, -123456, -987654, 3333, -4444, 554, 666, 999999, 88, -987655, 9, -987654, 10, 999999]], [11], [17]], [[[1111, 12, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -3330]], [12], [21]], [[[1000000, 999999, -888888, -5554, -123456, -987654, 666, 3333, -4444, 555, 666, -77, 88, 9, -987654, 555]], [9], [15]], [[[-123456789, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111]], [14], [18]], [[[-123456789, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -9999, 9999, -999999991, 99999, -1111111]], [13], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 797, 777]], [12], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789, 10]], [17], [20]], [[[1112, 2223, -3332, -3333, 4444, 6666, -7777, 8888, -9999, 2219, -3330, 4440, -5550, -7770, 8880, -9990, -5555, 2219, -5555]], [9], [19]], [[[1000000001, 3000000003, -4000000003, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [9], [10]], [[[1, 2, 3, 4, 5, 6, 7, 8, 1000001, 9, 10, 11, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [21], [22]], [[[7, 1111, 2223, 7, 9999, -7770, -999, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, 4444]], [12], [19]], [[[1111, -7777, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, -7770, -5555, 8880, 20, -9990]], [9], [18]], [[[1000000001, 2000000002, 1000000001, -999999994, 1000000002, -4000000003, -4000000004, -6000000006, -6000000006, 1000000001]], [5], [6]], [[[1000000001, 3000000003, -4000000004, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, -3332, 2000000002]], [7], [9]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -990, 31, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 797, -10]], [14], [18]], [[[-1000, 1111, 2222, -3333, 4444, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [10], [17]], [[[1000000, 999999, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, -1, 999999, -123456, -4444]], [8], [14]], [[[88, 999998, 1000000, 999999, 1000000001, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [13], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -7777, -10000, 777, 777, 797, 777]], [12], [16]], [[[1000000, 1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, -4444, 11111]], [10], [16]], [[[9223372036854775807, -9223372036854775808]], [1], [2]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -45]], [9], [10]], [[[-987654321, 987654321, -123456789, -123456789, 123456789]], [2], [5]], [[[-987654321, 987654322, 987654321, -123456789, -123456789, 123456789]], [3], [6]], [[[-1, 2000000002, 0, -123456789, 123456789, 0]], [2], [3]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9]], [21], [22]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [9], [17]], [[[-987654321, 987654322, 123456789, 987654321, -123456789, -123456789, 123456789]], [4], [7]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [8], [15]], [[[1111, 2222, -3333, 4444, -5555, -7777, -7770, -5550, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [9], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444]], [8], [16]], [[[1000000, 999999, -888888, -123456, 5000000005, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [9], [16]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, -7770, 8880, -9990]], [8], [16]], [[[-987654321, 987654322, 123456789, 987654321, -123456789, -123456789, 123456789, 987654321]], [5], [8]], [[[-987654321, 987654322, -12, -123456789, -123456789, 123456789, 987654321]], [3], [7]], [[[-1, -10, 10, -11, -12, 555, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [11], [13]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444]], [9], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444]], [9], [17]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9]], [20], [21]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [20], [21]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006]], [3], [4]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111]], [13], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, 88, 9, -4444, -4444]], [11], [18]], [[[1111, -3333, 4444, -5555, -7777, 8889, -9999, 1110, 2220, -3330, 4440, -5550, -7770, 8880, -9990]], [7], [15]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888]], [10], [19]], [[[-987654321, 987654322, 987654321, -123456790, -123456789, 123456789]], [3], [6]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -999999994]], [3], [5]], [[[-987654321, 987654321, -123456789, -123456789, 123456789, 123456789]], [3], [6]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [19], [20]], [[[-987654321, 987654322, 123456789, 987654321, -123456789, -123456789, 987654321]], [4], [7]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [11], [20]], [[[-987654321, 987654322, 123456789, -11, -123456789, -123456789, 987654321]], [3], [6]], [[[1, 2, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14]], [21], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444, -987654]], [9], [18]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006]], [3], [4]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [10], [20]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14]], [22], [23]], [[[1000000001, -999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994]], [4], [6]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [12], [16]], [[[1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 100, 6660, -7770, -4000000004, -9990]], [10], [17]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, -123456, 17, 18, 19, 20, -199, -99, -9, -9, 7]], [19], [21]], [[[-9999, 2222, -3333, 4444, -5555, -12, -7777, 13, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [11], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 665, -77, 88, 9, -4444, -4444]], [8], [15]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 5000000005]], [4], [7]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 5, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [21], [22]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, 999, -9999, 9999, -99999, 99999, -1111111]], [12], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 665, -77, 88, 9, -4444, -4444, 9]], [9], [16]], [[[2222, -3333, 4444, -5555, -12, -7777, 13, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [11], [22]], [[[1111, 2222, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [10], [19]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15]], [21], [22]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -999999994, -6000000006, -999999994, -999999994, 5000000005]], [4], [8]], [[[1000000, 999999, -888888, -123456, 5000000005, -4443, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [9], [17]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14]], [21], [23]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14, 8]], [23], [24]], [[[1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 100, 88, 6660, -7770, -4000000004, -9990]], [11], [18]], [[[1111, 2222, -3333, 4444, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [11], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111]], [9], [17]], [[[1000000, 999999, -888888, -123456, 5000000005, -4443, -987654, -123457, 11111, -22222, 3333, -4444, 555, 666, -77, -999999997, 0, 9, -4444, -4444]], [8], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444]], [11], [19]], [[[-999, 1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -3333, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [13], [19]], [[[0, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111]], [12], [17]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [20], [21]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [20], [21]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7771, 8880, -9990, 8888]], [11], [20]], [[[1000000001, -999999994, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 5000000005]], [5], [8]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 2, 30, 666, 777, -10000, 123456789, 432]], [14], [16]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 2000000000, 5000000005]], [6], [10]], [[[-1, -10, 10, -11, -12, 555, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 556, -990]], [12], [14]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 2, 30, 666, 777, -10000, 123456789, 432, -1000]], [14], [16]], [[[-4443, 987654322, 987654321, -123456790, -123456789, 123456789]], [3], [6]], [[[5, -999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 5]], [5], [7]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, 665, -9]], [22], [23]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 17, 18, 19, 20, -199, -4444, -9, 15]], [22], [24]], [[[1, -999999997, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15, 12]], [21], [23]], [[[2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [8], [16]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888, -9990]], [11], [21]], [[[987654322, 123456789, 987654321, -123456789, -123456789, 123456789]], [4], [6]], [[[-987654321, 987654322, -12, -123456790, -123456789, 123456789, 987654321]], [3], [7]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -7770, 4444]], [10], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, 666]], [11], [19]], [[[-1, -10, 10, -11, -12, 555, 1, 797, -45, -990, -1000, 100, 123, 10, 20, 2, 30, 666, 777, 123, 123456789, 432, -1000]], [15], [17]], [[[1000000001, -999999994, 2000000001, 5000000005, -999999994, -6000000006, -999999994, -999999994, 5000000005]], [4], [8]], [[[1000000, 999999, 1111, -123456, 5000000005, -4443, -987654, -123457, 11111, -22222, 3333, -4444, 555, 666, -77, -999999997, 0, 9, -4444, -4444]], [9], [18]], [[[6660, -987654321, 987654323, 987654321, -123456789, -123456789, 123456789, 123456789]], [5], [8]], [[[1000000, 999999, -888888, -123456, 5000000005, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444, 88]], [10], [17]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 30, 666, 777, -10000, 123456789, -11]], [11], [13]], [[[100, 987654322, 123456789, 9999, 987654321, -123456789, -123456789, 987654321]], [6], [8]], [[[-1, -10, 10, -11, -12, 555, -45, -990, -1000, 100, 432, 10, 20, 30, 666, 777, -10000, 123456789, 556, -990]], [11], [13]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 19, 20, -199, -99, -9]], [21], [22]], [[[6660, -987654321, 987654323, 987654321, -123456789, -123456789, 123456789, -12]], [4], [8]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 4444]], [10], [18]], [[[6660, -987654321, 987654323, 987654321, -123456789, 14, 123456789, -12]], [5], [8]], [[[-987654321, -987654321, 987654322, 123456789, 987654321, -123456789, -123456789, 987654321]], [4], [8]], [[[6660, -987654320, 987654323, 987654321, -123456789, -123456789, 123456789, -12]], [4], [8]], [[[-987654321, 987654322, 987654321, -123456789, 123456789]], [3], [5]], [[[2222, -3333, 4444, -5555, -12, -7777, 13, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, 2220, 6660, -7770, 8880, -9990, 8888, -3333]], [11], [22]], [[[2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7771, 8880, -9990, 8888]], [10], [19]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99]], [13], [18]], [[[-9999, 2222, -3333, 4444, -5555, -12, -7777, 13, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, 2220, 6660, -7770, 8880, -9990, 8888]], [11], [22]], [[[6660, -987654321, 987654323, 987654321, -123456789, -123456789, 123456789, 987654321, 123456789]], [6], [9]], [[[1, 2, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, -199, -9, -9, 14]], [22], [23]], [[[1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -9]], [18], [19]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20]], [21], [22]], [[[-9999, 2222, -3333, 4444, -5555, -12, -7777, -999, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [10], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111, -4444]], [9], [18]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, 4440, -5550, -7770, 8880, -5554, -9990]], [8], [16]], [[[2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7771, 8880, 8888]], [10], [18]], [[[1111, 2222, -3334, 4444, -5555, -7777, 8888, -9999, 1110, 2220, 4440, -5550, -7770, 8880, -5554, -9990]], [8], [16]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -3333]], [9], [18]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, -9999, -99, 99, 999, -9999, 9999, -99999, 99999, -1111111]], [11], [15]], [[[987654322, 123456789, -123456789, -123456789, 123456789]], [3], [5]], [[[1111, 2222, -3333, 4444, -5555, 8888, -9999, 1110, -5551, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 4444]], [10], [18]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, 99, 14, 10]], [23], [25]], [[[987654322, -12, -123456788, -123456789, -123456789, 123456789, 987654321, -12]], [3], [8]], [[[1111, 2222, -3333, 4444, -7777, 8888, -9999, 1110, -7776, 2220, 2000000001, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [12], [19]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 10, 20, 30, 666, 777, -10000, 123456789]], [10], [12]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [12], [15]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -999, 18, 19, 20, -199, -99, -9, -9]], [20], [22]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [11], [15]], [[[-9999, 2222, -3333, 2223, 4444, -5555, -12, -7777, 13, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, -5550, 2220, 6660, -4444, 8880, -9990, 8888, 2222]], [13], [25]], [[[1111, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, 8880, -9990, -3333]], [8], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666]], [11], [18]], [[[1000000001, 2000000002, -9990, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006]], [5], [6]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666, 555, 9]], [13], [20]], [[[-987654321, 0, 987654322, 123456789, 987654321, -123456789, -123456789, 123456789]], [4], [7]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 13, 18, 19, 20, -199, -9, 14]], [22], [24]], [[[1000000001, 1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006]], [4], [5]], [[[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 13]], [21], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 555, 665, -77, 88, 9, -4444, -4444, 9]], [9], [15]], [[[-987654321, -123456, 0, 987654322, 123456789, 987654321, -123456789, -123456789, 123456789]], [4], [8]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 1000000, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666]], [12], [18]], [[[1111, 2222, -3333, 4444, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -999999998, 8880, -9990, 8888]], [11], [19]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 5000000006, 2000000000, 5000000005]], [7], [11]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999993, -999999994, 2000000000, 5000000005]], [6], [10]], [[[1110, 2222, -3334, 4444, -5555, -7777, 8888, -9999, 1110, 2220, 4440, -5550, -7770, 8880, -5554, -9990]], [8], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444, -987654, -987654]], [9], [19]], [[[1000000001, -999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 9]], [5], [7]], [[[1, 2, 3, 88, 4, 5, 16, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, 665, -9, 19]], [25], [26]], [[[1, 2, 3, 4, 5, 6, 7, -6000000006, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [19], [20]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 123, 30, 666, 777, -10000, 123456789]], [12], [16]], [[[987654322, 123456789, 987654321, -123456789, -123456789, 123456789, -123456789]], [4], [7]], [[[1, 2, 3, 4, 5, 4444, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [20], [22]], [[[2222, -3333, 4444, -5555, -12, -7777, 13, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888, -7777, 6660]], [12], [24]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -999, 18, 19, 20, -199, -99, -9, -9, 19]], [21], [23]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, -99999, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, 2222, -99999]], [10], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99, 1]], [14], [20]], [[[1, 2, 2000000001, 4, 5, 6, 7, 8, 18, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14]], [22], [23]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 13, 18, 19, 20, -199, -9]], [21], [23]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14, 17]], [22], [24]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -199, -99, -9, 3]], [20], [22]], [[[2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7771, 8880, -9990, 8888, 2222]], [11], [20]], [[[-10000, 2, -1, 3, 4, 5, 6, 7, 8, -9999, -99, 99, 999, -9999, 9999, -99999, 99999, -1111111]], [11], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, -4444, 10]], [12], [21]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -3330]], [9], [18]], [[[-987654321, -123456, 0, 987654322, 123456789, 987654321, -123456789, -123456789, 123456789, -123456789]], [4], [9]], [[[987654322, 123456789, -123456789, -123456789, 123456789, 123456789]], [4], [6]], [[[-9999, 2222, -3333, 2223, 4444, -5555, -12, -7777, 13, 8887, -9999, 1110, -7776, -7769, 2220, -3330, 4440, -5550, 2220, 6660, -4444, 8880, -9990, 8888, 2222, -4444]], [13], [26]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, -1000, 100, 123, -123456790, 10, 20, 30, 666, 777, -10000, 123456789]], [10], [14]], [[[-4443, 987654322, 987654321, -123456790, -123456789]], [2], [5]], [[[1110, 2222, -3334, 4444, -7777, 8888, -9999, 2220, 4440, -5550, -7770, 8880, -5554, -9990]], [7], [14]], [[[1111, -10000, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [10], [19]], [[[987654322, 123456789, 987654321, -123456789, -123456789, 123456789, -123456789, -5555]], [4], [8]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -45, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9]], [21], [23]], [[[1111, -10000, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -3333, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [10], [19]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -123456790, 432, 20, 30, -11, 666, 777, -10000, 123456789]], [11], [14]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, -4444, 10]], [11], [20]], [[[1111, 2222, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, -9990]], [10], [20]], [[[6660, -987654321, 987654323, 987654321, -123456789, -123456789, 123456789, 6661, -12]], [5], [9]], [[[-987654321, 987654322, 123456789, -987654320, -11, -123456789, -123456789, 987654321]], [3], [7]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 9998, 99999, -1111111, -99, 1]], [15], [21]], [[[-987654320, 987654323, 987654321, -123456789, -123456789, 123456789, -12]], [3], [7]], [[[-987654321, 987654321, -123456789, 123456789, -123456789]], [2], [5]], [[[-999999999, -999999998, -999999997, -999999996, -999999995, -999999994, -999999993, -999999992, -999999991, -999999990, -999999995]], [0], [11]], [[[1, 2, 2000000001, 4, 5, 6, -999999990, 7, 8, 18, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14]], [22], [24]], [[[2222, 4444, -5555, -11, -7777, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [8], [17]], [[[1, 2, 3, 4, 5, 8, 8, 5000000006, 10, 11, 12, 13, 14, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15]], [20], [21]], [[[1, 2, 3, 88, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, 665, -9, 19]], [24], [25]], [[[-999999994, -999999998, -999999997, -999999996, -999999995, -999999994, -999999993, -999999992, -999999991, -999999990]], [0], [10]], [[[1000000001, 2000000002, 3000000004, -123456790, 5000000005, -6000000006, -6000000006]], [4], [5]], [[[-1, -10, 10, -11, -12, -999999997, 797, -990, -1000, 100, 123, -123456790, 432, 10, 20, 123, 30, 666, 777, -10000, 123456789, -123456790]], [12], [16]], [[[0, 0, 0, 0, -999999992, 0, 0, 0, 0, 1, 1]], [2], [3]], [[[1111, 2222, 4444, -5555, -7777, -7770, -5550, 8888, -9999, 1110, 2220, -3330, 4440, -5550, -22222, 6660, -7770, 8880, -9990]], [9], [19]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 13, 18, 19, 20, -199, -9, 10]], [22], [24]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 10, -4444, -4000000004, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, -4444, 10]], [10], [19]], [[[-987654321, 987654322, 2000000000, 987654321, -123456790, -123456789, 123456789]], [4], [7]], [[[1000000, 999999, -888888, -123456, 11111, -22222, 3333, -4444, 555, 665, -77, 88, 9, -4444, -4444, 9]], [9], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 17]], [21], [22]], [[[-9999, 2222, -3333, 4444, -5555, -12, -7777, 13, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, 2220, 6660, -13, -7770, 8880, -9990, 8888]], [11], [23]], [[[1, 2, 3, 4, 5, 123, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [20], [22]], [[[1, 2, 3, 4, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 9998, 99999, -1111111, -99, 1]], [14], [20]], [[[-987654321, 987654322, 123456789, -123456789, 8888, -123456789, 123456789, 987654321]], [5], [8]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -22222, -7770, 8880, -9990, -7770, 4444]], [10], [20]], [[[5, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 5]], [5], [6]], [[[6660, -987654321, 987654323, -123456789, -123456789, 123456789, -12]], [3], [7]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, 99, 14, 10]], [22], [24]], [[[-987654321, 987654322, 1999999999, 987654321, -123456790, 123456789]], [4], [6]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -22222, -7770, 8880, -9990, -7770, 4444, 2220]], [11], [21]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 10, 20, 30, 666, 777, -10000, 10]], [10], [12]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -99, -9, 3]], [20], [21]], [[[2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555]], [8], [17]], [[[1, 2, 3, 4, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, -199, -9, -9, 14]], [21], [22]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -99, -9, 3, 16, 9]], [22], [23]], [[[1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 1109, 6660, -7770, 8880, -9990, 4440]], [12], [20]], [[[0, 0, 0, 0, 0, 0, 0, 0, 0, -13, 1, 1, 0]], [2], [3]], [[[1000000, 999999, -123456, -987654, 11111, -22222, 3333, 10, -4444, 16, 666, -77, 9, -7777, 88, -4444, -4444, 666]], [10], [17]], [[[1111, 2222, -3333, 4444, -5555, -7777, -7770, -5550, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, -9990]], [8], [18]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -6000000006, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000005]], [8], [12]], [[[-1, 2000000002, 0, -123456789, 123456789, 0, -1]], [2], [3]], [[[2222, -3333, 4444, -5555, -12, -7776, 13, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 2220, 6660, -7770, 8880, -9990, 8888, -3333]], [10], [21]], [[[5, -999999994, 5000000005, 5, 2000000001, -4000000004, 5000000005, -6000000006, 6660, 5]], [7], [8]], [[[-9999, -12, 2222, -3333, 4444, -5555, -12, -7777, -999, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 555]], [10], [24]], [[[-987654320, -4444, -987654320]], [0], [3]], [[[987654322, 123456789, -123456789, 123456789, -123456789]], [3], [5]], [[[1000000001, -999999994, -123456790, 8, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 2000000000, 5000000005]], [7], [10]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -199, -99, -9, 3, -199, -123456788, 16]], [21], [25]], [[[1, 2, 3, 4, 5, 123, 7, 8, 9, -7769, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [19], [22]], [[[-10000, 2, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999]], [11], [14]], [[[-987654321, 14, -123456789, 123456789]], [2], [4]], [[[-987654321, 987654321, 1, -123456789, -123456789, 123456789]], [3], [6]], [[[1000000002, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -6000000006, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000005, 2000000001]], [9], [13]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -3333, 6660]], [10], [19]], [[[5, -999999994, 5000000005, 5000000005, 5, 2000000001, -4000000004, 5000000005, -6000000006, 6660, 5]], [8], [9]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006, -999999994]], [3], [5]], [[[-3333, 4444, -5555, -12, -7777, 13, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, 2220, 6660, -7770, 8880, -9990, 8888, -3333]], [10], [21]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 1000000, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666, -22222]], [12], [19]], [[[-999, 1, 2, 3, 4, 5, 6, 8, 9, -99, 99, -3333, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [12], [18]], [[[1, 2, 3, 4, 5, 8, 8, 5000000006, 10, 11, 12, 13, 14, 12, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15]], [21], [22]], [[[1111, 2222, 4444, -5555, -11, -7777, 8888, -4443, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [10], [20]], [[[1000000002, -999999994, -123456790, 8, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 2000000000, 5000000005, 1000000002]], [8], [11]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000005]], [8], [12]], [[[-987654320, 987654323, 987654321, -123456789, -123456789, 123456789]], [3], [6]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, 4440, -5550, -7770, 8880, -9990, -999999993, 2220]], [9], [17]], [[[-987654321, 987654321, 3333, -123456789, 123456789, -123456789]], [3], [6]], [[[-9999, 2222, -3333, 4444, -5555, -12, -7777, 13, 8888, -9999, 1110, -7776, -7769, 2220, -3330, 4440, 2220, 6660, -7777, 8880, -9990, 8888]], [11], [22]], [[[1000000, 999999, 1111, -123456, 5000000005, -4443, -987654, -123457, 11111, -22222, 3333, -4444, 555, 666, -77, -999999997, 0, 9, -4444]], [9], [17]], [[[-987654322, 987654321, -123456789, 123456789, -123456789]], [2], [5]], [[[6660, -987654321, 987654323, 6659, 987654321, -123456789, -123456789, 123456789, 123456789]], [6], [9]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 11, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [19], [20]], [[[1111, 2222, -3333, 4444, -5555, -7777, -7770, -5550, 8889, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, -9990]], [8], [18]], [[[1, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14]], [20], [21]], [[[1000000, 999999, -888888, -123456, -987654, -3333, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111]], [9], [18]], [[[-987654321, 14, -987654322, -123456789, 123456789]], [2], [5]], [[[1111, -3333, 4444, -5555, -7777, 8889, -9999, 1110, 2220, -3330, 4440, -5550, -7770, 8880, -9990, 8889]], [8], [16]], [[[1, 2, 3, 4, 5, 123, 7, 8, -7769, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [18], [21]], [[[-9999, 2222, -3333, 4444, -5555, -12, -7777, 13, 8888, -9999, 556, 1110, -7776, -7769, 2220, -3330, 4440, 2220, 6660, -13, -7770, 8880, -9990, 8888]], [12], [24]], [[[-1, -10, 10, -11, 555, -45, -990, -1000, 100, 432, 10, 20, 30, 666, 777, -10000, 123456789, 556, -990]], [11], [12]], [[[1, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, -199, -9, -9, 14]], [19], [20]], [[[1111, 2222, -3333, 4444, -5555, -7777, -7770, -5550, 8888, -9999, 1110, 2220, -3330, 4440, 2000000002, -5550, 6660, -7770]], [9], [18]], [[[-9999, -12, 2222, -3333, 4444, 8881, -5555, -12, -7777, -999, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 555, 8888]], [12], [25]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -77, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99]], [13], [18]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006, -999999994, 5000000005]], [4], [6]], [[[-123456789, 100, 987654322, 9999, 987654321, -123456789, -987654322, -123456789, 987654321]], [5], [9]], [[[987654322, -12, -123456788, -123456789, 123456789, 987654321, -12]], [3], [7]], [[[-999999994, -999999998, -999999997, -999999996, -999999995, -999999994, -999999993, -999999992, -999999991, -999999990, -999999994]], [0], [11]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, -3333]], [10], [20]], [[[1, 2, 3, 4, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 9998, 123, -1111111, -99, 1]], [13], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 665, 88, 9, -4444, -4444, 9]], [9], [16]], [[[-123456789, 987654321, -7770, 987654322, 9999, 987654321, -123456789, -987654322, -123456789, 987654321]], [5], [10]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111, -888888]], [9], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 665, -77, -77, 88, 9, -4444, -4444, 9]], [9], [16]], [[[-987654321, 123456789, 987654321]], [2], [3]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -999, 18, 19, 20, -199, 8, -9, -8, 19]], [22], [24]], [[[2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7771, 8880, -9990, 8888, 8888]], [11], [20]], [[[1111, 2222, -3333, 4444, -5555, -7777, -7770, -5550, 8888, -9999, 1110, 2220, -3330, 4440, 2000000002, -5550, 6660, -7770, -3330]], [9], [19]], [[[1000000, 999999, -888888, -123456, -987654, -3333, 11111, -22222, 3333, -4444, 555, 99, 665, -77, 88, 9, -4444, -4444, 11111, -888888]], [10], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444, -77]], [9], [17]], [[[-987654321, -123456789, 123456788, -123456789]], [1], [4]], [[[1, 2, -5555, 3, 4, 2, 5, 665, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, 99, 14, 10]], [23], [25]], [[[1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, -7770, 1109, 6660, -7770, 8880, -9990, 4440]], [12], [21]], [[[987654322, 123456789, -123456789, 123456789, -123456789, 2000000000]], [4], [6]], [[[1000000001, -999999994, -123456790, -999999993, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999993, -999999994, 2000000000, 5000000005]], [6], [11]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99, 1]], [14], [19]], [[[1000000, 999999, -888888, -123456, -4443, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [8], [16]], [[[-99999, 1000000001, 2000000002, 15, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006]], [6], [7]], [[[1111, -10000, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -3333, 2220, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [10], [18]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 2220]], [10], [18]], [[[1111, 2222, -3333, 4444, -5555, -11, -7776, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [10], [20]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444]], [10], [17]], [[[1111, 2222, -3333, 4444, -7777, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -22222, -7770, 8880, -9990, -7770, 4444]], [9], [18]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888, -9990, -9999]], [11], [22]], [[[1, 2, 3, 4, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 1109, -99999, 9998, 99999, -1111111, -99, 1]], [14], [20]], [[[1, 2, 3, 8, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -9999, 16, 17, 18, 19, 17, 20, -99, -9, 17, 8, 1, -9]], [24], [25]], [[[16, -987654321, 14, -999999990, -123456789, 123456789]], [3], [6]], [[[1111, 2222, -3333, 4444, -5555, -9999, 1110, -5551, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 4444, -3333]], [9], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444, 88]], [9], [16]], [[[-987654321, 987654322, 123456789, 987654321, -123456789, -123456789, 123456789, 987654321, -123456789, -123456789]], [5], [10]], [[[1111, 2222, -3333, 4444, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -3330, 4440]], [10], [18]], [[[-99, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, -123456, 17, 18, 19, 20, -199, -99, -9, -9, 7]], [19], [21]], [[[-10000, 2, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, 9999]], [12], [15]], [[[1000000, 999999, -888888, -123456, 5000000005, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [9], [15]], [[[1000000, 999999, -888889, -123456, 5000000005, 11111, -22222, 3333, -4444, -76, 555, 666, 88, 9, -4444, -4444]], [9], [15]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -22222, -7770, 8880, -7776, -9990, -7770, 4444, 2220, -22222]], [11], [23]], [[[1000000, 999999, -888888, -123455, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444]], [9], [16]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, -22222, -7770, 8880, -7776, -9990, -7770, 4444, 2220, -22222]], [10], [22]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, -9999, -99, 99, 999, -9999, -123457, -99999, 99999, -1111111]], [10], [15]], [[[-999999997, 2000000002, 1111, 15, 3000000003, -6000000006]], [4], [5]], [[[-987654321, -123456789, 987654321, -123456789, 123456789]], [2], [5]], [[[1111, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 4443, -5550, 6660, 8880, -9990, -3333, 8880, 4444, 8880, 4444]], [13], [21]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, 4444, 6660]], [12], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 555, 665, -77, -77, 88, 9, -4444, -4444, 9]], [9], [15]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, 100, 123, -123456790, 432, 10, 20, 123, 30, 666, 777, -10000, 123456789]], [12], [16]], [[[1111, 2222, -3334, 4444, -5555, -7777, 8888, -10000, 1110, 2220, 4440, -5550, -7770, 8880, -5554, -9990]], [8], [15]], [[[1111, 2222, 4444, -5555, -7777, -7770, -5550, 8888, -9999, 1110, 2220, -3330, 4440, -5550, -22222, 6660, -7770, 8880, -9990, 2220]], [10], [20]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14, 17, 2]], [23], [25]], [[[1111, 2222, -3333, 4444, -7777, 8888, -9999, 1111, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -999999998, 8880, -9990, 8888]], [11], [19]], [[[1111, 2222, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [9], [16]], [[[1, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, -199, -9, -9, 14, -9]], [19], [20]], [[[1111, 2000000001, 2222, 4444, -5555, -7770, -5550, 8888, -9999, 1110, 2220, -3330, -5550, -22222, 6660, -7770, 8880, -9990]], [9], [18]], [[[1000000, 999999, -888888, -123456, -987654, -4444, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444]], [11], [20]], [[[6660, -987654321, 987654323, 99, -123456789, -123456789, 123456789, 123456789]], [5], [8]], [[[-199, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20]], [20], [22]], [[[1111, 2222, -3333, 4444, -5555, 8888, -9999, 1110, -5551, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 4444, -5550]], [10], [19]], [[[1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20, 8]], [22], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444, 667, 11111, 666, 555, 9, 999999, -888888]], [15], [23]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789, -990]], [12], [15]], [[[6660, -987654321, 987654323, 987654321, -123456789, -99, -123456789, 123456789, 987654321, 123456789]], [6], [9]], [[[100, -123456790, 987654322, 9999, 987654321, -123456789, -987654322, -123456789, 987654321]], [5], [9]], [[[1, 10, 3, 4, 5, 123, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 18, 19, 20, -199, -99, -9, -9, -199]], [21], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -123457, -77, 9, 88, 9, -4444, -4444, 667, 11111, 666, 555, 9, 999999, -888888]], [14], [23]], [[[1, 2, 3, 4, 5, 6, 7, 8, 3333, -99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99]], [12], [17]], [[[-999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 5, -999999994]], [4], [7]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999995, -999999994, -999999993, 2000000000, 5000000005]], [6], [11]], [[[-999999994, 2000000001, 5000000005, -999999994, -6000000006, -999999994, -999999994, 5000000005]], [3], [7]], [[[1111, 2222, 4444, -5555, -7777, -7770, -5550, 8888, -9999, 1110, 2220, -3330, 4440, -5550, -22222, 6660, -7770, 8880, -9990, 2220, -9990]], [10], [21]], [[[1111, 2222, -3333, 4444, -5555, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -22222, 5000000006, 8880, -7776, -9990, -7770, 4444, 2220, -22222, 4440]], [13], [24]], [[[-1, -10, 10, -11, -12, 554, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789, -991, 797]], [13], [17]], [[[1110, 2222, -3334, 4444, -5555, -7777, 8888, -9999, 1110, 2220, 4440, -5550, -7770, 8881, -5554, -9990]], [8], [16]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 11, 13, 14, 15, 16, 17, 18, 8881, 19, 20, -199, -99, 20, -9, -99]], [21], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20, -9]], [21], [22]], [[[1, 2, 1111, 3, 8, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -9999, 16, 18, 19, 17, 20, -99, -9, 17, 8, 1, -9]], [24], [25]], [[[1, 2, 3, 88, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 17, 20, -199, 665, -9, 19]], [23], [24]], [[[987654322, 123456789, -123456789, 123456789, 12, -123456789, -123456789]], [4], [7]], [[[1111, 2222, -3333, 4444, -5555, -11, -7776, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -7776, -9990]], [10], [21]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000004, 2000000001]], [9], [13]], [[[-987654321, 987654320, 987654321, -123456789, 123456789]], [3], [5]]], [], [], [[[[-10, -11, -12, 13, 14, -20]], [4], [3]], [[[123, 456, 789, -987, -654, -321]], [6], [5]], [[[100, -250, 375, 500, -750]], [5], [4]], [[[101, -202, 303, -404, 505, -606]], [6], [3]], [[[101, 303, -404, -606]], [4], [2]], [[[-5555, -12, 101, -202, 303, -404, 505, -606]], [8], [5]], [[[100, -250, 375, -750]], [4], [3]], [[[101, -202, 303, -403, 505, -606]], [6], [3]], [[[15, -10, -11, -12, 13, 14, -20]], [5], [4]], [[[-1, -404, 30, 0, -20, 0]], [2], [1]], [[[99, -250, 375, -750]], [4], [3]], [[[303, -404, -606]], [3], [1]], [[[303, -405, -405, -606]], [4], [3]], [[[101, -987, 303, -404, -606]], [5], [3]], [[[100, 790, 101, -202, 303, -403, 506, -606]], [8], [5]], [[[101, -202, 303, 505, -606]], [5], [3]], [[[101, -202, 303, -403, -606]], [5], [2]], [[[99, 999, -202, 30, -5555, -202]], [6], [4]], [[[101, -202, 303, -404, 505, 302, -606, 302]], [8], [5]], [[[-10, -11, -12, 0, 14, -20]], [3], [2]], [[[-2, -20, 30, 0, 505, -11]], [3], [2]], [[[101, 101, -40, 303, -404, -606]], [5], [3]], [[[99, 999, -202, 30, -5555, -202, 30]], [7], [5]], [[[15, -10, -11, -12, 13, 14]], [5], [4]], [[[101, -1, -40, 303, -404, -606]], [4], [2]], [[[123, 456, 789, -987, -654, -5555, -321]], [7], [6]], [[[101, 303, -404, 505, -606]], [5], [3]], [[[-10, -11, 505, 0, 14, -20]], [3], [2]], [[[-1, -404, 30, 999, -20, 0]], [3], [2]], [[[-1, -404, 30, 999, -20, 0, 0, 999]], [4], [3]], [[[101, -202, 303, -404, -606]], [5], [2]], [[[101, -404, 304, -404, 505, -606]], [6], [3]], [[[99, 999, -202, 30, -750, -5555, -202, 30]], [8], [5]], [[[101, -202, 303, -403, -606, 101]], [6], [3]], [[[-405, 303, -405, -405, -606]], [5], [4]], [[[101, -11, -202, -606, 505, -606]], [6], [2]], [[[15, -10, -11, -12, 14, -20]], [4], [3]], [[[-1, -404, 999, 30, 999, -20, 0, 0, 999, 0]], [5], [4]], [[[999, -1, -404, -750, 999, -19, 0]], [5], [3]], [[[99, -250, 375, -750, -750]], [5], [3]], [[[-251, 99, -250, 375, -750]], [5], [4]], [[[99, 999, -202, 30, -5555, -202, 30, -202]], [8], [5]], [[[15, -10, -11, -12, 14, 14, -20]], [5], [4]], [[[-10, -11, -12, 13, 14, -20, 14]], [5], [4]], [[[-10, 30, -11, 505, 0, 14, -20]], [4], [3]], [[[-405, 506, 303, -405, -405, -606]], [6], [5]], [[[-405, -456, 303, -405, -405, -606]], [6], [5]], [[[101, -202, 303, -404, 505, -605, 302]], [7], [4]], [[[-405, 506, -250, -405, -405, -606]], [6], [5]], [[[99, 999, -250, -202, 30, -5555, -202, 30, 999]], [9], [7]], [[[-605, 303, -405, -405, -5555, -606, -606]], [7], [4]], [[[-1, -404, 30, 999, -20, 0, 0, -19, 999]], [5], [4]], [[[101, -11, -202, -606, 666, -606, 666]], [7], [3]], [[[-1, -404, 14, 30, 999, -20, 0, 0, -19, 999]], [6], [5]], [[[-12, -201, 101, -202, 303, -404, 505, -605, 302]], [9], [5]], [[[100, -605, 790, 101, -202, 303, -403, 506, -606]], [9], [5]], [[[-405, 506, 303, -405, -405, -606, -405]], [7], [6]], [[[99, 999, -203, 30, -5555, -202, 30, -202]], [8], [6]], [[[999, -202, 30, -5555, -202]], [5], [3]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9]], [14], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9]], [22], [21]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [18], [17]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006]], [6], [4]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [16], [14]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, 999999]], [15], [14]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 999999, -22222, 3333, -4444, 555, 666, -77, 88, 9, 999999]], [16], [15]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [17], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [14], [13]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [16], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [23], [22]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [18], [16]], [[[1000000, 999999, 14, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [14], [13]], [[[1000000001, 2000000002, 3000000003, -4000000004, -6000000006]], [5], [3]], [[[1000000, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [13], [12]], [[[-1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [17], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, 3333]], [15], [14]], [[[-1, -10, -9999, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [20], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [17], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999]], [13], [12]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333]], [14], [13]], [[[1, 2, 3, 4, 5, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [17], [16]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, -10]], [18], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [19], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777]], [20], [17]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10]], [16], [14]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 88]], [12], [11]], [[[1000000, 999999, -888888, -123456, 2000000002, 11111, 3333, -4444, 666, -77, 88, 88]], [12], [11]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [18], [16]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [18], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333, 999999]], [15], [14]], [[[1000000, -1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777]], [17], [15]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [17], [15]], [[[1000000, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [14], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 9999]], [19], [18]], [[[-1, -10, 10, -11, -12, 555, 796, 123456789, -990, -1000, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [17], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123]], [21], [18]], [[[1, 2, 3, 4, 5, 6, -7770, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [18], [17]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 999]], [18], [17]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 777, -10000, 123456789, 777, 777]], [17], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 999998, -987655, 9, -987654, -987654]], [18], [17]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006]], [8], [5]], [[[1000000000, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 1000000000]], [9], [6]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777]], [17], [15]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999]], [19], [18]], [[[1000000, 1000000000, 999999, 14, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [15], [14]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [17], [15]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002, 2000000002]], [10], [7]], [[[-1, -10, -11, 19, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [17], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [23], [22]], [[[1, -100, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [19], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 1000000, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [24], [23]], [[[1000000001, 2000000002, -4000000004, -6000000006]], [4], [2]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 9999]], [20], [19]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [18], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [22], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [22], [19]], [[[1000000, 987654321, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [15], [14]], [[[1000000, 999999, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999]], [12], [11]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, -10]], [17], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, 666, -77, 88, 88, -888888]], [12], [11]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655]], [14], [13]], [[[1000000001, 2000000002, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002, 2000000002]], [11], [8]], [[[1000000, 999999, 100, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999, 999999]], [13], [12]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, 10, 20, -3333, 30, -100, 777, -10000, 123456789, 777]], [18], [16]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777]], [18], [16]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, -77, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [19], [16]], [[[1000000, 999999, -888888, -123457, -987654, 11111, 3333, 666, -77, 88, 88, -888888]], [12], [11]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 7]], [18], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [19], [16]], [[[-10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10]], [15], [13]], [[[1000000, 1000000000, 999999, 14, -123456, -987654, 11111, -123457, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [16], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 555, 666, -77, 88, 9, 999999]], [14], [13]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [20], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 777, 777]], [20], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777]], [21], [18]], [[[1, 2, 3, 4, 5, 6, -999999993, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [23], [22]], [[[1000000, 8, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [17], [16]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[-1, 0, -10, 10, -11, -12, 555, 796, 123456789, -990, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [17], [15]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -999999991, 99999, -1111111]], [20], [19]], [[[1000000, 999999, -888888, -123457, -987654, 11111, 3333, 666, -77, 88, 88, 100]], [12], [11]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002]], [9], [6]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777]], [22], [19]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18, 8, 5]], [25], [24]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [22], [19]], [[[1000000001, 2000000002, -4000000003, -4000000004, -6000000006, -6000000006]], [6], [2]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 999999, -22222, -4444, 555, -77, 88, 9, 999999]], [14], [13]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 433, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [18], [16]], [[[1000000, 987654321, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, -987654, 88, 9, 999999]], [16], [15]], [[[-1, -10, -990, -11, 2219, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [22], [19]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, 2220, 100, -199, 432, 10, 20, -3333, 30, -100, 777, -10000, 123456789, 777]], [19], [17]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999]], [20], [18]], [[[1000000, 999999, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999, 9]], [13], [12]], [[[1000000001, 2000000002, -4000000003, -4000000004, -6000000006, 6, -6000000006, 1000000001]], [8], [4]], [[[1000000, -888888, -123456, 2000000002, 11111, 3333, -4444, 666, -77, 88, 88]], [11], [10]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -22222]], [17], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 555, 666, -77, 88, -987655, 11111, -888888]], [15], [14]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 666, 777, -10000, 19, 123456789, 777, -10]], [17], [15]], [[[1000000001, 2000000002, 3000000003, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006]], [8], [5]], [[[1000000, -1, -10, -11, -12, -9999, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777]], [18], [16]], [[[1000000, -888888, -123456, 11111, -22221, 3333, -4444, 666, -77, 88, 9, 999999]], [12], [11]], [[[-22221, 1000000001, 2000000002, 3000000003, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -6000000006]], [10], [6]], [[[1000000, 999999, -888888, -123456, -987654, -22222, 3333, -4444, 555, 666, -77, 88, 999998, -987655, 9, -987654, -987654]], [17], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, 666, -77, 88, 88, -22222, -888888, 88]], [14], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [18], [17]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002, 2000000002, 2000000002]], [11], [8]], [[[-1, -10, -11, 31, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [18], [16]], [[[1000000, -888888, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [12], [11]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [17], [15]], [[[1000000001, 2000000002, 3000000003, -4000000004, -6000000006, 1000000001]], [6], [4]], [[[1000000, 1000000000, 999999, 14, -123456, -987654, 11111, -123457, 3333, -4444, 555, 666, -77, 88, 9, -987654, 1000000000]], [17], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999, -123456]], [15], [14]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [22], [19]], [[[1, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1000000001, -98, 3000000003, -6000000006, -98]], [5], [2]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, -987655, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [17], [15]], [[[665, 1000000, 999999, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999, 999999]], [14], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 5]], [20], [19]], [[[1000000, 999999, -888888, 2222, -123456, -987654, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [15], [14]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -990, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [19], [18]], [[[-1, -10, -11, -12, 555, 797, -45, 667, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777]], [18], [16]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002, 1000000001]], [9], [7]], [[[1000000001, 2000000002, 2000000002, -4000000003, -4000000004, -6000000006, -6000000006]], [7], [3]], [[[-1, -10, -987654321, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [23], [20]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 3000000003]], [7], [5]], [[[-1, -10, -11, 31, -12, 555, 797, -45, -990, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [18], [16]], [[[-1, 0, -10, 10, -11, 555, 796, 123456789, -990, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [16], [14]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777]], [21], [18]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, -990]], [22], [18]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777]], [22], [19]], [[[1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [22], [21]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 122, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [22], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789, 777]], [23], [20]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 778, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [18], [16]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [19], [18]], [[[1000000, 999999, -888888, 2222, -123456, -987654, 3333, -4444, 554, 666, -77, 88, -987655, 9, -987654, 999999]], [16], [15]], [[[-1, -10, -987654321, -990, -11, -12, -999, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [23], [20]], [[[999998, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333, 999999, 11111]], [16], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 797, 777, 777]], [20], [17]], [[[-6000000006, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 7]], [20], [18]], [[[-1, -10, -987654321, -990, -11, -12, -999, -45, -990, -1000, 999, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [23], [20]], [[[1000000, 999999, -888888, -4443, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 88]], [13], [12]], [[[0, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 100]], [19], [17]], [[[999999, 999999, -888888, -123456, 2, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [14], [13]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 88, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 10]], [20], [18]], [[[-1, 10, -11, -12, 555, 797, -45, -990, -1000, -987655, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [17], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, -990]], [22], [18]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [21], [19]], [[[1000000, 999999, -888888, -987654, 11111, -123456, 3334, -4444, 666, -77, 88, 88]], [12], [11]], [[[-1, -10, 10, 665, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, -77, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [20], [17]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111]], [19], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 20, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [17], [14]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1]], [18], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30]], [22], [19]], [[[1, 11, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [20], [19]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002]], [10], [8]], [[[1000000, -888888, -123456, -987654, 11111, -22222, 3333, 555, 666, -77, 88, 9, 999999]], [13], [12]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, -99999, 666, -77, 88, 9, 3333]], [14], [13]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [17], [15]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, 99999]], [20], [19]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 999]], [21], [19]], [[[-1, -2, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -2, -10000, 123456789]], [16], [14]], [[[-1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, -99, 20, 30, 4, 666, 777, -10000, 123456789, 777]], [17], [14]], [[[-1, -990, -11, 2219, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [22], [19]], [[[1000000, 999999, 14, -123456, -987654, 11111, -4444, 3333, -4444, 555, 1000001, 666, -77, 88, 9, -987654]], [16], [15]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777]], [21], [18]], [[[999998, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333, 11111]], [15], [14]], [[[1, 2, 3, 4, 5, 6, 7, 99999, 9, -1000000000, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [17], [16]], [[[-1, -10, -990, -11, -12, 797, 8880, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 777, 777, -45]], [22], [19]], [[[1, 2, 3, 5, 6, 7, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 9999]], [19], [18]], [[[-1, -2, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -2, -10000, 123456789, 555]], [17], [15]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111, 2]], [20], [19]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, 9, 999999]], [15], [14]], [[[999999, 999999, -888888, -123456, -987655, 2, 3333, -4444, 555, 666, -77, 88, -987655, -987654]], [14], [13]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 3334, 777, 777]], [20], [17]], [[[88, 999998, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [16], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 797, 777, 777, 123]], [20], [17]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 1000000, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18, -199]], [25], [24]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30, 777]], [23], [20]], [[[-1, -10, 10, -11, -12, 555, 797, 99, -45, -990, -1000, 100, -98, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [22], [19]], [[[-1, 10, -11, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [16], [14]], [[[1000000001, 3000000003, -4000000004, -6000000005, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [11], [8]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12]], [20], [18]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, -4444, 555, 666, -77, 88, 9, 999999]], [14], [13]], [[[1000000, 8, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 666, 88, -987655, 9, -987654, -987654, 11111]], [19], [18]], [[[2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 999]], [20], [18]], [[[1000000001, 3000000003, -4000000004, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [11], [9]], [[[1, 1, 10000, 2, 3, 4, 5, 19, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999, 3333]], [15], [14]], [[[1, 2, 10000, 2, 3, 4, 5, 19, -100, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111, 2]], [19], [18]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12]], [19], [18]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 100]], [17], [15]], [[[1000000001, 2000000002, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002]], [10], [7]], [[[-1, -10, -11, -12, 555, 797, -45, 667, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, -10000]], [18], [16]], [[[1000000, 8, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 2000000002, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [18], [17]], [[[-1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797]], [18], [16]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10]], [19], [17]], [[[665, 1000000, 999999, -123456, -987654, 11111, 3333, -4444, -77, 88, 9, 999999, 999999]], [13], [12]], [[[-1, -10, -11, -12, 555, 797, 99, -45, -990, -1000, 100, -98, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12, -990]], [22], [18]], [[[1000000, 0, -10, -11, -12, 555, 797, -45, -990, -1000, 100, -1, 123, 432, 10, 20, 30, 666, 777, -10000, -3332, 777, 777]], [18], [16]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 88, 123, 432, 10, 20, 30, 666, -5555, -10000, 123456789, 777, 777, 10]], [20], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 432, 19, 20, -199, -99, -9, 9]], [24], [23]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 13, 14, 15, 17, 18, 19, 20, -199, -99, -9, 18, 18]], [23], [22]], [[[1000000, -888888, -987654, 11111, -22222, 3333, 4445, 666, -77, 88, 9, 999999]], [12], [11]], [[[1000000001, 3000000003, -4000000003, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [11], [9]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, 9, 999999, -4444]], [16], [15]], [[[1000000, -888888, -987654, 11111, -22222, 3333, -4444, 666, -77, -22223, 88, 9, 999999]], [13], [12]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -990, 1110, 2219, -3330, 4440, -5550, 6660, -7770, -3331, 8880, -9990]], [20], [19]], [[[1000000001, 2000000002, 3000000003, -4000000004, -4000000004, -6000000006, 2000000002, -6000000006]], [8], [4]], [[[1000000, -888888, -123456, -987654, 11111, 999999, -22222, -4444, 555, -77, 88, 9, 999999]], [13], [12]], [[[1, 2, 10000, 2, 3, 4, 5, 19, -100, 8, 9, -99, 99, 999, -9999, 9999, -999999991, -123456789, -1111111, 2]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 999999]], [15], [14]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 3333, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1]], [19], [17]], [[[1000000, 999999, -888888, -123456, -987654, 778, -22222, 3333, 555, 666, -77, 88, -987655, 11111, -888888]], [15], [14]], [[[2000000002, -6000000005, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000003, 2000000002, 2000000002, 2000000002]], [12], [8]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, -11]], [18], [15]], [[[1000000001, 3000000003, -4000000003, -888888, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, -4000000003, 2000000002]], [12], [9]], [[[1000000001, 3000000003, -4000000004, -888887, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002]], [10], [8]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 797, 777, 777, -990, 797]], [24], [20]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 433, 432, 10, 20, 30, 666, 6666, 777, -10000, 123456789, 778]], [19], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, -10000]], [19], [16]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, -99, 5]], [20], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333]], [14], [13]], [[[1000000, 999999, -888888, -123456, -987654, -22222, 3333, -4444, 555, 666, -77, 88, 999998, -987655, 778, -987654, -987654, -77]], [18], [16]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 5, -9999]], [22], [20]], [[[-1, -10, -990, -12, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 777, 797]], [23], [21]], [[[-1, -10, 31, -12, 555, 797, -45, -990, -1000, 100, -1111111, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [18], [17]], [[[-1, -11, 10, -11, -12, 555, 797, 123, -45, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12, 797]], [21], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, 1000000]], [15], [14]], [[[999999, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [14], [13]], [[[1, 10000, 2, 3, 4, 3, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [20], [19]], [[[999999, -888888, -123456, 2, 3333, -4444, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [14], [13]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 797, 777, 777, 777]], [21], [18]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777, -45]], [23], [20]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 999999, 3333]], [13], [12]], [[[1000000001, 2000000002, -4000000003, -4000000004, -6000000006, 6, -6000000006]], [7], [3]], [[[1000000, -888888, 11110, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [12], [11]], [[[1000000, 999999, -888888, -123456, -987654, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 778, -987654, -987654, -77]], [17], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, -4444]], [15], [14]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1]], [17], [15]], [[[-1, -999999999, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, -12, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30, 777]], [25], [22]], [[[-1, 10, -11, -12, 555, 797, -45, -990, -1000, -987655, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [16], [14]], [[[8888, 999999, 14, -123456, 11111, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [13], [12]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18, 8, 5, 20]], [26], [25]], [[[-1, -10, 10, -11, 778, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 777, -10000, 123456789, 777, 777]], [18], [16]], [[[0, -1, -10, 10, -11, -12, 555, 797, 777, -45, -990, -9990, -1000, 100, 123, 432, 88, 30, 777, -10000, 123456789, 777, 777]], [18], [16]], [[[-1, -10, 10, -11, -12, 20, 555, 797, -45, 3334, -1000, 100, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [21], [20]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 18, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [18], [17]], [[[1, 2, 5000000005, 3, 4, 5, 6, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999]], [19], [18]], [[[999998, 1000000, 999999, -888888, -987654, 3333, -4444, 555, 666, -77, 88, 9, 3333, 11111, 999998, -77]], [16], [14]], [[[-1, -10, 433, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [21], [19]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 3000000003, 2000000002]], [7], [6]], [[[-22221, 1000000001, 2000000002, -999999990, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -6000000006, -4000000004]], [11], [6]], [[[-1, -10, -990, -11, -12, 797, 16, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 3334, 777, 777]], [20], [17]], [[[8888, 999999, 14, -123456, 11111, 3333, -4444, 11112, 555, 666, -77, 88, 9, -987654]], [14], [13]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, 99999, 1]], [21], [20]], [[[0, -1, -10, 10, -12, 1000000001, 555, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1, 30]], [18], [17]], [[[1000000, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [13], [12]], [[[1000000, 999999, -888888, -123456, -987654, 4440, 3333, 666, -77, 88, 88, -22222, -888888, 88]], [14], [13]], [[[1, 2, 10000, 2, 3, 4, 5, 19, -9, 8, 1111, 9, -99, 99, -999, 999, -9999, 9999, -999999991, 99999, -1111111, 3, 19]], [22], [21]], [[[1000000001, -98, 3000000003, -6000000006, -97, -98]], [6], [2]], [[[1, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111]], [18], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 797, 777, 777, -990, 797, 797]], [25], [21]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, -1, 999999, -123456, -4444]], [16], [15]], [[[1000000, 999999, -888888, -123456, 2000000002, 11111, 3333, 666, -77, 88, 88]], [11], [10]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777, -45]], [22], [19]], [[[-123456789, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111, 2]], [20], [19]], [[[-1, 10, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [15], [14]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 776, 797, 777, 777, 123, 797]], [22], [19]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, 4]], [19], [18]], [[[-1, -10, -11, 31, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, -10000]], [18], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 2219, 777, 777, 797, 777, 777, 100]], [23], [20]], [[[-1, -10, -990, -11, 2219, 797, -45, -990, -1000, 2000000003, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, -10, 777, 123, 123456789]], [23], [20]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, -11, 123456788]], [22], [18]], [[[1000000, 999999, 14, -123456, -987654, 11111, -4444, 3333, 122, -4444, 555, 1000001, 666, -77, 88, -987654]], [16], [15]], [[[1000000, -1, -10, -11, -12, -9999, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777, -45]], [19], [17]], [[[-1, -10, 10, -11, -12, 555, 797, 11, -45, -990, -1000, 100, 88, 123, 432, 10, 20, 30, 666, 777, -10000, 778, 777, 10]], [20], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9, 10]], [24], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 87, -987655, 999999]], [15], [14]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 122, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [24], [23]], [[[1000000001, 2000000002, 1000000001, 2000000002, -4000000003, -4000000004, -6000000006, -6000000006]], [8], [4]], [[[9, 1000000, 8, -888888, -123456, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654, -123456]], [18], [17]], [[[-1, -999999999, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 9, -12, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30, 777]], [25], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [24], [23]], [[[1111, -77, 2223, -3333, 4444, -5555, 6666, -7777, 8888, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 1111, 8888, 6660]], [22], [21]], [[[8888, -888888, -5555, 14, -123456, 11111, 3333, -4444, 11112, 555, 666, -77, 88, 9, -987654]], [15], [14]], [[[-22221, 19, 2000000002, -999999990, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -6000000006, -4000000004]], [11], [6]], [[[1000000, 0, -10, -11, -12, 30, 555, 797, -45, -990, -1000, 100, -1, 123, 432, 10, 20, 30, 666, 777, -10000, -3332, 777, 777]], [19], [17]], [[[0, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 101]], [19], [17]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [22], [21]], [[[1000000001, 3000000003, -4000000003, -888888, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, -4000000003, 2000000002]], [11], [9]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, -10000, 123456789, 777]], [16], [14]], [[[88, 999998, 18, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [17], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 777, 777, 123, 123456789, 777, -12]], [24], [21]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 797, 777]], [19], [16]], [[[1000000001, 3000000003, -4000000004, -888887, 5000000005, -3333, 2000000002, 2000000002, 2000000002]], [9], [8]], [[[999998, 18, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [16], [15]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 666]], [18], [16]], [[[1000000, 999999, -123456, -987654, 11111, 3333, -4444, -99999, 666, -77, 88, 9, 3333, -888887, 9]], [15], [14]], [[[1000000, -888888, -987654, 11111, -22222, 3333, 666, -77, -22223, 88, 9, 999999]], [12], [11]], [[[1, 2, 3, 4, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 9999]], [18], [17]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, -4444, 11111]], [16], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 1000001, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [24], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 999999, -4444, -77]], [17], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 797, 777, 777, -999999991]], [21], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [17], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 123456788, 777, 777, 797, 777, -11, 123456788]], [20], [16]], [[[1, 2, 3, 4, 7, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9]], [23], [22]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 101, 777, 777, 797, 777, 777]], [22], [19]], [[[0, -1, -10, 10, -11, 5, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -999999998, -10000, 123456789, 777, 777, -1]], [20], [18]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 797, 777, 777, -990, 797, 797, -1000]], [25], [21]], [[[1000000, 999999, -888888, -123456, -987653, 11111, -22222, 3333, -4444, -77, 666, -77, 999999, 3333, -77]], [15], [12]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 29, 666, 777, -9999, 798, 123456788, 777, 777, 797, 777, 777]], [23], [20]], [[[0, -1, -10, 10, -11, -12, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1]], [16], [14]], [[[-1, -10, -990, -11, -12, 797, 1112, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, -990]], [23], [19]], [[[-1, -10, 10, -11, -12, -99, 555, 797, -45, -990, -1000, 100, 123, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 29, 123456789, 777, 10, -1, -12]], [23], [20]], [[[-1111111, 1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, 999, -9999, -99999, 99999, -1111111, 99999]], [20], [19]], [[[-1, -10, -11, 19, 555, 797, -45, -990, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [17], [15]], [[[-22221, 1000000001, 2000000002, 3000000003, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -123456789]], [10], [7]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -990, 1110, 2219, -3330, 4440, -5550, 6659, -7770, -3331, 8880, -9990]], [20], [19]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000003, -6000000006, 2000000002, 2000000002]], [10], [7]], [[[-1, -999999991, -11, 19, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 3, -10000, 123456789, 777, 777, 432]], [19], [17]], [[[1, 2, 3, 4, 5, 6, 7, 8, 1000001, 667, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [25], [24]], [[[-1, -10, -11, 31, -12, 555, -888887, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, 123456789, 777, 777]], [18], [16]], [[[1000000, -1, -10, -11, -12, -9999, 555, 797, -45, -990, -1000, 100, 555, 123, 432, 10, 20, 30, 666, 777, 433, -10000, 777]], [19], [17]], [[[1000000, 999999, -888888, -987654, 11111, 999999, -22222, 3334, -4444, 555, 666, -77, 88, 9, 999999]], [15], [14]], [[[-1, -10, 10, -10, -12, 555, 797, 123456789, -990, -1000, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [16], [15]], [[[-987656, -987655, -1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 778, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [20], [18]], [[[-1, -990, -11, 2219, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 19, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [23], [20]], [[[1000000, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, 9, -987654, 555]], [14], [13]], [[[1000000, -888888, -123456, -987654, 11111, -22222, 3333, 666, -77, 88, 9, 999999, -22221, -888888]], [14], [13]], [[[1, 1, 10000, 2, 3, 4, 5, 19, 8, 9, -99, -99, 99, -999, 999, -9999, 9999, 99999, -1111111]], [19], [17]], [[[1000000, 999999, -888888, -123456, -987654, -999999999, 11111, -22222, 3333, -999999996, -4444, 666, -77, 88, 9, 999999, -123456]], [17], [16]], [[[-1, -10, -990, -11, -12, 797, 16, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 3334, 777, 777, -1000, -10]], [20], [17]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 432]], [17], [15]], [[[-1, -11, 10, -11, 554, 797, 123, -45, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12, 797]], [20], [18]], [[[1000000, -888888, -987654, 11111, -22222, 3333, 666, -77, 88, 9, 999999]], [11], [10]], [[[-1, -10, 10, -11, -12, 555, 797, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, -10]], [16], [14]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, 777]], [19], [17]], [[[1000000001, 3000000003, -4000000003, -888888, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, -4000000003, 2000000002, 2000000002, 1000000001]], [13], [11]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, -987654319, 777, 797, 777, 777, 123, -990, 10]], [23], [19]], [[[-1, 10, -11, -12, 797, -45, -990, -1000, -1000, 123, 432, 20, 10, 30, 666, 777, -10000, 123456789, 1000001, 123]], [16], [14]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000003, -22223, -6000000006, 2000000002, 2000000002]], [11], [8]], [[[0, -1, -10, -9, -12, 1000000001, 555, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1, 30]], [17], [16]], [[[1000000, 1000000000, 999999, 14, -123456, -987655, 11111, 3333, -4444, 555, 666, -77, -100, 88, 9, -987654]], [15], [14]], [[[1000000, -1, -10, -9999, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777]], [16], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 20]], [23], [22]], [[[-1, -10, -990, -11, -12, 797, -5555, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 2219, 777, 777, 797, 777, 777, 100, 100, 778]], [25], [22]], [[[-1, -123457, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 797, 797, 777, -990, 797, -990]], [26], [21]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 667, 777, -10000, 123456789, 777, -10]], [16], [14]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 797, 777, 777, -990]], [21], [17]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, -99999, 666, -77, 88, 9, 3333, -888887, 9, 999999]], [17], [16]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, 6659, 2000000002]], [9], [7]], [[[1000000001, 2000000002, 3000000003, 666, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006]], [9], [6]], [[[1000000, 999999, -888888, -5554, -123456, -987654, 666, 3333, -4444, 555, 666, -77, 88, 9, -987654, 555]], [16], [15]], [[[-123456789, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111]], [19], [18]], [[[1000000001, 2000000002, 2000000002, -4000000003, -4000000004, -6000000006, -6000000006, -6000000006]], [8], [3]], [[[-123456789, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -9999, 9999, -999999991, 99999, -1111111]], [18], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 797, 777]], [18], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789, 10]], [23], [20]], [[[1000000001, -98, 3000000003, -6000000006, -98, 1000000001, -98, -98]], [8], [3]], [[[1000000001, 3000000003, -4000000003, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [12], [10]], [[[1, 2, 3, 4, 5, 6, 7, 8, 1000001, 9, 10, 11, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [23], [22]], [[[1000000001, 2000000002, 1000000001, -999999994, 1000000002, -4000000003, -4000000004, -6000000006, -6000000006, 1000000001]], [10], [6]], [[[1000000001, 3000000003, -4000000004, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, -3332, 2000000002]], [11], [9]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -990, 31, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 797, -10]], [20], [18]], [[[1000000, 999999, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, -1, 999999, -123456, -4444]], [15], [14]], [[[88, 999998, 1000000, 999999, 1000000001, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [17], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -7777, -10000, 777, 777, 797, 777]], [19], [16]], [[[1000000, 1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, -4444, 11111]], [17], [16]], [[[1000000001, 2000000002, 13, -4000000004, 5000000005, -6000000006]], [6], [4]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9]], [23], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [16], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444]], [17], [16]], [[[1000000, 999999, -888888, -123456, 5000000005, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [17], [16]], [[[1000000001, 2000000001, 13, -4000000004, 5000000005, -6000000006]], [6], [4]], [[[-1, -10, 10, -11, -12, 555, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [15], [13]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444]], [17], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444]], [18], [17]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9]], [22], [21]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [22], [21]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006]], [6], [4]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, 88, 9, -4444, -4444]], [19], [18]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -999999994]], [7], [5]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [21], [20]], [[[-987654321, 987654322, 123456789, -11, -123456789, -123456789, 987654321]], [7], [6]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, -6000000006]], [6], [4]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444, -987654]], [19], [18]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006]], [7], [4]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [21], [20]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 3000000003]], [6], [5]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14]], [24], [23]], [[[1000000001, -999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994]], [8], [6]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [17], [16]], [[[1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 100, 6660, -7770, -4000000004, -9990]], [18], [17]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, -123456, 17, 18, 19, 20, -199, -99, -9, -9, 7]], [22], [21]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 665, -77, 88, 9, -4444, -4444]], [16], [15]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 5000000005]], [9], [7]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 5, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [23], [22]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, 999, -9999, 9999, -99999, 99999, -1111111]], [16], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 665, -77, 88, 9, -4444, -4444, 9]], [17], [16]], [[[1111, 2222, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [20], [19]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15]], [23], [22]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -999999994, -6000000006, -999999994, -999999994, 5000000005]], [10], [8]], [[[1000000, 999999, -888888, -123456, 5000000005, -4443, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [18], [17]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14, 8]], [25], [24]], [[[1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 100, 88, 6660, -7770, -4000000004, -9990]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111]], [18], [17]], [[[1000000, 999999, -888888, -123456, 5000000005, -4443, -987654, -123457, 11111, -22222, 3333, -4444, 555, 666, -77, -999999997, 0, 9, -4444, -4444]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444]], [20], [19]], [[[1000000001, 2000000002, 15, 3000000003, 5000000005, -6000000006, 3000000003]], [7], [6]], [[[-999, 1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -3333, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [20], [19]], [[[0, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111]], [18], [17]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [22], [21]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [22], [21]], [[[1000000001, 7, 3000000003, -4000000004, 5000000005, -6000000006]], [6], [4]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -99, -9, 17]], [23], [22]], [[[1000000001, -999999994, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 5000000005]], [10], [8]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 2, 30, 666, 777, -10000, 123456789, 432]], [18], [16]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 2000000000, 5000000005]], [12], [10]], [[[-1, -10, 10, -11, -12, 555, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 556, -990]], [17], [14]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 2, 30, 666, 777, -10000, 123456789, 432, -1000]], [18], [16]], [[[5, -999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 5]], [9], [7]], [[[1000000001, 2000000002, 15, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006]], [8], [6]], [[[1, -999999997, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15, 12]], [24], [23]], [[[1000000001, 6666, 13, -4000000004, -6000000006, -4000000004]], [6], [3]], [[[1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -99, -9, 17]], [22], [21]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, 666]], [20], [19]], [[[-1, -10, 10, -11, -12, 555, 1, 797, -45, -990, -1000, 100, 123, 10, 20, 2, 30, 666, 777, 123, 123456789, 432, -1000]], [19], [17]], [[[1000000001, -999999994, 2000000001, 5000000005, -999999994, -6000000006, -999999994, -999999994, 5000000005]], [9], [8]], [[[1000000, 999999, 1111, -123456, 5000000005, -4443, -987654, -123457, 11111, -22222, 3333, -4444, 555, 666, -77, -999999997, 0, 9, -4444, -4444]], [19], [18]], [[[1000000, 999999, -888888, -123456, 5000000005, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444, 88]], [18], [17]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 30, 666, 777, -10000, 123456789, -11]], [16], [13]], [[[-1, -10, 10, -11, -12, 555, -45, -990, -1000, 100, 432, 10, 20, 30, 666, 777, -10000, 123456789, 556, -990]], [16], [13]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 19, 20, -199, -99, -9]], [23], [22]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 2222, 3000000003]], [7], [6]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99]], [20], [18]], [[[1000000001, 2000000002, 3000000003, -6000000006, -6000000006]], [5], [3]], [[[1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -9]], [20], [19]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20]], [23], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111, -4444]], [19], [18]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, -9999, -99, 99, 999, -9999, 9999, -99999, 99999, -1111111]], [16], [15]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 10, 20, 30, 666, 777, -10000, 123456789]], [14], [12]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [17], [15]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -999, 18, 19, 20, -199, -99, -9, -9]], [23], [22]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [17], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666]], [19], [18]], [[[1000000001, 2000000001, 13, -4000000004, 1110, 5000000005, -6000000006]], [7], [5]], [[[1000000001, 2000000002, -9990, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006]], [8], [6]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666, 555, 9]], [21], [20]], [[[1000000001, 1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006]], [8], [5]], [[[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 13]], [23], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 555, 665, -77, 88, 9, -4444, -4444, 9]], [16], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 1000000, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666]], [19], [18]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 5000000006, 2000000000, 5000000005]], [13], [11]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999993, -999999994, 2000000000, 5000000005]], [12], [10]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444, -987654, -987654]], [20], [19]], [[[1000000001, -999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 9]], [9], [7]], [[[1, 2, 3, 4, 5, 6, 7, -6000000006, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [22], [20]], [[[1000000001, 2000000002, 15, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006, 1000000001]], [9], [7]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 123, 30, 666, 777, -10000, 123456789]], [18], [16]], [[[1, 2, 3, 4, 5, 4444, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [23], [22]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -999, 18, 19, 20, -199, -99, -9, -9, 19]], [24], [23]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, -99999, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, 2222, -99999]], [23], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99, 1]], [22], [20]], [[[1, 2, 2000000001, 4, 5, 6, 7, 8, 18, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14]], [24], [23]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -199, -99, -9, 3]], [23], [22]], [[[1000000001, 2000000002, 15, 3000000003, -6000000006, 3000000003]], [6], [5]], [[[-10000, 2, -1, 3, 4, 5, 6, 7, 8, -9999, -99, 99, 999, -9999, 9999, -99999, 99999, -1111111]], [16], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, -4444, 10]], [22], [21]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, -1000, 100, 123, -123456790, 10, 20, 30, 666, 777, -10000, 123456789]], [16], [14]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -45, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9]], [24], [23]], [[[1000000001, 2000000001, 13, -4000000004, 1000000001, 1110, 5000000005, -6000000006]], [8], [6]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -123456790, 432, 20, 30, -11, 666, 777, -10000, 123456789]], [17], [14]], [[[1, 2, 3, 8, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -99, -9, 17, 8, 1]], [26], [25]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, -4444, 10]], [21], [20]], [[[1111, 2222, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, -9990]], [21], [20]], [[[1000000001, 2000000002, 15, 3000000003, -6000000006, 1, 3000000003, -6000000006]], [8], [6]], [[[-987654321, 987654322, 123456789, -987654320, -11, -123456789, -123456789, 987654321]], [8], [7]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 9998, 99999, -1111111, -99, 1]], [23], [21]], [[[1, 2, 2000000001, 4, 5, 6, -999999990, 7, 8, 18, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14]], [25], [24]], [[[2222, 4444, -5555, -11, -7777, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [18], [17]], [[[1, 2, 3, 4, 5, 8, 8, 5000000006, 10, 11, 12, 13, 14, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15]], [22], [21]], [[[666, 1000000001, 2000000001, 13, -4000000004, 5000000005, -6000000006]], [7], [5]], [[[1000000001, 2000000002, 3000000004, -123456790, 5000000005, -6000000006, -6000000006]], [7], [5]], [[[-1, -10, 10, -11, -12, -999999997, 797, -990, -1000, 100, 123, -123456790, 432, 10, 20, 123, 30, 666, 777, -10000, 123456789, -123456790]], [18], [16]], [[[1000000001, 2000000002, 15, 3000000003, -6000000006, 1, 3000000003, 1000000001, -6000000006, 3000000003]], [10], [8]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 10, -4444, -4000000004, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, -4444, 10]], [21], [19]], [[[1000000001, 7, 3000000003, -4000000004, 5000000005, -6000000006, 3000000003]], [7], [5]], [[[1000000, 999999, -888888, -123456, 11111, -22222, 3333, -4444, 555, 665, -77, 88, 9, -4444, -4444, 9]], [16], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 17]], [23], [22]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 2222, 3000000003, 2222]], [8], [7]], [[[1, 2, 3, 4, 5, 123, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [23], [22]], [[[1, 2, 3, 4, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 9998, 99999, -1111111, -99, 1]], [22], [20]], [[[5, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 5]], [8], [6]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 10, 20, 30, 666, 777, -10000, 10]], [14], [12]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -99, -9, 3]], [22], [21]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -99, -9, 3, 16, 9]], [24], [23]], [[[1000000, 999999, -123456, -987654, 11111, -22222, 3333, 10, -4444, 16, 666, -77, 9, -7777, 88, -4444, -4444, 666]], [18], [17]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -6000000006, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000005]], [14], [12]], [[[5, -999999994, 5000000005, 5, 2000000001, -4000000004, 5000000005, -6000000006, 6660, 5]], [10], [8]], [[[1000000001, -999999994, -123456790, 8, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 2000000000, 5000000005]], [12], [10]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -199, -99, -9, 3, -199, -123456788, 16]], [26], [25]], [[[1, 2, 3, 4, 5, 123, 7, 8, 9, -7769, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [23], [22]], [[[-10000, 2, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999]], [15], [14]], [[[1000000002, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -6000000006, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000005, 2000000001]], [15], [13]], [[[5, -999999994, 5000000005, 5000000005, 5, 2000000001, -4000000004, 5000000005, -6000000006, 6660, 5]], [11], [9]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006, -999999994]], [8], [5]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 1000000, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666, -22222]], [20], [19]], [[[2000000001, 13, -4000000004, 5000000005, -6000000006]], [5], [3]], [[[-999, 1, 2, 3, 4, 5, 6, 8, 9, -99, 99, -3333, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1, 2, 3, 4, 5, 8, 8, 5000000006, 10, 11, 12, 13, 14, 12, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15]], [23], [22]], [[[1111, 2222, 4444, -5555, -11, -7777, 8888, -4443, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [21], [20]], [[[1000000002, -999999994, -123456790, 8, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 2000000000, 5000000005, 1000000002]], [13], [11]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000005]], [13], [12]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, -99, -9, 17]], [22], [21]], [[[1000000, 999999, 1111, -123456, 5000000005, -4443, -987654, -123457, 11111, -22222, 3333, -4444, 555, 666, -77, -999999997, 0, 9, -4444]], [18], [17]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 11, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [21], [20]], [[[1000000001, 2000000002, 3000000003, -6000000006]], [4], [3]], [[[1000000001, 7, -4000000004, 5000000005, -6000000006]], [5], [3]], [[[1000000, 999999, -888888, -123456, -987654, -3333, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111]], [19], [18]], [[[2000000002, 13, -4000000004, 5000000005, -6000000006]], [5], [3]], [[[1, 2, 3, 4, 5, 123, 7, 8, -7769, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [22], [21]], [[[-1, -10, 10, -11, 555, -45, -990, -1000, 100, 432, 10, 20, 30, 666, 777, -10000, 123456789, 556, -990]], [15], [12]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -77, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99]], [21], [18]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006, -999999994, 5000000005]], [9], [6]], [[[8, 1000000001, 7, 3000000003, 5000000005, -6000000006, 3000000003, 3000000003]], [8], [7]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, -3333]], [21], [20]], [[[1, 2, 3, 4, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 9998, 123, -1111111, -99, 1]], [21], [19]], [[[1000000001, 2000000002, 3000000003, 8889, -6000000006, 3000000003]], [6], [5]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111, -888888]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 665, -77, -77, 88, 9, -4444, -4444, 9]], [18], [16]], [[[1000000, 999999, -888888, -123456, -987654, -3333, 11111, -22222, 3333, -4444, 555, 99, 665, -77, 88, 9, -4444, -4444, 11111, -888888]], [20], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444, -77]], [19], [17]], [[[1000000001, -999999994, -123456790, -999999993, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999993, -999999994, 2000000000, 5000000005]], [13], [11]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99, 1]], [21], [19]], [[[1000000, 999999, -888888, -123456, -4443, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [17], [16]], [[[-99999, 1000000001, 2000000002, 15, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006]], [9], [7]], [[[1111, 2222, -3333, 4444, -5555, -11, -7776, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [21], [20]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444]], [18], [17]], [[[1, 2, 3, 4, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 1109, -99999, 9998, 99999, -1111111, -99, 1]], [22], [20]], [[[1, 2, 3, 8, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -9999, 16, 17, 18, 19, 17, 20, -99, -9, 17, 8, 1, -9]], [26], [25]], [[[2000000002, 15, 2000000001, 3000000003, 5000000005, -6000000006, 3000000003]], [7], [6]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444, 88]], [17], [16]], [[[-99, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, -123456, 17, 18, 19, 20, -199, -99, -9, -9, 7]], [23], [21]], [[[-10000, 2, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, 9999]], [16], [15]], [[[1000000, 999999, -888888, -123456, 5000000005, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [16], [15]], [[[1000000, 999999, -888889, -123456, 5000000005, 11111, -22222, 3333, -4444, -76, 555, 666, 88, 9, -4444, -4444]], [16], [15]], [[[1000000001, 2000000002, 15, -6000000005, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006]], [9], [6]], [[[1000000, 999999, -888888, -123455, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444]], [17], [16]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, -9999, -99, 99, 999, -9999, -123457, -99999, 99999, -1111111]], [16], [15]], [[[-999999997, 2000000002, 1111, 15, 3000000003, -6000000006]], [6], [5]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 2222, 11, 3000000003, 1000000001]], [9], [8]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, 4444, 6660]], [23], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 555, 665, -77, -77, 88, 9, -4444, -4444, 9]], [17], [15]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, 100, 123, -123456790, 432, 10, 20, 123, 30, 666, 777, -10000, 123456789]], [18], [16]], [[[2000000002, 2000000002, 15, 3000000003, -6000000006, 3000000003]], [6], [5]], [[[1000000, 999999, -888888, -123456, -987654, -4444, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444]], [21], [20]], [[[-199, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20]], [23], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -99, -9]], [21], [20]], [[[1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20, 8]], [24], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444, 667, 11111, 666, 555, 9, 999999, -888888]], [24], [23]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789, -990]], [18], [15]], [[[6660, -987654321, 987654323, 987654321, -123456789, -99, -123456789, 123456789, 987654321, 123456789]], [10], [9]], [[[1, 10, 3, 4, 5, 123, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 18, 19, 20, -199, -99, -9, -9, -199]], [24], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -123457, -77, 9, 88, 9, -4444, -4444, 667, 11111, 666, 555, 9, 999999, -888888]], [24], [23]], [[[1, 2, 3, 4, 5, 6, 7, 8, 3333, -99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99]], [19], [17]], [[[-999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 5, -999999994]], [9], [7]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999995, -999999994, -999999993, 2000000000, 5000000005]], [13], [11]], [[[-999999994, 2000000001, 5000000005, -999999994, -6000000006, -999999994, -999999994, 5000000005]], [8], [7]], [[[1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -99, -9, 17]], [21], [20]], [[[-1, -10, 10, -11, -12, 554, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789, -991, 797]], [19], [17]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 11, 13, 14, 15, 16, 17, 18, 8881, 19, 20, -199, -99, 20, -9, -99]], [24], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20, -9]], [23], [22]], [[[1, 2, 1111, 3, 8, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -9999, 16, 18, 19, 17, 20, -99, -9, 17, 8, 1, -9]], [26], [25]], [[[1111, 2222, -3333, 4444, -5555, -11, -7776, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -7776, -9990]], [22], [21]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000004, 2000000001]], [14], [13]]], [[[[-1, -2, 0]], [2], [0]], [[[1, 1, 2, -2, 3, 4, 5]], [7], [6]], [[[1, 6, 9, -6, 0, 1, 5]], [6], [5]], [[[1, 100, 98, -7, 1, -1]], [6], [4]], [[[-1, 0, 1]], [2], [1]], [[[0, -1, -20, 30]], [3], [1]], [[[-10, -11, -12, 13, 14, -20]], [6], [3]], [[[123, 456, 789, -987, -654, -321]], [6], [5]], [[[100, -250, 375, 500, -750]], [5], [4]], [[[-10, -20, -30, -40]], [4], [0]], [[[101, -202, 303, -404, 505, -606]], [6], [3]], [[[101, 303, -404, -606]], [4], [2]], [[[-5555, -12, 101, -202, 303, -404, 505, -606]], [8], [5]], [[[100, -250, 375, -750]], [4], [3]], [[[101, -202, 303, -403, 505, -606]], [6], [3]], [[[0, -1, -20, 30, 0, -20]], [4], [1]], [[[-1, -20, 30, 0, -20, 0]], [4], [1]], [[[-1, 0, 1, -1, 0]], [3], [1]], [[[15, -10, -11, -12, 13, 14, -20]], [7], [4]], [[[-1, -404, 30, 0, -20, 0]], [4], [1]], [[[99, -250, 375, -750]], [4], [3]], [[[303, -404, -606]], [3], [1]], [[[303, -405, -405, -606]], [4], [3]], [[[-2, -20, 30, 0, -20, 0]], [4], [1]], [[[101, -987, 303, -404, -606]], [5], [3]], [[[100, 790, 101, -202, 303, -403, 506, -606]], [8], [5]], [[[101, -202, 303, 505, -606]], [5], [3]], [[[-10, 123, -12, 13, 14, -20]], [6], [4]], [[[101, -202, 303, -403, -606]], [5], [2]], [[[99, 999, -202, 30, -5555, -202]], [6], [4]], [[[101, -202, 303, -404, 505, 302, -606, 302]], [8], [5]], [[[-10, -11, -12, 0, 14, -20]], [5], [2]], [[[-2, -20, 30, 0, 505, -11]], [5], [2]], [[[101, 101, -40, 303, -404, -606]], [6], [3]], [[[-1, 303, 1, -1, 0, 1]], [5], [3]], [[[99, 999, -202, 30, -5555, -202, 30]], [7], [5]], [[[15, -10, -11, -12, 13, 14]], [6], [4]], [[[101, -1, -40, 303, -404, -606]], [6], [2]], [[[123, 456, 789, -987, -654, -5555, -321]], [7], [6]], [[[101, 303, -404, 505, -606]], [5], [3]], [[[-10, -11, 505, 0, 14, -20]], [5], [2]], [[[-1, -404, 30, 999, -20, 0]], [5], [2]], [[[-1, -404, 30, 999, -20, 0, 0, 999]], [6], [3]], [[[101, -202, 303, -404, -606]], [5], [2]], [[[101, -404, 304, -404, 505, -606]], [6], [3]], [[[99, 999, -202, 30, -750, -5555, -202, 30]], [8], [5]], [[[101, -202, 303, -403, -606, 101]], [6], [3]], [[[-405, 303, -405, -405, -606]], [5], [4]], [[[101, -11, -202, -606, 505, -606]], [6], [2]], [[[15, -10, -11, -12, 14, -20]], [6], [3]], [[[-1, -404, 999, 30, 999, -20, 0, 0, 999, 0]], [7], [4]], [[[999, -1, -404, -750, 999, -19, 0]], [6], [3]], [[[99, -250, 375, -750, -750]], [5], [3]], [[[-251, 99, -250, 375, -750]], [5], [4]], [[[99, 999, -202, 30, -5555, -202, 30, -202]], [8], [5]], [[[15, -10, -11, -12, 14, 14, -20]], [7], [4]], [[[-10, -11, -12, 13, 14, -20, 14]], [7], [4]], [[[-10, 30, -11, 505, 0, 14, -20]], [6], [3]], [[[-405, 506, 303, -405, -405, -606]], [6], [5]], [[[-405, -456, 303, -405, -405, -606]], [6], [5]], [[[101, -202, 303, -404, 505, -605, 302]], [7], [4]], [[[-2, -20, 30, 0, -20, 0, -20]], [5], [1]], [[[-405, 506, -250, -405, -405, -606]], [6], [5]], [[[99, 999, -250, -202, 30, -5555, -202, 30, 999]], [9], [7]], [[[-605, 303, -405, -405, -5555, -606, -606]], [7], [4]], [[[-1, -404, 30, 999, -20, 0, 0, -19, 999]], [7], [4]], [[[-30]], [1], [0]], [[[-1, 0, 1, -1]], [3], [1]], [[[101, -11, -202, -606, 666, -606, 666]], [7], [3]], [[[-1, -404, 14, 30, 999, -20, 0, 0, -19, 999]], [8], [5]], [[[-12, -201, 101, -202, 303, -404, 505, -605, 302]], [9], [5]], [[[100, -605, 790, 101, -202, 303, -403, 506, -606]], [9], [5]], [[[-405, 506, 303, -405, -405, -606, -405]], [7], [6]], [[[0, 1, -1, 0]], [2], [1]], [[[99, 999, -203, 30, -5555, -202, 30, -202]], [8], [6]], [[[999, -202, 30, -5555, -202]], [5], [3]], [[[-2, 0]], [1], [0]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9]], [14], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9]], [23], [21]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [18], [17]], [[[-1, -2, 0, -123456789, 123456789]], [4], [2]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006]], [6], [4]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [20], [14]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, 999999]], [15], [14]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 999999, -22222, 3333, -4444, 555, 666, -77, 88, 9, 999999]], [16], [15]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [21], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [14], [13]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [16], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [24], [22]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [22], [16]], [[[1000000, 999999, 14, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [14], [13]], [[[1000000001, 2000000002, 3000000003, -4000000004, -6000000006]], [5], [3]], [[[1000000, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [13], [12]], [[[-1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [21], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, 3333]], [15], [14]], [[[-1, -10, -9999, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [24], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [17], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999]], [13], [12]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333]], [14], [13]], [[[0, -2, 0, -123456789, 123456789]], [3], [2]], [[[1, 2, 3, 4, 5, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [17], [16]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, -10]], [23], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [23], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777]], [24], [17]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10]], [21], [14]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 88]], [12], [11]], [[[1000000, 999999, -888888, -123456, 2000000002, 11111, 3333, -4444, 666, -77, 88, 88]], [12], [11]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [22], [16]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [22], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333, 999999]], [15], [14]], [[[1000000, -1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777]], [21], [15]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [23], [15]], [[[1000000, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [14], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 9999]], [19], [18]], [[[-1, -10, 10, -11, -12, 555, 796, 123456789, -990, -1000, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [23], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123]], [25], [18]], [[[1, 2, 3, 4, 5, 6, -7770, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [18], [17]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 999]], [18], [17]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 777, -10000, 123456789, 777, 777]], [21], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 999998, -987655, 9, -987654, -987654]], [18], [17]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006]], [8], [5]], [[[1000000000, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 1000000000]], [9], [6]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777]], [21], [15]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999]], [19], [18]], [[[1000000, 1000000000, 999999, 14, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [15], [14]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [21], [15]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002, 2000000002]], [10], [7]], [[[-1, -10, -11, 19, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [21], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [24], [22]], [[[1, -100, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [20], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 1000000, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [25], [23]], [[[1000000001, 2000000002, -4000000004, -6000000006]], [4], [2]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 9999]], [20], [19]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [22], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [26], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [25], [19]], [[[1000000, 987654321, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [15], [14]], [[[1000000, 999999, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999]], [12], [11]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, -10]], [22], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, 666, -77, 88, 88, -888888]], [12], [11]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655]], [14], [13]], [[[1000000001, 2000000002, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002, 2000000002]], [11], [8]], [[[1000000, 999999, 100, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999, 999999]], [13], [12]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, 10, 20, -3333, 30, -100, 777, -10000, 123456789, 777]], [23], [16]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777]], [22], [16]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, -77, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [23], [16]], [[[1, -100, 2, 3, 4, 5, 6, 7, 9, 13, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [20], [19]], [[[1000000, 999999, -888888, -123457, -987654, 11111, 3333, 666, -77, 88, 88, -888888]], [12], [11]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 7]], [22], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [22], [16]], [[[-10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10]], [19], [13]], [[[1000000, 1000000000, 999999, 14, -123456, -987654, 11111, -123457, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [16], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 555, 666, -77, 88, 9, 999999]], [14], [13]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [20], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 777, 777]], [24], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777]], [24], [18]], [[[1, 2, 3, 4, 5, 6, -999999993, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [24], [22]], [[[1000000, 8, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [17], [16]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[-1, 0, -10, 10, -11, -12, 555, 796, 123456789, -990, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [22], [15]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -999999991, 99999, -1111111]], [20], [19]], [[[1000000, 999999, -888888, -123457, -987654, 11111, 3333, 666, -77, 88, 88, 100]], [12], [11]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002]], [9], [6]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777]], [25], [19]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18, 8, 5]], [26], [24]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [26], [19]], [[[1000000001, 2000000002, -4000000003, -4000000004, -6000000006, -6000000006]], [6], [2]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 999999, -22222, -4444, 555, -77, 88, 9, 999999]], [14], [13]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 433, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [22], [16]], [[[1000000, 987654321, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, -987654, 88, 9, 999999]], [16], [15]], [[[-1, -10, -990, -11, 2219, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [26], [19]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, 2220, 100, -199, 432, 10, 20, -3333, 30, -100, 777, -10000, 123456789, 777]], [23], [17]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999]], [20], [18]], [[[1000000, 999999, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999, 9]], [13], [12]], [[[1000000001, 2000000002, -4000000003, -4000000004, -6000000006, 6, -6000000006, 1000000001]], [8], [4]], [[[1000000, -888888, -123456, 2000000002, 11111, 3333, -4444, 666, -77, 88, 88]], [11], [10]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -22222]], [17], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 555, 666, -77, 88, -987655, 11111, -888888]], [15], [14]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 666, 777, -10000, 19, 123456789, 777, -10]], [22], [15]], [[[1000000001, 2000000002, 3000000003, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006]], [8], [5]], [[[1000000, -1, -10, -11, -12, -9999, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777]], [22], [16]], [[[1000000, -888888, -123456, 11111, -22221, 3333, -4444, 666, -77, 88, 9, 999999]], [12], [11]], [[[-22221, 1000000001, 2000000002, 3000000003, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -6000000006]], [10], [6]], [[[1000000, 999999, -888888, -123456, -987654, -22222, 3333, -4444, 555, 666, -77, 88, 999998, -987655, 9, -987654, -987654]], [17], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, 666, -77, 88, 88, -22222, -888888, 88]], [14], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [18], [17]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002, 2000000002, 2000000002]], [11], [8]], [[[-1, -10, -11, 31, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [22], [16]], [[[1000000, -888888, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [12], [11]], [[[-1, -2, 0, -123456789, 123456789, 0]], [4], [2]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [21], [15]], [[[1000000001, 2000000002, 3000000003, -4000000004, -6000000006, 1000000001]], [6], [4]], [[[1000000, 1000000000, 999999, 14, -123456, -987654, 11111, -123457, 3333, -4444, 555, 666, -77, 88, 9, -987654, 1000000000]], [17], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999, -123456]], [15], [14]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [25], [19]], [[[1, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1000000001, -98, 3000000003, -6000000006, -98]], [5], [2]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, -987655, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [21], [15]], [[[1111, 2223, 9999, 4444, -10000, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444]], [21], [20]], [[[665, 1000000, 999999, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999, 999999]], [14], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 5]], [20], [19]], [[[1000000, 999999, -888888, 2222, -123456, -987654, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [15], [14]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -990, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [19], [18]], [[[-1, -10, -11, -12, 555, 797, -45, 667, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777]], [22], [16]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002, 1000000001]], [9], [7]], [[[1000000001, 2000000002, 2000000002, -4000000003, -4000000004, -6000000006, -6000000006]], [7], [3]], [[[-1, -10, -987654321, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [26], [20]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 3000000003]], [7], [5]], [[[-1, -10, -11, 31, -12, 555, 797, -45, -990, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [21], [16]], [[[-1, 0, -10, 10, -11, 555, 796, 123456789, -990, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [21], [14]], [[[0, -2, 0, -123456789, 123456789, -2]], [4], [2]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777]], [25], [18]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, -990]], [26], [18]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777]], [24], [19]], [[[1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [23], [21]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 122, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [26], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789, 777]], [27], [20]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 778, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [24], [16]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [19], [18]], [[[1, -100, 3, 4, 5, 6, 7, 9, 13, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [19], [18]], [[[1000000, 999999, -888888, 2222, -123456, -987654, 3333, -4444, 554, 666, -77, 88, -987655, 9, -987654, 999999]], [16], [15]], [[[-1, -10, -987654321, -990, -11, -12, -999, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [26], [20]], [[[999998, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333, 999999, 11111]], [16], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 797, 777, 777]], [24], [17]], [[[-1000, 1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [19], [18]], [[[-6000000006, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 7]], [20], [18]], [[[-1, -10, -987654321, -990, -11, -12, -999, -45, -990, -1000, 999, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [26], [20]], [[[1000000, 999999, -888888, -4443, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 88]], [13], [12]], [[[-1000, 1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 123456788, 6660, -7770, 8880, -9990]], [19], [18]], [[[0, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 100]], [22], [17]], [[[999999, 999999, -888888, -123456, 2, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [14], [13]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 88, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 10]], [24], [18]], [[[-1, 10, -11, -12, 555, 797, -45, -990, -1000, -987655, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [20], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, -990]], [26], [18]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [26], [19]], [[[1000000, 999999, -888888, -987654, 11111, -123456, 3334, -4444, 666, -77, 88, 88]], [12], [11]], [[[-1, -10, 10, 665, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, -77, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [24], [17]], [[[-1, -2, 0, -123456789, 123456789, 0, 0]], [4], [2]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111]], [19], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 20, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [21], [14]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1]], [23], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30]], [26], [19]], [[[1, 11, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [20], [19]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002]], [10], [8]], [[[1000000, -888888, -123456, -987654, 11111, -22222, 3333, 555, 666, -77, 88, 9, 999999]], [13], [12]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, -99999, 666, -77, 88, 9, 3333]], [14], [13]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [22], [15]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, 99999]], [20], [19]], [[[1, -100, 3, 4, 5, 6, 7, 9, 13, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999, 6]], [20], [19]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 999]], [21], [19]], [[[0, -2, 0, -123456789, 123456789, -2, -2]], [5], [2]], [[[-1, -2, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -2, -10000, 123456789]], [22], [14]], [[[-1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, -99, 20, 30, 4, 666, 777, -10000, 123456789, 777]], [21], [14]], [[[-1, -990, -11, 2219, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [25], [19]], [[[1000000, 999999, 14, -123456, -987654, 11111, -4444, 3333, -4444, 555, 1000001, 666, -77, 88, 9, -987654]], [16], [15]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777]], [23], [18]], [[[999998, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333, 11111]], [15], [14]], [[[1, 2, 3, 4, 5, 6, 7, 99999, 9, -1000000000, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [18], [16]], [[[-1, -10, -990, -11, -12, 797, 8880, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 777, 777, -45]], [26], [19]], [[[1, 2, 3, 5, 6, 7, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 9999]], [19], [18]], [[[-1, -2, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -2, -10000, 123456789, 555]], [23], [15]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111, 2]], [20], [19]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, 9, 999999]], [16], [14]], [[[999999, 999999, -888888, -123456, -987655, 2, 3333, -4444, 555, 666, -77, 88, -987655, -987654]], [14], [13]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 3334, 777, 777]], [24], [17]], [[[88, 999998, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [16], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 797, 777, 777, 123]], [24], [17]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -9999, 1110, 2219, -999999991, 4445, -3330, 4440, -5550, 6660, -10, 8880, -9990]], [21], [20]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 1000000, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18, -199]], [26], [24]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30, 777]], [27], [20]], [[[-1, -10, 10, -11, -12, 555, 797, 99, -45, -990, -1000, 100, -98, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [27], [19]], [[[-1, 10, -11, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [20], [14]], [[[1000000001, 3000000003, -4000000004, -6000000005, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [11], [8]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12]], [23], [18]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, -4444, 555, 666, -77, 88, 9, 999999]], [15], [13]], [[[1000000, 8, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 666, 88, -987655, 9, -987654, -987654, 11111]], [19], [18]], [[[2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 999]], [20], [18]], [[[1000000001, 3000000003, -4000000004, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [11], [9]], [[[1, 1, 10000, 2, 3, 4, 5, 19, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999, 3333]], [15], [14]], [[[1111, 2223, 7, 9999, -1000000000, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444]], [22], [21]], [[[1, 2, 10000, 2, 3, 4, 5, 19, -100, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111, 2]], [20], [18]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12]], [22], [18]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 100]], [21], [15]], [[[1000000001, 2000000002, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002]], [10], [7]], [[[-1, -10, -11, -12, 555, 797, -45, 667, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, -10000]], [23], [16]], [[[1000000, 8, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 2000000002, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [18], [17]], [[[-1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797]], [22], [16]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10]], [23], [17]], [[[665, 1000000, 999999, -123456, -987654, 11111, 3333, -4444, -77, 88, 9, 999999, 999999]], [13], [12]], [[[-1, -10, -11, -12, 555, 797, 99, -45, -990, -1000, 100, -98, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12, -990]], [27], [18]], [[[1000000, 0, -10, -11, -12, 555, 797, -45, -990, -1000, 100, -1, 123, 432, 10, 20, 30, 666, 777, -10000, -3332, 777, 777]], [22], [16]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 88, 123, 432, 10, 20, 30, 666, -5555, -10000, 123456789, 777, 777, 10]], [24], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 432, 19, 20, -199, -99, -9, 9]], [25], [23]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 13, 14, 15, 17, 18, 19, 20, -199, -99, -9, 18, 18]], [24], [22]], [[[1, -100, 3, 4, 5, 6, 7, 9, 13, 16, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [20], [19]], [[[1000000, -888888, -987654, 11111, -22222, 3333, 4445, 666, -77, 88, 9, 999999]], [12], [11]], [[[1000000001, 3000000003, -4000000003, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [11], [9]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, 9, 999999, -4444]], [17], [15]], [[[1000000, -888888, -987654, 11111, -22222, 3333, -4444, 666, -77, -22223, 88, 9, 999999]], [13], [12]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -990, 1110, 2219, -3330, 4440, -5550, 6660, -7770, -3331, 8880, -9990]], [20], [19]], [[[1000000001, 2000000002, 3000000003, -4000000004, -4000000004, -6000000006, 2000000002, -6000000006]], [8], [4]], [[[1000000, -888888, -123456, -987654, 11111, 999999, -22222, -4444, 555, -77, 88, 9, 999999]], [13], [12]], [[[1, 2, 10000, 2, 3, 4, 5, 19, -100, 8, 9, -99, 99, 999, -9999, 9999, -999999991, -123456789, -1111111, 2]], [20], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 999999]], [15], [14]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 3333, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1]], [24], [17]], [[[1000000, 999999, -888888, -123456, -987654, 778, -22222, 3333, 555, 666, -77, 88, -987655, 11111, -888888]], [15], [14]], [[[2000000002, -6000000005, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000003, 2000000002, 2000000002, 2000000002]], [12], [8]], [[[-1000, 1111, 2222, -3333, 4444, -5555, 6665, -7777, 8888, -2, -9999, 1110, 2220, -3330, 4440, 123456788, 6660, -7770, 8880, -9990]], [20], [18]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, -11]], [22], [15]], [[[1000000001, 3000000003, -4000000003, -888888, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, -4000000003, 2000000002]], [12], [9]], [[[1000000001, 3000000003, -4000000004, -888887, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002]], [10], [8]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 797, 777, 777, -990, 797]], [28], [20]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 433, 432, 10, 20, 30, 666, 6666, 777, -10000, 123456789, 778]], [23], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, -10000]], [23], [16]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, -99, 5]], [20], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333]], [14], [13]], [[[1000000, 999999, -888888, -123456, -987654, -22222, 3333, -4444, 555, 666, -77, 88, 999998, -987655, 778, -987654, -987654, -77]], [18], [16]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 5, -9999]], [22], [20]], [[[-1000, 1111, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [18], [17]], [[[-1, -10, -990, -12, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 777, 797]], [27], [21]], [[[-1, -10, 31, -12, 555, 797, -45, -990, -1000, 100, -1111111, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [22], [17]], [[[-1, -11, 10, -11, -12, 555, 797, 123, -45, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12, 797]], [23], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, 1000000]], [15], [14]], [[[0, -2, 0, 123456789, -2, -2]], [4], [1]], [[[999999, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [14], [13]], [[[1, 10000, 2, 3, 4, 3, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [20], [19]], [[[999999, -888888, -123456, 2, 3333, -4444, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [14], [13]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 797, 777, 777, 777]], [24], [18]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777, -45]], [26], [20]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 999999, 3333]], [13], [12]], [[[1000000001, 2000000002, -4000000003, -4000000004, -6000000006, 6, -6000000006]], [7], [3]], [[[1000000, -888888, 11110, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [12], [11]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, -9990, -9, -5555, -3330]], [20], [19]], [[[1000000, 999999, -888888, -123456, -987654, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 778, -987654, -987654, -77]], [17], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, -4444]], [15], [14]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1]], [23], [15]], [[[-1, -999999999, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, -12, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30, 777]], [28], [22]], [[[-1, 10, -11, -12, 555, 797, -45, -990, -1000, -987655, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [19], [14]], [[[8888, 999999, 14, -123456, 11111, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [13], [12]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18, 8, 5, 20]], [27], [25]], [[[-1, -10, 10, -11, 778, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 777, -10000, 123456789, 777, 777]], [22], [16]], [[[0, -1, -10, 10, -11, -12, 555, 797, 777, -45, -990, -9990, -1000, 100, 123, 432, 88, 30, 777, -10000, 123456789, 777, 777]], [22], [16]], [[[-1, -10, 10, -11, -12, 20, 555, 797, -45, 3334, -1000, 100, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [26], [20]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 18, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [18], [17]], [[[1, 2, 5000000005, 3, 4, 5, 6, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999]], [19], [18]], [[[999998, 1000000, 999999, -888888, -987654, 3333, -4444, 555, 666, -77, 88, 9, 3333, 11111, 999998, -77]], [16], [14]], [[[-1, -10, 433, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [26], [19]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 3000000003, 2000000002]], [7], [6]], [[[-22221, 1000000001, 2000000002, -999999990, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -6000000006, -4000000004]], [11], [6]], [[[-1, -10, -990, -11, -12, 797, 16, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 3334, 777, 777]], [24], [17]], [[[8888, 999999, 14, -123456, 11111, 3333, -4444, 11112, 555, 666, -77, 88, 9, -987654]], [14], [13]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, 99999, 1]], [21], [20]], [[[0, -1, -10, 10, -12, 1000000001, 555, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1, 30]], [24], [17]], [[[0, -2, 0, -5556, 123456789, -2, -2]], [5], [2]], [[[1000000, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [13], [12]], [[[1000000, 999999, -888888, -123456, -987654, 4440, 3333, 666, -77, 88, 88, -22222, -888888, 88]], [14], [13]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -9999, 1110, 2219, -999999991, 4445, -3330, 4440, -5550, 6660, -10, 8880, 998, -9990]], [22], [21]], [[[1, 2, 10000, 2, 3, 4, 5, 19, -9, 8, 1111, 9, -99, 99, -999, 999, -9999, 9999, -999999991, 99999, -1111111, 3, 19]], [23], [21]], [[[1000000001, -98, 3000000003, -6000000006, -97, -98]], [6], [2]], [[[1, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111]], [18], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 797, 777, 777, -990, 797, 797]], [29], [21]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, -1, 999999, -123456, -4444]], [18], [15]], [[[1000000, 999999, -888888, -123456, 2000000002, 11111, 3333, 666, -77, 88, 88]], [11], [10]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777, -45]], [25], [19]], [[[-123456789, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111, 2]], [20], [19]], [[[-1, 10, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [19], [14]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 776, 797, 777, 777, 123, 797]], [26], [19]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, 4]], [19], [18]], [[[-1, -10, -11, 31, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, -10000]], [23], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 2219, 777, 777, 797, 777, 777, 100]], [27], [20]], [[[-1, -10, -990, -11, 2219, 797, -45, -990, -1000, 2000000003, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, -10, 777, 123, 123456789]], [28], [20]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, -11, 123456788]], [24], [18]], [[[1000000, 999999, 14, -123456, -987654, 11111, -4444, 3333, 122, -4444, 555, 1000001, 666, -77, 88, -987654]], [16], [15]], [[[1000000, -1, -10, -11, -12, -9999, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777, -45]], [23], [17]], [[[-1, -10, 10, -11, -12, 555, 797, 11, -45, -990, -1000, 100, 88, 123, 432, 10, 20, 30, 666, 777, -10000, 778, 777, 10]], [24], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9, 10]], [25], [23]], [[[1111, 2223, 9999, 4444, -10000, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 10000, 4444]], [22], [21]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 87, -987655, 999999]], [15], [14]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 122, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [25], [23]], [[[1000000001, 2000000002, 1000000001, 2000000002, -4000000003, -4000000004, -6000000006, -6000000006]], [8], [4]], [[[9, 1000000, 8, -888888, -123456, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654, -123456]], [18], [17]], [[[-1, -999999999, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 9, -12, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30, 777]], [28], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [25], [23]], [[[1111, -77, 2223, -3333, 4444, -5555, 6666, -7777, 8888, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 1111, 8888, 6660]], [22], [21]], [[[-1000, 1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 123456788, -999999991, -7770, 8880, -9990, -1000]], [20], [18]], [[[8888, -888888, -5555, 14, -123456, 11111, 3333, -4444, 11112, 555, 666, -77, 88, 9, -987654]], [15], [14]], [[[-22221, 19, 2000000002, -999999990, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -6000000006, -4000000004]], [11], [6]], [[[1000000, 0, -10, -11, -12, 30, 555, 797, -45, -990, -1000, 100, -1, 123, 432, 10, 20, 30, 666, 777, -10000, -3332, 777, 777]], [23], [17]], [[[0, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 101]], [22], [17]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [23], [21]], [[[1000000001, 3000000003, -4000000003, -888888, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, -4000000003, 2000000002]], [11], [9]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, -10000, 123456789, 777]], [20], [14]], [[[88, 999998, 18, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [17], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 777, 777, 123, 123456789, 777, -12]], [28], [21]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 797, 777]], [23], [16]], [[[1111, -1111111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 6660, -7770, 8880, -9990, -9, -5555, 1111]], [21], [20]], [[[1000000001, 3000000003, -4000000004, -888887, 5000000005, -3333, 2000000002, 2000000002, 2000000002]], [9], [8]], [[[999998, 18, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [16], [15]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 666]], [23], [16]], [[[1000000, 999999, -123456, -987654, 11111, 3333, -4444, -99999, 666, -77, 88, 9, 3333, -888887, 9]], [15], [14]], [[[1000000, -888888, -987654, 11111, -22222, 3333, 666, -77, -22223, 88, 9, 999999]], [12], [11]], [[[1, 2, 3, 4, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 9999]], [18], [17]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, -4444, 11111]], [16], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 1000001, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [25], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 999999, -4444, -77]], [17], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 797, 777, 777, -999999991]], [24], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [17], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 123456788, 777, 777, 797, 777, -11, 123456788]], [22], [16]], [[[1, 2, 3, 4, 7, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9]], [24], [22]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 101, 777, 777, 797, 777, 777]], [26], [19]], [[[0, -1, -10, 10, -11, 5, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -999999998, -10000, 123456789, 777, 777, -1]], [25], [18]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 797, 777, 777, -990, 797, 797, -1000]], [30], [21]], [[[1000000, 999999, -888888, -123456, -987653, 11111, -22222, 3333, -4444, -77, 666, -77, 999999, 3333, -77]], [15], [12]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 29, 666, 777, -9999, 798, 123456788, 777, 777, 797, 777, 777]], [26], [20]], [[[0, -1, -10, 10, -11, -12, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1]], [22], [14]], [[[-1, -10, -990, -11, -12, 797, 1112, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, -990]], [27], [19]], [[[-1, -10, 10, -11, -12, -99, 555, 797, -45, -990, -1000, 100, 123, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 29, 123456789, 777, 10, -1, -12]], [28], [20]], [[[-1111111, 1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, 999, -9999, -99999, 99999, -1111111, 99999]], [20], [19]], [[[-1, -10, -11, 19, 555, 797, -45, -990, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [20], [15]], [[[-22221, 1000000001, 2000000002, 3000000003, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -123456789]], [10], [7]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -990, 1110, 2219, -3330, 4440, -5550, 6659, -7770, -3331, 8880, -9990]], [20], [19]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000003, -6000000006, 2000000002, 2000000002]], [10], [7]], [[[-1, -999999991, -11, 19, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 3, -10000, 123456789, 777, 777, 432]], [22], [17]], [[[1, 2, 3, 4, 5, 6, 7, 8, 1000001, 667, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [26], [24]], [[[-1, -10, -11, 31, -12, 555, -888887, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, 123456789, 777, 777]], [21], [16]], [[[1000000, -1, -10, -11, -12, -9999, 555, 797, -45, -990, -1000, 100, 555, 123, 432, 10, 20, 30, 666, 777, 433, -10000, 777]], [23], [17]], [[[1000000, 999999, -888888, -987654, 11111, 999999, -22222, 3334, -4444, 555, 666, -77, 88, 9, 999999]], [15], [14]], [[[-1, -10, 10, -10, -12, 555, 797, 123456789, -990, -1000, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [23], [15]], [[[-987656, -987655, -1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 778, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [26], [18]], [[[-1, -990, -11, 2219, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 19, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [26], [20]], [[[1000000, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, 9, -987654, 555]], [14], [13]], [[[1000000, -888888, -123456, -987654, 11111, -22222, 3333, 666, -77, 88, 9, 999999, -22221, -888888]], [14], [13]], [[[1, 1, 10000, 2, 3, 4, 5, 19, 8, 9, -99, -99, 99, -999, 999, -9999, 9999, 99999, -1111111]], [19], [17]], [[[1000000, 999999, -888888, -123456, -987654, -999999999, 11111, -22222, 3333, -999999996, -4444, 666, -77, 88, 9, 999999, -123456]], [17], [16]], [[[-1, -10, -990, -11, -12, 797, 16, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 3334, 777, 777, -1000, -10]], [26], [17]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 432]], [21], [15]], [[[-1, -11, 10, -11, 554, 797, 123, -45, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12, 797]], [22], [18]], [[[1000000, -888888, -987654, 11111, -22222, 3333, 666, -77, 88, 9, 999999]], [11], [10]], [[[-1, -10, 10, -11, -12, 555, 797, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, -10]], [21], [14]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, 777]], [23], [17]], [[[1000000001, 3000000003, -4000000003, -888888, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, -4000000003, 2000000002, 2000000002, 1000000001]], [13], [11]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, -987654319, 777, 797, 777, 777, 123, -990, 10]], [27], [19]], [[[-1, -2, 0, 123456789, 0]], [3], [1]], [[[-1, 10, -11, -12, 797, -45, -990, -1000, -1000, 123, 432, 20, 10, 30, 666, 777, -10000, 123456789, 1000001, 123]], [20], [14]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000003, -22223, -6000000006, 2000000002, 2000000002]], [11], [8]], [[[0, -1, -10, -9, -12, 1000000001, 555, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1, 30]], [24], [16]], [[[1000000, 1000000000, 999999, 14, -123456, -987655, 11111, 3333, -4444, 555, 666, -77, -100, 88, 9, -987654]], [16], [14]], [[[1000000, -1, -10, -9999, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777]], [20], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 20]], [24], [22]], [[[-1, -10, -990, -11, -12, 797, -5555, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 2219, 777, 777, 797, 777, 777, 100, 100, 778]], [29], [22]], [[[-1, -123457, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 797, 797, 777, -990, 797, -990]], [30], [21]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 667, 777, -10000, 123456789, 777, -10]], [21], [14]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 797, 777, 777, -990]], [25], [17]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, -99999, 666, -77, 88, 9, 3333, -888887, 9, 999999]], [17], [16]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, 6659, 2000000002]], [9], [7]], [[[1000000001, 2000000002, 3000000003, 666, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006]], [9], [6]], [[[1000000, 999999, -888888, -5554, -123456, -987654, 666, 3333, -4444, 555, 666, -77, 88, 9, -987654, 555]], [16], [15]], [[[-123456789, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111]], [19], [18]], [[[1000000001, 2000000002, 2000000002, -4000000003, -4000000004, -6000000006, -6000000006, -6000000006]], [8], [3]], [[[-123456789, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -9999, 9999, -999999991, 99999, -1111111]], [18], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 797, 777]], [22], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789, 10]], [27], [20]], [[[1000000001, -98, 3000000003, -6000000006, -98, 1000000001, -98, -98]], [8], [3]], [[[1000000001, 3000000003, -4000000003, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [12], [10]], [[[1, 2, 3, 4, 5, 6, 7, 8, 1000001, 9, 10, 11, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [24], [22]], [[[1000000001, 2000000002, 1000000001, -999999994, 1000000002, -4000000003, -4000000004, -6000000006, -6000000006, 1000000001]], [10], [6]], [[[1000000001, 3000000003, -4000000004, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, -3332, 2000000002]], [11], [9]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -990, 31, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 797, -10]], [25], [18]], [[[-1000, 1111, 2222, -3333, 4444, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [18], [17]], [[[1000000, 999999, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, -1, 999999, -123456, -4444]], [17], [14]], [[[88, 999998, 1000000, 999999, 1000000001, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [17], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -7777, -10000, 777, 777, 797, 777]], [23], [16]], [[[-1, -2, 0, 3, 123456789, 0, 0, 3]], [5], [3]], [[[1000000, 1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, -4444, 11111]], [17], [16]], [[[-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000]], [1], [0]], [[[-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000, 1, 0]], [2], [1]], [[[-7]], [1], [0]], [[[-1, 2000000002, 0, -123456789, 123456789, 0]], [4], [3]], [[[1000000001, 2000000002, 13, -4000000004, 5000000005, -6000000006]], [6], [4]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9]], [24], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [16], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444]], [17], [16]], [[[1000000, 999999, -888888, -123456, 5000000005, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [17], [16]], [[[1000000001, 2000000001, 13, -4000000004, 5000000005, -6000000006]], [6], [4]], [[[-1, -10, 10, -11, -12, 555, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [19], [13]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444]], [17], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444]], [18], [17]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9]], [23], [21]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [24], [21]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006]], [6], [4]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, 88, 9, -4444, -4444]], [19], [18]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -999999994]], [7], [5]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [23], [20]], [[[-987654321, 987654322, 123456789, -11, -123456789, -123456789, 987654321]], [7], [6]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, -6000000006]], [6], [4]], [[[1, 2, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14]], [24], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444, -987654]], [19], [18]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006]], [7], [4]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [21], [20]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 3000000003]], [6], [5]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14]], [25], [23]], [[[1000000001, -999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994]], [8], [6]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [18], [16]], [[[1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 100, 6660, -7770, -4000000004, -9990]], [18], [17]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, -123456, 17, 18, 19, 20, -199, -99, -9, -9, 7]], [24], [21]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 665, -77, 88, 9, -4444, -4444]], [16], [15]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 5000000005]], [9], [7]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 5, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [25], [22]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, 999, -9999, 9999, -99999, 99999, -1111111]], [17], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 665, -77, 88, 9, -4444, -4444, 9]], [17], [16]], [[[1111, 2222, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [20], [19]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15]], [24], [22]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -999999994, -6000000006, -999999994, -999999994, 5000000005]], [10], [8]], [[[1000000, 999999, -888888, -123456, 5000000005, -4443, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [18], [17]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14]], [25], [23]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14, 8]], [26], [24]], [[[1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 100, 88, 6660, -7770, -4000000004, -9990]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111]], [18], [17]], [[[1000000, 999999, -888888, -123456, 5000000005, -4443, -987654, -123457, 11111, -22222, 3333, -4444, 555, 666, -77, -999999997, 0, 9, -4444, -4444]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444]], [20], [19]], [[[1000000001, 2000000002, 15, 3000000003, 5000000005, -6000000006, 3000000003]], [7], [6]], [[[-999, 1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -3333, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [20], [19]], [[[0, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111]], [18], [17]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [24], [21]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [24], [21]], [[[1000000001, 7, 3000000003, -4000000004, 5000000005, -6000000006]], [6], [4]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -99, -9, 17]], [24], [22]], [[[1000000001, -999999994, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 5000000005]], [10], [8]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 2, 30, 666, 777, -10000, 123456789, 432]], [22], [16]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 2000000000, 5000000005]], [12], [10]], [[[-1, -10, 10, -11, -12, 555, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 556, -990]], [21], [14]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 2, 30, 666, 777, -10000, 123456789, 432, -1000]], [23], [16]], [[[5, -999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 5]], [9], [7]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, 665, -9]], [24], [23]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 17, 18, 19, 20, -199, -4444, -9, 15]], [25], [24]], [[[1000000001, 2000000002, 15, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006]], [8], [6]], [[[1, -999999997, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15, 12]], [25], [23]], [[[1000000001, 6666, 13, -4000000004, -6000000006, -4000000004]], [6], [3]], [[[1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -99, -9, 17]], [23], [21]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, 666]], [20], [19]], [[[-1, -10, 10, -11, -12, 555, 1, 797, -45, -990, -1000, 100, 123, 10, 20, 2, 30, 666, 777, 123, 123456789, 432, -1000]], [23], [17]], [[[1000000001, -999999994, 2000000001, 5000000005, -999999994, -6000000006, -999999994, -999999994, 5000000005]], [9], [8]], [[[1000000, 999999, 1111, -123456, 5000000005, -4443, -987654, -123457, 11111, -22222, 3333, -4444, 555, 666, -77, -999999997, 0, 9, -4444, -4444]], [19], [18]], [[[1000000, 999999, -888888, -123456, 5000000005, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444, 88]], [18], [17]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 30, 666, 777, -10000, 123456789, -11]], [20], [13]], [[[-1, -10, 10, -11, -12, 555, -45, -990, -1000, 100, 432, 10, 20, 30, 666, 777, -10000, 123456789, 556, -990]], [20], [13]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 19, 20, -199, -99, -9]], [24], [22]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 2222, 3000000003]], [7], [6]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99]], [20], [18]], [[[1000000001, 2000000002, 3000000003, -6000000006, -6000000006]], [5], [3]], [[[1, 2, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, -199, -9, -9, 14]], [25], [23]], [[[1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -9]], [23], [19]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20]], [25], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111, -4444]], [19], [18]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, -9999, -99, 99, 999, -9999, 9999, -99999, 99999, -1111111]], [17], [15]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, 99, 14, 10]], [26], [25]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 10, 20, 30, 666, 777, -10000, 123456789]], [18], [12]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [21], [15]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -999, 18, 19, 20, -199, -99, -9, -9]], [25], [22]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [21], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666]], [19], [18]], [[[1000000001, 2000000001, 13, -4000000004, 1110, 5000000005, -6000000006]], [7], [5]], [[[1000000001, 2000000002, -9990, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006]], [8], [6]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666, 555, 9]], [21], [20]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 13, 18, 19, 20, -199, -9, 14]], [25], [24]], [[[1000000001, 1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006]], [8], [5]], [[[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 13]], [24], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 555, 665, -77, 88, 9, -4444, -4444, 9]], [16], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 1000000, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666]], [19], [18]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 5000000006, 2000000000, 5000000005]], [13], [11]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999993, -999999994, 2000000000, 5000000005]], [12], [10]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444, -987654, -987654]], [20], [19]], [[[1000000001, -999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 9]], [9], [7]], [[[1, 2, 3, 88, 4, 5, 16, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, 665, -9, 19]], [27], [26]], [[[1, 2, 3, 4, 5, 6, 7, -6000000006, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [24], [20]], [[[1000000001, 2000000002, 15, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006, 1000000001]], [9], [7]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 123, 30, 666, 777, -10000, 123456789]], [22], [16]], [[[1, 2, 3, 4, 5, 4444, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [25], [22]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -999, 18, 19, 20, -199, -99, -9, -9, 19]], [26], [23]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, -99999, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, 2222, -99999]], [23], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99, 1]], [22], [20]], [[[1, 2, 2000000001, 4, 5, 6, 7, 8, 18, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14]], [25], [23]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 13, 18, 19, 20, -199, -9]], [24], [23]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14, 17]], [26], [24]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -199, -99, -9, 3]], [24], [22]], [[[1000000001, 2000000002, 15, 3000000003, -6000000006, 3000000003]], [6], [5]], [[[-10000, 2, -1, 3, 4, 5, 6, 7, 8, -9999, -99, 99, 999, -9999, 9999, -99999, 99999, -1111111]], [18], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, -4444, 10]], [22], [21]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, -1000, 100, 123, -123456790, 10, 20, 30, 666, 777, -10000, 123456789]], [20], [14]], [[[1111, -10000, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [20], [19]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -45, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9]], [25], [23]], [[[1000000001, 2000000001, 13, -4000000004, 1000000001, 1110, 5000000005, -6000000006]], [8], [6]], [[[1111, -10000, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -3333, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [20], [19]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -123456790, 432, 20, 30, -11, 666, 777, -10000, 123456789]], [21], [14]], [[[1, 2, 3, 8, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -99, -9, 17, 8, 1]], [27], [25]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, -4444, 10]], [21], [20]], [[[1111, 2222, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, -9990]], [21], [20]], [[[1000000001, 2000000002, 15, 3000000003, -6000000006, 1, 3000000003, -6000000006]], [8], [6]], [[[-987654321, 987654322, 123456789, -987654320, -11, -123456789, -123456789, 987654321]], [8], [7]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 9998, 99999, -1111111, -99, 1]], [23], [21]], [[[1, 2, 2000000001, 4, 5, 6, -999999990, 7, 8, 18, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14]], [26], [24]], [[[2222, 4444, -5555, -11, -7777, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [18], [17]], [[[1, 2, 3, 4, 5, 8, 8, 5000000006, 10, 11, 12, 13, 14, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15]], [23], [21]], [[[666, 1000000001, 2000000001, 13, -4000000004, 5000000005, -6000000006]], [7], [5]], [[[1, 2, 3, 88, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, 665, -9, 19]], [26], [25]], [[[1000000001, 2000000002, 3000000004, -123456790, 5000000005, -6000000006, -6000000006]], [7], [5]], [[[-1, -10, 10, -11, -12, -999999997, 797, -990, -1000, 100, 123, -123456790, 432, 10, 20, 123, 30, 666, 777, -10000, 123456789, -123456790]], [22], [16]], [[[1000000001, 2000000002, 15, 3000000003, -6000000006, 1, 3000000003, 1000000001, -6000000006, 3000000003]], [10], [8]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 13, 18, 19, 20, -199, -9, 10]], [25], [24]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 10, -4444, -4000000004, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, -4444, 10]], [21], [19]], [[[1000000001, 7, 3000000003, -4000000004, 5000000005, -6000000006, 3000000003]], [7], [5]], [[[1000000, 999999, -888888, -123456, 11111, -22222, 3333, -4444, 555, 665, -77, 88, 9, -4444, -4444, 9]], [16], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 17]], [25], [22]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 2222, 3000000003, 2222]], [8], [7]], [[[1, 2, 3, 4, 5, 123, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [25], [22]], [[[1, 2, 3, 4, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 9998, 99999, -1111111, -99, 1]], [22], [20]], [[[5, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 5]], [8], [6]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, 99, 14, 10]], [25], [24]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 10, 20, 30, 666, 777, -10000, 10]], [18], [12]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -99, -9, 3]], [23], [21]], [[[1, 2, 3, 4, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, -199, -9, -9, 14]], [24], [22]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -99, -9, 3, 16, 9]], [25], [23]], [[[1000000, 999999, -123456, -987654, 11111, -22222, 3333, 10, -4444, 16, 666, -77, 9, -7777, 88, -4444, -4444, 666]], [18], [17]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -6000000006, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000005]], [14], [12]], [[[-1, 2000000002, 0, -123456789, 123456789, 0, -1]], [5], [3]], [[[5, -999999994, 5000000005, 5, 2000000001, -4000000004, 5000000005, -6000000006, 6660, 5]], [10], [8]], [[[1000000001, -999999994, -123456790, 8, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 2000000000, 5000000005]], [12], [10]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -199, -99, -9, 3, -199, -123456788, 16]], [27], [25]], [[[1, 2, 3, 4, 5, 123, 7, 8, 9, -7769, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [25], [22]], [[[-10000, 2, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999]], [16], [14]], [[[1000000002, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -6000000006, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000005, 2000000001]], [15], [13]], [[[5, -999999994, 5000000005, 5000000005, 5, 2000000001, -4000000004, 5000000005, -6000000006, 6660, 5]], [11], [9]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006, -999999994]], [8], [5]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 1000000, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666, -22222]], [20], [19]], [[[2000000001, 13, -4000000004, 5000000005, -6000000006]], [5], [3]], [[[-999, 1, 2, 3, 4, 5, 6, 8, 9, -99, 99, -3333, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1, 2, 3, 4, 5, 8, 8, 5000000006, 10, 11, 12, 13, 14, 12, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15]], [24], [22]], [[[1111, 2222, 4444, -5555, -11, -7777, 8888, -4443, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [21], [20]], [[[1000000002, -999999994, -123456790, 8, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 2000000000, 5000000005, 1000000002]], [13], [11]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000005]], [13], [12]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, -99, -9, 17]], [23], [21]], [[[1000000, 999999, 1111, -123456, 5000000005, -4443, -987654, -123457, 11111, -22222, 3333, -4444, 555, 666, -77, -999999997, 0, 9, -4444]], [18], [17]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 11, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [23], [20]], [[[1000000001, 2000000002, 3000000003, -6000000006]], [4], [3]], [[[1, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14]], [23], [21]], [[[1000000001, 7, -4000000004, 5000000005, -6000000006]], [5], [3]], [[[1000000, 999999, -888888, -123456, -987654, -3333, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111]], [19], [18]], [[[2000000002, 13, -4000000004, 5000000005, -6000000006]], [5], [3]], [[[1, 2, 3, 4, 5, 123, 7, 8, -7769, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [24], [21]], [[[-1, -10, 10, -11, 555, -45, -990, -1000, 100, 432, 10, 20, 30, 666, 777, -10000, 123456789, 556, -990]], [19], [12]], [[[1, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, -199, -9, -9, 14]], [22], [20]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -77, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99]], [21], [18]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006, -999999994, 5000000005]], [9], [6]], [[[8, 1000000001, 7, 3000000003, 5000000005, -6000000006, 3000000003, 3000000003]], [8], [7]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, -3333]], [21], [20]], [[[1, 2, 3, 4, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 9998, 123, -1111111, -99, 1]], [21], [19]], [[[1000000001, 2000000002, 3000000003, 8889, -6000000006, 3000000003]], [6], [5]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111, -888888]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 665, -77, -77, 88, 9, -4444, -4444, 9]], [18], [16]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -999, 18, 19, 20, -199, 8, -9, -8, 19]], [26], [24]], [[[1000000, 999999, -888888, -123456, -987654, -3333, 11111, -22222, 3333, -4444, 555, 99, 665, -77, 88, 9, -4444, -4444, 11111, -888888]], [20], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444, -77]], [19], [17]], [[[1, 2, -5555, 3, 4, 2, 5, 665, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, 99, 14, 10]], [26], [25]], [[[1000000001, -999999994, -123456790, -999999993, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999993, -999999994, 2000000000, 5000000005]], [13], [11]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99, 1]], [21], [19]], [[[1000000, 999999, -888888, -123456, -4443, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [17], [16]], [[[-99999, 1000000001, 2000000002, 15, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006]], [9], [7]], [[[1111, -10000, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -3333, 2220, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [19], [18]], [[[1111, 2222, -3333, 4444, -5555, -11, -7776, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [21], [20]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444]], [18], [17]], [[[1, 2, 3, 4, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 1109, -99999, 9998, 99999, -1111111, -99, 1]], [22], [20]], [[[1, 2, 3, 8, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -9999, 16, 17, 18, 19, 17, 20, -99, -9, 17, 8, 1, -9]], [28], [25]], [[[2000000002, 15, 2000000001, 3000000003, 5000000005, -6000000006, 3000000003]], [7], [6]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444, 88]], [17], [16]], [[[-99, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, -123456, 17, 18, 19, 20, -199, -99, -9, -9, 7]], [25], [21]], [[[-10000, 2, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, 9999]], [17], [15]], [[[1000000, 999999, -888888, -123456, 5000000005, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [16], [15]], [[[1000000, 999999, -888889, -123456, 5000000005, 11111, -22222, 3333, -4444, -76, 555, 666, 88, 9, -4444, -4444]], [16], [15]], [[[1000000001, 2000000002, 15, -6000000005, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006]], [9], [6]], [[[1000000, 999999, -888888, -123455, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444]], [17], [16]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, -9999, -99, 99, 999, -9999, -123457, -99999, 99999, -1111111]], [17], [15]], [[[-999999997, 2000000002, 1111, 15, 3000000003, -6000000006]], [6], [5]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 2222, 11, 3000000003, 1000000001]], [9], [8]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, 4444, 6660]], [23], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 555, 665, -77, -77, 88, 9, -4444, -4444, 9]], [17], [15]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, 100, 123, -123456790, 432, 10, 20, 123, 30, 666, 777, -10000, 123456789]], [21], [16]], [[[1111, 2222, -3334, 4444, -5555, -7777, 8888, -10000, 1110, 2220, 4440, -5550, -7770, 8880, -5554, -9990]], [16], [15]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14, 17, 2]], [27], [25]], [[[2000000002, 2000000002, 15, 3000000003, -6000000006, 3000000003]], [6], [5]], [[[1, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, -199, -9, -9, 14, -9]], [23], [20]], [[[1000000, 999999, -888888, -123456, -987654, -4444, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444]], [21], [20]], [[[-199, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20]], [25], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -99, -9]], [22], [20]], [[[1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20, 8]], [26], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444, 667, 11111, 666, 555, 9, 999999, -888888]], [24], [23]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789, -990]], [22], [15]], [[[6660, -987654321, 987654323, 987654321, -123456789, -99, -123456789, 123456789, 987654321, 123456789]], [10], [9]], [[[1, 10, 3, 4, 5, 123, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 18, 19, 20, -199, -99, -9, -9, -199]], [26], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -123457, -77, 9, 88, 9, -4444, -4444, 667, 11111, 666, 555, 9, 999999, -888888]], [24], [23]], [[[1, 2, 3, 4, 5, 6, 7, 8, 3333, -99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99]], [19], [17]], [[[-999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 5, -999999994]], [9], [7]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999995, -999999994, -999999993, 2000000000, 5000000005]], [13], [11]], [[[-999999994, 2000000001, 5000000005, -999999994, -6000000006, -999999994, -999999994, 5000000005]], [8], [7]], [[[1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -99, -9, 17]], [22], [20]], [[[-1, -10, 10, -11, -12, 554, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789, -991, 797]], [23], [17]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 11, 13, 14, 15, 16, 17, 18, 8881, 19, 20, -199, -99, 20, -9, -99]], [25], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20, -9]], [26], [22]], [[[1, 2, 1111, 3, 8, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -9999, 16, 18, 19, 17, 20, -99, -9, 17, 8, 1, -9]], [28], [25]], [[[1, 2, 3, 88, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 17, 20, -199, 665, -9, 19]], [25], [24]], [[[1111, 2222, -3333, 4444, -5555, -11, -7776, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -7776, -9990]], [22], [21]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000004, 2000000001]], [14], [13]]], [[[[-1, -2, 0]], [2], [0]], [[[1, 1, 2, -2, 3, 4, 5]], [7], [6]], [[[1, 6, 9, -6, 0, 1, 5]], [6], [5]], [[[1, 100, 98, -7, 1, -1]], [6], [4]], [[[-1, 0, 1]], [2], [1]], [[[0, -1, -20, 30]], [3], [1]], [[[-10, -11, -12, 13, 14, -20]], [6], [3]], [[[123, 456, 789, -987, -654, -321]], [6], [5]], [[[100, -250, 375, 500, -750]], [5], [4]], [[[-10, -20, -30, -40]], [4], [0]], [[[101, -202, 303, -404, 505, -606]], [6], [3]], [[[101, 303, -404, -606]], [4], [2]], [[[-5555, -12, 101, -202, 303, -404, 505, -606]], [8], [5]], [[[100, -250, 375, -750]], [4], [3]], [[[101, -202, 303, -403, 505, -606]], [6], [3]], [[[0, -1, -20, 30, 0, -20]], [4], [1]], [[[-1, -20, 30, 0, -20, 0]], [4], [1]], [[[-1, 0, 1, -1, 0]], [3], [1]], [[[15, -10, -11, -12, 13, 14, -20]], [7], [4]], [[[-1, -404, 30, 0, -20, 0]], [4], [1]], [[[99, -250, 375, -750]], [4], [3]], [[[303, -404, -606]], [3], [1]], [[[303, -405, -405, -606]], [4], [3]], [[[-2, -20, 30, 0, -20, 0]], [4], [1]], [[[101, -987, 303, -404, -606]], [5], [3]], [[[100, 790, 101, -202, 303, -403, 506, -606]], [8], [5]], [[[101, -202, 303, 505, -606]], [5], [3]], [[[-10, 123, -12, 13, 14, -20]], [6], [4]], [[[101, -202, 303, -403, -606]], [5], [2]], [[[99, 999, -202, 30, -5555, -202]], [6], [4]], [[[101, -202, 303, -404, 505, 302, -606, 302]], [8], [5]], [[[-10, -11, -12, 0, 14, -20]], [5], [2]], [[[-2, -20, 30, 0, 505, -11]], [5], [2]], [[[101, 101, -40, 303, -404, -606]], [6], [3]], [[[-1, 303, 1, -1, 0, 1]], [5], [3]], [[[99, 999, -202, 30, -5555, -202, 30]], [7], [5]], [[[15, -10, -11, -12, 13, 14]], [6], [4]], [[[101, -1, -40, 303, -404, -606]], [6], [2]], [[[123, 456, 789, -987, -654, -5555, -321]], [7], [6]], [[[101, 303, -404, 505, -606]], [5], [3]], [[[-10, -11, 505, 0, 14, -20]], [5], [2]], [[[-1, -404, 30, 999, -20, 0]], [5], [2]], [[[-1, -404, 30, 999, -20, 0, 0, 999]], [6], [3]], [[[101, -202, 303, -404, -606]], [5], [2]], [[[101, -404, 304, -404, 505, -606]], [6], [3]], [[[99, 999, -202, 30, -750, -5555, -202, 30]], [8], [5]], [[[101, -202, 303, -403, -606, 101]], [6], [3]], [[[-405, 303, -405, -405, -606]], [5], [4]], [[[101, -11, -202, -606, 505, -606]], [6], [2]], [[[15, -10, -11, -12, 14, -20]], [6], [3]], [[[-1, -404, 999, 30, 999, -20, 0, 0, 999, 0]], [7], [4]], [[[999, -1, -404, -750, 999, -19, 0]], [6], [3]], [[[99, -250, 375, -750, -750]], [5], [3]], [[[-251, 99, -250, 375, -750]], [5], [4]], [[[99, 999, -202, 30, -5555, -202, 30, -202]], [8], [5]], [[[15, -10, -11, -12, 14, 14, -20]], [7], [4]], [[[-10, -11, -12, 13, 14, -20, 14]], [7], [4]], [[[-10, 30, -11, 505, 0, 14, -20]], [6], [3]], [[[-405, 506, 303, -405, -405, -606]], [6], [5]], [[[-405, -456, 303, -405, -405, -606]], [6], [5]], [[[101, -202, 303, -404, 505, -605, 302]], [7], [4]], [[[-2, -20, 30, 0, -20, 0, -20]], [5], [1]], [[[-405, 506, -250, -405, -405, -606]], [6], [5]], [[[99, 999, -250, -202, 30, -5555, -202, 30, 999]], [9], [7]], [[[-605, 303, -405, -405, -5555, -606, -606]], [7], [4]], [[[-1, -404, 30, 999, -20, 0, 0, -19, 999]], [7], [4]], [[[-30]], [1], [0]], [[[-1, 0, 1, -1]], [3], [1]], [[[101, -11, -202, -606, 666, -606, 666]], [7], [3]], [[[-1, -404, 14, 30, 999, -20, 0, 0, -19, 999]], [8], [5]], [[[-12, -201, 101, -202, 303, -404, 505, -605, 302]], [9], [5]], [[[100, -605, 790, 101, -202, 303, -403, 506, -606]], [9], [5]], [[[-405, 506, 303, -405, -405, -606, -405]], [7], [6]], [[[0, 1, -1, 0]], [2], [1]], [[[99, 999, -203, 30, -5555, -202, 30, -202]], [8], [6]], [[[999, -202, 30, -5555, -202]], [5], [3]], [[[-2, 0]], [1], [0]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9]], [14], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9]], [23], [21]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [18], [17]], [[[-1, -2, 0, -123456789, 123456789]], [4], [2]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006]], [6], [4]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [20], [14]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, 999999]], [15], [14]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 999999, -22222, 3333, -4444, 555, 666, -77, 88, 9, 999999]], [16], [15]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [21], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [14], [13]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [16], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [24], [22]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [22], [16]], [[[1000000, 999999, 14, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [14], [13]], [[[1000000001, 2000000002, 3000000003, -4000000004, -6000000006]], [5], [3]], [[[1000000, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [13], [12]], [[[-1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [21], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, 3333]], [15], [14]], [[[-1, -10, -9999, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [24], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [17], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999]], [13], [12]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333]], [14], [13]], [[[0, -2, 0, -123456789, 123456789]], [3], [2]], [[[1, 2, 3, 4, 5, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [17], [16]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, -10]], [23], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [23], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777]], [24], [17]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10]], [21], [14]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 88]], [12], [11]], [[[1000000, 999999, -888888, -123456, 2000000002, 11111, 3333, -4444, 666, -77, 88, 88]], [12], [11]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [22], [16]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [22], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333, 999999]], [15], [14]], [[[1000000, -1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777]], [21], [15]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [23], [15]], [[[1000000, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [14], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 9999]], [19], [18]], [[[-1, -10, 10, -11, -12, 555, 796, 123456789, -990, -1000, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [23], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123]], [25], [18]], [[[1, 2, 3, 4, 5, 6, -7770, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [18], [17]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 999]], [18], [17]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 777, -10000, 123456789, 777, 777]], [21], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 999998, -987655, 9, -987654, -987654]], [18], [17]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006]], [8], [5]], [[[1000000000, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 1000000000]], [9], [6]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777]], [21], [15]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999]], [19], [18]], [[[1000000, 1000000000, 999999, 14, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [15], [14]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [21], [15]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002, 2000000002]], [10], [7]], [[[-1, -10, -11, 19, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [21], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [24], [22]], [[[1, -100, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [20], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 1000000, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [25], [23]], [[[1000000001, 2000000002, -4000000004, -6000000006]], [4], [2]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 9999]], [20], [19]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [22], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [26], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [25], [19]], [[[1000000, 987654321, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [15], [14]], [[[1000000, 999999, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999]], [12], [11]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, -10]], [22], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, 666, -77, 88, 88, -888888]], [12], [11]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655]], [14], [13]], [[[1000000001, 2000000002, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002, 2000000002]], [11], [8]], [[[1000000, 999999, 100, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999, 999999]], [13], [12]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, 10, 20, -3333, 30, -100, 777, -10000, 123456789, 777]], [23], [16]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777]], [22], [16]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, -77, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [23], [16]], [[[1, -100, 2, 3, 4, 5, 6, 7, 9, 13, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [20], [19]], [[[1000000, 999999, -888888, -123457, -987654, 11111, 3333, 666, -77, 88, 88, -888888]], [12], [11]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 7]], [22], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [22], [16]], [[[-10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10]], [19], [13]], [[[1000000, 1000000000, 999999, 14, -123456, -987654, 11111, -123457, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [16], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 555, 666, -77, 88, 9, 999999]], [14], [13]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [20], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 777, 777]], [24], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777]], [24], [18]], [[[1, 2, 3, 4, 5, 6, -999999993, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [24], [22]], [[[1000000, 8, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [17], [16]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[-1, 0, -10, 10, -11, -12, 555, 796, 123456789, -990, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [22], [15]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -999999991, 99999, -1111111]], [20], [19]], [[[1000000, 999999, -888888, -123457, -987654, 11111, 3333, 666, -77, 88, 88, 100]], [12], [11]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002]], [9], [6]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777]], [25], [19]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18, 8, 5]], [26], [24]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [26], [19]], [[[1000000001, 2000000002, -4000000003, -4000000004, -6000000006, -6000000006]], [6], [2]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 999999, -22222, -4444, 555, -77, 88, 9, 999999]], [14], [13]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 433, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [22], [16]], [[[1000000, 987654321, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, -987654, 88, 9, 999999]], [16], [15]], [[[-1, -10, -990, -11, 2219, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [26], [19]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, 2220, 100, -199, 432, 10, 20, -3333, 30, -100, 777, -10000, 123456789, 777]], [23], [17]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999]], [20], [18]], [[[1000000, 999999, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999, 9]], [13], [12]], [[[1000000001, 2000000002, -4000000003, -4000000004, -6000000006, 6, -6000000006, 1000000001]], [8], [4]], [[[1000000, -888888, -123456, 2000000002, 11111, 3333, -4444, 666, -77, 88, 88]], [11], [10]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -22222]], [17], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 555, 666, -77, 88, -987655, 11111, -888888]], [15], [14]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 666, 777, -10000, 19, 123456789, 777, -10]], [22], [15]], [[[1000000001, 2000000002, 3000000003, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006]], [8], [5]], [[[1000000, -1, -10, -11, -12, -9999, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777]], [22], [16]], [[[1000000, -888888, -123456, 11111, -22221, 3333, -4444, 666, -77, 88, 9, 999999]], [12], [11]], [[[-22221, 1000000001, 2000000002, 3000000003, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -6000000006]], [10], [6]], [[[1000000, 999999, -888888, -123456, -987654, -22222, 3333, -4444, 555, 666, -77, 88, 999998, -987655, 9, -987654, -987654]], [17], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, 666, -77, 88, 88, -22222, -888888, 88]], [14], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [18], [17]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002, 2000000002, 2000000002]], [11], [8]], [[[-1, -10, -11, 31, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [22], [16]], [[[1000000, -888888, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [12], [11]], [[[-1, -2, 0, -123456789, 123456789, 0]], [4], [2]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [21], [15]], [[[1000000001, 2000000002, 3000000003, -4000000004, -6000000006, 1000000001]], [6], [4]], [[[1000000, 1000000000, 999999, 14, -123456, -987654, 11111, -123457, 3333, -4444, 555, 666, -77, 88, 9, -987654, 1000000000]], [17], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999, -123456]], [15], [14]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [25], [19]], [[[1, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1000000001, -98, 3000000003, -6000000006, -98]], [5], [2]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, -987655, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [21], [15]], [[[1111, 2223, 9999, 4444, -10000, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444]], [21], [20]], [[[665, 1000000, 999999, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999, 999999]], [14], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 5]], [20], [19]], [[[1000000, 999999, -888888, 2222, -123456, -987654, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [15], [14]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -990, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [19], [18]], [[[-1, -10, -11, -12, 555, 797, -45, 667, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777]], [22], [16]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002, 1000000001]], [9], [7]], [[[1000000001, 2000000002, 2000000002, -4000000003, -4000000004, -6000000006, -6000000006]], [7], [3]], [[[-1, -10, -987654321, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [26], [20]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 3000000003]], [7], [5]], [[[-1, -10, -11, 31, -12, 555, 797, -45, -990, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [21], [16]], [[[-1, 0, -10, 10, -11, 555, 796, 123456789, -990, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [21], [14]], [[[0, -2, 0, -123456789, 123456789, -2]], [4], [2]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777]], [25], [18]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, -990]], [26], [18]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777]], [24], [19]], [[[1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [23], [21]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 122, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [26], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789, 777]], [27], [20]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 778, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [24], [16]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [19], [18]], [[[1, -100, 3, 4, 5, 6, 7, 9, 13, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [19], [18]], [[[1000000, 999999, -888888, 2222, -123456, -987654, 3333, -4444, 554, 666, -77, 88, -987655, 9, -987654, 999999]], [16], [15]], [[[-1, -10, -987654321, -990, -11, -12, -999, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [26], [20]], [[[999998, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333, 999999, 11111]], [16], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 797, 777, 777]], [24], [17]], [[[-1000, 1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [19], [18]], [[[-6000000006, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 7]], [20], [18]], [[[-1, -10, -987654321, -990, -11, -12, -999, -45, -990, -1000, 999, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [26], [20]], [[[1000000, 999999, -888888, -4443, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 88]], [13], [12]], [[[-1000, 1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 123456788, 6660, -7770, 8880, -9990]], [19], [18]], [[[0, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 100]], [22], [17]], [[[999999, 999999, -888888, -123456, 2, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [14], [13]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 88, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 10]], [24], [18]], [[[-1, 10, -11, -12, 555, 797, -45, -990, -1000, -987655, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [20], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, -990]], [26], [18]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [26], [19]], [[[1000000, 999999, -888888, -987654, 11111, -123456, 3334, -4444, 666, -77, 88, 88]], [12], [11]], [[[-1, -10, 10, 665, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, -77, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [24], [17]], [[[-1, -2, 0, -123456789, 123456789, 0, 0]], [4], [2]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111]], [19], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 20, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [21], [14]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1]], [23], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30]], [26], [19]], [[[1, 11, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [20], [19]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002]], [10], [8]], [[[1000000, -888888, -123456, -987654, 11111, -22222, 3333, 555, 666, -77, 88, 9, 999999]], [13], [12]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, -99999, 666, -77, 88, 9, 3333]], [14], [13]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [22], [15]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, 99999]], [20], [19]], [[[1, -100, 3, 4, 5, 6, 7, 9, 13, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999, 6]], [20], [19]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 999]], [21], [19]], [[[0, -2, 0, -123456789, 123456789, -2, -2]], [5], [2]], [[[-1, -2, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -2, -10000, 123456789]], [22], [14]], [[[-1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, -99, 20, 30, 4, 666, 777, -10000, 123456789, 777]], [21], [14]], [[[-1, -990, -11, 2219, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [25], [19]], [[[1000000, 999999, 14, -123456, -987654, 11111, -4444, 3333, -4444, 555, 1000001, 666, -77, 88, 9, -987654]], [16], [15]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777]], [23], [18]], [[[999998, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333, 11111]], [15], [14]], [[[1, 2, 3, 4, 5, 6, 7, 99999, 9, -1000000000, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [18], [16]], [[[-1, -10, -990, -11, -12, 797, 8880, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 777, 777, -45]], [26], [19]], [[[1, 2, 3, 5, 6, 7, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 9999]], [19], [18]], [[[-1, -2, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -2, -10000, 123456789, 555]], [23], [15]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111, 2]], [20], [19]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, 9, 999999]], [16], [14]], [[[999999, 999999, -888888, -123456, -987655, 2, 3333, -4444, 555, 666, -77, 88, -987655, -987654]], [14], [13]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 3334, 777, 777]], [24], [17]], [[[88, 999998, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [16], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 797, 777, 777, 123]], [24], [17]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -9999, 1110, 2219, -999999991, 4445, -3330, 4440, -5550, 6660, -10, 8880, -9990]], [21], [20]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 1000000, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18, -199]], [26], [24]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30, 777]], [27], [20]], [[[-1, -10, 10, -11, -12, 555, 797, 99, -45, -990, -1000, 100, -98, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [27], [19]], [[[-1, 10, -11, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [20], [14]], [[[1000000001, 3000000003, -4000000004, -6000000005, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [11], [8]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12]], [23], [18]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, -4444, 555, 666, -77, 88, 9, 999999]], [15], [13]], [[[1000000, 8, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 666, 88, -987655, 9, -987654, -987654, 11111]], [19], [18]], [[[2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 999]], [20], [18]], [[[1000000001, 3000000003, -4000000004, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [11], [9]], [[[1, 1, 10000, 2, 3, 4, 5, 19, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999, 3333]], [15], [14]], [[[1111, 2223, 7, 9999, -1000000000, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444]], [22], [21]], [[[1, 2, 10000, 2, 3, 4, 5, 19, -100, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111, 2]], [20], [18]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12]], [22], [18]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 100]], [21], [15]], [[[1000000001, 2000000002, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002]], [10], [7]], [[[-1, -10, -11, -12, 555, 797, -45, 667, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, -10000]], [23], [16]], [[[1000000, 8, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 2000000002, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [18], [17]], [[[-1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797]], [22], [16]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10]], [23], [17]], [[[665, 1000000, 999999, -123456, -987654, 11111, 3333, -4444, -77, 88, 9, 999999, 999999]], [13], [12]], [[[-1, -10, -11, -12, 555, 797, 99, -45, -990, -1000, 100, -98, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12, -990]], [27], [18]], [[[1000000, 0, -10, -11, -12, 555, 797, -45, -990, -1000, 100, -1, 123, 432, 10, 20, 30, 666, 777, -10000, -3332, 777, 777]], [22], [16]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 88, 123, 432, 10, 20, 30, 666, -5555, -10000, 123456789, 777, 777, 10]], [24], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 432, 19, 20, -199, -99, -9, 9]], [25], [23]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 13, 14, 15, 17, 18, 19, 20, -199, -99, -9, 18, 18]], [24], [22]], [[[1, -100, 3, 4, 5, 6, 7, 9, 13, 16, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [20], [19]], [[[1000000, -888888, -987654, 11111, -22222, 3333, 4445, 666, -77, 88, 9, 999999]], [12], [11]], [[[1000000001, 3000000003, -4000000003, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [11], [9]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, 9, 999999, -4444]], [17], [15]], [[[1000000, -888888, -987654, 11111, -22222, 3333, -4444, 666, -77, -22223, 88, 9, 999999]], [13], [12]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -990, 1110, 2219, -3330, 4440, -5550, 6660, -7770, -3331, 8880, -9990]], [20], [19]], [[[1000000001, 2000000002, 3000000003, -4000000004, -4000000004, -6000000006, 2000000002, -6000000006]], [8], [4]], [[[1000000, -888888, -123456, -987654, 11111, 999999, -22222, -4444, 555, -77, 88, 9, 999999]], [13], [12]], [[[1, 2, 10000, 2, 3, 4, 5, 19, -100, 8, 9, -99, 99, 999, -9999, 9999, -999999991, -123456789, -1111111, 2]], [20], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 999999]], [15], [14]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 3333, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1]], [24], [17]], [[[1000000, 999999, -888888, -123456, -987654, 778, -22222, 3333, 555, 666, -77, 88, -987655, 11111, -888888]], [15], [14]], [[[2000000002, -6000000005, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000003, 2000000002, 2000000002, 2000000002]], [12], [8]], [[[-1000, 1111, 2222, -3333, 4444, -5555, 6665, -7777, 8888, -2, -9999, 1110, 2220, -3330, 4440, 123456788, 6660, -7770, 8880, -9990]], [20], [18]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, -11]], [22], [15]], [[[1000000001, 3000000003, -4000000003, -888888, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, -4000000003, 2000000002]], [12], [9]], [[[1000000001, 3000000003, -4000000004, -888887, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002]], [10], [8]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 797, 777, 777, -990, 797]], [28], [20]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 433, 432, 10, 20, 30, 666, 6666, 777, -10000, 123456789, 778]], [23], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, -10000]], [23], [16]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, -99, 5]], [20], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333]], [14], [13]], [[[1000000, 999999, -888888, -123456, -987654, -22222, 3333, -4444, 555, 666, -77, 88, 999998, -987655, 778, -987654, -987654, -77]], [18], [16]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 5, -9999]], [22], [20]], [[[-1000, 1111, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [18], [17]], [[[-1, -10, -990, -12, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 777, 797]], [27], [21]], [[[-1, -10, 31, -12, 555, 797, -45, -990, -1000, 100, -1111111, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [22], [17]], [[[-1, -11, 10, -11, -12, 555, 797, 123, -45, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12, 797]], [23], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, 1000000]], [15], [14]], [[[0, -2, 0, 123456789, -2, -2]], [4], [1]], [[[999999, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [14], [13]], [[[1, 10000, 2, 3, 4, 3, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [20], [19]], [[[999999, -888888, -123456, 2, 3333, -4444, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [14], [13]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 797, 777, 777, 777]], [24], [18]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777, -45]], [26], [20]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 999999, 3333]], [13], [12]], [[[1000000001, 2000000002, -4000000003, -4000000004, -6000000006, 6, -6000000006]], [7], [3]], [[[1000000, -888888, 11110, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [12], [11]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, -9990, -9, -5555, -3330]], [20], [19]], [[[1000000, 999999, -888888, -123456, -987654, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 778, -987654, -987654, -77]], [17], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, -4444]], [15], [14]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1]], [23], [15]], [[[-1, -999999999, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, -12, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30, 777]], [28], [22]], [[[-1, 10, -11, -12, 555, 797, -45, -990, -1000, -987655, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [19], [14]], [[[8888, 999999, 14, -123456, 11111, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [13], [12]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18, 8, 5, 20]], [27], [25]], [[[-1, -10, 10, -11, 778, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 777, -10000, 123456789, 777, 777]], [22], [16]], [[[0, -1, -10, 10, -11, -12, 555, 797, 777, -45, -990, -9990, -1000, 100, 123, 432, 88, 30, 777, -10000, 123456789, 777, 777]], [22], [16]], [[[-1, -10, 10, -11, -12, 20, 555, 797, -45, 3334, -1000, 100, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [26], [20]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 18, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [18], [17]], [[[1, 2, 5000000005, 3, 4, 5, 6, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999]], [19], [18]], [[[999998, 1000000, 999999, -888888, -987654, 3333, -4444, 555, 666, -77, 88, 9, 3333, 11111, 999998, -77]], [16], [14]], [[[-1, -10, 433, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [26], [19]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 3000000003, 2000000002]], [7], [6]], [[[-22221, 1000000001, 2000000002, -999999990, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -6000000006, -4000000004]], [11], [6]], [[[-1, -10, -990, -11, -12, 797, 16, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 3334, 777, 777]], [24], [17]], [[[8888, 999999, 14, -123456, 11111, 3333, -4444, 11112, 555, 666, -77, 88, 9, -987654]], [14], [13]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, 99999, 1]], [21], [20]], [[[0, -1, -10, 10, -12, 1000000001, 555, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1, 30]], [24], [17]], [[[0, -2, 0, -5556, 123456789, -2, -2]], [5], [2]], [[[1000000, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [13], [12]], [[[1000000, 999999, -888888, -123456, -987654, 4440, 3333, 666, -77, 88, 88, -22222, -888888, 88]], [14], [13]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -9999, 1110, 2219, -999999991, 4445, -3330, 4440, -5550, 6660, -10, 8880, 998, -9990]], [22], [21]], [[[1, 2, 10000, 2, 3, 4, 5, 19, -9, 8, 1111, 9, -99, 99, -999, 999, -9999, 9999, -999999991, 99999, -1111111, 3, 19]], [23], [21]], [[[1000000001, -98, 3000000003, -6000000006, -97, -98]], [6], [2]], [[[1, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111]], [18], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 797, 777, 777, -990, 797, 797]], [29], [21]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, -1, 999999, -123456, -4444]], [18], [15]], [[[1000000, 999999, -888888, -123456, 2000000002, 11111, 3333, 666, -77, 88, 88]], [11], [10]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777, -45]], [25], [19]], [[[-123456789, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111, 2]], [20], [19]], [[[-1, 10, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [19], [14]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 776, 797, 777, 777, 123, 797]], [26], [19]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, 4]], [19], [18]], [[[-1, -10, -11, 31, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, -10000]], [23], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 2219, 777, 777, 797, 777, 777, 100]], [27], [20]], [[[-1, -10, -990, -11, 2219, 797, -45, -990, -1000, 2000000003, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, -10, 777, 123, 123456789]], [28], [20]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, -11, 123456788]], [24], [18]], [[[1000000, 999999, 14, -123456, -987654, 11111, -4444, 3333, 122, -4444, 555, 1000001, 666, -77, 88, -987654]], [16], [15]], [[[1000000, -1, -10, -11, -12, -9999, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777, -45]], [23], [17]], [[[-1, -10, 10, -11, -12, 555, 797, 11, -45, -990, -1000, 100, 88, 123, 432, 10, 20, 30, 666, 777, -10000, 778, 777, 10]], [24], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9, 10]], [25], [23]], [[[1111, 2223, 9999, 4444, -10000, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 10000, 4444]], [22], [21]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 87, -987655, 999999]], [15], [14]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 122, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [25], [23]], [[[1000000001, 2000000002, 1000000001, 2000000002, -4000000003, -4000000004, -6000000006, -6000000006]], [8], [4]], [[[9, 1000000, 8, -888888, -123456, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654, -123456]], [18], [17]], [[[-1, -999999999, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 9, -12, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30, 777]], [28], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [25], [23]], [[[1111, -77, 2223, -3333, 4444, -5555, 6666, -7777, 8888, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 1111, 8888, 6660]], [22], [21]], [[[-1000, 1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 123456788, -999999991, -7770, 8880, -9990, -1000]], [20], [18]], [[[8888, -888888, -5555, 14, -123456, 11111, 3333, -4444, 11112, 555, 666, -77, 88, 9, -987654]], [15], [14]], [[[-22221, 19, 2000000002, -999999990, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -6000000006, -4000000004]], [11], [6]], [[[1000000, 0, -10, -11, -12, 30, 555, 797, -45, -990, -1000, 100, -1, 123, 432, 10, 20, 30, 666, 777, -10000, -3332, 777, 777]], [23], [17]], [[[0, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 101]], [22], [17]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [23], [21]], [[[1000000001, 3000000003, -4000000003, -888888, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, -4000000003, 2000000002]], [11], [9]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, -10000, 123456789, 777]], [20], [14]], [[[88, 999998, 18, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [17], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 777, 777, 123, 123456789, 777, -12]], [28], [21]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 797, 777]], [23], [16]], [[[1111, -1111111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 6660, -7770, 8880, -9990, -9, -5555, 1111]], [21], [20]], [[[1000000001, 3000000003, -4000000004, -888887, 5000000005, -3333, 2000000002, 2000000002, 2000000002]], [9], [8]], [[[999998, 18, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [16], [15]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 666]], [23], [16]], [[[1000000, 999999, -123456, -987654, 11111, 3333, -4444, -99999, 666, -77, 88, 9, 3333, -888887, 9]], [15], [14]], [[[1000000, -888888, -987654, 11111, -22222, 3333, 666, -77, -22223, 88, 9, 999999]], [12], [11]], [[[1, 2, 3, 4, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 9999]], [18], [17]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, -4444, 11111]], [16], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 1000001, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [25], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 999999, -4444, -77]], [17], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 797, 777, 777, -999999991]], [24], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [17], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 123456788, 777, 777, 797, 777, -11, 123456788]], [22], [16]], [[[1, 2, 3, 4, 7, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9]], [24], [22]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 101, 777, 777, 797, 777, 777]], [26], [19]], [[[0, -1, -10, 10, -11, 5, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -999999998, -10000, 123456789, 777, 777, -1]], [25], [18]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 797, 777, 777, -990, 797, 797, -1000]], [30], [21]], [[[1000000, 999999, -888888, -123456, -987653, 11111, -22222, 3333, -4444, -77, 666, -77, 999999, 3333, -77]], [15], [12]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 29, 666, 777, -9999, 798, 123456788, 777, 777, 797, 777, 777]], [26], [20]], [[[0, -1, -10, 10, -11, -12, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1]], [22], [14]], [[[-1, -10, -990, -11, -12, 797, 1112, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, -990]], [27], [19]], [[[-1, -10, 10, -11, -12, -99, 555, 797, -45, -990, -1000, 100, 123, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 29, 123456789, 777, 10, -1, -12]], [28], [20]], [[[-1111111, 1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, 999, -9999, -99999, 99999, -1111111, 99999]], [20], [19]], [[[-1, -10, -11, 19, 555, 797, -45, -990, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [20], [15]], [[[-22221, 1000000001, 2000000002, 3000000003, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -123456789]], [10], [7]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -990, 1110, 2219, -3330, 4440, -5550, 6659, -7770, -3331, 8880, -9990]], [20], [19]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000003, -6000000006, 2000000002, 2000000002]], [10], [7]], [[[-1, -999999991, -11, 19, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 3, -10000, 123456789, 777, 777, 432]], [22], [17]], [[[1, 2, 3, 4, 5, 6, 7, 8, 1000001, 667, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [26], [24]], [[[-1, -10, -11, 31, -12, 555, -888887, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, 123456789, 777, 777]], [21], [16]], [[[1000000, -1, -10, -11, -12, -9999, 555, 797, -45, -990, -1000, 100, 555, 123, 432, 10, 20, 30, 666, 777, 433, -10000, 777]], [23], [17]], [[[1000000, 999999, -888888, -987654, 11111, 999999, -22222, 3334, -4444, 555, 666, -77, 88, 9, 999999]], [15], [14]], [[[-1, -10, 10, -10, -12, 555, 797, 123456789, -990, -1000, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [23], [15]], [[[-987656, -987655, -1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 778, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [26], [18]], [[[-1, -990, -11, 2219, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 19, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [26], [20]], [[[1000000, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, 9, -987654, 555]], [14], [13]], [[[1000000, -888888, -123456, -987654, 11111, -22222, 3333, 666, -77, 88, 9, 999999, -22221, -888888]], [14], [13]], [[[1, 1, 10000, 2, 3, 4, 5, 19, 8, 9, -99, -99, 99, -999, 999, -9999, 9999, 99999, -1111111]], [19], [17]], [[[1000000, 999999, -888888, -123456, -987654, -999999999, 11111, -22222, 3333, -999999996, -4444, 666, -77, 88, 9, 999999, -123456]], [17], [16]], [[[-1, -10, -990, -11, -12, 797, 16, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 3334, 777, 777, -1000, -10]], [26], [17]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 432]], [21], [15]], [[[-1, -11, 10, -11, 554, 797, 123, -45, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12, 797]], [22], [18]], [[[1000000, -888888, -987654, 11111, -22222, 3333, 666, -77, 88, 9, 999999]], [11], [10]], [[[-1, -10, 10, -11, -12, 555, 797, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, -10]], [21], [14]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, 777]], [23], [17]], [[[1000000001, 3000000003, -4000000003, -888888, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, -4000000003, 2000000002, 2000000002, 1000000001]], [13], [11]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, -987654319, 777, 797, 777, 777, 123, -990, 10]], [27], [19]], [[[-1, -2, 0, 123456789, 0]], [3], [1]], [[[-1, 10, -11, -12, 797, -45, -990, -1000, -1000, 123, 432, 20, 10, 30, 666, 777, -10000, 123456789, 1000001, 123]], [20], [14]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000003, -22223, -6000000006, 2000000002, 2000000002]], [11], [8]], [[[0, -1, -10, -9, -12, 1000000001, 555, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1, 30]], [24], [16]], [[[1000000, 1000000000, 999999, 14, -123456, -987655, 11111, 3333, -4444, 555, 666, -77, -100, 88, 9, -987654]], [16], [14]], [[[1000000, -1, -10, -9999, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777]], [20], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 20]], [24], [22]], [[[-1, -10, -990, -11, -12, 797, -5555, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 2219, 777, 777, 797, 777, 777, 100, 100, 778]], [29], [22]], [[[-1, -123457, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 797, 797, 777, -990, 797, -990]], [30], [21]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 667, 777, -10000, 123456789, 777, -10]], [21], [14]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 797, 777, 777, -990]], [25], [17]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, -99999, 666, -77, 88, 9, 3333, -888887, 9, 999999]], [17], [16]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, 6659, 2000000002]], [9], [7]], [[[1000000001, 2000000002, 3000000003, 666, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006]], [9], [6]], [[[1000000, 999999, -888888, -5554, -123456, -987654, 666, 3333, -4444, 555, 666, -77, 88, 9, -987654, 555]], [16], [15]], [[[-123456789, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111]], [19], [18]], [[[1000000001, 2000000002, 2000000002, -4000000003, -4000000004, -6000000006, -6000000006, -6000000006]], [8], [3]], [[[-123456789, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -9999, 9999, -999999991, 99999, -1111111]], [18], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 797, 777]], [22], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789, 10]], [27], [20]], [[[1000000001, -98, 3000000003, -6000000006, -98, 1000000001, -98, -98]], [8], [3]], [[[1000000001, 3000000003, -4000000003, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [12], [10]], [[[1, 2, 3, 4, 5, 6, 7, 8, 1000001, 9, 10, 11, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [24], [22]], [[[1000000001, 2000000002, 1000000001, -999999994, 1000000002, -4000000003, -4000000004, -6000000006, -6000000006, 1000000001]], [10], [6]], [[[1000000001, 3000000003, -4000000004, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, -3332, 2000000002]], [11], [9]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -990, 31, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 797, -10]], [25], [18]], [[[-1000, 1111, 2222, -3333, 4444, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [18], [17]], [[[1000000, 999999, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, -1, 999999, -123456, -4444]], [17], [14]], [[[88, 999998, 1000000, 999999, 1000000001, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [17], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -7777, -10000, 777, 777, 797, 777]], [23], [16]], [[[-1, -2, 0, 3, 123456789, 0, 0, 3]], [5], [3]], [[[1000000, 1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, -4444, 11111]], [17], [16]], [[[-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000]], [1], [0]], [[[-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000, 1, 0]], [2], [1]], [[[-7]], [1], [0]], [[[-1, 2000000002, 0, -123456789, 123456789, 0]], [4], [3]], [[[1000000001, 2000000002, 13, -4000000004, 5000000005, -6000000006]], [6], [4]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9]], [24], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [16], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444]], [17], [16]], [[[1000000, 999999, -888888, -123456, 5000000005, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [17], [16]], [[[1000000001, 2000000001, 13, -4000000004, 5000000005, -6000000006]], [6], [4]], [[[-1, -10, 10, -11, -12, 555, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [19], [13]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444]], [17], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444]], [18], [17]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9]], [23], [21]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [24], [21]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006]], [6], [4]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, 88, 9, -4444, -4444]], [19], [18]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -999999994]], [7], [5]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [23], [20]], [[[-987654321, 987654322, 123456789, -11, -123456789, -123456789, 987654321]], [7], [6]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, -6000000006]], [6], [4]], [[[1, 2, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14]], [24], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444, -987654]], [19], [18]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006]], [7], [4]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [21], [20]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 3000000003]], [6], [5]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14]], [25], [23]], [[[1000000001, -999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994]], [8], [6]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [18], [16]], [[[1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 100, 6660, -7770, -4000000004, -9990]], [18], [17]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, -123456, 17, 18, 19, 20, -199, -99, -9, -9, 7]], [24], [21]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 665, -77, 88, 9, -4444, -4444]], [16], [15]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 5000000005]], [9], [7]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 5, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [25], [22]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, 999, -9999, 9999, -99999, 99999, -1111111]], [17], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 665, -77, 88, 9, -4444, -4444, 9]], [17], [16]], [[[1111, 2222, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [20], [19]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15]], [24], [22]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -999999994, -6000000006, -999999994, -999999994, 5000000005]], [10], [8]], [[[1000000, 999999, -888888, -123456, 5000000005, -4443, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [18], [17]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14]], [25], [23]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14, 8]], [26], [24]], [[[1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 100, 88, 6660, -7770, -4000000004, -9990]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111]], [18], [17]], [[[1000000, 999999, -888888, -123456, 5000000005, -4443, -987654, -123457, 11111, -22222, 3333, -4444, 555, 666, -77, -999999997, 0, 9, -4444, -4444]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444]], [20], [19]], [[[1000000001, 2000000002, 15, 3000000003, 5000000005, -6000000006, 3000000003]], [7], [6]], [[[-999, 1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -3333, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [20], [19]], [[[0, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111]], [18], [17]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [24], [21]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [24], [21]], [[[1000000001, 7, 3000000003, -4000000004, 5000000005, -6000000006]], [6], [4]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -99, -9, 17]], [24], [22]], [[[1000000001, -999999994, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 5000000005]], [10], [8]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 2, 30, 666, 777, -10000, 123456789, 432]], [22], [16]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 2000000000, 5000000005]], [12], [10]], [[[-1, -10, 10, -11, -12, 555, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 556, -990]], [21], [14]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 2, 30, 666, 777, -10000, 123456789, 432, -1000]], [23], [16]], [[[5, -999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 5]], [9], [7]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, 665, -9]], [24], [23]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 17, 18, 19, 20, -199, -4444, -9, 15]], [25], [24]], [[[1000000001, 2000000002, 15, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006]], [8], [6]], [[[1, -999999997, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15, 12]], [25], [23]], [[[1000000001, 6666, 13, -4000000004, -6000000006, -4000000004]], [6], [3]], [[[1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -99, -9, 17]], [23], [21]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, 666]], [20], [19]], [[[-1, -10, 10, -11, -12, 555, 1, 797, -45, -990, -1000, 100, 123, 10, 20, 2, 30, 666, 777, 123, 123456789, 432, -1000]], [23], [17]], [[[1000000001, -999999994, 2000000001, 5000000005, -999999994, -6000000006, -999999994, -999999994, 5000000005]], [9], [8]], [[[1000000, 999999, 1111, -123456, 5000000005, -4443, -987654, -123457, 11111, -22222, 3333, -4444, 555, 666, -77, -999999997, 0, 9, -4444, -4444]], [19], [18]], [[[1000000, 999999, -888888, -123456, 5000000005, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444, 88]], [18], [17]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 30, 666, 777, -10000, 123456789, -11]], [20], [13]], [[[-1, -10, 10, -11, -12, 555, -45, -990, -1000, 100, 432, 10, 20, 30, 666, 777, -10000, 123456789, 556, -990]], [20], [13]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 19, 20, -199, -99, -9]], [24], [22]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 2222, 3000000003]], [7], [6]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99]], [20], [18]], [[[1000000001, 2000000002, 3000000003, -6000000006, -6000000006]], [5], [3]], [[[1, 2, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, -199, -9, -9, 14]], [25], [23]], [[[1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -9]], [23], [19]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20]], [25], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111, -4444]], [19], [18]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, -9999, -99, 99, 999, -9999, 9999, -99999, 99999, -1111111]], [17], [15]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, 99, 14, 10]], [26], [25]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 10, 20, 30, 666, 777, -10000, 123456789]], [18], [12]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [21], [15]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -999, 18, 19, 20, -199, -99, -9, -9]], [25], [22]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [21], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666]], [19], [18]], [[[1000000001, 2000000001, 13, -4000000004, 1110, 5000000005, -6000000006]], [7], [5]], [[[1000000001, 2000000002, -9990, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006]], [8], [6]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666, 555, 9]], [21], [20]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 13, 18, 19, 20, -199, -9, 14]], [25], [24]], [[[1000000001, 1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006]], [8], [5]], [[[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 13]], [24], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 555, 665, -77, 88, 9, -4444, -4444, 9]], [16], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 1000000, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666]], [19], [18]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 5000000006, 2000000000, 5000000005]], [13], [11]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999993, -999999994, 2000000000, 5000000005]], [12], [10]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444, -987654, -987654]], [20], [19]], [[[1000000001, -999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 9]], [9], [7]], [[[1, 2, 3, 88, 4, 5, 16, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, 665, -9, 19]], [27], [26]], [[[1, 2, 3, 4, 5, 6, 7, -6000000006, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [24], [20]], [[[1000000001, 2000000002, 15, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006, 1000000001]], [9], [7]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 123, 30, 666, 777, -10000, 123456789]], [22], [16]], [[[1, 2, 3, 4, 5, 4444, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [25], [22]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -999, 18, 19, 20, -199, -99, -9, -9, 19]], [26], [23]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, -99999, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, 2222, -99999]], [23], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99, 1]], [22], [20]], [[[1, 2, 2000000001, 4, 5, 6, 7, 8, 18, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14]], [25], [23]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 13, 18, 19, 20, -199, -9]], [24], [23]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14, 17]], [26], [24]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -199, -99, -9, 3]], [24], [22]], [[[1000000001, 2000000002, 15, 3000000003, -6000000006, 3000000003]], [6], [5]], [[[-10000, 2, -1, 3, 4, 5, 6, 7, 8, -9999, -99, 99, 999, -9999, 9999, -99999, 99999, -1111111]], [18], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, -4444, 10]], [22], [21]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, -1000, 100, 123, -123456790, 10, 20, 30, 666, 777, -10000, 123456789]], [20], [14]], [[[1111, -10000, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [20], [19]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -45, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9]], [25], [23]], [[[1000000001, 2000000001, 13, -4000000004, 1000000001, 1110, 5000000005, -6000000006]], [8], [6]], [[[1111, -10000, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -3333, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [20], [19]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -123456790, 432, 20, 30, -11, 666, 777, -10000, 123456789]], [21], [14]], [[[1, 2, 3, 8, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -99, -9, 17, 8, 1]], [27], [25]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, -4444, 10]], [21], [20]], [[[1111, 2222, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, -9990]], [21], [20]], [[[1000000001, 2000000002, 15, 3000000003, -6000000006, 1, 3000000003, -6000000006]], [8], [6]], [[[-987654321, 987654322, 123456789, -987654320, -11, -123456789, -123456789, 987654321]], [8], [7]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 9998, 99999, -1111111, -99, 1]], [23], [21]], [[[1, 2, 2000000001, 4, 5, 6, -999999990, 7, 8, 18, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14]], [26], [24]], [[[2222, 4444, -5555, -11, -7777, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [18], [17]], [[[1, 2, 3, 4, 5, 8, 8, 5000000006, 10, 11, 12, 13, 14, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15]], [23], [21]], [[[666, 1000000001, 2000000001, 13, -4000000004, 5000000005, -6000000006]], [7], [5]], [[[1, 2, 3, 88, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, 665, -9, 19]], [26], [25]], [[[1000000001, 2000000002, 3000000004, -123456790, 5000000005, -6000000006, -6000000006]], [7], [5]], [[[-1, -10, 10, -11, -12, -999999997, 797, -990, -1000, 100, 123, -123456790, 432, 10, 20, 123, 30, 666, 777, -10000, 123456789, -123456790]], [22], [16]], [[[1000000001, 2000000002, 15, 3000000003, -6000000006, 1, 3000000003, 1000000001, -6000000006, 3000000003]], [10], [8]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 13, 18, 19, 20, -199, -9, 10]], [25], [24]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 10, -4444, -4000000004, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, -4444, 10]], [21], [19]], [[[1000000001, 7, 3000000003, -4000000004, 5000000005, -6000000006, 3000000003]], [7], [5]], [[[1000000, 999999, -888888, -123456, 11111, -22222, 3333, -4444, 555, 665, -77, 88, 9, -4444, -4444, 9]], [16], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 17]], [25], [22]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 2222, 3000000003, 2222]], [8], [7]], [[[1, 2, 3, 4, 5, 123, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [25], [22]], [[[1, 2, 3, 4, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 9998, 99999, -1111111, -99, 1]], [22], [20]], [[[5, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 5]], [8], [6]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, 99, 14, 10]], [25], [24]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 10, 20, 30, 666, 777, -10000, 10]], [18], [12]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -99, -9, 3]], [23], [21]], [[[1, 2, 3, 4, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, -199, -9, -9, 14]], [24], [22]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -99, -9, 3, 16, 9]], [25], [23]], [[[1000000, 999999, -123456, -987654, 11111, -22222, 3333, 10, -4444, 16, 666, -77, 9, -7777, 88, -4444, -4444, 666]], [18], [17]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -6000000006, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000005]], [14], [12]], [[[-1, 2000000002, 0, -123456789, 123456789, 0, -1]], [5], [3]], [[[5, -999999994, 5000000005, 5, 2000000001, -4000000004, 5000000005, -6000000006, 6660, 5]], [10], [8]], [[[1000000001, -999999994, -123456790, 8, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 2000000000, 5000000005]], [12], [10]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -199, -99, -9, 3, -199, -123456788, 16]], [27], [25]], [[[1, 2, 3, 4, 5, 123, 7, 8, 9, -7769, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [25], [22]], [[[-10000, 2, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999]], [16], [14]], [[[1000000002, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -6000000006, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000005, 2000000001]], [15], [13]], [[[5, -999999994, 5000000005, 5000000005, 5, 2000000001, -4000000004, 5000000005, -6000000006, 6660, 5]], [11], [9]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006, -999999994]], [8], [5]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 1000000, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666, -22222]], [20], [19]], [[[2000000001, 13, -4000000004, 5000000005, -6000000006]], [5], [3]], [[[-999, 1, 2, 3, 4, 5, 6, 8, 9, -99, 99, -3333, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1, 2, 3, 4, 5, 8, 8, 5000000006, 10, 11, 12, 13, 14, 12, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15]], [24], [22]], [[[1111, 2222, 4444, -5555, -11, -7777, 8888, -4443, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [21], [20]], [[[1000000002, -999999994, -123456790, 8, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 2000000000, 5000000005, 1000000002]], [13], [11]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000005]], [13], [12]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, -99, -9, 17]], [23], [21]], [[[1000000, 999999, 1111, -123456, 5000000005, -4443, -987654, -123457, 11111, -22222, 3333, -4444, 555, 666, -77, -999999997, 0, 9, -4444]], [18], [17]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 11, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [23], [20]], [[[1000000001, 2000000002, 3000000003, -6000000006]], [4], [3]], [[[1, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14]], [23], [21]], [[[1000000001, 7, -4000000004, 5000000005, -6000000006]], [5], [3]], [[[1000000, 999999, -888888, -123456, -987654, -3333, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111]], [19], [18]], [[[2000000002, 13, -4000000004, 5000000005, -6000000006]], [5], [3]], [[[1, 2, 3, 4, 5, 123, 7, 8, -7769, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [24], [21]], [[[-1, -10, 10, -11, 555, -45, -990, -1000, 100, 432, 10, 20, 30, 666, 777, -10000, 123456789, 556, -990]], [19], [12]], [[[1, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, -199, -9, -9, 14]], [22], [20]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -77, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99]], [21], [18]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006, -999999994, 5000000005]], [9], [6]], [[[8, 1000000001, 7, 3000000003, 5000000005, -6000000006, 3000000003, 3000000003]], [8], [7]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, -3333]], [21], [20]], [[[1, 2, 3, 4, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 9998, 123, -1111111, -99, 1]], [21], [19]], [[[1000000001, 2000000002, 3000000003, 8889, -6000000006, 3000000003]], [6], [5]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111, -888888]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 665, -77, -77, 88, 9, -4444, -4444, 9]], [18], [16]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -999, 18, 19, 20, -199, 8, -9, -8, 19]], [26], [24]], [[[1000000, 999999, -888888, -123456, -987654, -3333, 11111, -22222, 3333, -4444, 555, 99, 665, -77, 88, 9, -4444, -4444, 11111, -888888]], [20], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444, -77]], [19], [17]], [[[1, 2, -5555, 3, 4, 2, 5, 665, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, 99, 14, 10]], [26], [25]], [[[1000000001, -999999994, -123456790, -999999993, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999993, -999999994, 2000000000, 5000000005]], [13], [11]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99, 1]], [21], [19]], [[[1000000, 999999, -888888, -123456, -4443, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [17], [16]], [[[-99999, 1000000001, 2000000002, 15, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006]], [9], [7]], [[[1111, -10000, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -3333, 2220, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [19], [18]], [[[1111, 2222, -3333, 4444, -5555, -11, -7776, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [21], [20]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444]], [18], [17]], [[[1, 2, 3, 4, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 1109, -99999, 9998, 99999, -1111111, -99, 1]], [22], [20]], [[[1, 2, 3, 8, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -9999, 16, 17, 18, 19, 17, 20, -99, -9, 17, 8, 1, -9]], [28], [25]], [[[2000000002, 15, 2000000001, 3000000003, 5000000005, -6000000006, 3000000003]], [7], [6]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444, 88]], [17], [16]], [[[-99, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, -123456, 17, 18, 19, 20, -199, -99, -9, -9, 7]], [25], [21]], [[[-10000, 2, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, 9999]], [17], [15]], [[[1000000, 999999, -888888, -123456, 5000000005, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [16], [15]], [[[1000000, 999999, -888889, -123456, 5000000005, 11111, -22222, 3333, -4444, -76, 555, 666, 88, 9, -4444, -4444]], [16], [15]], [[[1000000001, 2000000002, 15, -6000000005, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006]], [9], [6]], [[[1000000, 999999, -888888, -123455, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444]], [17], [16]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, -9999, -99, 99, 999, -9999, -123457, -99999, 99999, -1111111]], [17], [15]], [[[-999999997, 2000000002, 1111, 15, 3000000003, -6000000006]], [6], [5]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 2222, 11, 3000000003, 1000000001]], [9], [8]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, 4444, 6660]], [23], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 555, 665, -77, -77, 88, 9, -4444, -4444, 9]], [17], [15]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, 100, 123, -123456790, 432, 10, 20, 123, 30, 666, 777, -10000, 123456789]], [21], [16]], [[[1111, 2222, -3334, 4444, -5555, -7777, 8888, -10000, 1110, 2220, 4440, -5550, -7770, 8880, -5554, -9990]], [16], [15]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14, 17, 2]], [27], [25]], [[[2000000002, 2000000002, 15, 3000000003, -6000000006, 3000000003]], [6], [5]], [[[1, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, -199, -9, -9, 14, -9]], [23], [20]], [[[1000000, 999999, -888888, -123456, -987654, -4444, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444]], [21], [20]], [[[-199, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20]], [25], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -99, -9]], [22], [20]], [[[1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20, 8]], [26], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444, 667, 11111, 666, 555, 9, 999999, -888888]], [24], [23]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789, -990]], [22], [15]], [[[6660, -987654321, 987654323, 987654321, -123456789, -99, -123456789, 123456789, 987654321, 123456789]], [10], [9]], [[[1, 10, 3, 4, 5, 123, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 18, 19, 20, -199, -99, -9, -9, -199]], [26], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -123457, -77, 9, 88, 9, -4444, -4444, 667, 11111, 666, 555, 9, 999999, -888888]], [24], [23]], [[[1, 2, 3, 4, 5, 6, 7, 8, 3333, -99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99]], [19], [17]], [[[-999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 5, -999999994]], [9], [7]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999995, -999999994, -999999993, 2000000000, 5000000005]], [13], [11]], [[[-999999994, 2000000001, 5000000005, -999999994, -6000000006, -999999994, -999999994, 5000000005]], [8], [7]], [[[1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -99, -9, 17]], [22], [20]], [[[-1, -10, 10, -11, -12, 554, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789, -991, 797]], [23], [17]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 11, 13, 14, 15, 16, 17, 18, 8881, 19, 20, -199, -99, 20, -9, -99]], [25], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20, -9]], [26], [22]], [[[1, 2, 1111, 3, 8, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -9999, 16, 18, 19, 17, 20, -99, -9, 17, 8, 1, -9]], [28], [25]], [[[1, 2, 3, 88, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 17, 20, -199, 665, -9, 19]], [25], [24]], [[[1111, 2222, -3333, 4444, -5555, -11, -7776, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -7776, -9990]], [22], [21]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000004, 2000000001]], [14], [13]]], [], [[[[-1, -2, 0]], [2], [0]], [[[1, 1, 2, -2, 3, 4, 5]], [7], [6]], [[[1, 6, 9, -6, 0, 1, 5]], [6], [5]], [[[1, 100, 98, -7, 1, -1]], [6], [4]], [[[-1, 0, 1]], [2], [1]], [[[0, -1, -20, 30]], [3], [1]], [[[-10, -11, -12, 13, 14, -20]], [6], [3]], [[[123, 456, 789, -987, -654, -321]], [6], [5]], [[[100, -250, 375, 500, -750]], [5], [4]], [[[-10, -20, -30, -40]], [4], [0]], [[[101, -202, 303, -404, 505, -606]], [6], [3]], [[[101, 303, -404, -606]], [4], [2]], [[[-5555, -12, 101, -202, 303, -404, 505, -606]], [8], [5]], [[[100, -250, 375, -750]], [4], [3]], [[[101, -202, 303, -403, 505, -606]], [6], [3]], [[[0, -1, -20, 30, 0, -20]], [4], [1]], [[[-1, -20, 30, 0, -20, 0]], [4], [1]], [[[-1, 0, 1, -1, 0]], [3], [1]], [[[15, -10, -11, -12, 13, 14, -20]], [7], [4]], [[[-1, -404, 30, 0, -20, 0]], [4], [1]], [[[99, -250, 375, -750]], [4], [3]], [[[303, -404, -606]], [3], [1]], [[[303, -405, -405, -606]], [4], [3]], [[[-2, -20, 30, 0, -20, 0]], [4], [1]], [[[101, -987, 303, -404, -606]], [5], [3]], [[[100, 790, 101, -202, 303, -403, 506, -606]], [8], [5]], [[[101, -202, 303, 505, -606]], [5], [3]], [[[-10, 123, -12, 13, 14, -20]], [6], [4]], [[[101, -202, 303, -403, -606]], [5], [2]], [[[99, 999, -202, 30, -5555, -202]], [6], [4]], [[[101, -202, 303, -404, 505, 302, -606, 302]], [8], [5]], [[[-10, -11, -12, 0, 14, -20]], [5], [2]], [[[-2, -20, 30, 0, 505, -11]], [5], [2]], [[[101, 101, -40, 303, -404, -606]], [6], [3]], [[[-1, 303, 1, -1, 0, 1]], [5], [3]], [[[99, 999, -202, 30, -5555, -202, 30]], [7], [5]], [[[15, -10, -11, -12, 13, 14]], [6], [4]], [[[101, -1, -40, 303, -404, -606]], [6], [2]], [[[123, 456, 789, -987, -654, -5555, -321]], [7], [6]], [[[101, 303, -404, 505, -606]], [5], [3]], [[[-10, -11, 505, 0, 14, -20]], [5], [2]], [[[-1, -404, 30, 999, -20, 0]], [5], [2]], [[[-1, -404, 30, 999, -20, 0, 0, 999]], [6], [3]], [[[101, -202, 303, -404, -606]], [5], [2]], [[[101, -404, 304, -404, 505, -606]], [6], [3]], [[[99, 999, -202, 30, -750, -5555, -202, 30]], [8], [5]], [[[101, -202, 303, -403, -606, 101]], [6], [3]], [[[-405, 303, -405, -405, -606]], [5], [4]], [[[101, -11, -202, -606, 505, -606]], [6], [2]], [[[15, -10, -11, -12, 14, -20]], [6], [3]], [[[-1, -404, 999, 30, 999, -20, 0, 0, 999, 0]], [7], [4]], [[[999, -1, -404, -750, 999, -19, 0]], [6], [3]], [[[99, -250, 375, -750, -750]], [5], [3]], [[[-251, 99, -250, 375, -750]], [5], [4]], [[[99, 999, -202, 30, -5555, -202, 30, -202]], [8], [5]], [[[15, -10, -11, -12, 14, 14, -20]], [7], [4]], [[[-10, -11, -12, 13, 14, -20, 14]], [7], [4]], [[[-10, 30, -11, 505, 0, 14, -20]], [6], [3]], [[[-405, 506, 303, -405, -405, -606]], [6], [5]], [[[-405, -456, 303, -405, -405, -606]], [6], [5]], [[[101, -202, 303, -404, 505, -605, 302]], [7], [4]], [[[-2, -20, 30, 0, -20, 0, -20]], [5], [1]], [[[-405, 506, -250, -405, -405, -606]], [6], [5]], [[[99, 999, -250, -202, 30, -5555, -202, 30, 999]], [9], [7]], [[[-605, 303, -405, -405, -5555, -606, -606]], [7], [4]], [[[-1, -404, 30, 999, -20, 0, 0, -19, 999]], [7], [4]], [[[-30]], [1], [0]], [[[-1, 0, 1, -1]], [3], [1]], [[[101, -11, -202, -606, 666, -606, 666]], [7], [3]], [[[-1, -404, 14, 30, 999, -20, 0, 0, -19, 999]], [8], [5]], [[[-12, -201, 101, -202, 303, -404, 505, -605, 302]], [9], [5]], [[[100, -605, 790, 101, -202, 303, -403, 506, -606]], [9], [5]], [[[-405, 506, 303, -405, -405, -606, -405]], [7], [6]], [[[0, 1, -1, 0]], [2], [1]], [[[99, 999, -203, 30, -5555, -202, 30, -202]], [8], [6]], [[[999, -202, 30, -5555, -202]], [5], [3]], [[[-2, 0]], [1], [0]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9]], [14], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9]], [23], [21]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [18], [17]], [[[-1, -2, 0, -123456789, 123456789]], [4], [2]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006]], [6], [4]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [20], [14]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, 999999]], [15], [14]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 999999, -22222, 3333, -4444, 555, 666, -77, 88, 9, 999999]], [16], [15]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [21], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [14], [13]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [16], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [24], [22]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [22], [16]], [[[1000000, 999999, 14, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [14], [13]], [[[1000000001, 2000000002, 3000000003, -4000000004, -6000000006]], [5], [3]], [[[1000000, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [13], [12]], [[[-1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [21], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, 3333]], [15], [14]], [[[-1, -10, -9999, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [24], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [17], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999]], [13], [12]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333]], [14], [13]], [[[0, -2, 0, -123456789, 123456789]], [3], [2]], [[[1, 2, 3, 4, 5, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [17], [16]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, -10]], [23], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [23], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777]], [24], [17]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10]], [21], [14]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 88]], [12], [11]], [[[1000000, 999999, -888888, -123456, 2000000002, 11111, 3333, -4444, 666, -77, 88, 88]], [12], [11]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [22], [16]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [22], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333, 999999]], [15], [14]], [[[1000000, -1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777]], [21], [15]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [23], [15]], [[[1000000, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [14], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 9999]], [19], [18]], [[[-1, -10, 10, -11, -12, 555, 796, 123456789, -990, -1000, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [23], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123]], [25], [18]], [[[1, 2, 3, 4, 5, 6, -7770, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [18], [17]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 999]], [18], [17]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 777, -10000, 123456789, 777, 777]], [21], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 999998, -987655, 9, -987654, -987654]], [18], [17]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006]], [8], [5]], [[[1000000000, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 1000000000]], [9], [6]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777]], [21], [15]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999]], [19], [18]], [[[1000000, 1000000000, 999999, 14, -123456, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [15], [14]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [21], [15]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002, 2000000002]], [10], [7]], [[[-1, -10, -11, 19, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [21], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [24], [22]], [[[1, -100, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [20], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 1000000, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [25], [23]], [[[1000000001, 2000000002, -4000000004, -6000000006]], [4], [2]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 9999]], [20], [19]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [22], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [26], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [25], [19]], [[[1000000, 987654321, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [15], [14]], [[[1000000, 999999, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999]], [12], [11]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, -10]], [22], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, 666, -77, 88, 88, -888888]], [12], [11]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655]], [14], [13]], [[[1000000001, 2000000002, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002, 2000000002]], [11], [8]], [[[1000000, 999999, 100, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999, 999999]], [13], [12]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, 10, 20, -3333, 30, -100, 777, -10000, 123456789, 777]], [23], [16]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777]], [22], [16]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, -77, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [23], [16]], [[[1, -100, 2, 3, 4, 5, 6, 7, 9, 13, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [20], [19]], [[[1000000, 999999, -888888, -123457, -987654, 11111, 3333, 666, -77, 88, 88, -888888]], [12], [11]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 7]], [22], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [22], [16]], [[[-10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10]], [19], [13]], [[[1000000, 1000000000, 999999, 14, -123456, -987654, 11111, -123457, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [16], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 555, 666, -77, 88, 9, 999999]], [14], [13]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [20], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 777, 777]], [24], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777]], [24], [18]], [[[1, 2, 3, 4, 5, 6, -999999993, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [24], [22]], [[[1000000, 8, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [17], [16]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[-1, 0, -10, 10, -11, -12, 555, 796, 123456789, -990, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [22], [15]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -999999991, 99999, -1111111]], [20], [19]], [[[1000000, 999999, -888888, -123457, -987654, 11111, 3333, 666, -77, 88, 88, 100]], [12], [11]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002]], [9], [6]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777]], [25], [19]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18, 8, 5]], [26], [24]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [26], [19]], [[[1000000001, 2000000002, -4000000003, -4000000004, -6000000006, -6000000006]], [6], [2]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 999999, -22222, -4444, 555, -77, 88, 9, 999999]], [14], [13]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 433, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [22], [16]], [[[1000000, 987654321, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, -987654, 88, 9, 999999]], [16], [15]], [[[-1, -10, -990, -11, 2219, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [26], [19]], [[[-1, -10, 10, -11, -12, 555, 797, 554, -45, -990, 2220, 100, -199, 432, 10, 20, -3333, 30, -100, 777, -10000, 123456789, 777]], [23], [17]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999]], [20], [18]], [[[1000000, 999999, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999, 9]], [13], [12]], [[[1000000001, 2000000002, -4000000003, -4000000004, -6000000006, 6, -6000000006, 1000000001]], [8], [4]], [[[1000000, -888888, -123456, 2000000002, 11111, 3333, -4444, 666, -77, 88, 88]], [11], [10]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -22222]], [17], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 555, 666, -77, 88, -987655, 11111, -888888]], [15], [14]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 666, 777, -10000, 19, 123456789, 777, -10]], [22], [15]], [[[1000000001, 2000000002, 3000000003, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006]], [8], [5]], [[[1000000, -1, -10, -11, -12, -9999, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777]], [22], [16]], [[[1000000, -888888, -123456, 11111, -22221, 3333, -4444, 666, -77, 88, 9, 999999]], [12], [11]], [[[-22221, 1000000001, 2000000002, 3000000003, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -6000000006]], [10], [6]], [[[1000000, 999999, -888888, -123456, -987654, -22222, 3333, -4444, 555, 666, -77, 88, 999998, -987655, 9, -987654, -987654]], [17], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, 666, -77, 88, 88, -22222, -888888, 88]], [14], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [18], [17]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002, 2000000002, 2000000002]], [11], [8]], [[[-1, -10, -11, 31, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [22], [16]], [[[1000000, -888888, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [12], [11]], [[[-1, -2, 0, -123456789, 123456789, 0]], [4], [2]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [21], [15]], [[[1000000001, 2000000002, 3000000003, -4000000004, -6000000006, 1000000001]], [6], [4]], [[[1000000, 1000000000, 999999, 14, -123456, -987654, 11111, -123457, 3333, -4444, 555, 666, -77, 88, 9, -987654, 1000000000]], [17], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999, -123456]], [15], [14]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [25], [19]], [[[1, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1000000001, -98, 3000000003, -6000000006, -98]], [5], [2]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, -987655, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [21], [15]], [[[1111, 2223, 9999, 4444, -10000, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444]], [21], [20]], [[[665, 1000000, 999999, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 999999, 999999]], [14], [13]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 5]], [20], [19]], [[[1000000, 999999, -888888, 2222, -123456, -987654, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [15], [14]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -990, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [19], [18]], [[[-1, -10, -11, -12, 555, 797, -45, 667, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777]], [22], [16]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002, 1000000001]], [9], [7]], [[[1000000001, 2000000002, 2000000002, -4000000003, -4000000004, -6000000006, -6000000006]], [7], [3]], [[[-1, -10, -987654321, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [26], [20]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 3000000003]], [7], [5]], [[[-1, -10, -11, 31, -12, 555, 797, -45, -990, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [21], [16]], [[[-1, 0, -10, 10, -11, 555, 796, 123456789, -990, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [21], [14]], [[[0, -2, 0, -123456789, 123456789, -2]], [4], [2]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777]], [25], [18]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, -990]], [26], [18]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777]], [24], [19]], [[[1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [23], [21]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 122, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [26], [19]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789, 777]], [27], [20]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 778, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [24], [16]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [19], [18]], [[[1, -100, 3, 4, 5, 6, 7, 9, 13, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [19], [18]], [[[1000000, 999999, -888888, 2222, -123456, -987654, 3333, -4444, 554, 666, -77, 88, -987655, 9, -987654, 999999]], [16], [15]], [[[-1, -10, -987654321, -990, -11, -12, -999, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [26], [20]], [[[999998, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333, 999999, 11111]], [16], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 797, 777, 777]], [24], [17]], [[[-1000, 1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [19], [18]], [[[-6000000006, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 7]], [20], [18]], [[[-1, -10, -987654321, -990, -11, -12, -999, -45, -990, -1000, 999, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777]], [26], [20]], [[[1000000, 999999, -888888, -4443, -123456, -987654, 11111, 3333, -4444, 666, -77, 88, 88]], [13], [12]], [[[-1000, 1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 123456788, 6660, -7770, 8880, -9990]], [19], [18]], [[[0, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 100]], [22], [17]], [[[999999, 999999, -888888, -123456, 2, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [14], [13]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 88, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 10]], [24], [18]], [[[-1, 10, -11, -12, 555, 797, -45, -990, -1000, -987655, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [20], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, -990]], [26], [18]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [26], [19]], [[[1000000, 999999, -888888, -987654, 11111, -123456, 3334, -4444, 666, -77, 88, 88]], [12], [11]], [[[-1, -10, 10, 665, -11, -12, 555, 797, 554, -45, -990, -1000, 100, -199, 432, -77, 10, 20, 30, 666, 777, -10000, 123456789, 777]], [24], [17]], [[[-1, -2, 0, -123456789, 123456789, 0, 0]], [4], [2]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111]], [19], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 20, 666, 777, -10000, 123456789, 777, 777, 797, 777]], [21], [14]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1]], [23], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30]], [26], [19]], [[[1, 11, 2, 3, 4, 5, 6, 7, 9, -99, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [20], [19]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002]], [10], [8]], [[[1000000, -888888, -123456, -987654, 11111, -22222, 3333, 555, 666, -77, 88, 9, 999999]], [13], [12]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, -99999, 666, -77, 88, 9, 3333]], [14], [13]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [22], [15]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, 99999]], [20], [19]], [[[1, -100, 3, 4, 5, 6, 7, 9, 13, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999, 6]], [20], [19]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 999]], [21], [19]], [[[0, -2, 0, -123456789, 123456789, -2, -2]], [5], [2]], [[[-1, -2, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -2, -10000, 123456789]], [22], [14]], [[[-1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, -99, 20, 30, 4, 666, 777, -10000, 123456789, 777]], [21], [14]], [[[-1, -990, -11, 2219, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [25], [19]], [[[1000000, 999999, 14, -123456, -987654, 11111, -4444, 3333, -4444, 555, 1000001, 666, -77, 88, 9, -987654]], [16], [15]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777]], [23], [18]], [[[999998, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 555, 666, -77, 88, 9, 3333, 11111]], [15], [14]], [[[1, 2, 3, 4, 5, 6, 7, 99999, 9, -1000000000, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [18], [16]], [[[-1, -10, -990, -11, -12, 797, 8880, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 777, 777, -45]], [26], [19]], [[[1, 2, 3, 5, 6, 7, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 9999]], [19], [18]], [[[-1, -2, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -2, -10000, 123456789, 555]], [23], [15]], [[[1, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111, 2]], [20], [19]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, 9, 999999]], [16], [14]], [[[999999, 999999, -888888, -123456, -987655, 2, 3333, -4444, 555, 666, -77, 88, -987655, -987654]], [14], [13]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 3334, 777, 777]], [24], [17]], [[[88, 999998, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [16], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 797, 777, 777, 123]], [24], [17]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -9999, 1110, 2219, -999999991, 4445, -3330, 4440, -5550, 6660, -10, 8880, -9990]], [21], [20]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 1000000, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18, -199]], [26], [24]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30, 777]], [27], [20]], [[[-1, -10, 10, -11, -12, 555, 797, 99, -45, -990, -1000, 100, -98, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [27], [19]], [[[-1, 10, -11, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [20], [14]], [[[1000000001, 3000000003, -4000000004, -6000000005, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [11], [8]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12]], [23], [18]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, -4444, 555, 666, -77, 88, 9, 999999]], [15], [13]], [[[1000000, 8, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 666, 88, -987655, 9, -987654, -987654, 11111]], [19], [18]], [[[2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 999]], [20], [18]], [[[1000000001, 3000000003, -4000000004, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [11], [9]], [[[1, 1, 10000, 2, 3, 4, 5, 19, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999, 3333]], [15], [14]], [[[1111, 2223, 7, 9999, -1000000000, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 4444]], [22], [21]], [[[1, 2, 10000, 2, 3, 4, 5, 19, -100, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111, 2]], [20], [18]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12]], [22], [18]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 100]], [21], [15]], [[[1000000001, 2000000002, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000002]], [10], [7]], [[[-1, -10, -11, -12, 555, 797, -45, 667, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, -10000]], [23], [16]], [[[1000000, 8, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 2000000002, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [18], [17]], [[[-1, -10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797]], [22], [16]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10]], [23], [17]], [[[665, 1000000, 999999, -123456, -987654, 11111, 3333, -4444, -77, 88, 9, 999999, 999999]], [13], [12]], [[[-1, -10, -11, -12, 555, 797, 99, -45, -990, -1000, 100, -98, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12, -990]], [27], [18]], [[[1000000, 0, -10, -11, -12, 555, 797, -45, -990, -1000, 100, -1, 123, 432, 10, 20, 30, 666, 777, -10000, -3332, 777, 777]], [22], [16]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 88, 123, 432, 10, 20, 30, 666, -5555, -10000, 123456789, 777, 777, 10]], [24], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 432, 19, 20, -199, -99, -9, 9]], [25], [23]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 13, 14, 15, 17, 18, 19, 20, -199, -99, -9, 18, 18]], [24], [22]], [[[1, -100, 3, 4, 5, 6, 7, 9, 13, 16, 99, -999, 16, 998, -9999, 9999, -99999, 99999, -1111111, 999]], [20], [19]], [[[1000000, -888888, -987654, 11111, -22222, 3333, 4445, 666, -77, 88, 9, 999999]], [12], [11]], [[[1000000001, 3000000003, -4000000003, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [11], [9]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, 9, 999999, -4444]], [17], [15]], [[[1000000, -888888, -987654, 11111, -22222, 3333, -4444, 666, -77, -22223, 88, 9, 999999]], [13], [12]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -990, 1110, 2219, -3330, 4440, -5550, 6660, -7770, -3331, 8880, -9990]], [20], [19]], [[[1000000001, 2000000002, 3000000003, -4000000004, -4000000004, -6000000006, 2000000002, -6000000006]], [8], [4]], [[[1000000, -888888, -123456, -987654, 11111, 999999, -22222, -4444, 555, -77, 88, 9, 999999]], [13], [12]], [[[1, 2, 10000, 2, 3, 4, 5, 19, -100, 8, 9, -99, 99, 999, -9999, 9999, -999999991, -123456789, -1111111, 2]], [20], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 999999]], [15], [14]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 3333, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1]], [24], [17]], [[[1000000, 999999, -888888, -123456, -987654, 778, -22222, 3333, 555, 666, -77, 88, -987655, 11111, -888888]], [15], [14]], [[[2000000002, -6000000005, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006, 2000000003, 2000000002, 2000000002, 2000000002]], [12], [8]], [[[-1000, 1111, 2222, -3333, 4444, -5555, 6665, -7777, 8888, -2, -9999, 1110, 2220, -3330, 4440, 123456788, 6660, -7770, 8880, -9990]], [20], [18]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, -11]], [22], [15]], [[[1000000001, 3000000003, -4000000003, -888888, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, -4000000003, 2000000002]], [12], [9]], [[[1000000001, 3000000003, -4000000004, -888887, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002]], [10], [8]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 797, 777, 777, -990, 797]], [28], [20]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 433, 432, 10, 20, 30, 666, 6666, 777, -10000, 123456789, 778]], [23], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, -10000]], [23], [16]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, -99, 5]], [20], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333]], [14], [13]], [[[1000000, 999999, -888888, -123456, -987654, -22222, 3333, -4444, 555, 666, -77, 88, 999998, -987655, 778, -987654, -987654, -77]], [18], [16]], [[[1, 2, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999, 5, -9999]], [22], [20]], [[[-1000, 1111, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [18], [17]], [[[-1, -10, -990, -12, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 777, 797]], [27], [21]], [[[-1, -10, 31, -12, 555, 797, -45, -990, -1000, 100, -1111111, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [22], [17]], [[[-1, -11, 10, -11, -12, 555, 797, 123, -45, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12, 797]], [23], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, 1000000]], [15], [14]], [[[0, -2, 0, 123456789, -2, -2]], [4], [1]], [[[999999, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [14], [13]], [[[1, 10000, 2, 3, 4, 3, 5, 19, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [20], [19]], [[[999999, -888888, -123456, 2, 3333, -4444, -4444, 555, 666, -77, 88, -987655, 9, -987654]], [14], [13]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 797, 777, 777, 777]], [24], [18]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777, -45]], [26], [20]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 999999, 3333]], [13], [12]], [[[1000000001, 2000000002, -4000000003, -4000000004, -6000000006, 6, -6000000006]], [7], [3]], [[[1000000, -888888, 11110, 11111, -22222, 3333, -4444, 666, -77, 88, 9, 999999]], [12], [11]], [[[1111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, 6660, -7770, 8880, -9990, -9, -5555, -3330]], [20], [19]], [[[1000000, 999999, -888888, -123456, -987654, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 778, -987654, -987654, -77]], [17], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, -4444]], [15], [14]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1]], [23], [15]], [[[-1, -999999999, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, -12, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30, 777]], [28], [22]], [[[-1, 10, -11, -12, 555, 797, -45, -990, -1000, -987655, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777]], [19], [14]], [[[8888, 999999, 14, -123456, 11111, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [13], [12]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18, 8, 5, 20]], [27], [25]], [[[-1, -10, 10, -11, 778, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 777, -10000, 123456789, 777, 777]], [22], [16]], [[[0, -1, -10, 10, -11, -12, 555, 797, 777, -45, -990, -9990, -1000, 100, 123, 432, 88, 30, 777, -10000, 123456789, 777, 777]], [22], [16]], [[[-1, -10, 10, -11, -12, 20, 555, 797, -45, 3334, -1000, 100, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [26], [20]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 18, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654]], [18], [17]], [[[1, 2, 5000000005, 3, 4, 5, 6, 9, -99, 99, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111, 999]], [19], [18]], [[[999998, 1000000, 999999, -888888, -987654, 3333, -4444, 555, 666, -77, 88, 9, 3333, 11111, 999998, -77]], [16], [14]], [[[-1, -10, 433, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 10, -1, -12]], [26], [19]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 3000000003, 2000000002]], [7], [6]], [[[-22221, 1000000001, 2000000002, -999999990, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -6000000006, -4000000004]], [11], [6]], [[[-1, -10, -990, -11, -12, 797, 16, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 3334, 777, 777]], [24], [17]], [[[8888, 999999, 14, -123456, 11111, 3333, -4444, 11112, 555, 666, -77, 88, 9, -987654]], [14], [13]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, 99999, 1]], [21], [20]], [[[0, -1, -10, 10, -12, 1000000001, 555, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1, 30]], [24], [17]], [[[0, -2, 0, -5556, 123456789, -2, -2]], [5], [2]], [[[1000000, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, 9, -987654]], [13], [12]], [[[1000000, 999999, -888888, -123456, -987654, 4440, 3333, 666, -77, 88, 88, -22222, -888888, 88]], [14], [13]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -9999, 1110, 2219, -999999991, 4445, -3330, 4440, -5550, 6660, -10, 8880, 998, -9990]], [22], [21]], [[[1, 2, 10000, 2, 3, 4, 5, 19, -9, 8, 1111, 9, -99, 99, -999, 999, -9999, 9999, -999999991, 99999, -1111111, 3, 19]], [23], [21]], [[[1000000001, -98, 3000000003, -6000000006, -97, -98]], [6], [2]], [[[1, 3, 4, 5, 6, 7, 9, -99, 99, -98, -999, 999, -9999, -999999995, 9999, -99999, 99999, -1111111]], [18], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 797, 777, 777, -990, 797, 797]], [29], [21]], [[[1000000, 999999, -888888, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, -1, 999999, -123456, -4444]], [18], [15]], [[[1000000, 999999, -888888, -123456, 2000000002, 11111, 3333, 666, -77, 88, 88]], [11], [10]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, 777, 777, -45]], [25], [19]], [[[-123456789, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111, 2]], [20], [19]], [[[-1, 10, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 20, 10, 30, 666, 777, -10000, 123456789, 777]], [19], [14]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 776, 797, 777, 777, 123, 797]], [26], [19]], [[[1, 2, 3, -1111111, 4, 5, 6, 7, 8, -999999999, -99, 99, -999, 999, -9999, -99999, 99999, -1111111, 4]], [19], [18]], [[[-1, -10, -11, 31, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, -10000]], [23], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 2219, 777, 777, 797, 777, 777, 100]], [27], [20]], [[[-1, -10, -990, -11, 2219, 797, -45, -990, -1000, 2000000003, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, -10, 777, 123, 123456789]], [28], [20]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 777, 797, 777, -11, 123456788]], [24], [18]], [[[1000000, 999999, 14, -123456, -987654, 11111, -4444, 3333, 122, -4444, 555, 1000001, 666, -77, 88, -987654]], [16], [15]], [[[1000000, -1, -10, -11, -12, -9999, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777, -45]], [23], [17]], [[[-1, -10, 10, -11, -12, 555, 797, 11, -45, -990, -1000, 100, 88, 123, 432, 10, 20, 30, 666, 777, -10000, 778, 777, 10]], [24], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9, 10]], [25], [23]], [[[1111, 2223, 9999, 4444, -10000, -5555, 6666, -7777, 8888, -9999, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 10000, 4444]], [22], [21]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 87, -987655, 999999]], [15], [14]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 122, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [25], [23]], [[[1000000001, 2000000002, 1000000001, 2000000002, -4000000003, -4000000004, -6000000006, -6000000006]], [8], [4]], [[[9, 1000000, 8, -888888, -123456, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 9, -987654, -987654, -123456]], [18], [17]], [[[-1, -999999999, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 9, -12, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 30, 777]], [28], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [25], [23]], [[[1111, -77, 2223, -3333, 4444, -5555, 6666, -7777, 8888, 1110, 2219, -3330, 4440, -5550, 6660, -7770, 8880, -9990, -5555, 1111, 8888, 6660]], [22], [21]], [[[-1000, 1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 123456788, -999999991, -7770, 8880, -9990, -1000]], [20], [18]], [[[8888, -888888, -5555, 14, -123456, 11111, 3333, -4444, 11112, 555, 666, -77, 88, 9, -987654]], [15], [14]], [[[-22221, 19, 2000000002, -999999990, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -6000000006, -4000000004]], [11], [6]], [[[1000000, 0, -10, -11, -12, 30, 555, 797, -45, -990, -1000, 100, -1, 123, 432, 10, 20, 30, 666, 777, -10000, -3332, 777, 777]], [23], [17]], [[[0, -10, 10, -11, -12, 555, 797, 123, -45, -990, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 101]], [22], [17]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 999999, 12, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 18]], [23], [21]], [[[1000000001, 3000000003, -4000000003, -888888, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, -4000000003, 2000000002]], [11], [9]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 10, 30, 666, -10000, 123456789, 777]], [20], [14]], [[[88, 999998, 18, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [17], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 777, 777, 123, 123456789, 777, -12]], [28], [21]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 797, 777]], [23], [16]], [[[1111, -1111111, 2223, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 6660, -7770, 8880, -9990, -9, -5555, 1111]], [21], [20]], [[[1000000001, 3000000003, -4000000004, -888887, 5000000005, -3333, 2000000002, 2000000002, 2000000002]], [9], [8]], [[[999998, 18, 1000000, 999999, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [16], [15]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, -1000, 100, 123, 432, 10, 20, 10, 30, 666, 777, -10000, 123456789, 777, 666]], [23], [16]], [[[1000000, 999999, -123456, -987654, 11111, 3333, -4444, -99999, 666, -77, 88, 9, 3333, -888887, 9]], [15], [14]], [[[1000000, -888888, -987654, 11111, -22222, 3333, 666, -77, -22223, 88, 9, 999999]], [12], [11]], [[[1, 2, 3, 4, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111, 9999]], [18], [17]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, -4444, 11111]], [16], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 1000001, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [25], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, -987655, 999999, -4444, -77]], [17], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -9999, 123456788, 777, 797, 777, 777, -999999991]], [24], [18]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, -99999, 99999, -1111111]], [17], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, 100, 123, -1111111, 10, 20, 30, 666, 123456788, 777, 777, 797, 777, -11, 123456788]], [22], [16]], [[[1, 2, 3, 4, 7, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9]], [24], [22]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 101, 777, 777, 797, 777, 777]], [26], [19]], [[[0, -1, -10, 10, -11, 5, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -999999998, -10000, 123456789, 777, 777, -1]], [25], [18]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 797, 797, 777, 777, -990, 797, 797, -1000]], [30], [21]], [[[1000000, 999999, -888888, -123456, -987653, 11111, -22222, 3333, -4444, -77, 666, -77, 999999, 3333, -77]], [15], [12]], [[[-1, -10, 776, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 29, 666, 777, -9999, 798, 123456788, 777, 777, 797, 777, 777]], [26], [20]], [[[0, -1, -10, 10, -11, -12, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1]], [22], [14]], [[[-1, -10, -990, -11, -12, 797, 1112, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, -990]], [27], [19]], [[[-1, -10, 10, -11, -12, -99, 555, 797, -45, -990, -1000, 100, 123, 432, -12, 10, 20, 10, 30, 666, 777, -10000, 29, 123456789, 777, 10, -1, -12]], [28], [20]], [[[-1111111, 1, 2, 3, -1111111, 4, 5, 6, 7, 8, 9, -999999999, -99, 99, 999, -9999, -99999, 99999, -1111111, 99999]], [20], [19]], [[[-1, -10, -11, 19, 555, 797, -45, -990, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777]], [20], [15]], [[[-22221, 1000000001, 2000000002, 3000000003, -4000000004, -6000000006, 5000000005, 5000000005, -6000000006, -123456789]], [10], [7]], [[[1111, 2223, 7, 9999, 4444, -7770, -5555, 6666, -7777, -990, 1110, 2219, -3330, 4440, -5550, 6659, -7770, -3331, 8880, -9990]], [20], [19]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000003, -6000000006, 2000000002, 2000000002]], [10], [7]], [[[-1, -999999991, -11, 19, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 3, -10000, 123456789, 777, 777, 432]], [22], [17]], [[[1, 2, 3, 4, 5, 6, 7, 8, 1000001, 667, 9, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [26], [24]], [[[-1, -10, -11, 31, -12, 555, -888887, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, 123456789, 777, 777]], [21], [16]], [[[1000000, -1, -10, -11, -12, -9999, 555, 797, -45, -990, -1000, 100, 555, 123, 432, 10, 20, 30, 666, 777, 433, -10000, 777]], [23], [17]], [[[1000000, 999999, -888888, -987654, 11111, 999999, -22222, 3334, -4444, 555, 666, -77, 88, 9, 999999]], [15], [14]], [[[-1, -10, 10, -10, -12, 555, 797, 123456789, -990, -1000, 100, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [23], [15]], [[[-987656, -987655, -1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 778, -5555, 123, 432, 10, 20, 666, 777, -10000, 123456789, 777, -10, -10]], [26], [18]], [[[-1, -990, -11, 2219, 797, -45, -990, -1000, -3332, 123, -1111111, 10, 20, 30, 666, 19, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789]], [26], [20]], [[[1000000, 999999, -888888, -123456, -987654, 3333, -4444, 555, 666, -77, 88, 9, -987654, 555]], [14], [13]], [[[1000000, -888888, -123456, -987654, 11111, -22222, 3333, 666, -77, 88, 9, 999999, -22221, -888888]], [14], [13]], [[[1, 1, 10000, 2, 3, 4, 5, 19, 8, 9, -99, -99, 99, -999, 999, -9999, 9999, 99999, -1111111]], [19], [17]], [[[1000000, 999999, -888888, -123456, -987654, -999999999, 11111, -22222, 3333, -999999996, -4444, 666, -77, 88, 9, 999999, -123456]], [17], [16]], [[[-1, -10, -990, -11, -12, 797, 16, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456788, 777, 777, 3334, 777, 777, -1000, -10]], [26], [17]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 432]], [21], [15]], [[[-1, -11, 10, -11, 554, 797, 123, -45, -1000, 100, -3330, 432, 10, 88, -999999990, 777, 555, 123456789, 777, 777, -12, 797]], [22], [18]], [[[1000000, -888888, -987654, 11111, -22222, 3333, 666, -77, 88, 9, 999999]], [11], [10]], [[[-1, -10, 10, -11, -12, 555, 797, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 777, -10]], [21], [14]], [[[0, -1, -10, 10, -11, -12, 555, 797, -45, -990, -9990, -1000, 100, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, 777]], [23], [17]], [[[1000000001, 3000000003, -4000000003, -888888, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, -4000000003, 2000000002, 2000000002, 1000000001]], [13], [11]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, -987654319, 777, 797, 777, 777, 123, -990, 10]], [27], [19]], [[[-1, -2, 0, 123456789, 0]], [3], [1]], [[[-1, 10, -11, -12, 797, -45, -990, -1000, -1000, 123, 432, 20, 10, 30, 666, 777, -10000, 123456789, 1000001, 123]], [20], [14]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000003, -22223, -6000000006, 2000000002, 2000000002]], [11], [8]], [[[0, -1, -10, -9, -12, 1000000001, 555, 797, -45, -990, -9990, -1000, 123, 432, 10, 88, 30, 777, -10000, 123456789, 777, 777, -1, -1, 30]], [24], [16]], [[[1000000, 1000000000, 999999, 14, -123456, -987655, 11111, 3333, -4444, 555, 666, -77, -100, 88, 9, -987654]], [16], [14]], [[[1000000, -1, -10, -9999, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 777, 777]], [20], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, 20]], [24], [22]], [[[-1, -10, -990, -11, -12, 797, -5555, -990, -1000, 100, 123, 778, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 2219, 777, 777, 797, 777, 777, 100, 100, 778]], [29], [22]], [[[-1, -123457, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 797, 797, 777, -990, 797, -990]], [30], [21]], [[[-1, -10, 10, -11, -12, 555, 797, 123456789, -990, -1000, 100, 123, 432, 10, 20, 667, 777, -10000, 123456789, 777, -10]], [21], [14]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 123456788, 123, -1111111, 100, 10, 20, 30, 666, 777, -10000, 123456789, 777, 797, 777, 777, -990]], [25], [17]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, -99999, 666, -77, 88, 9, 3333, -888887, 9, 999999]], [17], [16]], [[[1000000001, 2000000002, 3000000003, -4000000004, 5000000005, -6000000006, 2000000002, 6659, 2000000002]], [9], [7]], [[[1000000001, 2000000002, 3000000003, 666, -4000000004, 5000000005, -6000000006, 2000000002, -6000000006]], [9], [6]], [[[1000000, 999999, -888888, -5554, -123456, -987654, 666, 3333, -4444, 555, 666, -77, 88, 9, -987654, 555]], [16], [15]], [[[-123456789, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, 999, -9999, 9999, -999999991, 99999, -1111111]], [19], [18]], [[[1000000001, 2000000002, 2000000002, -4000000003, -4000000004, -6000000006, -6000000006, -6000000006]], [8], [3]], [[[-123456789, 2, 10000, 2, 3, 4, 5, 19, 7, 8, 9, -99, 99, -9999, 9999, -999999991, 99999, -1111111]], [18], [17]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 777, 777, 797, 777]], [22], [15]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -10000, 123456789, 777, 777, 797, 777, 777, 123, 123456789, 10]], [27], [20]], [[[1000000001, -98, 3000000003, -6000000006, -98, 1000000001, -98, -98]], [8], [3]], [[[1000000001, 3000000003, -4000000003, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002, 2000000002]], [12], [10]], [[[1, 2, 3, 4, 5, 6, 7, 8, 1000001, 9, 10, 11, 13, 14, 15, 9, 16, 17, 18, 19, 20, -199, -99, -9]], [24], [22]], [[[1000000001, 2000000002, 1000000001, -999999994, 1000000002, -4000000003, -4000000004, -6000000006, -6000000006, 1000000001]], [10], [6]], [[[1000000001, 3000000003, -4000000004, -888888, 5000000005, -6000000006, 2000000002, 2000000002, 2000000002, -3332, 2000000002]], [11], [9]], [[[-1, -10, 10, -11, -12, 555, 797, 123, -45, -990, 31, -1000, 100, -3330, 432, 10, 88, -999999990, 777, -10000, 123456789, 777, 777, 797, -10]], [25], [18]], [[[-1000, 1111, 2222, -3333, 4444, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990]], [18], [17]], [[[1000000, 999999, -123456, -987654, -888888, 11111, -9, 3333, -4444, 555, 666, -77, 88, -1, 999999, -123456, -4444]], [17], [14]], [[[88, 999998, 1000000, 999999, 1000000001, -888888, -987654, 11111, 3333, -4444, 666, -77, 88, 9, 3333, 999999, 11111]], [17], [16]], [[[-1, -10, -990, -11, -12, 797, -45, -990, -1000, 100, 123, -1111111, 10, 20, 30, 666, 777, -7777, -10000, 777, 777, 797, 777]], [23], [16]], [[[-1, -2, 0, 3, 123456789, 0, 0, 3]], [5], [3]], [[[1000000, 1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 666, -77, 88, 999999, 3333, -4444, 11111]], [17], [16]], [[[-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000]], [1], [0]], [[[-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000, 1, 0]], [2], [1]], [[[-7]], [1], [0]], [[[-1, 2000000002, 0, -123456789, 123456789, 0]], [4], [3]], [[[1000000001, 2000000002, 13, -4000000004, 5000000005, -6000000006]], [6], [4]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9]], [24], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [16], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444]], [17], [16]], [[[1000000, 999999, -888888, -123456, 5000000005, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [17], [16]], [[[1000000001, 2000000001, 13, -4000000004, 5000000005, -6000000006]], [6], [4]], [[[-1, -10, 10, -11, -12, 555, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [19], [13]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444]], [17], [16]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444]], [18], [17]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9]], [23], [21]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [24], [21]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006]], [6], [4]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, 88, 9, -4444, -4444]], [19], [18]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -999999994]], [7], [5]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [23], [20]], [[[-987654321, 987654322, 123456789, -11, -123456789, -123456789, 987654321]], [7], [6]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, -6000000006]], [6], [4]], [[[1, 2, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14]], [24], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444, -987654]], [19], [18]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006]], [7], [4]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [21], [20]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 3000000003]], [6], [5]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14]], [25], [23]], [[[1000000001, -999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994]], [8], [6]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [18], [16]], [[[1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 100, 6660, -7770, -4000000004, -9990]], [18], [17]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, -123456, 17, 18, 19, 20, -199, -99, -9, -9, 7]], [24], [21]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 665, -77, 88, 9, -4444, -4444]], [16], [15]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 5000000005]], [9], [7]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 5, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [25], [22]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, 999, -9999, 9999, -99999, 99999, -1111111]], [17], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 665, -77, 88, 9, -4444, -4444, 9]], [17], [16]], [[[1111, 2222, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [20], [19]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15]], [24], [22]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -999999994, -6000000006, -999999994, -999999994, 5000000005]], [10], [8]], [[[1000000, 999999, -888888, -123456, 5000000005, -4443, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [18], [17]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14]], [25], [23]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14, 8]], [26], [24]], [[[1111, 2222, -3333, 4444, -5555, 6666, -7777, 8888, -9999, 1110, 2220, -3330, 4440, 100, 88, 6660, -7770, -4000000004, -9990]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111]], [18], [17]], [[[1000000, 999999, -888888, -123456, 5000000005, -4443, -987654, -123457, 11111, -22222, 3333, -4444, 555, 666, -77, -999999997, 0, 9, -4444, -4444]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444]], [20], [19]], [[[1000000001, 2000000002, 15, 3000000003, 5000000005, -6000000006, 3000000003]], [7], [6]], [[[-999, 1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -3333, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [20], [19]], [[[0, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111]], [18], [17]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [24], [21]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [24], [21]], [[[1000000001, 7, 3000000003, -4000000004, 5000000005, -6000000006]], [6], [4]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -99, -9, 17]], [24], [22]], [[[1000000001, -999999994, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 5000000005]], [10], [8]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 2, 30, 666, 777, -10000, 123456789, 432]], [22], [16]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 2000000000, 5000000005]], [12], [10]], [[[-1, -10, 10, -11, -12, 555, -45, -990, -1000, 100, 123, 432, 10, 20, 30, 666, 777, -10000, 123456789, 556, -990]], [21], [14]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 20, 2, 30, 666, 777, -10000, 123456789, 432, -1000]], [23], [16]], [[[5, -999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 5]], [9], [7]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, 665, -9]], [24], [23]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 17, 18, 19, 20, -199, -4444, -9, 15]], [25], [24]], [[[1000000001, 2000000002, 15, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006]], [8], [6]], [[[1, -999999997, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15, 12]], [25], [23]], [[[1000000001, 6666, 13, -4000000004, -6000000006, -4000000004]], [6], [3]], [[[1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -99, -9, 17]], [23], [21]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, 666]], [20], [19]], [[[-1, -10, 10, -11, -12, 555, 1, 797, -45, -990, -1000, 100, 123, 10, 20, 2, 30, 666, 777, 123, 123456789, 432, -1000]], [23], [17]], [[[1000000001, -999999994, 2000000001, 5000000005, -999999994, -6000000006, -999999994, -999999994, 5000000005]], [9], [8]], [[[1000000, 999999, 1111, -123456, 5000000005, -4443, -987654, -123457, 11111, -22222, 3333, -4444, 555, 666, -77, -999999997, 0, 9, -4444, -4444]], [19], [18]], [[[1000000, 999999, -888888, -123456, 5000000005, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444, 88]], [18], [17]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, 432, 10, 30, 666, 777, -10000, 123456789, -11]], [20], [13]], [[[-1, -10, 10, -11, -12, 555, -45, -990, -1000, 100, 432, 10, 20, 30, 666, 777, -10000, 123456789, 556, -990]], [20], [13]], [[[1, 2, 3, 4, 5, 6, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 19, 20, -199, -99, -9]], [24], [22]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 2222, 3000000003]], [7], [6]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99]], [20], [18]], [[[1000000001, 2000000002, 3000000003, -6000000006, -6000000006]], [5], [3]], [[[1, 2, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, -199, -9, -9, 14]], [25], [23]], [[[1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -9]], [23], [19]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20]], [25], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111, -4444]], [19], [18]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, -9999, -99, 99, 999, -9999, 9999, -99999, 99999, -1111111]], [17], [15]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, 99, 14, 10]], [26], [25]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 10, 20, 30, 666, 777, -10000, 123456789]], [18], [12]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [21], [15]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -999, 18, 19, 20, -199, -99, -9, -9]], [25], [22]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789]], [21], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666]], [19], [18]], [[[1000000001, 2000000001, 13, -4000000004, 1110, 5000000005, -6000000006]], [7], [5]], [[[1000000001, 2000000002, -9990, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006]], [8], [6]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666, 555, 9]], [21], [20]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 13, 18, 19, 20, -199, -9, 14]], [25], [24]], [[[1000000001, 1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006]], [8], [5]], [[[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 13]], [24], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 555, 665, -77, 88, 9, -4444, -4444, 9]], [16], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 1000000, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666]], [19], [18]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, -999999994, 5000000006, 2000000000, 5000000005]], [13], [11]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999993, -999999994, 2000000000, 5000000005]], [12], [10]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444, -987654, -987654]], [20], [19]], [[[1000000001, -999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 9]], [9], [7]], [[[1, 2, 3, 88, 4, 5, 16, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, 665, -9, 19]], [27], [26]], [[[1, 2, 3, 4, 5, 6, 7, -6000000006, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [24], [20]], [[[1000000001, 2000000002, 15, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006, 1000000001]], [9], [7]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 123, 30, 666, 777, -10000, 123456789]], [22], [16]], [[[1, 2, 3, 4, 5, 4444, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [25], [22]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -999, 18, 19, 20, -199, -99, -9, -9, 19]], [26], [23]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, -99999, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, 2222, -99999]], [23], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99, 1]], [22], [20]], [[[1, 2, 2000000001, 4, 5, 6, 7, 8, 18, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14]], [25], [23]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 13, 18, 19, 20, -199, -9]], [24], [23]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14, 17]], [26], [24]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -199, -99, -9, 3]], [24], [22]], [[[1000000001, 2000000002, 15, 3000000003, -6000000006, 3000000003]], [6], [5]], [[[-10000, 2, -1, 3, 4, 5, 6, 7, 8, -9999, -99, 99, 999, -9999, 9999, -99999, 99999, -1111111]], [18], [15]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, -4444, 10]], [22], [21]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, -1000, 100, 123, -123456790, 10, 20, 30, 666, 777, -10000, 123456789]], [20], [14]], [[[1111, -10000, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [20], [19]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -45, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9]], [25], [23]], [[[1000000001, 2000000001, 13, -4000000004, 1000000001, 1110, 5000000005, -6000000006]], [8], [6]], [[[1111, -10000, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -3333, 2220, -3330, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [20], [19]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -123456790, 432, 20, 30, -11, 666, 777, -10000, 123456789]], [21], [14]], [[[1, 2, 3, 8, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -99, -9, 17, 8, 1]], [27], [25]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, -4444, 10]], [21], [20]], [[[1111, 2222, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, -9990]], [21], [20]], [[[1000000001, 2000000002, 15, 3000000003, -6000000006, 1, 3000000003, -6000000006]], [8], [6]], [[[-987654321, 987654322, 123456789, -987654320, -11, -123456789, -123456789, 987654321]], [8], [7]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 9998, 99999, -1111111, -99, 1]], [23], [21]], [[[1, 2, 2000000001, 4, 5, 6, -999999990, 7, 8, 18, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 17, 20, -199, -99, -9, 14]], [26], [24]], [[[2222, 4444, -5555, -11, -7777, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [18], [17]], [[[1, 2, 3, 4, 5, 8, 8, 5000000006, 10, 11, 12, 13, 14, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15]], [23], [21]], [[[666, 1000000001, 2000000001, 13, -4000000004, 5000000005, -6000000006]], [7], [5]], [[[1, 2, 3, 88, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -199, 665, -9, 19]], [26], [25]], [[[1000000001, 2000000002, 3000000004, -123456790, 5000000005, -6000000006, -6000000006]], [7], [5]], [[[-1, -10, 10, -11, -12, -999999997, 797, -990, -1000, 100, 123, -123456790, 432, 10, 20, 123, 30, 666, 777, -10000, 123456789, -123456790]], [22], [16]], [[[1000000001, 2000000002, 15, 3000000003, -6000000006, 1, 3000000003, 1000000001, -6000000006, 3000000003]], [10], [8]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 13, 18, 19, 20, -199, -9, 10]], [25], [24]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 10, -4444, -4000000004, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444, -4444, 10]], [21], [19]], [[[1000000001, 7, 3000000003, -4000000004, 5000000005, -6000000006, 3000000003]], [7], [5]], [[[1000000, 999999, -888888, -123456, 11111, -22222, 3333, -4444, 555, 665, -77, 88, 9, -4444, -4444, 9]], [16], [15]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 17]], [25], [22]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 2222, 3000000003, 2222]], [8], [7]], [[[1, 2, 3, 4, 5, 123, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [25], [22]], [[[1, 2, 3, 4, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 9998, 99999, -1111111, -99, 1]], [22], [20]], [[[5, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 5]], [8], [6]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, 99, 14, 10]], [25], [24]], [[[-1, -10, 10, -11, -12, 797, -45, -990, -1000, 100, 123, 10, 20, 30, 666, 777, -10000, 10]], [18], [12]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -99, -9, 3]], [23], [21]], [[[1, 2, 3, 4, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, -199, -9, -9, 14]], [24], [22]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -99, -9, 3, 16, 9]], [25], [23]], [[[1000000, 999999, -123456, -987654, 11111, -22222, 3333, 10, -4444, 16, 666, -77, 9, -7777, 88, -4444, -4444, 666]], [18], [17]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -6000000006, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000005]], [14], [12]], [[[-1, 2000000002, 0, -123456789, 123456789, 0, -1]], [5], [3]], [[[5, -999999994, 5000000005, 5, 2000000001, -4000000004, 5000000005, -6000000006, 6660, 5]], [10], [8]], [[[1000000001, -999999994, -123456790, 8, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 2000000000, 5000000005]], [12], [10]], [[[1, 2, 3, 4, 5, 6, 8, -4444, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 797, 20, -199, -99, -9, 3, -199, -123456788, 16]], [27], [25]], [[[1, 2, 3, 4, 5, 123, 7, 8, 9, -7769, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [25], [22]], [[[-10000, 2, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999]], [16], [14]], [[[1000000002, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -6000000006, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000005, 2000000001]], [15], [13]], [[[5, -999999994, 5000000005, 5000000005, 5, 2000000001, -4000000004, 5000000005, -6000000006, 6660, 5]], [11], [9]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006, -999999994]], [8], [5]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 1000000, 555, 666, -77, 9, 88, 9, -4444, -4444, 11111, 666, -22222]], [20], [19]], [[[2000000001, 13, -4000000004, 5000000005, -6000000006]], [5], [3]], [[[-999, 1, 2, 3, 4, 5, 6, 8, 9, -99, 99, -3333, -999, 999, -9999, 9999, -99999, 99999, -1111111]], [19], [18]], [[[1, 2, 3, 4, 5, 8, 8, 5000000006, 10, 11, 12, 13, 14, 12, 15, 15, 17, 18, 19, 20, -199, -99, -9, 15]], [24], [22]], [[[1111, 2222, 4444, -5555, -11, -7777, 8888, -4443, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [21], [20]], [[[1000000002, -999999994, -123456790, 8, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 2000000000, 5000000005, 1000000002]], [13], [11]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000005]], [13], [12]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, -99, -9, 17]], [23], [21]], [[[1000000, 999999, 1111, -123456, 5000000005, -4443, -987654, -123457, 11111, -22222, 3333, -4444, 555, 666, -77, -999999997, 0, 9, -4444]], [18], [17]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 11, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9]], [23], [20]], [[[1000000001, 2000000002, 3000000003, -6000000006]], [4], [3]], [[[1, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14]], [23], [21]], [[[1000000001, 7, -4000000004, 5000000005, -6000000006]], [5], [3]], [[[1000000, 999999, -888888, -123456, -987654, -3333, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111]], [19], [18]], [[[2000000002, 13, -4000000004, 5000000005, -6000000006]], [5], [3]], [[[1, 2, 3, 4, 5, 123, 7, 8, -7769, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, -199]], [24], [21]], [[[-1, -10, 10, -11, 555, -45, -990, -1000, 100, 432, 10, 20, 30, 666, 777, -10000, 123456789, 556, -990]], [19], [12]], [[[1, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, -199, -9, -9, 14]], [22], [20]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -77, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99]], [21], [18]], [[[1000000001, -999999994, 2000000001, -4000000004, 5000000005, -6000000006, -6000000006, -999999994, 5000000005]], [9], [6]], [[[8, 1000000001, 7, 3000000003, 5000000005, -6000000006, 3000000003, 3000000003]], [8], [7]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, -3333]], [21], [20]], [[[1, 2, 3, 4, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 9999, -99999, 9998, 123, -1111111, -99, 1]], [21], [19]], [[[1000000001, 2000000002, 3000000003, 8889, -6000000006, 3000000003]], [6], [5]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -12, 665, -77, 88, 9, -4444, -4444, 11111, -888888]], [19], [18]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 665, -77, -77, 88, 9, -4444, -4444, 9]], [18], [16]], [[[1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -999, 18, 19, 20, -199, 8, -9, -8, 19]], [26], [24]], [[[1000000, 999999, -888888, -123456, -987654, -3333, 11111, -22222, 3333, -4444, 555, 99, 665, -77, 88, 9, -4444, -4444, 11111, -888888]], [20], [19]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -987654, -4444, -77]], [19], [17]], [[[1, 2, -5555, 3, 4, 2, 5, 665, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, 99, 14, 10]], [26], [25]], [[[1000000001, -999999994, -123456790, -999999993, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999993, -999999994, 2000000000, 5000000005]], [13], [11]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, -99, 99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99, 1]], [21], [19]], [[[1000000, 999999, -888888, -123456, -4443, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [17], [16]], [[[-99999, 1000000001, 2000000002, 15, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006]], [9], [7]], [[[1111, -10000, -3333, 4444, -5555, -7777, 8888, -9999, 1110, -3333, 2220, 4440, -5550, 2220, 6660, -7770, 8880, -9990, 8888]], [19], [18]], [[[1111, 2222, -3333, 4444, -5555, -11, -7776, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990]], [21], [20]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, 10, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444]], [18], [17]], [[[1, 2, 3, 4, 6, 7, 8, 9, -99, 99, -999, -999, -999999990, 999, -9999, 1109, -99999, 9998, 99999, -1111111, -99, 1]], [22], [20]], [[[1, 2, 3, 8, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -9999, 16, 17, 18, 19, 17, 20, -99, -9, 17, 8, 1, -9]], [28], [25]], [[[2000000002, 15, 2000000001, 3000000003, 5000000005, -6000000006, 3000000003]], [7], [6]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444, 88]], [17], [16]], [[[-99, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, -123456, 17, 18, 19, 20, -199, -99, -9, -9, 7]], [25], [21]], [[[-10000, 2, 4, 5, 6, 7, 8, 9, -99, 99, -999, 999, -9999, 9999, -99999, 99999, 9999]], [17], [15]], [[[1000000, 999999, -888888, -123456, 5000000005, 11111, -22222, 3333, -4444, 555, 666, -77, 88, 9, -4444, -4444]], [16], [15]], [[[1000000, 999999, -888889, -123456, 5000000005, 11111, -22222, 3333, -4444, -76, 555, 666, 88, 9, -4444, -4444]], [16], [15]], [[[1000000001, 2000000002, 15, -6000000005, 3000000003, 5000000005, -6000000006, 3000000003, -6000000006]], [9], [6]], [[[1000000, 999999, -888888, -123455, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444]], [17], [16]], [[[-10000, 2, 3, 4, 5, 6, 7, 8, -9999, -99, 99, 999, -9999, -123457, -99999, 99999, -1111111]], [17], [15]], [[[-999999997, 2000000002, 1111, 15, 3000000003, -6000000006]], [6], [5]], [[[1000000001, 2000000002, 3000000003, 5000000005, -6000000006, 2222, 11, 3000000003, 1000000001]], [9], [8]], [[[1111, 2222, -3333, 4444, -5555, -11, -7777, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -9990, 4444, 6660]], [23], [22]], [[[1000000, 999999, -888888, -123456, -987654, 11111, 3333, -4444, 555, 665, -77, -77, 88, 9, -4444, -4444, 9]], [17], [15]], [[[-1, -10, 10, -11, -12, -999999997, 797, -45, -990, 100, 123, -123456790, 432, 10, 20, 123, 30, 666, 777, -10000, 123456789]], [21], [16]], [[[1111, 2222, -3334, 4444, -5555, -7777, 8888, -10000, 1110, 2220, 4440, -5550, -7770, 8880, -5554, -9990]], [16], [15]], [[[1, 2, -5555, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -9, -9, 14, 17, 2]], [27], [25]], [[[2000000002, 2000000002, 15, 3000000003, -6000000006, 3000000003]], [6], [5]], [[[1, 3, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, -199, -9, -9, 14, -9]], [23], [20]], [[[1000000, 999999, -888888, -123456, -987654, -4444, 11111, -22222, 3333, 10, -4444, 555, 16, 666, -77, 9, -7777, 88, 9, -4444, -4444]], [21], [20]], [[[-199, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20]], [25], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -99, -9]], [22], [20]], [[[1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20, 8]], [26], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, 666, -77, 9, 88, 9, -4444, -4444, 667, 11111, 666, 555, 9, 999999, -888888]], [24], [23]], [[[-1, -10, 10, -11, -12, 555, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789, -990]], [22], [15]], [[[6660, -987654321, 987654323, 987654321, -123456789, -99, -123456789, 123456789, 987654321, 123456789]], [10], [9]], [[[1, 10, 3, 4, 5, 123, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 18, 19, 20, -199, -99, -9, -9, -199]], [26], [23]], [[[1000000, 999999, -888888, -123456, -987654, 11111, -22222, 3333, -4444, 555, -123457, -77, 9, 88, 9, -4444, -4444, 667, 11111, 666, 555, 9, 999999, -888888]], [24], [23]], [[[1, 2, 3, 4, 5, 6, 7, 8, 3333, -99, -999, -999999990, 999, -9999, 9999, -99999, 99999, -1111111, -99]], [19], [17]], [[[-999999994, 5, 2000000001, -4000000004, 5000000005, -6000000006, -999999994, 5, -999999994]], [9], [7]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, -4000000004, 5000000005, -6000000006, -999999995, -999999994, -999999993, 2000000000, 5000000005]], [13], [11]], [[[-999999994, 2000000001, 5000000005, -999999994, -6000000006, -999999994, -999999994, 5000000005]], [8], [7]], [[[1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, -99, -9, 17]], [22], [20]], [[[-1, -10, 10, -11, -12, 554, 797, -45, -990, -1000, 100, 123, -123456790, 432, 10, 20, 30, 666, 777, -10000, 123456789, -991, 797]], [23], [17]], [[[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 11, 13, 14, 15, 16, 17, 18, 8881, 19, 20, -199, -99, 20, -9, -99]], [25], [22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -199, -99, -9, -9, 20, -9]], [26], [22]], [[[1, 2, 1111, 3, 8, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -9999, 16, 18, 19, 17, 20, -99, -9, 17, 8, 1, -9]], [28], [25]], [[[1, 2, 3, 88, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 17, 20, -199, 665, -9, 19]], [25], [24]], [[[1111, 2222, -3333, 4444, -5555, -11, -7776, 8888, -9999, 1110, -7776, 2220, -3330, 4440, -5550, 6660, -7770, 8880, -9990, 8888, -7776, -9990]], [22], [21]], [[[1000000001, -999999994, -123456790, 5000000005, 2000000001, 9999, 5000000005, -999999994, -999999994, 5000000006, 2000000000, -6000000006, 5000000004, 2000000001]], [14], [13]]]]"}
{"task_id": "HumanEval/109", "requirement": "from typing import List\n\n\ndef move_one_ball(arr: List[int]) -> bool:\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    n = len(arr)\n    sorted_arr = sorted(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    n = len(arr)\n    sorted_arr = sorted(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    n = len(arr)\n    sorted_arr = sorted(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    n = len(arr)\n    sorted_arr = sorted(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    n = len(arr)\n    sorted_arr = sorted(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    n = len(arr)\n    sorted_arr = sorted(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False"], "outputs": "[[True], [False], [True], [True], [True], [True], [True], [True], [False]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[3, 4, 5, 1, 2]], [[3, 5, 4, 1, 2]], [[]], [[1]], [[1, 2, 3, 4, 5]], [[5, 1, 2, 3, 4]], [[2, 3, 4, 5, 1]], [[4, 5, 1, 2, 3]], [[5, 4, 3, 2, 1]]]", "input_output_examples": "[[[[3, 4, 5, 1, 2]], [[3, 5, 4, 1, 2]]], [[True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/110", "requirement": "from typing import List\n\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    It is assumed that the input lists will be non-empty.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_in_lst1 = sum((1 for num in lst1 if num % 2 != 0))\n    even_in_lst2 = sum((1 for num in lst2 if num % 2 == 0))\n    return 'YES' if even_in_lst2 >= odd_in_lst1 else 'NO'", "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_in_lst1 = sum((1 for num in lst1 if num % 2 != 0))\n    even_in_lst2 = sum((1 for num in lst2 if num % 2 == 0))\n    return 'YES' if even_in_lst2 >= odd_in_lst1 else 'NO'", "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_in_lst1 = sum((1 for x in lst1 if x % 2 != 0))\n    even_in_lst2 = sum((1 for x in lst2 if x % 2 == 0))\n    return 'YES' if odd_in_lst1 <= even_in_lst2 else 'NO'", "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_in_lst1 = sum((1 for num in lst1 if num % 2 != 0))\n    even_in_lst2 = sum((1 for num in lst2 if num % 2 == 0))\n    return 'YES' if odd_in_lst1 <= even_in_lst2 else 'NO'", "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_in_lst1 = sum((1 for num in lst1 if num % 2 != 0))\n    even_in_lst2 = sum((1 for num in lst2 if num % 2 == 0))\n    return 'YES' if even_in_lst2 >= odd_in_lst1 else 'NO'", "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_count1 = sum((1 for num in lst1 if num % 2 != 0))\n    even_count2 = sum((1 for num in lst2 if num % 2 == 0))\n    if odd_count1 <= even_count2:\n        return 'YES'\n    else:\n        return 'NO'", "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    count_odd_in_lst1 = sum((1 for x in lst1 if x % 2 != 0))\n    count_even_in_lst2 = sum((1 for x in lst2 if x % 2 == 0))\n    if count_odd_in_lst1 <= count_even_in_lst2:\n        return 'YES'\n    else:\n        return 'NO'", "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    count_odd_lst1 = sum((1 for x in lst1 if x % 2 != 0))\n    count_even_lst2 = sum((1 for x in lst2 if x % 2 == 0))\n    if count_odd_lst1 <= count_even_lst2:\n        return 'YES'\n    else:\n        return 'NO'", "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    count_odd_lst1 = sum((1 for num in lst1 if num % 2 != 0))\n    count_even_lst2 = sum((1 for num in lst2 if num % 2 == 0))\n    if count_odd_lst1 <= count_even_lst2:\n        return 'YES'\n    else:\n        return 'NO'", "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_in_lst1 = [x for x in lst1 if x % 2 != 0]\n    even_in_lst2 = [x for x in lst2 if x % 2 == 0]\n    if len(odd_in_lst1) <= len(even_in_lst2):\n        return 'YES'\n    else:\n        return 'NO'", "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_in_lst1 = sum((1 for num in lst1 if num % 2 != 0))\n    even_in_lst2 = sum((1 for num in lst2 if num % 2 == 0))\n    return 'YES' if even_in_lst2 >= odd_in_lst1 else 'NO'", "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_in_lst1 = sum((1 for num in lst1 if num % 2 != 0))\n    even_in_lst2 = sum((1 for num in lst2 if num % 2 == 0))\n    return 'YES' if odd_in_lst1 <= even_in_lst2 else 'NO'", "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_in_lst1 = sum((1 for num in lst1 if num % 2 != 0))\n    even_in_lst2 = sum((1 for num in lst2 if num % 2 == 0))\n    return 'YES' if even_in_lst2 >= odd_in_lst1 else 'NO'", "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_in_lst1 = sum((1 for num in lst1 if num % 2 != 0))\n    even_in_lst2 = sum((1 for num in lst2 if num % 2 == 0))\n    return 'YES' if odd_in_lst1 <= even_in_lst2 else 'NO'", "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_count_lst1 = sum((1 for num in lst1 if num % 2 != 0))\n    even_count_lst2 = sum((1 for num in lst2 if num % 2 == 0))\n    return 'YES' if even_count_lst2 >= odd_count_lst1 else 'NO'", "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_in_lst1 = sum((1 for x in lst1 if x % 2 != 0))\n    even_in_lst2 = sum((1 for x in lst2 if x % 2 == 0))\n    return 'YES' if even_in_lst2 >= odd_in_lst1 else 'NO'", "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_count_lst1 = sum((1 for num in lst1 if num % 2 != 0))\n    even_count_lst2 = sum((1 for num in lst2 if num % 2 == 0))\n    return 'YES' if even_count_lst2 >= odd_count_lst1 else 'NO'", "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_in_lst1 = sum((1 for num in lst1 if num % 2 != 0))\n    even_in_lst2 = sum((1 for num in lst2 if num % 2 == 0))\n    return 'YES' if odd_in_lst1 <= even_in_lst2 else 'NO'", "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_in_lst1 = sum((1 for num in lst1 if num % 2 != 0))\n    even_in_lst2 = sum((1 for num in lst2 if num % 2 == 0))\n    return 'YES' if even_in_lst2 >= odd_in_lst1 else 'NO'", "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    count_odd_lst1 = sum((1 for num in lst1 if num % 2 != 0))\n    count_even_lst2 = sum((1 for num in lst2 if num % 2 == 0))\n    if count_odd_lst1 <= count_even_lst2:\n        return 'YES'\n    else:\n        return 'NO'"], "outputs": "[['YES'], ['NO'], ['YES'], ['YES'], ['NO'], ['YES'], ['YES'], ['YES'], ['NO'], ['YES'], ['YES'], ['NO'], ['YES'], ['YES'], ['YES'], ['NO']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4], [1, 2, 3, 4]], [[1, 2, 3, 4], [1, 5, 3, 4]], [[2, 4, 6], [1, 3, 5]], [[1, 3, 5], [2, 4, 6]], [[1, 3, 5], [1, 3, 5]], [[2, 4, 6], [2, 4, 6]], [[1, 2, 3], [4, 5, 6]], [[1, 3, 5], [2, 4, 6, 8]], [[1, 3, 5, 7], [2, 4, 6]], [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], [[1], [2]], [[1], [1]], [[2], [1]], [[2], [2]], [[1, 3, 5, 7, 9], [2, 4, 6, 8, 10]], [[1, 3, 5, 7, 9], [1, 3, 5, 7, 9]]]", "input_output_examples": "[[[[1, 2, 3, 4], [1, 2, 3, 4]], [[1, 2, 3, 4], [1, 5, 3, 4]]], [['YES'], ['NO']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/111", "requirement": "from typing import Dict\n\n\ndef histogram(test: str) -> Dict[str, int]:\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import Dict\nfrom collections import Counter\n\ndef histogram(test: str) -> Dict[str, int]:\n    if not test:\n        return {}\n    counter = Counter(test.replace(' ', ''))\n    max_count = max(counter.values())\n    return {k: v for k, v in counter.items() if v == max_count}", "from typing import Dict\nfrom collections import Counter\n\ndef histogram(test: str) -> Dict[str, int]:\n    if not test:\n        return {}\n    counts = Counter(test.replace(' ', ''))\n    max_count = max(counts.values())\n    return {k: v for k, v in counts.items() if v == max_count}", "from typing import Dict\nfrom collections import Counter\n\ndef histogram(test: str) -> Dict[str, int]:\n    if not test:\n        return {}\n    counts = Counter(test.replace(' ', ''))\n    max_count = max(counts.values())\n    return {char: cnt for char, cnt in counts.items() if cnt == max_count}", "from typing import Dict\nfrom collections import Counter\n\ndef histogram(test: str) -> Dict[str, int]:\n    if not test:\n        return {}\n    counter = Counter(test.replace(' ', ''))\n    max_count = max(counter.values(), default=0)\n    return {k: v for k, v in counter.items() if v == max_count}", "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n    if not test:\n        return {}\n    count = {}\n    for char in test.replace(' ', ''):\n        count[char] = count.get(char, 0) + 1\n    max_count = max(count.values(), default=0)\n    return {k: v for k, v in count.items() if v == max_count}", "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n    if not test:\n        return {}\n    freq = {}\n    for char in test.split():\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    max_count = max(freq.values(), default=0)\n    result = {k: v for k, v in freq.items() if v == max_count}\n    return result", "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n    if not test:\n        return {}\n    freq = {}\n    for char in test.split():\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    max_count = max(freq.values(), default=0)\n    result = {k: v for k, v in freq.items() if v == max_count}\n    return result", "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n    if not test:\n        return {}\n    count_dict = {}\n    for char in test.split():\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n    max_count = max(count_dict.values(), default=0)\n    result = {k: v for k, v in count_dict.items() if v == max_count}\n    return result", "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n    if not test:\n        return {}\n    letter_counts = {}\n    for letter in test.split():\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n    max_count = max(letter_counts.values(), default=0)\n    result = {k: v for k, v in letter_counts.items() if v == max_count}\n    return result", "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n    if not test:\n        return {}\n    letter_counts = {}\n    for letter in test.split():\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n    max_count = max(letter_counts.values(), default=0)\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    return result", "from typing import Dict\nfrom collections import Counter\n\ndef histogram(test: str) -> Dict[str, int]:\n    if not test:\n        return {}\n    counter = Counter(test.replace(' ', ''))\n    max_count = max(counter.values(), default=0)\n    return {k: v for k, v in counter.items() if v == max_count}", "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n    if not test:\n        return {}\n    freq = {}\n    for char in test.split():\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    max_count = max(freq.values(), default=0)\n    result = {k: v for k, v in freq.items() if v == max_count}\n    return result", "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n    if not test:\n        return {}\n    count_dict = {}\n    for char in test.split():\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n    max_count = max(count_dict.values(), default=0)\n    result = {k: v for k, v in count_dict.items() if v == max_count}\n    return result", "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n    if not test:\n        return {}\n    letter_counts = {}\n    for letter in test.split():\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n    max_count = max(letter_counts.values(), default=0)\n    result = {k: v for k, v in letter_counts.items() if v == max_count}\n    return result", "from typing import Dict\nfrom collections import Counter\n\ndef histogram(test: str) -> Dict[str, int]:\n    if not test:\n        return {}\n    counter = Counter(test.replace(' ', ''))\n    max_count = max(counter.values())\n    return {k: v for k, v in counter.items() if v == max_count}", "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n    if not test:\n        return {}\n    letter_counts = {}\n    for letter in test.split():\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n    max_count = max(letter_counts.values(), default=0)\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    return result", "from typing import Dict\nfrom collections import Counter\n\ndef histogram(test: str) -> Dict[str, int]:\n    if not test:\n        return {}\n    count = Counter(test.replace(' ', ''))\n    max_count = max(count.values())\n    return {k: v for k, v in count.items() if v == max_count}", "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n    if not test:\n        return {}\n    count_dict = {}\n    for char in test.split():\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n    max_count = max(count_dict.values(), default=0)\n    result = {k: v for k, v in count_dict.items() if v == max_count}\n    return result", "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n    if not test:\n        return {}\n    counts = {}\n    for char in test.split():\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    max_count = max(counts.values(), default=0)\n    return {k: v for k, v in counts.items() if v == max_count}", "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n    if not test:\n        return {}\n    letter_counts = {}\n    for letter in test.split():\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n    max_count = max(letter_counts.values(), default=0)\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    return result"], "outputs": "[[{'a': 1, 'b': 1, 'c': 1}], [{'a': 2, 'b': 2}], [{'a': 2, 'b': 2}], [{'b': 4}], [{}], [{'a': 1}], [{'a': 5}], [{'x': 2, 'y': 2, 'z': 2}], [{'z': 3}], [{'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1, 'm': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1, 's': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}], [{'a': 3, 'b': 3, 'c': 3, 'd': 3, 'e': 3}]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['a b c'], ['a b b a'], ['a b c a b'], ['b b b b a'], [''], ['a'], ['a a a a a'], ['x y z x y z'], ['z z z y y x'], ['a b c d e f g h i j k l m n o p q r s t u v w x y z'], ['a a a b b b c c c d d d e e e']]", "input_output_examples": "[[['a b c'], ['a b b a'], ['a b c a b'], ['b b b b a'], ['']], [[{'a': 1, 'b': 1, 'c': 1}], [{'a': 2, 'b': 2}], [{'a': 2, 'b': 2}], [{'b': 4}], [{}]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/112", "requirement": "from typing import Tuple\n\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)"], "outputs": "[[('bcd', False)], [('acdef', False)], [('cdedc', True)], [('aceca', True)], [('heo', False)], [('131', True)], [('', True)], [('', True)], [('abc', False)], [('', True)], [('', True)], [('', True)], [('', True)], [('12344321', True)], [('454', True)]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['abcde', 'ae'], ['abcdef', 'b'], ['abcdedcba', 'ab'], ['racecar', 'r'], ['hello', 'l'], ['12321', '2'], ['aabbcc', 'abc'], ['', ''], ['abc', ''], ['', 'abc'], ['a', 'a'], ['aaaa', 'a'], ['ababab', 'ab'], ['123454321', '5'], ['123454321', '123']]", "input_output_examples": "[[['abcde', 'ae'], ['abcdef', 'b'], ['abcdedcba', 'ab']], [[('bcd', False)], [('acdef', False)], [('cdedc', True)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/113", "requirement": "from typing import List\n\n\ndef odd_count(lst: List[str]) -> List[str]:\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \"\"\"", "repaired_requirement": "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list of formatted strings.\n    \n    Each element in the output list is a sentence that describes the count of odd digits in the corresponding\n    input string. The sentence should follow the format: 'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.',\n    where {count} is the number of odd digits in the input string.\n    \n    Example:\n    >>> odd_count([\"123\", \"456\"])\n    ['the number of odd elements 2n the str2ng 2 of the 2nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.']\n    \"\"\"", "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f'the number of odd elements in the {sum((int(digit) % 2 != 0 for digit in s))}.' for s in lst]", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f'the number of odd elements in the {sum((1 for c in s if int(c) % 2 != 0))}.' for s in lst]", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f'the number of odd elements in the {sum((int(digit) % 2 != 0 for digit in s))}.' for s in lst]"], "outputs": "[[['the number of odd elements in the 4.']], [['the number of odd elements in the 1.', 'the number of odd elements in the 8.']], [['the number of odd elements in the 0.']], [['the number of odd elements in the 5.']], [['the number of odd elements in the 0.']], [['the number of odd elements in the 0.', 'the number of odd elements in the 1.', 'the number of odd elements in the 0.', 'the number of odd elements in the 1.', 'the number of odd elements in the 0.', 'the number of odd elements in the 1.', 'the number of odd elements in the 0.', 'the number of odd elements in the 1.', 'the number of odd elements in the 0.', 'the number of odd elements in the 1.']], [['the number of odd elements in the 2.', 'the number of odd elements in the 1.', 'the number of odd elements in the 2.']], [['the number of odd elements in the 3.', 'the number of odd elements in the 0.', 'the number of odd elements in the 3.', 'the number of odd elements in the 0.', 'the number of odd elements in the 3.']], [['the number of odd elements in the 0.', 'the number of odd elements in the 5.', 'the number of odd elements in the 0.', 'the number of odd elements in the 5.', 'the number of odd elements in the 0.', 'the number of odd elements in the 5.']], [['the number of odd elements in the 5.']]]", "probability": 0.15, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[[['1234567']], [['the number of odd elements in the 4.']], [['the number of odd elements 4n the str4ng 4 of the 4nput.']]]]"}, {"programs_str": ["from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f'the number of odd elements in the string {i} of the input.' for i in [sum((int(digit) % 2 for digit in s)) for s in lst]]", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f'the number of odd elements in the string {i} of the input.' for i in [sum((1 for c in s if int(c) % 2 != 0)) for s in lst]]", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f'the number of odd elements in the string {i} of the input.' for i in [sum((int(digit) % 2 for digit in s)) for s in lst]]", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f'the number of odd elements in the string {i} of the input.' for i in [sum((1 for c in s if int(c) % 2 != 0)) for s in lst]]", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f'the number of odd elements in the string {i} of the input.' for i in [sum((int(digit) % 2 != 0 for digit in s)) for s in lst]]", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f'the number of odd elements in the string {i} of the input.' for i in [sum((int(digit) % 2 != 0 for digit in s)) for s in lst]]", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f'the number of odd elements in the string {i} of the input.' for i in [sum((int(digit) % 2 != 0 for digit in s)) for s in lst]]", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f'the number of odd elements in the string {sum((int(digit) % 2 != 0 for digit in s))} of the input.' for s in lst]", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f'the number of odd elements in the string {i} of the input.' for i in [sum((int(digit) % 2 for digit in s)) for s in lst]]", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f'the number of odd elements in the string {i} of the input.' for i in [sum((1 for char in s if int(char) % 2 != 0)) for s in lst]]", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f'the number of odd elements in the string {i} of the input.' for i in [sum((int(digit) % 2 for digit in s)) for s in lst]]", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f'the number of odd elements in the string {i} of the input.' for i in [sum((int(digit) % 2 for digit in s)) for s in lst]]", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f'the number of odd elements in the string {i} of the input.' for i in [sum((int(digit) % 2 != 0 for digit in s)) for s in lst]]", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f'the number of odd elements in the string {i} of the input.' for i in [sum((int(digit) % 2 for digit in s)) for s in lst]]", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f'the number of odd elements in the string {i} of the input.' for i in [sum((int(digit) % 2 != 0 for digit in s)) for s in lst]]", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f'the number of odd elements in the string {sum((int(digit) % 2 != 0 for digit in s))} of the input.' for s in lst]", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    return [f'the number of odd elements in the string {i} of the input.' for i in [sum((int(digit) % 2 != 0 for digit in s)) for s in lst]]"], "outputs": "[[['the number of odd elements in the string 4 of the input.']], [['the number of odd elements in the string 1 of the input.', 'the number of odd elements in the string 8 of the input.']], [['the number of odd elements in the string 0 of the input.']], [['the number of odd elements in the string 5 of the input.']], [['the number of odd elements in the string 0 of the input.']], [['the number of odd elements in the string 0 of the input.', 'the number of odd elements in the string 1 of the input.', 'the number of odd elements in the string 0 of the input.', 'the number of odd elements in the string 1 of the input.', 'the number of odd elements in the string 0 of the input.', 'the number of odd elements in the string 1 of the input.', 'the number of odd elements in the string 0 of the input.', 'the number of odd elements in the string 1 of the input.', 'the number of odd elements in the string 0 of the input.', 'the number of odd elements in the string 1 of the input.']], [['the number of odd elements in the string 2 of the input.', 'the number of odd elements in the string 1 of the input.', 'the number of odd elements in the string 2 of the input.']], [['the number of odd elements in the string 3 of the input.', 'the number of odd elements in the string 0 of the input.', 'the number of odd elements in the string 3 of the input.', 'the number of odd elements in the string 0 of the input.', 'the number of odd elements in the string 3 of the input.']], [['the number of odd elements in the string 0 of the input.', 'the number of odd elements in the string 5 of the input.', 'the number of odd elements in the string 0 of the input.', 'the number of odd elements in the string 5 of the input.', 'the number of odd elements in the string 0 of the input.', 'the number of odd elements in the string 5 of the input.']], [['the number of odd elements in the string 5 of the input.']]]", "probability": 0.85, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[[['1234567']], [['the number of odd elements in the string 4 of the input.']], [['the number of odd elements 4n the str4ng 4 of the 4nput.']]]]"}], "entropy": 0.6098403047164005, "llm_generated_inputs": "[[['1234567']], [['3', '11111111']], [['2468']], [['13579']], [['']], [['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']], [['123', '456', '789']], [['111', '222', '333', '444', '555']], [['00000', '11111', '22222', '33333', '44444', '55555']], [['9876543210']]]", "input_output_examples": "[[[['1234567']], [['3', '11111111']]], [[['the number of odd elements 4n the str4ng 4 of the 4nput.']], [['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.']]]]", "weighted_test_consistency": 0.5, "at_least_one_align": false, "ambiguity": 0.5549201523582002}, "repaired_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for char in s if int(char) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for c in s if int(c) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for c in s if int(c) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for c in s if int(c) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for c in s if int(c) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for c in s if int(c) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for c in s if int(c) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for char in s if int(char) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for c in s if int(c) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for c in s if int(c) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for c in s if int(c) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for c in s if int(c) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for char in s if int(char) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for char in s if int(char) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for char in s if int(char) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for char in s if int(char) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for char in s if int(char) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for c in s if int(c) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for char in s if int(char) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for char in s if int(char) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result"], "outputs": "[[['the number of odd elements 4n the str4ng 4 of the 4nput.']], [['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.']], [['the number of odd elements 0n the str0ng 0 of the 0nput.']], [['the number of odd elements 5n the str5ng 5 of the 5nput.']], [['the number of odd elements 0n the str0ng 0 of the 0nput.']], [['the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.']], [['the number of odd elements 2n the str2ng 2 of the 2nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 2n the str2ng 2 of the 2nput.']], [['the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 3n the str3ng 3 of the 3nput.']], [['the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 5n the str5ng 5 of the 5nput.', 'the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 5n the str5ng 5 of the 5nput.', 'the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 5n the str5ng 5 of the 5nput.']], [['the number of odd elements 5n the str5ng 5 of the 5nput.']]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['1234567']], [['3', '11111111']], [['2468']], [['13579']], [['']], [['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']], [['123', '456', '789']], [['111', '222', '333', '444', '555']], [['00000', '11111', '22222', '33333', '44444', '55555']], [['9876543210']]]", "input_output_examples": "[[[['1234567']], [['3', '11111111']]], [[['the number of odd elements 4n the str4ng 4 of the 4nput.']], [['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "original_passk": 0.0, "repaired_passk": 1.0, "generated_programs": ["from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for c in s if int(c) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for c in s if int(c) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for char in s if int(char) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for char in s if int(char) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for char in s if int(char) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for c in s if int(c) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for char in s if int(char) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for c in s if int(c) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for c in s if int(c) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result", "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        count = sum((1 for c in s if int(c) % 2 != 0))\n        sentence = f'the number of odd elements {count}n the str{count}ng {count} of the {count}nput.'\n        result.append(sentence)\n    return result"], "failed_inputs_outputs": "[[], [], [], [], [], [], [], [], [], []]"}
{"task_id": "HumanEval/114", "requirement": "from typing import List\n\n\ndef minSubArraySum(nums: List[int]) -> int:\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum", "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum", "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum", "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum", "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum", "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum", "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum", "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum", "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum", "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum", "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum", "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum", "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum", "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum", "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum"], "outputs": "[[1], [-6], [1], [-5], [0], [1], [-1], [-2], [-15], [-40]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[2, 3, 4, 1, 2, 4]], [[-1, -2, -3]], [[1, 2, 3, 4, 5]], [[-1, 2, -3, 4, -5]], [[0, 0, 0, 0]], [[1]], [[-1]], [[5, -2, 3, -1, 2]], [[-5, -4, -3, -2, -1]], [[10, -20, 30, -40, 50]]]", "input_output_examples": "[[[[2, 3, 4, 1, 2, 4]], [[-1, -2, -3]]], [[1], [-6]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/115", "requirement": "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total = 0\n    for well in grid:\n        water = sum(well)\n        total += (water + capacity - 1) // capacity\n    return total", "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total_trips = 0\n    for well in grid:\n        water = sum(well)\n        trips = (water + capacity - 1) // capacity\n        total_trips += trips\n    return total_trips", "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total_trips = 0\n    for well in grid:\n        water_units = sum(well)\n        trips = (water_units + capacity - 1) // capacity\n        total_trips += trips\n    return total_trips", "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total_trips = 0\n    for well in grid:\n        water_units = sum(well)\n        trips = (water_units + capacity - 1) // capacity\n        total_trips += trips\n    return total_trips", "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total = 0\n    for row in grid:\n        water = sum(row)\n        if water == 0:\n            continue\n        total += (water + capacity - 1) // capacity\n    return total", "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total = 0\n    for well in grid:\n        water = sum(well)\n        if water == 0:\n            continue\n        total += (water + capacity - 1) // capacity\n    return total", "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total = 0\n    for row in grid:\n        water = sum(row)\n        total += (water + capacity - 1) // capacity\n    return total", "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total = 0\n    for row in grid:\n        water = sum(row)\n        if water == 0:\n            continue\n        total += (water + capacity - 1) // capacity\n    return total", "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total = 0\n    for well in grid:\n        water = sum(well)\n        if water == 0:\n            continue\n        total += (water + capacity - 1) // capacity\n    return total", "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total = 0\n    for well in grid:\n        water = sum(well)\n        if water == 0:\n            continue\n        total += (water + capacity - 1) // capacity\n    return total", "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total = 0\n    for well in grid:\n        water = sum(well)\n        total += (water + capacity - 1) // capacity\n    return total", "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total = 0\n    for row in grid:\n        water = sum(row)\n        total += (water + capacity - 1) // capacity\n    return total", "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total = 0\n    for well in grid:\n        water = sum(well)\n        total += (water + capacity - 1) // capacity\n    return total", "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total = 0\n    for row in grid:\n        water = sum(row)\n        if water == 0:\n            continue\n        total += (water + capacity - 1) // capacity\n    return total", "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total = 0\n    for row in grid:\n        units = sum(row)\n        if units == 0:\n            continue\n        total += (units + capacity - 1) // capacity\n    return total", "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total_trips = 0\n    for well in grid:\n        water_units = sum(well)\n        trips = (water_units + capacity - 1) // capacity\n        total_trips += trips\n    return total_trips", "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total_trips = 0\n    for well in grid:\n        water = sum(well)\n        trips = (water + capacity - 1) // capacity\n        total_trips += trips\n    return total_trips", "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total = 0\n    for row in grid:\n        water = sum(row)\n        if water == 0:\n            continue\n        total += (water + capacity - 1) // capacity\n    return total", "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total = 0\n    for well in grid:\n        water = sum(well)\n        if water == 0:\n            continue\n        total += (water + capacity - 1) // capacity\n    return total", "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    total = 0\n    for well in grid:\n        water = sum(well)\n        if water == 0:\n            continue\n        total += (water + capacity - 1) // capacity\n    return total"], "outputs": "[[6], [5], [0], [3], [1], [2], [1], [0], [1], [10]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1], [[[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2], [[[0, 0, 0], [0, 0, 0]], 5], [[[1, 1, 1], [1, 1, 1], [1, 1, 1]], 3], [[[1]], 1], [[[1, 0, 1], [0, 1, 0]], 2], [[[1, 1, 1, 1, 1]], 5], [[[0, 0, 0, 0, 0]], 3], [[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], 10], [[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], 1]]", "input_output_examples": "[[[[[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1], [[[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2], [[[0, 0, 0], [0, 0, 0]], 5]], [[6], [5], [0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/116", "requirement": "from typing import List\n\n\ndef sort_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"], "outputs": "[[[1, 2, 4, 3, 5]], [[-4, -2, -6, -5, -3]], [[0, 1, 2, 4, 3]], [[8, 3, 9, 10, 7]], [[0, 0, 0, 0]], [[3, 7, 15, 31]], [[]], [[1]], [[128, 256, 512, 1024]], [[31, 63, 127, 255]]]", "probability": 1.0, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 5, 2, 3, 4]], [[1, 2, 4, 3, 5]], [[1, 2, 3, 4, 5]]], [[[-2, -3, -4, -5, -6]], [[-4, -2, -6, -5, -3]], [[-6, -5, -4, -3, -2]]], [[[1, 0, 2, 3, 4]], [[0, 1, 2, 4, 3]], [[0, 1, 2, 3, 4]]]]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 5, 2, 3, 4]], [[-2, -3, -4, -5, -6]], [[1, 0, 2, 3, 4]], [[10, 7, 8, 9, 3]], [[0, 0, 0, 0]], [[15, 31, 7, 3]], [[]], [[1]], [[1024, 512, 256, 128]], [[255, 127, 63, 31]]]", "input_output_examples": "[[[[1, 5, 2, 3, 4]], [[-2, -3, -4, -5, -6]], [[1, 0, 2, 3, 4]]], [[[1, 2, 3, 4, 5]], [[-6, -5, -4, -3, -2]], [[0, 1, 2, 3, 4]]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false, "ambiguity": 0.5}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/117", "requirement": "from typing import List\n\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    words = s.split()\n    vowels = set('aeiouAEIOU')\n    result = []\n    for word in words:\n        consonant_count = sum((1 for char in word if char not in vowels and char != ' '))\n        if consonant_count == n:\n            result.append(word)\n    return result", "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char not in vowels and char != ' ':\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return result", "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    vowels = set('aeiouAEIOU')\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return result", "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return result", "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return result", "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return result", "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char not in vowels and char != ' ':\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return result", "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    words = s.split()\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    result = []\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char not in vowels and char != ' ':\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return result", "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return result", "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return result", "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char not in vowels and char != ' ':\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return result", "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char not in vowels and char != ' ':\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return result", "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    vowels = set('aeiouAEIOU')\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = sum((1 for char in word if char.isalpha() and char not in vowels))\n        if consonant_count == n:\n            result.append(word)\n    return result", "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char not in vowels and char != ' ':\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return result", "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    words = s.split()\n    vowels = set('aeiouAEIOU')\n    result = []\n    for word in words:\n        consonant_count = sum((1 for char in word if char.isalpha() and char not in vowels))\n        if consonant_count == n:\n            result.append(word)\n    return result", "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    words = s.split()\n    vowels = set('aeiouAEIOU')\n    result = []\n    for word in words:\n        consonant_count = sum((1 for char in word if char not in vowels and char != ' '))\n        if consonant_count == n:\n            result.append(word)\n    return result", "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = sum((1 for char in word if char.isalpha() and char not in vowels))\n        if consonant_count == n:\n            result.append(word)\n    return result", "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char not in vowels and char.isalpha():\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return result", "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not s:\n        return []\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char not in vowels and char.isalpha():\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return result", "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return result"], "outputs": "[[['little']], [['Mary', 'lamb']], [[]], [['world']], [['Uncle']], [[]], [['AaEeIiOoUu']], [['BbCcDdFfGg']], [[]], [[]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Mary had a little lamb', 4], ['Mary had a little lamb', 3], ['simple white space', 2], ['Hello world', 4], ['Uncle sam', 3], ['', 2], ['AaEeIiOoUu', 0], ['BbCcDdFfGg', 10], ['Mixed Case Example', 5], ['Spaces     Multiple', 3]]", "input_output_examples": "[[['Mary had a little lamb', 4], ['Mary had a little lamb', 3], ['simple white space', 2], ['Hello world', 4], ['Uncle sam', 3]], [[['little']], [['Mary', 'lamb']], [[]], [['world']], [['Uncle']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/118", "requirement": "def get_closest_vowel(word: str) -> str:\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def get_closest_vowel(word: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''", "def get_closest_vowel(word: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''", "def get_closest_vowel(word: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''", "def get_closest_vowel(word: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''", "def get_closest_vowel(word: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''", "def get_closest_vowel(word: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''", "def get_closest_vowel(word: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] in consonants and (word[i + 1] in consonants):\n            return word[i]\n    return ''", "def get_closest_vowel(word: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''", "def get_closest_vowel(word: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] in consonants and (word[i + 1] in consonants):\n            return word[i]\n    return ''", "def get_closest_vowel(word: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''", "def get_closest_vowel(word: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''", "def get_closest_vowel(word: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''", "def get_closest_vowel(word: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''", "def get_closest_vowel(word: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''", "def get_closest_vowel(word: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] in consonants and (word[i + 1] in consonants):\n            return word[i]\n    return ''", "def get_closest_vowel(word: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''", "def get_closest_vowel(word: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] in consonants and (word[i + 1] in consonants):\n            return word[i]\n    return ''", "def get_closest_vowel(word: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''", "def get_closest_vowel(word: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] in consonants and (word[i + 1] in consonants):\n            return word[i]\n    return ''", "def get_closest_vowel(word: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''"], "outputs": "[['u'], ['U'], [''], [''], ['a'], ['e'], [''], [''], [''], [''], ['e'], ['i'], [''], [''], ['']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['yogurt'], ['FULL'], ['quick'], ['ab'], ['banana'], ['strengths'], ['rhythm'], ['aeiou'], ['bcz'], ['xyz'], ['Hello'], ['Testing'], ['Aeiou'], ['BbCcDd'], ['ZzYyXx']]", "input_output_examples": "[[['yogurt'], ['FULL'], ['quick'], ['ab']], [['u'], ['U'], [''], ['']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/119", "requirement": "from typing import List\n\n\ndef match_parens(lst: List[str]) -> str:\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    '''", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = (lst[0], lst[1])\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'", "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = lst\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'", "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n\n    def is_balanced(s: str) -> bool:\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = lst\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'", "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n\n    def is_balanced(s: str) -> bool:\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = lst\n    if is_balanced(s1 + s2):\n        return 'Yes'\n    if is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'", "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n\n    def is_balanced(s: str) -> bool:\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = lst\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'", "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n\n    def is_balanced(s: str) -> bool:\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = lst\n    if is_balanced(s1 + s2):\n        return 'Yes'\n    if is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'", "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = (lst[0], lst[1])\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'", "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = (lst[0], lst[1])\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'", "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n\n    def is_balanced(s: str) -> bool:\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = (lst[0], lst[1])\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'", "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n\n    def is_balanced(s: str) -> bool:\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = (lst[0], lst[1])\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'", "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = lst\n    if is_balanced(s1 + s2):\n        return 'Yes'\n    if is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'", "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n\n    def is_balanced(s: str) -> bool:\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = (lst[0], lst[1])\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'", "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = (lst[0], lst[1])\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'", "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n\n    def is_balanced(s: str) -> bool:\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = lst\n    if is_balanced(s1 + s2):\n        return 'Yes'\n    if is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'", "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n\n    def is_balanced(s: str) -> bool:\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = (lst[0], lst[1])\n    if is_balanced(s1 + s2):\n        return 'Yes'\n    if is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'", "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n\n    def is_balanced(s: str) -> bool:\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = lst\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'", "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n\n    def is_balanced(s: str) -> bool:\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = (lst[0], lst[1])\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'", "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n\n    def is_balanced(s: str) -> bool:\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = lst\n    if is_balanced(s1 + s2):\n        return 'Yes'\n    if is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'", "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n\n    def is_balanced(s: str) -> bool:\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = lst\n    if is_balanced(s1 + s2):\n        return 'Yes'\n    if is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'", "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    s1, s2 = (lst[0], lst[1])\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'"], "outputs": "[['Yes'], ['No'], ['Yes'], ['Yes'], ['Yes'], ['Yes'], ['Yes'], ['No'], ['Yes'], ['Yes']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['()', '()']], [[')(', '()']], [['((', '))']], [[')', '(']], [['(()', ')']], [['', '']], [['(', ')']], [[')', ')']], [['((()))', '()']], [['()()', '()']]]", "input_output_examples": "[[[['()(', ')']], [[')', ')']]], [['Yes'], ['No']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/120", "requirement": "from typing import List\n\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted(sorted_arr[:k])", "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted(sorted_arr[:k])", "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted(sorted_arr[:k])", "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted(sorted_arr[:k])", "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted(sorted_arr[:k])", "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted(sorted_arr[:k])", "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted(sorted_arr[:k])", "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted(sorted_arr[:k])", "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted(sorted_arr[:k])", "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted(sorted_arr[:k])", "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted(sorted_arr[:k])", "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted(sorted_arr[:k])", "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted(sorted_arr[:k])", "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted(sorted_arr[:k])", "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted(sorted_arr[:k])", "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted(sorted_arr[:k])", "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted(sorted_arr[:k])", "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted(sorted_arr[:k])", "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted(sorted_arr[:k])", "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted(sorted_arr[:k])"], "outputs": "[[[-4, -3, 5]], [[4, 4]], [[2]], [[1, 2, 3, 4, 5]], [[0, 0]], [[-3, -2, -1]], [[1000]], [[1]], [[]], [[3, 4, 5]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[-3, -4, 5], 3], [[4, -4, 4], 2], [[-3, 2, 1, 2, -1, -2, 1], 1], [[1, 2, 3, 4, 5], 5], [[0, 0, 0, 0], 2], [[-1, -2, -3, -4, -5], 3], [[1000, -1000, 0], 1], [[1], 1], [[1, 2, 3, 4, 5], 0], [[5, 4, 3, 2, 1], 3]]", "input_output_examples": "[[[[-3, -4, 5], 3], [[4, -4, 4], 2], [[-3, 2, 1, 2, -1, -2, 1], 1]], [[[-4, -3, 5]], [[4, 4]], [[2]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 0.8, "repaired_passk": 0.8, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/121", "requirement": "from typing import List\n\n\ndef solution(lst: List[int]) -> int:\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0))", "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0))", "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0))", "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0))", "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0))", "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0))", "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0))", "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0))", "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0))", "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0))", "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0))", "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0))", "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0))", "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0))", "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0))", "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0))", "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0))", "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0))", "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0))", "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0))"], "outputs": "[[12], [9], [0], [0], [25], [1], [0], [99], [-9], [0]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[5, 8, 7, 1]], [[3, 3, 3, 3, 3]], [[30, 13, 24, 321]], [[0, 0, 0, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1]], [[2]], [[11, 22, 33, 44, 55]], [[-1, -2, -3, -4, -5]], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]]]", "input_output_examples": "[[[[5, 8, 7, 1]], [[3, 3, 3, 3, 3]], [[30, 13, 24, 321]]], [[12], [9], [0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/122", "requirement": "from typing import List\n\n\ndef add_elements(arr: List[int], k: int) -> int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum((num for num in arr[:k] if abs(num) < 100))", "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum((x for x in arr[:k] if 0 <= x <= 99))", "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum((x for x in arr[:k] if abs(x) < 100))", "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum((x for x in arr[:k] if 0 <= x <= 99))", "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum((x for x in arr[:k] if -99 <= x <= 99))", "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum((x for x in arr[:k] if abs(x) < 100))", "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum((x for x in arr[:k] if abs(x) < 100))", "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum((x for x in arr[:k] if abs(x) < 100))", "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum((x for x in arr[:k] if abs(x) < 100))", "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum((x for x in arr[:k] if abs(x) < 100))", "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum((x for x in arr[:k] if 0 <= x <= 99))", "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum((x for x in arr[:k] if 0 <= x <= 99))", "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum((x for x in arr[:k] if -99 <= x <= 99))", "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum((x for x in arr[:k] if 0 <= x < 100))", "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum((x for x in arr[:k] if abs(x) < 100))", "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum((x for x in arr[:k] if abs(x) < 100))", "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum((x for x in arr[:k] if 0 <= x <= 99))", "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum((x for x in arr[:k] if abs(x) < 100))", "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum((x for x in arr[:k] if 0 <= x < 100))"], "outputs": "[[24], [6], [150], [99], [5], [46], [6], [0], [485], [0], [10], [0]]", "probability": 0.95, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    return sum((x for x in arr[:k] if -100 < x < 100 and abs(x) >= 10))"], "outputs": "[[21], [0], [150], [99], [0], [46], [0], [0], [485], [0], [10], [0]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[[111, 21, 3, 4000, 5, 6, 7, 8, 9], 4], [21], [24]]]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[[111, 21, 3, 4000, 5, 6, 7, 8, 9], 4], [[1, 2, 3, 4, 5], 3], [[10, 20, 30, 40, 50], 5], [[99, 100, 101, 102, 103], 2], [[5, 15, 25, 35, 45], 1], [[123, 456, 789, 12, 34], 5], [[1, 2, 3], 3], [[100, 200, 300, 400, 500], 5], [[99, 98, 97, 96, 95], 5], [[10, 20, 30, 40, 50], 0], [[10], 1], [[1001, 2002, 3003], 3]]", "input_output_examples": "[[[[111, 21, 3, 4000, 5, 6, 7, 8, 9], 4]], [[24]]]", "weighted_test_consistency": 0.95, "at_least_one_align": true, "ambiguity": 0.16819847855797812}, "repaired_clusters": null, "original_passk": 0.7, "repaired_passk": 0.7, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/123", "requirement": "from typing import List\n\n\ndef get_odd_collatz(n: int) -> List[int]:\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    sequence.append(1)\n    return sorted(sequence)", "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    sequence.append(1)\n    return sorted(sequence)", "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    sequence.append(1)\n    return sorted(sequence)", "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    sequence.append(1)\n    return sorted(sequence)", "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    sequence.append(1)\n    return sorted(sequence)", "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    sequence.append(1)\n    return sorted(sequence)", "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    sequence.append(1)\n    return sorted(sequence)", "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    sequence.append(1)\n    return sorted(sequence)", "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    collatz_sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            collatz_sequence.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    if n == 1:\n        collatz_sequence.append(1)\n    return sorted(collatz_sequence)", "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    sequence.append(1)\n    return sorted(sequence)", "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    sequence.append(1)\n    return sorted(sequence)", "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    if n == 1:\n        sequence.append(1)\n    return sorted(sequence)", "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    sequence.append(1)\n    return sorted(sequence)", "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    sequence.append(1)\n    return sorted(sequence)", "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    collatz_sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            collatz_sequence.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    if n == 1:\n        collatz_sequence.append(1)\n    return sorted(collatz_sequence)", "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    sequence.append(1)\n    return sorted(sequence)", "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    sequence.append(1)\n    return sorted(sequence)", "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    sequence.append(1)\n    return sorted(sequence)", "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    collatz_sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    if n == 1:\n        collatz_sequence.append(n)\n    return sorted(collatz_sequence)", "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    collatz_sequence = []\n    current = n\n    while current != 1:\n        if current % 2 != 0:\n            collatz_sequence.append(current)\n        if current % 2 == 0:\n            current = current // 2\n        else:\n            current = 3 * current + 1\n    if current == 1:\n        collatz_sequence.append(1)\n    return sorted(collatz_sequence)"], "outputs": "[[[1]], [[1]], [[1, 5]], [[1, 3, 5]], [[1, 5, 7, 11, 13, 17]], [[1, 5]], [[1, 3, 5]], [[1, 5, 15, 23, 35, 53]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [5], [6], [7], [10], [12], [15]]", "input_output_examples": "[[[5]], [[[1, 5]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/124", "requirement": "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \"\"\"", "repaired_requirement": "def valid_date(date: str) -> bool:\n    \"\"\"Validates a given date string and returns True if the date is valid, otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The date string must be in the format: mm-dd-yyyy, where mm, dd, and yyyy are two-digit month, two-digit day, and four-digit year respectively.\n    3. The month must be between 1 and 12 (inclusive).\n    4. The day must be valid for the given month:\n       - For months 1, 3, 5, 7, 8, 10, 12: days must be between 1 and 31 (inclusive).\n       - For months 4, 6, 9, 11: days must be between 1 and 30 (inclusive).\n       - For month 2: days must be between 1 and 29 (inclusive).\n    The function does not validate the year beyond ensuring it is a four-digit number.\n    \"\"\"", "original_clusters": {"cluster_list": [{"programs_str": ["import re\nfrom datetime import datetime\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = '^\\\\d{2}-\\\\d{2}-\\\\d{4}$'\n    if not re.match(pattern, date):\n        return False\n    try:\n        datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except ValueError:\n        return False", "import re\nfrom datetime import datetime\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    if not re.match('^\\\\d{2}-\\\\d{2}-\\\\d{4}$', date):\n        return False\n    try:\n        datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except ValueError:\n        return False", "import re\nfrom datetime import datetime\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    if not re.match('^\\\\d{2}-\\\\d{2}-\\\\d{4}$', date):\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in {1, 3, 5, 7, 8, 10, 12} and (day < 1 or day > 31):\n            return False\n        if month in {4, 6, 9, 11} and (day < 1 or day > 30):\n            return False\n        if month == 2:\n            if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n                if day < 1 or day > 29:\n                    return False\n            elif day < 1 or day > 28:\n                return False\n        return True\n    except ValueError:\n        return False", "import re\nfrom datetime import datetime\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = '^\\\\d{2}-\\\\d{2}-\\\\d{4}$'\n    if not re.match(pattern, date):\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in {1, 3, 5, 7, 8, 10, 12}:\n            if day < 1 or day > 31:\n                return False\n        elif month in {4, 6, 9, 11}:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n                if day < 1 or day > 29:\n                    return False\n            elif day < 1 or day > 28:\n                return False\n        return True\n    except ValueError:\n        return False", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = re.compile('^(\\\\d{2})-(\\\\d{2})-(\\\\d{4})$')\n    match = pattern.match(date)\n    if not match:\n        return False\n    month, day, year = map(int, match.groups())\n    if month < 1 or month > 12:\n        return False\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    elif year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        if day < 1 or day > 29:\n            return False\n    elif day < 1 or day > 28:\n        return False\n    return True", "import re\nfrom datetime import datetime\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    if not re.match('^\\\\d{2}-\\\\d{2}-\\\\d{4}$', date):\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in {1, 3, 5, 7, 8, 10, 12}:\n            if day < 1 or day > 31:\n                return False\n        elif month in {4, 6, 9, 11}:\n            if day < 1 or day > 30:\n                return False\n        elif year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        elif day < 1 or day > 28:\n            return False\n        return True\n    except ValueError:\n        return False", "import re\nfrom datetime import datetime\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    if not re.match('^\\\\d{2}-\\\\d{2}-\\\\d{4}$', date):\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in {1, 3, 5, 7, 8, 10, 12} and (day < 1 or day > 31):\n            return False\n        if month in {4, 6, 9, 11} and (day < 1 or day > 30):\n            return False\n        if month == 2:\n            if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n                if day < 1 or day > 29:\n                    return False\n            elif day < 1 or day > 28:\n                return False\n        return True\n    except ValueError:\n        return False", "import re\nfrom datetime import datetime\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = '^\\\\d{2}-\\\\d{2}-\\\\d{4}$'\n    if not re.match(pattern, date):\n        return False\n    try:\n        datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except ValueError:\n        return False", "import re\nfrom datetime import datetime\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    if not re.match('^\\\\d{2}-\\\\d{2}-\\\\d{4}$', date):\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in {1, 3, 5, 7, 8, 10, 12}:\n            if day < 1 or day > 31:\n                return False\n        elif month in {4, 6, 9, 11}:\n            if day < 1 or day > 30:\n                return False\n        elif day < 1 or day > 29:\n            return False\n        datetime(year, month, day)\n        return True\n    except ValueError:\n        return False"], "outputs": "[[True], [False], [False], [True], [False], [True], [False], [True], [True], [False], [False], [False], [False], [False], [False], [False], [False], [True], [False], [False]]", "probability": 0.45, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = re.compile('^(\\\\d{2})-(\\\\d{2})-(\\\\d{4})$')\n    match = pattern.match(date)\n    if not match:\n        return False\n    month, day, year = map(int, match.groups())\n    if month < 1 or month > 12:\n        return False\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    elif day < 1 or day > 29:\n        return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = re.compile('^(\\\\d{2})-(\\\\d{2})-(\\\\d{4})$')\n    match = pattern.match(date)\n    if not match:\n        return False\n    month, day, year = map(int, match.groups())\n    if month < 1 or month > 12:\n        return False\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = '^(\\\\d{2})-(\\\\d{2})-(\\\\d{4})$'\n    match = re.match(pattern, date)\n    if not match:\n        return False\n    month, day, year = map(int, match.groups())\n    if month < 1 or month > 12:\n        return False\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = re.compile('^(\\\\d{2})-(\\\\d{2})-(\\\\d{4})$')\n    match = pattern.match(date)\n    if not match:\n        return False\n    month, day, year = map(int, match.groups())\n    if month < 1 or month > 12:\n        return False\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = re.compile('^(\\\\d{2})-(\\\\d{2})-(\\\\d{4})$')\n    match = pattern.match(date)\n    if not match:\n        return False\n    month, day, year = map(int, match.groups())\n    if month < 1 or month > 12:\n        return False\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = '^\\\\d{2}-\\\\d{2}-\\\\d{4}$'\n    if not re.match(pattern, date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        if dd < 1 or dd > 31:\n            return False\n    elif mm in {4, 6, 9, 11}:\n        if dd < 1 or dd > 30:\n            return False\n    elif dd < 1 or dd > 29:\n        return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = '^\\\\d{2}-\\\\d{2}-\\\\d{4}$'\n    if not re.match(pattern, date):\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = re.compile('^(\\\\d{2})-(\\\\d{2})-(\\\\d{4})$')\n    match = pattern.match(date)\n    if not match:\n        return False\n    month, day, year = map(int, match.groups())\n    if month < 1 or month > 12:\n        return False\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    elif day < 1 or day > 29:\n        return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = '^\\\\d{2}-\\\\d{2}-\\\\d{4}$'\n    if not re.match(pattern, date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        if dd < 1 or dd > 31:\n            return False\n    elif mm in {4, 6, 9, 11}:\n        if dd < 1 or dd > 30:\n            return False\n    elif mm == 2:\n        if dd < 1 or dd > 29:\n            return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = '^\\\\d{2}-\\\\d{2}-\\\\d{4}$'\n    if not re.match(pattern, date):\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = '^(\\\\d{2})-(\\\\d{2})-(\\\\d{4})$'\n    match = re.match(pattern, date)\n    if not match:\n        return False\n    month, day, year = map(int, match.groups())\n    if month < 1 or month > 12:\n        return False\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True"], "outputs": "[[True], [False], [False], [True], [False], [True], [True], [True], [True], [False], [False], [False], [False], [False], [False], [False], [False], [True], [True], [False]]", "probability": 0.55, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.9927744539878083, "llm_generated_inputs": "[['03-11-2000'], ['15-01-2012'], ['04-0-2040'], ['06-04-2020'], ['06/04/2020'], ['02-29-2020'], ['02-29-2021'], ['12-31-1999'], ['01-01-0001'], ['13-01-2022'], ['00-01-2022'], ['01-32-2022'], ['04-31-2022'], ['06-31-2022'], ['09-31-2022'], ['11-31-2022'], ['02-30-2022'], ['02-28-2022'], ['02-29-2022'], ['']]", "input_output_examples": "[[['03-11-2000'], ['15-01-2012'], ['04-0-2040'], ['06-04-2020'], ['06/04/2020']], [[True], [False], [False], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.49638722699390414}, "repaired_clusters": {"cluster_list": [{"programs_str": ["import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    if not re.match('^\\\\d{2}-\\\\d{2}-\\\\d{4}$', date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        return 1 <= dd <= 31\n    elif mm in {4, 6, 9, 11}:\n        return 1 <= dd <= 30\n    else:\n        return 1 <= dd <= 29", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = re.compile('^\\\\d{2}-\\\\d{2}-\\\\d{4}$')\n    if not pattern.match(date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        return 1 <= dd <= 31\n    elif mm in {4, 6, 9, 11}:\n        return 1 <= dd <= 30\n    else:\n        return 1 <= dd <= 29", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    if not re.match('^\\\\d{2}-\\\\d{2}-\\\\d{4}$', date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        return 1 <= dd <= 31\n    elif mm in {4, 6, 9, 11}:\n        return 1 <= dd <= 30\n    else:\n        return 1 <= dd <= 29", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    if not re.match('^\\\\d{2}-\\\\d{2}-\\\\d{4}$', date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        return 1 <= dd <= 31\n    elif mm in {4, 6, 9, 11}:\n        return 1 <= dd <= 30\n    else:\n        return 1 <= dd <= 29", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    if not re.match('^\\\\d{2}-\\\\d{2}-\\\\d{4}$', date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        return 1 <= dd <= 31\n    elif mm in {4, 6, 9, 11}:\n        return 1 <= dd <= 30\n    else:\n        return 1 <= dd <= 29", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    if not re.match('^\\\\d{2}-\\\\d{2}-\\\\d{4}$', date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        if dd < 1 or dd > 31:\n            return False\n    elif mm in {4, 6, 9, 11}:\n        if dd < 1 or dd > 30:\n            return False\n    elif mm == 2:\n        if dd < 1 or dd > 29:\n            return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    if not re.match('^\\\\d{2}-\\\\d{2}-\\\\d{4}$', date):\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        return 1 <= day <= 31\n    elif month in {4, 6, 9, 11}:\n        return 1 <= day <= 30\n    else:\n        return 1 <= day <= 29", "import re\nfrom datetime import datetime\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = '^\\\\d{2}-\\\\d{2}-\\\\d{4}$'\n    if not re.match(pattern, date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        if dd < 1 or dd > 31:\n            return False\n    elif mm in {4, 6, 9, 11}:\n        if dd < 1 or dd > 30:\n            return False\n    elif mm == 2:\n        if dd < 1 or dd > 29:\n            return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = '^\\\\d{2}-\\\\d{2}-\\\\d{4}$'\n    if not re.match(pattern, date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        if dd < 1 or dd > 31:\n            return False\n    elif mm in {4, 6, 9, 11}:\n        if dd < 1 or dd > 30:\n            return False\n    elif mm == 2:\n        if dd < 1 or dd > 29:\n            return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = re.compile('^(\\\\d{2})-(\\\\d{2})-(\\\\d{4})$')\n    match = pattern.match(date)\n    if not match:\n        return False\n    mm, dd, yyyy = match.groups()\n    mm = int(mm)\n    dd = int(dd)\n    yyyy = int(yyyy)\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        if dd < 1 or dd > 31:\n            return False\n    elif mm in {4, 6, 9, 11}:\n        if dd < 1 or dd > 30:\n            return False\n    elif mm == 2:\n        if dd < 1 or dd > 29:\n            return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    if not re.match('^\\\\d{2}-\\\\d{2}-\\\\d{4}$', date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        return 1 <= dd <= 31\n    elif mm in {4, 6, 9, 11}:\n        return 1 <= dd <= 30\n    else:\n        return 1 <= dd <= 29", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = '^\\\\d{2}-\\\\d{2}-\\\\d{4}$'\n    if not re.match(pattern, date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        if dd < 1 or dd > 31:\n            return False\n    elif mm in {4, 6, 9, 11}:\n        if dd < 1 or dd > 30:\n            return False\n    elif dd < 1 or dd > 29:\n        return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    if not re.match('^\\\\d{2}-\\\\d{2}-\\\\d{4}$', date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        if dd < 1 or dd > 31:\n            return False\n    elif mm in {4, 6, 9, 11}:\n        if dd < 1 or dd > 30:\n            return False\n    elif mm == 2:\n        if dd < 1 or dd > 29:\n            return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = '^\\\\d{2}-\\\\d{2}-\\\\d{4}$'\n    if not re.match(pattern, date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        return 1 <= dd <= 31\n    elif mm in {4, 6, 9, 11}:\n        return 1 <= dd <= 30\n    else:\n        return 1 <= dd <= 29", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = '^\\\\d{2}-\\\\d{2}-\\\\d{4}$'\n    if not re.match(pattern, date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        if dd < 1 or dd > 31:\n            return False\n    elif mm in {4, 6, 9, 11}:\n        if dd < 1 or dd > 30:\n            return False\n    elif mm == 2:\n        if dd < 1 or dd > 29:\n            return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = '^\\\\d{2}-\\\\d{2}-\\\\d{4}$'\n    if not re.match(pattern, date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        return 1 <= dd <= 31\n    elif mm in {4, 6, 9, 11}:\n        return 1 <= dd <= 30\n    else:\n        return 1 <= dd <= 29", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = '^(\\\\d{2})-(\\\\d{2})-(\\\\d{4})$'\n    match = re.match(pattern, date)\n    if not match:\n        return False\n    mm, dd, yyyy = match.groups()\n    if not 1 <= int(mm) <= 12:\n        return False\n    if int(mm) in {1, 3, 5, 7, 8, 10, 12}:\n        if not 1 <= int(dd) <= 31:\n            return False\n    elif int(mm) in {4, 6, 9, 11}:\n        if not 1 <= int(dd) <= 30:\n            return False\n    elif int(mm) == 2:\n        if not 1 <= int(dd) <= 29:\n            return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    if not re.match('^\\\\d{2}-\\\\d{2}-\\\\d{4}$', date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        return 1 <= dd <= 31\n    elif mm in {4, 6, 9, 11}:\n        return 1 <= dd <= 30\n    elif mm == 2:\n        return 1 <= dd <= 29\n    return False", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = '^\\\\d{2}-\\\\d{2}-\\\\d{4}$'\n    if not re.match(pattern, date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        if dd < 1 or dd > 31:\n            return False\n    elif mm in {4, 6, 9, 11}:\n        if dd < 1 or dd > 30:\n            return False\n    elif mm == 2:\n        if dd < 1 or dd > 29:\n            return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = '^(\\\\d{2})-(\\\\d{2})-(\\\\d{4})$'\n    match = re.match(pattern, date)\n    if not match:\n        return False\n    mm, dd, yyyy = match.groups()\n    month = int(mm)\n    day = int(dd)\n    year = int(yyyy)\n    if month < 1 or month > 12:\n        return False\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True"], "outputs": "[[True], [False], [False], [True], [False], [True], [True], [True], [True], [False], [False], [False], [False], [False], [False], [False], [False], [True], [True], [False]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['03-11-2000'], ['15-01-2012'], ['04-0-2040'], ['06-04-2020'], ['06/04/2020'], ['02-29-2020'], ['02-29-2021'], ['12-31-1999'], ['01-01-0001'], ['13-01-2022'], ['00-01-2022'], ['01-32-2022'], ['04-31-2022'], ['06-31-2022'], ['09-31-2022'], ['11-31-2022'], ['02-30-2022'], ['02-28-2022'], ['02-29-2022'], ['']]", "input_output_examples": "[[['03-11-2000'], ['15-01-2012'], ['04-0-2040'], ['06-04-2020'], ['06/04/2020']], [[True], [False], [False], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "original_passk": 0.0, "repaired_passk": 0.0, "generated_programs": ["import re\nfrom datetime import datetime\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    if not re.match('^\\\\d{2}-\\\\d{2}-\\\\d{4}$', date):\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in {1, 3, 5, 7, 8, 10, 12}:\n            if day < 1 or day > 31:\n                return False\n        elif month in {4, 6, 9, 11}:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except ValueError:\n        return False", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    if not re.match('^\\\\d{2}-\\\\d{2}-\\\\d{4}$', date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        if dd < 1 or dd > 31:\n            return False\n    elif mm in {4, 6, 9, 11}:\n        if dd < 1 or dd > 30:\n            return False\n    elif dd < 1 or dd > 29:\n        return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    if not re.match('^\\\\d{2}-\\\\d{2}-\\\\d{4}$', date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        return 1 <= dd <= 31\n    elif mm in {4, 6, 9, 11}:\n        return 1 <= dd <= 30\n    else:\n        return 1 <= dd <= 29", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = re.compile('^\\\\d{2}-\\\\d{2}-\\\\d{4}$')\n    if not pattern.match(date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        return 1 <= dd <= 31\n    elif mm in {4, 6, 9, 11}:\n        return 1 <= dd <= 30\n    elif mm == 2:\n        return 1 <= dd <= 29\n    return False", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    if not re.match('^\\\\d{2}-\\\\d{2}-\\\\d{4}$', date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        if dd < 1 or dd > 31:\n            return False\n    elif mm in {4, 6, 9, 11}:\n        if dd < 1 or dd > 30:\n            return False\n    elif mm == 2:\n        if dd < 1 or dd > 29:\n            return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    if not re.match('^\\\\d{2}-\\\\d{2}-\\\\d{4}$', date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        return 1 <= dd <= 31\n    elif mm in {4, 6, 9, 11}:\n        return 1 <= dd <= 30\n    elif mm == 2:\n        return 1 <= dd <= 29\n    return False", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = re.compile('^\\\\d{2}-\\\\d{2}-\\\\d{4}$')\n    if not pattern.match(date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        return 1 <= dd <= 31\n    elif mm in {4, 6, 9, 11}:\n        return 1 <= dd <= 30\n    else:\n        return 1 <= dd <= 29", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = '^\\\\d{2}-\\\\d{2}-\\\\d{4}$'\n    if not re.match(pattern, date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        return 1 <= dd <= 31\n    elif mm in {4, 6, 9, 11}:\n        return 1 <= dd <= 30\n    else:\n        return 1 <= dd <= 29", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = re.compile('^\\\\d{2}-\\\\d{2}-\\\\d{4}$')\n    if not pattern.match(date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        if dd < 1 or dd > 31:\n            return False\n    elif mm in {4, 6, 9, 11}:\n        if dd < 1 or dd > 30:\n            return False\n    elif mm == 2:\n        if dd < 1 or dd > 29:\n            return False\n    return True", "import re\n\ndef valid_date(date: str) -> bool:\n    if not date:\n        return False\n    pattern = re.compile('^\\\\d{2}-\\\\d{2}-\\\\d{4}$')\n    if not pattern.match(date):\n        return False\n    mm, dd, yyyy = map(int, date.split('-'))\n    if mm < 1 or mm > 12:\n        return False\n    if mm in {1, 3, 5, 7, 8, 10, 12}:\n        return 1 <= dd <= 31\n    elif mm in {4, 6, 9, 11}:\n        return 1 <= dd <= 30\n    else:\n        return 1 <= dd <= 29"], "failed_inputs_outputs": "[[[['06-04-2020\\n'], [True], [False]]], [[['06-04-2020\\n'], [True], [False]]], [[['06-04-2020\\n'], [True], [False]]], [[['06-04-2020\\n'], [True], [False]]], [[['06-04-2020\\n'], [True], [False]]], [[['06-04-2020\\n'], [True], [False]]], [[['06-04-2020\\n'], [True], [False]]], [[['06-04-2020\\n'], [True], [False]]], [[['06-04-2020\\n'], [True], [False]]], [[['06-04-2020\\n'], [True], [False]]]]"}
{"task_id": "HumanEval/125", "requirement": "from typing import List\nfrom typing import Union\n\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    '''", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\nfrom typing import Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                order = ord(char) - ord('a')\n                if order % 2 != 0:\n                    count += 1\n        return count", "from typing import List\nfrom typing import Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if (ord(char) - ord('a')) % 2 != 0:\n                    count += 1\n        return count", "from typing import List\nfrom typing import Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if (ord(char) - ord('a')) % 2 != 0:\n                    count += 1\n        return count", "from typing import List, Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                order = ord(char) - ord('a')\n                if order % 2 != 0:\n                    count += 1\n        return count", "from typing import List\nfrom typing import Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if (ord(char) - ord('a')) % 2 != 0:\n                    count += 1\n        return count", "from typing import List, Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 != 0:\n                count += 1\n        return count", "from typing import List, Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if (ord(char) - ord('a')) % 2 != 0:\n                    count += 1\n        return count", "from typing import List\nfrom typing import Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if (ord(char) - ord('a')) % 2 != 0:\n                    count += 1\n        return count", "from typing import List\nfrom typing import Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if (ord(char) - ord('a')) % 2 != 0:\n                    count += 1\n        return count", "from typing import List, Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if (ord(char) - ord('a')) % 2 != 0:\n                    count += 1\n        return count", "from typing import List, Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if (ord(char) - ord('a')) % 2 != 0:\n                    count += 1\n        return count", "from typing import List\nfrom typing import Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if (ord(char) - ord('a')) % 2 != 0:\n                    count += 1\n        return count", "from typing import List, Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if (ord(char) - ord('a')) % 2 != 0:\n                    count += 1\n        return count", "from typing import List, Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if (ord(char) - ord('a')) % 2 != 0:\n                    count += 1\n        return count", "from typing import List, Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if (ord(char) - ord('a')) % 2 != 0:\n                    count += 1\n        return count", "from typing import List\nfrom typing import Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if (ord(char) - ord('a')) % 2 != 0:\n                    count += 1\n        return count", "from typing import List\nfrom typing import Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if (ord(char) - ord('a')) % 2 != 0:\n                    count += 1\n        return count", "from typing import List, Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if (ord(char) - ord('a')) % 2 != 0:\n                    count += 1\n        return count", "from typing import List\nfrom typing import Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 != 0:\n                count += 1\n        return count"], "outputs": "[[['Hello', 'world!']], [['Hello', 'world!']], [3], [['This', 'is', 'a', 'test']], [['One', 'Two', 'Three']], [3], [['Leading', 'and', 'trailing', 'spaces']], [['Multiple', 'spaces', 'between', 'words']], [0], [0], [['A', 'B', 'C', 'D', 'E']]]", "probability": 0.95, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nfrom typing import Union\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and ord(char) % 2 != 0:\n                count += 1\n        return count"], "outputs": "[[['Hello', 'world!']], [['Hello', 'world!']], [3], [['This', 'is', 'a', 'test']], [['One', 'Two', 'Three']], [12], [['Leading', 'and', 'trailing', 'spaces']], [['Multiple', 'spaces', 'between', 'words']], [0], [1], [['A', 'B', 'C', 'D', 'E']]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[['Hello world!'], ['Hello,world!'], ['abcdef'], ['This is a test'], ['One,Two,Three'], ['NoSpacesOrCommasHere'], ['  Leading and trailing spaces  '], ['Multiple   spaces   between   words'], [''], ['a'], ['A,B,C,D,E']]", "input_output_examples": "[[['Hello world!'], ['Hello,world!'], ['abcdef']], [[['Hello', 'world!']], [['Hello', 'world!']], [3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.1431984785579781}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/126", "requirement": "from typing import List\n\n\ndef is_sorted(lst: List[int]) -> bool:\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) != len(set(lst)):\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i - 1]:\n            return False\n    return True", "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) != len(set(lst)):\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True", "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) != len(set(lst)):\n        return False\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) == 0:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n    return len(lst) == len(set(lst))", "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) != len(set(lst)):\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True", "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) != len(set(lst)):\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n    return True", "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) != len(set(lst)):\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True", "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) != len(set(lst)):\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True", "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) != len(set(lst)):\n        return False\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) != len(set(lst)):\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True", "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) != len(set(lst)):\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True", "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) != len(set(lst)):\n        return False\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) != len(set(lst)):\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i - 1]:\n            return False\n    return True", "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) != len(set(lst)):\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i - 1]:\n            return False\n    return True", "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) != len(set(lst)):\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True", "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) != len(set(lst)):\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i - 1]:\n            return False\n    return True", "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) != len(set(lst)):\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i - 1]:\n            return False\n    return True", "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) == 0:\n        return True\n    if len(set(lst)) != len(lst):\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True", "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) == 0:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n    for num in lst:\n        if lst.count(num) > 1:\n            return False\n    return True", "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) == 0:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n    if len(lst) != len(set(lst)):\n        return False\n    return True"], "outputs": "[[True], [True], [False], [True], [True], [False], [False], [False], [True], [True], [False], [True], [False], [False]]", "probability": 1.0, "is_align_req": false, "test_consistency": 0.875, "failed_input_output_examples": "[[[[1, 2, 2, 3, 3, 4]], [False], [True]]]"}], "entropy": 0, "llm_generated_inputs": "[[[5]], [[1, 2, 3, 4, 5]], [[1, 3, 2, 4, 5]], [[1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5, 6, 7]], [[1, 3, 2, 4, 5, 6, 7]], [[1, 2, 2, 3, 3, 4]], [[1, 2, 2, 2, 3, 4]], [[]], [[1]], [[1, 1, 1, 1]], [[10, 20, 30, 40, 50]], [[10, 20, 20, 30, 40, 50]], [[10, 20, 20, 20, 30, 40, 50]]]", "input_output_examples": "[[[[5]], [[1, 2, 3, 4, 5]], [[1, 3, 2, 4, 5]], [[1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5, 6, 7]], [[1, 3, 2, 4, 5, 6, 7]], [[1, 2, 2, 3, 3, 4]], [[1, 2, 2, 2, 3, 4]]], [[True], [True], [False], [True], [True], [False], [True], [False]]]", "weighted_test_consistency": 0.875, "at_least_one_align": false, "ambiguity": 0.0625}, "repaired_clusters": null, "original_passk": 0.0, "repaired_passk": 0.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/127", "requirement": "from typing import Tuple\n\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. \n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersect_start = max(start1, start2)\n    intersect_end = min(end1, end2)\n    if intersect_start > intersect_end:\n        return 'NO'\n    length = intersect_end - intersect_start + 1\n    return 'YES' if is_prime(length) else 'NO'", "from typing import Tuple\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    if intersection_start > intersection_end:\n        return 'NO'\n    length = intersection_end - intersection_start + 1\n    if is_prime(length):\n        return 'YES'\n    return 'NO'", "from typing import Tuple\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return 'NO'\n    length = end - start + 1\n    return 'YES' if is_prime(length) else 'NO'", "from typing import Tuple\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    if intersection_start > intersection_end:\n        return 'NO'\n    length = intersection_end - intersection_start + 1\n    return 'YES' if is_prime(length) else 'NO'", "from typing import Tuple\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersect_start = max(start1, start2)\n    intersect_end = min(end1, end2)\n    if intersect_start > intersect_end:\n        return 'NO'\n    length = intersect_end - intersect_start + 1\n    return 'YES' if is_prime(length) else 'NO'", "from typing import Tuple\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    if intersection_start > intersection_end:\n        return 'NO'\n    length = intersection_end - intersection_start + 1\n    return 'YES' if is_prime(length) else 'NO'", "from typing import Tuple\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    if intersection_start > intersection_end:\n        return 'NO'\n    length = intersection_end - intersection_start + 1\n    return 'YES' if is_prime(length) else 'NO'", "from typing import Tuple\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersect_start = max(start1, start2)\n    intersect_end = min(end1, end2)\n    if intersect_start > intersect_end:\n        return 'NO'\n    length = intersect_end - intersect_start + 1\n    return 'YES' if is_prime(length) else 'NO'", "from typing import Tuple\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return 'NO'\n    length = end - start + 1\n    if is_prime(length):\n        return 'YES'\n    return 'NO'", "from typing import Tuple\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    if intersection_start > intersection_end:\n        return 'NO'\n    length = intersection_end - intersection_start + 1\n    return 'YES' if is_prime(length) else 'NO'", "from typing import Tuple\nimport math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return 'NO'\n    length = end - start + 1\n    if is_prime(length):\n        return 'YES'\n    return 'NO'", "from typing import Tuple\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    if intersection_start > intersection_end:\n        return 'NO'\n    length = intersection_end - intersection_start + 1\n    return 'YES' if is_prime(length) else 'NO'", "from typing import Tuple\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    if intersection_start > intersection_end:\n        return 'NO'\n    length = intersection_end - intersection_start + 1\n    return 'YES' if is_prime(length) else 'NO'", "from typing import Tuple\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    if intersection_start > intersection_end:\n        return 'NO'\n    length = intersection_end - intersection_start + 1\n    if is_prime(length):\n        return 'YES'\n    return 'NO'", "from typing import Tuple\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    if intersection_start > intersection_end:\n        return 'NO'\n    length = intersection_end - intersection_start + 1\n    return 'YES' if is_prime(length) else 'NO'", "from typing import Tuple\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    if intersection_start > intersection_end:\n        return 'NO'\n    length = intersection_end - intersection_start + 1\n    return 'YES' if is_prime(length) else 'NO'", "from typing import Tuple\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    if intersection_start > intersection_end:\n        return 'NO'\n    length = intersection_end - intersection_start + 1\n    return 'YES' if is_prime(length) else 'NO'", "from typing import Tuple\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersect_start = max(start1, start2)\n    intersect_end = min(end1, end2)\n    if intersect_start > intersect_end:\n        return 'NO'\n    length = intersect_end - intersect_start + 1\n    return 'YES' if is_prime(length) else 'NO'", "from typing import Tuple\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    if intersection_start > intersection_end:\n        return 'NO'\n    length = intersection_end - intersection_start + 1\n    return 'YES' if is_prime(length) else 'NO'", "from typing import Tuple\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersect_start = max(start1, start2)\n    intersect_end = min(end1, end2)\n    if intersect_start > intersect_end:\n        return 'NO'\n    length = intersect_end - intersect_start + 1\n    return 'YES' if is_prime(length) else 'NO'"], "outputs": "[['YES'], ['YES'], ['YES'], ['NO'], ['NO'], ['YES'], ['YES'], ['NO'], ['YES'], ['YES']]", "probability": 1.0, "is_align_req": false, "test_consistency": 0.25, "failed_input_output_examples": "[[[(1, 3), (2, 4)], ['YES'], ['NO']], [[(-1, 1), (0, 4)], ['YES'], ['NO']], [[(-3, -1), (-5, 5)], ['YES'], [['YES']]]]"}], "entropy": 0, "llm_generated_inputs": "[[(1, 3), (2, 4)], [(1, 5), (3, 7)], [(-3, -1), (-5, 5)], [(1, 2), (3, 4)], [(5, 5), (5, 5)], [(2, 10), (1, 3)], [(-10, -5), (-7, -6)], [(0, 10), (10, 20)], [(0, 10), (-5, 15)], [(3, 7), (3, 7)]]", "input_output_examples": "[[[(1, 3), (2, 4)], [(1, 2), (2, 3)], [(-1, 1), (0, 4)], [(-3, -1), (-5, 5)]], [['NO'], ['NO'], ['NO'], [['YES']]]]", "weighted_test_consistency": 0.25, "at_least_one_align": false, "ambiguity": 0.375}, "repaired_clusters": null, "original_passk": 0.0, "repaired_passk": 0.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/128", "requirement": "from typing import List\n\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    product = 1\n    total = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n        total += abs(num)\n    return product * total", "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n        magnitude_sum += abs(num)\n    return product * magnitude_sum", "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum", "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    product = 1\n    total = 0\n    for num in arr:\n        if num > 0:\n            sign = 1\n        elif num < 0:\n            sign = -1\n        else:\n            sign = 0\n        product *= sign\n        total += abs(num)\n    return product * total", "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    product = 1\n    total = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n        total += abs(num)\n    return product * total", "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    product = 1\n    total = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n        total += abs(num)\n    return product * total", "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    product = 1\n    total = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n        total += abs(num)\n    return product * total", "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum", "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    product = 1\n    total = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n        total += abs(num)\n    return product * total", "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum", "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    product = 1\n    total = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n        total += abs(num)\n    return product * total", "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n        magnitude_sum += abs(num)\n    return product * magnitude_sum", "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    product = 1\n    total_magnitude = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n        total_magnitude += abs(num)\n    return product * total_magnitude", "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    product = 1\n    total = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n        total += abs(num)\n    return total * product", "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    sign_prod = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_prod *= 1\n        elif num < 0:\n            sign_prod *= -1\n        else:\n            sign_prod *= 0\n        magnitude_sum += abs(num)\n    return sign_prod * magnitude_sum", "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    sign_prod = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_prod *= 1\n        elif num < 0:\n            sign_prod *= -1\n        else:\n            sign_prod *= 0\n        magnitude_sum += abs(num)\n    return sign_prod * magnitude_sum", "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n        magnitude_sum += abs(num)\n    return magnitude_sum * product", "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n        magnitude_sum += abs(num)\n    return product * magnitude_sum", "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum", "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    if not arr:\n        return None\n    sign_prod = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_prod *= 1\n        elif num < 0:\n            sign_prod *= -1\n        else:\n            sign_prod *= 0\n        magnitude_sum += abs(num)\n    return sign_prod * magnitude_sum"], "outputs": "[[-9], [0], [None], [0], [-12], [10], [0], [4], [10], [5]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 2, -4]], [[0, 1]], [[]], [[5, -3, 0, 2, -1]], [[-7, -2, -3]], [[10]], [[0, 0, 0]], [[-1, -1, -1, -1]], [[2, -2, 2, -2, 2]], [[1, 1, 1, 1, 1]]]", "input_output_examples": "[[[[1, 2, 2, -4]], [[0, 1]], [[]]], [[-9], [0], [None]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/129", "requirement": "from typing import List\n\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with your current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \"\"\"", "repaired_requirement": "from typing import List\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a unique value in the range [1, N * N] inclusive.\n\n    Find the lexicographically smallest path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells (cells that share an edge with the current cell).\n    A path of length k means visiting exactly k cells (cells can be revisited).\n\n    The path must stay within the grid boundaries. The lexicographical order is determined by comparing the sequences of cell values in the paths.\n    It is guaranteed that the answer is unique.\n\n    Return an ordered list of the values on the cells that the minimum path goes through.\n\n    Example:\n    >>> minPath([[1, 2], [3, 4]], 3)\n    [1, 2, 1]\n    >>> minPath([[1, 2], [3, 4]], 2)\n    [1, 2]\n    \"\"\"", "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path.copy()\n                new_path.append(grid[nx][ny])\n                heappush(heap, (new_path, nx, ny))\n    return []", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    visited = set()\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        if (x, y, tuple(path)) in visited:\n            continue\n        visited.add((x, y, tuple(path)))\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path.copy()\n                new_path.append(grid[nx][ny])\n                heappush(heap, (new_path, nx, ny))\n    return []", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def get_neighbors(x, y):\n        neighbors = []\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                neighbors.append((nx, ny))\n        return neighbors\n    min_path = None\n    for i, j in product(range(n), range(n)):\n        stack = [((i, j), [grid[i][j]])]\n        while stack:\n            (x, y), path = stack.pop()\n            if len(path) == k:\n                if min_path is None or path < min_path:\n                    min_path = path\n                continue\n            for nx, ny in get_neighbors(x, y):\n                stack.append(((nx, ny), path + [grid[nx][ny]]))\n    return min_path", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < n\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if is_valid(nx, ny):\n                new_path = path.copy()\n                new_path.append(grid[nx][ny])\n                heappush(heap, (new_path, nx, ny))\n    return []", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    N = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    heap = []\n    for i in range(N):\n        for j in range(N):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < N and 0 <= ny < N:\n                new_path = path.copy()\n                new_path.append(grid[nx][ny])\n                heappush(heap, (new_path, nx, ny))\n    return []", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    N = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def get_neighbors(x, y):\n        neighbors = []\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < N and 0 <= ny < N:\n                neighbors.append((nx, ny))\n        return neighbors\n\n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n        min_path = None\n        for nx, ny in get_neighbors(x, y):\n            new_path = path + [grid[nx][ny]]\n            candidate = dfs(nx, ny, new_path)\n            if candidate is not None:\n                if min_path is None or candidate < min_path:\n                    min_path = candidate\n        return min_path\n    min_result = None\n    for i, j in product(range(N), range(N)):\n        candidate = dfs(i, j, [grid[i][j]])\n        if candidate is not None:\n            if min_result is None or candidate < min_result:\n                min_result = candidate\n    return min_result", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path.copy()\n                new_path.append(grid[nx][ny])\n                heappush(heap, (new_path, nx, ny))\n    return []", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n        min_path = None\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path + [grid[nx][ny]]\n                if min_path is None or new_path < min_path:\n                    candidate = dfs(nx, ny, new_path)\n                    if min_path is None or candidate < min_path:\n                        min_path = candidate\n        return min_path\n    min_result = None\n    for i, j in product(range(n), range(n)):\n        current_path = dfs(i, j, [grid[i][j]])\n        if min_result is None or current_path < min_result:\n            min_result = current_path\n    return min_result"], "outputs": "[[[1, 2, 1]], [[1]], [[1, 2]], [[1, 2, 1, 2]], [[6]], [[1, 2, 1, 2, 1]], [[10, 20]], [[1, 2, 1, 2, 1, 2, 1, 2, 1]], [[1, 3, 1]], [[1]]]", "probability": 0.4, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    N = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def dfs(x, y, path, visited):\n        if len(path) == k:\n            return path\n        min_path = None\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < N and 0 <= ny < N and ((nx, ny) not in visited):\n                new_path = path + [grid[nx][ny]]\n                visited.add((nx, ny))\n                candidate = dfs(nx, ny, new_path, visited)\n                if candidate is not None:\n                    if min_path is None or candidate < min_path:\n                        min_path = candidate\n                visited.remove((nx, ny))\n        return min_path\n    min_result = None\n    for i, j in product(range(N), range(N)):\n        visited = set()\n        visited.add((i, j))\n        candidate = dfs(i, j, [grid[i][j]], visited)\n        if candidate is not None:\n            if min_result is None or candidate < min_result:\n                min_result = candidate\n    return min_result", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def dfs(x, y, path, visited):\n        if len(path) == k:\n            return path\n        min_path = None\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and ((nx, ny) not in visited):\n                new_visited = visited.copy()\n                new_visited.add((nx, ny))\n                new_path = path + [grid[nx][ny]]\n                candidate = dfs(nx, ny, new_path, new_visited)\n                if candidate is not None:\n                    if min_path is None or candidate < min_path:\n                        min_path = candidate\n        return min_path\n    min_result = None\n    for i, j in product(range(n), range(n)):\n        visited = set()\n        visited.add((i, j))\n        path = [grid[i][j]]\n        candidate = dfs(i, j, path, visited)\n        if candidate is not None:\n            if min_result is None or candidate < min_result:\n                min_result = candidate\n    return min_result", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    N = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def dfs(x, y, path, visited):\n        if len(path) == k:\n            return path\n        min_path = None\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < N and 0 <= ny < N and ((nx, ny) not in visited):\n                new_path = path + [grid[nx][ny]]\n                visited.add((nx, ny))\n                result = dfs(nx, ny, new_path, visited)\n                if result and (min_path is None or result < min_path):\n                    min_path = result\n                visited.remove((nx, ny))\n        return min_path\n    min_result = None\n    for i, j in product(range(N), range(N)):\n        visited = set()\n        visited.add((i, j))\n        path = dfs(i, j, [grid[i][j]], visited)\n        if path and (min_result is None or path < min_result):\n            min_result = path\n    return min_result", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def get_neighbors(i, j):\n        return [(i + di, j + dj) for di, dj in directions if 0 <= i + di < n and 0 <= j + dj < n]\n\n    def dfs(i, j, path, visited):\n        if len(path) == k:\n            return path\n        min_path = None\n        for ni, nj in get_neighbors(i, j):\n            if (ni, nj) not in visited:\n                visited.add((ni, nj))\n                candidate = dfs(ni, nj, path + [grid[ni][nj]], visited)\n                visited.remove((ni, nj))\n                if candidate is not None:\n                    if min_path is None or candidate < min_path:\n                        min_path = candidate\n        return min_path\n    min_result = None\n    for i, j in product(range(n), range(n)):\n        visited = set()\n        visited.add((i, j))\n        candidate = dfs(i, j, [grid[i][j]], visited)\n        if candidate is not None:\n            if min_result is None or candidate < min_result:\n                min_result = candidate\n    return min_result", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def dfs(x, y, path, visited):\n        if len(path) == k:\n            return path\n        min_path = None\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and ((nx, ny) not in visited):\n                new_path = path + [grid[nx][ny]]\n                new_visited = visited.copy()\n                new_visited.add((nx, ny))\n                result = dfs(nx, ny, new_path, new_visited)\n                if result is not None:\n                    if min_path is None or result < min_path:\n                        min_path = result\n        return min_path\n    min_result = None\n    for i, j in product(range(n), range(n)):\n        current_path = [grid[i][j]]\n        visited = set()\n        visited.add((i, j))\n        result = dfs(i, j, current_path, visited)\n        if result is not None:\n            if min_result is None or result < min_result:\n                min_result = result\n    return min_result", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    N = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def is_valid(x, y):\n        return 0 <= x < N and 0 <= y < N\n\n    def dfs(x, y, path, visited):\n        if len(path) == k:\n            return path\n        min_path = None\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if is_valid(nx, ny) and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                current_path = dfs(nx, ny, path + [grid[nx][ny]], visited)\n                if current_path is not None:\n                    if min_path is None or current_path < min_path:\n                        min_path = current_path\n                visited.remove((nx, ny))\n        return min_path\n    min_result = None\n    for i, j in product(range(N), range(N)):\n        visited = set()\n        visited.add((i, j))\n        path = dfs(i, j, [grid[i][j]], visited)\n        if path is not None:\n            if min_result is None or path < min_result:\n                min_result = path\n    return min_result", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def dfs(x, y, path, visited):\n        if len(path) == k:\n            return path\n        min_path = None\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and ((nx, ny) not in visited):\n                new_path = path + [grid[nx][ny]]\n                new_visited = visited | {(nx, ny)}\n                candidate = dfs(nx, ny, new_path, new_visited)\n                if candidate is not None:\n                    if min_path is None or candidate < min_path:\n                        min_path = candidate\n        return min_path\n    min_result = None\n    for i, j in product(range(n), range(n)):\n        current_path = [grid[i][j]]\n        current_visited = {(i, j)}\n        candidate = dfs(i, j, current_path, current_visited)\n        if candidate is not None:\n            if min_result is None or candidate < min_result:\n                min_result = candidate\n    return min_result"], "outputs": "[[[1, 2, 3]], [[1]], [[1, 2]], [[1, 2, 4, 3]], [[6]], [[1, 2, 3, 6, 5]], [[10, 20]], [[1, 2, 3, 6, 5, 4, 7, 8, 9]], [[1, 3, 2]], [[1]]]", "probability": 0.35, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3], [[1, 2, 3]], [[1, 2, 1]]]]"}, {"programs_str": ["from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    N = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def dfs(x, y, path, visited):\n        if len(path) == k:\n            return path\n        min_path = None\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < N and 0 <= ny < N and ((nx, ny) not in visited):\n                visited.add((nx, ny))\n                current_path = dfs(nx, ny, path + [grid[nx][ny]], visited)\n                if min_path is None or current_path < min_path:\n                    min_path = current_path\n                visited.remove((nx, ny))\n        return min_path\n    min_result = None\n    for i, j in product(range(N), range(N)):\n        visited = set()\n        visited.add((i, j))\n        current_path = dfs(i, j, [grid[i][j]], visited)\n        if min_result is None or current_path < min_result:\n            min_result = current_path\n    return min_result", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < n\n\n    def dfs(x, y, path, visited):\n        if len(path) == k:\n            return path\n        min_path = None\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if is_valid(nx, ny) and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                current_path = dfs(nx, ny, path + [grid[nx][ny]], visited)\n                if min_path is None or current_path < min_path:\n                    min_path = current_path\n                visited.remove((nx, ny))\n        return min_path\n    min_result = None\n    for i, j in product(range(n), range(n)):\n        visited = set()\n        visited.add((i, j))\n        current_path = dfs(i, j, [grid[i][j]], visited)\n        if min_result is None or current_path < min_result:\n            min_result = current_path\n    return min_result", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < n\n\n    def dfs(x, y, path, visited):\n        if len(path) == k:\n            return path\n        min_path = None\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if is_valid(nx, ny) and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                current_path = dfs(nx, ny, path + [grid[nx][ny]], visited)\n                if min_path is None or current_path < min_path:\n                    min_path = current_path\n                visited.remove((nx, ny))\n        return min_path\n    min_result = None\n    for i, j in product(range(n), range(n)):\n        visited = set()\n        visited.add((i, j))\n        current_path = dfs(i, j, [grid[i][j]], visited)\n        if min_result is None or current_path < min_result:\n            min_result = current_path\n    return min_result", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    N = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def get_neighbors(x, y):\n        return [(x + dx, y + dy) for dx, dy in directions if 0 <= x + dx < N and 0 <= y + dy < N]\n\n    def dfs(x, y, path, visited):\n        if len(path) == k:\n            return path\n        neighbors = get_neighbors(x, y)\n        min_path = None\n        for nx, ny in neighbors:\n            if (nx, ny) not in visited:\n                visited.add((nx, ny))\n                current_path = dfs(nx, ny, path + [grid[nx][ny]], visited)\n                if min_path is None or current_path < min_path:\n                    min_path = current_path\n                visited.remove((nx, ny))\n        return min_path\n    min_result = None\n    for i, j in product(range(N), range(N)):\n        visited = set()\n        visited.add((i, j))\n        current_path = dfs(i, j, [grid[i][j]], visited)\n        if min_result is None or current_path < min_result:\n            min_result = current_path\n    return min_result", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def get_neighbors(x, y):\n        neighbors = []\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                neighbors.append((nx, ny))\n        return neighbors\n\n    def dfs(x, y, path, visited):\n        if len(path) == k:\n            return path\n        min_path = None\n        for nx, ny in get_neighbors(x, y):\n            if (nx, ny) not in visited:\n                visited.add((nx, ny))\n                current_path = dfs(nx, ny, path + [grid[nx][ny]], visited)\n                if min_path is None or current_path < min_path:\n                    min_path = current_path\n                visited.remove((nx, ny))\n        return min_path\n    min_result = None\n    for i, j in product(range(n), range(n)):\n        visited = set()\n        visited.add((i, j))\n        path = dfs(i, j, [grid[i][j]], visited)\n        if min_result is None or path < min_result:\n            min_result = path\n    return min_result"], "outputs": "[[[1, 2, 3]], [[1]], [[1, 2]], [[1, 2, 4, 3]], [[6]], ['TypeError'], [[10, 20]], ['TypeError'], [[1, 3, 2]], [[1]]]", "probability": 0.25, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3], [[1, 2, 3]], [[1, 2, 1]]]]"}], "entropy": 0.9835386311891134, "llm_generated_inputs": "[[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3], [[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1], [[[1, 3], [2, 4]], 2], [[[1, 2], [3, 4]], 4], [[[9, 8], [7, 6]], 1], [[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 5], [[[10, 20], [30, 40]], 2], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9], [[[5, 1], [2, 3]], 3], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1]]", "input_output_examples": "[[[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3], [[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1]], [[[1, 2, 1]], [[1]]]]", "weighted_test_consistency": 0.7, "at_least_one_align": true, "ambiguity": 0.6417693155945567}, "repaired_clusters": {"cluster_list": [{"programs_str": ["from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                heappush(heap, (path + [grid[nx][ny]], nx, ny))\n    return []", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                heappush(heap, (path + [grid[nx][ny]], nx, ny))\n    return []", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path + [grid[nx][ny]]\n                if len(new_path) <= k:\n                    heappush(heap, (new_path, nx, ny))\n    return []", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path + [grid[nx][ny]]\n                if len(new_path) <= k:\n                    heappush(heap, (new_path, nx, ny))\n    return []", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(min_heap, ([grid[i][j]], i, j))\n    while min_heap:\n        path, x, y = heappop(min_heap)\n        if len(path) == k:\n            return path\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path.copy()\n                new_path.append(grid[nx][ny])\n                heappush(min_heap, (new_path, nx, ny))\n    return []", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                heappush(heap, (path + [grid[nx][ny]], nx, ny))\n    return []", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path + [grid[nx][ny]]\n                heappush(heap, (new_path, nx, ny))\n    return []", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def get_neighbors(x, y):\n        neighbors = []\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                neighbors.append((nx, ny))\n        return neighbors\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        for nx, ny in get_neighbors(x, y):\n            new_path = path.copy()\n            new_path.append(grid[nx][ny])\n            heappush(heap, (new_path, nx, ny))\n    return []", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    visited = set()\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        if (x, y, tuple(path)) in visited:\n            continue\n        visited.add((x, y, tuple(path)))\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path.copy()\n                new_path.append(grid[nx][ny])\n                heappush(heap, (new_path, nx, ny))\n    return []", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def dfs(x, y, path, visited):\n        if len(path) == k:\n            return path\n        min_path = None\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                if (nx, ny) not in visited or visited[nx, ny] < k:\n                    visited[nx, ny] = visited.get((nx, ny), 0) + 1\n                    new_path = dfs(nx, ny, path + [grid[nx][ny]], visited)\n                    if new_path is not None:\n                        if min_path is None or new_path < min_path:\n                            min_path = new_path\n                    visited[nx, ny] -= 1\n                    if visited[nx, ny] == 0:\n                        del visited[nx, ny]\n        return min_path\n    min_result = None\n    for i, j in product(range(n), range(n)):\n        visited = {(i, j): 1}\n        current_path = dfs(i, j, [grid[i][j]], visited)\n        if current_path is not None:\n            if min_result is None or current_path < min_result:\n                min_result = current_path\n    return min_result", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                heappush(heap, (path + [grid[nx][ny]], nx, ny))\n    return []", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path.copy()\n                new_path.append(grid[nx][ny])\n                heappush(heap, (new_path, nx, ny))\n    return []", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_path = None\n\n    def dfs(i, j, path, visited):\n        nonlocal min_path\n        if len(path) == k:\n            if min_path is None or path < min_path:\n                min_path = path.copy()\n            return\n        for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            ni, nj = (i + di, j + dj)\n            if 0 <= ni < n and 0 <= nj < n:\n                dfs(ni, nj, path + [grid[ni][nj]], visited | {(ni, nj)})\n    for i, j in product(range(n), range(n)):\n        dfs(i, j, [grid[i][j]], {(i, j)})\n    return min_path", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path.copy()\n                new_path.append(grid[nx][ny])\n                heappush(heap, (new_path, nx, ny))\n    return []", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    visited = set()\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        if (x, y, tuple(path)) in visited:\n            continue\n        visited.add((x, y, tuple(path)))\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path.copy()\n                new_path.append(grid[nx][ny])\n                heappush(heap, (new_path, nx, ny))\n    return []", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n        min_path = None\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path + [grid[nx][ny]]\n                candidate = dfs(nx, ny, new_path)\n                if candidate is not None:\n                    if min_path is None or candidate < min_path:\n                        min_path = candidate\n        return min_path\n    min_result = None\n    for i, j in product(range(n), range(n)):\n        current_path = dfs(i, j, [grid[i][j]])\n        if current_path is not None:\n            if min_result is None or current_path < min_result:\n                min_result = current_path\n    return min_result", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n        min_path = None\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path + [grid[nx][ny]]\n                candidate = dfs(nx, ny, new_path)\n                if min_path is None or candidate < min_path:\n                    min_path = candidate\n        return min_path\n    min_result = None\n    for i, j in product(range(n), range(n)):\n        current_path = dfs(i, j, [grid[i][j]])\n        if min_result is None or current_path < min_result:\n            min_result = current_path\n    return min_result", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path + [grid[nx][ny]]\n                if len(new_path) <= k:\n                    heappush(heap, (new_path, nx, ny))\n    return []", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path.copy()\n                new_path.append(grid[nx][ny])\n                heappush(heap, (new_path, nx, ny))\n    return []", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(min_heap, ([grid[i][j]], i, j))\n    while min_heap:\n        path, x, y = heappop(min_heap)\n        if len(path) == k:\n            return path\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path.copy()\n                new_path.append(grid[nx][ny])\n                heappush(min_heap, (new_path, nx, ny))\n    return []"], "outputs": "[[[1, 2, 1]], [[1]], [[1, 2]], [[1, 2, 1, 2]], [[6]], [[1, 2, 1, 2, 1]], [[10, 20]], [[1, 2, 1, 2, 1, 2, 1, 2, 1]], [[1, 3, 1]], [[1]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3], [[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1], [[[1, 3], [2, 4]], 2], [[[1, 2], [3, 4]], 4], [[[9, 8], [7, 6]], 1], [[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 5], [[[10, 20], [30, 40]], 2], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9], [[[5, 1], [2, 3]], 3], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1]]", "input_output_examples": "[[[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3], [[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1]], [[[1, 2, 1]], [[1]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "original_passk": 0.4, "repaired_passk": 0.8, "generated_programs": ["from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    min_heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(min_heap, ([grid[i][j]], i, j))\n    while min_heap:\n        path, x, y = heappop(min_heap)\n        if len(path) == k:\n            return path\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path.copy()\n                new_path.append(grid[nx][ny])\n                heappush(min_heap, (new_path, nx, ny))\n    return []", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    visited = set()\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        if (x, y, tuple(path)) in visited:\n            continue\n        visited.add((x, y, tuple(path)))\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path.copy()\n                new_path.append(grid[nx][ny])\n                heappush(heap, (new_path, nx, ny))\n    return []", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def dfs(x, y, path, visited):\n        if len(path) == k:\n            return path\n        min_path = None\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                if (nx, ny) not in visited:\n                    visited.add((nx, ny))\n                    current_path = dfs(nx, ny, path + [grid[nx][ny]], visited)\n                    visited.remove((nx, ny))\n                    if min_path is None or (current_path is not None and current_path < min_path):\n                        min_path = current_path\n        return min_path\n    min_result = None\n    for i, j in product(range(n), range(n)):\n        visited = set()\n        visited.add((i, j))\n        current_path = dfs(i, j, [grid[i][j]], visited)\n        if min_result is None or (current_path is not None and current_path < min_result):\n            min_result = current_path\n    return min_result", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    visited = set()\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        if (x, y, tuple(path)) in visited:\n            continue\n        visited.add((x, y, tuple(path)))\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path.copy()\n                new_path.append(grid[nx][ny])\n                heappush(heap, (new_path, nx, ny))\n    return []", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def get_neighbors(i, j):\n        neighbors = []\n        for dx, dy in directions:\n            x, y = (i + dx, j + dy)\n            if 0 <= x < n and 0 <= y < n:\n                neighbors.append((x, y))\n        return neighbors\n\n    def dfs(i, j, path, visited):\n        if len(path) == k:\n            return path\n        min_path = None\n        for x, y in get_neighbors(i, j):\n            if (x, y) not in visited:\n                visited.add((x, y))\n                current_path = dfs(x, y, path + [grid[x][y]], visited)\n                if min_path is None or current_path < min_path:\n                    min_path = current_path\n                visited.remove((x, y))\n        return min_path\n    min_result = None\n    for i, j in product(range(n), range(n)):\n        visited = set()\n        visited.add((i, j))\n        current_path = dfs(i, j, [grid[i][j]], visited)\n        if min_result is None or current_path < min_result:\n            min_result = current_path\n    return min_result", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                heappush(heap, (path + [grid[nx][ny]], nx, ny))\n    return []", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path + [grid[nx][ny]]\n                if len(new_path) <= k:\n                    heappush(heap, (new_path, nx, ny))\n    return []", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n        min_path = None\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path.copy()\n                new_path.append(grid[nx][ny])\n                result = dfs(nx, ny, new_path)\n                if result and (min_path is None or result < min_path):\n                    min_path = result\n        return min_path\n    min_result = None\n    for i, j in product(range(n), range(n)):\n        path = [grid[i][j]]\n        result = dfs(i, j, path)\n        if result and (min_result is None or result < min_result):\n            min_result = result\n    return min_result", "from typing import List\nfrom itertools import product\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def dfs(x, y, path, visited):\n        if len(path) == k:\n            return path\n        min_path = None\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path + [grid[nx][ny]]\n                new_visited = visited.copy()\n                new_visited.add((nx, ny))\n                candidate = dfs(nx, ny, new_path, new_visited)\n                if candidate is not None:\n                    if min_path is None or candidate < min_path:\n                        min_path = candidate\n        return min_path\n    min_result = None\n    for i, j in product(range(n), range(n)):\n        candidate = dfs(i, j, [grid[i][j]], set([(i, j)]))\n        if candidate is not None:\n            if min_result is None or candidate < min_result:\n                min_result = candidate\n    return min_result", "from typing import List\nfrom heapq import heappush, heappop\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], i, j))\n    while heap:\n        path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path.copy()\n                new_path.append(grid[nx][ny])\n                heappush(heap, (new_path, nx, ny))\n    return []"], "failed_inputs_outputs": "[[], [], [[[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3], [[1, 2, 3]], [[1, 2, 1]]], [[[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4], [[1, 2, 3, 4]], [[1, 2, 1, 2]]], [[[[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7], [[1, 10, 13, 4, 6, 5, 3]], [[1, 10, 1, 10, 1, 10, 1]]], [[[[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5], [[1, 7, 4, 6, 5]], [[1, 7, 1, 7, 1]]], [[[[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9], [[1, 6, 4, 2, 7, 8, 11, 5, 9]], [[1, 6, 1, 6, 1, 6, 1, 6, 1]]], [[[[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12], [[1, 6, 4, 2, 7, 8, 11, 5, 9, 3, 13, 10]], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]]], [[[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8], [[1, 3, 2, 7, 4, 5, 9, 8]], [[1, 3, 1, 3, 1, 3, 1, 3]]], [[[[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8], [[1, 5, 9, 4, 7, 2, 3, 6]], [[1, 5, 1, 5, 1, 5, 1, 5]]], [[[[1, 2], [3, 4]], 10], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9], [[1, 2, 3, 6, 5, 4, 7, 8, 9]], [[1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[9, 8, 7], [6, 5, 4], [3, 2, 1]], 3], [[1, 2, 3]], [[1, 2, 1]]], [[[[2, 3, 4], [5, 6, 7], [8, 9, 1]], 5], [[1, 7, 4, 3, 2]], [[1, 7, 1, 7, 1]]], [[[[5, 4, 7], [2, 1, 8], [3, 6, 9]], 4], [[1, 2, 3, 6]], [[1, 2, 1, 2]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5], [[1, 2, 3, 6, 5]], [[1, 2, 1, 2, 1]]], [[[[1, 5, 3], [4, 2, 6], [7, 8, 9]], 4], [[1, 4, 2, 5]], [[1, 4, 1, 4]]], [[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 6], [[1, 2, 3, 6, 5, 4]], [[1, 2, 1, 2, 1, 2]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 15], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3], [[1, 2, 3]], [[1, 2, 1]]], [[[[2, 3, 4], [5, 6, 7], [8, 9, 1]], 13], [None], [[1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 6], [[1, 2, 3, 6, 5, 4]], [[1, 2, 1, 2, 1, 2]]], [[[[2, 3, 4], [5, 6, 7], [8, 9, 1]], 4], [[1, 7, 4, 3]], [[1, 7, 1, 7]]], [[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 5], [[1, 2, 3, 6, 5]], [[1, 2, 1, 2, 1]]], [[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 7], [[1, 2, 3, 6, 5, 4, 7]], [[1, 2, 1, 2, 1, 2, 1]]], [[[[2, 3, 4], [5, 6, 7], [8, 9, 1]], 18], [None], [[1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7]]], [[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 9], [[1, 2, 3, 6, 5, 4, 7, 8, 9]], [[1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 5, 3], [4, 2, 6], [7, 8, 9]], 3], [[1, 4, 2]], [[1, 4, 1]]], [[[[5, 4, 7], [2, 1, 8], [3, 6, 9]], 12], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 20], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 19], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 20], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[2, 3, 4], [5, 6, 7], [8, 9, 1]], 17], [None], [[1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1]]], [[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 17], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[2, 3, 4], [5, 6, 7], [8, 9, 1]], 3], [[1, 7, 4]], [[1, 7, 1]]], [[[[2, 3, 4], [5, 6, 7], [8, 9, 1]], 6], [[1, 7, 4, 3, 2, 5]], [[1, 7, 1, 7, 1, 7]]], [[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 13], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 14], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 21], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[2, 3, 4], [5, 6, 7], [8, 9, 1]], 12], [None], [[1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7]]], [[[[2, 3, 4], [5, 6, 7], [8, 9, 1]], 15], [None], [[1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 16], [[1, 6, 8, 7, 13, 14, 16, 11, 15, 3, 2, 10, 4, 5, 12, 9]], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 16], [[1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13]], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 5], [[1, 3, 5, 7, 15]], [[1, 3, 1, 3, 1]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 10], [[1, 4, 6, 2, 8, 9, 16, 14, 17, 12]], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 10], [[1, 5, 8, 2, 3, 11, 6, 9, 7, 10]], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5]]], [[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 9], [[1, 2, 3, 4, 5, 10, 9, 8, 7]], [[1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 2], [3, 4]], 3], [[1, 2, 4]], [[1, 2, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 8], [[1, 3, 5, 7, 15, 8, 6, 4]], [[1, 3, 1, 3, 1, 3, 1, 3]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 11], [[1, 4, 6, 2, 8, 9, 16, 14, 17, 12, 11]], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1]]], [[[[1, 2], [3, 4]], 24], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 11], [[1, 5, 8, 2, 3, 11, 6, 9, 7, 10, 15]], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 6], [[1, 3, 5, 7, 15, 8]], [[1, 3, 1, 3, 1, 3]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 4], [[1, 5, 8, 2]], [[1, 5, 1, 5]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 10], [[1, 3, 5, 7, 15, 8, 6, 4, 2, 9]], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 9], [[1, 3, 5, 7, 15, 8, 6, 4, 2]], [[1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 15], [[1, 3, 5, 7, 15, 8, 6, 4, 11, 9, 2, 10, 12, 14, 16]], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[1, 2], [3, 4]], 18], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 14], [[1, 6, 8, 7, 2, 10, 12, 5, 4, 3, 15, 11, 16, 14]], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 5], [[1, 5, 8, 2, 3]], [[1, 5, 1, 5, 1]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 6], [[1, 4, 6, 2, 8, 9]], [[1, 4, 1, 4, 1, 4]]], [[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 8], [[1, 2, 3, 4, 5, 10, 9, 8]], [[1, 2, 1, 2, 1, 2, 1, 2]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 9], [[1, 4, 6, 2, 8, 9, 16, 14, 17]], [[1, 4, 1, 4, 1, 4, 1, 4, 1]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 15], [[1, 6, 8, 7, 2, 10, 12, 5, 4, 3, 15, 11, 16, 14, 13]], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 18], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 9], [[1, 6, 8, 7, 2, 3, 4, 5, 12]], [[1, 6, 1, 6, 1, 6, 1, 6, 1]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 4], [[1, 4, 6, 2]], [[1, 4, 1, 4]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 21], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 17], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 16], [[1, 4, 6, 2, 8, 9, 16, 14, 17, 12, 11, 5, 10, 7, 13, 3]], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4]]], [[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 7], [[1, 2, 3, 4, 5, 10, 9]], [[1, 2, 1, 2, 1, 2, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 19], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 3], [[1, 3, 5]], [[1, 3, 1]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 21], [None], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 5], [[1, 4, 6, 2, 8]], [[1, 4, 1, 4, 1]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 9], [[1, 5, 8, 2, 3, 11, 6, 9, 7]], [[1, 5, 1, 5, 1, 5, 1, 5, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 14], [[1, 3, 5, 7, 15, 8, 6, 4, 11, 9, 2, 10, 12, 14]], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 7], [[1, 4, 6, 2, 8, 9, 16]], [[1, 4, 1, 4, 1, 4, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 11], [[1, 3, 5, 7, 15, 8, 6, 4, 2, 9, 11]], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[1, 2], [3, 4]], 25], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 7], [[1, 3, 5, 7, 15, 8, 6]], [[1, 3, 1, 3, 1, 3, 1]]], [[[[1, 2], [3, 4]], 17], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 12], [[1, 4, 6, 2, 8, 9, 16, 14, 17, 12, 11, 5]], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4]]], [[[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 20], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 17], [[1, 4, 6, 2, 8, 9, 16, 14, 17, 12, 11, 5, 10, 7, 13, 3, 18]], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1]]], [[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 13], [[1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11, 12, 13]], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 16], [[1, 3, 5, 7, 15, 8, 16, 14, 6, 4, 12, 10, 2, 9, 11, 13]], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 24], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[1, 2], [3, 4]], 19], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 13], [[1, 5, 8, 2, 3, 11, 6, 9, 7, 10, 15, 12, 13]], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 13], [[1, 3, 5, 7, 15, 8, 6, 4, 2, 10, 12, 14, 16]], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 9], [[1, 3, 2, 7, 4, 5, 9, 8, 6]], [[1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 22], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 12], [[1, 6, 8, 7, 2, 10, 4, 3, 15, 11, 16, 14]], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]]], [[[[1, 2], [3, 4]], 16], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 19], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 10], [[1, 6, 8, 7, 2, 3, 4, 5, 12, 9]], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4], [[1, 2, 3, 6]], [[1, 2, 1, 2]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 3], [[1, 5, 8]], [[1, 5, 1]]], [[[[1, 2], [3, 4]], 22], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 24], [None], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 23], [None], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 23], [None], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 22], [None], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 19], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 2], [3, 4]], 5], [None], [[1, 2, 1, 2, 1]]], [[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 10], [[1, 2, 3, 4, 5, 10, 9, 8, 7, 6]], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 12], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 8], [[1, 4, 6, 2, 8, 9, 16, 14]], [[1, 4, 1, 4, 1, 4, 1, 4]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 25], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 18], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 11], [[1, 6, 8, 7, 2, 3, 15, 11, 16, 14, 13]], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 12], [[1, 5, 8, 2, 3, 11, 6, 9, 7, 10, 15, 12]], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 7], [[1, 6, 8, 7, 2, 3, 4]], [[1, 6, 1, 6, 1, 6, 1]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 11], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 18], [None], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 8], [[1, 2, 3, 4, 8, 7, 6, 5]], [[1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 18], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 2], [3, 4]], 21], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 21], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 24], [None], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 12], [[1, 3, 5, 7, 15, 8, 6, 4, 2, 9, 11, 13]], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 8], [[1, 6, 8, 7, 2, 3, 4, 5]], [[1, 6, 1, 6, 1, 6, 1, 6]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 16], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 19], [[1, 4, 6, 2, 8, 9, 16, 14, 17, 12, 11, 5, 10, 7, 13, 3, 18, 21, 22]], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1]]], [[[[1, 2], [3, 4]], 4], [[1, 2, 4, 3]], [[1, 2, 1, 2]]], [[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 16], [[1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11, 12, 13, 14, 15, 20]], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 2], [3, 4]], 7], [None], [[1, 2, 1, 2, 1, 2, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 4], [[1, 3, 5, 7]], [[1, 3, 1, 3]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 19], [None], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 17], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 2], [3, 4]], 6], [None], [[1, 2, 1, 2, 1, 2]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 18], [[1, 4, 6, 2, 8, 9, 16, 14, 17, 12, 11, 5, 10, 7, 13, 3, 18, 19]], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 6], [[1, 5, 8, 2, 3, 4]], [[1, 5, 1, 5, 1, 5]]], [[[[1, 2], [3, 4]], 10], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 2], [3, 4]], 23], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 14], [[1, 5, 8, 2, 3, 11, 13, 12, 6, 9, 15, 10, 7, 14]], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 18], [None], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 9], [[1, 2, 3, 4, 8, 7, 6, 5, 9]], [[1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 7], [[1, 5, 8, 2, 3, 4, 16]], [[1, 5, 1, 5, 1, 5, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 23], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[1, 2], [3, 4]], 8], [None], [[1, 2, 1, 2, 1, 2, 1, 2]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 17], [None], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 22], [None], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 20], [None], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 15], [[1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14]], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 14], [[1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11, 12, 13, 14]], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 14], [[1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15]], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 8], [[1, 5, 8, 2, 3, 11, 6, 9]], [[1, 5, 1, 5, 1, 5, 1, 5]]], [[[[1, 2], [3, 4]], 11], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 3], [[1, 2, 3]], [[1, 2, 1]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 6], [[1, 6, 8, 7, 2, 3]], [[1, 6, 1, 6, 1, 6]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 15], [[1, 5, 8, 2, 6, 9, 7, 10, 15, 12, 13, 11, 3, 4, 16]], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 22], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[1, 2], [3, 4]], 12], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 14], [[1, 4, 6, 2, 8, 9, 16, 14, 17, 12, 11, 5, 10, 7]], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4]]], [[[[1, 2], [3, 4]], 9], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 2], [3, 4]], 20], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 20], [None], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]]], [[[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 11], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 4], [[1, 2, 3, 4]], [[1, 2, 1, 2]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 11], [[1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11]], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 13], [[1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16]], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 23], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 4], [[1, 3, 2, 7]], [[1, 3, 1, 3]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 25], [None], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 20], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 14], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 3], [[1, 4, 6]], [[1, 4, 1]]], [[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 17], [[1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11, 12, 13, 14, 15, 20, 19]], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]]], [], [[[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3], [[1, 2, 3]], [[1, 2, 1]]], [[[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4], [[1, 2, 3, 4]], [[1, 2, 1, 2]]], [[[[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7], ['TypeError'], [[1, 10, 1, 10, 1, 10, 1]]], [[[[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5], ['TypeError'], [[1, 7, 1, 7, 1]]], [[[[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9], ['TypeError'], [[1, 6, 1, 6, 1, 6, 1, 6, 1]]], [[[[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12], ['TypeError'], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]]], [[[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8], ['TypeError'], [[1, 3, 1, 3, 1, 3, 1, 3]]], [[[[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8], ['TypeError'], [[1, 5, 1, 5, 1, 5, 1, 5]]], [[[[1, 2], [3, 4]], 10], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[9, 8, 7], [6, 5, 4], [3, 2, 1]], 3], [[1, 2, 3]], [[1, 2, 1]]], [[[[2, 3, 4], [5, 6, 7], [8, 9, 1]], 5], ['TypeError'], [[1, 7, 1, 7, 1]]], [[[[5, 4, 7], [2, 1, 8], [3, 6, 9]], 4], [[1, 2, 3, 6]], [[1, 2, 1, 2]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5], ['TypeError'], [[1, 2, 1, 2, 1]]], [[[[1, 5, 3], [4, 2, 6], [7, 8, 9]], 4], [[1, 4, 2, 5]], [[1, 4, 1, 4]]], [[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 6], ['TypeError'], [[1, 2, 1, 2, 1, 2]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 15], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3], [[1, 2, 3]], [[1, 2, 1]]], [[[[2, 3, 4], [5, 6, 7], [8, 9, 1]], 13], [None], [[1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 6], ['TypeError'], [[1, 2, 1, 2, 1, 2]]], [[[[2, 3, 4], [5, 6, 7], [8, 9, 1]], 4], [[1, 7, 4, 3]], [[1, 7, 1, 7]]], [[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 5], ['TypeError'], [[1, 2, 1, 2, 1]]], [[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 7], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1]]], [[[[2, 3, 4], [5, 6, 7], [8, 9, 1]], 18], [None], [[1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7]]], [[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 9], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 5, 3], [4, 2, 6], [7, 8, 9]], 3], [[1, 4, 2]], [[1, 4, 1]]], [[[[5, 4, 7], [2, 1, 8], [3, 6, 9]], 12], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 20], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 19], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 20], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[2, 3, 4], [5, 6, 7], [8, 9, 1]], 17], [None], [[1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1]]], [[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 17], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[2, 3, 4], [5, 6, 7], [8, 9, 1]], 3], [[1, 7, 4]], [[1, 7, 1]]], [[[[2, 3, 4], [5, 6, 7], [8, 9, 1]], 6], ['TypeError'], [[1, 7, 1, 7, 1, 7]]], [[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 13], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 14], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 21], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[2, 3, 4], [5, 6, 7], [8, 9, 1]], 12], [None], [[1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7]]], [[[[2, 3, 4], [5, 6, 7], [8, 9, 1]], 15], [None], [[1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 16], ['TypeError'], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 16], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 5], ['TypeError'], [[1, 3, 1, 3, 1]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 10], ['TypeError'], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4]]], [[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 20], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 10], ['TypeError'], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5]]], [[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 9], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 2], [3, 4]], 3], [[1, 2, 4]], [[1, 2, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 8], ['TypeError'], [[1, 3, 1, 3, 1, 3, 1, 3]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 11], ['TypeError'], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1]]], [[[[1, 2], [3, 4]], 24], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 11], ['TypeError'], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 6], ['TypeError'], [[1, 3, 1, 3, 1, 3]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 4], [[1, 5, 8, 2]], [[1, 5, 1, 5]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 10], ['TypeError'], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 9], ['TypeError'], [[1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 15], ['TypeError'], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[1, 2], [3, 4]], 18], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 14], ['TypeError'], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 5], ['TypeError'], [[1, 5, 1, 5, 1]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 23], ['TypeError'], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 6], ['TypeError'], [[1, 4, 1, 4, 1, 4]]], [[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 8], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1, 2]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 9], ['TypeError'], [[1, 4, 1, 4, 1, 4, 1, 4, 1]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 15], ['TypeError'], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 18], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 9], ['TypeError'], [[1, 6, 1, 6, 1, 6, 1, 6, 1]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 4], [[1, 4, 6, 2]], [[1, 4, 1, 4]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 21], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 17], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 25], ['TypeError'], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 16], ['TypeError'], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4]]], [[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 7], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 19], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 3], [[1, 3, 5]], [[1, 3, 1]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 21], [None], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 5], ['TypeError'], [[1, 4, 1, 4, 1]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 9], ['TypeError'], [[1, 5, 1, 5, 1, 5, 1, 5, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 14], ['TypeError'], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 7], ['TypeError'], [[1, 4, 1, 4, 1, 4, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 11], ['TypeError'], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 22], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 2], [3, 4]], 25], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 7], ['TypeError'], [[1, 3, 1, 3, 1, 3, 1]]], [[[[1, 2], [3, 4]], 17], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 12], ['TypeError'], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4]]], [[[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 20], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 17], ['TypeError'], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1]]], [[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 13], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 16], ['TypeError'], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 24], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[1, 2], [3, 4]], 19], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 13], ['TypeError'], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 13], ['TypeError'], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 24], ['TypeError'], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4]]], [[[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 9], ['TypeError'], [[1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 22], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 12], ['TypeError'], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]]], [[[[1, 2], [3, 4]], 16], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 19], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 10], ['TypeError'], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4], [[1, 2, 3, 6]], [[1, 2, 1, 2]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 3], [[1, 5, 8]], [[1, 5, 1]]], [[[[1, 2], [3, 4]], 22], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 22], ['TypeError'], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 24], [None], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 23], [None], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 23], [None], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 22], [None], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 19], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 2], [3, 4]], 5], [None], [[1, 2, 1, 2, 1]]], [[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 10], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 12], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 8], ['TypeError'], [[1, 4, 1, 4, 1, 4, 1, 4]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 25], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 18], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 23], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 11], ['TypeError'], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 12], ['TypeError'], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 7], ['TypeError'], [[1, 6, 1, 6, 1, 6, 1]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 11], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 18], [None], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 8], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 18], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 2], [3, 4]], 21], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 21], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 24], [None], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 12], ['TypeError'], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 8], ['TypeError'], [[1, 6, 1, 6, 1, 6, 1, 6]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 21], ['TypeError'], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1]]], [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 16], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 19], ['TypeError'], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1]]], [[[[1, 2], [3, 4]], 4], [[1, 2, 4, 3]], [[1, 2, 1, 2]]], [[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 16], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 2], [3, 4]], 7], [None], [[1, 2, 1, 2, 1, 2, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 4], [[1, 3, 5, 7]], [[1, 3, 1, 3]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 19], [None], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 17], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 2], [3, 4]], 6], [None], [[1, 2, 1, 2, 1, 2]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 18], ['TypeError'], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 6], ['TypeError'], [[1, 5, 1, 5, 1, 5]]], [[[[1, 2], [3, 4]], 10], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 2], [3, 4]], 23], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 14], ['TypeError'], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 18], [None], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 9], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 7], ['TypeError'], [[1, 5, 1, 5, 1, 5, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 23], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[1, 2], [3, 4]], 8], [None], [[1, 2, 1, 2, 1, 2, 1, 2]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 17], [None], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 22], [None], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 20], [None], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 15], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 14], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 14], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 8], ['TypeError'], [[1, 5, 1, 5, 1, 5, 1, 5]]], [[[[1, 2], [3, 4]], 11], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 3], [[1, 2, 3]], [[1, 2, 1]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 6], ['TypeError'], [[1, 6, 1, 6, 1, 6]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 15], ['TypeError'], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 22], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[1, 2], [3, 4]], 12], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 14], ['TypeError'], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4]]], [[[[1, 2], [3, 4]], 9], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 21], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 2], [3, 4]], 20], [None], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]], [[[[10, 7, 14, 1], [15, 9, 8, 5], [12, 6, 2, 16], [13, 11, 3, 4]], 20], [None], [[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]]], [[[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 11], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 4], [[1, 2, 3, 4]], [[1, 2, 1, 2]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 11], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]], 13], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], [[[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 23], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]]], [[[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 4], [[1, 3, 2, 7]], [[1, 3, 1, 3]]], [[[[1, 6, 13, 14], [9, 8, 7, 16], [12, 10, 2, 11], [5, 4, 3, 15]], 25], [None], [[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1]]], [[[[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8], [10, 12, 14, 16]], 20], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 20], ['TypeError'], [[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4]]], [[[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 14], [None], [[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]]], [[[[10, 5, 20, 14, 16], [7, 11, 12, 17, 9], [13, 19, 1, 15, 8], [3, 18, 4, 6, 2], [22, 21, 23, 24, 25]], 3], [[1, 4, 6]], [[1, 4, 1]]], [[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 17], ['TypeError'], [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]]], [], [], [], [], []]"}
{"task_id": "HumanEval/130", "requirement": "from typing import List\n\n\ndef tri(n: int) -> List[float]:\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"", "repaired_requirement": "from typing import List\n\ndef tri(n: int) -> List[float]:\n    \"\"\"Generate the first n + 1 numbers of the Tribonacci sequence.\n    \n    The Tribonacci sequence is defined by the following recurrence:\n    - tri(0) = 3.0\n    - tri(1) = 3.0\n    - tri(n) = 1 + n / 2, if n is even.\n    - tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    \n    For the case where n + 1 exceeds the current sequence length during the calculation of tri(n + 1) for odd n, \n    tri(n + 1) is considered as 0.\n    \n    Args:\n        n (int): A non-negative integer indicating the number of terms to generate.\n        \n    Returns:\n        List[float]: A list containing the first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"", "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0]\n    for i in range(1, n + 1):\n        if i == 1:\n            sequence.append(3.0)\n        elif i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n    return sequence"], "outputs": "[[[3.0, 3.0]], [[3.0, 3.0, 2.0]], [[3.0, 3.0, 2.0, 8.0]], [[3.0, 3.0, 2.0, 8.0, 3.0]], [[3.0, 3.0, 2.0, 8.0, 3.0, 13.0]], [[3.0]]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[2], [[3.0, 3.0, 2.0]], [2]], [[4], [[3.0, 3.0, 2.0, 8.0, 3.0]], [3]], [[3], [[3.0, 3.0, 2.0, 8.0]], [8]], [[3], [[3.0, 3.0, 2.0, 8.0]], [[1, 3, 2, 8]]]]"}, {"programs_str": ["from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0]\n    for i in range(1, n + 1):\n        if i == 1:\n            sequence.append(1 + i / 2)\n        elif i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n    return sequence", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0]\n    for i in range(1, n + 1):\n        if i == 1:\n            sequence.append(1 + i / 2)\n        elif i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n    return sequence"], "outputs": "[[[3.0, 1.5]], [[3.0, 1.5, 2.0]], [[3.0, 1.5, 2.0, 6.5]], [[3.0, 1.5, 2.0, 6.5, 3.0]], [[3.0, 1.5, 2.0, 6.5, 3.0, 11.5]], [[3.0]]]", "probability": 0.1, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[2], [[3.0, 1.5, 2.0]], [2]], [[4], [[3.0, 1.5, 2.0, 6.5, 3.0]], [3]], [[3], [[3.0, 1.5, 2.0, 6.5]], [8]], [[3], [[3.0, 1.5, 2.0, 6.5]], [[1, 3, 2, 8]]]]"}, {"programs_str": ["from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0]\n    for i in range(1, n + 1):\n        if i == 1:\n            sequence.append(3.0)\n        elif i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n    return sequence"], "outputs": "[[[3.0, 3.0]], [[3.0, 3.0, 2.0]], ['IndexError'], ['IndexError'], ['IndexError'], [[3.0]]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[2], [[3.0, 3.0, 2.0]], [2]], [[4], ['IndexError'], [3]], [[3], ['IndexError'], [8]], [[3], ['IndexError'], [[1, 3, 2, 8]]]]"}, {"programs_str": ["from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return []\n    sequence = [3.0]\n    for i in range(1, n + 1):\n        if i == 1:\n            sequence.append(3.0)\n        elif i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1] if i + 1 < len(sequence) else sequence[i - 1] + sequence[i - 2])\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return []\n    sequence = [0.0] * (n + 1)\n    sequence[0] = 3.0\n    for i in range(1, n + 1):\n        if i == 1:\n            sequence[i] = 3.0\n        elif i % 2 == 0:\n            sequence[i] = 1 + i / 2\n        else:\n            sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1] if i + 1 <= n else sequence[i - 1] + sequence[i - 2]\n    return sequence", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return []\n    sequence = [0.0] * (n + 1)\n    sequence[0] = 3.0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sequence[i] = 1 + i / 2\n        elif i - 1 >= 0 and i - 2 >= 0 and (i + 1 <= n):\n            sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1]\n        else:\n            sequence[i] = sequence[i - 1] + sequence[i - 2]\n    return sequence", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return []\n    sequence = [0.0] * (n + 1)\n    sequence[0] = 3.0\n    for i in range(1, n + 1):\n        if i == 1:\n            sequence[i] = 3.0\n        elif i % 2 == 0:\n            sequence[i] = 1 + i / 2\n        else:\n            sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1] if i + 1 <= n else sequence[i - 1] + sequence[i - 2]\n    return sequence"], "outputs": "[[[3.0, 3.0]], [[3.0, 3.0, 2.0]], [[3.0, 3.0, 2.0, 5.0]], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[]]]", "probability": 0.2, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[2], [[3.0, 3.0, 2.0]], [2]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [3]], [[3], [[3.0, 3.0, 2.0, 5.0]], [8]], [[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2, 8]]]]"}, {"programs_str": ["from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0]\n    for i in range(1, n + 1):\n        if i == 1:\n            sequence.append(3.0)\n        elif i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + (sequence[i + 1] if i + 1 < len(sequence) else 0))\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [0.0] * (n + 1)\n    sequence[0] = 3.0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sequence[i] = 1 + i / 2\n        elif i - 1 >= 0 and i - 2 >= 0 and (i + 1 <= n):\n            sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1]\n        else:\n            sequence[i] = sequence[i - 1] + sequence[i - 2]\n    return sequence", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0]\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        elif i == 1:\n            sequence.append(sequence[i - 1] + 0 + sequence[i + 1] if i + 1 < len(sequence) else sequence[i - 1] + 0 + 0)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1] if i + 1 < len(sequence) else sequence[i - 1] + sequence[i - 2] + 0)\n    return sequence", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [0.0] * (n + 1)\n    sequence[0] = 3.0\n    for i in range(1, n + 1):\n        if i == 1:\n            sequence[i] = 3.0\n        elif i % 2 == 0:\n            sequence[i] = 1 + i / 2\n        else:\n            sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1] if i + 1 <= n else sequence[i - 1] + sequence[i - 2]\n    return sequence", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0]\n    for i in range(1, n + 1):\n        if i == 1:\n            sequence.append(3.0)\n        elif i % 2 == 0:\n            sequence.append(1 + i / 2)\n        elif i - 1 >= 0 and i - 2 >= 0 and (i + 1 < len(sequence)):\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2])\n    return sequence", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3]\n    sequence = [0] * (n + 1)\n    sequence[0] = 3\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sequence[i] = 1 + i / 2\n        elif i - 1 >= 0 and i - 2 >= 0 and (i + 1 <= n):\n            sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1]\n        elif i - 1 >= 0 and i - 2 >= 0:\n            sequence[i] = sequence[i - 1] + sequence[i - 2] + 0\n        else:\n            sequence[i] = sequence[i - 1] + 0 + 0\n    return sequence"], "outputs": "[[[3.0, 3.0]], [[3.0, 3.0, 2.0]], [[3.0, 3.0, 2.0, 5.0]], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[3.0]]]", "probability": 0.3, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[2], [[3.0, 3.0, 2.0]], [2]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [3]], [[3], [[3.0, 3.0, 2.0, 5.0]], [8]], [[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2, 8]]]]"}, {"programs_str": ["from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0]\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        elif i == 1:\n            sequence.append(sequence[i - 1] + 0 + 3.0)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1] if i + 1 < len(sequence) else sequence[i - 1] + sequence[i - 2] + 3.0)\n    return sequence"], "outputs": "[[[3.0, 6.0]], [[3.0, 6.0, 2.0]], [[3.0, 6.0, 2.0, 11.0]], [[3.0, 6.0, 2.0, 11.0, 3.0]], [[3.0, 6.0, 2.0, 11.0, 3.0, 17.0]], [[3.0]]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[2], [[3.0, 6.0, 2.0]], [2]], [[4], [[3.0, 6.0, 2.0, 11.0, 3.0]], [3]], [[3], [[3.0, 6.0, 2.0, 11.0]], [8]], [[3], [[3.0, 6.0, 2.0, 11.0]], [[1, 3, 2, 8]]]]"}, {"programs_str": ["from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0]\n    for i in range(1, n + 1):\n        if i == 1:\n            sequence.append(1 + i / 2)\n        elif i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1] if i + 1 < len(sequence) else sequence[i - 1] + sequence[i - 2])\n    return sequence"], "outputs": "[[[3.0, 1.5]], [[3.0, 1.5, 2.0]], [[3.0, 1.5, 2.0, 3.5]], [[3.0, 1.5, 2.0, 3.5, 3.0]], [[3.0, 1.5, 2.0, 3.5, 3.0, 6.5]], [[3.0]]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[2], [[3.0, 1.5, 2.0]], [2]], [[4], [[3.0, 1.5, 2.0, 3.5, 3.0]], [3]], [[3], [[3.0, 1.5, 2.0, 3.5]], [8]], [[3], [[3.0, 1.5, 2.0, 3.5]], [[1, 3, 2, 8]]]]"}, {"programs_str": ["from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return []\n    sequence = [3.0]\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        elif i == 1:\n            sequence.append(sequence[i - 1] + 0 + 0)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + (1 + (i + 1) / 2 if (i + 1) % 2 == 0 else 0))\n    return sequence"], "outputs": "[[[3.0, 3.0]], [[3.0, 3.0, 2.0]], [[3.0, 3.0, 2.0, 8.0]], [[3.0, 3.0, 2.0, 8.0, 3.0]], [[3.0, 3.0, 2.0, 8.0, 3.0, 15.0]], [[]]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[2], [[3.0, 3.0, 2.0]], [2]], [[4], [[3.0, 3.0, 2.0, 8.0, 3.0]], [3]], [[3], [[3.0, 3.0, 2.0, 8.0]], [8]], [[3], [[3.0, 3.0, 2.0, 8.0]], [[1, 3, 2, 8]]]]"}, {"programs_str": ["from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0]\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        elif i == 1:\n            sequence.append(sequence[i - 1] + 0 + sequence[i + 1])\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n    return sequence[:n + 1]"], "outputs": "[['IndexError'], ['IndexError'], ['IndexError'], ['IndexError'], ['IndexError'], [[3.0]]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[2], ['IndexError'], [2]], [[4], ['IndexError'], [3]], [[3], ['IndexError'], [8]], [[3], ['IndexError'], [[1, 3, 2, 8]]]]"}, {"programs_str": ["from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0]\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        elif i == 1:\n            sequence.append(sequence[i - 1] + 0 + sequence[i + 1] if i + 1 < len(sequence) else sequence[i - 1] + 0 + (1 + (i + 1) / 2))\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + (sequence[i + 1] if i + 1 < len(sequence) else 1 + (i + 1) / 2))\n    return sequence"], "outputs": "[[[3.0, 5.0]], [[3.0, 5.0, 2.0]], [[3.0, 5.0, 2.0, 10.0]], [[3.0, 5.0, 2.0, 10.0, 3.0]], [[3.0, 5.0, 2.0, 10.0, 3.0, 17.0]], [[3.0]]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[2], [[3.0, 5.0, 2.0]], [2]], [[4], [[3.0, 5.0, 2.0, 10.0, 3.0]], [3]], [[3], [[3.0, 5.0, 2.0, 10.0]], [8]], [[3], [[3.0, 5.0, 2.0, 10.0]], [[1, 3, 2, 8]]]]"}, {"programs_str": ["from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0]\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        elif i == 1:\n            sequence.append(sequence[i - 1] + 3 + 3)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1] if i + 1 < len(sequence) else sequence[i - 1] + sequence[i - 2] + 3)\n    return sequence"], "outputs": "[[[3.0, 9.0]], [[3.0, 9.0, 2.0]], [[3.0, 9.0, 2.0, 14.0]], [[3.0, 9.0, 2.0, 14.0, 3.0]], [[3.0, 9.0, 2.0, 14.0, 3.0, 20.0]], [[3.0]]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[2], [[3.0, 9.0, 2.0]], [2]], [[4], [[3.0, 9.0, 2.0, 14.0, 3.0]], [3]], [[3], [[3.0, 9.0, 2.0, 14.0]], [8]], [[3], [[3.0, 9.0, 2.0, 14.0]], [[1, 3, 2, 8]]]]"}], "entropy": 0.8806184600553073, "llm_generated_inputs": "[[1], [2], [3], [4], [5], [0]]", "input_output_examples": "[[[2], [4], [3], [3]], [[2], [3], [8], [[1, 3, 2, 8]]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false, "ambiguity": 0.9403092300276537}, "repaired_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0, 3.0]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            next_term = sequence[i - 1] + sequence[i - 2]\n            if i + 1 < len(sequence):\n                next_term += sequence[i + 1]\n            else:\n                next_term += 0\n            sequence.append(next_term)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    sequence = [3.0, 3.0]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            next_term = sequence[i - 1] + sequence[i - 2]\n            if i + 1 < len(sequence):\n                next_term += sequence[i + 1]\n            else:\n                next_term += 0\n            sequence.append(next_term)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0, 3.0]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        elif i + 1 >= len(sequence):\n            sequence.append(sequence[i - 1] + sequence[i - 2] + 0)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0, 3.0]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            if i + 1 >= len(sequence):\n                tri_n_plus_1 = 0\n            else:\n                tri_n_plus_1 = sequence[i + 1]\n            sequence.append(sequence[i - 1] + sequence[i - 2] + tri_n_plus_1)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    sequence = [3.0, 3.0]\n    if n == 0:\n        return [3.0]\n    elif n == 1:\n        return sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            tri_n_plus_1 = sequence[i] if i < len(sequence) else 0\n            sequence.append(sequence[i - 1] + sequence[i - 2] + tri_n_plus_1)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    sequence = [3.0, 3.0]\n    if n == 0:\n        return [3.0]\n    if n == 1:\n        return sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            tri_n_plus_1 = sequence[i - 1] + sequence[i - 2] + (sequence[i] if i < len(sequence) else 0)\n            sequence.append(tri_n_plus_1)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0, 3.0]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            if i + 1 < len(sequence):\n                tri_n_plus_1 = sequence[i + 1]\n            else:\n                tri_n_plus_1 = 0\n            sequence.append(sequence[i - 1] + sequence[i - 2] + tri_n_plus_1)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0, 3.0]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            tri_n_plus_1 = sequence[i] if i < len(sequence) else 0\n            sequence.append(sequence[i - 1] + sequence[i - 2] + tri_n_plus_1)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    sequence = []\n    for i in range(n + 1):\n        if i == 0 or i == 1:\n            sequence.append(3.0)\n        elif i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            tri_n_minus_1 = sequence[i - 1] if i - 1 < len(sequence) else 0\n            tri_n_minus_2 = sequence[i - 2] if i - 2 < len(sequence) else 0\n            tri_n_plus_1 = sequence[i + 1] if i + 1 < len(sequence) else 0\n            sequence.append(tri_n_minus_1 + tri_n_minus_2 + tri_n_plus_1)\n    return sequence", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    sequence = []\n    for i in range(n + 1):\n        if i == 0 or i == 1:\n            sequence.append(3.0)\n        elif i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            tri_n_plus_1 = sequence[i + 1] if i + 1 < len(sequence) else 0\n            sequence.append(sequence[i - 1] + sequence[i - 2] + tri_n_plus_1)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    sequence = [3.0, 3.0]\n    if n == 0:\n        return [3.0]\n    if n == 1:\n        return sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            tri_n_plus_1 = sequence[i] if i < len(sequence) else 0\n            sequence.append(sequence[i - 1] + sequence[i - 2] + tri_n_plus_1)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    sequence = []\n    for i in range(n + 1):\n        if i == 0 or i == 1:\n            sequence.append(3.0)\n        elif i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            tri_n_plus_1 = sequence[i + 1] if i + 1 < len(sequence) else 0\n            sequence.append(sequence[i - 1] + sequence[i - 2] + tri_n_plus_1)\n    return sequence", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    sequence = [3.0, 3.0]\n    if n == 0:\n        return [3.0]\n    elif n == 1:\n        return sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            tri_n_plus_1 = sequence[i] if i < len(sequence) else 0\n            sequence.append(sequence[i - 1] + sequence[i - 2] + tri_n_plus_1)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    sequence = []\n    for i in range(n + 1):\n        if i == 0 or i == 1:\n            sequence.append(3.0)\n        elif i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            tri_n_minus_1 = sequence[i - 1]\n            tri_n_minus_2 = sequence[i - 2]\n            tri_n_plus_1 = sequence[i + 1] if i + 1 < len(sequence) else 0\n            sequence.append(tri_n_minus_1 + tri_n_minus_2 + tri_n_plus_1)\n    return sequence", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0, 3.0]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            if i + 1 < len(sequence):\n                next_term = sequence[i - 1] + sequence[i - 2] + sequence[i + 1]\n            else:\n                next_term = sequence[i - 1] + sequence[i - 2] + 0\n            sequence.append(next_term)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0, 3.0]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            tri_n_plus_1 = sequence[i - 1] + sequence[i - 2] + (sequence[i + 1] if i + 1 < len(sequence) else 0)\n            sequence.append(tri_n_plus_1)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    sequence = []\n    for i in range(n + 1):\n        if i == 0 or i == 1:\n            sequence.append(3.0)\n        elif i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            if i - 1 < len(sequence):\n                a = sequence[i - 1]\n            else:\n                a = 0\n            if i - 2 < len(sequence):\n                b = sequence[i - 2]\n            else:\n                b = 0\n            if i + 1 < len(sequence):\n                c = sequence[i + 1]\n            else:\n                c = 0\n            sequence.append(a + b + c)\n    return sequence", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    sequence = [3.0, 3.0]\n    if n == 0:\n        return [3.0]\n    elif n == 1:\n        return sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            tri_n_plus_1 = sequence[i] if i < len(sequence) else 0\n            sequence.append(sequence[i - 1] + sequence[i - 2] + tri_n_plus_1)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0, 3.0]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            tri_n_plus_1 = sequence[i + 1] if i + 1 < len(sequence) else 0\n            sequence.append(sequence[i - 1] + sequence[i - 2] + tri_n_plus_1)\n    return sequence[:n + 1]"], "outputs": "[[[3.0, 3.0]], [[3.0, 3.0, 2.0]], [[3.0, 3.0, 2.0, 5.0]], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[3.0]]]", "probability": 0.95, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[2], [[3.0, 3.0, 2.0]], [2]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [3]], [[3], [[3.0, 3.0, 2.0, 5.0]], [8]], [[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2, 8]]]]"}, {"programs_str": ["from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0, 3.0]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            tri_n_plus_1 = sequence[i - 1] + sequence[i - 2] + (sequence[i] if i < len(sequence) else 0)\n            sequence.append(sequence[i - 1] + sequence[i - 2] + tri_n_plus_1)\n    return sequence[:n + 1]"], "outputs": "[[[3.0, 3.0]], [[3.0, 3.0, 2.0]], [[3.0, 3.0, 2.0, 10.0]], [[3.0, 3.0, 2.0, 10.0, 3.0]], [[3.0, 3.0, 2.0, 10.0, 3.0, 26.0]], [[3.0]]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[2], [[3.0, 3.0, 2.0]], [2]], [[4], [[3.0, 3.0, 2.0, 10.0, 3.0]], [3]], [[3], [[3.0, 3.0, 2.0, 10.0]], [8]], [[3], [[3.0, 3.0, 2.0, 10.0]], [[1, 3, 2, 8]]]]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[1], [2], [3], [4], [5], [0]]", "input_output_examples": "[[[2], [4], [3], [3]], [[2], [3], [8], [[1, 3, 2, 8]]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false, "ambiguity": 0.6431984785579781}, "original_passk": 0.0, "repaired_passk": 0.0, "generated_programs": ["from typing import List\n\ndef tri(n: int) -> List[float]:\n    sequence = [3.0, 3.0]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        elif i + 1 < len(sequence):\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + 0)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    sequence = [3.0, 3.0]\n    if n == 0:\n        return [3.0]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            tri_n_plus_1 = sequence[i + 1] if i + 1 < len(sequence) else 0\n            sequence.append(sequence[i - 1] + sequence[i - 2] + tri_n_plus_1)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    sequence = [3.0, 3.0]\n    if n == 0:\n        return [3.0]\n    if n == 1:\n        return sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            if i + 1 >= len(sequence):\n                tri_n_plus_1 = 0\n            else:\n                tri_n_plus_1 = sequence[i + 1]\n            sequence.append(sequence[i - 1] + sequence[i - 2] + tri_n_plus_1)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    sequence = []\n    for i in range(n + 1):\n        if i == 0 or i == 1:\n            sequence.append(3.0)\n        elif i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            tri_n_plus_1 = sequence[i + 1] if i + 1 < len(sequence) else 0\n            sequence.append(sequence[i - 1] + sequence[i - 2] + tri_n_plus_1)\n    return sequence", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0, 3.0]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            tri_n_plus_1 = sequence[i] if i < len(sequence) else 0\n            sequence.append(sequence[i - 1] + sequence[i - 2] + tri_n_plus_1)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0, 3.0]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            tri_n_plus_1 = sequence[i] if i < len(sequence) else 0\n            sequence.append(sequence[i - 1] + sequence[i - 2] + tri_n_plus_1)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0, 3.0]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            if i + 1 >= len(sequence):\n                tri_n_plus_1 = 0\n            else:\n                tri_n_plus_1 = sequence[i + 1]\n            sequence.append(sequence[i - 1] + sequence[i - 2] + tri_n_plus_1)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    if n == 0:\n        return [3.0]\n    sequence = [3.0, 3.0]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            if i + 1 >= len(sequence):\n                tri_n_plus_1 = 0\n            else:\n                tri_n_plus_1 = sequence[i + 1]\n            sequence.append(sequence[i - 1] + sequence[i - 2] + tri_n_plus_1)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    sequence = [3.0, 3.0]\n    if n == 0:\n        return [3.0]\n    elif n == 1:\n        return sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            tri_n_plus_1 = sequence[i] if i < len(sequence) else 0\n            sequence.append(sequence[i - 1] + sequence[i - 2] + tri_n_plus_1)\n    return sequence[:n + 1]", "from typing import List\n\ndef tri(n: int) -> List[float]:\n    sequence = []\n    for i in range(n + 1):\n        if i == 0 or i == 1:\n            sequence.append(3.0)\n        elif i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            if i - 1 < len(sequence):\n                term1 = sequence[i - 1]\n            else:\n                term1 = 0\n            if i - 2 < len(sequence):\n                term2 = sequence[i - 2]\n            else:\n                term2 = 0\n            if i + 1 < len(sequence):\n                term3 = sequence[i + 1]\n            else:\n                term3 = 0\n            sequence.append(term1 + term2 + term3)\n    return sequence"], "failed_inputs_outputs": "[[[[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2.0, 8.0]]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[1, 3, 2.0, 8.0, 3.0]]], [[5], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0]]], [[6], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]]], [[7], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]]], [[8], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]]], [[9], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]]], [[0], [[3.0]], [[1]]], [[1], [[3.0, 3.0]], [[1, 3]]], [[2], [[3.0, 3.0, 2.0]], [[1, 3, 2.0]]], [[10], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0]]], [[15], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0]]], [[13], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0]]], [[12], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0]]], [[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2.0, 8.0]]], [[1], [[3.0, 3.0]], [[1, 3]]], [[16], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0, 9.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0]]], [[14], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0]]], [[17], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0, 9.0, 47.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0]]], [[11], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0]]], [[0], [[3.0]], [[1]]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[1, 3, 2.0, 8.0, 3.0]]], [[5], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0]]], [[6], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]]], [[9], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]]], [[7], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]]], [[8], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]]]], [[[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2.0, 8.0]]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[1, 3, 2.0, 8.0, 3.0]]], [[5], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0]]], [[6], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]]], [[7], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]]], [[8], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]]], [[9], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]]], [[0], [[3.0]], [[1]]], [[1], [[3.0, 3.0]], [[1, 3]]], [[2], [[3.0, 3.0, 2.0]], [[1, 3, 2.0]]], [[10], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0]]], [[15], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0]]], [[13], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0]]], [[12], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0]]], [[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2.0, 8.0]]], [[1], [[3.0, 3.0]], [[1, 3]]], [[16], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0, 9.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0]]], [[14], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0]]], [[17], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0, 9.0, 47.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0]]], [[11], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0]]], [[0], [[3.0]], [[1]]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[1, 3, 2.0, 8.0, 3.0]]], [[5], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0]]], [[6], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]]], [[9], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]]], [[7], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]]], [[8], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]]]], [[[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2.0, 8.0]]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[1, 3, 2.0, 8.0, 3.0]]], [[5], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0]]], [[6], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]]], [[7], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]]], [[8], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]]], [[9], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]]], [[0], [[3.0]], [[1]]], [[1], [[3.0, 3.0]], [[1, 3]]], [[2], [[3.0, 3.0, 2.0]], [[1, 3, 2.0]]], [[10], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0]]], [[15], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0]]], [[13], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0]]], [[12], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0]]], [[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2.0, 8.0]]], [[1], [[3.0, 3.0]], [[1, 3]]], [[16], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0, 9.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0]]], [[14], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0]]], [[17], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0, 9.0, 47.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0]]], [[11], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0]]], [[0], [[3.0]], [[1]]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[1, 3, 2.0, 8.0, 3.0]]], [[5], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0]]], [[6], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]]], [[9], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]]], [[7], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]]], [[8], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]]]], [[[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2.0, 8.0]]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[1, 3, 2.0, 8.0, 3.0]]], [[5], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0]]], [[6], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]]], [[7], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]]], [[8], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]]], [[9], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]]], [[0], [[3.0]], [[1]]], [[1], [[3.0, 3.0]], [[1, 3]]], [[2], [[3.0, 3.0, 2.0]], [[1, 3, 2.0]]], [[10], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0]]], [[15], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0]]], [[13], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0]]], [[12], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0]]], [[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2.0, 8.0]]], [[1], [[3.0, 3.0]], [[1, 3]]], [[16], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0, 9.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0]]], [[14], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0]]], [[17], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0, 9.0, 47.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0]]], [[11], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0]]], [[0], [[3.0]], [[1]]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[1, 3, 2.0, 8.0, 3.0]]], [[5], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0]]], [[6], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]]], [[9], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]]], [[7], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]]], [[8], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]]]], [[[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2.0, 8.0]]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[1, 3, 2.0, 8.0, 3.0]]], [[5], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0]]], [[6], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]]], [[7], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]]], [[8], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]]], [[9], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]]], [[0], [[3.0]], [[1]]], [[1], [[3.0, 3.0]], [[1, 3]]], [[2], [[3.0, 3.0, 2.0]], [[1, 3, 2.0]]], [[10], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0]]], [[15], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0]]], [[13], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0]]], [[12], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0]]], [[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2.0, 8.0]]], [[1], [[3.0, 3.0]], [[1, 3]]], [[16], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0, 9.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0]]], [[14], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0]]], [[17], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0, 9.0, 47.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0]]], [[11], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0]]], [[0], [[3.0]], [[1]]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[1, 3, 2.0, 8.0, 3.0]]], [[5], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0]]], [[6], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]]], [[9], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]]], [[7], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]]], [[8], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]]]], [[[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2.0, 8.0]]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[1, 3, 2.0, 8.0, 3.0]]], [[5], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0]]], [[6], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]]], [[7], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]]], [[8], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]]], [[9], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]]], [[0], [[3.0]], [[1]]], [[1], [[3.0, 3.0]], [[1, 3]]], [[2], [[3.0, 3.0, 2.0]], [[1, 3, 2.0]]], [[10], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0]]], [[15], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0]]], [[13], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0]]], [[12], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0]]], [[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2.0, 8.0]]], [[1], [[3.0, 3.0]], [[1, 3]]], [[16], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0, 9.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0]]], [[14], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0]]], [[17], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0, 9.0, 47.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0]]], [[11], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0]]], [[0], [[3.0]], [[1]]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[1, 3, 2.0, 8.0, 3.0]]], [[5], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0]]], [[6], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]]], [[9], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]]], [[7], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]]], [[8], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]]]], [[[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2.0, 8.0]]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[1, 3, 2.0, 8.0, 3.0]]], [[5], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0]]], [[6], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]]], [[7], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]]], [[8], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]]], [[9], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]]], [[0], [[3.0]], [[1]]], [[1], [[3.0, 3.0]], [[1, 3]]], [[2], [[3.0, 3.0, 2.0]], [[1, 3, 2.0]]], [[10], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0]]], [[15], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0]]], [[13], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0]]], [[12], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0]]], [[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2.0, 8.0]]], [[1], [[3.0, 3.0]], [[1, 3]]], [[16], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0, 9.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0]]], [[14], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0]]], [[17], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0, 9.0, 47.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0]]], [[11], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0]]], [[0], [[3.0]], [[1]]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[1, 3, 2.0, 8.0, 3.0]]], [[5], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0]]], [[6], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]]], [[9], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]]], [[7], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]]], [[8], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]]]], [[[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2.0, 8.0]]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[1, 3, 2.0, 8.0, 3.0]]], [[5], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0]]], [[6], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]]], [[7], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]]], [[8], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]]], [[9], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]]], [[0], [[3.0]], [[1]]], [[1], [[3.0, 3.0]], [[1, 3]]], [[2], [[3.0, 3.0, 2.0]], [[1, 3, 2.0]]], [[10], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0]]], [[15], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0]]], [[13], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0]]], [[12], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0]]], [[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2.0, 8.0]]], [[1], [[3.0, 3.0]], [[1, 3]]], [[16], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0, 9.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0]]], [[14], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0]]], [[17], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0, 9.0, 47.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0]]], [[11], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0]]], [[0], [[3.0]], [[1]]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[1, 3, 2.0, 8.0, 3.0]]], [[5], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0]]], [[6], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]]], [[9], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]]], [[7], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]]], [[8], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]]]], [[[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2.0, 8.0]]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[1, 3, 2.0, 8.0, 3.0]]], [[5], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0]]], [[6], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]]], [[7], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]]], [[8], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]]], [[9], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]]], [[0], [[3.0]], [[1]]], [[1], [[3.0, 3.0]], [[1, 3]]], [[2], [[3.0, 3.0, 2.0]], [[1, 3, 2.0]]], [[10], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0]]], [[15], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0]]], [[13], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0]]], [[12], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0]]], [[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2.0, 8.0]]], [[1], [[3.0, 3.0]], [[1, 3]]], [[16], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0, 9.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0]]], [[14], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0]]], [[17], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0, 9.0, 47.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0]]], [[11], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0]]], [[0], [[3.0]], [[1]]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[1, 3, 2.0, 8.0, 3.0]]], [[5], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0]]], [[6], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]]], [[9], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]]], [[7], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]]], [[8], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]]]], [[[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2.0, 8.0]]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[1, 3, 2.0, 8.0, 3.0]]], [[5], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0]]], [[6], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]]], [[7], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]]], [[8], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]]], [[9], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]]], [[0], [[3.0]], [[1]]], [[1], [[3.0, 3.0]], [[1, 3]]], [[2], [[3.0, 3.0, 2.0]], [[1, 3, 2.0]]], [[10], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0]]], [[15], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0]]], [[13], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0]]], [[12], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0]]], [[3], [[3.0, 3.0, 2.0, 5.0]], [[1, 3, 2.0, 8.0]]], [[1], [[3.0, 3.0]], [[1, 3]]], [[16], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0, 9.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0]]], [[14], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0]]], [[17], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0, 7.0, 30.0, 8.0, 38.0, 9.0, 47.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0]]], [[11], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0, 6.0, 23.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0]]], [[0], [[3.0]], [[1]]], [[4], [[3.0, 3.0, 2.0, 5.0, 3.0]], [[1, 3, 2.0, 8.0, 3.0]]], [[5], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0]]], [[6], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]]], [[9], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0, 17.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]]], [[7], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]]], [[8], [[3.0, 3.0, 2.0, 5.0, 3.0, 8.0, 4.0, 12.0, 5.0]], [[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]]]]]"}
{"task_id": "HumanEval/131", "requirement": "def digits(n: int) -> int:\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def digits(n: int) -> int:\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "def digits(n: int) -> int:\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "def digits(n: int) -> int:\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "def digits(n: int) -> int:\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "def digits(n: int) -> int:\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "def digits(n: int) -> int:\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "def digits(n: int) -> int:\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "def digits(n: int) -> int:\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "def digits(n: int) -> int:\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "def digits(n: int) -> int:\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "def digits(n: int) -> int:\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "def digits(n: int) -> int:\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "def digits(n: int) -> int:\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "def digits(n: int) -> int:\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "def digits(n: int) -> int:\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "def digits(n: int) -> int:\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "def digits(n: int) -> int:\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "def digits(n: int) -> int:\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "def digits(n: int) -> int:\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "def digits(n: int) -> int:\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0"], "outputs": "[[1], [0], [15], [0], [0], [945], [945], [531441], [1], [15]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [4], [235], [0], [2468], [13579], [123456789], [999999], [100000], [1020304050]]", "input_output_examples": "[[[1], [4], [235]], [[1], [0], [15]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/132", "requirement": "def is_nested(string: str) -> bool:\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    '''", "repaired_requirement": "def is_nested(string: str) -> bool:\n    '''\n    Create a function that takes a string as input which contains only square brackets ('[' and ']').\n    The function should return True if and only if there is at least one pair of brackets that is nested within another pair of brackets.\n    Specifically, the function should return True if, during the processing of the string, a closing bracket ']' matches an opening bracket '[' and there is at least one unmatched opening bracket '[' remaining in the stack.\n    Otherwise, the function should return False.\n    '''", "original_clusters": {"cluster_list": [{"programs_str": ["def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n                if stack:\n                    return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n                if stack:\n                    return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n                if stack:\n                    return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                if stack:\n                    return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                if stack:\n                    return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                if stack:\n                    return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                if stack:\n                    return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n                if stack:\n                    return True\n            else:\n                stack.append(char)\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                if stack:\n                    return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n                if stack:\n                    return True\n            else:\n                stack.append(char)\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                if stack:\n                    return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                if stack:\n                    return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n                if stack:\n                    return True\n            else:\n                stack.append(char)\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n                if stack:\n                    return True\n            else:\n                stack.append(char)\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n                if stack:\n                    return True\n            else:\n                stack.append(char)\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n                if stack:\n                    return True\n            else:\n                stack.append(char)\n    return False"], "outputs": "[[True], [True], [False], [False], [True], [True], [True], [False], [True], [True], [True], [True], [True], [True], [False], [True], [False], [True], [True], [True]]", "probability": 0.85, "is_align_req": false, "test_consistency": 0.8333333333333334, "failed_input_output_examples": "[[['[]]]]]]][[[[[]'], [True], [False]]]"}, {"programs_str": ["def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    return len(stack) != 0"], "outputs": "[[False], [True], [False], [False], [False], [True], [False], [False], [True], [False], [False], [False], [False], [False], [False], [True], [True], [True], [True], [False]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[['[[]]'], [False], [True]], [['[]]]]]]][[[[[]'], [True], [False]], [['[[][]]'], [False], [True]]]"}, {"programs_str": ["def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0 and string.count('[') > 1"], "outputs": "[[True], [False], [True], [False], [True], [False], [True], [True], [False], [True], [True], [True], [True], [True], [False], [False], [False], [False], [False], [True]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.6666666666666667, "failed_input_output_examples": "[[['[][]'], [True], [False]], [['[[]][['], [False], [True]]]"}, {"programs_str": ["def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    return len(stack) != len(string)"], "outputs": "[[True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [False], [True], [True], [True]]", "probability": 0.05, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[['[]]]]]]][[[[[]'], [True], [False]], [['[][]'], [True], [False]], [['[]'], [True], [False]]]"}], "entropy": 0.423792339912287, "llm_generated_inputs": "[['[[]]'], ['[]]]]]]][[[[[]'], ['[][]'], ['[]'], ['[[][]]'], ['[[]][['], ['[[[[]]]]'], ['[][][][]'], ['[[[[[[]]]]]'], ['[[]][[]][[]]'], ['[[][][]]'], ['[[[][]]]'], ['[[[]]]'], ['[[]]'], ['[]'], ['[[[]'], [']]]'], ['[[[[]]]]]'], ['[[[[[]]]'], ['[[]][][[[]]]']]", "input_output_examples": "[[['[[]]'], ['[]]]]]]][[[[[]'], ['[][]'], ['[]'], ['[[][]]'], ['[[]][[']], [[True], [False], [False], [False], [True], [True]]]", "weighted_test_consistency": 0.7916666666666667, "at_least_one_align": false, "ambiguity": 0.3160628366228101}, "repaired_clusters": {"cluster_list": [{"programs_str": ["def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False"], "outputs": "[[True], [False], [False], [False], [True], [True], [True], [False], [True], [True], [True], [True], [True], [True], [False], [True], [False], [True], [True], [True]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['[[]]'], ['[]]]]]]][[[[[]'], ['[][]'], ['[]'], ['[[][]]'], ['[[]][['], ['[[[[]]]]'], ['[][][][]'], ['[[[[[[]]]]]'], ['[[]][[]][[]]'], ['[[][][]]'], ['[[[][]]]'], ['[[[]]]'], ['[[]]'], ['[]'], ['[[[]'], [']]]'], ['[[[[]]]]]'], ['[[[[[]]]'], ['[[]][][[[]]]']]", "input_output_examples": "[[['[[]]'], ['[]]]]]]][[[[[]'], ['[][]'], ['[]'], ['[[][]]'], ['[[]][[']], [[True], [False], [False], [False], [True], [True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "original_passk": 0.0, "repaired_passk": 0.0, "generated_programs": ["def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n                if stack:\n                    return True\n            else:\n                return False\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False"], "failed_inputs_outputs": "[[[['[[]'], [True], [False]], [['[[][]['], [True], [False]], [['[[][[]['], [True], [False]], [[']][[][[[]]]]['], [False], [True]], [[']][[][[]]]]['], [False], [True]], [[']][[][[]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][]][[[]]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][][]][[[]]][[[]'], [False], [True]], [['[][][][][]][[[]]][][]'], [False], [True]], [[']][[][[[]]['], [False], [True]], [['][][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], [False], [True]], [['][[[[[[]]]]][]]][][[[]'], [False], [True]], [['[[[][[]['], [True], [False]], [['][][][][[[[]]]]][[][]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]][]'], [False], [True]], [['[][][][][][[]'], [True], [False]], [['][]]][[]][]'], [False], [True]], [['][][[][[[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [[']][[][[]]]][[[[[[][]]]]]]]][]][]]]][]['], [False], [True]], [['][[[[[[]]]]]][]][[[]][]]]][][]]'], [False], [True]], [['][]][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], [False], [True]], [[']][[][[]]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]]][]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[]][]]]]][][]]]][][[[[[][]]]]]][]'], [False], [True]], [['][][[][[[]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [['][][[][[[]]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [[']][[][][][][][[][][[]]]]['], [False], [True]], [['][[[[[[]][[[]]][]'], [False], [True]], [['][][[][]][[[[[]]][['], [False], [True]], [['][[[[[[]]][[[][[[]]][]'], [False], [True]], [[']][[[[[[]][[[]]][]'], [False], [True]], [['][[[[]]]][][][][[][]]][[[][]][[]]]]'], [False], [True]], [['[[[[[][[[[[[]'], [True], [False]], [['][[][]][[[[[]]][[[[[]]]][[[['], [False], [True]], [['][[[][]][[[[[][]]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['][[[[]][][[]][][]][[[[]]][[[][[[]]][]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[]]][[[[[[[[[[[[[]][[]][[[]][][[[][[]][[[[[]]][[[[[]]]]]]][[[]][[]]]]]][][][][[][]]][[[][]][[][[[[][[[[[]]]]]][[]]]][[[[[['], [False], [True]], [['[[[[]'], [True], [False]], [[']][[[][]][[[[[][[[[[[][[[[[[]]]['], [False], [True]], [['][[[[[[]][[[[]]][][[[[][]][[[[][[[[[]]]][[[[[]]]'], [False], [True]], [['[[][[][][[[[]'], [True], [False]], [['][[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [[']][[[][]][[[[[[]][][[]][][]][][[[[[[][[[[[[]]]['], [False], [True]], [[']][[[][]][[[][[[]][][[]][][]][][[[[[[][[[[[[]]]['], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[[[][][[[[]'], [True], [False]], [['][[[[[][]]'], [False], [True]], [['[[[[][[['], [True], [False]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[[[[][][[[[]'], [True], [False]], [['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]][[[[[]]]][[[['], [False], [True]], [['][[[[[[]][[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]][][[]]]][[[[][[[[[[]][[[]]][][[[[]]][]'], [False], [True]], [[']][[[[]]]][][][][[][]]][[]]'], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[]][[[]]]]'], [False], [True]], [['][[[[[[][[[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['][[]][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [['[]][[[[[[[]]]'], [False], [True]], [['[[][[][][[[[[]'], [True], [False]], [['[[][][][[[[]'], [True], [False]], [['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]]][[[[[]]]][[[['], [False], [True]], [[']][[[[]]][]]['], [False], [True]], [[']][[[[[[]]]][[[[[]'], [False], [True]], [[']][][[][]][[[[[]]][['], [False], [True]], [['[]][]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[[]]]]]]]'], [False], [True]], [['[[[]'], [True], [False]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][][[[[[[]][][][[]]][[][]][[[[[]]]][][][[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [[']][[[]][]][[[[[[]][][[]][][]][][[[[[[][[[[[[[]]]['], [False], [True]], [['][[][[[[[[]][][][[[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]][][[[][]][[[[[][][][[[[][[[[[[][['], [False], [True]], [['][[]]]'], [False], [True]], [['][[[[[[]]][[[][[[]][[[[]]]][][][][[][]]][[[][]]]][[[[[[[[[][[[[[]]]]]][[[[[[][]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], [False], [True]], [[']][[[[]][][[]][][]][[[[]]][[[][[[]]][]['], [False], [True]], [['[]]][][[][]][[[[[]]][[][[[[[[[]]]'], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[][[[]]]]'], [False], [True]], [['][[][[][]]][[[][]]][[]]][[[][[[]]]]'], [False], [True]], [['][[][[[][]]'], [False], [True]], [['[[[[[][[[[[[[]'], [True], [False]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [[']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[[[]]['], [False], [True]], [[']][[[[[[][][[[]]][]'], [False], [True]], [['][[[[[[][[[[]]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], [False], [True]], [['][[][[[[]][[[[]]][][[[[][]][[[[][[[[[]]]]][[[[[]]]'], [False], [True]], [[']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[][[]]['], [False], [True]], [['][][[][]][[[[[]][[][[]][[[[[[]]][['], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]]][[[]][[[]]]]'], [False], [True]], [['[[[][[['], [True], [False]], [['][[][[][][[[[[[[[[[[[[[[]]]]]]]][]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [['][[[[]]]][][][][[][]]][[[][][[]]]]'], [False], [True]], [[']][][[][]][[[[[]]][[[]][[[[[[][]]]'], [False], [True]], [[']][[[[]][][[]][][]][[]['], [False], [True]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]][[[[[][[][[]][[[[]][[]]][][[[[[[]][][][[]]][[][]][[[[[]]]][[][][[]]][[[[[][][]][[[[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[][[[][['], [True], [False]], [[']][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]['], [False], [True]], [[']][[]][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [False], [True]], [[']][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [False], [True]], [['][[[]]]][[[[[[][[[[]][[[]]]]'], [False], [True]], [[']][[]][]][[[[[[]]][[['], [False], [True]], [['][[[]]]][[[[[[][[[[]][[[[][]][][[][]]][[[][]][[]]][[[]]]]'], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][][[][]]][[[][]][[]]]]][['], [False], [True]], [[']][[]][]][[[[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]]][[[]][[['], [False], [True]], [['[[]'], [True], [False]], [[']][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[['], [False], [True]], [[']][[]][]][[[[[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[[]]]][][][][[][][]][[[][]][[]]][[]]][[['], [False], [True]], [['][[[]][[[]][][]][[[][[]]]][[[[[]][][[]]]][][][[]]]]]'], [False], [True]], [[']][[][]][[[[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [['[]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], [False], [True]], [[']][[][]][[[[[]][[[][]][][[][]]]][[][]][[[[[]][[[]][[[]][][[[[]]]][[[]]]][][][[[]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][]]][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[[[[[][]][[]]]]][['], [False], [True]], [[']][[][]][[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [['][[[]][][]]'], [False], [True]], [[']][[]][]][[[[[]][[[]][[[]][][]][[[]]]]][[][]][[[[[]]]][[[][][][][[][]]][[[][]][[]]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[[]]]][[[[[[][[[[]][[[]]]][][][]][[[[[]]][[['], [False], [True]], [[']][[]][]]][[[[[[[]]][[['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]'], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]][[[[[[[]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[][[[]][][]][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[]]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]]]][[[[][[]]][[[[[[[]]][[][]][[[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][[]][]][[[[[[]]][[[[[[]]][[[]'], [False], [True]], [[']][[[]]][[][]][][[[][]][[]]][[][[['], [False], [True]], [[']][[]][]][[]]][[['], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][][[]][[[[]][[[[[[[]]][[['], [False], [True]], [['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[][]][[[[[[[]]][[[][][][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][][]]][[[]][[['], [False], [True]], [[']][[[]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[][[]][[[[[[[]]][[['], [False], [True]], [[']][[[]]]][[[[[[][[[[][[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[][]]]][][][][[][][]][[[[][]][][[][]]][[[][]][[]]]]][['], [False], [True]], [[']][[[]]]][[[[[[][[[[[]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[[[[[[[[[]]][[[]]][[[]]][[[]]]]][[[[[[][[[[]][[[]]]][][]][[[]]]][][][]][[][]]][[[][]]][[]]]][]]][][[][]]]][[]]][[]][[]]]['], [False], [True]], [[']][[][]][[[[[]][[[][[[[]]]][[[]]]][][][[[]][[['], [False], [True]], [[']][[][]][[[[[]]][[[[][[[[[[]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][]]]'], [False], [True]], [[']][[][]][[[[[[[[][]][][[]]]['], [False], [True]], [['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]][[][]][[[[[[]]][[[]][][]]][]]][[][[[[]]]][[[[[[][[[[]]][[[]]]]]]]][[[[[[[][]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[]][]][[]]][[[]][[[['], [False], [True]], [[']][[[][[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][][[[[[][[[][]]][][[][]]][[[][]][[]]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][]][][[[][[]][[]]]['], [False], [True]], [[']][[[][[[[[[]][]][][[][]][][[[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][[][][[][]]][[[][]]][[]]]]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[][[]]][[['], [False], [True]], [[']][[[]]][[][]][][[]][[]][]][[]]][[[[][]][[]]][[][[['], [False], [True]], [[']]][[][]][[[[[]]][[['], [False], [True]], [['][][[][]]][[[][]][[]]][['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][]][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]]], [[['[[]'], [True], [False]], [['[[][]['], [True], [False]], [['[[][[]['], [True], [False]], [[']][[][[[]]]]['], [False], [True]], [[']][[][[]]]]['], [False], [True]], [[']][[][[]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][]][[[]]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][][]][[[]]][[[]'], [False], [True]], [['[][][][][]][[[]]][][]'], [False], [True]], [[']][[][[[]]['], [False], [True]], [['][][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], [False], [True]], [['][[[[[[]]]]][]]][][[[]'], [False], [True]], [['[[[][[]['], [True], [False]], [['][][][][[[[]]]]][[][]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]][]'], [False], [True]], [['[][][][][][[]'], [True], [False]], [['][]]][[]][]'], [False], [True]], [['][][[][[[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [[']][[][[]]]][[[[[[][]]]]]]]][]][]]]][]['], [False], [True]], [['][[[[[[]]]]]][]][[[]][]]]][][]]'], [False], [True]], [['][]][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], [False], [True]], [[']][[][[]]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]]][]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[]][]]]]][][]]]][][[[[[][]]]]]][]'], [False], [True]], [['][][[][[[]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [['][][[][[[]]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [[']][[][][][][][[][][[]]]]['], [False], [True]], [['][[[[[[]][[[]]][]'], [False], [True]], [['][][[][]][[[[[]]][['], [False], [True]], [['][[[[[[]]][[[][[[]]][]'], [False], [True]], [[']][[[[[[]][[[]]][]'], [False], [True]], [['][[[[]]]][][][][[][]]][[[][]][[]]]]'], [False], [True]], [['[[[[[][[[[[[]'], [True], [False]], [['][[][]][[[[[]]][[[[[]]]][[[['], [False], [True]], [['][[[][]][[[[[][]]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['][[[[]][][[]][][]][[[[]]][[[][[[]]][]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[]]][[[[[[[[[[[[[]][[]][[[]][][[[][[]][[[[[]]][[[[[]]]]]]][[[]][[]]]]]][][][][[][]]][[[][]][[][[[[][[[[[]]]]]][[]]]][[[[[['], [False], [True]], [['[[[[]'], [True], [False]], [[']][[[][]][[[[[][[[[[[][[[[[[]]]['], [False], [True]], [['][[[[[[]][[[[]]][][[[[][]][[[[][[[[[]]]][[[[[]]]'], [False], [True]], [['[[][[][][[[[]'], [True], [False]], [['][[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [[']][[[][]][[[[[[]][][[]][][]][][[[[[[][[[[[[]]]['], [False], [True]], [[']][[[][]][[[][[[]][][[]][][]][][[[[[[][[[[[[]]]['], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[[[][][[[[]'], [True], [False]], [['][[[[[][]]'], [False], [True]], [['[[[[][[['], [True], [False]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[[[[][][[[[]'], [True], [False]], [['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]][[[[[]]]][[[['], [False], [True]], [['][[[[[[]][[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]][][[]]]][[[[][[[[[[]][[[]]][][[[[]]][]'], [False], [True]], [[']][[[[]]]][][][][[][]]][[]]'], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[]][[[]]]]'], [False], [True]], [['][[[[[[][[[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['][[]][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [['[]][[[[[[[]]]'], [False], [True]], [['[[][[][][[[[[]'], [True], [False]], [['[[][][][[[[]'], [True], [False]], [['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]]][[[[[]]]][[[['], [False], [True]], [[']][[[[]]][]]['], [False], [True]], [[']][[[[[[]]]][[[[[]'], [False], [True]], [[']][][[][]][[[[[]]][['], [False], [True]], [['[]][]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[[]]]]]]]'], [False], [True]], [['[[[]'], [True], [False]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][][[[[[[]][][][[]]][[][]][[[[[]]]][][][[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [[']][[[]][]][[[[[[]][][[]][][]][][[[[[[][[[[[[[]]]['], [False], [True]], [['][[][[[[[[]][][][[[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]][][[[][]][[[[[][][][[[[][[[[[[][['], [False], [True]], [['][[]]]'], [False], [True]], [['][[[[[[]]][[[][[[]][[[[]]]][][][][[][]]][[[][]]]][[[[[[[[[][[[[[]]]]]][[[[[[][]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], [False], [True]], [[']][[[[]][][[]][][]][[[[]]][[[][[[]]][]['], [False], [True]], [['[]]][][[][]][[[[[]]][[][[[[[[[]]]'], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[][[[]]]]'], [False], [True]], [['][[][[][]]][[[][]]][[]]][[[][[[]]]]'], [False], [True]], [['][[][[[][]]'], [False], [True]], [['[[[[[][[[[[[[]'], [True], [False]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [[']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[[[]]['], [False], [True]], [[']][[[[[[][][[[]]][]'], [False], [True]], [['][[[[[[][[[[]]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], [False], [True]], [['][[][[[[]][[[[]]][][[[[][]][[[[][[[[[]]]]][[[[[]]]'], [False], [True]], [[']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[][[]]['], [False], [True]], [['][][[][]][[[[[]][[][[]][[[[[[]]][['], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]]][[[]][[[]]]]'], [False], [True]], [['[[[][[['], [True], [False]], [['][[][[][][[[[[[[[[[[[[[[]]]]]]]][]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [['][[[[]]]][][][][[][]]][[[][][[]]]]'], [False], [True]], [[']][][[][]][[[[[]]][[[]][[[[[[][]]]'], [False], [True]], [[']][[[[]][][[]][][]][[]['], [False], [True]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]][[[[[][[][[]][[[[]][[]]][][[[[[[]][][][[]]][[][]][[[[[]]]][[][][[]]][[[[[][][]][[[[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[][[[][['], [True], [False]], [[']][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]['], [False], [True]], [[']][[]][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [False], [True]], [[']][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [False], [True]], [['][[[]]]][[[[[[][[[[]][[[]]]]'], [False], [True]], [[']][[]][]][[[[[[]]][[['], [False], [True]], [['][[[]]]][[[[[[][[[[]][[[[][]][][[][]]][[[][]][[]]][[[]]]]'], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][][[][]]][[[][]][[]]]]][['], [False], [True]], [[']][[]][]][[[[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]]][[[]][[['], [False], [True]], [['[[]'], [True], [False]], [[']][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[['], [False], [True]], [[']][[]][]][[[[[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[[]]]][][][][[][][]][[[][]][[]]][[]]][[['], [False], [True]], [['][[[]][[[]][][]][[[][[]]]][[[[[]][][[]]]][][][[]]]]]'], [False], [True]], [[']][[][]][[[[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [['[]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], [False], [True]], [[']][[][]][[[[[]][[[][]][][[][]]]][[][]][[[[[]][[[]][[[]][][[[[]]]][[[]]]][][][[[]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][]]][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[[[[[][]][[]]]]][['], [False], [True]], [[']][[][]][[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [['][[[]][][]]'], [False], [True]], [[']][[]][]][[[[[]][[[]][[[]][][]][[[]]]]][[][]][[[[[]]]][[[][][][][[][]]][[[][]][[]]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[[]]]][[[[[[][[[[]][[[]]]][][][]][[[[[]]][[['], [False], [True]], [[']][[]][]]][[[[[[[]]][[['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]'], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]][[[[[[[]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[][[[]][][]][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[]]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]]]][[[[][[]]][[[[[[[]]][[][]][[[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][[]][]][[[[[[]]][[[[[[]]][[[]'], [False], [True]], [[']][[[]]][[][]][][[[][]][[]]][[][[['], [False], [True]], [[']][[]][]][[]]][[['], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][][[]][[[[]][[[[[[[]]][[['], [False], [True]], [['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[][]][[[[[[[]]][[[][][][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][][]]][[[]][[['], [False], [True]], [[']][[[]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[][[]][[[[[[[]]][[['], [False], [True]], [[']][[[]]]][[[[[[][[[[][[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[][]]]][][][][[][][]][[[[][]][][[][]]][[[][]][[]]]]][['], [False], [True]], [[']][[[]]]][[[[[[][[[[[]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[[[[[[[[[]]][[[]]][[[]]][[[]]]]][[[[[[][[[[]][[[]]]][][]][[[]]]][][][]][[][]]][[[][]]][[]]]][]]][][[][]]]][[]]][[]][[]]]['], [False], [True]], [[']][[][]][[[[[]][[[][[[[]]]][[[]]]][][][[[]][[['], [False], [True]], [[']][[][]][[[[[]]][[[[][[[[[[]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][]]]'], [False], [True]], [[']][[][]][[[[[[[[][]][][[]]]['], [False], [True]], [['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]][[][]][[[[[[]]][[[]][][]]][]]][[][[[[]]]][[[[[[][[[[]]][[[]]]]]]]][[[[[[[][]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[]][]][[]]][[[]][[[['], [False], [True]], [[']][[[][[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][][[[[[][[[][]]][][[][]]][[[][]][[]]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][]][][[[][[]][[]]]['], [False], [True]], [[']][[[][[[[[[]][]][][[][]][][[[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][[][][[][]]][[[][]]][[]]]]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[][[]]][[['], [False], [True]], [[']][[[]]][[][]][][[]][[]][]][[]]][[[[][]][[]]][[][[['], [False], [True]], [[']]][[][]][[[[[]]][[['], [False], [True]], [['][][[][]]][[[][]][[]]][['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][]][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]]], [[['[[]'], [True], [False]], [['[[][]['], [True], [False]], [['[[][[]['], [True], [False]], [[']][[][[[]]]]['], [False], [True]], [[']][[][[]]]]['], [False], [True]], [[']][[][[]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][]][[[]]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][][]][[[]]][[[]'], [False], [True]], [['[][][][][]][[[]]][][]'], [False], [True]], [[']][[][[[]]['], [False], [True]], [['][][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], [False], [True]], [['][[[[[[]]]]][]]][][[[]'], [False], [True]], [['[[[][[]['], [True], [False]], [['][][][][[[[]]]]][[][]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]][]'], [False], [True]], [['[][][][][][[]'], [True], [False]], [['][]]][[]][]'], [False], [True]], [['][][[][[[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [[']][[][[]]]][[[[[[][]]]]]]]][]][]]]][]['], [False], [True]], [['][[[[[[]]]]]][]][[[]][]]]][][]]'], [False], [True]], [['][]][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], [False], [True]], [[']][[][[]]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]]][]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[]][]]]]][][]]]][][[[[[][]]]]]][]'], [False], [True]], [['][][[][[[]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [['][][[][[[]]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [[']][[][][][][][[][][[]]]]['], [False], [True]], [['][[[[[[]][[[]]][]'], [False], [True]], [['][][[][]][[[[[]]][['], [False], [True]], [['][[[[[[]]][[[][[[]]][]'], [False], [True]], [[']][[[[[[]][[[]]][]'], [False], [True]], [['][[[[]]]][][][][[][]]][[[][]][[]]]]'], [False], [True]], [['[[[[[][[[[[[]'], [True], [False]], [['][[][]][[[[[]]][[[[[]]]][[[['], [False], [True]], [['][[[][]][[[[[][]]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['][[[[]][][[]][][]][[[[]]][[[][[[]]][]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[]]][[[[[[[[[[[[[]][[]][[[]][][[[][[]][[[[[]]][[[[[]]]]]]][[[]][[]]]]]][][][][[][]]][[[][]][[][[[[][[[[[]]]]]][[]]]][[[[[['], [False], [True]], [['[[[[]'], [True], [False]], [[']][[[][]][[[[[][[[[[[][[[[[[]]]['], [False], [True]], [['][[[[[[]][[[[]]][][[[[][]][[[[][[[[[]]]][[[[[]]]'], [False], [True]], [['[[][[][][[[[]'], [True], [False]], [['][[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [[']][[[][]][[[[[[]][][[]][][]][][[[[[[][[[[[[]]]['], [False], [True]], [[']][[[][]][[[][[[]][][[]][][]][][[[[[[][[[[[[]]]['], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[[[][][[[[]'], [True], [False]], [['][[[[[][]]'], [False], [True]], [['[[[[][[['], [True], [False]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[[[[][][[[[]'], [True], [False]], [['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]][[[[[]]]][[[['], [False], [True]], [['][[[[[[]][[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]][][[]]]][[[[][[[[[[]][[[]]][][[[[]]][]'], [False], [True]], [[']][[[[]]]][][][][[][]]][[]]'], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[]][[[]]]]'], [False], [True]], [['][[[[[[][[[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['][[]][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [['[]][[[[[[[]]]'], [False], [True]], [['[[][[][][[[[[]'], [True], [False]], [['[[][][][[[[]'], [True], [False]], [['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]]][[[[[]]]][[[['], [False], [True]], [[']][[[[]]][]]['], [False], [True]], [[']][[[[[[]]]][[[[[]'], [False], [True]], [[']][][[][]][[[[[]]][['], [False], [True]], [['[]][]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[[]]]]]]]'], [False], [True]], [['[[[]'], [True], [False]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][][[[[[[]][][][[]]][[][]][[[[[]]]][][][[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [[']][[[]][]][[[[[[]][][[]][][]][][[[[[[][[[[[[[]]]['], [False], [True]], [['][[][[[[[[]][][][[[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]][][[[][]][[[[[][][][[[[][[[[[[][['], [False], [True]], [['][[]]]'], [False], [True]], [['][[[[[[]]][[[][[[]][[[[]]]][][][][[][]]][[[][]]]][[[[[[[[[][[[[[]]]]]][[[[[[][]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], [False], [True]], [[']][[[[]][][[]][][]][[[[]]][[[][[[]]][]['], [False], [True]], [['[]]][][[][]][[[[[]]][[][[[[[[[]]]'], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[][[[]]]]'], [False], [True]], [['][[][[][]]][[[][]]][[]]][[[][[[]]]]'], [False], [True]], [['][[][[[][]]'], [False], [True]], [['[[[[[][[[[[[[]'], [True], [False]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [[']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[[[]]['], [False], [True]], [[']][[[[[[][][[[]]][]'], [False], [True]], [['][[[[[[][[[[]]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], [False], [True]], [['][[][[[[]][[[[]]][][[[[][]][[[[][[[[[]]]]][[[[[]]]'], [False], [True]], [[']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[][[]]['], [False], [True]], [['][][[][]][[[[[]][[][[]][[[[[[]]][['], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]]][[[]][[[]]]]'], [False], [True]], [['[[[][[['], [True], [False]], [['][[][[][][[[[[[[[[[[[[[[]]]]]]]][]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [['][[[[]]]][][][][[][]]][[[][][[]]]]'], [False], [True]], [[']][][[][]][[[[[]]][[[]][[[[[[][]]]'], [False], [True]], [[']][[[[]][][[]][][]][[]['], [False], [True]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]][[[[[][[][[]][[[[]][[]]][][[[[[[]][][][[]]][[][]][[[[[]]]][[][][[]]][[[[[][][]][[[[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[][[[][['], [True], [False]], [[']][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]['], [False], [True]], [[']][[]][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [False], [True]], [[']][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [False], [True]], [['][[[]]]][[[[[[][[[[]][[[]]]]'], [False], [True]], [[']][[]][]][[[[[[]]][[['], [False], [True]], [['][[[]]]][[[[[[][[[[]][[[[][]][][[][]]][[[][]][[]]][[[]]]]'], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][][[][]]][[[][]][[]]]]][['], [False], [True]], [[']][[]][]][[[[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]]][[[]][[['], [False], [True]], [['[[]'], [True], [False]], [[']][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[['], [False], [True]], [[']][[]][]][[[[[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[[]]]][][][][[][][]][[[][]][[]]][[]]][[['], [False], [True]], [['][[[]][[[]][][]][[[][[]]]][[[[[]][][[]]]][][][[]]]]]'], [False], [True]], [[']][[][]][[[[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [['[]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], [False], [True]], [[']][[][]][[[[[]][[[][]][][[][]]]][[][]][[[[[]][[[]][[[]][][[[[]]]][[[]]]][][][[[]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][]]][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[[[[[][]][[]]]]][['], [False], [True]], [[']][[][]][[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [['][[[]][][]]'], [False], [True]], [[']][[]][]][[[[[]][[[]][[[]][][]][[[]]]]][[][]][[[[[]]]][[[][][][][[][]]][[[][]][[]]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[[]]]][[[[[[][[[[]][[[]]]][][][]][[[[[]]][[['], [False], [True]], [[']][[]][]]][[[[[[[]]][[['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]'], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]][[[[[[[]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[][[[]][][]][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[]]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]]]][[[[][[]]][[[[[[[]]][[][]][[[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][[]][]][[[[[[]]][[[[[[]]][[[]'], [False], [True]], [[']][[[]]][[][]][][[[][]][[]]][[][[['], [False], [True]], [[']][[]][]][[]]][[['], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][][[]][[[[]][[[[[[[]]][[['], [False], [True]], [['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[][]][[[[[[[]]][[[][][][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][][]]][[[]][[['], [False], [True]], [[']][[[]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[][[]][[[[[[[]]][[['], [False], [True]], [[']][[[]]]][[[[[[][[[[][[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[][]]]][][][][[][][]][[[[][]][][[][]]][[[][]][[]]]]][['], [False], [True]], [[']][[[]]]][[[[[[][[[[[]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[[[[[[[[[]]][[[]]][[[]]][[[]]]]][[[[[[][[[[]][[[]]]][][]][[[]]]][][][]][[][]]][[[][]]][[]]]][]]][][[][]]]][[]]][[]][[]]]['], [False], [True]], [[']][[][]][[[[[]][[[][[[[]]]][[[]]]][][][[[]][[['], [False], [True]], [[']][[][]][[[[[]]][[[[][[[[[[]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][]]]'], [False], [True]], [[']][[][]][[[[[[[[][]][][[]]]['], [False], [True]], [['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]][[][]][[[[[[]]][[[]][][]]][]]][[][[[[]]]][[[[[[][[[[]]][[[]]]]]]]][[[[[[[][]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[]][]][[]]][[[]][[[['], [False], [True]], [[']][[[][[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][][[[[[][[[][]]][][[][]]][[[][]][[]]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][]][][[[][[]][[]]]['], [False], [True]], [[']][[[][[[[[[]][]][][[][]][][[[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][[][][[][]]][[[][]]][[]]]]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[][[]]][[['], [False], [True]], [[']][[[]]][[][]][][[]][[]][]][[]]][[[[][]][[]]][[][[['], [False], [True]], [[']]][[][]][[[[[]]][[['], [False], [True]], [['][][[][]]][[[][]][[]]][['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][]][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]]], [[['[[]'], [True], [False]], [['[[][]['], [True], [False]], [['[[][[]['], [True], [False]], [[']][[][[[]]]]['], [False], [True]], [[']][[][[]]]]['], [False], [True]], [[']][[][[]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][]][[[]]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][][]][[[]]][[[]'], [False], [True]], [['[][][][][]][[[]]][][]'], [False], [True]], [[']][[][[[]]['], [False], [True]], [['][][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], [False], [True]], [['][[[[[[]]]]][]]][][[[]'], [False], [True]], [['[[[][[]['], [True], [False]], [['][][][][[[[]]]]][[][]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]][]'], [False], [True]], [['[][][][][][[]'], [True], [False]], [['][]]][[]][]'], [False], [True]], [['][][[][[[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [[']][[][[]]]][[[[[[][]]]]]]]][]][]]]][]['], [False], [True]], [['][[[[[[]]]]]][]][[[]][]]]][][]]'], [False], [True]], [['][]][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], [False], [True]], [[']][[][[]]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]]][]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[]][]]]]][][]]]][][[[[[][]]]]]][]'], [False], [True]], [['][][[][[[]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [['][][[][[[]]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [[']][[][][][][][[][][[]]]]['], [False], [True]], [['][[[[[[]][[[]]][]'], [False], [True]], [['][][[][]][[[[[]]][['], [False], [True]], [['][[[[[[]]][[[][[[]]][]'], [False], [True]], [[']][[[[[[]][[[]]][]'], [False], [True]], [['][[[[]]]][][][][[][]]][[[][]][[]]]]'], [False], [True]], [['[[[[[][[[[[[]'], [True], [False]], [['][[][]][[[[[]]][[[[[]]]][[[['], [False], [True]], [['][[[][]][[[[[][]]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['][[[[]][][[]][][]][[[[]]][[[][[[]]][]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[]]][[[[[[[[[[[[[]][[]][[[]][][[[][[]][[[[[]]][[[[[]]]]]]][[[]][[]]]]]][][][][[][]]][[[][]][[][[[[][[[[[]]]]]][[]]]][[[[[['], [False], [True]], [['[[[[]'], [True], [False]], [[']][[[][]][[[[[][[[[[[][[[[[[]]]['], [False], [True]], [['][[[[[[]][[[[]]][][[[[][]][[[[][[[[[]]]][[[[[]]]'], [False], [True]], [['[[][[][][[[[]'], [True], [False]], [['][[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [[']][[[][]][[[[[[]][][[]][][]][][[[[[[][[[[[[]]]['], [False], [True]], [[']][[[][]][[[][[[]][][[]][][]][][[[[[[][[[[[[]]]['], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[[[][][[[[]'], [True], [False]], [['][[[[[][]]'], [False], [True]], [['[[[[][[['], [True], [False]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[[[[][][[[[]'], [True], [False]], [['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]][[[[[]]]][[[['], [False], [True]], [['][[[[[[]][[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]][][[]]]][[[[][[[[[[]][[[]]][][[[[]]][]'], [False], [True]], [[']][[[[]]]][][][][[][]]][[]]'], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[]][[[]]]]'], [False], [True]], [['][[[[[[][[[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['][[]][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [['[]][[[[[[[]]]'], [False], [True]], [['[[][[][][[[[[]'], [True], [False]], [['[[][][][[[[]'], [True], [False]], [['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]]][[[[[]]]][[[['], [False], [True]], [[']][[[[]]][]]['], [False], [True]], [[']][[[[[[]]]][[[[[]'], [False], [True]], [[']][][[][]][[[[[]]][['], [False], [True]], [['[]][]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[[]]]]]]]'], [False], [True]], [['[[[]'], [True], [False]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][][[[[[[]][][][[]]][[][]][[[[[]]]][][][[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [[']][[[]][]][[[[[[]][][[]][][]][][[[[[[][[[[[[[]]]['], [False], [True]], [['][[][[[[[[]][][][[[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]][][[[][]][[[[[][][][[[[][[[[[[][['], [False], [True]], [['][[]]]'], [False], [True]], [['][[[[[[]]][[[][[[]][[[[]]]][][][][[][]]][[[][]]]][[[[[[[[[][[[[[]]]]]][[[[[[][]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], [False], [True]], [[']][[[[]][][[]][][]][[[[]]][[[][[[]]][]['], [False], [True]], [['[]]][][[][]][[[[[]]][[][[[[[[[]]]'], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[][[[]]]]'], [False], [True]], [['][[][[][]]][[[][]]][[]]][[[][[[]]]]'], [False], [True]], [['][[][[[][]]'], [False], [True]], [['[[[[[][[[[[[[]'], [True], [False]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [[']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[[[]]['], [False], [True]], [[']][[[[[[][][[[]]][]'], [False], [True]], [['][[[[[[][[[[]]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], [False], [True]], [['][[][[[[]][[[[]]][][[[[][]][[[[][[[[[]]]]][[[[[]]]'], [False], [True]], [[']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[][[]]['], [False], [True]], [['][][[][]][[[[[]][[][[]][[[[[[]]][['], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]]][[[]][[[]]]]'], [False], [True]], [['[[[][[['], [True], [False]], [['][[][[][][[[[[[[[[[[[[[[]]]]]]]][]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [['][[[[]]]][][][][[][]]][[[][][[]]]]'], [False], [True]], [[']][][[][]][[[[[]]][[[]][[[[[[][]]]'], [False], [True]], [[']][[[[]][][[]][][]][[]['], [False], [True]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]][[[[[][[][[]][[[[]][[]]][][[[[[[]][][][[]]][[][]][[[[[]]]][[][][[]]][[[[[][][]][[[[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[][[[][['], [True], [False]], [[']][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]['], [False], [True]], [[']][[]][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [False], [True]], [[']][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [False], [True]], [['][[[]]]][[[[[[][[[[]][[[]]]]'], [False], [True]], [[']][[]][]][[[[[[]]][[['], [False], [True]], [['][[[]]]][[[[[[][[[[]][[[[][]][][[][]]][[[][]][[]]][[[]]]]'], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][][[][]]][[[][]][[]]]]][['], [False], [True]], [[']][[]][]][[[[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]]][[[]][[['], [False], [True]], [['[[]'], [True], [False]], [[']][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[['], [False], [True]], [[']][[]][]][[[[[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[[]]]][][][][[][][]][[[][]][[]]][[]]][[['], [False], [True]], [['][[[]][[[]][][]][[[][[]]]][[[[[]][][[]]]][][][[]]]]]'], [False], [True]], [[']][[][]][[[[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [['[]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], [False], [True]], [[']][[][]][[[[[]][[[][]][][[][]]]][[][]][[[[[]][[[]][[[]][][[[[]]]][[[]]]][][][[[]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][]]][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[[[[[][]][[]]]]][['], [False], [True]], [[']][[][]][[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [['][[[]][][]]'], [False], [True]], [[']][[]][]][[[[[]][[[]][[[]][][]][[[]]]]][[][]][[[[[]]]][[[][][][][[][]]][[[][]][[]]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[[]]]][[[[[[][[[[]][[[]]]][][][]][[[[[]]][[['], [False], [True]], [[']][[]][]]][[[[[[[]]][[['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]'], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]][[[[[[[]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[][[[]][][]][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[]]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]]]][[[[][[]]][[[[[[[]]][[][]][[[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][[]][]][[[[[[]]][[[[[[]]][[[]'], [False], [True]], [[']][[[]]][[][]][][[[][]][[]]][[][[['], [False], [True]], [[']][[]][]][[]]][[['], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][][[]][[[[]][[[[[[[]]][[['], [False], [True]], [['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[][]][[[[[[[]]][[[][][][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][][]]][[[]][[['], [False], [True]], [[']][[[]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[][[]][[[[[[[]]][[['], [False], [True]], [[']][[[]]]][[[[[[][[[[][[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[][]]]][][][][[][][]][[[[][]][][[][]]][[[][]][[]]]]][['], [False], [True]], [[']][[[]]]][[[[[[][[[[[]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[[[[[[[[[]]][[[]]][[[]]][[[]]]]][[[[[[][[[[]][[[]]]][][]][[[]]]][][][]][[][]]][[[][]]][[]]]][]]][][[][]]]][[]]][[]][[]]]['], [False], [True]], [[']][[][]][[[[[]][[[][[[[]]]][[[]]]][][][[[]][[['], [False], [True]], [[']][[][]][[[[[]]][[[[][[[[[[]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][]]]'], [False], [True]], [[']][[][]][[[[[[[[][]][][[]]]['], [False], [True]], [['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]][[][]][[[[[[]]][[[]][][]]][]]][[][[[[]]]][[[[[[][[[[]]][[[]]]]]]]][[[[[[[][]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[]][]][[]]][[[]][[[['], [False], [True]], [[']][[[][[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][][[[[[][[[][]]][][[][]]][[[][]][[]]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][]][][[[][[]][[]]]['], [False], [True]], [[']][[[][[[[[[]][]][][[][]][][[[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][[][][[][]]][[[][]]][[]]]]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[][[]]][[['], [False], [True]], [[']][[[]]][[][]][][[]][[]][]][[]]][[[[][]][[]]][[][[['], [False], [True]], [[']]][[][]][[[[[]]][[['], [False], [True]], [['][][[][]]][[[][]][[]]][['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][]][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]]], [[['[[]'], [True], [False]], [['[[][]['], [True], [False]], [['[[][[]['], [True], [False]], [[']][[][[[]]]]['], [False], [True]], [[']][[][[]]]]['], [False], [True]], [[']][[][[]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][]][[[]]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][][]][[[]]][[[]'], [False], [True]], [['[][][][][]][[[]]][][]'], [False], [True]], [[']][[][[[]]['], [False], [True]], [['][][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], [False], [True]], [['][[[[[[]]]]][]]][][[[]'], [False], [True]], [['[[[][[]['], [True], [False]], [['][][][][[[[]]]]][[][]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]][]'], [False], [True]], [['[][][][][][[]'], [True], [False]], [['][]]][[]][]'], [False], [True]], [['][][[][[[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [[']][[][[]]]][[[[[[][]]]]]]]][]][]]]][]['], [False], [True]], [['][[[[[[]]]]]][]][[[]][]]]][][]]'], [False], [True]], [['][]][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], [False], [True]], [[']][[][[]]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]]][]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[]][]]]]][][]]]][][[[[[][]]]]]][]'], [False], [True]], [['][][[][[[]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [['][][[][[[]]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [[']][[][][][][][[][][[]]]]['], [False], [True]], [['][[[[[[]][[[]]][]'], [False], [True]], [['][][[][]][[[[[]]][['], [False], [True]], [['][[[[[[]]][[[][[[]]][]'], [False], [True]], [[']][[[[[[]][[[]]][]'], [False], [True]], [['][[[[]]]][][][][[][]]][[[][]][[]]]]'], [False], [True]], [['[[[[[][[[[[[]'], [True], [False]], [['][[][]][[[[[]]][[[[[]]]][[[['], [False], [True]], [['][[[][]][[[[[][]]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['][[[[]][][[]][][]][[[[]]][[[][[[]]][]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[]]][[[[[[[[[[[[[]][[]][[[]][][[[][[]][[[[[]]][[[[[]]]]]]][[[]][[]]]]]][][][][[][]]][[[][]][[][[[[][[[[[]]]]]][[]]]][[[[[['], [False], [True]], [['[[[[]'], [True], [False]], [[']][[[][]][[[[[][[[[[[][[[[[[]]]['], [False], [True]], [['][[[[[[]][[[[]]][][[[[][]][[[[][[[[[]]]][[[[[]]]'], [False], [True]], [['[[][[][][[[[]'], [True], [False]], [['][[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [[']][[[][]][[[[[[]][][[]][][]][][[[[[[][[[[[[]]]['], [False], [True]], [[']][[[][]][[[][[[]][][[]][][]][][[[[[[][[[[[[]]]['], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[[[][][[[[]'], [True], [False]], [['][[[[[][]]'], [False], [True]], [['[[[[][[['], [True], [False]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[[[[][][[[[]'], [True], [False]], [['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]][[[[[]]]][[[['], [False], [True]], [['][[[[[[]][[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]][][[]]]][[[[][[[[[[]][[[]]][][[[[]]][]'], [False], [True]], [[']][[[[]]]][][][][[][]]][[]]'], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[]][[[]]]]'], [False], [True]], [['][[[[[[][[[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['][[]][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [['[]][[[[[[[]]]'], [False], [True]], [['[[][[][][[[[[]'], [True], [False]], [['[[][][][[[[]'], [True], [False]], [['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]]][[[[[]]]][[[['], [False], [True]], [[']][[[[]]][]]['], [False], [True]], [[']][[[[[[]]]][[[[[]'], [False], [True]], [[']][][[][]][[[[[]]][['], [False], [True]], [['[]][]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[[]]]]]]]'], [False], [True]], [['[[[]'], [True], [False]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][][[[[[[]][][][[]]][[][]][[[[[]]]][][][[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [[']][[[]][]][[[[[[]][][[]][][]][][[[[[[][[[[[[[]]]['], [False], [True]], [['][[][[[[[[]][][][[[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]][][[[][]][[[[[][][][[[[][[[[[[][['], [False], [True]], [['][[]]]'], [False], [True]], [['][[[[[[]]][[[][[[]][[[[]]]][][][][[][]]][[[][]]]][[[[[[[[[][[[[[]]]]]][[[[[[][]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], [False], [True]], [[']][[[[]][][[]][][]][[[[]]][[[][[[]]][]['], [False], [True]], [['[]]][][[][]][[[[[]]][[][[[[[[[]]]'], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[][[[]]]]'], [False], [True]], [['][[][[][]]][[[][]]][[]]][[[][[[]]]]'], [False], [True]], [['][[][[[][]]'], [False], [True]], [['[[[[[][[[[[[[]'], [True], [False]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [[']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[[[]]['], [False], [True]], [[']][[[[[[][][[[]]][]'], [False], [True]], [['][[[[[[][[[[]]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], [False], [True]], [['][[][[[[]][[[[]]][][[[[][]][[[[][[[[[]]]]][[[[[]]]'], [False], [True]], [[']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[][[]]['], [False], [True]], [['][][[][]][[[[[]][[][[]][[[[[[]]][['], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]]][[[]][[[]]]]'], [False], [True]], [['[[[][[['], [True], [False]], [['][[][[][][[[[[[[[[[[[[[[]]]]]]]][]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [['][[[[]]]][][][][[][]]][[[][][[]]]]'], [False], [True]], [[']][][[][]][[[[[]]][[[]][[[[[[][]]]'], [False], [True]], [[']][[[[]][][[]][][]][[]['], [False], [True]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]][[[[[][[][[]][[[[]][[]]][][[[[[[]][][][[]]][[][]][[[[[]]]][[][][[]]][[[[[][][]][[[[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[][[[][['], [True], [False]], [[']][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]['], [False], [True]], [[']][[]][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [False], [True]], [[']][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [False], [True]], [['][[[]]]][[[[[[][[[[]][[[]]]]'], [False], [True]], [[']][[]][]][[[[[[]]][[['], [False], [True]], [['][[[]]]][[[[[[][[[[]][[[[][]][][[][]]][[[][]][[]]][[[]]]]'], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][][[][]]][[[][]][[]]]]][['], [False], [True]], [[']][[]][]][[[[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]]][[[]][[['], [False], [True]], [['[[]'], [True], [False]], [[']][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[['], [False], [True]], [[']][[]][]][[[[[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[[]]]][][][][[][][]][[[][]][[]]][[]]][[['], [False], [True]], [['][[[]][[[]][][]][[[][[]]]][[[[[]][][[]]]][][][[]]]]]'], [False], [True]], [[']][[][]][[[[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [['[]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], [False], [True]], [[']][[][]][[[[[]][[[][]][][[][]]]][[][]][[[[[]][[[]][[[]][][[[[]]]][[[]]]][][][[[]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][]]][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[[[[[][]][[]]]]][['], [False], [True]], [[']][[][]][[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [['][[[]][][]]'], [False], [True]], [[']][[]][]][[[[[]][[[]][[[]][][]][[[]]]]][[][]][[[[[]]]][[[][][][][[][]]][[[][]][[]]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[[]]]][[[[[[][[[[]][[[]]]][][][]][[[[[]]][[['], [False], [True]], [[']][[]][]]][[[[[[[]]][[['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]'], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]][[[[[[[]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[][[[]][][]][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[]]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]]]][[[[][[]]][[[[[[[]]][[][]][[[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][[]][]][[[[[[]]][[[[[[]]][[[]'], [False], [True]], [[']][[[]]][[][]][][[[][]][[]]][[][[['], [False], [True]], [[']][[]][]][[]]][[['], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][][[]][[[[]][[[[[[[]]][[['], [False], [True]], [['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[][]][[[[[[[]]][[[][][][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][][]]][[[]][[['], [False], [True]], [[']][[[]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[][[]][[[[[[[]]][[['], [False], [True]], [[']][[[]]]][[[[[[][[[[][[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[][]]]][][][][[][][]][[[[][]][][[][]]][[[][]][[]]]]][['], [False], [True]], [[']][[[]]]][[[[[[][[[[[]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[[[[[[[[[]]][[[]]][[[]]][[[]]]]][[[[[[][[[[]][[[]]]][][]][[[]]]][][][]][[][]]][[[][]]][[]]]][]]][][[][]]]][[]]][[]][[]]]['], [False], [True]], [[']][[][]][[[[[]][[[][[[[]]]][[[]]]][][][[[]][[['], [False], [True]], [[']][[][]][[[[[]]][[[[][[[[[[]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][]]]'], [False], [True]], [[']][[][]][[[[[[[[][]][][[]]]['], [False], [True]], [['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]][[][]][[[[[[]]][[[]][][]]][]]][[][[[[]]]][[[[[[][[[[]]][[[]]]]]]]][[[[[[[][]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[]][]][[]]][[[]][[[['], [False], [True]], [[']][[[][[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][][[[[[][[[][]]][][[][]]][[[][]][[]]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][]][][[[][[]][[]]]['], [False], [True]], [[']][[[][[[[[[]][]][][[][]][][[[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][[][][[][]]][[[][]]][[]]]]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[][[]]][[['], [False], [True]], [[']][[[]]][[][]][][[]][[]][]][[]]][[[[][]][[]]][[][[['], [False], [True]], [[']]][[][]][[[[[]]][[['], [False], [True]], [['][][[][]]][[[][]][[]]][['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][]][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]]], [[['[[]'], [True], [False]], [['[[][]['], [True], [False]], [['[[][[]['], [True], [False]], [[']][[][[[]]]]['], [False], [True]], [[']][[][[]]]]['], [False], [True]], [[']][[][[]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][]][[[]]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][][]][[[]]][[[]'], [False], [True]], [['[][][][][]][[[]]][][]'], [False], [True]], [[']][[][[[]]['], [False], [True]], [['][][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], [False], [True]], [['][[[[[[]]]]][]]][][[[]'], [False], [True]], [['[[[][[]['], [True], [False]], [['][][][][[[[]]]]][[][]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]][]'], [False], [True]], [['[][][][][][[]'], [True], [False]], [['][]]][[]][]'], [False], [True]], [['][][[][[[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [[']][[][[]]]][[[[[[][]]]]]]]][]][]]]][]['], [False], [True]], [['][[[[[[]]]]]][]][[[]][]]]][][]]'], [False], [True]], [['][]][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], [False], [True]], [[']][[][[]]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]]][]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[]][]]]]][][]]]][][[[[[][]]]]]][]'], [False], [True]], [['][][[][[[]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [['][][[][[[]]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [[']][[][][][][][[][][[]]]]['], [False], [True]], [['][[[[[[]][[[]]][]'], [False], [True]], [['][][[][]][[[[[]]][['], [False], [True]], [['][[[[[[]]][[[][[[]]][]'], [False], [True]], [[']][[[[[[]][[[]]][]'], [False], [True]], [['][[[[]]]][][][][[][]]][[[][]][[]]]]'], [False], [True]], [['[[[[[][[[[[[]'], [True], [False]], [['][[][]][[[[[]]][[[[[]]]][[[['], [False], [True]], [['][[[][]][[[[[][]]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['][[[[]][][[]][][]][[[[]]][[[][[[]]][]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[]]][[[[[[[[[[[[[]][[]][[[]][][[[][[]][[[[[]]][[[[[]]]]]]][[[]][[]]]]]][][][][[][]]][[[][]][[][[[[][[[[[]]]]]][[]]]][[[[[['], [False], [True]], [['[[[[]'], [True], [False]], [[']][[[][]][[[[[][[[[[[][[[[[[]]]['], [False], [True]], [['][[[[[[]][[[[]]][][[[[][]][[[[][[[[[]]]][[[[[]]]'], [False], [True]], [['[[][[][][[[[]'], [True], [False]], [['][[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [[']][[[][]][[[[[[]][][[]][][]][][[[[[[][[[[[[]]]['], [False], [True]], [[']][[[][]][[[][[[]][][[]][][]][][[[[[[][[[[[[]]]['], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[[[][][[[[]'], [True], [False]], [['][[[[[][]]'], [False], [True]], [['[[[[][[['], [True], [False]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[[[[][][[[[]'], [True], [False]], [['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]][[[[[]]]][[[['], [False], [True]], [['][[[[[[]][[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]][][[]]]][[[[][[[[[[]][[[]]][][[[[]]][]'], [False], [True]], [[']][[[[]]]][][][][[][]]][[]]'], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[]][[[]]]]'], [False], [True]], [['][[[[[[][[[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['][[]][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [['[]][[[[[[[]]]'], [False], [True]], [['[[][[][][[[[[]'], [True], [False]], [['[[][][][[[[]'], [True], [False]], [['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]]][[[[[]]]][[[['], [False], [True]], [[']][[[[]]][]]['], [False], [True]], [[']][[[[[[]]]][[[[[]'], [False], [True]], [[']][][[][]][[[[[]]][['], [False], [True]], [['[]][]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[[]]]]]]]'], [False], [True]], [['[[[]'], [True], [False]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][][[[[[[]][][][[]]][[][]][[[[[]]]][][][[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [[']][[[]][]][[[[[[]][][[]][][]][][[[[[[][[[[[[[]]]['], [False], [True]], [['][[][[[[[[]][][][[[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]][][[[][]][[[[[][][][[[[][[[[[[][['], [False], [True]], [['][[]]]'], [False], [True]], [['][[[[[[]]][[[][[[]][[[[]]]][][][][[][]]][[[][]]]][[[[[[[[[][[[[[]]]]]][[[[[[][]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], [False], [True]], [[']][[[[]][][[]][][]][[[[]]][[[][[[]]][]['], [False], [True]], [['[]]][][[][]][[[[[]]][[][[[[[[[]]]'], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[][[[]]]]'], [False], [True]], [['][[][[][]]][[[][]]][[]]][[[][[[]]]]'], [False], [True]], [['][[][[[][]]'], [False], [True]], [['[[[[[][[[[[[[]'], [True], [False]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [[']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[[[]]['], [False], [True]], [[']][[[[[[][][[[]]][]'], [False], [True]], [['][[[[[[][[[[]]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], [False], [True]], [['][[][[[[]][[[[]]][][[[[][]][[[[][[[[[]]]]][[[[[]]]'], [False], [True]], [[']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[][[]]['], [False], [True]], [['][][[][]][[[[[]][[][[]][[[[[[]]][['], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]]][[[]][[[]]]]'], [False], [True]], [['[[[][[['], [True], [False]], [['][[][[][][[[[[[[[[[[[[[[]]]]]]]][]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [['][[[[]]]][][][][[][]]][[[][][[]]]]'], [False], [True]], [[']][][[][]][[[[[]]][[[]][[[[[[][]]]'], [False], [True]], [[']][[[[]][][[]][][]][[]['], [False], [True]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]][[[[[][[][[]][[[[]][[]]][][[[[[[]][][][[]]][[][]][[[[[]]]][[][][[]]][[[[[][][]][[[[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[][[[][['], [True], [False]], [[']][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]['], [False], [True]], [[']][[]][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [False], [True]], [[']][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [False], [True]], [['][[[]]]][[[[[[][[[[]][[[]]]]'], [False], [True]], [[']][[]][]][[[[[[]]][[['], [False], [True]], [['][[[]]]][[[[[[][[[[]][[[[][]][][[][]]][[[][]][[]]][[[]]]]'], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][][[][]]][[[][]][[]]]]][['], [False], [True]], [[']][[]][]][[[[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]]][[[]][[['], [False], [True]], [['[[]'], [True], [False]], [[']][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[['], [False], [True]], [[']][[]][]][[[[[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[[]]]][][][][[][][]][[[][]][[]]][[]]][[['], [False], [True]], [['][[[]][[[]][][]][[[][[]]]][[[[[]][][[]]]][][][[]]]]]'], [False], [True]], [[']][[][]][[[[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [['[]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], [False], [True]], [[']][[][]][[[[[]][[[][]][][[][]]]][[][]][[[[[]][[[]][[[]][][[[[]]]][[[]]]][][][[[]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][]]][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[[[[[][]][[]]]]][['], [False], [True]], [[']][[][]][[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [['][[[]][][]]'], [False], [True]], [[']][[]][]][[[[[]][[[]][[[]][][]][[[]]]]][[][]][[[[[]]]][[[][][][][[][]]][[[][]][[]]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[[]]]][[[[[[][[[[]][[[]]]][][][]][[[[[]]][[['], [False], [True]], [[']][[]][]]][[[[[[[]]][[['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]'], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]][[[[[[[]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[][[[]][][]][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[]]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]]]][[[[][[]]][[[[[[[]]][[][]][[[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][[]][]][[[[[[]]][[[[[[]]][[[]'], [False], [True]], [[']][[[]]][[][]][][[[][]][[]]][[][[['], [False], [True]], [[']][[]][]][[]]][[['], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][][[]][[[[]][[[[[[[]]][[['], [False], [True]], [['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[][]][[[[[[[]]][[[][][][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][][]]][[[]][[['], [False], [True]], [[']][[[]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[][[]][[[[[[[]]][[['], [False], [True]], [[']][[[]]]][[[[[[][[[[][[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[][]]]][][][][[][][]][[[[][]][][[][]]][[[][]][[]]]]][['], [False], [True]], [[']][[[]]]][[[[[[][[[[[]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[[[[[[[[[]]][[[]]][[[]]][[[]]]]][[[[[[][[[[]][[[]]]][][]][[[]]]][][][]][[][]]][[[][]]][[]]]][]]][][[][]]]][[]]][[]][[]]]['], [False], [True]], [[']][[][]][[[[[]][[[][[[[]]]][[[]]]][][][[[]][[['], [False], [True]], [[']][[][]][[[[[]]][[[[][[[[[[]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][]]]'], [False], [True]], [[']][[][]][[[[[[[[][]][][[]]]['], [False], [True]], [['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]][[][]][[[[[[]]][[[]][][]]][]]][[][[[[]]]][[[[[[][[[[]]][[[]]]]]]]][[[[[[[][]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[]][]][[]]][[[]][[[['], [False], [True]], [[']][[[][[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][][[[[[][[[][]]][][[][]]][[[][]][[]]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][]][][[[][[]][[]]]['], [False], [True]], [[']][[[][[[[[[]][]][][[][]][][[[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][[][][[][]]][[[][]]][[]]]]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[][[]]][[['], [False], [True]], [[']][[[]]][[][]][][[]][[]][]][[]]][[[[][]][[]]][[][[['], [False], [True]], [[']]][[][]][[[[[]]][[['], [False], [True]], [['][][[][]]][[[][]][[]]][['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][]][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]]], [[['[[]'], [True], [False]], [['[[][]['], [True], [False]], [['[[][[]['], [True], [False]], [[']][[][[[]]]]['], [False], [True]], [[']][[][[]]]]['], [False], [True]], [[']][[][[]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][]][[[]]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][][]][[[]]][[[]'], [False], [True]], [['[][][][][]][[[]]][][]'], [False], [True]], [[']][[][[[]]['], [False], [True]], [['][][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], [False], [True]], [['][[[[[[]]]]][]]][][[[]'], [False], [True]], [['[[[][[]['], [True], [False]], [['][][][][[[[]]]]][[][]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]][]'], [False], [True]], [['[][][][][][[]'], [True], [False]], [['][]]][[]][]'], [False], [True]], [['][][[][[[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [[']][[][[]]]][[[[[[][]]]]]]]][]][]]]][]['], [False], [True]], [['][[[[[[]]]]]][]][[[]][]]]][][]]'], [False], [True]], [['][]][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], [False], [True]], [[']][[][[]]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]]][]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[]][]]]]][][]]]][][[[[[][]]]]]][]'], [False], [True]], [['][][[][[[]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [['][][[][[[]]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [[']][[][][][][][[][][[]]]]['], [False], [True]], [['][[[[[[]][[[]]][]'], [False], [True]], [['][][[][]][[[[[]]][['], [False], [True]], [['][[[[[[]]][[[][[[]]][]'], [False], [True]], [[']][[[[[[]][[[]]][]'], [False], [True]], [['][[[[]]]][][][][[][]]][[[][]][[]]]]'], [False], [True]], [['[[[[[][[[[[[]'], [True], [False]], [['][[][]][[[[[]]][[[[[]]]][[[['], [False], [True]], [['][[[][]][[[[[][]]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['][[[[]][][[]][][]][[[[]]][[[][[[]]][]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[]]][[[[[[[[[[[[[]][[]][[[]][][[[][[]][[[[[]]][[[[[]]]]]]][[[]][[]]]]]][][][][[][]]][[[][]][[][[[[][[[[[]]]]]][[]]]][[[[[['], [False], [True]], [['[[[[]'], [True], [False]], [[']][[[][]][[[[[][[[[[[][[[[[[]]]['], [False], [True]], [['][[[[[[]][[[[]]][][[[[][]][[[[][[[[[]]]][[[[[]]]'], [False], [True]], [['[[][[][][[[[]'], [True], [False]], [['][[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [[']][[[][]][[[[[[]][][[]][][]][][[[[[[][[[[[[]]]['], [False], [True]], [[']][[[][]][[[][[[]][][[]][][]][][[[[[[][[[[[[]]]['], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[[[][][[[[]'], [True], [False]], [['][[[[[][]]'], [False], [True]], [['[[[[][[['], [True], [False]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[[[[][][[[[]'], [True], [False]], [['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]][[[[[]]]][[[['], [False], [True]], [['][[[[[[]][[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]][][[]]]][[[[][[[[[[]][[[]]][][[[[]]][]'], [False], [True]], [[']][[[[]]]][][][][[][]]][[]]'], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[]][[[]]]]'], [False], [True]], [['][[[[[[][[[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['][[]][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [['[]][[[[[[[]]]'], [False], [True]], [['[[][[][][[[[[]'], [True], [False]], [['[[][][][[[[]'], [True], [False]], [['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]]][[[[[]]]][[[['], [False], [True]], [[']][[[[]]][]]['], [False], [True]], [[']][[[[[[]]]][[[[[]'], [False], [True]], [[']][][[][]][[[[[]]][['], [False], [True]], [['[]][]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[[]]]]]]]'], [False], [True]], [['[[[]'], [True], [False]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][][[[[[[]][][][[]]][[][]][[[[[]]]][][][[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [[']][[[]][]][[[[[[]][][[]][][]][][[[[[[][[[[[[[]]]['], [False], [True]], [['][[][[[[[[]][][][[[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]][][[[][]][[[[[][][][[[[][[[[[[][['], [False], [True]], [['][[]]]'], [False], [True]], [['][[[[[[]]][[[][[[]][[[[]]]][][][][[][]]][[[][]]]][[[[[[[[[][[[[[]]]]]][[[[[[][]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], [False], [True]], [[']][[[[]][][[]][][]][[[[]]][[[][[[]]][]['], [False], [True]], [['[]]][][[][]][[[[[]]][[][[[[[[[]]]'], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[][[[]]]]'], [False], [True]], [['][[][[][]]][[[][]]][[]]][[[][[[]]]]'], [False], [True]], [['][[][[[][]]'], [False], [True]], [['[[[[[][[[[[[[]'], [True], [False]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [[']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[[[]]['], [False], [True]], [[']][[[[[[][][[[]]][]'], [False], [True]], [['][[[[[[][[[[]]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], [False], [True]], [['][[][[[[]][[[[]]][][[[[][]][[[[][[[[[]]]]][[[[[]]]'], [False], [True]], [[']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[][[]]['], [False], [True]], [['][][[][]][[[[[]][[][[]][[[[[[]]][['], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]]][[[]][[[]]]]'], [False], [True]], [['[[[][[['], [True], [False]], [['][[][[][][[[[[[[[[[[[[[[]]]]]]]][]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [['][[[[]]]][][][][[][]]][[[][][[]]]]'], [False], [True]], [[']][][[][]][[[[[]]][[[]][[[[[[][]]]'], [False], [True]], [[']][[[[]][][[]][][]][[]['], [False], [True]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]][[[[[][[][[]][[[[]][[]]][][[[[[[]][][][[]]][[][]][[[[[]]]][[][][[]]][[[[[][][]][[[[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[][[[][['], [True], [False]], [[']][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]['], [False], [True]], [[']][[]][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [False], [True]], [[']][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [False], [True]], [['][[[]]]][[[[[[][[[[]][[[]]]]'], [False], [True]], [[']][[]][]][[[[[[]]][[['], [False], [True]], [['][[[]]]][[[[[[][[[[]][[[[][]][][[][]]][[[][]][[]]][[[]]]]'], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][][[][]]][[[][]][[]]]]][['], [False], [True]], [[']][[]][]][[[[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]]][[[]][[['], [False], [True]], [['[[]'], [True], [False]], [[']][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[['], [False], [True]], [[']][[]][]][[[[[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[[]]]][][][][[][][]][[[][]][[]]][[]]][[['], [False], [True]], [['][[[]][[[]][][]][[[][[]]]][[[[[]][][[]]]][][][[]]]]]'], [False], [True]], [[']][[][]][[[[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [['[]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], [False], [True]], [[']][[][]][[[[[]][[[][]][][[][]]]][[][]][[[[[]][[[]][[[]][][[[[]]]][[[]]]][][][[[]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][]]][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[[[[[][]][[]]]]][['], [False], [True]], [[']][[][]][[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [['][[[]][][]]'], [False], [True]], [[']][[]][]][[[[[]][[[]][[[]][][]][[[]]]]][[][]][[[[[]]]][[[][][][][[][]]][[[][]][[]]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[[]]]][[[[[[][[[[]][[[]]]][][][]][[[[[]]][[['], [False], [True]], [[']][[]][]]][[[[[[[]]][[['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]'], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]][[[[[[[]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[][[[]][][]][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[]]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]]]][[[[][[]]][[[[[[[]]][[][]][[[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][[]][]][[[[[[]]][[[[[[]]][[[]'], [False], [True]], [[']][[[]]][[][]][][[[][]][[]]][[][[['], [False], [True]], [[']][[]][]][[]]][[['], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][][[]][[[[]][[[[[[[]]][[['], [False], [True]], [['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[][]][[[[[[[]]][[[][][][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][][]]][[[]][[['], [False], [True]], [[']][[[]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[][[]][[[[[[[]]][[['], [False], [True]], [[']][[[]]]][[[[[[][[[[][[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[][]]]][][][][[][][]][[[[][]][][[][]]][[[][]][[]]]]][['], [False], [True]], [[']][[[]]]][[[[[[][[[[[]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[[[[[[[[[]]][[[]]][[[]]][[[]]]]][[[[[[][[[[]][[[]]]][][]][[[]]]][][][]][[][]]][[[][]]][[]]]][]]][][[][]]]][[]]][[]][[]]]['], [False], [True]], [[']][[][]][[[[[]][[[][[[[]]]][[[]]]][][][[[]][[['], [False], [True]], [[']][[][]][[[[[]]][[[[][[[[[[]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][]]]'], [False], [True]], [[']][[][]][[[[[[[[][]][][[]]]['], [False], [True]], [['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]][[][]][[[[[[]]][[[]][][]]][]]][[][[[[]]]][[[[[[][[[[]]][[[]]]]]]]][[[[[[[][]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[]][]][[]]][[[]][[[['], [False], [True]], [[']][[[][[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][][[[[[][[[][]]][][[][]]][[[][]][[]]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][]][][[[][[]][[]]]['], [False], [True]], [[']][[[][[[[[[]][]][][[][]][][[[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][[][][[][]]][[[][]]][[]]]]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[][[]]][[['], [False], [True]], [[']][[[]]][[][]][][[]][[]][]][[]]][[[[][]][[]]][[][[['], [False], [True]], [[']]][[][]][[[[[]]][[['], [False], [True]], [['][][[][]]][[[][]][[]]][['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][]][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]]], [[['[[]'], [True], [False]], [['[[][]['], [True], [False]], [['[[][[]['], [True], [False]], [[']][[][[[]]]]['], [False], [True]], [[']][[][[]]]]['], [False], [True]], [[']][[][[]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][]][[[]]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][][]][[[]]][[[]'], [False], [True]], [['[][][][][]][[[]]][][]'], [False], [True]], [[']][[][[[]]['], [False], [True]], [['][][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], [False], [True]], [['][[[[[[]]]]][]]][][[[]'], [False], [True]], [['[[[][[]['], [True], [False]], [['][][][][[[[]]]]][[][]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]][]'], [False], [True]], [['[][][][][][[]'], [True], [False]], [['][]]][[]][]'], [False], [True]], [['][][[][[[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [[']][[][[]]]][[[[[[][]]]]]]]][]][]]]][]['], [False], [True]], [['][[[[[[]]]]]][]][[[]][]]]][][]]'], [False], [True]], [['][]][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], [False], [True]], [[']][[][[]]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]]][]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[]][]]]]][][]]]][][[[[[][]]]]]][]'], [False], [True]], [['][][[][[[]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [['][][[][[[]]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [[']][[][][][][][[][][[]]]]['], [False], [True]], [['][[[[[[]][[[]]][]'], [False], [True]], [['][][[][]][[[[[]]][['], [False], [True]], [['][[[[[[]]][[[][[[]]][]'], [False], [True]], [[']][[[[[[]][[[]]][]'], [False], [True]], [['][[[[]]]][][][][[][]]][[[][]][[]]]]'], [False], [True]], [['[[[[[][[[[[[]'], [True], [False]], [['][[][]][[[[[]]][[[[[]]]][[[['], [False], [True]], [['][[[][]][[[[[][]]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['][[[[]][][[]][][]][[[[]]][[[][[[]]][]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[]]][[[[[[[[[[[[[]][[]][[[]][][[[][[]][[[[[]]][[[[[]]]]]]][[[]][[]]]]]][][][][[][]]][[[][]][[][[[[][[[[[]]]]]][[]]]][[[[[['], [False], [True]], [['[[[[]'], [True], [False]], [[']][[[][]][[[[[][[[[[[][[[[[[]]]['], [False], [True]], [['][[[[[[]][[[[]]][][[[[][]][[[[][[[[[]]]][[[[[]]]'], [False], [True]], [['[[][[][][[[[]'], [True], [False]], [['][[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [[']][[[][]][[[[[[]][][[]][][]][][[[[[[][[[[[[]]]['], [False], [True]], [[']][[[][]][[[][[[]][][[]][][]][][[[[[[][[[[[[]]]['], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[[[][][[[[]'], [True], [False]], [['][[[[[][]]'], [False], [True]], [['[[[[][[['], [True], [False]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[[[[][][[[[]'], [True], [False]], [['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]][[[[[]]]][[[['], [False], [True]], [['][[[[[[]][[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]][][[]]]][[[[][[[[[[]][[[]]][][[[[]]][]'], [False], [True]], [[']][[[[]]]][][][][[][]]][[]]'], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[]][[[]]]]'], [False], [True]], [['][[[[[[][[[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['][[]][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [['[]][[[[[[[]]]'], [False], [True]], [['[[][[][][[[[[]'], [True], [False]], [['[[][][][[[[]'], [True], [False]], [['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]]][[[[[]]]][[[['], [False], [True]], [[']][[[[]]][]]['], [False], [True]], [[']][[[[[[]]]][[[[[]'], [False], [True]], [[']][][[][]][[[[[]]][['], [False], [True]], [['[]][]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[[]]]]]]]'], [False], [True]], [['[[[]'], [True], [False]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][][[[[[[]][][][[]]][[][]][[[[[]]]][][][[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [[']][[[]][]][[[[[[]][][[]][][]][][[[[[[][[[[[[[]]]['], [False], [True]], [['][[][[[[[[]][][][[[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]][][[[][]][[[[[][][][[[[][[[[[[][['], [False], [True]], [['][[]]]'], [False], [True]], [['][[[[[[]]][[[][[[]][[[[]]]][][][][[][]]][[[][]]]][[[[[[[[[][[[[[]]]]]][[[[[[][]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], [False], [True]], [[']][[[[]][][[]][][]][[[[]]][[[][[[]]][]['], [False], [True]], [['[]]][][[][]][[[[[]]][[][[[[[[[]]]'], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[][[[]]]]'], [False], [True]], [['][[][[][]]][[[][]]][[]]][[[][[[]]]]'], [False], [True]], [['][[][[[][]]'], [False], [True]], [['[[[[[][[[[[[[]'], [True], [False]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [[']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[[[]]['], [False], [True]], [[']][[[[[[][][[[]]][]'], [False], [True]], [['][[[[[[][[[[]]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], [False], [True]], [['][[][[[[]][[[[]]][][[[[][]][[[[][[[[[]]]]][[[[[]]]'], [False], [True]], [[']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[][[]]['], [False], [True]], [['][][[][]][[[[[]][[][[]][[[[[[]]][['], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]]][[[]][[[]]]]'], [False], [True]], [['[[[][[['], [True], [False]], [['][[][[][][[[[[[[[[[[[[[[]]]]]]]][]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [['][[[[]]]][][][][[][]]][[[][][[]]]]'], [False], [True]], [[']][][[][]][[[[[]]][[[]][[[[[[][]]]'], [False], [True]], [[']][[[[]][][[]][][]][[]['], [False], [True]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]][[[[[][[][[]][[[[]][[]]][][[[[[[]][][][[]]][[][]][[[[[]]]][[][][[]]][[[[[][][]][[[[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[][[[][['], [True], [False]], [[']][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]['], [False], [True]], [[']][[]][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [False], [True]], [[']][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [False], [True]], [['][[[]]]][[[[[[][[[[]][[[]]]]'], [False], [True]], [[']][[]][]][[[[[[]]][[['], [False], [True]], [['][[[]]]][[[[[[][[[[]][[[[][]][][[][]]][[[][]][[]]][[[]]]]'], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][][[][]]][[[][]][[]]]]][['], [False], [True]], [[']][[]][]][[[[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]]][[[]][[['], [False], [True]], [['[[]'], [True], [False]], [[']][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[['], [False], [True]], [[']][[]][]][[[[[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[[]]]][][][][[][][]][[[][]][[]]][[]]][[['], [False], [True]], [['][[[]][[[]][][]][[[][[]]]][[[[[]][][[]]]][][][[]]]]]'], [False], [True]], [[']][[][]][[[[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [['[]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], [False], [True]], [[']][[][]][[[[[]][[[][]][][[][]]]][[][]][[[[[]][[[]][[[]][][[[[]]]][[[]]]][][][[[]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][]]][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[[[[[][]][[]]]]][['], [False], [True]], [[']][[][]][[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [['][[[]][][]]'], [False], [True]], [[']][[]][]][[[[[]][[[]][[[]][][]][[[]]]]][[][]][[[[[]]]][[[][][][][[][]]][[[][]][[]]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[[]]]][[[[[[][[[[]][[[]]]][][][]][[[[[]]][[['], [False], [True]], [[']][[]][]]][[[[[[[]]][[['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]'], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]][[[[[[[]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[][[[]][][]][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[]]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]]]][[[[][[]]][[[[[[[]]][[][]][[[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][[]][]][[[[[[]]][[[[[[]]][[[]'], [False], [True]], [[']][[[]]][[][]][][[[][]][[]]][[][[['], [False], [True]], [[']][[]][]][[]]][[['], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][][[]][[[[]][[[[[[[]]][[['], [False], [True]], [['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[][]][[[[[[[]]][[[][][][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][][]]][[[]][[['], [False], [True]], [[']][[[]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[][[]][[[[[[[]]][[['], [False], [True]], [[']][[[]]]][[[[[[][[[[][[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[][]]]][][][][[][][]][[[[][]][][[][]]][[[][]][[]]]]][['], [False], [True]], [[']][[[]]]][[[[[[][[[[[]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[[[[[[[[[]]][[[]]][[[]]][[[]]]]][[[[[[][[[[]][[[]]]][][]][[[]]]][][][]][[][]]][[[][]]][[]]]][]]][][[][]]]][[]]][[]][[]]]['], [False], [True]], [[']][[][]][[[[[]][[[][[[[]]]][[[]]]][][][[[]][[['], [False], [True]], [[']][[][]][[[[[]]][[[[][[[[[[]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][]]]'], [False], [True]], [[']][[][]][[[[[[[[][]][][[]]]['], [False], [True]], [['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]][[][]][[[[[[]]][[[]][][]]][]]][[][[[[]]]][[[[[[][[[[]]][[[]]]]]]]][[[[[[[][]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[]][]][[]]][[[]][[[['], [False], [True]], [[']][[[][[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][][[[[[][[[][]]][][[][]]][[[][]][[]]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][]][][[[][[]][[]]]['], [False], [True]], [[']][[[][[[[[[]][]][][[][]][][[[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][[][][[][]]][[[][]]][[]]]]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[][[]]][[['], [False], [True]], [[']][[[]]][[][]][][[]][[]][]][[]]][[[[][]][[]]][[][[['], [False], [True]], [[']]][[][]][[[[[]]][[['], [False], [True]], [['][][[][]]][[[][]][[]]][['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][]][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]]], [[['[[]'], [True], [False]], [['[[][]['], [True], [False]], [['[[][[]['], [True], [False]], [[']][[][[[]]]]['], [False], [True]], [[']][[][[]]]]['], [False], [True]], [[']][[][[]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][]][[[]]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][][]][[[]]][[[]'], [False], [True]], [['[][][][][]][[[]]][][]'], [False], [True]], [[']][[][[[]]['], [False], [True]], [['][][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], [False], [True]], [['][[[[[[]]]]][]]][][[[]'], [False], [True]], [['[[[][[]['], [True], [False]], [['][][][][[[[]]]]][[][]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]][]'], [False], [True]], [['[][][][][][[]'], [True], [False]], [['][]]][[]][]'], [False], [True]], [['][][[][[[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [[']][[][[]]]][[[[[[][]]]]]]]][]][]]]][]['], [False], [True]], [['][[[[[[]]]]]][]][[[]][]]]][][]]'], [False], [True]], [['][]][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], [False], [True]], [[']][[][[]]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]]][]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[]][]]]]][][]]]][][[[[[][]]]]]][]'], [False], [True]], [['][][[][[[]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [['][][[][[[]]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [[']][[][][][][][[][][[]]]]['], [False], [True]], [['][[[[[[]][[[]]][]'], [False], [True]], [['][][[][]][[[[[]]][['], [False], [True]], [['][[[[[[]]][[[][[[]]][]'], [False], [True]], [[']][[[[[[]][[[]]][]'], [False], [True]], [['][[[[]]]][][][][[][]]][[[][]][[]]]]'], [False], [True]], [['[[[[[][[[[[[]'], [True], [False]], [['][[][]][[[[[]]][[[[[]]]][[[['], [False], [True]], [['][[[][]][[[[[][]]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['][[[[]][][[]][][]][[[[]]][[[][[[]]][]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[]]][[[[[[[[[[[[[]][[]][[[]][][[[][[]][[[[[]]][[[[[]]]]]]][[[]][[]]]]]][][][][[][]]][[[][]][[][[[[][[[[[]]]]]][[]]]][[[[[['], [False], [True]], [['[[[[]'], [True], [False]], [[']][[[][]][[[[[][[[[[[][[[[[[]]]['], [False], [True]], [['][[[[[[]][[[[]]][][[[[][]][[[[][[[[[]]]][[[[[]]]'], [False], [True]], [['[[][[][][[[[]'], [True], [False]], [['][[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [[']][[[][]][[[[[[]][][[]][][]][][[[[[[][[[[[[]]]['], [False], [True]], [[']][[[][]][[[][[[]][][[]][][]][][[[[[[][[[[[[]]]['], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[[[][][[[[]'], [True], [False]], [['][[[[[][]]'], [False], [True]], [['[[[[][[['], [True], [False]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[[[[][][[[[]'], [True], [False]], [['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]][[[[[]]]][[[['], [False], [True]], [['][[[[[[]][[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]][][[]]]][[[[][[[[[[]][[[]]][][[[[]]][]'], [False], [True]], [[']][[[[]]]][][][][[][]]][[]]'], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[]][[[]]]]'], [False], [True]], [['][[[[[[][[[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['][[]][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [['[]][[[[[[[]]]'], [False], [True]], [['[[][[][][[[[[]'], [True], [False]], [['[[][][][[[[]'], [True], [False]], [['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]]][[[[[]]]][[[['], [False], [True]], [[']][[[[]]][]]['], [False], [True]], [[']][[[[[[]]]][[[[[]'], [False], [True]], [[']][][[][]][[[[[]]][['], [False], [True]], [['[]][]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[[]]]]]]]'], [False], [True]], [['[[[]'], [True], [False]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][][[[[[[]][][][[]]][[][]][[[[[]]]][][][[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [[']][[[]][]][[[[[[]][][[]][][]][][[[[[[][[[[[[[]]]['], [False], [True]], [['][[][[[[[[]][][][[[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]][][[[][]][[[[[][][][[[[][[[[[[][['], [False], [True]], [['][[]]]'], [False], [True]], [['][[[[[[]]][[[][[[]][[[[]]]][][][][[][]]][[[][]]]][[[[[[[[[][[[[[]]]]]][[[[[[][]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], [False], [True]], [[']][[[[]][][[]][][]][[[[]]][[[][[[]]][]['], [False], [True]], [['[]]][][[][]][[[[[]]][[][[[[[[[]]]'], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[][[[]]]]'], [False], [True]], [['][[][[][]]][[[][]]][[]]][[[][[[]]]]'], [False], [True]], [['][[][[[][]]'], [False], [True]], [['[[[[[][[[[[[[]'], [True], [False]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [[']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[[[]]['], [False], [True]], [[']][[[[[[][][[[]]][]'], [False], [True]], [['][[[[[[][[[[]]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], [False], [True]], [['][[][[[[]][[[[]]][][[[[][]][[[[][[[[[]]]]][[[[[]]]'], [False], [True]], [[']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[][[]]['], [False], [True]], [['][][[][]][[[[[]][[][[]][[[[[[]]][['], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]]][[[]][[[]]]]'], [False], [True]], [['[[[][[['], [True], [False]], [['][[][[][][[[[[[[[[[[[[[[]]]]]]]][]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [['][[[[]]]][][][][[][]]][[[][][[]]]]'], [False], [True]], [[']][][[][]][[[[[]]][[[]][[[[[[][]]]'], [False], [True]], [[']][[[[]][][[]][][]][[]['], [False], [True]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]][[[[[][[][[]][[[[]][[]]][][[[[[[]][][][[]]][[][]][[[[[]]]][[][][[]]][[[[[][][]][[[[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[][[[][['], [True], [False]], [[']][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]['], [False], [True]], [[']][[]][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [False], [True]], [[']][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [False], [True]], [['][[[]]]][[[[[[][[[[]][[[]]]]'], [False], [True]], [[']][[]][]][[[[[[]]][[['], [False], [True]], [['][[[]]]][[[[[[][[[[]][[[[][]][][[][]]][[[][]][[]]][[[]]]]'], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][][[][]]][[[][]][[]]]]][['], [False], [True]], [[']][[]][]][[[[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]]][[[]][[['], [False], [True]], [['[[]'], [True], [False]], [[']][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[['], [False], [True]], [[']][[]][]][[[[[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[[]]]][][][][[][][]][[[][]][[]]][[]]][[['], [False], [True]], [['][[[]][[[]][][]][[[][[]]]][[[[[]][][[]]]][][][[]]]]]'], [False], [True]], [[']][[][]][[[[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [['[]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], [False], [True]], [[']][[][]][[[[[]][[[][]][][[][]]]][[][]][[[[[]][[[]][[[]][][[[[]]]][[[]]]][][][[[]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][]]][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[[[[[][]][[]]]]][['], [False], [True]], [[']][[][]][[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [['][[[]][][]]'], [False], [True]], [[']][[]][]][[[[[]][[[]][[[]][][]][[[]]]]][[][]][[[[[]]]][[[][][][][[][]]][[[][]][[]]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[[]]]][[[[[[][[[[]][[[]]]][][][]][[[[[]]][[['], [False], [True]], [[']][[]][]]][[[[[[[]]][[['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]'], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]][[[[[[[]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[][[[]][][]][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[]]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]]]][[[[][[]]][[[[[[[]]][[][]][[[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][[]][]][[[[[[]]][[[[[[]]][[[]'], [False], [True]], [[']][[[]]][[][]][][[[][]][[]]][[][[['], [False], [True]], [[']][[]][]][[]]][[['], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][][[]][[[[]][[[[[[[]]][[['], [False], [True]], [['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[][]][[[[[[[]]][[[][][][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][][]]][[[]][[['], [False], [True]], [[']][[[]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[][[]][[[[[[[]]][[['], [False], [True]], [[']][[[]]]][[[[[[][[[[][[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[][]]]][][][][[][][]][[[[][]][][[][]]][[[][]][[]]]]][['], [False], [True]], [[']][[[]]]][[[[[[][[[[[]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[[[[[[[[[]]][[[]]][[[]]][[[]]]]][[[[[[][[[[]][[[]]]][][]][[[]]]][][][]][[][]]][[[][]]][[]]]][]]][][[][]]]][[]]][[]][[]]]['], [False], [True]], [[']][[][]][[[[[]][[[][[[[]]]][[[]]]][][][[[]][[['], [False], [True]], [[']][[][]][[[[[]]][[[[][[[[[[]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][]]]'], [False], [True]], [[']][[][]][[[[[[[[][]][][[]]]['], [False], [True]], [['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]][[][]][[[[[[]]][[[]][][]]][]]][[][[[[]]]][[[[[[][[[[]]][[[]]]]]]]][[[[[[[][]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[]][]][[]]][[[]][[[['], [False], [True]], [[']][[[][[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][][[[[[][[[][]]][][[][]]][[[][]][[]]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][]][][[[][[]][[]]]['], [False], [True]], [[']][[[][[[[[[]][]][][[][]][][[[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][[][][[][]]][[[][]]][[]]]]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[][[]]][[['], [False], [True]], [[']][[[]]][[][]][][[]][[]][]][[]]][[[[][]][[]]][[][[['], [False], [True]], [[']]][[][]][[[[[]]][[['], [False], [True]], [['][][[][]]][[[][]][[]]][['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][]][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]]], [[['[[]'], [True], [False]], [['[[][]['], [True], [False]], [['[[][[]['], [True], [False]], [[']][[][[[]]]]['], [False], [True]], [[']][[][[]]]]['], [False], [True]], [[']][[][[]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][]][[[]]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][][]][[[]]][[[]'], [False], [True]], [['[][][][][]][[[]]][][]'], [False], [True]], [[']][[][[[]]['], [False], [True]], [['][][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], [False], [True]], [['][[[[[[]]]]][]]][][[[]'], [False], [True]], [['[[[][[]['], [True], [False]], [['][][][][[[[]]]]][[][]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]][]'], [False], [True]], [['[][][][][][[]'], [True], [False]], [['][]]][[]][]'], [False], [True]], [['][][[][[[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [[']][[][[]]]][[[[[[][]]]]]]]][]][]]]][]['], [False], [True]], [['][[[[[[]]]]]][]][[[]][]]]][][]]'], [False], [True]], [['][]][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], [False], [True]], [[']][[][[]]]]][[[[[[][]]]]][][]]]][]['], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]]][]'], [False], [True]], [['][]][[[][]]]]]][[][[]]]][[[[[[]][]]]]][][]]]][][[[[[][]]]]]][]'], [False], [True]], [['][][[][[[]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [['][][[][[[]]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [False], [True]], [[']][[][][][][][[][][[]]]]['], [False], [True]], [['][[[[[[]][[[]]][]'], [False], [True]], [['][][[][]][[[[[]]][['], [False], [True]], [['][[[[[[]]][[[][[[]]][]'], [False], [True]], [[']][[[[[[]][[[]]][]'], [False], [True]], [['][[[[]]]][][][][[][]]][[[][]][[]]]]'], [False], [True]], [['[[[[[][[[[[[]'], [True], [False]], [['][[][]][[[[[]]][[[[[]]]][[[['], [False], [True]], [['][[[][]][[[[[][]]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['][[[[]][][[]][][]][[[[]]][[[][[[]]][]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[]]][[[[[[[[[[[[[]][[]][[[]][][[[][[]][[[[[]]][[[[[]]]]]]][[[]][[]]]]]][][][][[][]]][[[][]][[][[[[][[[[[]]]]]][[]]]][[[[[['], [False], [True]], [['[[[[]'], [True], [False]], [[']][[[][]][[[[[][[[[[[][[[[[[]]]['], [False], [True]], [['][[[[[[]][[[[]]][][[[[][]][[[[][[[[[]]]][[[[[]]]'], [False], [True]], [['[[][[][][[[[]'], [True], [False]], [['][[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [[']][[[][]][[[[[[]][][[]][][]][][[[[[[][[[[[[]]]['], [False], [True]], [[']][[[][]][[[][[[]][][[]][][]][][[[[[[][[[[[[]]]['], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[[[][][[[[]'], [True], [False]], [['][[[[[][]]'], [False], [True]], [['[[[[][[['], [True], [False]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[[[[][][[[[]'], [True], [False]], [['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]][[[[[]]]][[[['], [False], [True]], [['][[[[[[]][[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]][][[]]]][[[[][[[[[[]][[[]]][][[[[]]][]'], [False], [True]], [[']][[[[]]]][][][][[][]]][[]]'], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[]][[[]]]]'], [False], [True]], [['][[[[[[][[[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['][[]][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [['[]][[[[[[[]]]'], [False], [True]], [['[[][[][][[[[[]'], [True], [False]], [['[[][][][[[[]'], [True], [False]], [['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]]][[[[[]]]][[[['], [False], [True]], [[']][[[[]]][]]['], [False], [True]], [[']][[[[[[]]]][[[[[]'], [False], [True]], [[']][][[][]][[[[[]]][['], [False], [True]], [['[]][]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[[]]]]]]]'], [False], [True]], [['[[[]'], [True], [False]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][][[[[[[]][][][[]]][[][]][[[[[]]]][][][[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [[']][[[]][]][[[[[[]][][[]][][]][][[[[[[][[[[[[[]]]['], [False], [True]], [['][[][[[[[[]][][][[[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]][][[[][]][[[[[][][][[[[][[[[[[][['], [False], [True]], [['][[]]]'], [False], [True]], [['][[[[[[]]][[[][[[]][[[[]]]][][][][[][]]][[[][]]]][[[[[[[[[][[[[[]]]]]][[[[[[][]'], [False], [True]], [['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], [False], [True]], [[']][[[[]][][[]][][]][[[[]]][[[][[[]]][]['], [False], [True]], [['[]]][][[][]][[[[[]]][[][[[[[[[]]]'], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[][[[]]]]'], [False], [True]], [['][[][[][]]][[[][]]][[]]][[[][[[]]]]'], [False], [True]], [['][[][[[][]]'], [False], [True]], [['[[[[[][[[[[[[]'], [True], [False]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [[']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[[[]]['], [False], [True]], [[']][[[[[[][][[[]]][]'], [False], [True]], [['][[[[[[][[[[]]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], [False], [True]], [['][[][[[[]][[[[]]][][[[[][]][[[[][[[[[]]]]][[[[[]]]'], [False], [True]], [[']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[][[]]['], [False], [True]], [['][][[][]][[[[[]][[][[]][[[[[[]]][['], [False], [True]], [['][[[][[]]]][][][][[][]]][[[][]]][[]]]][[[]][[[]]]]'], [False], [True]], [['[[[][[['], [True], [False]], [['][[][[][][[[[[[[[[[[[[[[]]]]]]]][]][[[[][[[[[[]]]]]]][[[]]]'], [False], [True]], [['][[[[]]]][][][][[][]]][[[][][[]]]]'], [False], [True]], [[']][][[][]][[[[[]]][[[]][[[[[[][]]]'], [False], [True]], [[']][[[[]][][[]][][]][[]['], [False], [True]], [['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]][[[[[][[][[]][[[[]][[]]][][[[[[[]][][][[]]][[][]][[[[[]]]][[][][[]]][[[[[][][]][[[[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [False], [True]], [['[][[[][['], [True], [False]], [[']][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]['], [False], [True]], [[']][[]][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [False], [True]], [[']][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [False], [True]], [['][[[]]]][[[[[[][[[[]][[[]]]]'], [False], [True]], [[']][[]][]][[[[[[]]][[['], [False], [True]], [['][[[]]]][[[[[[][[[[]][[[[][]][][[][]]][[[][]][[]]][[[]]]]'], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][][[][]]][[[][]][[]]]]][['], [False], [True]], [[']][[]][]][[[[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]]][[[]][[['], [False], [True]], [['[[]'], [True], [False]], [[']][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[['], [False], [True]], [[']][[]][]][[[[[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[[]]]][][][][[][][]][[[][]][[]]][[]]][[['], [False], [True]], [['][[[]][[[]][][]][[[][[]]]][[[[[]][][[]]]][][][[]]]]]'], [False], [True]], [[']][[][]][[[[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [['[]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], [False], [True]], [[']][[][]][[[[[]][[[][]][][[][]]]][[][]][[[[[]][[[]][[[]][][[[[]]]][[[]]]][][][[[]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][]]][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[[[[[][]][[]]]]][['], [False], [True]], [[']][[][]][[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], [False], [True]], [['][[[]][][]]'], [False], [True]], [[']][[]][]][[[[[]][[[]][[[]][][]][[[]]]]][[][]][[[[[]]]][[[][][][][[][]]][[[][]][[]]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[[]]]][[[[[[][[[[]][[[]]]][][][]][[[[[]]][[['], [False], [True]], [[']][[]][]]][[[[[[[]]][[['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]'], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]][[[[[[[]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[][[[]][][]][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[]]]][[['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]]]][[[[][[]]][[[[[[[]]][[][]][[[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][[]][]][[[[[[]]][[[[[[]]][[[]'], [False], [True]], [[']][[[]]][[][]][][[[][]][[]]][[][[['], [False], [True]], [[']][[]][]][[]]][[['], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][][[]][[[[]][[[[[[[]]][[['], [False], [True]], [['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[][]][[[[[[[]]][[[][][][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][][]]][[[]][[['], [False], [True]], [[']][[[]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[][[]][[[[[[[]]][[['], [False], [True]], [[']][[[]]]][[[[[[][[[[][[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][]][[[[[]][[[]][[[]][][]][[][]]]][][][][[][][]][[[[][]][][[][]]][[[][]][[]]]]][['], [False], [True]], [[']][[[]]]][[[[[[][[[[[]][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][][][[[[[[[[][]][][[][]]][[[][[[[[[[[[[]]][[[]]][[[]]][[[]]]]][[[[[[][[[[]][[[]]]][][]][[[]]]][][][]][[][]]][[[][]]][[]]]][]]][][[][]]]][[]]][[]][[]]]['], [False], [True]], [[']][[][]][[[[[]][[[][[[[]]]][[[]]]][][][[[]][[['], [False], [True]], [[']][[][]][[[[[]]][[[[][[[[[[]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][]]]'], [False], [True]], [[']][[][]][[[[[[[[][]][][[]]]['], [False], [True]], [['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]][[][]][[[[[[]]][[[]][][]]][]]][[][[[[]]]][[[[[[][[[[]]][[[]]]]]]]][[[[[[[][]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [[']][[]][]][[]]][[[]][[[['], [False], [True]], [[']][[[][[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], [False], [True]], [[']][[][][[[[[][[[][]]][][[][]]][[[][]][[]]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][]][][[[][[]][[]]]['], [False], [True]], [[']][[[][[[[[[]][]][][[][]][][[[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][[][][[][]]][[[][]]][[]]]]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[][[]]][[['], [False], [True]], [[']][[[]]][[][]][][[]][[]][]][[]]][[[[][]][[]]][[][[['], [False], [True]], [[']]][[][]][[[[[]]][[['], [False], [True]], [['][][[][]]][[[][]][[]]][['], [False], [True]], [['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]], [['[]][]][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], [False], [True]]]]"}
{"task_id": "HumanEval/133", "requirement": "from typing import List\n\n\ndef sum_squares(lst: List[float]) -> int:\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\nimport math\n\ndef sum_squares(lst: List[float]) -> int:\n    return sum((math.ceil(x) ** 2 for x in lst))", "from typing import List\nimport math\n\ndef sum_squares(lst: List[float]) -> int:\n    return sum((math.ceil(x) ** 2 for x in lst))", "from typing import List\nimport math\n\ndef sum_squares(lst: List[float]) -> int:\n    return sum((math.ceil(x) ** 2 for x in lst))", "from typing import List\nimport math\n\ndef sum_squares(lst: List[float]) -> int:\n    return sum((math.ceil(x) ** 2 for x in lst))", "from typing import List\nimport math\n\ndef sum_squares(lst: List[float]) -> int:\n    return sum((math.ceil(x) ** 2 for x in lst))", "from typing import List\nimport math\n\ndef sum_squares(lst: List[float]) -> int:\n    return sum((math.ceil(x) ** 2 for x in lst))", "from typing import List\nimport math\n\ndef sum_squares(lst: List[float]) -> int:\n    return sum((math.ceil(x) ** 2 for x in lst))", "from typing import List\nimport math\n\ndef sum_squares(lst: List[float]) -> int:\n    return sum((math.ceil(x) ** 2 for x in lst))", "from typing import List\nimport math\n\ndef sum_squares(lst: List[float]) -> int:\n    return sum((math.ceil(x) ** 2 for x in lst))", "from typing import List\nimport math\n\ndef sum_squares(lst: List[float]) -> int:\n    return sum((math.ceil(x) ** 2 for x in lst))", "from typing import List\nimport math\n\ndef sum_squares(lst: List[float]) -> int:\n    return sum((math.ceil(x) ** 2 for x in lst))", "from typing import List\nimport math\n\ndef sum_squares(lst: List[float]) -> int:\n    return sum((math.ceil(x) ** 2 for x in lst))", "from typing import List\nimport math\n\ndef sum_squares(lst: List[float]) -> int:\n    return sum((math.ceil(x) ** 2 for x in lst))", "from typing import List\nimport math\n\ndef sum_squares(lst: List[float]) -> int:\n    return sum((math.ceil(x) ** 2 for x in lst))", "from typing import List\nimport math\n\ndef sum_squares(lst: List[float]) -> int:\n    return sum((math.ceil(x) ** 2 for x in lst))", "from typing import List\nimport math\n\ndef sum_squares(lst: List[float]) -> int:\n    return sum((math.ceil(x) ** 2 for x in lst))", "from typing import List\nimport math\n\ndef sum_squares(lst: List[float]) -> int:\n    return sum((math.ceil(x) ** 2 for x in lst))", "from typing import List\nimport math\n\ndef sum_squares(lst: List[float]) -> int:\n    return sum((math.ceil(x) ** 2 for x in lst))", "from typing import List\nimport math\n\ndef sum_squares(lst: List[float]) -> int:\n    return sum((math.ceil(x) ** 2 for x in lst))", "from typing import List\nimport math\n\ndef sum_squares(lst: List[float]) -> int:\n    return sum((math.ceil(x) ** 2 for x in lst))"], "outputs": "[[14], [98], [84], [29], [6], [0], [0], [14], [3], [14]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[1, 4, 9]], [[1, 3, 5, 7]], [[1.4, 4.2, 0]], [[-2.4, 1, 1]], [[]], [[0]], [[-1.1, -2.2, -3.3]], [[0.1, 0.2, 0.3]], [[1.0, 2.0, 3.0]]]", "input_output_examples": "[[[[1, 2, 3]], [[1, 4, 9]], [[1, 3, 5, 7]], [[1.4, 4.2, 0]], [[-2.4, 1, 1]]], [[14], [98], [84], [29], [6]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/134", "requirement": "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n    '''", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["import re\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False", "import re\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False", "import re\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False", "import re\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False", "import re\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False", "import re\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False", "import re\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False", "import re\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False", "import re\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False", "import re\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False", "import re\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False", "import re\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False", "import re\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False", "import re\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    words = txt.split()\n    if not words:\n        return True\n    last_word = words[-1]\n    return last_word[-1] == last_char and len(last_word) == 1", "import re\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False", "import re\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False", "import re\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False", "import re\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False", "import re\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False", "import re\n\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False"], "outputs": "[[False], [True], [False], [False], [True], [True], [False], [False], [False], [True], [False], [False], [True], [False], [False]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['apple pie'], ['apple pi e'], ['apple pi e '], [''], ['a'], ['A'], ['123'], ['hello world!'], ['hello world '], ['hello world a'], ['hello world a '], ['    '], ['   a'], ['   a '], ['   !']]", "input_output_examples": "[[['apple pie'], ['apple pi e'], ['apple pi e '], ['']], [[False], [True], [False], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 0.8, "repaired_passk": 0.8, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/135", "requirement": "from typing import List\n\n\ndef can_arrange(arr: List[int]) -> int:\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] <= arr[i - 1]:\n            return i\n    return -1", "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] <= arr[i - 1]:\n            return i\n    return -1", "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] <= arr[i - 1]:\n            return i\n    return -1", "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] <= arr[i - 1]:\n            return i\n    return -1", "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] <= arr[i - 1]:\n            return i\n    return -1", "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] <= arr[i - 1]:\n            return i\n    return -1", "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] <= arr[i - 1]:\n            return i\n    return -1", "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] <= arr[i - 1]:\n            return i\n    return -1", "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] <= arr[i - 1]:\n            return i\n    return -1", "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] <= arr[i - 1]:\n            return i\n    return -1", "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] <= arr[i - 1]:\n            return i\n    return -1", "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] <= arr[i - 1]:\n            return i\n    return -1", "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] <= arr[i - 1]:\n            return i\n    return -1", "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] <= arr[i - 1]:\n            return i\n    return -1"], "outputs": "[[3], [-1], [4], [5], [-1], [-1], [-1], [4], [8], [-1]]", "probability": 0.95, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            return i\n    return -1"], "outputs": "[[3], [-1], [1], [5], [-1], [-1], [-1], [1], [5], [-1]]", "probability": 0.05, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[[1, 2, 4, 3, 5]], [[1, 2, 3]], [[5, 4, 3, 2, 1]], [[1, 3, 5, 7, 9, 2]], [[10, 20, 30, 40, 50]], [[1]], [[]], [[9, 7, 5, 3, 1, 2, 4, 6, 8]], [[1, 2, 3, 4, 5, 4, 3, 2, 1]], [[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]]", "input_output_examples": "[[[[1, 2, 4, 3, 5]], [[1, 2, 3]]], [[3], [-1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.1431984785579781}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/136", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n    '''", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    return (a, b)", "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    a = max(neg) if neg else None\n    b = min(pos) if pos else None\n    return (a, b)", "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    a = max(neg) if neg else None\n    b = min(pos) if pos else None\n    return (a, b)", "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    return (a, b)", "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    a = max(neg) if neg else None\n    b = min(pos) if pos else None\n    return (a, b)", "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    largest_neg = max(negatives) if negatives else None\n    smallest_pos = min(positives) if positives else None\n    return (largest_neg, smallest_pos)", "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    neg_numbers = [x for x in lst if x < 0]\n    pos_numbers = [x for x in lst if x > 0]\n    a = max(neg_numbers) if neg_numbers else None\n    b = min(pos_numbers) if pos_numbers else None\n    return (a, b)", "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    largest_neg = max(negatives) if negatives else None\n    smallest_pos = min(positives) if positives else None\n    return (largest_neg, smallest_pos)", "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    neg_numbers = [x for x in lst if x < 0]\n    pos_numbers = [x for x in lst if x > 0]\n    a = max(neg_numbers) if neg_numbers else None\n    b = min(pos_numbers) if pos_numbers else None\n    return (a, b)", "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    neg_numbers = [x for x in lst if x < 0]\n    pos_numbers = [x for x in lst if x > 0]\n    largest_neg = max(neg_numbers) if neg_numbers else None\n    smallest_pos = min(pos_numbers) if pos_numbers else None\n    return (largest_neg, smallest_pos)", "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    return (a, b)", "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    a = max(neg) if neg else None\n    b = min(pos) if pos else None\n    return (a, b)", "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    return (a, b)", "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    return (a, b)", "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    return (a, b)", "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    return (a, b)", "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    return (a, b)", "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    neg_numbers = [x for x in lst if x < 0]\n    pos_numbers = [x for x in lst if x > 0]\n    a = max(neg_numbers) if neg_numbers else None\n    b = min(pos_numbers) if pos_numbers else None\n    return (a, b)", "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    neg_numbers = [x for x in lst if x < 0]\n    pos_numbers = [x for x in lst if x > 0]\n    largest_neg = max(neg_numbers) if neg_numbers else None\n    smallest_pos = min(pos_numbers) if pos_numbers else None\n    return (largest_neg, smallest_pos)", "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    return (a, b)"], "outputs": "[[(None, 1)], [(-1, None)], [(None, None)], [(-3, 3)], [(None, 1)], [(None, None)], [(None, None)], [(-5, 5)]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[2, 4, 1, 3, 5, 7]], [[-1, -2, -3, -4, -5]], [[0, 0, 0]], [[-5, -3, 0, 3, 5]], [[1, 2, 3, 4, 5]], [[]], [[0]], [[-10, -5, 0, 5, 10]]]", "input_output_examples": "[[[[2, 4, 1, 3, 5, 7]], [[]], [[0]]], [[(None, 1)], [(None, None)], [(None, None)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/137", "requirement": "from typing import Union\n\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n\n    def convert_to_float(value: Union[int, float, str]) -> float:\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n\n    def to_float(value: Union[int, float, str]) -> float:\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    a_float = to_float(a)\n    b_float = to_float(b)\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n\n    def to_float(value: Union[int, float, str]) -> float:\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    a_float = to_float(a)\n    b_float = to_float(b)\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n\n    def convert_to_float(value: Union[int, float, str]) -> float:\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n\n    def to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    a_float = to_float(a)\n    b_float = to_float(b)\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n\n    def to_float(value: Union[int, float, str]) -> float:\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    a_float = to_float(a)\n    b_float = to_float(b)\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n\n    def to_float(value: Union[int, float, str]) -> float:\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    a_float = to_float(a)\n    b_float = to_float(b)\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n\n    def to_float(value: Union[int, float, str]) -> float:\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    a_float = to_float(a)\n    b_float = to_float(b)\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b"], "outputs": "[[2.5], ['2,3'], ['6'], [None], [None], [None], ['10'], [None], [-3], [None], [None], ['1000']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1, 2.5], [1, '2,3'], ['5,1', '6'], ['1', 1], [3.7, 3.7], ['3.7', '3,7'], ['10', '2'], [0, '0'], [-5, -3], ['-5.5', '-5,5'], ['7.2', 7.2], ['1000', '999']]", "input_output_examples": "[[[1, 2.5], [1, '2,3'], ['5,1', '6'], ['1', 1]], [[2.5], ['2,3'], ['6'], [None]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/138", "requirement": "def is_equal_to_sum_even(n: int) -> bool:\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def is_equal_to_sum_even(n: int) -> bool:\n    if n < 8 or n % 2 != 0:\n        return False\n    return True", "def is_equal_to_sum_even(n: int) -> bool:\n    if n < 8 or n % 2 != 0:\n        return False\n    return True", "def is_equal_to_sum_even(n: int) -> bool:\n    if n < 8 or n % 2 != 0:\n        return False\n    return True", "def is_equal_to_sum_even(n: int) -> bool:\n    if n < 8 or n % 2 != 0:\n        return False\n    return True", "def is_equal_to_sum_even(n: int) -> bool:\n    if n < 8 or n % 2 != 0:\n        return False\n    return True", "def is_equal_to_sum_even(n: int) -> bool:\n    if n < 8 or n % 2 != 0:\n        return False\n    return True", "def is_equal_to_sum_even(n: int) -> bool:\n    if n < 8 or n % 2 != 0:\n        return False\n    return True", "def is_equal_to_sum_even(n: int) -> bool:\n    if n < 8 or n % 2 != 0:\n        return False\n    return True", "def is_equal_to_sum_even(n: int) -> bool:\n    if n < 8 or n % 2 != 0:\n        return False\n    return True", "def is_equal_to_sum_even(n: int) -> bool:\n    if n < 8 or n % 2 != 0:\n        return False\n    return True", "def is_equal_to_sum_even(n: int) -> bool:\n    if n < 8 or n % 2 != 0:\n        return False\n    return True", "def is_equal_to_sum_even(n: int) -> bool:\n    if n < 8 or n % 2 != 0:\n        return False\n    return True", "def is_equal_to_sum_even(n: int) -> bool:\n    if n < 8 or n % 2 != 0:\n        return False\n    return True", "def is_equal_to_sum_even(n: int) -> bool:\n    if n < 8 or n % 2 != 0:\n        return False\n    return True", "def is_equal_to_sum_even(n: int) -> bool:\n    if n < 8 or n % 2 != 0:\n        return False\n    return True", "def is_equal_to_sum_even(n: int) -> bool:\n    if n < 8 or n % 2 != 0:\n        return False\n    return True", "def is_equal_to_sum_even(n: int) -> bool:\n    if n < 8 or n % 2 != 0:\n        return False\n    return True", "def is_equal_to_sum_even(n: int) -> bool:\n    if n < 8 or n % 2 != 0:\n        return False\n    return True", "def is_equal_to_sum_even(n: int) -> bool:\n    if n < 8 or n % 2 != 0:\n        return False\n    return True", "def is_equal_to_sum_even(n: int) -> bool:\n    if n < 8 or n % 2 != 0:\n        return False\n    return True"], "outputs": "[[False], [False], [True], [True], [True], [False], [False], [False], [True], [True]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[4], [6], [8], [10], [12], [1], [0], [-2], [14], [16]]", "input_output_examples": "[[[4], [6], [8]], [[False], [False], [True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/139", "requirement": "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["import math\n\ndef special_factorial(n: int) -> int:\n    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)\n    return result", "import math\n\ndef special_factorial(n: int) -> int:\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result", "import math\n\ndef special_factorial(n: int) -> int:\n    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)\n    return result", "from math import factorial\n\ndef special_factorial(n: int) -> int:\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "from math import factorial\n\ndef special_factorial(n: int) -> int:\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "import math\n\ndef special_factorial(n: int) -> int:\n    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)\n    return result", "import math\n\ndef special_factorial(n: int) -> int:\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result", "import math\n\ndef special_factorial(n: int) -> int:\n    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)\n    return result", "import math\n\ndef special_factorial(n: int) -> int:\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result", "import math\n\ndef special_factorial(n: int) -> int:\n    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)\n    return result", "import math\n\ndef special_factorial(n: int) -> int:\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result", "from math import factorial\n\ndef special_factorial(n: int) -> int:\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result", "import math\n\ndef special_factorial(n: int) -> int:\n    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)\n    return result", "from math import factorial\n\ndef special_factorial(n: int) -> int:\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result", "import math\n\ndef special_factorial(n: int) -> int:\n    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)\n    return result", "from math import factorial\n\ndef special_factorial(n: int) -> int:\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "from math import factorial\n\ndef special_factorial(n: int) -> int:\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "import math\n\ndef special_factorial(n: int) -> int:\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result", "from math import factorial\n\ndef special_factorial(n: int) -> int:\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result", "from math import factorial\n\ndef special_factorial(n: int) -> int:\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result"], "outputs": "[[1], [2], [12], [288], [34560], [1], [1], [6658606584104736522240000000]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [3], [4], [5], [0], [-1], [10]]", "input_output_examples": "[[[4]], [[288]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 0.0, "repaired_passk": 0.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/140", "requirement": "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["import re\n\ndef fix_spaces(text: str) -> str:\n    text = re.sub(' {3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "import re\n\ndef fix_spaces(text: str) -> str:\n    text = re.sub(' {3,}', '-', text)\n    text = re.sub(' ', '_', text)\n    return text", "import re\n\ndef fix_spaces(text: str) -> str:\n    text = re.sub(' {3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "import re\n\ndef fix_spaces(text: str) -> str:\n    text = re.sub(' {3,}', '-', text)\n    text = re.sub(' ', '_', text)\n    return text", "import re\n\ndef fix_spaces(text: str) -> str:\n    text = re.sub(' {3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "import re\n\ndef fix_spaces(text: str) -> str:\n    text = re.sub(' {3,}', '-', text)\n    text = re.sub(' ', '_', text)\n    return text", "import re\n\ndef fix_spaces(text: str) -> str:\n    text = re.sub(' {3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "import re\n\ndef fix_spaces(text: str) -> str:\n    text = re.sub(' {3,}', '-', text)\n    text = re.sub(' ', '_', text)\n    return text", "import re\n\ndef fix_spaces(text: str) -> str:\n    text = re.sub(' {3,}', '-', text)\n    text = re.sub(' ', '_', text)\n    return text", "import re\n\ndef fix_spaces(text: str) -> str:\n    text = re.sub(' {3,}', '-', text)\n    text = re.sub(' ', '_', text)\n    return text", "import re\n\ndef fix_spaces(text: str) -> str:\n    text = re.sub(' {3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "import re\n\ndef fix_spaces(text: str) -> str:\n    text = re.sub(' {3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "import re\n\ndef fix_spaces(text: str) -> str:\n    text = re.sub(' {3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "import re\n\ndef fix_spaces(text: str) -> str:\n    text = re.sub(' {3,}', '-', text)\n    text = re.sub(' ', '_', text)\n    return text", "import re\n\ndef fix_spaces(text: str) -> str:\n    text = re.sub(' {3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "import re\n\ndef fix_spaces(text: str) -> str:\n    text = re.sub(' {3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "import re\n\ndef fix_spaces(text: str) -> str:\n    text = re.sub(' {3,}', '-', text)\n    text = re.sub(' ', '_', text)\n    return text", "import re\n\ndef fix_spaces(text: str) -> str:\n    text = re.sub(' {3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "import re\n\ndef fix_spaces(text: str) -> str:\n    text = re.sub(' {3,}', '-', text)\n    text = re.sub(' ', '_', text)\n    return text", "import re\n\ndef fix_spaces(text: str) -> str:\n    text = re.sub('\\\\s{3,}', '-', text)\n    text = re.sub('\\\\s', '_', text)\n    return text"], "outputs": "[['Example'], ['Example_1'], ['_Example_2'], ['_Example-3'], ['__'], ['-'], ['-'], ['Hello-World'], ['NoSpacesHere'], ['__LeadingSpaces'], ['TrailingSpaces__'], ['Multiple-Spaces-Here'], ['-Multiple-Leading-And-Trailing-Spaces-'], ['SingleSpace'], ['Two__Spaces'], ['Three-Spaces'], ['Four-Spaces'], ['Mixed-Spaces__Here'], ['-Mixed-Spaces-Everywhere-']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Example'], ['Example 1'], [' Example 2'], [' Example   3'], ['  '], ['   '], ['    '], ['Hello   World'], ['NoSpacesHere'], ['  LeadingSpaces'], ['TrailingSpaces  '], ['Multiple    Spaces   Here'], ['   Multiple   Leading   And   Trailing   Spaces   '], ['SingleSpace'], ['Two  Spaces'], ['Three   Spaces'], ['Four    Spaces'], ['Mixed   Spaces  Here'], ['   Mixed   Spaces   Everywhere   ']]", "input_output_examples": "[[['Example'], ['Example 1'], [' Example 2'], [' Example   3']], [['Example'], ['Example_1'], ['_Example_2'], ['_Example-3']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 0.9, "repaired_passk": 0.9, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/141", "requirement": "def file_name_check(file_name: str) -> str:\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["import re\n\ndef file_name_check(file_name: str) -> str:\n    if len(re.findall('\\\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "import re\n\ndef file_name_check(file_name: str) -> str:\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if len(re.findall('\\\\d', file_name)) > 3:\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name: str) -> str:\n    import re\n    if len(re.findall('\\\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "import re\n\ndef file_name_check(file_name: str) -> str:\n    if len(re.findall('\\\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "import re\n\ndef file_name_check(file_name: str) -> str:\n    if len(re.findall('\\\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "import re\n\ndef file_name_check(file_name: str) -> str:\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if len(re.findall('\\\\d', file_name)) > 3:\n        return 'No'\n    return 'Yes'", "import re\n\ndef file_name_check(file_name: str) -> str:\n    if len(re.findall('\\\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name: str) -> str:\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts[0]) == 0 or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum((c.isdigit() for c in file_name)) > 3:\n        return 'No'\n    return 'Yes'", "import re\n\ndef file_name_check(file_name: str) -> str:\n    if len(re.findall('\\\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "import re\n\ndef file_name_check(file_name: str) -> str:\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts[0]) == 0 or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if len(re.findall('\\\\d', file_name)) > 3:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name: str) -> str:\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    digits = sum((c.isdigit() for c in file_name))\n    if digits > 3:\n        return 'No'\n    return 'Yes'", "import re\n\ndef file_name_check(file_name: str) -> str:\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if len(re.findall('\\\\d', file_name)) > 3:\n        return 'No'\n    return 'Yes'", "import re\n\ndef file_name_check(file_name: str) -> str:\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if len(re.findall('\\\\d', file_name)) > 3:\n        return 'No'\n    return 'Yes'", "import re\n\ndef file_name_check(file_name: str) -> str:\n    if len(re.findall('\\\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name: str) -> str:\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum((c.isdigit() for c in file_name)) > 3:\n        return 'No'\n    return 'Yes'", "import re\n\ndef file_name_check(file_name: str) -> str:\n    if len(re.findall('\\\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "import re\n\ndef file_name_check(file_name: str) -> str:\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if len(re.findall('\\\\d', file_name)) > 3:\n        return 'No'\n    return 'Yes'", "import re\n\ndef file_name_check(file_name: str) -> str:\n    if len(re.findall('\\\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "def file_name_check(file_name: str) -> str:\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    digit_count = sum((c.isdigit() for c in file_name))\n    if digit_count > 3:\n        return 'No'\n    return 'Yes'", "import re\n\ndef file_name_check(file_name: str) -> str:\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if len(re.findall('\\\\d', file_name)) > 3:\n        return 'No'\n    return 'Yes'"], "outputs": "[['Yes'], ['No'], ['No'], ['Yes'], ['Yes'], ['Yes'], ['No'], ['No'], ['No'], ['No'], ['No'], ['Yes'], ['No'], ['Yes'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No'], ['No']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['example.txt'], ['1example.dll'], ['test1234.exe'], ['file.dll'], ['file.exe'], ['file.txt'], ['file.doc'], ['file..txt'], ['.txt'], ['file.'], ['file'], ['file123.txt'], ['file1234.txt'], ['File.exe'], ['FILE.TXT'], ['file.TxT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt']]", "input_output_examples": "[[['example.txt'], ['1example.dll']], [['Yes'], ['No']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/142", "requirement": "from typing import List\n\n\ndef sum_squares(lst: List[int]) -> int:\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n        else:\n            result += num\n    return result", "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n        else:\n            result += num\n    return result", "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n        else:\n            result += num\n    return result", "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n        else:\n            total += num\n    return total", "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n        else:\n            result += num\n    return result", "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n        else:\n            result += num\n    return result", "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n        else:\n            result += num\n    return result", "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n        else:\n            result += num\n    return result", "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n        else:\n            result += num\n    return result", "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n        else:\n            total += num\n    return total", "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n        else:\n            result += num\n    return result", "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n        else:\n            result += num\n    return result", "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n        else:\n            result += num\n    return result", "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n        else:\n            result += num\n    return result", "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n        else:\n            result += num\n    return result", "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n        else:\n            total += num\n    return total", "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n        else:\n            result += num\n    return result", "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n        else:\n            result += num\n    return result", "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n        else:\n            result += num\n    return result", "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n        else:\n            result += num\n    return result"], "outputs": "[[6], [0], [-126], [0], [1039], [-1108], [870790], [1], [7534], [-21621]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[]], [[-1, -5, 2, -1, -5]], [[0, 0, 0, 0, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[-2, 3, -4, 5, -6, 7, -8, 9, -10]], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]], [[1]], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]], [[-3, -6, -9, -12, -15, -18, -21, -24, -27, -30]]]", "input_output_examples": "[[[[1, 2, 3]], [[]], [[-1, -5, 2, -1, -5]]], [[6], [0], [-126]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/143", "requirement": "def words_in_sentence(sentence: str) -> str:\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    filtered_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(filtered_words)", "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    filtered_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(filtered_words)", "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)", "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    filtered_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(filtered_words)", "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    filtered_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(filtered_words)", "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    filtered_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(filtered_words)", "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    filtered_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(filtered_words)", "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)", "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    filtered_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(filtered_words)", "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    filtered_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(filtered_words)", "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)", "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    filtered_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(filtered_words)", "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)", "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    filtered_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(filtered_words)", "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)", "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)", "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    filtered_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(filtered_words)", "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    filtered_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(filtered_words)", "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)"], "outputs": "[['is'], ['go for'], ['Hello world'], ['The quick brown fox jumps the dog'], [''], ['Prime numbers are fun'], ['One two three six seven'], ['programming'], ['is awesome'], ['Short words']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['This is a test'], ['lets go for swimming'], ['Hello world'], ['The quick brown fox jumps over the lazy dog'], ['a'], ['Prime numbers are fun'], ['One two three four five six seven'], ['I love programming'], ['Python is awesome'], ['Short words']]", "input_output_examples": "[[['This is a test'], ['lets go for swimming']], [['is'], ['go for']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/144", "requirement": "def simplify(x: str, n: str) -> bool:\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from fractions import Fraction\n\ndef simplify(x: str, n: str) -> bool:\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    result = x_frac * n_frac\n    return result.denominator == 1", "from fractions import Fraction\n\ndef simplify(x: str, n: str) -> bool:\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    result = x_frac * n_frac\n    return result.denominator == 1", "from fractions import Fraction\n\ndef simplify(x: str, n: str) -> bool:\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    result = x_frac * n_frac\n    return result.denominator == 1", "from fractions import Fraction\n\ndef simplify(x: str, n: str) -> bool:\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    product = x_frac * n_frac\n    return product.denominator == 1", "from fractions import Fraction\n\ndef simplify(x: str, n: str) -> bool:\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    result = x_frac * n_frac\n    return result.denominator == 1", "from fractions import Fraction\n\ndef simplify(x: str, n: str) -> bool:\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    result = x_frac * n_frac\n    return result.denominator == 1", "from fractions import Fraction\n\ndef simplify(x: str, n: str) -> bool:\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    product = x_frac * n_frac\n    return product.denominator == 1", "from fractions import Fraction\n\ndef simplify(x: str, n: str) -> bool:\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    result = x_frac * n_frac\n    return result.denominator == 1", "from fractions import Fraction\n\ndef simplify(x: str, n: str) -> bool:\n    x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n    product = x_fraction * n_fraction\n    return product.denominator == 1", "from fractions import Fraction\n\ndef simplify(x: str, n: str) -> bool:\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    result = x_frac * n_frac\n    return result.denominator == 1", "from fractions import Fraction\n\ndef simplify(x: str, n: str) -> bool:\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    product = x_frac * n_frac\n    return product.denominator == 1", "from fractions import Fraction\n\ndef simplify(x: str, n: str) -> bool:\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    product = x_frac * n_frac\n    return product.denominator == 1", "from fractions import Fraction\n\ndef simplify(x: str, n: str) -> bool:\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    product = x_frac * n_frac\n    return product.denominator == 1", "from fractions import Fraction\n\ndef simplify(x: str, n: str) -> bool:\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    result = x_frac * n_frac\n    return result.denominator == 1", "from fractions import Fraction\n\ndef simplify(x: str, n: str) -> bool:\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    product = x_frac * n_frac\n    return product.denominator == 1", "from fractions import Fraction\n\ndef simplify(x: str, n: str) -> bool:\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    result = x_frac * n_frac\n    return result.denominator == 1", "from fractions import Fraction\n\ndef simplify(x: str, n: str) -> bool:\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    product = x_frac * n_frac\n    return product.denominator == 1", "from fractions import Fraction\n\ndef simplify(x: str, n: str) -> bool:\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    result = x_frac * n_frac\n    return result.denominator == 1", "from fractions import Fraction\n\ndef simplify(x: str, n: str) -> bool:\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    result = x_frac * n_frac\n    return result.denominator == 1", "from fractions import Fraction\n\ndef simplify(x: str, n: str) -> bool:\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    product = x_frac * n_frac\n    return product.denominator == 1"], "outputs": "[[True], [False], [False], [True], [True], [True], [True], [True], [True], [True], [True], [True]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['1/5', '5/1'], ['1/6', '2/1'], ['7/10', '10/2'], ['2/3', '3/2'], ['4/5', '5/4'], ['1/1', '1/1'], ['3/4', '4/3'], ['5/7', '7/5'], ['0/1', '1/1'], ['1/2', '2/1'], ['3/9', '9/3'], ['10/20', '20/10']]", "input_output_examples": "[[['1/5', '5/1'], ['1/6', '2/1'], ['7/10', '10/2']], [[True], [False], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/145", "requirement": "from typing import List\n\n\ndef order_by_points(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\n    def sum_of_digits(n: int) -> int:\n        return sum((int(digit) for digit in str(abs(n))))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\n    def sum_of_digits(n: int) -> int:\n        return sum((int(digit) for digit in str(abs(n))))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\n    def sum_of_digits(n):\n        return sum((int(digit) for digit in str(abs(n))))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\n    def sum_of_digits(n):\n        return sum((int(digit) for digit in str(abs(n))))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\n    def sum_of_digits(n: int) -> int:\n        return sum((int(digit) for digit in str(abs(n))))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\n    def sum_of_digits(n: int) -> int:\n        return sum((int(digit) for digit in str(abs(n))))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\n    def sum_of_digits(n):\n        return sum((int(digit) for digit in str(abs(n))))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\n    def sum_of_digits(n: int) -> int:\n        return sum((int(digit) for digit in str(abs(n))))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\n    def sum_of_digits(n: int) -> int:\n        return sum((int(digit) for digit in str(abs(n))))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\n    def sum_of_digits(n):\n        return sum((int(digit) for digit in str(abs(n))))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\n    def sum_of_digits(n):\n        return sum((int(digit) for digit in str(abs(n))))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\n    def sum_of_digits(n: int) -> int:\n        return sum((int(digit) for digit in str(abs(n))))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\n    def sum_of_digits(n: int) -> int:\n        return sum((int(digit) for digit in str(abs(n))))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\n    def sum_of_digits(n: int) -> int:\n        return sum((int(digit) for digit in str(abs(n))))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\n    def sum_of_digits(n: int) -> int:\n        return sum((int(digit) for digit in str(abs(n))))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\n    def sum_of_digits(n: int) -> int:\n        return sum((int(digit) for digit in str(abs(n))))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\n    def sum_of_digits(n):\n        return sum((int(digit) for digit in str(abs(n))))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\n    def sum_of_digits(n):\n        return sum((int(digit) for digit in str(abs(n))))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\n    def sum_of_digits(n):\n        return sum((int(digit) for digit in str(abs(n))))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\n    def sum_of_digits(n):\n        return sum((int(digit) for digit in str(abs(n))))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))"], "outputs": "[[[1, -1, 11, -11, -12]], [[]], [[123, 456, 789]], [[0, 0, 0]], [[-100, 100, -200, 200]], [[9, 99, 999, 9999]], [[5, -5, 55, -55]], [[10, 20, 30, 40, 50]], [[22, 33, 44, 55, 66]], [[111, 222, 333, 444, 555]]]", "probability": 1.0, "is_align_req": false, "test_consistency": 0.5, "failed_input_output_examples": "[[[[1, 11, -1, -11, -12]], [[1, -1, 11, -11, -12]], [[-1, -11, 1, -12, 11]]]]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 11, -1, -11, -12]], [[]], [[123, 456, 789]], [[0, 0, 0]], [[-100, 100, -200, 200]], [[9, 99, 999, 9999]], [[5, -5, 55, -55]], [[10, 20, 30, 40, 50]], [[22, 33, 44, 55, 66]], [[111, 222, 333, 444, 555]]]", "input_output_examples": "[[[[1, 11, -1, -11, -12]], [[]]], [[[-1, -11, 1, -12, 11]], [[]]]]", "weighted_test_consistency": 0.5, "at_least_one_align": false, "ambiguity": 0.25}, "repaired_clusters": null, "original_passk": 0.0, "repaired_passk": 0.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/146", "requirement": "from typing import List\n\n\ndef specialFilter(nums: List[int]) -> int:\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n\n    def is_odd_digit(n: int) -> bool:\n        return n % 2 != 0\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if is_odd_digit(first_digit) and is_odd_digit(last_digit):\n                count += 1\n    return count", "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n\n    def is_odd_digit(digit):\n        return digit % 2 != 0\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if is_odd_digit(first_digit) and is_odd_digit(last_digit):\n                count += 1\n    return count", "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count"], "outputs": "[[1], [2], [0], [5], [0], [0], [3], [0], [3], [0]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[15, -73, 14, -15]], [[33, -2, -3, 45, 21, 109]], [[10, 20, 30, 40]], [[11, 13, 15, 17, 19]], [[1, 3, 5, 7, 9]], [[21, 23, 25, 27, 29]], [[123, 456, 789, 101]], [[]], [[111, 222, 333, 444, 555]], [[-15, -33, -45, -109]]]", "input_output_examples": "[[[[15, -73, 14, -15]], [[33, -2, -3, 45, 21, 109]]], [[1], [2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/147", "requirement": "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from itertools import combinations\n\ndef get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for triplet in combinations(a, 3):\n        if sum(triplet) % 3 == 0:\n            count += 1\n    return count", "from itertools import combinations\n\ndef get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for triplet in combinations(a, 3):\n        if sum(triplet) % 3 == 0:\n            count += 1\n    return count", "from itertools import combinations\n\ndef get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for triplet in combinations(a, 3):\n        if sum(triplet) % 3 == 0:\n            count += 1\n    return count", "from itertools import combinations\n\ndef get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for triplet in combinations(a, 3):\n        if sum(triplet) % 3 == 0:\n            count += 1\n    return count", "from itertools import combinations\n\ndef get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for triple in combinations(a, 3):\n        if sum(triple) % 3 == 0:\n            count += 1\n    return count", "from itertools import combinations\n\ndef get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for triple in combinations(a, 3):\n        if sum(triple) % 3 == 0:\n            count += 1\n    return count", "from itertools import combinations\n\ndef get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for triple in combinations(a, 3):\n        if sum(triple) % 3 == 0:\n            count += 1\n    return count", "from itertools import combinations\n\ndef get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for triplet in combinations(a, 3):\n        if sum(triplet) % 3 == 0:\n            count += 1\n    return count", "from itertools import combinations\n\ndef get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for triplet in combinations(a, 3):\n        if sum(triplet) % 3 == 0:\n            count += 1\n    return count", "from itertools import combinations\n\ndef get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for triple in combinations(a, 3):\n        if sum(triple) % 3 == 0:\n            count += 1\n    return count", "from itertools import combinations\n\ndef get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for triplet in combinations(a, 3):\n        if sum(triplet) % 3 == 0:\n            count += 1\n    return count", "from itertools import combinations\n\ndef get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for triplet in combinations(a, 3):\n        if sum(triplet) % 3 == 0:\n            count += 1\n    return count", "from itertools import combinations\n\ndef get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for triplet in combinations(a, 3):\n        if sum(triplet) % 3 == 0:\n            count += 1\n    return count", "from itertools import combinations\n\ndef get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for triplet in combinations(a, 3):\n        if sum(triplet) % 3 == 0:\n            count += 1\n    return count", "def get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod = [0, 0, 0]\n    for num in a:\n        mod[num % 3] += 1\n    count += mod[0] * (mod[0] - 1) * (mod[0] - 2) // 6\n    count += mod[1] * mod[2] * mod[0]\n    count += mod[1] * (mod[1] - 1) * (mod[1] - 2) // 6\n    count += mod[2] * (mod[2] - 1) * (mod[2] - 2) // 6\n    return count", "from itertools import combinations\n\ndef get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for triplet in combinations(a, 3):\n        if sum(triplet) % 3 == 0:\n            count += 1\n    return count", "from itertools import combinations\n\ndef get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for triplet in combinations(a, 3):\n        if sum(triplet) % 3 == 0:\n            count += 1\n    return count", "from itertools import combinations\n\ndef get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for triple in combinations(a, 3):\n        if sum(triple) % 3 == 0:\n            count += 1\n    return count", "from itertools import combinations\n\ndef get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for triple in combinations(a, 3):\n        if sum(triple) % 3 == 0:\n            count += 1\n    return count", "from itertools import combinations\n\ndef get_max_triples(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for triple in combinations(a, 3):\n        if sum(triple) % 3 == 0:\n            count += 1\n    return count"], "outputs": "[[0], [0], [0], [1], [1], [36], [53361], [0], [0]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [3], [4], [5], [10], [100], [0], [-1]]", "input_output_examples": "[[[5]], [[1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/148", "requirement": "from typing import Tuple\n\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    '''", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    start = min(index1, index2) + 1\n    end = max(index1, index2)\n    return tuple(planets[start:end])", "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    start = min(index1, index2)\n    end = max(index1, index2)\n    return tuple(planets[start + 1:end])", "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    start = min(index1, index2)\n    end = max(index1, index2)\n    return tuple(planets[start + 1:end])", "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    start = min(index1, index2)\n    end = max(index1, index2)\n    return tuple(planets[start + 1:end])", "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    start = min(idx1, idx2)\n    end = max(idx1, idx2)\n    return tuple(planets[start + 1:end])", "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    start = min(index1, index2)\n    end = max(index1, index2)\n    return tuple(planets[start + 1:end])", "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    start = min(idx1, idx2)\n    end = max(idx1, idx2)\n    return tuple(planets[start + 1:end])", "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    start = min(idx1, idx2)\n    end = max(idx1, idx2)\n    return tuple(planets[start + 1:end])", "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    start = min(idx1, idx2)\n    end = max(idx1, idx2)\n    return tuple(planets[start + 1:end])", "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    start = min(idx1, idx2) + 1\n    end = max(idx1, idx2)\n    return tuple(planets[start:end])", "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    start = min(idx1, idx2) + 1\n    end = max(idx1, idx2)\n    return tuple(planets[start:end])", "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    start = min(idx1, idx2) + 1\n    end = max(idx1, idx2)\n    return tuple(planets[start:end])", "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    start = min(index1, index2) + 1\n    end = max(index1, index2)\n    return tuple(planets[start:end])", "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    start = min(index1, index2)\n    end = max(index1, index2)\n    return tuple(planets[start + 1:end])", "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    start = min(idx1, idx2)\n    end = max(idx1, idx2)\n    return tuple(planets[start + 1:end])", "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    start = min(idx1, idx2)\n    end = max(idx1, idx2)\n    return tuple(planets[start + 1:end])", "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    start = min(index1, index2)\n    end = max(index1, index2)\n    return tuple(planets[start + 1:end])", "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    start = min(idx1, idx2)\n    end = max(idx1, idx2)\n    return tuple(planets[start + 1:end])", "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    start = min(idx1, idx2)\n    end = max(idx1, idx2)\n    return tuple(planets[start + 1:end])", "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    start = min(index1, index2)\n    end = max(index1, index2)\n    return tuple(planets[start + 1:end])"], "outputs": "[[('Saturn', 'Uranus')], [('Venus',)], [('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')], [('Earth',)], [()], [()], [('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus')], [()], [()], [()], [()], [()], [()], [()]]", "probability": 1.0, "is_align_req": false, "test_consistency": 0.6666666666666667, "failed_input_output_examples": "[[['Earth', 'Mercury'], [('Venus',)], ['Venus']]]"}], "entropy": 0, "llm_generated_inputs": "[['Jupiter', 'Neptune'], ['Earth', 'Mercury'], ['Mercury', 'Uranus'], ['Venus', 'Mars'], ['Saturn', 'Jupiter'], ['Neptune', 'Uranus'], ['Mercury', 'Neptune'], ['Earth', 'Earth'], ['Pluto', 'Mars'], ['Saturn', 'Pluto'], ['', 'Mars'], ['Jupiter', ''], ['123', 'Earth'], ['Mars', 'abc']]", "input_output_examples": "[[['Jupiter', 'Neptune'], ['Earth', 'Mercury'], ['Mercury', 'Uranus']], [[('Saturn', 'Uranus')], ['Venus'], [('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')]]]", "weighted_test_consistency": 0.6666666666666667, "at_least_one_align": false, "ambiguity": 0.16666666666666663}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/149", "requirement": "from typing import List\n\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    filtered_lst.sort(key=lambda x: (len(x), x))\n    return filtered_lst", "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    filtered_lst.sort(key=lambda x: (len(x), x))\n    return filtered_lst", "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    filtered_lst.sort(key=lambda x: (len(x), x))\n    return filtered_lst", "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    filtered_lst.sort(key=lambda x: (len(x), x))\n    return filtered_lst", "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    filtered_lst.sort(key=lambda x: (len(x), x))\n    return filtered_lst", "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    filtered_lst.sort(key=lambda x: (len(x), x))\n    return filtered_lst", "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    filtered_lst.sort(key=lambda x: (len(x), x))\n    return filtered_lst", "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    filtered_lst.sort(key=lambda x: (len(x), x))\n    return filtered_lst", "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst", "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    filtered_lst.sort(key=lambda x: (len(x), x))\n    return filtered_lst"], "outputs": "[[['aa']], [['ab', 'cd']], [['hi']], [['go', 'java', 'python']], [['kiwi', 'banana']], [[]], [['tiny', 'medium', 'longword']], [['unique']], [['five', 'four', 'nine']], [['']], [['aa', 'aaaa', 'aaaaaa']]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['aa', 'a', 'aaa']], [['ab', 'a', 'aaa', 'cd']], [['hello', 'world', 'hi', 'there']], [['python', 'java', 'c', 'cpp', 'go']], [['apple', 'banana', 'kiwi', 'mango']], [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']], [['longword', 'short', 'medium', 'tiny']], [['duplicate', 'duplicate', 'unique']], [['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']], [['']], [['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa']]]", "input_output_examples": "[[[['aa', 'a', 'aaa']], [['ab', 'a', 'aaa', 'cd']]], [[['aa']], [['ab', 'cd']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/150", "requirement": "def x_or_y(n: int, x: int, y: int) -> int:\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    return x if is_prime(n) else y", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    return x if is_prime(n) else y", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    return x if is_prime(n) else y", "import math\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    return x if is_prime(n) else y", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    return x if is_prime(n) else y", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    return x if is_prime(n) else y", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    return x if is_prime(n) else y", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    return x if is_prime(n) else y", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    return x if is_prime(n) else y", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    return x if is_prime(n) else y", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    return x if is_prime(n) else y", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    return x if is_prime(n) else y", "import math\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x", "import math\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    if n < 2:\n        return y\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    return x if is_prime(n) else y", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    return x if is_prime(n) else y", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    return x if is_prime(n) else y", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    return x if is_prime(n) else y", "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    return x if is_prime(n) else y"], "outputs": "[[34], [5], [10], [7], [100], [60], [10], [25], [0], [0]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[7, 34, 12], [15, 8, 5], [2, 10, 20], [1, 3, 7], [29, 100, 200], [30, 50, 60], [0, 5, 10], [-5, 15, 25], [13, 0, 0], [14, 0, 0]]", "input_output_examples": "[[[7, 34, 12], [15, 8, 5]], [[34], [5]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/151", "requirement": "from typing import List\n\n\ndef double_the_difference(lst: List[int]) -> int:\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    If the input list is empty, return 0.\n    '''", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    return sum((x * x for x in lst if isinstance(x, int) and x > 0 and (x % 2 != 0)))", "from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    return sum((x ** 2 for x in lst if isinstance(x, int) and x > 0 and (x % 2 != 0)))", "from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    return sum((x * x for x in lst if isinstance(x, int) and x > 0 and (x % 2 != 0)))", "from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    return sum((num * num for num in lst if isinstance(num, int) and num > 0 and (num % 2 != 0)))", "from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    return sum((num ** 2 for num in lst if isinstance(num, int) and num > 0 and (num % 2 != 0)))", "from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    return sum((x * x for x in lst if isinstance(x, int) and x > 0 and (x % 2 != 0)))", "from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    return sum((x * x for x in lst if isinstance(x, int) and x > 0 and (x % 2 != 0)))", "from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    return sum((x * x for x in lst if isinstance(x, int) and x > 0 and (x % 2 != 0)))", "from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    return sum((x * x for x in lst if isinstance(x, int) and x > 0 and (x % 2 != 0)))", "from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    return sum((x * x for x in lst if isinstance(x, int) and x > 0 and (x % 2 != 0)))", "from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    return sum((x ** 2 for x in lst if isinstance(x, int) and x > 0 and (x % 2 != 0)))", "from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    return sum((x ** 2 for x in lst if isinstance(x, int) and x > 0 and (x % 2 != 0)))", "from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    return sum((x * x for x in lst if isinstance(x, int) and x > 0 and (x % 2 != 0)))", "from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    return sum((x ** 2 for x in lst if isinstance(x, int) and x > 0 and (x % 2 != 0)))", "from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    return sum((num * num for num in lst if isinstance(num, int) and num > 0 and (num % 2 != 0)))", "from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    return sum((x * x for x in lst if isinstance(x, int) and x > 0 and (x % 2 != 0)))", "from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    return sum((x * x for x in lst if isinstance(x, int) and x > 0 and (x % 2 != 0)))", "from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    return sum((x * x for x in lst if isinstance(x, int) and x > 0 and (x % 2 != 0)))", "from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    return sum((num * num for num in lst if isinstance(num, int) and num > 0 and (num % 2 != 0)))", "from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    return sum((x ** 2 for x in lst if isinstance(x, int) and x > 0 and (x % 2 != 0)))"], "outputs": "[[10], [0], [81], [0], [0], [0], [35], [9], [0], [10]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 3, 2, 0]], [[-1, -2, 0]], [[9, -2]], [[0]], [[]], [[2, 4, 6]], [[1, 3, 5]], [[1.5, 2.3, 3]], [[-1, -3, -5]], [[1, -1, 2, -2, 3, -3]]]", "input_output_examples": "[[[[1, 3, 2, 0]], [[-1, -2, 0]], [[9, -2]], [[0]]], [[10], [0], [81], [0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/152", "requirement": "from typing import List\n\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    return [abs(game[i] - guess[i]) for i in range(len(game))]"], "outputs": "[[[0, 0, 0, 0, 3, 3]], [[4, 4, 1, 0, 0, 6]], [[0, 0, 0]], [[2, 0, 2]], [[0, 0, 0]], [[0, 0, 0]], [[50, 50, 50]], [[5, 5, 5]], [[1, 1, 1]], [[5, 5, 5]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]], [[0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]], [[10, 20, 30], [10, 20, 30]], [[7, 8, 9], [9, 8, 7]], [[0, 0, 0], [0, 0, 0]], [[-1, -2, -3], [-1, -2, -3]], [[100, 200, 300], [150, 250, 350]], [[5, 10, 15], [10, 5, 20]], [[1, 1, 1], [2, 2, 2]], [[-5, -10, -15], [-10, -5, -20]]]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]], [[0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]]], [[[0, 0, 0, 0, 3, 3]], [[4, 4, 1, 0, 0, 6]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/153", "requirement": "from typing import List\n\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    \"\"\"", "repaired_requirement": "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    \"\"\"Given a class name and a list of extensions, determine the strongest extension based on the strength formula: CAP - SM, where CAP is the number of uppercase letters and SM is the number of lowercase letters in the extension's name. Return the result in the format 'ClassName.StrongestExtensionName'. If multiple extensions have the same strength, choose the one that appears first in the list.\n\n    Args:\n        class_name (str): The name of the class.\n        extensions (List[str]): A list of extension names.\n\n    Returns:\n        str: The class name concatenated with the strongest extension, separated by a dot.\n    \"\"\"", "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for ext in extensions:\n        CAP = sum((1 for c in ext if c.isupper()))\n        SM = sum((1 for c in ext if c.islower()))\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for ext in extensions:\n        CAP = sum((1 for c in ext if c.isupper()))\n        SM = sum((1 for c in ext if c.islower()))\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for ext in extensions:\n        CAP = sum((1 for char in ext if char.isupper()))\n        SM = sum((1 for char in ext if char.islower()))\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for ext in extensions:\n        CAP = sum((1 for char in ext if char.isupper()))\n        SM = sum((1 for char in ext if char.islower()))\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for ext in extensions:\n        CAP = sum((1 for char in ext if char.isupper()))\n        SM = sum((1 for char in ext if char.islower()))\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for ext in extensions:\n        CAP = sum((1 for char in ext if char.isupper()))\n        SM = sum((1 for char in ext if char.islower()))\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for ext in extensions:\n        cap = sum((1 for c in ext if c.isupper()))\n        sm = sum((1 for c in ext if c.islower()))\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'"], "outputs": "[['Slices.SErviNGSliCes'], ['my_class.AA'], ['TestClass.EXT2'], ['EmptyClass.'], ['SingleExt.OnlyOne'], ['CaseSensitive.ABC'], ['EqualStrength.Aa'], ['MixedCase.XyZ'], ['LongExtension.Short'], ['SpecialChars.Ext!']]", "probability": 0.35, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        CAP = sum((1 for char in extension if char.isupper()))\n        SM = sum((1 for char in extension if char.islower()))\n        return CAP - SM\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        CAP = sum((1 for char in extension if char.isupper()))\n        SM = sum((1 for char in extension if char.islower()))\n        return CAP - SM\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        current_strength = calculate_strength(extension)\n        if current_strength > max_strength:\n            strongest_extension = extension\n            max_strength = current_strength\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension):\n        CAP = sum((1 for char in extension if char.isupper()))\n        SM = sum((1 for char in extension if char.islower()))\n        return CAP - SM\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        current_strength = calculate_strength(extension)\n        if current_strength > max_strength:\n            max_strength = current_strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        current_strength = calculate_strength(extension)\n        if current_strength > max_strength:\n            max_strength = current_strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        CAP = sum((1 for char in extension if char.isupper()))\n        SM = sum((1 for char in extension if char.islower()))\n        return CAP - SM\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        CAP = sum((1 for char in extension if char.isupper()))\n        SM = sum((1 for char in extension if char.islower()))\n        return CAP - SM\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        current_strength = calculate_strength(extension)\n        if current_strength > max_strength:\n            max_strength = current_strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        CAP = sum((1 for char in extension if char.isupper()))\n        SM = sum((1 for char in extension if char.islower()))\n        return CAP - SM\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        current_strength = calculate_strength(extension)\n        if current_strength > max_strength:\n            strongest_extension = extension\n            max_strength = current_strength\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            strongest_extension = extension\n            max_strength = strength\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            strongest_extension = extension\n            max_strength = strength\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        CAP = sum((1 for char in extension if char.isupper()))\n        SM = sum((1 for char in extension if char.islower()))\n        return CAP - SM\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        current_strength = calculate_strength(extension)\n        if current_strength > max_strength:\n            max_strength = current_strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'"], "outputs": "[['Slices.SErviNGSliCes'], ['my_class.AA'], ['TestClass.EXT2'], ['IndexError'], ['SingleExt.OnlyOne'], ['CaseSensitive.ABC'], ['EqualStrength.Aa'], ['MixedCase.XyZ'], ['LongExtension.Short'], ['SpecialChars.Ext!']]", "probability": 0.65, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.9340680553754911, "llm_generated_inputs": "[['Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']], ['my_class', ['AA', 'Be', 'CC']], ['TestClass', ['Ext1', 'EXT2', 'ext3']], ['EmptyClass', []], ['SingleExt', ['OnlyOne']], ['CaseSensitive', ['AbC', 'aBc', 'ABC', 'abc']], ['EqualStrength', ['Aa', 'Bb', 'Cc']], ['MixedCase', ['XyZ', 'xYz', 'Xyz', 'xyz']], ['LongExtension', ['ThisIsAVeryLongExtensionName', 'Short', 'MediumLength']], ['SpecialChars', ['Ext!', 'Ext@', 'Ext#']]]", "input_output_examples": "[[['Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']], ['my_class', ['AA', 'Be', 'CC']]], [['Slices.SErviNGSliCes'], ['my_class.AA']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.46703402768774555}, "repaired_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for ext in extensions:\n        cap = sum((1 for char in ext if char.isupper()))\n        sm = sum((1 for char in ext if char.islower()))\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for ext in extensions:\n        cap = sum((1 for char in ext if char.isupper()))\n        sm = sum((1 for char in ext if char.islower()))\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for extension in extensions:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for ext in extensions:\n        strength = calculate_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for extension in extensions:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for extension in extensions:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for ext in extensions:\n        cap = sum((1 for char in ext if char.isupper()))\n        sm = sum((1 for char in ext if char.islower()))\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for ext in extensions:\n        cap = sum((1 for c in ext if c.isupper()))\n        sm = sum((1 for c in ext if c.islower()))\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for extension in extensions:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'"], "outputs": "[['Slices.SErviNGSliCes'], ['my_class.AA'], ['TestClass.EXT2'], ['EmptyClass.'], ['SingleExt.OnlyOne'], ['CaseSensitive.ABC'], ['EqualStrength.Aa'], ['MixedCase.XyZ'], ['LongExtension.Short'], ['SpecialChars.Ext!']]", "probability": 0.45, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        CAP = sum((1 for char in extension if char.isupper()))\n        SM = sum((1 for char in extension if char.islower()))\n        return CAP - SM\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            strongest_extension = extension\n            max_strength = strength\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            strongest_extension = extension\n            max_strength = strength\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        current_strength = calculate_strength(extension)\n        if current_strength > max_strength:\n            max_strength = current_strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        CAP = sum((1 for char in extension if char.isupper()))\n        SM = sum((1 for char in extension if char.islower()))\n        return CAP - SM\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            strongest_extension = extension\n            max_strength = strength\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        current_strength = calculate_strength(extension)\n        if current_strength > max_strength:\n            strongest_extension = extension\n            max_strength = current_strength\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension):\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        current_strength = calculate_strength(extension)\n        if current_strength > max_strength:\n            strongest_extension = extension\n            max_strength = current_strength\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        current_strength = calculate_strength(extension)\n        if current_strength > max_strength:\n            strongest_extension = extension\n            max_strength = current_strength\n    return f'{class_name}.{strongest_extension}'"], "outputs": "[['Slices.SErviNGSliCes'], ['my_class.AA'], ['TestClass.EXT2'], ['IndexError'], ['SingleExt.OnlyOne'], ['CaseSensitive.ABC'], ['EqualStrength.Aa'], ['MixedCase.XyZ'], ['LongExtension.Short'], ['SpecialChars.Ext!']]", "probability": 0.55, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.9927744539878083, "llm_generated_inputs": "[['Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']], ['my_class', ['AA', 'Be', 'CC']], ['TestClass', ['Ext1', 'EXT2', 'ext3']], ['EmptyClass', []], ['SingleExt', ['OnlyOne']], ['CaseSensitive', ['AbC', 'aBc', 'ABC', 'abc']], ['EqualStrength', ['Aa', 'Bb', 'Cc']], ['MixedCase', ['XyZ', 'xYz', 'Xyz', 'xyz']], ['LongExtension', ['ThisIsAVeryLongExtensionName', 'Short', 'MediumLength']], ['SpecialChars', ['Ext!', 'Ext@', 'Ext#']]]", "input_output_examples": "[[['Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']], ['my_class', ['AA', 'Be', 'CC']]], [['Slices.SErviNGSliCes'], ['my_class.AA']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.49638722699390414}, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": ["from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        CAP = sum((1 for char in extension if char.isupper()))\n        SM = sum((1 for char in extension if char.islower()))\n        return CAP - SM\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for ext in extensions:\n        cap = sum((1 for c in ext if c.isupper()))\n        sm = sum((1 for c in ext if c.islower()))\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for ext in extensions:\n        strength = calculate_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for ext in extensions:\n        strength = calculate_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for ext in extensions:\n        strength = calculate_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        CAP = sum((1 for char in extension if char.isupper()))\n        SM = sum((1 for char in extension if char.islower()))\n        return CAP - SM\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            strongest_extension = extension\n            max_strength = strength\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension):\n        CAP = sum((1 for char in extension if char.isupper()))\n        SM = sum((1 for char in extension if char.islower()))\n        return CAP - SM\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            strongest_extension = extension\n            max_strength = strength\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    for extension in extensions[1:]:\n        current_strength = calculate_strength(extension)\n        if current_strength > max_strength:\n            max_strength = current_strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for ext in extensions:\n        strength = calculate_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'", "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n\n    def calculate_strength(extension: str) -> int:\n        cap = sum((1 for char in extension if char.isupper()))\n        sm = sum((1 for char in extension if char.islower()))\n        return cap - sm\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for ext in extensions:\n        strength = calculate_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'"], "failed_inputs_outputs": "[[], [], [], [], [], [], [], [], [], []]"}
{"task_id": "HumanEval/154", "requirement": "def cycpattern_check(a: str, b: str) -> bool:\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def cycpattern_check(a: str, b: str) -> bool:\n    if not b:\n        return True\n    for i in range(len(b)):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False", "def cycpattern_check(a: str, b: str) -> bool:\n    if not b:\n        return True\n    n = len(b)\n    for i in range(n):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False", "def cycpattern_check(a: str, b: str) -> bool:\n    if not b:\n        return True\n    for i in range(len(b)):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False", "def cycpattern_check(a: str, b: str) -> bool:\n    if not b:\n        return True\n    n = len(b)\n    for i in range(n):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False", "def cycpattern_check(a: str, b: str) -> bool:\n    if not b:\n        return True\n    b_len = len(b)\n    for i in range(b_len):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False", "def cycpattern_check(a: str, b: str) -> bool:\n    if not b:\n        return True\n    for i in range(len(b)):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False", "def cycpattern_check(a: str, b: str) -> bool:\n    if not b:\n        return True\n    for i in range(len(b)):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False", "def cycpattern_check(a: str, b: str) -> bool:\n    if not b:\n        return True\n    for i in range(len(b)):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False", "def cycpattern_check(a: str, b: str) -> bool:\n    if not b:\n        return True\n    n = len(b)\n    for i in range(n):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False", "def cycpattern_check(a: str, b: str) -> bool:\n    if not b:\n        return True\n    for i in range(len(b)):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False", "def cycpattern_check(a: str, b: str) -> bool:\n    if not b:\n        return True\n    for i in range(len(b)):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False", "def cycpattern_check(a: str, b: str) -> bool:\n    if not b:\n        return True\n    for i in range(len(b)):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False", "def cycpattern_check(a: str, b: str) -> bool:\n    if not b:\n        return True\n    for i in range(len(b)):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False", "def cycpattern_check(a: str, b: str) -> bool:\n    if not b:\n        return True\n    for i in range(len(b)):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False", "def cycpattern_check(a: str, b: str) -> bool:\n    if not b:\n        return True\n    for i in range(len(b)):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False", "def cycpattern_check(a: str, b: str) -> bool:\n    if not b:\n        return True\n    n = len(b)\n    for i in range(n):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False", "def cycpattern_check(a: str, b: str) -> bool:\n    if not b:\n        return True\n    for i in range(len(b)):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False", "def cycpattern_check(a: str, b: str) -> bool:\n    if not b:\n        return True\n    for i in range(len(b)):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False", "def cycpattern_check(a: str, b: str) -> bool:\n    if not b:\n        return True\n    for i in range(len(b)):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False", "def cycpattern_check(a: str, b: str) -> bool:\n    if not b:\n        return True\n    for i in range(len(b)):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False"], "outputs": "[[False], [True], [False], [True], [False], [True], [True], [True], [True], [True], [False], [True], [False], [True], [True]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['abcd', 'abd'], ['hello', 'ell'], ['whassup', 'psus'], ['abab', 'baa'], ['efef', 'eeff'], ['himenss', 'simen'], ['abcdef', 'efabcd'], ['xyz', 'xyz'], ['', ''], ['abc', ''], ['', 'abc'], ['a', 'a'], ['abcde', 'edcba'], ['longerword', 'wordlonger'], ['rotation', 'tationro']]", "input_output_examples": "[[['abcd', 'abd'], ['hello', 'ell'], ['whassup', 'psus'], ['abab', 'baa'], ['efef', 'eeff'], ['himenss', 'simen']], [[False], [True], [False], [True], [False], [True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/155", "requirement": "from typing import Tuple\n\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even = 0\n    odd = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"], "outputs": "[[(1, 0)], [(1, 2)], [(1, 2)], [(4, 0)], [(0, 5)], [(4, 0)], [(0, 5)], [(5, 5)], [(5, 5)]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [123], [-123], [2468], [13579], [-2468], [-13579], [1234567890], [-1234567890]]", "input_output_examples": "[[[-12], [123]], [[(1, 1)], [(1, 2)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/156", "requirement": "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def int_to_mini_roman(number: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "def int_to_mini_roman(number: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "def int_to_mini_roman(number: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "def int_to_mini_roman(number: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "def int_to_mini_roman(number: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "def int_to_mini_roman(number: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "def int_to_mini_roman(number: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "def int_to_mini_roman(number: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = []\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num.append(syms[i])\n            number -= val[i]\n        i += 1\n    return ''.join(roman_num).lower()", "def int_to_mini_roman(number: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "def int_to_mini_roman(number: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "def int_to_mini_roman(number: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "def int_to_mini_roman(number: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "def int_to_mini_roman(number: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = []\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num.append(syms[i])\n            number -= val[i]\n        i += 1\n    return ''.join(roman_num).lower()", "def int_to_mini_roman(number: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "def int_to_mini_roman(number: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "def int_to_mini_roman(number: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "def int_to_mini_roman(number: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "def int_to_mini_roman(number: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "def int_to_mini_roman(number: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "def int_to_mini_roman(number: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num"], "outputs": "[['i'], ['v'], ['x'], ['l'], ['c'], ['d'], ['m'], ['iv'], ['ix'], ['xl'], ['xc'], ['cd'], ['cm'], ['xix'], ['clii'], ['cdxxvi'], ['cmxcix'], ['m']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [5], [10], [50], [100], [500], [1000], [4], [9], [40], [90], [400], [900], [19], [152], [426], [999], [1000]]", "input_output_examples": "[[[19], [152], [426]], [['xix'], ['clii'], ['cdxxvi']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/157", "requirement": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    '''", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["import math\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "import math\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "import math\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "import math\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return math.isclose(sides[0] ** 2 + sides[1] ** 2, sides[2] ** 2, rel_tol=1e-09)", "import math\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "import math\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "import math\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "import math\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "import math\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "import math\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "import math\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "import math\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "import math\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "import math\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return math.isclose(sides[0] ** 2 + sides[1] ** 2, sides[2] ** 2, rel_tol=1e-09)", "import math\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "import math\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "import math\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return math.isclose(sides[0] ** 2 + sides[1] ** 2, sides[2] ** 2, rel_tol=1e-09)", "import math\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2"], "outputs": "[[True], [True], [False], [True], [False], [False], [True], [False], [True], [False]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[3, 4, 5], [5, 12, 13], [1, 2, 3], [0, 0, 0], [-3, -4, -5], [3, 4, 6], [6, 8, 10], [1, 1, 1], [7, 24, 25], [10, 10, 10]]", "input_output_examples": "[[[3, 4, 5], [1, 2, 3]], [[True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/158", "requirement": "from typing import List\n\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef find_max(words: List[str]) -> str:\n    return max(sorted(words), key=lambda word: len(set(word)))", "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    return max(sorted(words), key=lambda word: len(set(word)))", "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    return sorted(words, key=lambda x: (-len(set(x)), x))[0]", "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    max_unique = -1\n    result = ''\n    for word in words:\n        unique_count = len(set(word))\n        if unique_count > max_unique or (unique_count == max_unique and word < result):\n            max_unique = unique_count\n            result = word\n    return result", "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    max_unique = -1\n    result = ''\n    for word in words:\n        unique_count = len(set(word))\n        if unique_count > max_unique or (unique_count == max_unique and word < result):\n            max_unique = unique_count\n            result = word\n    return result", "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    max_unique = -1\n    result = ''\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < result):\n            max_unique = unique_chars\n            result = word\n    return result", "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    max_unique = -1\n    result = ''\n    for word in words:\n        unique_count = len(set(word))\n        if unique_count > max_unique or (unique_count == max_unique and word < result):\n            max_unique = unique_count\n            result = word\n    return result", "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    max_unique = -1\n    result = ''\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < result):\n            max_unique = unique_chars\n            result = word\n    return result", "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    return sorted(words, key=lambda x: (-len(set(x)), x))[0]", "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    return sorted(words, key=lambda x: (-len(set(x)), x))[0]", "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    max_unique = -1\n    result_word = ''\n    for word in words:\n        unique_count = len(set(word))\n        if unique_count > max_unique or (unique_count == max_unique and word < result_word):\n            max_unique = unique_count\n            result_word = word\n    return result_word", "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    max_unique = -1\n    result = ''\n    for word in words:\n        unique_count = len(set(word))\n        if unique_count > max_unique or (unique_count == max_unique and word < result):\n            max_unique = unique_count\n            result = word\n    return result", "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    return max(sorted(words), key=lambda word: len(set(word)))", "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    return sorted(words, key=lambda x: (-len(set(x)), x))[0]", "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    return sorted(words, key=lambda x: (-len(set(x)), x))[0]", "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    max_unique = -1\n    result = ''\n    for word in words:\n        unique_count = len(set(word))\n        if unique_count > max_unique or (unique_count == max_unique and word < result):\n            max_unique = unique_count\n            result = word\n    return result", "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    max_unique = -1\n    result = ''\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < result):\n            max_unique = unique_chars\n            result = word\n    return result", "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    max_unique = -1\n    result = ''\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < result):\n            max_unique = unique_chars\n            result = word\n    return result", "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    max_unique = -1\n    result = ''\n    for word in words:\n        unique_count = len(set(word))\n        if unique_count > max_unique or (unique_count == max_unique and word < result):\n            max_unique = unique_count\n            result = word\n    return result", "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    max_unique = -1\n    result = ''\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < result):\n            max_unique = unique_chars\n            result = word\n    return result"], "outputs": "[['string'], ['enam'], ['aaaaaaa'], ['abc'], ['a'], ['python'], ['characters'], ['string'], ['repeat'], ['zebra']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['name', 'of', 'string']], [['name', 'enam', 'game']], [['aaaaaaa', 'bb', 'cc']], [['abc', 'def', 'ghi']], [['a', 'b', 'c']], [['hello', 'world', 'python']], [['unique', 'characters', 'test']], [['', 'empty', 'string']], [['repeat', 'repeat', 'repeat']], [['zebra', 'apple', 'banana']]]", "input_output_examples": "[[[['name', 'of', 'string']], [['name', 'enam', 'game']], [['aaaaaaa', 'bb', 'cc']]], [['string'], ['enam'], ['aaaaaaa']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/159", "requirement": "from typing import List\n\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]", "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    carrots_left = remaining - eaten\n    return [total_eaten, carrots_left]", "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    carrots_left = remaining - eaten\n    return [total_eaten, carrots_left]", "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    left = remaining - eaten\n    return [total_eaten, left]", "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]", "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]", "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    left = remaining - eaten\n    return [total_eaten, left]", "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    left = max(0, remaining - eaten)\n    return [total_eaten, left]", "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    left = remaining - eaten\n    return [total_eaten, left]", "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    left = remaining - eaten\n    return [total_eaten, left]", "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]", "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    left = remaining - eaten\n    return [total_eaten, left]", "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]", "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    left = remaining - eaten\n    return [total_eaten, left]", "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    left = remaining - eaten\n    return [total_eaten, left]", "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    carrots_left = remaining - eaten\n    return [total_eaten, carrots_left]", "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    left = remaining - eaten\n    return [total_eaten, left]", "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    carrots_left = remaining - eaten\n    return [total_eaten, carrots_left]"], "outputs": "[[[11, 4]], [[12, 1]], [[11, 0]], [[7, 0]], [[0, 0]], [[0, 100]], [[100, 0]], [[250, 0]], [[1100, 100]], [[2000, 0]], [[1000, 0]], [[1000, 1000]], [[1000, 0]], [[1000, 0]], [[1500, 0]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[5, 6, 10], [4, 8, 9], [1, 10, 10], [2, 11, 5], [0, 0, 0], [0, 0, 100], [50, 50, 50], [100, 200, 150], [500, 600, 700], [1000, 1000, 1000], [0, 1000, 1000], [1000, 0, 1000], [1000, 1000, 0], [500, 1000, 500], [1000, 500, 500]]", "input_output_examples": "[[[5, 6, 10], [4, 8, 9], [1, 10, 10], [2, 11, 5]], [[[11, 4]], [[12, 1]], [[11, 0]], [[7, 0]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/160", "requirement": "from typing import List\n\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    if not operator or not operand:\n        return 0\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    if not operator or not operand:\n        return 0\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    if not operator or not operand:\n        return 0\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    if not operator or not operand:\n        return 0\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    if not operator or not operand:\n        return 0\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    if not operator or not operand:\n        return 0\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    if not operator or not operand:\n        return 0\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    if not operator or not operand:\n        return 0\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    if not operator or not operand:\n        return 0\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    if not operator or not operand:\n        return 0\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    if not operator or not operand:\n        return 0\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    if not operator or not operand:\n        return 0\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    if not operator or not operand:\n        return 0\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    if not operator or not operand:\n        return 0\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    if not operator or not operand:\n        return 0\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    if not operator or not operand:\n        return 0\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    if not operator or not operand:\n        return 0\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result"], "outputs": "[[15], [5], [8], [4], [15], [24], [5], [12], [5], [-8]]", "probability": 1.0, "is_align_req": false, "test_consistency": 0.0, "failed_input_output_examples": "[[[['+', '*', '-'], [2, 3, 4, 5]], [15], [9]]]"}], "entropy": 0, "llm_generated_inputs": "[[['+', '*', '-'], [2, 3, 4, 5]], [['*', '+', '/'], [1, 2, 3, 4]], [['**', '//'], [5, 2, 3]], [['-', '-', '-'], [10, 2, 1, 3]], [['+'], [7, 8]], [['*', '*', '*'], [1, 2, 3, 4]], [['//', '+'], [9, 3, 2]], [['**', '-', '+'], [2, 3, 1, 5]], [['+', '//'], [10, 0, 2]], [['*', '-', '**'], [0, 1, 2, 3]]]", "input_output_examples": "[[[['+', '*', '-'], [2, 3, 4, 5]]], [[9]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false, "ambiguity": 0.5}, "repaired_clusters": null, "original_passk": 0.0, "repaired_passk": 0.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/161", "requirement": "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["def solve(s: str) -> str:\n    has_letter = any((c.isalpha() for c in s))\n    if has_letter:\n        return ''.join([c.swapcase() if c.isalpha() else c for c in s])\n    else:\n        return s[::-1]", "def solve(s: str) -> str:\n    has_letters = any((c.isalpha() for c in s))\n    if has_letters:\n        return ''.join([c.swapcase() if c.isalpha() else c for c in s])\n    else:\n        return s[::-1]", "def solve(s: str) -> str:\n    if not any((c.isalpha() for c in s)):\n        return s[::-1]\n    result = []\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result.append(c.upper())\n            else:\n                result.append(c.lower())\n        else:\n            result.append(c)\n    return ''.join(result)", "def solve(s: str) -> str:\n    if not any((c.isalpha() for c in s)):\n        return s[::-1]\n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)", "def solve(s: str) -> str:\n    if not any((c.isalpha() for c in s)):\n        return s[::-1]\n    result = []\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result.append(c.upper())\n            else:\n                result.append(c.lower())\n        else:\n            result.append(c)\n    return ''.join(result)", "def solve(s: str) -> str:\n    if not any((c.isalpha() for c in s)):\n        return s[::-1]\n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)", "def solve(s: str) -> str:\n    if not any((c.isalpha() for c in s)):\n        return s[::-1]\n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)", "def solve(s: str) -> str:\n    if not any((c.isalpha() for c in s)):\n        return s[::-1]\n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)", "def solve(s: str) -> str:\n    if not any((c.isalpha() for c in s)):\n        return s[::-1]\n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)", "def solve(s: str) -> str:\n    if not any((c.isalpha() for c in s)):\n        return s[::-1]\n    result = []\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result.append(c.upper())\n            else:\n                result.append(c.lower())\n        else:\n            result.append(c)\n    return ''.join(result)", "def solve(s: str) -> str:\n    has_letter = any((c.isalpha() for c in s))\n    if has_letter:\n        return ''.join([c.swapcase() if c.isalpha() else c for c in s])\n    else:\n        return s[::-1]", "def solve(s: str) -> str:\n    has_letters = any((c.isalpha() for c in s))\n    if has_letters:\n        return ''.join([c.swapcase() if c.isalpha() else c for c in s])\n    else:\n        return s[::-1]", "def solve(s: str) -> str:\n    has_letters = any((c.isalpha() for c in s))\n    if not has_letters:\n        return s[::-1]\n    return ''.join([c.swapcase() if c.isalpha() else c for c in s])", "def solve(s: str) -> str:\n    if not any((c.isalpha() for c in s)):\n        return s[::-1]\n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)", "def solve(s: str) -> str:\n    if not any((c.isalpha() for c in s)):\n        return s[::-1]\n    return ''.join([c.swapcase() if c.isalpha() else c for c in s])", "def solve(s: str) -> str:\n    has_letters = any((c.isalpha() for c in s))\n    if has_letters:\n        return ''.join([c.swapcase() if c.isalpha() else c for c in s])\n    else:\n        return s[::-1]", "def solve(s: str) -> str:\n    has_letter = any((c.isalpha() for c in s))\n    if has_letter:\n        return ''.join([c.swapcase() if c.isalpha() else c for c in s])\n    else:\n        return s[::-1]", "def solve(s: str) -> str:\n    if not any((c.isalpha() for c in s)):\n        return s[::-1]\n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)", "def solve(s: str) -> str:\n    has_letter = any((c.isalpha() for c in s))\n    if has_letter:\n        return ''.join((c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s))\n    else:\n        return s[::-1]", "def solve(s: str) -> str:\n    if not any((c.isalpha() for c in s)):\n        return s[::-1]\n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)"], "outputs": "[['4321'], ['AB'], ['#A@c'], ['hELLO wORLD!'], [''], ['123ABCdef!@#'], ['nOsPACEShERE'], ['   '], ['a1b2c3'], [')(*&^%$#@!']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['1234'], ['ab'], ['#a@C'], ['Hello World!'], [''], ['123abcDEF!@#'], ['NoSpacesHere'], ['   '], ['A1B2C3'], ['!@#$%^&*()']]", "input_output_examples": "[[['1234'], ['ab'], ['#a@C']], [['4321'], ['AB'], ['#A@c']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/162", "requirement": "from typing import Union\n\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"cluster_list": [{"programs_str": ["import hashlib\nfrom typing import Union\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "from typing import Union\nimport hashlib\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "from typing import Union\nimport hashlib\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "import hashlib\nfrom typing import Union\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "from typing import Union\nimport hashlib\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "from typing import Union\nimport hashlib\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "import hashlib\nfrom typing import Union\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "from typing import Union\nimport hashlib\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "from typing import Union\nimport hashlib\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "from typing import Union\nimport hashlib\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "from typing import Union\nimport hashlib\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "import hashlib\nfrom typing import Union\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "import hashlib\nfrom typing import Union\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "from typing import Union\nimport hashlib\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "from typing import Union\nimport hashlib\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "from typing import Union\nimport hashlib\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "from typing import Union\nimport hashlib\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "from typing import Union\nimport hashlib\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "from typing import Union\nimport hashlib\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "from typing import Union\nimport hashlib\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"], "outputs": "[['3e25960a79dbc69b674cd4ec67a72c62'], ['f88d04b02e293ca1e0f73f5dbe3a4d4c'], ['e807f1fcf82d132f9bb018ca6738a19f'], ['05b28d17a7b6e7024b6e5d8cc43a8bf7'], [None], ['0cc175b9c0f1b6a831c399e269772661'], ['7fc56270e7a70fa81a5935b72eacbe29'], ['432612124ae6222a75769bcd6c9328e2'], ['f37ca7bc6da4f4438acd6702f14eb359'], ['37a6259cc0c1dae299a7866489dff0bd'], ['6adf97f83acf6453d4a6a4b1070f3754']]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Hello world'], ['Python is fun'], ['1234567890'], ['!@#$%^&*()'], [''], ['a'], ['A'], ['This is a longer string with spaces and special characters: !@#$%^&*()'], ['   leading and trailing spaces   '], ['null'], ['None']]", "input_output_examples": "[[['Hello world'], ['']], [['3e25960a79dbc69b674cd4ec67a72c62'], [None]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "repaired_clusters": null, "original_passk": 1.0, "repaired_passk": 1.0, "generated_programs": [], "failed_inputs_outputs": "[]"}
{"task_id": "HumanEval/163", "requirement": "from typing import List\n\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"", "repaired_requirement": "def generate_integers(a: int, b: int) -> List[int]:\n    \"\"\"\n    Given two positive integers a and b, return the even single-digit integers between a and b, inclusive, in ascending order.\n\n    Args:\n        a (int): The first positive integer.\n        b (int): The second positive integer.\n\n    Returns:\n        List[int]: A list of even single-digit integers between a and b, sorted in ascending order.\n\n    Notes:\n        - The function considers only single-digit even numbers (0, 2, 4, 6, 8) within the range [min(a, b), max(a, b)].\n        - The range includes both a and b if they are even single-digit numbers.\n        - The result is always sorted in ascending order.\n    \"\"\"", "original_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    result = []\n    for num in range(start, end + 1):\n        if num % 2 == 0:\n            result.append(num)\n    return result", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    result = []\n    for num in range(start, end + 1):\n        if num % 2 == 0:\n            result.append(num)\n    return result", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = [num for num in range(start, end + 1) if num % 2 == 0]\n    return sorted(even_digits)", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = []\n    for num in range(start, end + 1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    result = []\n    for num in range(start, end + 1):\n        if num % 2 == 0:\n            result.append(num)\n    return result", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = {0, 2, 4, 6, 8}\n    result = []\n    for num in range(start, end + 1):\n        if num % 10 in even_digits:\n            result.append(num)\n    return sorted(result)", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    result = []\n    for num in range(start, end + 1):\n        if num % 2 == 0:\n            result.append(num)\n    return result", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    result = []\n    for num in range(start, end + 1):\n        if num % 2 == 0:\n            result.append(num)\n    return sorted(result)", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    result = []\n    for num in range(start, end + 1):\n        if num % 2 == 0:\n            result.append(num)\n    return result", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = []\n    for num in range(start, end + 1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return sorted(even_digits)"], "outputs": "[[[2, 4, 6, 8]], [[2, 4, 6, 8]], [[10, 12, 14]], [[]], [[0]], [[20, 22, 24, 26, 28, 30]], [[20, 22, 24, 26, 28, 30]], [[100, 102, 104]], [[100, 102, 104]], [[100]], [[100]], [[200]]]", "probability": 0.5, "is_align_req": false, "test_consistency": 0.6666666666666667, "failed_input_output_examples": "[[[10, 14], [[10, 12, 14]], [[]]]]"}, {"programs_str": ["from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = {0, 2, 4, 6, 8}\n    result = []\n    for num in range(start, end + 1):\n        if num in even_digits:\n            result.append(num)\n    return sorted(result)", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = [0, 2, 4, 6, 8]\n    result = []\n    for num in range(start, end + 1):\n        if num in even_digits:\n            result.append(num)\n    return result", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = {0, 2, 4, 6, 8}\n    result = []\n    for num in range(start, end + 1):\n        if num in even_digits:\n            result.append(num)\n    return result", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = {0, 2, 4, 6, 8}\n    result = []\n    for num in range(start, end + 1):\n        if num in even_digits:\n            result.append(num)\n    return sorted(result)", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = [0, 2, 4, 6, 8]\n    result = []\n    for num in range(start, end + 1):\n        if num in even_digits:\n            result.append(num)\n    return result"], "outputs": "[[[2, 4, 6, 8]], [[2, 4, 6, 8]], [[]], [[]], [[0]], [[]], [[]], [[]], [[]], [[]], [[]], [[]]]", "probability": 0.25, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = {0, 2, 4, 6, 8}\n    result = []\n    for num in range(start, end + 1):\n        if all((int(digit) in even_digits for digit in str(num))):\n            result.append(num)\n    return result", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = {0, 2, 4, 6, 8}\n    result = []\n    for num in range(start, end + 1):\n        if all((int(digit) in even_digits for digit in str(num))):\n            result.append(num)\n    return result", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = {0, 2, 4, 6, 8}\n    result = []\n    for num in range(start, end + 1):\n        if all((int(digit) in even_digits for digit in str(num))):\n            result.append(num)\n    return result", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = {0, 2, 4, 6, 8}\n    result = []\n    for num in range(start, end + 1):\n        if all((int(digit) in even_digits for digit in str(num))):\n            result.append(num)\n    return result", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = {0, 2, 4, 6, 8}\n    result = []\n    for num in range(start, end + 1):\n        if all((int(digit) in even_digits for digit in str(num))):\n            result.append(num)\n    return result"], "outputs": "[[[2, 4, 6, 8]], [[2, 4, 6, 8]], [[]], [[]], [[0]], [[20, 22, 24, 26, 28]], [[20, 22, 24, 26, 28]], [[]], [[]], [[]], [[]], [[200]]]", "probability": 0.25, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.946394630357186, "llm_generated_inputs": "[[2, 8], [8, 2], [10, 14], [1, 1], [0, 0], [20, 30], [30, 20], [100, 105], [105, 100], [99, 101], [101, 99], [200, 200]]", "input_output_examples": "[[[2, 8], [8, 2], [10, 14]], [[[2, 4, 6, 8]], [[2, 4, 6, 8]], [[]]]]", "weighted_test_consistency": 0.8333333333333334, "at_least_one_align": true, "ambiguity": 0.5565306485119264}, "repaired_clusters": {"cluster_list": [{"programs_str": ["from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_single_digits = [0, 2, 4, 6, 8]\n    return sorted([num for num in even_single_digits if start <= num <= end])", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = [0, 2, 4, 6, 8]\n    return sorted([num for num in even_digits if start <= num <= end])", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = [0, 2, 4, 6, 8]\n    return sorted([num for num in even_digits if start <= num <= end])", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = [0, 2, 4, 6, 8]\n    result = [num for num in even_digits if start <= num <= end]\n    return sorted(result)", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = {0, 2, 4, 6, 8}\n    return sorted([num for num in range(start, end + 1) if num in even_digits])", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_single_digits = [num for num in range(start, end + 1) if num in {0, 2, 4, 6, 8}]\n    return sorted(even_single_digits)", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = [0, 2, 4, 6, 8]\n    return sorted([num for num in even_digits if start <= num <= end])", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_single_digits = [num for num in range(start, end + 1) if num in {0, 2, 4, 6, 8}]\n    return sorted(even_single_digits)", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_single_digits = [num for num in range(start, end + 1) if num in {0, 2, 4, 6, 8}]\n    return sorted(even_single_digits)", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_single_digits = [num for num in range(start, end + 1) if num in {0, 2, 4, 6, 8}]\n    return sorted(even_single_digits)", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = [0, 2, 4, 6, 8]\n    return sorted([num for num in even_digits if start <= num <= end])", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = [0, 2, 4, 6, 8]\n    return sorted([num for num in even_digits if start <= num <= end])", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_single_digits = [0, 2, 4, 6, 8]\n    return sorted([num for num in even_single_digits if start <= num <= end])", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_single_digits = [num for num in range(start, end + 1) if num in {0, 2, 4, 6, 8}]\n    return sorted(even_single_digits)", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_single_digits = [num for num in range(start, end + 1) if num in {0, 2, 4, 6, 8}]\n    return sorted(even_single_digits)", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = [0, 2, 4, 6, 8]\n    result = [num for num in even_digits if start <= num <= end]\n    return sorted(result)", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = {0, 2, 4, 6, 8}\n    return sorted([num for num in range(start, end + 1) if num in even_digits])", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_single_digits = [num for num in range(start, end + 1) if num in {0, 2, 4, 6, 8}]\n    return sorted(even_single_digits)", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_single_digits = [0, 2, 4, 6, 8]\n    return sorted([num for num in even_single_digits if start <= num <= end])", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = [0, 2, 4, 6, 8]\n    return sorted([num for num in even_digits if start <= num <= end])"], "outputs": "[[[2, 4, 6, 8]], [[2, 4, 6, 8]], [[]], [[]], [[0]], [[]], [[]], [[]], [[]], [[]], [[]], [[]]]", "probability": 1.0, "is_align_req": true, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[2, 8], [8, 2], [10, 14], [1, 1], [0, 0], [20, 30], [30, 20], [100, 105], [105, 100], [99, 101], [101, 99], [200, 200]]", "input_output_examples": "[[[2, 8], [8, 2], [10, 14]], [[[2, 4, 6, 8]], [[2, 4, 6, 8]], [[]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true, "ambiguity": 0.0}, "original_passk": 0.0, "repaired_passk": 1.0, "generated_programs": ["from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = [0, 2, 4, 6, 8]\n    result = [num for num in even_digits if start <= num <= end]\n    return sorted(result)", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = [0, 2, 4, 6, 8]\n    return sorted([num for num in even_digits if start <= num <= end])", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_single_digits = [num for num in range(start, end + 1) if num in {0, 2, 4, 6, 8}]\n    return sorted(even_single_digits)", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_single_digits = [num for num in range(start, end + 1) if num in {0, 2, 4, 6, 8}]\n    return sorted(even_single_digits)", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_single_digits = [num for num in range(start, end + 1) if num in {0, 2, 4, 6, 8}]\n    return sorted(even_single_digits)", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = [0, 2, 4, 6, 8]\n    return sorted([num for num in even_digits if start <= num <= end])", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_single_digits = [num for num in range(start, end + 1) if num in {0, 2, 4, 6, 8}]\n    return sorted(even_single_digits)", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = [0, 2, 4, 6, 8]\n    return sorted([num for num in even_digits if start <= num <= end])", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_single_digits = [num for num in range(start, end + 1) if num in {0, 2, 4, 6, 8}]\n    return sorted(even_single_digits)", "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    start = min(a, b)\n    end = max(a, b)\n    even_digits = {0, 2, 4, 6, 8}\n    result = [num for num in range(start, end + 1) if num in even_digits]\n    return sorted(result)"], "failed_inputs_outputs": "[[], [], [], [], [], [], [], [], [], []]"}
