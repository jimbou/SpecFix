{"requirement": "def word_search(query, seq):\"\"\"Write a method that will search an array of strings for all strings that contain another string, ignoring capitalization. Then return an array of the found strings. \n\nThe method takes two parameters, the query string and the array of strings to search, and returns an array. \n\nIf the string isn't contained in any of the strings in the array, the method returns an array containing a single string: \"Empty\" (or `Nothing` in Haskell, or \"None\" in Python and C)\n\"\"\"", "inputs": [["ab", ["za", "ab", "abc", "zab", "zbc"]], ["aB", ["za", "ab", "abc", "zab", "zbc"]], ["ab", ["za", "aB", "Abc", "zAB", "zbc"]], ["abcd", ["za", "aB", "Abc", "zAB", "zbc"]]], "outputs": [[["ab", "abc", "zab"]], [["ab", "abc", "zab"]], [["aB", "Abc", "zAB"]], [["None"]]], "starter_code": "def word_search(query, seq):", "canonical_solution": "def word_search(query, seq):\n    return [x for x in seq if query.lower() in x.lower()] or ['None']", "entry_point": "word_search", "task_id": "TACO_lite/5", "input_output_examples": [[["foefet", "toffee"], ["Buckethead", "DeathCubeK"]], [[true], [true]]]}
{"requirement": "def trump_detector(ts):\"\"\"\nWe all love the future president (or Führer or duce or sōtō as he could find them more fitting) donald trump, but we might fear that some of his many fans like John Miller or John Barron are not making him justice, sounding too much like their (and our as well, of course!) hero and thus risking to compromise him.\n\nFor this reason we need to create a function to detect the original and unique rythm of our beloved leader, typically having a lot of extra vowels, all ready to fight the estabilishment.\n\nThe index is calculated based on how many vowels are repeated more than once in a row and dividing them by the total number of vowels a petty enemy of America would use.\n\n**Notes:** vowels are only the ones in the patriotic group of \"aeiou\": \"y\" should go back to Greece if she thinks she can have the same rights of true American vowels; there is always going to be at least a vowel, as silence is the option of coward Kenyan/terrorist presidents and their friends.\n\nRound each result by two decimal digits: there is no place for small fry in Trump's America.\n\n*Special thanks for [Izabela](https://www.codewars.com/users/ijelonek) for support and proof-reading.*\n\"\"\"", "inputs": [["I will build a huge wall"], ["HUUUUUGEEEE WAAAAAALL"], ["MEXICAAAAAAAANS GOOOO HOOOMEEEE"], ["America NUUUUUKEEEE Oooobaaaamaaaaa"], ["listen migrants: IIII KIIIDD YOOOUUU NOOOOOOTTT"]], "outputs": [[0], [4], [2.5], [1.89], [1.56]], "starter_code": "def trump_detector(ts):", "canonical_solution": "import re\n\ndef trump_detector(ts):\n    x = re.findall('([aeiou])(\\\\1*)', ts, re.I)\n    y = [len(i[1]) for i in x]\n    return round(sum(y) / len(y), 2)", "entry_point": "trump_detector", "task_id": "TACO_lite/7", "input_output_examples": [[["Hello codewarrior"], ["a42"], [42], [[2, 12]], [{"name": "Abraham"}], ["My aunt sally"]], [["HC"], ["Not letters"], ["Not a string"], ["Not a string"], ["Not a string"], ["MAS"]]]}
{"requirement": "def likes(names):\"\"\"\nYou probably know the \"like\" system from Facebook and other pages. People can \"like\" blog posts, pictures or other items. We want to create the text that should be displayed next to such an item.\n\nImplement a function `likes :: [String] -> String`, which must take in input array, containing the names of people who like an item. It must return the display text as shown in the examples:\n\nFor 4 or more names, the number in `and 2 others` simply increases.\n\"\"\"", "inputs": [[[]], [["Peter"]], [["Jacob", "Alex"]], [["Max", "John", "Mark"]], [["Alex", "Jacob", "Mark", "Max"]]], "outputs": [["no one likes this"], ["Peter likes this"], ["Jacob and Alex like this"], ["Max, John and Mark like this"], ["Alex, Jacob and 2 others like this"]], "starter_code": "def likes(names):", "canonical_solution": "def likes(names):\n    n = len(names)\n    return {0: 'no one likes this', 1: '{} likes this', 2: '{} and {} like this', 3: '{}, {} and {} like this', 4: '{}, {} and {others} others like this'}[min(4, n)].format(*names[:3], others=n - 2)", "entry_point": "likes", "task_id": "TACO_lite/8", "input_output_examples": [[["x - 5 = 20"], ["20 = 5 * x - 5"], ["5 * x = x + 8"], ["(5 - 3) * x = x + 2"]], [[25], [5], [2], [2]]]}
{"requirement": "def fizz_buzz_cuckoo_clock(t):\"\"\"\n## Your story\nYou've always loved both Fizz Buzz katas and cuckoo clocks, and when you walked by a garage sale and saw an ornate cuckoo clock with a missing pendulum, and a \"Beyond-Ultimate Raspberry Pi Starter Kit\" filled with all sorts of sensors and motors and other components, it's like you were suddenly hit by a beam of light and knew that it was your mission to combine the two to create a computerized Fizz Buzz cuckoo clock!\n\nYou took them home and set up shop on the kitchen table, getting more and more excited as you got everything working together just perfectly. Soon the only task remaining was to write a function to select from the sounds you had recorded depending on what time it was:\n\n## Your plan\n* When a minute is evenly divisible by three, the clock will say the word \"Fizz\".\n* When a minute is evenly divisible by five, the clock will say the word \"Buzz\".\n* When a minute is evenly divisible by both, the clock will say \"Fizz Buzz\", with two exceptions:\n  1. On the hour, instead of \"Fizz Buzz\", the clock door will open, and the cuckoo bird will come out and \"Cuckoo\" between one and twelve times depending on the hour.\n  2. On the half hour, instead of \"Fizz Buzz\", the clock door will open, and the cuckoo will come out and \"Cuckoo\" just once. \n* With minutes that are not evenly divisible by either three or five, at first you had intended to have the clock just say the numbers ala Fizz Buzz, but then you decided at least for version 1.0 to just have the clock make a quiet, subtle \"tick\" sound for a little more clock nature and a little less noise.\n\nYour input will be a string containing hour and minute values in 24-hour time, separated by a colon, and with leading zeros. \n\nYour return value will be a string containing the combination of Fizz, Buzz, Cuckoo, and/or tick sounds that the clock needs to make at that time, separated by spaces. Note that although the input is in 24-hour time, cuckoo clocks' cuckoos are in 12-hour time. \n\nHave fun!\n\"\"\"", "inputs": [["13:34"], ["21:00"], ["11:15"], ["03:03"], ["14:30"], ["08:55"], ["00:00"], ["12:00"]], "outputs": [["tick"], ["Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo"], ["Fizz Buzz"], ["Fizz"], ["Cuckoo"], ["Buzz"], ["Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo"], ["Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo"]], "starter_code": "def fizz_buzz_cuckoo_clock(t):", "canonical_solution": "def fizz_buzz_cuckoo_clock(t):\n    h, m = list(map(int, t.split(':')))\n    h = h - 12 if h > 12 else h + 12 if h == 0 else h\n    if m == 0:\n        return ' '.join(('Cuckoo' for i in range(h)))\n    if m == 30:\n        return 'Cuckoo'\n    if m % 3 == 0 and m % 5 == 0:\n        return 'Fizz Buzz'\n    if m % 3 == 0:\n        return 'Fizz'\n    if m % 5 == 0:\n        return 'Buzz'\n    return 'tick'", "entry_point": "fizz_buzz_cuckoo_clock", "task_id": "TACO_lite/11", "input_output_examples": [[[[-1, -1, -1]], [[1, 2, 3, 4]], [[1, 2, 3, 4, 5]], [[1, 2, 3]]], [[-4], [20], [48], [8]]]}
{"requirement": "def human_years_cat_years_dog_years(x):\"\"\"\n# Kata Task\n\nI have a cat and a dog.\n\nI got them at the same time as kitten/puppy. That was `humanYears` years ago.\n\nReturn their respective ages now as [`humanYears`,`catYears`,`dogYears`]\n\nNOTES:\n* humanYears >= 1\n* humanYears are whole numbers only\n\n## Cat Years\n\n* `15` cat years for first year\n* `+9` cat years for second year\n* `+4` cat years for each year after that\n\n## Dog Years\n\n* `15` dog years for first year\n* `+9` dog years for second year\n* `+5` dog years for each year after that\n\n\n\n**References**\n\n* http://www.catster.com/cats-101/calculate-cat-age-in-cat-years\n* http://www.slate.com/articles/news_and_politics/explainer/2009/05/a_dogs_life.html\n\n\n\nIf you liked this Kata there is another related one here\n\"\"\"", "inputs": [[1], [2], [10]], "outputs": [[[1, 15, 15]], [[2, 24, 24]], [[10, 56, 64]]], "starter_code": "def human_years_cat_years_dog_years(x):", "canonical_solution": "def human_years_cat_years_dog_years(x):\n    return [x, 24 + (x - 2) * 4 if x != 1 else 15, 24 + (x - 2) * 5 if x != 1 else 15]", "entry_point": "human_years_cat_years_dog_years", "task_id": "TACO_lite/13", "input_output_examples": [[[6], [52]], [["ace", "four", "two", "five", "three", "six"], [8]]]}
{"requirement": "def socialist_distribution(population, minimum):\"\"\"\nA core idea of several left-wing ideologies is that the wealthiest should *support* the poorest, no matter what and that is exactly what you are called to do using this kata (which, on a side note, was born out of the necessity to redistribute the width of `div`s into a given container).\n\nYou will be given two parameters, `population` and `minimum`: your goal is to give to each one according to his own needs (which we assume to be equal to `minimum` for everyone, no matter what), taking from the richest (bigger numbers) first.\n\nIf you happen to have few people as the richest, just take from the ones with the lowest index (the closest to the left, in few words) in the array first, on a 1:1 based heroic proletarian redistribution, until everyone is satisfied.\n\nTo clarify this rule, consider removing `minimum` from every member of the population, then iteratively (or recursively) adding 1 to the poorest while removing 1 from the richest. Pick the element most at left if more elements exist with the same level of minimal poverty, as they are certainly even more aligned with the party will than other poor people; similarly, it is ok to take from the richest one on the left first, so they can learn their lesson and be more kind, possibly giving more *gifts* to the inspectors of the State!\n\nIf giving `minimum` is unfeasable with the current resources (as it often comes to be the case in socialist communities...), just return an empty array `[]`.\n\"\"\"", "inputs": [[[5, 5, 5, 15, 70], 5], [[20, 20, 20, 20, 20], 20], [[5, 5, 5, 42, 43], 5], [[2, 3, 5, 45, 45], 30], [[30, 30, 30, 30, 30], 30]], "outputs": [[[5, 5, 5, 15, 70]], [[20, 20, 20, 20, 20]], [[5, 5, 5, 42, 43]], [[]], [[30, 30, 30, 30, 30]]], "starter_code": "def socialist_distribution(population, minimum):", "canonical_solution": "def socialist_distribution(population, minimum):\n    if minimum > sum(population) // len(population):\n        return []\n    while min(population) < minimum:\n        population[population.index(min(population))] += 1\n        population[population.index(max(population))] -= 1\n    return population", "entry_point": "socialist_distribution", "task_id": "TACO_lite/15", "input_output_examples": [[["me", ["home", "milk", "Mercury", "fish"]], ["ab", ["za", "ab", "abc", "zab", "zbc"]]], [["home", "Mercury"], ["ab", "abc", "zab"]]]}
{"requirement": "def beasts(heads, tails):\"\"\"\nYou're in ancient Greece and giving Philoctetes a hand in preparing a training exercise for Hercules! You've filled a pit with two different ferocious mythical creatures for Hercules to battle!\n\nThe formidable **\"Orthus\"** is a 2 headed dog with 1 tail.  The mighty **\"Hydra\"** has 5 heads and 1 tail. \n\nBefore Hercules goes in, he asks you \"How many of each beast am  I up against!?\".\n\nYou know the total number of heads and the total number of tails, that's the dangerous parts, right? But you didn't consider how many of each beast. \n\n## Task\n\nGiven the number of heads and the number of tails, work out the number of each mythical beast! \n\nThe data is given as two parameters. Your answer should be returned as an array:\n\nIf there aren't any cases for the given amount of heads and tails - return \"No solutions\" or null (C#).\n\"\"\"", "inputs": [[123, 39], [371, 88], [24, 12], [113, 37], [635, 181], [25, 555], [12, 25], [54, 956], [5455, 54956], [0, 0], [-1, -1], [-45, 5], [99, 0], [0, 99], [5, -55]], "outputs": [[[24, 15]], [[23, 65]], [[12, 0]], [[24, 13]], [[90, 91]], ["No solutions"], ["No solutions"], ["No solutions"], ["No solutions"], [[0, 0]], ["No solutions"], ["No solutions"], ["No solutions"], ["No solutions"], ["No solutions"]], "starter_code": "def beasts(heads, tails):", "canonical_solution": "def beasts(heads, tails):\n    orthus = (5 * tails - heads) / 3\n    hydra = tails - orthus\n    return [orthus, hydra] if orthus >= 0 and hydra >= 0 else 'No solutions'", "entry_point": "beasts", "task_id": "TACO_lite/19", "input_output_examples": [[[[92, 94, 99]], [[50, 60, 70, 80, 90]]], [["A"], ["C"]]]}
{"requirement": "def sum_dig_pow(a, b):\"\"\"\nThe number is the first integer with more than one digit that fulfills the property partially introduced in the title of this kata. \nWhat's the use of saying \"Eureka\"? Because this sum gives the same number.\n\nWe need a function to collect these numbers, that may receive two integers ```a```, ```b``` that defines the range ```[a, b]``` (inclusive) and outputs a list of the sorted numbers in the range that fulfills the property described above.\n\nIf there are no numbers of this kind in the range [a, b] the function should output an empty list.\n\nEnjoy it!!\n\"\"\"", "inputs": [[1, 100], [10, 89], [10, 100], [90, 100], [90, 150], [50, 150], [10, 150], [89, 135]], "outputs": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 89]], [[89]], [[89]], [[]], [[135]], [[89, 135]], [[89, 135]], [[89, 135]]], "starter_code": "def sum_dig_pow(a, b):", "canonical_solution": "def dig_pow(n):\n    return sum((int(x) ** y for y, x in enumerate(str(n), 1)))\n\ndef sum_dig_pow(a, b):\n    return [x for x in range(a, b + 1) if x == dig_pow(x)]", "entry_point": "sum_dig_pow", "task_id": "TACO_lite/21", "input_output_examples": [[["I will build a huge wall"], ["HUUUUUGEEEE WAAAAAALL"], ["listen migrants: IIII KIIIDD YOOOUUU NOOOOOOTTT"]], [[0], [4], [1.56]]]}
{"requirement": "def interleave(*args):\"\"\"\n```if-not:ruby\nCreate a function, that accepts an arbitrary number of arrays and returns a single array generated by alternately appending elements from the passed in arguments. If one of them is shorter than the others, the result should be padded with empty elements.\n```\n```if:ruby\nCreate a function, that accepts an arbitrary number of arrays and returns a single array generated by alternately appending elements from the passed in arguments. If one of them is shorter than the others, the result should be padded with `nil`s.\n```\n\"\"\"", "inputs": [[[1, 2, 3], ["c", "d", "e"]], [[1, 2, 3], [4, 5]], [[1, 2], [3, 4, 5]], [[null], [null, null], [null, null, null]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[]]], "outputs": [[[1, "c", 2, "d", 3, "e"]], [[1, 4, 2, 5, 3, null]], [[1, 3, 2, 4, null, 5]], [[null, null, null, null, null, null, null, null, null]], [[1, 4, 7, 2, 5, 8, 3, 6, 9]], [[]]], "starter_code": "def interleave(*args):", "canonical_solution": "from itertools import chain, zip_longest\n\ndef interleave(*args):\n    return list(chain.from_iterable(zip_longest(*args)))", "entry_point": "interleave", "task_id": "TACO_lite/22", "input_output_examples": [[[[]], [["Peter"]], [["Jacob", "Alex"]], [["Max", "John", "Mark"]], [["Alex", "Jacob", "Mark", "Max"]]], [["no one likes this"], ["Peter likes this"], ["Jacob and Alex like this"], ["Max, John and Mark like this"], ["Alex, Jacob and 2 others like this"]]]}
{"requirement": "def my_crib(n):\"\"\"\n## Task\n\nGiven `n` representing the number of floors build a beautiful multi-million dollar mansions like the ones in the example below:\n\n**Note:** whitespace should be preserved on both sides of the roof. Number of floors will go up to 30. There will be no tests with invalid input.\n\nIf you manage to complete it, you can try a harder version [here](https://www.codewars.com/kata/58360d112fb0ba255300008b).\n\nGood luck!\n\"\"\"", "inputs": [[1], [2], [3]], "outputs": [[" /\\ \n/__\\\n|__|"], ["  /\\  \n /  \\ \n/____\\\n|    |\n|____|"], ["   /\\   \n  /  \\  \n /    \\ \n/______\\\n|      |\n|      |\n|______|"]], "starter_code": "def my_crib(n):", "canonical_solution": "def my_crib(n):\n    roof = '\\n'.join(('%s/%s\\\\%s' % (' ' * (n - i), ' ' * i * 2, ' ' * (n - i)) for i in range(n)))\n    ceiling = '\\n/%s\\\\\\n' % ('_' * (n * 2))\n    walls = '|%s|\\n' % (' ' * (n * 2)) * (n - 1)\n    floor = '|%s|' % ('_' * (n * 2))\n    return roof + ceiling + walls + floor", "entry_point": "my_crib", "task_id": "TACO_lite/27", "input_output_examples": [[[3], [7]], [["1-sum"], ["3-altsum"]]]}
{"requirement": "def get_middle(s):\"\"\"\nYou are going to be given a word. Your job is to return the middle character of the word. If the word's length is odd, return the middle character. If the word's length is even, return the middle 2 characters.\n\n#Input\n\nA word (string) of length `0 < str < 1000` (In javascript you may get slightly more than 1000 in some test cases due to an error in the test cases). You do not need to test for this. This is only here to tell you that you do not need to worry about your solution timing out.\n\n\n#Output\n\nThe middle character(s) of the word represented as a string.\n\"\"\"", "inputs": [["test"], ["testing"], ["middle"], ["A"], ["of"]], "outputs": [["es"], ["t"], ["dd"], ["A"], ["of"]], "starter_code": "def get_middle(s):", "canonical_solution": "def get_middle(s):\n    return s[(len(s) - 1) // 2:len(s) // 2 + 1]", "entry_point": "get_middle", "task_id": "TACO_lite/28", "input_output_examples": [[[[1, 2, 3, 4, 5], 2], [[1, 2, 3, 4, 5], 3], [[1, 2, 3, 4, 5], 1]], [[9, 6], [5, 7, 3], [15]]]}
{"requirement": "def charcheck(text, mx, spaces):\"\"\"\nWrite Cara a function `charcheck()` with the arguments:\n\n- `\"text\"`: a string containing Cara's answer for the question\n- `\"max\"`: a number equal to the maximum number of characters allowed in the answer\n- `\"spaces\"`: a boolean which is `True` if spaces are included in the character count and `False` if they are not\n\nThe function `charcheck()` should return an array: `[True, \"Answer\"]` , where `\"Answer\"` is equal to the original text, if Cara's answer is short enough.\n\nIf her answer `\"text\"` is too long, return an array: `[False, \"Answer\"]`. \nThe second element should be the original `\"text\"` string truncated to the length of the limit.\n\nWhen the `\"spaces\"` argument is `False`, you should remove the spaces from the `\"Answer\"`.\n\"\"\"", "inputs": [["I am applying for the role of Base Manager on Titan.", 60, true], ["I am looking to relocate to the vicinity of Saturn for family reasons.", 70, true], ["As Deputy Base Manager on Phobos for five Martian years, I have significant relevant experience.", 90, false], ["A challenging career moment came with the rapid depletion of water supplies on Phobos.", 80, false], ["But, as I pointed out, anyone complaining about standing downwind was lying. There was no wind.", 75, true], ["I have no notice period on Phobos. I can start immediately.", 50, true]], "outputs": [[[true, "I am applying for the role of Base Manager on Titan."]], [[true, "I am looking to relocate to the vicinity of Saturn for family reasons."]], [[true, "AsDeputyBaseManageronPhobosforfiveMartianyears,Ihavesignificantrelevantexperience."]], [[true, "AchallengingcareermomentcamewiththerapiddepletionofwatersuppliesonPhobos."]], [[false, "But, as I pointed out, anyone complaining about standing downwind was lying"]], [[false, "I have no notice period on Phobos. I can start imm"]]], "starter_code": "def charcheck(text, mx, spaces):", "canonical_solution": "def charcheck(text, mx, spaces):\n    text = text if spaces else text.replace(' ', '')\n    return [len(text) <= mx, text[:mx]]", "entry_point": "charcheck", "task_id": "TACO_lite/33", "input_output_examples": [[["13:34"], ["21:00"], ["11:15"], ["03:03"], ["14:30"], ["08:55"], ["00:00"], ["12:00"]], [["tick"], ["Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo"], ["Fizz Buzz"], ["Fizz"], ["Cuckoo"], ["Buzz"], ["Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo"], ["Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo"]]]}
{"requirement": "def convert_recipe(recipe):\"\"\"Mary wrote a recipe book and is about to publish it, but because of a new European law, she needs to update and include all measures in grams.\n\nGiven all the measures in tablespoon (`tbsp`) and in teaspoon (`tsp`), considering `1 tbsp = 15g` and `1 tsp = 5g`, append to the end of the measurement the biggest equivalent integer (rounding up).\n\"\"\"", "inputs": [["2 tbsp of butter"], ["Add to the mixing bowl and coat well with 1 tbsp of olive oil & 1/2 tbsp of dried dill"], ["1/2 tsp of baking powder"], ["In another bowl, add 2 tsp of vanilla extract, 3 tsp of baking soda and 1/2 tsp of salt"], ["10 tbsp of cocoa powder"], ["1/8 tbsp of baking soda"], ["In a large bowl, combine confectioners' sugar, sour cream and vanilla"]], "outputs": [["2 tbsp (30g) of butter"], ["Add to the mixing bowl and coat well with 1 tbsp (15g) of olive oil & 1/2 tbsp (8g) of dried dill"], ["1/2 tsp (3g) of baking powder"], ["In another bowl, add 2 tsp (10g) of vanilla extract, 3 tsp (15g) of baking soda and 1/2 tsp (3g) of salt"], ["10 tbsp (150g) of cocoa powder"], ["1/8 tbsp (2g) of baking soda"], ["In a large bowl, combine confectioners' sugar, sour cream and vanilla"]], "starter_code": "def convert_recipe(recipe):", "canonical_solution": "import re, math\n\ndef convert_recipe(recipe):\n\n    def repl(m):\n        ratio = 15 if m.group(2) == 'tbsp' else 5\n        return m.group(0) + ' (%sg)' % math.ceil(eval(m.group(1)) * ratio)\n    return re.sub('([0-9/]+) (tb?sp)', repl, recipe)", "entry_point": "convert_recipe", "task_id": "TACO_lite/34", "input_output_examples": [[[[1, 120], [2, 60], 4]], [[30]]]}
{"requirement": "def move_zeros(arr):\"\"\"\nWrite an algorithm that takes an array and moves all of the zeros to the end, preserving the order of the other elements.\n\"\"\"", "inputs": [[[1, 2, 0, 1, 0, 1, 0, 3, 0, 1]], [[9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]], [["a", 0, 0, "b", "c", "d", 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]], [["a", 0, 0, "b", null, "c", "d", 0, 1, false, 0, 1, 0, 3, [], 0, 1, 9, 0, 0, {}, 0, 0, 9]], [[0, 1, null, 2, false, 1, 0]], [["a", "b"]], [["a"]], [[0, 0]], [[0]], [[]]], "outputs": [[[1, 2, 1, 1, 3, 1, 0, 0, 0, 0]], [[9, 9, 1, 2, 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [["a", "b", "c", "d", 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [["a", "b", null, "c", "d", 1, false, 1, 3, [], 1, 9, {}, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[1, null, 2, false, 1, 0, 0]], [["a", "b"]], [["a"]], [[0, 0]], [[0]], [[]]], "starter_code": "def move_zeros(arr):", "canonical_solution": "def move_zeros(arr):\n    l = [i for i in arr if isinstance(i, bool) or i != 0]\n    return l + [0] * (len(arr) - len(l))", "entry_point": "move_zeros", "task_id": "TACO_lite/35", "input_output_examples": [[[1]], [[[1, 15, 15]]]]}
{"requirement": "def get_grade(s1, s2, s3):\"\"\"\n## Grade book\n\nComplete the function so that it finds the mean of the three scores passed to it and returns the letter value associated with that grade.\n\nNumerical Score    | Letter Grade\n---                | ---\n90 <= score <= 100 | 'A'\n80 <= score < 90   | 'B'\n70 <= score < 80   | 'C'\n60 <= score < 70   | 'D'\n 0 <= score < 60   | 'F'\n\nTested values are all between 0 and 100. Theres is no need to check for negative values or values greater than 100.\n\"\"\"", "inputs": [[95, 90, 93], [100, 85, 96], [92, 93, 94], [100, 100, 100], [70, 70, 100], [82, 85, 87], [84, 79, 85], [70, 70, 70], [75, 70, 79], [60, 82, 76], [65, 70, 59], [66, 62, 68], [58, 62, 70], [44, 55, 52], [48, 55, 52], [58, 59, 60], [0, 0, 0]], "outputs": [["A"], ["A"], ["A"], ["A"], ["B"], ["B"], ["B"], ["C"], ["C"], ["C"], ["D"], ["D"], ["D"], ["F"], ["F"], ["F"], ["F"]], "starter_code": "def get_grade(s1, s2, s3):", "canonical_solution": "def get_grade(s1, s2, s3):\n    m = (s1 + s2 + s3) / 3.0\n    if 90 <= m <= 100:\n        return 'A'\n    elif 80 <= m < 90:\n        return 'B'\n    elif 70 <= m < 80:\n        return 'C'\n    elif 60 <= m < 70:\n        return 'D'\n    return 'F'", "entry_point": "get_grade", "task_id": "TACO_lite/39", "input_output_examples": [[[[1, 2, 3, 4, 5, 7]], [[7, 1, 2, 3, 4, 5]], [[4, 5, 6, 1, 2, 3]], [[9, 8, 7, 6]], [[5, 9, 8, 7, 6]]], [["A"], ["RA"], ["RA"], ["D"], ["RD"]]]}
{"requirement": "def palindrome(num):\"\"\"\nA palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward. For a given number `num`, write a function to test if it's a numerical palindrome or not and return a boolean (true if it is and false if not).\n\n```if-not:haskell\nReturn \"Not valid\" if the input is not an integer or less than `0`.\n```\n```if:haskell\nReturn `Nothing` if the input is less than `0` and `Just True` or `Just False` otherwise.\n```\n\nOther Kata in this Series:\nNumerical Palindrome #1\nNumerical Palindrome #1.5\nNumerical Palindrome #2\nNumerical Palindrome #3\nNumerical Palindrome #3.5\nNumerical Palindrome #4\nNumerical Palindrome #5\n\"\"\"", "inputs": [[1221], [110011], [1456009006541], [123322], [1], [152], [9999], ["ACCDDCCA"], ["@14AbC"], ["1221"], [-450]], "outputs": [[true], [true], [true], [false], [true], [false], [true], ["Not valid"], ["Not valid"], ["Not valid"], ["Not valid"]], "starter_code": "def palindrome(num):", "canonical_solution": "def palindrome(num):\n    if type(num) is not int or num < 1:\n        return 'Not valid'\n    return num == int(str(num)[::-1])", "entry_point": "palindrome", "task_id": "TACO_lite/40", "input_output_examples": [[[[2, 3, 5, 15, 75], 5], [[2, 3, 5, 45, 45], 5], [[2, 3, 5, 45, 45], 30]], [[5, 5, 5, 15, 70], [5, 5, 5, 42, 43], []]]}
{"requirement": "def xor(a, b):\"\"\"# Exclusive \"or\" (xor) Logical Operator\n\n## Overview\n\nIn some scripting languages like PHP, there exists a logical operator (e.g. ```&&```, ```||```, ```and```, ```or```, etc.) called the \"Exclusive Or\" (hence the name of this Kata).  The exclusive or evaluates two booleans.  It then returns true if **exactly one of the two expressions are true**, false otherwise.  \n\n## Task\n\nSince we cannot define keywords in Javascript (well, at least I don't know how to do it), your task is to define a function ```xor(a, b)``` where a and b are the two expressions to be evaluated.  Your ```xor``` function should have the behaviour described above, returning true if **exactly one of the two expressions evaluate to true**, false otherwise.\n\"\"\"", "inputs": [[false, false], [true, false], [false, true], [true, true]], "outputs": [[false], [true], [true], [false]], "starter_code": "def xor(a, b):", "canonical_solution": "def xor(a, b):\n    return a != b", "entry_point": "xor", "task_id": "TACO_lite/44", "input_output_examples": [[[1, -35, -23]], [[35.0]]]}
{"requirement": "def build_square(blocks):\"\"\"\n# The Invitation\n\nMost of us played with toy blocks growing up. It was fun and you learned stuff. So what else can you do but rise to the challenge when a 3-year old exclaims, \"Look, I made a square!\", then pointing to a pile of blocks, \"Can _you_ do it?\"\n\n# These Blocks\n\nJust to play along, of course we'll be viewing these blocks in two dimensions. Depth now being disregarded, it turns out the pile has four different sizes of block: `1x1`, `1x2`, `1x3`, and `1x4`. The smallest one represents the area of a square, the other three are rectangular, and all differ by their width. Integers matching these four widths are used to represent the blocks in the input.\n\n# This Square\n\nWell, the kid made a `4x4` square from this pile, so you'll have to match that. Noticing the way they fit together, you realize the structure must be built in fours rows, one row at a time, where the blocks must be placed horizontally. With the known types of block, there are five types of row you could build:\n\n* 1 four-unit block\n* 1 three-unit block plus 1 one-unit bock (in either order)\n* 2 two-unit blocks\n* 1 two-unit block plus 2 one-unit blocks (in any order)\n* 4 one-unit blocks\n\nAmounts for all four of the block sizes in the pile will each vary from `0` to `16`. The total size of the pile will also vary from `0` to `16`. The order of rows is irrelevant. A valid square doesn't have to use up all the given blocks.\n\n# Input\n```python\nblocks ~ a random list of integers (1 <= x <= 4)\n```\n# Output\n```python\nTrue or False ~ whether you can build a square\n```\n# Enjoy!\n\nIf interested, I also have [this kata](https://www.codewars.com/kata/5cb7baa989b1c50014a53333) as well as [this other kata](https://www.codewars.com/kata/5cb5eb1f03c3ff4778402099) to consider solving.\n\"\"\"", "inputs": [[[]], [[2, 2, 1, 1, 2]], [[3, 3]], [[3, 3, 3, 3, 3, 3, 3]], [[]], [[3, 2]], [[1, 1, 1]], [[2, 2, 1, 1]], [[]], [[]]], "outputs": [[true], [true], [false], [false], [true], [false], [false], [true], [true], [false]], "starter_code": "def build_square(blocks):", "canonical_solution": "def build_square(blocks):\n    for x in range(4):\n        if 4 in blocks:\n            blocks.remove(4)\n        elif 3 in blocks and 1 in blocks:\n            blocks.remove(3)\n            blocks.remove(1)\n        elif blocks.count(2) >= 2:\n            blocks.remove(2)\n            blocks.remove(2)\n        elif 2 in blocks and blocks.count(1) >= 2:\n            blocks.remove(2)\n            blocks.remove(1)\n            blocks.remove(1)\n        elif blocks.count(1) >= 4:\n            blocks.remove(1)\n            blocks.remove(1)\n            blocks.remove(1)\n            blocks.remove(1)\n        else:\n            return False\n    return True", "entry_point": "build_square", "task_id": "TACO_lite/46", "input_output_examples": [[[[12, "Central", "Circle", 21]]], [["£7.80"]]]}
{"requirement": "def same_encryption(s1, s2):\"\"\"# Task\n John loves encryption. He can encrypt any string by the following algorithm:\n```\ntake the first and the last letters of the word;\nreplace the letters between them with their number;\nreplace this number with the sum of it digits \n          until a single digit is obtained.```\nGiven two strings(`s1` and `s2`), return `true` if their encryption is the same, or `false` otherwise.\n\n# Input/Output\n\n\n - `[input]` string `s1`\n\n  The first string to be encrypted.\n  \n  `s1.length >= 3`\n \n \n - `[input]` string `s2`\n\n  The second string to be encrypted.\n\n  `s2.length >= 3`\n  \n  \n - `[output]` a boolean value\n\n `true` if encryption is the same, `false` otherwise.\n\"\"\"", "inputs": [["abc", "abc"], ["abc", "abd"], ["fKhjuytrdfcdc", "flJc"], ["OKhjuytrdfcdc", "OijK"]], "outputs": [[true], [false], [true], [false]], "starter_code": "def same_encryption(s1, s2):", "canonical_solution": "def same_encryption(s1, s2):\n    return (s1[0], s1[-1], len(s1) % 9) == (s2[0], s2[-1], len(s2) % 9)", "entry_point": "same_encryption", "task_id": "TACO_lite/48", "input_output_examples": [[[6, 4], [3, 7]], [[["O", "X", "O", "X"], ["X", "O", "X", "O"], ["O", "X", "O", "X"], ["X", "O", "X", "O"], ["O", "X", "O", "X"], ["X", "O", "X", "O"]], [["O", "X", "O", "X", "O", "X", "O"], ["X", "O", "X", "O", "X", "O", "X"], ["O", "X", "O", "X", "O", "X", "O"]]]]}
{"requirement": "def array_operations(a, n):\"\"\"# Task\n You are given an array of integers `a` and a non-negative number of operations `k`, applied to the array. Each operation consists of two parts:\n```\nfind the maximum element value of the array;\nreplace each element a[i] with (maximum element value - a[i]).```\nHow will the array look like after `k` such operations?\n\n# Input/Output\n\n\n - `[input]` integer array a\n\n    The initial array.\n\n    Constraints: \n\n    `1 <= a.length <= 100`\n    \n    `-100 <= a[i] <= 100`\n\n\n - `[input]` integer `k`\n\n    non-negative number of operations.\n\n    Constraints: `0 <= k <= 100000`\n\n\n - [output] an integer array\n\n    The array after `k` operations.\n\"\"\"", "inputs": [[[-4, 0, -1, 0], 2], [[0, -1, 0, 0, -1, -1, -1, -1, 1, -1], 1], [[-1], 10000]], "outputs": [[[0, 4, 3, 4]], [[1, 2, 1, 1, 2, 2, 2, 2, 0, 2]], [[0]]], "starter_code": "def array_operations(a, n):", "canonical_solution": "def array_operations(a, n):\n    li = []\n    for i in range(n):\n        m = max(a)\n        a = [m - i for i in a]\n        if a in li:\n            if not n & 1:\n                return li[-1]\n            return a\n        li.append(a)\n    return a", "entry_point": "array_operations", "task_id": "TACO_lite/52", "input_output_examples": [[[123, 39]], [[[24, 15]]]]}
{"requirement": "def min_and_max(l, d, x):\"\"\"# Task\n You are given three integers `l, d and x`. Your task is:\n```\n• determine the minimal integer n \n    such that l ≤ n ≤ d, and the sum of its digits equals x.\n• determine the maximal integer m \n    such that l ≤ m ≤ d, and the sum of its digits equals x.\n```\nIt is guaranteed that such numbers always exist.\n\n# Input/Output\n\n\n - `[input]` integer `l`\n\n - `[input]` integer `d`\n\n  `1 ≤ l ≤ d ≤ 10000.`\n\n\n - `[input]` integer `x`\n\n  `1 ≤ x ≤ 36`\n\n\n - `[output]` an integer array\n\n  Array of two elements, where the first element is `n`, and the second one is `m`.\n\"\"\"", "inputs": [[100, 200, 10], [123, 456, 5], [99, 501, 5], [99, 234, 1], [99, 234, 19], [99, 5001, 27], [99, 5001, 28], [2000, 7000, 3]], "outputs": [[[109, 190]], [[131, 410]], [[104, 500]], [[100, 100]], [[199, 199]], [[999, 4995]], [[1999, 4996]], [[2001, 3000]]], "starter_code": "def min_and_max(l, d, x):", "canonical_solution": "def min_and_max(l, d, x):\n    listOfCorect = [num for num in list(range(l, d + 1)) if sum(map(int, str(num))) == x]\n    return [min(listOfCorect), max(listOfCorect)]", "entry_point": "min_and_max", "task_id": "TACO_lite/56", "input_output_examples": [[[[34.5, 56.2, 11, 13]], [[1, 5, 87, 45, 8, 8]]], [[35, 55, 10, 15], [0, 5, 85, 45, 10, 10]]]}
{"requirement": "def number_increasing(n):\"\"\"# Task\n Initially a number `1` is written on a board. It is possible to do the following operations with it:\n```\nmultiply the number by 3;\nincrease the number by 5.```\nYour task is to determine that using this two operations step by step, is it possible to obtain number `n`?\n\n# Input / Output\n\n\n - `[input]` integer n\n\n  positive integer, n ≤ 100000\n\n\n - `[output]` a boolean value\n\n  `true` if N can be obtained using given operations, `false` otherwise.\n\"\"\"", "inputs": [[1], [2], [3], [4], [5], [6], [100], [101], [12345], [54321]], "outputs": [[true], [false], [true], [false], [false], [true], [false], [true], [false], [true]], "starter_code": "def number_increasing(n):", "canonical_solution": "def number_increasing(n):\n    return n not in {2, 4, 7, 12, 17, 22} and n % 5 != 0", "entry_point": "number_increasing", "task_id": "TACO_lite/61", "input_output_examples": [[[1, 10], [1, 100], [90, 100]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 89], []]]}
{"requirement": "def enough(cap, on, wait):\"\"\"\n### The Story:\nBob is working as a bus driver. However, he has become extremely popular amongst the city's residents. With so many passengers wanting to get aboard his bus, he sometimes has to face the problem of not enough space left on the bus! He wants you to write a simple program telling him if he will be able to fit all the passengers.\n\n### Task Overview:\n\nYou have to write a function that accepts three parameters: \n* `cap` is the amount of people the bus can hold excluding the driver.\n* `on` is the number of people on the bus.\n* `wait` is the number of people waiting to get on to the bus. \n\nIf there is enough space, return 0, and if there isn't, return the number of passengers he can't take.\n\n```if:csharp\nDocumentation:\nKata.Enough Method (Int32, Int32, Int32)\n\nReturns the number of passengers the bus cannot fit, or 0 if the bus can fit every passenger.\n\nSyntax\n\n\npublic\nstatic\nint Enough(\nint cap,\n    int on,\nint wait\n    )\n  \n\n\n\nParameters\n\ncap\n\nType: System.Int32\nThe amount of people that can fit on the bus excluding the driver.\n\non\n\nType: System.Int32\nThe amount of people on the bus excluding the driver.\n\nwait\n\nType: System.Int32\nThe amount of people waiting to enter the bus.\n\nReturn Value\n\nType: System.Int32\n  An integer representing how many passengers cannot fit on the bus, or 0 if every passenger can fit on the bus.\n\n```\n\"\"\"", "inputs": [[10, 5, 5], [100, 60, 50], [20, 5, 5]], "outputs": [[0], [10], [0]], "starter_code": "def enough(cap, on, wait):", "canonical_solution": "def enough(cap, on, wait):\n    return max(0, wait - (cap - on))", "entry_point": "enough", "task_id": "TACO_lite/64", "input_output_examples": [[[[1, 2, 3], ["c", "d", "e"]], [[1, 2, 3], [4, 5]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[]]], [[1, "c", 2, "d", 3, "e"], [1, 4, 2, 5, 3, null], [1, 4, 7, 2, 5, 8, 3, 6, 9], []]]}
{"requirement": "def unlucky_number(n):\"\"\"# Task\n The number is considered to be `unlucky` if it does not have digits `4` and `7` and is divisible by `13`. Please count all unlucky numbers not greater than `n`.\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n `1 ≤ n ≤ 10^8(10^6 in Python)`\n\n\n - `[output]` an integer\n\"\"\"", "inputs": [[20], [100], [1000], [1000000]], "outputs": [[2], [7], [40], [20182]], "starter_code": "def unlucky_number(n):", "canonical_solution": "def unlucky_number(n):\n    return sum((not ('4' in s or '7' in s) for s in map(str, range(0, n + 1, 13))))", "entry_point": "unlucky_number", "task_id": "TACO_lite/65", "input_output_examples": [[["this is programmer meme {b}ecause it has b{ug}"], ["this is also program{bu}r meme {g}ecause it has needed key word"], ["this is {ed}s{i}gner meme cause i{t} ha{s} key word"], ["this could {b}e chemistry meme b{u}t our{g}Gey word boom is too late"], ["this could {b}e chemistry meme but {o}ur gey w{o}rd 'boo{m}' is too late"]], [["Roma"], ["Roma"], ["Danik"], ["Vlad"], ["Maxim"]]]}
{"requirement": "def group_size(S, D):\"\"\"# Your Task\nThe city of Darkishland has a strange hotel with infinite rooms. The groups that come to this hotel follow the following rules:\n\n* At the same time only members of one group can rent the hotel.\n\n* Each group comes in the morning of the check-in day and leaves the hotel in the evening of the check-out day.\n\n* Another group comes in the very next morning after the previous group has left the hotel.\n\n* A very important property of the incoming group is that it has one more member than its previous group unless it is the starting group. You will be given the number of members of the starting group.\n\n* A group with n members stays for n days in the hotel.\n\nGiven the initial group size you will have to find the group size staying in the hotel on a specified day.\n# Input\nS denotes the initial size of the group and D denotes that you will have to find the group size staying in the hotel on D-th day (starting from 1). A group size S\nmeans that on the first day a group of S members comes to the hotel and stays for S days. Then comes a group of S + 1 members according to the previously described rules and so on.\n\"\"\"", "inputs": [[1, 6], [3, 10], [3, 14], [10, 1000], [1, 1000], [5, 4], [5, 7], [10000, 1000000000000000], [2, 20000000000000], [10, 900000000000000000], [34545, 565], [234234, 6577], [10, 10]], "outputs": [[3], [5], [6], [46], [45], [5], [6], [44721361], [6324555], [1341640786], [34545], [234234], [10]], "starter_code": "def group_size(S, D):", "canonical_solution": "from math import floor\n\ndef group_size(S, D):\n    return floor((2 * D + S * (S - 1)) ** 0.5 + 0.5)", "entry_point": "group_size", "task_id": "TACO_lite/68", "input_output_examples": [[[4], [0]], [[8], [0]]]}
{"requirement": "def queue(queuers, pos):\"\"\"\nYou managed to send your friend to queue for tickets in your stead, but there is a catch: he will get there only if you tell him how much that is going to take. And everybody can only take one ticket at a time, then they go back in the last position of the queue if they need more (or go home if they are fine).\n\nEach ticket takes one minutes to emit, the queue is well disciplined, [Brit-style](https://www.codewars.com/kata/english-beggars), and so it moves smoothly, with no waste of time.\n\nYou will be given an array/list/vector with all the people queuing and the *initial* position of your buddy.\n\nBuild a function to compute it, resting assured that only positive integers are going to be there and you will be always given a valid index; but we also want to go to pretty popular events, so be ready for big queues with people getting plenty of tickets.\n\n[[hard core version](https://www.codewars.com/kata/queue-time-counter-hard-core-version/solutions/javascript) now available if you don't want the \"easy\" kata!]\n\"\"\"", "inputs": [[[2, 5, 3, 6, 4], 0], [[2, 5, 3, 6, 4], 1], [[2, 5, 3, 6, 4], 2], [[2, 5, 3, 6, 4], 3], [[2, 5, 3, 6, 4], 4]], "outputs": [[6], [18], [12], [20], [17]], "starter_code": "def queue(queuers, pos):", "canonical_solution": "def queue(queuers, pos):\n    return sum((min(queuer, queuers[pos] - (place > pos)) for place, queuer in enumerate(queuers)))", "entry_point": "queue", "task_id": "TACO_lite/77", "input_output_examples": [[[70]], [[190392490709135]]]}
{"requirement": "def find_missing_letter(chars):\"\"\"#Find the missing letter\n\nWrite a method that takes an array of consecutive (increasing) letters as input and that returns the missing letter in the array.\n\nYou will always get an valid array. And it will be always exactly one letter be missing. The length of the array will always be at least 2.\nThe array will always contain letters in only one case.\n\n(Use the English alphabet with 26 letters!)\n\nHave fun coding it and please don't forget to vote and rank this kata! :-) \n\nI have also created other katas. Take a look if you enjoyed this kata!\n\"\"\"", "inputs": [[["a", "b", "c", "d", "f"]], [["O", "Q", "R", "S"]], [["b", "d"]]], "outputs": [["e"], ["P"], ["c"]], "starter_code": "def find_missing_letter(chars):", "canonical_solution": "def find_missing_letter(chars):\n    n = 0\n    while ord(chars[n]) == ord(chars[n + 1]) - 1:\n        n += 1\n    return chr(1 + ord(chars[n]))", "entry_point": "find_missing_letter", "task_id": "TACO_lite/79", "input_output_examples": [[[135, 20]], [[282]]]}
{"requirement": "def invert(lst):\"\"\"\nGiven a set of numbers, return the additive inverse of each. Each positive becomes negatives, and the negatives become positives.\n\n```if:javascript,python,ruby,php,elixir,dart\nYou can assume that all values are integers. Do not mutate the input array/list.\n```\n\n```if:c\n### Notes:\n- All values are greater than `INT_MIN`\n- The input should be modified, not returned.\n```\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5]], [[1, -2, 3, -4, 5]], [[]], [[0]]], "outputs": [[[-1, -2, -3, -4, -5]], [[-1, 2, -3, 4, -5]], [[]], [[0]]], "starter_code": "def invert(lst):", "canonical_solution": "def invert(lst):\n    return [-x for x in lst]", "entry_point": "invert", "task_id": "TACO_lite/80", "input_output_examples": [[[1], [2], [3]], [[" /\\ \n/__\\\n|__|"], ["    /\\ \n   /  \\ \n  /____\\ \n  |    | \n  |____|"], ["     /\\ \n    /  \\ \n   /    \\ \n  /______\\ \n  |      | \n  |      | \n  |______|"]]]}
{"requirement": "def tops(msg):\"\"\"# Task\n\nWrite a function that accepts `msg` string and returns local tops of string from the highest to the lowest.  \nThe string's tops are from displaying the string in the below way:\n\n```\n\n                                         ...\n                             ...         ...   ...\n                   ...     ...   ...     ...   ...\n           ...    ...  ... ...   ...     ...   ...\n     ...   ... ... ...  ... ...   ...     ...   ...\n... .. .. ... ... ...  ... ...   ...     ...   ...\n\n```\nThe next top is always 1 character higher than the previous one. \n\n- When the `msg` string is empty, return an empty string.\n- The input strings may be very long. Make sure your solution has good performance.\n- The (.)dots on the sample dispaly of string are only there to help you to understand the pattern  \n\nCheck the test cases for more samples.\n\n# Series\n\n- [String tops](https://www.codewars.com/kata/59b7571bbf10a48c75000070)\n- [Square string tops](https://www.codewars.com/kata/5aa3e2b0373c2e4b420009af)\n\"\"\"", "inputs": [[""], ["abcde"], ["123456789abcdefghijklmnopqrstuwyxvzABCDEFGHIJKLMNOPQRSTU"], ["123456789abcdefghijklmnopqrstuwyxvzABCDEFGHIJKLMNOPQRSTUWvXYZ123456789012345678910123"]], "outputs": [[""], ["cd"], ["TUABCDElmnoabc34"], ["7891012TUWvXYABCDElmnoabc34"]], "starter_code": "def tops(msg):", "canonical_solution": "def tops(msg):\n    n = len(msg)\n    res, i, j, k = ('', 2, 2, 7)\n    while i < n:\n        res = msg[i:i + j] + res\n        i, j, k = (i + k, j + 1, k + 4)\n    return res", "entry_point": "tops", "task_id": "TACO_lite/81", "input_output_examples": [[["test"], ["testing"], ["middle"], ["A"]], [["es"], ["t"], ["dd"], ["A"]]]}
{"requirement": "def sort_string(s):\"\"\"# Task\n\nYour task is to sort the characters in a string according to the following rules:\n```\n- Rule1: English alphabets are arranged from A to Z, case insensitive.\n- Rule2: If the uppercase and lowercase of an English alphabet exist\n  at the same time, they are arranged in the order of oringal input.\n- Rule3: non English alphabet remain in their original position.\n```\n\n# Input/Output\n\n\n`[input]` string `s`\n\nA non empty string contains any characters(English alphabets or non English alphabets).\n\n`[output]` a string\n\nA sorted string according to the rules above.\n\"\"\"", "inputs": [["a"], ["cba"], ["Cba"], ["cCBbAa"], ["!"], ["c b a"], ["-c--b--a-"], ["cbaCcC"], ["Codewars"], [" MkWD{RB=//k-^ J@,xH Vfi uAz+$ kV _[ }a!}%pSBwn !kKB (b  q PQF +}wS  .kfU r wFNEs#NsR UVMdG"]], "outputs": [["a"], ["abc"], ["abC"], ["AaBbcC"], ["!"], ["a b c"], ["-a--b--c-"], ["abcCcC"], ["aCdeorsw"], [" AaBB{Bb=//D-^ d@,Ef FfF GHi+$ Jk _[ }k!}%kkKkM !MnN (N  p PqQ +}Rr  .RSS s suUUV#VVW wwwxz"]], "starter_code": "def sort_string(s):", "canonical_solution": "def sort_string(s):\n    a = iter(sorted((c for c in s if c.isalpha()), key=str.lower))\n    return ''.join((next(a) if c.isalpha() else c for c in s))", "entry_point": "sort_string", "task_id": "TACO_lite/82", "input_output_examples": [[[7, 3]], [[4]]]}
{"requirement": "def pattern(n):\"\"\"\n## Task:\n\nYou have to write a function `pattern` which returns the following Pattern(See Examples) upto n number of rows. \n\n* Note:```Returning``` the pattern is not the same as ```Printing``` the pattern.\n\n### Rules/Note:\n\n* The pattern should be created using only unit digits.\n* If `n < 1` then it should return \"\" i.e. empty string.\n* `The length of each line is same`, and is equal to the number of characters in a line i.e `n`.\n* Range of Parameters (for the sake of CW Compiler) :\n  + `n ∈ (-50,150]`\n\n[List of all my katas](\"http://www.codewars.com/users/curious_db97/authored\")\n\"\"\"", "inputs": [[1], [2], [3], [7], [17], [27], [0], [-89]], "outputs": [["1"], ["22\n21"], ["333\n322\n321"], ["7777777\n7666666\n7655555\n7654444\n7654333\n7654322\n7654321"], ["77777777777777777\n76666666666666666\n76555555555555555\n76544444444444444\n76543333333333333\n76543222222222222\n76543211111111111\n76543210000000000\n76543210999999999\n76543210988888888\n76543210987777777\n76543210987666666\n76543210987655555\n76543210987654444\n76543210987654333\n76543210987654322\n76543210987654321"], ["777777777777777777777777777\n766666666666666666666666666\n765555555555555555555555555\n765444444444444444444444444\n765433333333333333333333333\n765432222222222222222222222\n765432111111111111111111111\n765432100000000000000000000\n765432109999999999999999999\n765432109888888888888888888\n765432109877777777777777777\n765432109876666666666666666\n765432109876555555555555555\n765432109876544444444444444\n765432109876543333333333333\n765432109876543222222222222\n765432109876543211111111111\n765432109876543210000000000\n765432109876543210999999999\n765432109876543210988888888\n765432109876543210987777777\n765432109876543210987666666\n765432109876543210987655555\n765432109876543210987654444\n765432109876543210987654333\n765432109876543210987654322\n765432109876543210987654321"], [""], [""]], "starter_code": "def pattern(n):", "canonical_solution": "def pattern(n):\n    return '\\n'.join((''.join((str((n - min(j, i)) % 10) for j in range(n))) for i in range(max(n, 0))))", "entry_point": "pattern", "task_id": "TACO_lite/86", "input_output_examples": [[["tame"], ["fruity"], ["lamppu"]], [["kome-tantti"], ["koity-fruntti"], ["komppu-lantti"]]]}
{"requirement": "def func_or(a, b):\"\"\"\n## Task\nYou need to implement two functions, `xor` and `or`, that replicate the behaviour of their respective operators:\n\n- `xor` = Takes 2 values and returns `true` if, and only if, one of them is truthy.\n- `or` = Takes 2 values and returns `true` if either one of them is truthy.\n\nWhen doing so, **you cannot use the or operator: `||`**.\n\n# Input\n- Not all input will be booleans - there will be truthy and falsey values [the latter including also empty strings and empty arrays]\n- There will always be 2 values provided\n\"\"\"", "inputs": [[true, true], [true, false], [false, false], [0, 11], [null, []]], "outputs": [[true], [true], [false], [true], [false]], "starter_code": "def func_or(a, b):", "canonical_solution": "def func_or(a, b):\n    return not bool(a) == bool(b) == False\n\ndef func_xor(a, b):\n    return not bool(a) == bool(b)", "entry_point": "func_or", "task_id": "TACO_lite/94", "input_output_examples": [[[1], [2], [3], [4], [5]], [[1], [3], [5], [8], [10]]]}
{"requirement": "def combine(*args):\"\"\"\nWrite\n\n```python\nfunction combine()\n```\n\nthat combines arrays by alternatingly taking elements passed to it.\n\nArrays can have different lengths.\n\"\"\"", "inputs": [[["a", "b", "c"], [1, 2, 3]], [["a", "b", "c"], [1, 2, 3, 4, 5]], [["a", "b", "c"], [1, 2, 3, 4, 5], [6, 7], [8]], [[{"a": 1}, {"b": 2}], [1, 2]], [[{"a": 2, "b": 1}, {"a": 1, "b": 2}], [1, 2, 3, 4], [5, 6], [7]]], "outputs": [[["a", 1, "b", 2, "c", 3]], [["a", 1, "b", 2, "c", 3, 4, 5]], [["a", 1, 6, 8, "b", 2, 7, "c", 3, 4, 5]], [[{"a": 1}, 1, {"b": 2}, 2]], [[{"a": 2, "b": 1}, 1, 5, 7, {"a": 1, "b": 2}, 2, 6, 3, 4]]], "starter_code": "def combine(*args):", "canonical_solution": "def combine(*args):\n    out = list()\n    for i in range(len(max(args, key=len))):\n        for arr in args:\n            if i < len(arr):\n                out.append(arr[i])\n    return out", "entry_point": "combine", "task_id": "TACO_lite/95", "input_output_examples": [[[["n"]]], [["Woohoo!"]]]}
{"requirement": "def comb(fruits):\"\"\"\n# Task\nJohn is an orchard worker. \n\nThere are `n` piles of fruits waiting to be transported. Each pile of fruit has a corresponding weight. John's job is to combine the fruits into a pile and wait for the truck to take them away.\n\nEvery time, John can combine any two piles(`may be adjacent piles, or not`), and the energy he costs is equal to the weight of the two piles of fruit.\n\nJohn wants to combine all the fruits into 1 pile with the least energy.\n\nYour task is to help John, calculate the minimum energy he costs.\n\n# Input\n\n- `fruits`: An array of positive integers. Each element represents the weight of a pile of fruit.\n  \n  Javascript:\n  - 1 <= fruits.length <= 10000\n  - 1 <= fruits[i] <= 10000\n  \n  Python:\n  - 1 <= len(fruits) <= 5000\n  - 1 <= fruits[i] <= 10000\n\n# Output\n\nAn integer. the minimum energy John costs.\n\"\"\"", "inputs": [[[1, 2, 9]], [[100]], [[1, 2]], [[4, 3, 5, 6, 10, 20]], [[87, 84, 42, 34, 24, 81, 60, 48, 75]], [[11, 9, 20, 10, 21, 35, 15, 34, 48, 76, 94, 28, 79, 16, 4, 41, 98, 30, 35, 92, 93, 33, 100, 93, 64, 23, 37, 6, 86, 27, 48, 16, 66, 99, 61, 83, 3, 5, 95]]], "outputs": [[15], [0], [3], [111], [1663], [9056]], "starter_code": "def comb(fruits):", "canonical_solution": "from heapq import heappop, heappush\n\ndef comb(fruits):\n    total, heap = (0, sorted(fruits))\n    while len(heap) > 1:\n        cost = heappop(heap) + heappop(heap)\n        heappush(heap, cost)\n        total += cost\n    return total", "entry_point": "comb", "task_id": "TACO_lite/98", "input_output_examples": [[["Cara Hertz", 10, true], ["Cara Hertz", 9, false], ["Cara Hertz", 5, true], ["Cara Hertz", 5, false]], [[true, "Cara Hertz"], [true, "CaraHertz"], [false, "Cara "], [false, "CaraH"]]]}
{"requirement": "def pattern(n):\"\"\"\n## Task:\n\nYou have to write a function **pattern** which returns the following Pattern(See Examples) upto (2n-1) rows, where n is parameter.\n\n### Rules/Note:\n* If the Argument is 0 or a Negative Integer then it should return \"\" i.e. empty string.\n* All the lines in the pattern have same length i.e equal to the number of characters in the longest line.\n* Range of n is (-∞,100]\n\"\"\"", "inputs": [[1], [3], [7], [0], [-25]], "outputs": [["1"], ["  1  \n 121 \n12321\n 121 \n  1  "], ["      1      \n     121     \n    12321    \n   1234321   \n  123454321  \n 12345654321 \n1234567654321\n 12345654321 \n  123454321  \n   1234321   \n    12321    \n     121     \n      1      "], [""], [""]], "starter_code": "def pattern(n):", "canonical_solution": "def pattern(n):\n    lines = []\n    for i in range(1, n + 1):\n        line = ' ' * (n - i)\n        line += ''.join((str(j % 10) for j in range(1, i + 1)))\n        line += line[::-1][1:]\n        lines.append(line)\n    return '\\n'.join(lines + lines[::-1][1:])", "entry_point": "pattern", "task_id": "TACO_lite/100", "input_output_examples": [[["2 tbsp of butter"], ["1/2 tbsp of oregano"], ["1/2 tsp of salt"], ["Add to the mixing bowl and coat well with 1 tbsp of olive oil & 1/2 tbsp of dried dill"]], [["2 tbsp (30g) of butter"], ["1/2 tbsp (8g) of oregano"], ["1/2 tsp (3g) of salt"], ["Add to the mixing bowl and coat well with 1 tbsp (15g) of olive oil & 1/2 tbsp (8g) of dried dill"]]]}
{"requirement": "def date_correct(text):\"\"\"\nA very easy task for you!\n\nYou have to create a method, that corrects a given date string.\nThere was a problem in addition, so many of the date strings are broken.\nDate-Format is european. That means \"DD.MM.YYYY\".\n\nIf the input-string is null or empty return exactly this value!\nIf the date-string-format is invalid, return null.\n\nHint: Correct first the month and then the day!\n\nHave fun coding it and please don't forget to vote and rank this kata! :-) \n\nI have created other katas. Have a look if you like coding and challenges.\n\"\"\"", "inputs": [[null], [""], ["01112016"], ["01,11,2016"], ["0a.1c.2016"], ["03.12.2016"], ["30.02.2016"], ["40.06.2015"], ["11.13.2014"], ["33.13.2014"], ["99.11.2010"]], "outputs": [[null], [""], [null], [null], [null], ["03.12.2016"], ["01.03.2016"], ["10.07.2015"], ["11.01.2015"], ["02.02.2015"], ["07.02.2011"]], "starter_code": "def date_correct(text):", "canonical_solution": "import re\nfrom datetime import date, timedelta\n\ndef date_correct(text):\n    if not text:\n        return text\n    try:\n        d, m, y = map(int, re.match('^(\\\\d{2})\\\\.(\\\\d{2})\\\\.(\\\\d{4})$', text).groups())\n        mo, m = divmod(m - 1, 12)\n        return (date(y + mo, m + 1, 1) + timedelta(days=d - 1)).strftime('%d.%m.%Y')\n    except AttributeError:\n        return None", "entry_point": "date_correct", "task_id": "TACO_lite/103", "input_output_examples": [[[[false, 1, 0, 1, 2, 0, 1, 3, "a"]], [[1, 2, 0, 1, 0, 1, 0, 3, 0, 1]]], [[false, 1, 1, 2, 1, 3, "a", 0, 0], [1, 2, 1, 1, 3, 1, 0, 0, 0, 0]]]}
{"requirement": "def has_two_cube_sums(n):\"\"\"\nCreate a function\n\n```python\nhas_two_cube_sums(n)\n```\n\nwhich checks if a given number `n` can be written as the sum of two cubes in two different ways: `n = a³+b³ = c³+d³`.\nAll the numbers `a`, `b`, `c` and `d` should be different and greater than `0`.\n\"\"\"", "inputs": [[1], [1729], [42], [4103], [4102], [4104], [4105], [4106], [0], [46163]], "outputs": [[false], [true], [false], [false], [false], [true], [false], [false], [false], [false]], "starter_code": "def has_two_cube_sums(n):", "canonical_solution": "def has_two_cube_sums(n):\n    cubic_list = [i ** 3 for i in range(1, int(n ** (1.0 / 3.0)) + 1)]\n    return sum([n != 2 * c and n - c in cubic_list for c in cubic_list]) > 3", "entry_point": "has_two_cube_sums", "task_id": "TACO_lite/105", "input_output_examples": [[["aaaabbcdefffffffg"]], [["aa[aa]bbcdeff[fffff]g"]]]}
{"requirement": "def plant_doubling(n):\"\"\"# Task\n Lonerz got some crazy growing plants and he wants to grow them nice and well.\n \n Initially, the garden is completely barren. \n \n Each morning, Lonerz can put any number of plants into the garden to grow. \n \n And at night, each plant mutates into two plants. \n \n Lonerz really hopes to see `n` plants in his garden.\n\n Your task is to find the minimum number of plants Lonerz has to plant to get `n` plants one day.\n\n# Input/Output\n\n The number of plant lonerz hopes to see in his garden.\n \n \n - `[input]` integer `n`\n \n   `1 <= n <= 10^7`\n\n\n - `[output]` an integer\n\n The number of plants Lonerz needs to plant.\n\"\"\"", "inputs": [[5], [8], [536870911], [1]], "outputs": [[2], [1], [29], [1]], "starter_code": "def plant_doubling(n):", "canonical_solution": "def plant_doubling(n):\n    return bin(n).count('1')", "entry_point": "plant_doubling", "task_id": "TACO_lite/109", "input_output_examples": [[[[1, 2], [3, 4], 15], [[3, 1, 2], [4, 5], 21]], [[5], [6]]]}
{"requirement": "def locate(seq, value):\"\"\"\nWrite a function that gets a sequence and value and returns `true/false` depending on whether the variable exists in a multidimensional sequence.\n\"\"\"", "inputs": [[["a", "b", ["c", "d", ["e"]]], "a"], [["a", "b", ["c", "d", ["e"]]], "d"], [["a", "b", ["c", "d", ["e"]]], "e"], [["a", "b", ["c", "d", ["e"]]], "f"], [["a", "b", ["c", "d", ["e", ["a", "b", ["c", "d", ["e4"]]]]]], "e4"], [["a", "b", ["c", "d", ["e", ["a", "b", ["c", "d", ["e", ["a", "b", ["c", "d", ["e4", ["a", "b", ["c", "d", ["e", ["a", "b", ["c", "d", ["e", ["a", "b", ["c", "d", ["e14"]]]]]]]]]]]]]]]]]], "e"]], "outputs": [[true], [true], [true], [false], [true], [true]], "starter_code": "def locate(seq, value):", "canonical_solution": "def locate(seq, value):\n    for s in seq:\n        if s == value or (isinstance(s, list) and locate(s, value)):\n            return True\n    return False", "entry_point": "locate", "task_id": "TACO_lite/114", "input_output_examples": [[["Ruby and Crystal", "good"]], [[{"ruby": 3, "crystal": 2}]]]}
{"requirement": "def growing_plant(up, down, h):\"\"\"\n### Task\n Each day a plant is growing by `upSpeed` meters. Each night that plant's height decreases by `downSpeed` meters due to the lack of sun heat. Initially, plant is 0 meters tall. We plant the seed at the beginning of a day. We want to know when the height of the plant will reach a certain level.\n\n### Input/Output\n\n```if-not:sql\n - `[input]` integer `upSpeed`\n\n    A positive integer representing the daily growth.\n\n    Constraints: `5 ≤ upSpeed ≤ 100.`\n\n\n - `[input]` integer `downSpeed`\n\n    A positive integer representing the nightly decline.\n\n    Constraints: `2 ≤ downSpeed < upSpeed.`\n\n\n - `[input]` integer `desiredHeight`\n\n    A positive integer representing the threshold.\n\n    Constraints: `4 ≤ desiredHeight ≤ 1000.`\n\n - `[output]` an integer\n\n    The number of days that it will take for the plant to reach/pass desiredHeight (including the last day in the total count).\n```\n```if:sql\n## Input\n\n~~~\n-----------------------------------------\n|     Table     |    Column      | Type |\n|---------------+----------------+------|\n| growing_plant | down_speed     | int  |\n|               | up_speed       | int  |\n|               | desired_height | int  |\n-----------------------------------------\n~~~\n\n### Columns\n* `up_speed`: A positive integer representing the daily growth. Constraints: `5 ≤ up_speed ≤ 100.`\n* `down_speed`: A positive integer representing the nightly decline. Constraints: `2 ≤ down_speed < up_speed.`\n* `desired_height`: A positive integer representing the threshold. Constraints: `4 ≤ desired_height ≤ 1000.`\n\n## Output\n\n~~~\n-------------------\n|  Column  | Type |\n|----------+------|\n| id       | int  |\n| num_days | int  |\n-------------------\n~~~\n\n`num_days` is the number of days that it will take for the plant to reach/pass desiredHeight (including the last day in the total count).\n```\n\"\"\"", "inputs": [[100, 10, 910], [10, 9, 4], [5, 2, 5], [5, 2, 6]], "outputs": [[10], [1], [1], [2]], "starter_code": "def growing_plant(up, down, h):", "canonical_solution": "from math import ceil\n\ndef growing_plant(up, down, h):\n    return max(ceil((h - down) / (up - down)), 1)", "entry_point": "growing_plant", "task_id": "TACO_lite/115", "input_output_examples": [[[[95, 90, 93]]], [["A"]]]}
{"requirement": "def title_to_number(title):\"\"\"\nWrite a function \n\n`titleToNumber(title) or title_to_number(title) or titleToNb title ...`\n\n(depending on the language)\n\nthat given a column title as it appears in an Excel sheet, returns its corresponding column number. All column titles will be uppercase.\n\"\"\"", "inputs": [["A"], ["Z"], ["AA"], ["AZ"], ["BA"], ["CODEWARS"], ["ZZZTOP"], ["OYAJI"], ["LONELINESS"], ["UNFORGIVABLE"]], "outputs": [[1], [26], [27], [52], [53], [28779382963], [321268054], [7294985], [68400586976949], [79089429845931757]], "starter_code": "def title_to_number(title):", "canonical_solution": "def title_to_number(title):\n    ret = 0\n    for i in title:\n        ret = ret * 26 + ord(i) - 64\n    return ret", "entry_point": "title_to_number", "task_id": "TACO_lite/117", "input_output_examples": [[[2332], [110011], [54322345], [1221]], [[true], [true], [true], [true]]]}
{"requirement": "def say_hello(name):\"\"\"\n## Debugging sayHello function\n\nThe starship Enterprise has run into some problem when creating a program to greet everyone as they come aboard. It is your job to fix the code and get the program working again!\n\"\"\"", "inputs": [["Mr. Spock"], ["Captain Kirk"], ["Liutenant Uhura"], ["Dr. McCoy"], ["Mr. Scott"]], "outputs": [["Hello, Mr. Spock"], ["Hello, Captain Kirk"], ["Hello, Liutenant Uhura"], ["Hello, Dr. McCoy"], ["Hello, Mr. Scott"]], "starter_code": "def say_hello(name):", "canonical_solution": "def say_hello(name):\n    return f'Hello, {name}'", "entry_point": "say_hello", "task_id": "TACO_lite/118", "input_output_examples": [[["Can I have a sabbatical?", 5, 5]], [["Sabbatical! Boom!"]]]}
{"requirement": "def sum_circles(*args):\"\"\"\nWrite a function that takes as its parameters *one or more numbers which are the diameters of circles.* \n\nThe function should return the *total area of all the circles*, rounded to the nearest integer in a string that says \"We have this much circle: xyz\". \n\nYou don't know how many circles you will be given, but you can assume it will be at least one.\n\nTranslations and comments (and upvotes!) welcome!\n\"\"\"", "inputs": [[48, 7, 8, 9, 10], [1], [1, 1, 1, 2, 3, 4, 5], [894, 5778, 4839, 476], [4.5456, 746.5, 98.34, 344.543], [1, 1, 1], [13.58, 14.9, 56.99, 107.321], [56894.04839, 843975.4839, 4.08437403489], [5, 6, 7, 8, 9, 10, 105083, 48839, 4853, 28, 483]], "outputs": [["We have this much circle: 2040"], ["We have this much circle: 1"], ["We have this much circle: 45"], ["We have this much circle: 45417233"], ["We have this much circle: 538519"], ["We have this much circle: 2"], ["We have this much circle: 11916"], ["We have this much circle: 561977165367"], ["We have this much circle: 10564760498"]], "starter_code": "def sum_circles(*args):", "canonical_solution": "import math\n\ndef sum_circles(*args):\n    t = round(sum([math.pi * d ** 2 / 4 for d in args]))\n    return 'We have this much circle: {}'.format(int(t))", "entry_point": "sum_circles", "task_id": "TACO_lite/122", "input_output_examples": [[[[5, 3, 2, 8, 1, 4]], [[5, 3, 2, 8, 1, 4, 11]]], [[[1, 3, 8, 4, 5, 2]], [[1, 3, 8, 4, 5, 2, 11]]]]}
{"requirement": "def de_nico(key, msg):\"\"\"# Task\n\nWrite a function `deNico`/`de_nico()` that accepts two parameters:\n- `key`/`$key` - string consists of unique letters and digits\n- `message`/`$message` - string with encoded message \n\nand decodes the `message` using the `key`.  \n\nFirst create a numeric key basing on the provided `key` by assigning each letter position in which it is located after setting the letters from `key` in an alphabetical order.\n\nLet's decode  `cseerntiofarmit on  ` using our `crazy` key.\n\n```\n1 2 3 4 5\n---------\nc s e e r\nn t i o f\na r m i t\n  o n   \n```\n\nAfter using the key:\n```\n2 3 1 5 4\n---------\ns e c r e\nt i n f o\nr m a t i\no n\n```\n\n# Notes \n\n- The `message` is never shorter than the `key`.\n- Don't forget to remove trailing whitespace after decoding the message\n\n# Related Kata\n\n[Basic Nico - encode](https://www.codewars.com/kata/5968bb83c307f0bb86000015)\n\"\"\"", "inputs": [["crazy", "cseerntiofarmit on  "], ["crazy", "cseerntiofarmit on"], ["abc", "abcd"], ["ba", "2143658709"], ["a", "message"], ["key", "eky"]], "outputs": [["secretinformation"], ["secretinformation"], ["abcd"], ["1234567890"], ["message"], ["key"]], "starter_code": "def de_nico(key, msg):", "canonical_solution": "def de_nico(key, msg):\n    ll, order, s = (len(key), [sorted(key).index(c) for c in key], '')\n    while msg:\n        s, msg = (s + ''.join((msg[i] for i in order if i < len(msg))), msg[ll:])\n    return s.strip()", "entry_point": "de_nico", "task_id": "TACO_lite/125", "input_output_examples": [[[0, 400, 300]], [[37]]]}
{"requirement": "def group_cities(seq):\"\"\"\n## Task\n\nCreate a function that given a sequence of strings, groups the elements that can be obtained by rotating others, ignoring upper or lower cases. \n\nIn the event that an element appears more than once in the input sequence, only one of them will be taken into account for the result, discarding the rest. \n\n## Input\n\nSequence of strings. Valid characters for those strings are uppercase and lowercase characters from the alphabet and whitespaces.\n\n## Output\n\nSequence of elements. Each element is the group of inputs that can be obtained by rotating the strings. \n\nSort the elements of each group alphabetically. \n\nSort the groups descendingly by size and in the case of a tie, by the first element of the group alphabetically.\n\"\"\"", "inputs": [[["Tokyo", "London", "Rome", "Donlon", "Kyoto", "Paris", "Okyot"]], [["Tokyo", "London", "Rome", "Donlon"]], [["Rome", "Rome", "Rome", "Donlon", "London"]], [["Ab", "Aa"]], [[]]], "outputs": [[[["Kyoto", "Okyot", "Tokyo"], ["Donlon", "London"], ["Paris"], ["Rome"]]], [[["Donlon", "London"], ["Rome"], ["Tokyo"]]], [[["Donlon", "London"], ["Rome"]]], [[["Aa"], ["Ab"]]], [[]]], "starter_code": "def group_cities(seq):", "canonical_solution": "def group_cities(seq):\n    result = []\n    sort_result = []\n    seq = list(dict.fromkeys(seq))\n    for e, i in enumerate(seq):\n        sort_result = [j for j in seq if len(j) == len(i) and j.lower() in 2 * i.lower()]\n        if not sorted(sort_result) in result:\n            result.append(sorted(sort_result))\n    return sorted(sorted(result), key=len, reverse=True)", "entry_point": "group_cities", "task_id": "TACO_lite/126", "input_output_examples": [[[false, false]], [[false]]]}
{"requirement": "def next_numb(val):\"\"\"\nMake a function that receives a value, ```val``` and outputs the smallest higher number than the given value, and this number belong to a set of positive integers that have the following properties:\n\n- their digits occur only once\n\n- they are odd\n\n- they are multiple of three\n\nEnjoy the kata!!\n\"\"\"", "inputs": [[12], [13], [99], [999999], [9999999999]], "outputs": [[15], [15], [105], [1023459], ["There is no possible number that fulfills those requirements"]], "starter_code": "def next_numb(val):", "canonical_solution": "def unique_digits(n):\n    return len(set(str(n))) == len(str(n))\n\ndef next_numb(val):\n    val += 1\n    while val % 3:\n        val += 1\n    if val % 2 == 0:\n        val += 3\n    while not unique_digits(val):\n        val += 6\n        if val > 9876543210:\n            break\n    else:\n        return val\n    return 'There is no possible number that fulfills those requirements'", "entry_point": "next_numb", "task_id": "TACO_lite/130", "input_output_examples": [[[[["H", "H", "W", "O"], ["W", "W", "O", "W"], ["H", "H", "O", "O"]]]], [[[["O", "O", "O", "O"], ["W", "W", "W", "W"], ["H", "H", "H", "H"]]]]]}
{"requirement": "def thirt(n):\"\"\"\nWhen you divide the successive powers of `10` by `13` you get the following remainders of the integer divisions:  \n\n`1, 10, 9, 12, 3, 4`. \n\nThen the whole pattern repeats.\n\nHence the following method:\nMultiply the right most digit of the number with the left most number \nin the sequence shown above, the second right most digit to the second \nleft most digit of the number in the sequence. The cycle goes on and you sum all these products. Repeat this process until the sequence of sums is stationary.\n\nCall `thirt` the function which processes this sequence of operations on an integer `n (>=0)`. `thirt` will return the stationary number.\n\"\"\"", "inputs": [[8529], [85299258], [5634], [1111111111], [987654321]], "outputs": [[79], [31], [57], [71], [30]], "starter_code": "def thirt(n):", "canonical_solution": "array = [1, 10, 9, 12, 3, 4]\n\ndef thirt(n):\n    total = sum([int(c) * array[i % 6] for i, c in enumerate(reversed(str(n)))])\n    if n == total:\n        return total\n    return thirt(total)", "entry_point": "thirt", "task_id": "TACO_lite/134", "input_output_examples": [[[1, 3, 2, 2, 4, 1, 1, 3, 1, 4, 2], [1, 3, 2, 4, 3, 3, 2]], [[true], [false]]]}
{"requirement": "def find_2nd_largest(arr):\"\"\"\nFind the 2nd largest integer in array\nIf the array has no 2nd largest integer then return nil.\nReject all non integers elements and then find the 2nd largest integer in array\n\nReturn nil if there is no 2nd largest integer.\nTake care of big numbers as well\n\"\"\"", "inputs": [[[1, 2, 3]], [[1, 1, 1, 1, 1, 1, 1]], [[1, "a", "2", 3, 3, 4, 5, "b"]], [[1, "a", "2", 3, 3, 3333333333333333333334, 544444444444444444444444444444, "b"]]], "outputs": [[2], [null], [4], [3333333333333333333334]], "starter_code": "def find_2nd_largest(arr):", "canonical_solution": "def find_2nd_largest(arr):\n    arr = sorted((i for i in set(arr) if type(i) == int))\n    return arr[-2] if len(arr) > 1 else None", "entry_point": "find_2nd_largest", "task_id": "TACO_lite/138", "input_output_examples": [[["~"]], [["No Problem"]]]}
{"requirement": "def solve(count, ball_number):\"\"\"Jack and Jill are playing a game. They have balls numbered from `0` to `n - 1`. Jack looks the other way and asks Jill to reverse the position of the balls, for instance, to change the order. He further asks Jill to reverse the position of the balls `n` times, each time starting from one position further to the right, till she reaches the last ball. So, Jill has to reverse the positions of the ball starting from position `0`, then from position `1`, then from position `2` and so on. At the end of the game, Jill will ask Jack to guess the final position of any ball numbered `k`. \n\nYou will be given `2` integers, the first will be `n`(balls numbered from `0` to `n-1`) and the second will be `k`. You will return the position of the ball numbered `k` after the rearrangement.\n\"\"\"", "inputs": [[4, 1], [4, 2], [4, 3], [20, 8], [20, 9], [20, 10]], "outputs": [[3], [2], [0], [17], [19], [18]], "starter_code": "def solve(count, ball_number):", "canonical_solution": "def solve(count, ball_number):\n    assert isinstance(count, int)\n    assert isinstance(ball_number, int)\n    balls = list(range(count))\n    for idx in range(count):\n        balls = balls[:idx] + balls[idx:][::-1]\n    return balls.index(ball_number)", "entry_point": "solve", "task_id": "TACO_lite/149", "input_output_examples": [[["EbnhGfjklmjhgz", "Eabcz"]], [[true]]]}
{"requirement": "def last_digit(n1, n2):\"\"\"\nDefine a function that takes in two non-negative integers `$a$` and `$b$` and returns the last decimal digit of `$a^b$`. Note that `$a$` and `$b$` may be very large!\n\nYou may assume that the input will always be valid.\n\n___\n\n## Remarks\n\n### JavaScript, C++, R, PureScript\n\nSince these languages don't have native arbitrarily large integers, your arguments are going to be strings representing non-negative integers instead.\n\"\"\"", "inputs": [[4, 1], [4, 2], [9, 7], [10, 1000000000], [38710248912497124917933333333284108412048102948908149081409204712406, 226628148126342643123641923461846128214626], [3715290469715693021198967285016729344580685479654510946723, 68819615221552997273737174557165657483427362207517952651]], "outputs": [[4], [6], [9], [0], [6], [7]], "starter_code": "def last_digit(n1, n2):", "canonical_solution": "def last_digit(n1, n2):\n    return pow(n1, n2, 10)", "entry_point": "last_digit", "task_id": "TACO_lite/150", "input_output_examples": [[[["56-23", "1-100"]], [["1-3", "5-7", "2-3"]], [["11-11", "344-344"]], [["43-45", "1021-55", "000-18888", "92-34", "76-32", "99-1", "1020-54"]]], [["1-100"], ["1-3"], [false], ["000-18888"]]]}
{"requirement": "def count_number(n, x):\"\"\"# Task\n Let's consider a table consisting of `n` rows and `n` columns. The cell located at the intersection of the i-th row and the j-th column contains number i × j. The rows and columns are numbered starting from 1.\n\n You are given a positive integer `x`. Your task is to count the number of cells in a table that contain number `x`.\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  `1 ≤ n ≤ 10^5.`\n\n\n - `[input]` integer `x`\n\n  `1 ≤ x ≤ 10^9.`\n\n\n - `[output]` an integer\n\n  The number of times `x` occurs in the table.\n\"\"\"", "inputs": [[5, 5], [10, 5], [6, 12], [6, 169], [100000, 1000000000]], "outputs": [[2], [2], [4], [0], [16]], "starter_code": "def count_number(n, x):", "canonical_solution": "def count_number(n, x):\n    return len([j for j in range(1, n + 1) if x % j == 0 and x / j <= n])", "entry_point": "count_number", "task_id": "TACO_lite/153", "input_output_examples": [[[-12], [0, -1], [0, 12], [0], [0, 3], [1], [1, 0], [1, 5], [1, 9], [1632, 2], [5000], [5001]], [["NaR"], ["NaR"], ["NaR"], ["N"], [":."], ["I"], ["I"], ["I:.:"], ["IS:."], ["MDCXXXII:"], ["MMMMM"], ["NaR"]]]}
{"requirement": "def reindeer(presents):\"\"\"Santa puts all the presents into the huge sack. In order to let his reindeers rest a bit, he only takes as many reindeers with him as he is required to do. The others may take a nap.\n\nTwo reindeers are always required for the sleigh and Santa himself. Additionally he needs 1 reindeer per 30 presents. As you know, Santa has 8 reindeers in total, so he can deliver up to 180 presents at once (2 reindeers for Santa and the sleigh + 6 reindeers with 30 presents each).\n\nComplete the function `reindeers()`, which takes a number of presents and returns the minimum numbers of required reindeers. If the number of presents is too high, throw an error.\n\"\"\"", "inputs": [[0], [1], [5], [30], [31], [60], [61], [90], [91], [120], [121], [150], [151], [180]], "outputs": [[2], [3], [3], [3], [4], [4], [5], [5], [6], [6], [7], [7], [8], [8]], "starter_code": "def reindeer(presents):", "canonical_solution": "from math import ceil\n\ndef reindeer(presents):\n    if presents > 180:\n        raise ValueError('Too many presents')\n    return ceil(presents / 30.0) + 2", "entry_point": "reindeer", "task_id": "TACO_lite/154", "input_output_examples": [[[[1, 1, 1], 10], [[0, 0, 1], 10]], [[1, 1, 1, 3, 5, 9, 17, 31, 57, 105], [0, 0, 1, 1, 2, 4, 7, 13, 24, 44]]]}
{"requirement": "def zeros(n):\"\"\"\nWrite a program that will calculate the number of trailing zeros in a factorial of a given number.\n\n`N! = 1 * 2 * 3 *  ... * N`\n\nBe careful `1000!` has 2568 digits...\n\nFor more info, see: http://mathworld.wolfram.com/Factorial.html \n\n*Hint: You're not meant to calculate the factorial. Find another way to find the number of zeros.*\n\"\"\"", "inputs": [[0], [6], [30], [100], [1000], [100000], [1000000000]], "outputs": [[0], [1], [7], [24], [249], [24999], [249999998]], "starter_code": "def zeros(n):", "canonical_solution": "def zeros(n):\n    pow_of_5 = 5\n    zeros = 0\n    while n >= pow_of_5:\n        zeros += n // pow_of_5\n        pow_of_5 *= 5\n    return zeros", "entry_point": "zeros", "task_id": "TACO_lite/155", "input_output_examples": [[[[-4, 0, -1, 0], 2], [[0, -1, 0, 0, -1, -1, -1, -1, 1, -1], 1]], [[[0, 4, 3, 4]], [[1, 2, 1, 1, 2, 2, 2, 2, 0, 2]]]]}
{"requirement": "def finding_k(arr):\"\"\"# Task\nGiven an array `arr`, find the maximal value of `k` such `a[i] mod k` = `a[j] mod k` for all valid values of i and j.\n\nIf it's impossible to find such number (there's an infinite number of `k`s), return `-1` instead.\n\n\n# Input/Output\n\n`[input]` integer array `arr`\n\nA non-empty array of positive integer.\n\n`2 <= arr.length <= 10`\n\n`1 <= arr[i] <= 100`\n\n`[output]` an integer\n\nThe maximum value of `k` or `-1` if there is none.\n\"\"\"", "inputs": [[[1, 2, 3]], [[1, 1, 1]], [[5, 2, 8]], [[4, 1, 7]], [[1, 7, 13]], [[4, 5, 4]], [[5, 6, 7, 8]], [[10, 100]], [[64, 8, 1]], [[2, 9, 30]]], "outputs": [[1], [-1], [3], [3], [6], [1], [1], [90], [7], [7]], "starter_code": "def finding_k(arr):", "canonical_solution": "def finding_k(arr):\n    for n in range(max(arr) - 1, 0, -1):\n        if len({x % n for x in arr}) == 1:\n            return n\n    return -1", "entry_point": "finding_k", "task_id": "TACO_lite/156", "input_output_examples": [[[2, [[1, 2]]], [1, [[2, 3], [1, 2], [1, 2]]], [2, [[1, 3], [1, 2], [2, 1], [2, 3]]]], [[1], [1], [3]]]}
{"requirement": "def pattern(n):\"\"\"\n##Task:\n\nYou have to write a function **pattern** which creates the following pattern upto n number of rows. *If the Argument is 0 or a Negative Integer then it should return \"\" i.e. empty string.*\n\n##Pattern:\n\n    (n)\n    (n)(n-1)\n    (n)(n-1)(n-2)\n    ................\n    .................\n    (n)(n-1)(n-2)....4\n    (n)(n-1)(n-2)....43\n    (n)(n-1)(n-2)....432\n    (n)(n-1)(n-2)....4321\n    \n```Note: There are no blank spaces```\n\n```Hint: Use \\n in string to jump to next line```\n\"\"\"", "inputs": [[1], [2], [5], [0], [-25]], "outputs": [["1"], ["2\n21"], ["5\n54\n543\n5432\n54321"], [""], [""]], "starter_code": "def pattern(n):", "canonical_solution": "def pattern(n):\n    return '\\n'.join((''.join((str(i) for i in range(n, j, -1))) for j in range(n - 1, -1, -1)))", "entry_point": "pattern", "task_id": "TACO_lite/160", "input_output_examples": [[[""]], [[0]]]}
{"requirement": "def graceful_tipping(bill):\"\"\"Adding tip to a restaurant bill in a graceful way can be tricky, thats why you need make a function for it.\n\nThe function will receive the restaurant bill (always a positive number) as an argument. You need to 1) **add at least 15%** in tip, 2) round that number up to an *elegant* value and 3) return it.\n\nWhat is an *elegant* number? It depends on the magnitude of the number to be rounded. Numbers below 10 should simply be rounded to whole numbers. Numbers 10 and above should be rounded like this:\n\n10 - 99.99... ---> Round to number divisible by 5\n\n100 - 999.99... ---> Round to number divisible by 50\n\n1000 - 9999.99... ---> Round to number divisible by 500\n\nAnd so on...\n\nGood luck!\n\"\"\"", "inputs": [[1], [7], [12], [86], [99], [1149], [983212]], "outputs": [[2], [9], [15], [100], [150], [1500], [1500000]], "starter_code": "def graceful_tipping(bill):", "canonical_solution": "from math import ceil, log10\n\ndef graceful_tipping(bill):\n    bill *= 1.15\n    if bill < 10:\n        return ceil(bill)\n    e = int(log10(bill))\n    unit = 10 ** e / 2\n    return ceil(bill / unit) * unit", "entry_point": "graceful_tipping", "task_id": "TACO_lite/169", "input_output_examples": [[["A"], ["八"], ["1100001010100111"], ["11110000100100001000101010001100"]], [["01000001"], ["111001011000010110101011"], ["10100111"], ["10000001010001100"]]]}
{"requirement": "def motif_locator(sequence, motif):\"\"\"\nIn genetics, a sequence’s motif is a nucleotides (or amino-acid) sequence pattern. Sequence motifs have a biological significance. For more information you can take a look [here](https://en.wikipedia.org/wiki/Sequence_motif).\n\n\nFor this kata you need to complete the function `motif_locator`. This function receives 2 arguments - a sequence and a motif. Both arguments are strings.\n\nYou should return an array that contains all the start positions of the motif (in order). A sequence may contain 0 or more repetitions of the given motif. Note that the number of the first position is 1, not 0.\n\n**Note**: You can take a look to my others bio-info kata [here](http://www.codewars.com/users/nbeck/authored)\n\"\"\"", "inputs": [["TTCCGGAACC", "CC"], ["ACGTTACAACGTTAG", "ACGT"], ["ACGTACGTACGT", "AAA"], ["ACGT", "ACGTGAC"]], "outputs": [[[3, 9]], [[1, 9]], [[]], [[]]], "starter_code": "def motif_locator(sequence, motif):", "canonical_solution": "def motif_locator(sequence, motif):\n    res, i = ([], 0)\n    while True:\n        i = sequence.find(motif, i) + 1\n        if not i:\n            return res\n        res.append(i)", "entry_point": "motif_locator", "task_id": "TACO_lite/173", "input_output_examples": [[[500, 505, 10], [100, 200, 10]], [[505, 505], [109, 190]]]}
{"requirement": "def fishex(s):\"\"\"# How much is the fish! (- Scooter )\nThe ocean is full of colorful fishes. We as programmers want to know the hexadecimal value of these fishes.\n\n## Task\nTake all hexadecimal valid characters (a,b,c,d,e,f) of the given name and XOR them. Return the result as an integer.\n\n## Input\nThe input is always a string, which can contain spaces, upper and lower case letters but no digits. \n\"\"\"", "inputs": [["pufferfish"], ["puffers"], ["balloonfish"], ["blowfish"], ["bubblefish"], ["globefish"], ["swellfish"], ["toadfish"], ["toadies"], ["honey toads"], ["sugar toads"], ["sea squab"], [""], ["Aeneus corydoras"], ["African glass catfish"], ["African lungfish"], ["Aholehole"], ["Airbreathing catfish"], ["Airsac catfish"], ["Alaska blackfish"], ["Albacore"], ["Alewife"], ["Alfonsino"], ["Algae eater"], ["Alligatorfish"], ["Asian carps"], ["Asiatic glassfish"], ["Atka mackerel"], ["Atlantic cod"], ["Atlantic herring"], ["Atlantic salmon"], ["Atlantic saury"], ["Atlantic silverside"], ["Australasian salmon"], ["Australian grayling"], ["Australian herrin"], ["Australian lungfish"], ["Australian prowfish"], ["Ayu"]], "outputs": [[1], [14], [14], [4], [10], [10], [1], [8], [9], [9], [13], [5], [0], [1], [0], [12], [10], [12], [5], [8], [9], [5], [5], [4], [15], [6], [9], [6], [13], [2], [6], [6], [1], [10], [0], [4], [5], [5], [10]], "starter_code": "def fishex(s):", "canonical_solution": "from functools import reduce\nVALID = frozenset('abcdefABCDEF')\n\ndef fishex(s):\n    return reduce(lambda b, c: b ^ c, (int(a, 16) for a in s if a in VALID), 0)", "entry_point": "fishex", "task_id": "TACO_lite/179", "input_output_examples": [[[{"a": 1, "b": 1, "operation": "+"}]], [[2]]]}
{"requirement": "def code(*args):\"\"\"\nYou've just entered a programming contest and have a chance to win a million dollars. This is the last question you have to solve, so your victory (and your vacation) depend on it. Can you guess the function just by looking at the test cases? There are two numerical inputs and one numerical output. Goodluck!\n\nhint: go\n here\n\"\"\"", "inputs": [[9, 8], [123, 456], [3, 2], [1, 1], [12, 8], [200, 100], [100, 200]], "outputs": [[1], [1419], [13], [16], [88], [1698], [1698]], "starter_code": "def code(*args):", "canonical_solution": "TABLE = str.maketrans('0123456789', '9876543210')\n\ndef code(*args):\n    return sum(map(lambda n: int(str(n).translate(TABLE)), args))", "entry_point": "code", "task_id": "TACO_lite/180", "input_output_examples": [[[5.5589], [3.3424]], [[5.56], [3.34]]]}
{"requirement": "def calc(a):\"\"\"# Task\n\nJohn won the championship of a TV show. He can get some bonuses.\n\nHe needs to play a game to determine the amount of his bonus.\n\nHere are some cards in a row. A number is written on each card.\n\nIn each turn, John can take a card, but only from the beginning or the end of the row. Then multiply the number on the card by an coefficient 2^(i)(i means the ith turn). The product is John's bonus of current turn.\n\nAfter all the cards are taken away, the game is over. John's final bonus is the sum of all rounds of bonuses.\n\nObviously, the order in which John takes the cards will affect the amount of John's final bonus.\n\nYour task is to help John calculate the maximum amount of bonuses he can get.\n\n# Input\n\n- `cards`: An integer array. Each element represents the number on the card.\n  - `1 <= cards.length <= 30`\n  - `1 <= cards[i] <= 100`\n\n\n- All inputs are valid.\n\n# Output\n\nAn integer. the maximum amount of bonuses John can get.\n\"\"\"", "inputs": [[[1, 2, 5]], [[1]], [[1, 1]], [[1, 2, 1]], [[4, 10, 2, 3, 1, 3, 1, 6, 9]]], "outputs": [[50], [2], [6], [22], [6722]], "starter_code": "def calc(a):", "canonical_solution": "def calc(a):\n    res = [0] * (len(a) + 1)\n    for k in range(len(a)):\n        res = [2 * max(a[i] + res[i + 1], a[i + k] + res[i]) for i in range(len(a) - k)]\n    return res[0]", "entry_point": "calc", "task_id": "TACO_lite/182", "input_output_examples": [[[3, 5, 4, 10]], [[200]]]}
{"requirement": "def gematria(s):\"\"\"Gematria is an Assyro-Babylonian-Greek system of code and numerology later adopted into Jewish culture. The system assigns numerical value to a word or a phrase in the belief that words or phrases with identical numerical values bear some relation to each other or bear some relation to the number itself. While more commonly used on Hebrew words, there is also an English version.\n\nEach letter has a value and the gematrian value of a word or a phrase is the sum of those values. The code takes a word or an expression and returns the gematrian value of it.\n\nThe calculation is case insensitive and counts no spaces. \n\n‎These are the values of the different letters:\n\na=1, b=2, c=3, d=4, e=5, f=6, g=7, h=8, i=9, k=10, l=20,\nm=30, n=40, o=50, p=60, q=70, r=80, s=90, t=100, u=200,\nx=300, y=400, z=500, j=600, v=700, w=900\n\"\"\"", "inputs": [["love"], ["jaels"], ["JAELS"], ["Devil"], ["Coding is fun"]], "outputs": [[775], [716], [716], [738], [458]], "starter_code": "def gematria(s):", "canonical_solution": "TOME = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'k': 10, 'l': 20, 'm': 30, 'n': 40, 'o': 50, 'p': 60, 'q': 70, 'r': 80, 's': 90, 't': 100, 'u': 200, 'x': 300, 'y': 400, 'z': 500, 'j': 600, 'v': 700, 'w': 900}\n\ndef gematria(s):\n    return sum((TOME.get(c, 0) for c in s.lower()))", "entry_point": "gematria", "task_id": "TACO_lite/184", "input_output_examples": [[[["Algebra", "History", "Geometry", "English"]]], [[["Algebra", "English", "Geometry", "History"]]]]}
{"requirement": "def womens_age(n):\"\"\"\nAs you may know, once some people pass their teens, they jokingly only celebrate their 20th or 21st birthday, forever. With some maths skills, that's totally possible - you only need to select the correct number base!\n\nYour task is to translate the given age to the much desired 20 (or 21) years, and indicate the number base, in the format specified below.\n\n**Note:** input will be always > 21\n\n*Hint: if you don't know (enough) about [numeral systems](https://en.wikipedia.org/wiki/Numeral_system) and [radix](https://en.wikipedia.org/wiki/Radix), just observe the pattern!*\n\n---\n\n## My other katas\n\nIf you enjoyed this kata then please try [my other katas](https://www.codewars.com/collections/katas-created-by-anter69)! :-)\n\n---\n\n### *Translations are welcome!*\n\"\"\"", "inputs": [[32], [39], [22], [65], [83]], "outputs": [["32? That's just 20, in base 16!"], ["39? That's just 21, in base 19!"], ["22? That's just 20, in base 11!"], ["65? That's just 21, in base 32!"], ["83? That's just 21, in base 41!"]], "starter_code": "def womens_age(n):", "canonical_solution": "def womens_age(n):\n    return f\"{n}? That's just {20 + n % 2}, in base {n // 2}!\"", "entry_point": "womens_age", "task_id": "TACO_lite/186", "input_output_examples": [[[1], [2], [3], [4], [5], [6], [18], [32], [100], [101]], [[true], [false], [true], [false], [false], [true], [true], [true], [false], [true]]]}
{"requirement": "def solve(a, b):\"\"\"\nConsider the prime number. If we sum the square of its digits we get a new number, then for this new number, and so on until reaching `1`.\n\nGiven a range, how many primes within that range will eventually end up being `1`? \n\nThe upperbound for the range is `50,000`. A range of `(2,25)` means that: `2 <= n < 25`. \n\nGood luck!\n\nIf you like this Kata, please try:\n\n[Prime reversion](https://www.codewars.com/kata/59b46276afcda204ed000094)\n\n[Domainant primes](https://www.codewars.com/kata/59ce11ea9f0cbc8a390000ed)\n\"\"\"", "inputs": [[1, 25], [100, 1000], [100, 2000], [100, 3000], [100, 4000]], "outputs": [[4], [28], [47], [65], [95]], "starter_code": "def solve(a, b):", "canonical_solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    sqrtn = int(n ** 0.5) + 1\n    for i in range(5, sqrtn, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\ndef end_one(n):\n    while n > 6:\n        n = sum(map(lambda x: int(x) * int(x), f'{n}'))\n        if n == 1:\n            return True\n\ndef solve(a, b):\n    return sum((1 for n in range(a, b) if is_prime(n) and end_one(n)))", "entry_point": "solve", "task_id": "TACO_lite/187", "input_output_examples": [[[3, 4, 6], [], [1, 2, 3], [1, 4, -6, 20]], [[7], [0], [3], [6]]]}
{"requirement": "def istree(matrix):\"\"\"In graph theory, a graph is a collection of nodes with connections between them.\nAny node can be connected to any other node exactly once, and can be connected to no nodes, to some nodes, or to every other node.\nNodes cannot be connected to themselves\nA path through a graph is a sequence of nodes, with every node connected to the node following and preceding it.\nA closed path is a path which starts and ends at the same node.\n\nAn open path:\n\na closed path:\n\nA graph is connected if there is a path from every node to every other node.\nA graph is a tree if it is connected and there are no closed paths.\n\n\nYour job is to write a function 'istree', which returns true if a graph is a tree, and false if it is not a tree.\n\nGraphs will be given as an array with each item being an array of integers which are the nodes that node is connected to.\n\nNote that it is also not a tree, because it contains closed path:\n\nA node with no connections is an empty array\nNote that if node 0 is connected to node 1, node 1 is also connected to node 0. This will always be true.\nThe order in which each connection is listed for each node also does not matter.\n\nGood luck!\n\"\"\"", "inputs": [[[[], []]], [[[1], [0]]], [[[1, 2], [0, 2], [0, 1]]], [[[1, 2, 3], [0, 2], [1, 2], [0]]], [[[1, 2, 3], [0], [0], [0, 4], [3]]], [[[1, 2, 3], [0], [0], [0, 4], [3], []]], [[[1], [0, 2], [1, 3, 5], [2, 4], [3, 5], [4, 2]]], [[[1], [0, 2, 3, 4], [1], [1], [1]]], [[[1], [0, 2, 3], [1], [1], [5], [4, 6, 7], [5], [5]]], [[[1, 2], [0, 3], [0, 3], [1, 2, 4], [3]]], [[[1, 2], [0, 2], [0, 1], []]], [[[1, 2], [0, 2], [0, 1], [4], [3]]]], "outputs": [[false], [true], [false], [false], [true], [false], [false], [true], [false], [false], [false], [false]], "starter_code": "def istree(matrix):", "canonical_solution": "def istree(matrix):\n    visited_nodes = set([0])\n    crossed_edges = set()\n    agenda = [0]\n    while agenda:\n        node = agenda.pop()\n        for i in matrix[node]:\n            if (node, i) in crossed_edges:\n                continue\n            if i in visited_nodes:\n                return False\n            agenda.append(i)\n            crossed_edges.add((i, node))\n            visited_nodes.add(i)\n    return len(visited_nodes) == len(matrix)", "entry_point": "istree", "task_id": "TACO_lite/188", "input_output_examples": [[[[1, -1, 2, -2, 3]], [[-3, 1, 2, 3, -1, -4, -2]], [[1, -1, 2, -2, 3, 3]]], [[3], [-4], [3]]]}
{"requirement": "def valid_romans(arr):\"\"\"\n## Task\n\nComplete the function that receives an array of strings (`arr`) as an argument and returns all the valid Roman numerals.\n\nBasic Roman numerals are denoted as:\n\n```\nI: 1, V: 5, X: 10, L: 50, C: 100, D: 500, M: 1000\n```\n\nFor the purposes of this kata we will consider valid only the numbers in range 0 - 5000 (both exclusive) since numbers >= 5000 were written in a different way (you had to place a heavy bar over the numeral that meant it was multiplied with 1000).\n\nThere are other ways of tackling this problem but the easiest is probably writing a Regular Expression.\n\n### Let's break the problem down:\n\nTo match a set of characters `/[1-9]/`(single digits) you should take into consideration the Roman numbers `I, II, III, IV, V, VI, VII, VIII, IX`. This could be done by testing with `/IX|IV|V?I{0,3}/`. This part `/I{0,3}/` matches `I, II or III` but we have a `V` appearing 0 or 1 times because of the `?` so `/V?I{0,3}/` would match `I,II,III,V,VI,VII or VIII`. However there is one flaw with this. Do you see it? It is the fact that it would also match an empty string `\"\"` because of the {0,3}. In order to pass the tests you will have to **filter out the empty strings** as well. So the entire part matches `I to IX`(inclusive) but what about larger digits?\n\nUse the same logic for the digit in the tens place and the hundreds place. Be sure to wrap each part (units, tens, hundreds, thousands) in a pair of braces `(IX|IV|V?I{0,3})` and for the digit in the thousands place the logic is pretty straight forward, you just have to match `M` 0 to 4 times (since 5000 is not included). Wrap everything up with `^` and `$` to make sure you match the entire string (^ matches from the beginning of the string, while $ denotes the end, meaning there is nothing after that sign.\n\nGood luck!\n\"\"\"", "inputs": [[["MMMCDLXVL", "MDLXXXVI", "DCLXII", "MMMMCLL", "MMDCCCLXXXIVCD"]], [["MMMMCCCXXXII", "MMDCCCXXVCD", "MMCCCXLV", "DCCLXVIIICD", "MMMMCXII"]], [["DCCLIVI", "MDCCXXXVVI", "MDLXXVI", "MDVIL", "MCCLXIII"]], [["DV", "", "CLVIII", "MDCCCXXCD", "MDCLXVI", "MMMDCCCLXXXVI"]], [["MMCDXVIII", "", "MMMCCXXXIV", "MMMMDCLXXXI", "MMMCMXIL", "MMMMCLXI"]]], "outputs": [[["MDLXXXVI", "DCLXII"]], [["MMMMCCCXXXII", "MMCCCXLV", "MMMMCXII"]], [["MDLXXVI", "MCCLXIII"]], [["DV", "CLVIII", "MDCLXVI", "MMMDCCCLXXXVI"]], [["MMCDXVIII", "MMMCCXXXIV", "MMMMDCLXXXI", "MMMMCLXI"]]], "starter_code": "def valid_romans(arr):", "canonical_solution": "import re\nPATTERN = re.compile('^M{0,4}(CM|CD|D?C{,3})(XC|XL|L?X{,3})(IX|IV|V?I{,3})$')\n\ndef valid_romans(arr):\n    return [e for e in arr if e and PATTERN.match(e)]", "entry_point": "valid_romans", "task_id": "TACO_lite/191", "input_output_examples": [[[10, 5, 5], [100, 60, 50]], [[0], [10]]]}
{"requirement": "def find_min_num(d, n=1):\"\"\"\nThe number ```12``` is the first number in having six divisors.\n\nYour challenge for this kata is to find the minimum number that has a certain number of divisors.\nFor this purpose we have to create the function \n\n```find_min_num() or findMinNum() or similar in the other languages```\n\nthat receives the wanted number of divisors ```num_div```, and outputs the smallest number having an amount of divisors equals to ```num_div```.\n\nIn this kata all the tests will be with ```numDiv < 80```\n\n(There will be a next kata with numDiv < 10000, Find the First Number Having a Certain Number of Divisors II, should have the help of number theory)\n\nEnjoy it and happy coding!\n(Memoization is advisable)\n\"\"\"", "inputs": [[6], [10], [12], [13]], "outputs": [[12], [48], [60], [4096]], "starter_code": "def find_min_num(d, n=1):", "canonical_solution": "def find_min_num(d, n=1):\n    while div_num(n) != d:\n        n += 1\n    return n\n\ndef div_num(n):\n    s = n ** 0.5\n    return sum((2 for k in range(1, int(s) + 1) if n % k == 0)) - (s % 1 == 0)", "entry_point": "find_min_num", "task_id": "TACO_lite/192", "input_output_examples": [[[20], [100]], [[2], [7]]]}
{"requirement": "def self_converge(number):\"\"\"\n### self_converge\n`Goal`: Given a number (with a minimum of 3 digits), return the number of iterations it takes to arrive at a derived number that converges on to itself, as per the following [Kaprekar][Kaprekar] routine. As a learning exercise, come up with a solution that uses recursion. The\nfollowing steps would be applicable to a number that originally had\nexactly 4 digits.\n\n0. Initialize a counter to count the number of iterations\n1. Take any four-digit number `n`, using at least two different digits.\n2. Arrange the digits in descending and then in ascending order to get two four-digit numbers, adding leading zeros if necessary. \n    - Add as many zeroes so that the width of the original number is maintained.\n3. Subtract the smaller number from the bigger number. Let us call this `nseq`.\n4. Check if `nseq` (the remainder) from Step 4 equals the previous value of `n`. If not, increment the iteration counter and go back to step 2 and perform it on the `nseq`. \n\nIf the number of digits to start with was more than 4, convergence occurs on to a `cycle` of numbers. Therefore in Step 5, detect this cycle by comparing to not only the previous value, but to all previous values of `n`.\n  - If there is a match, then return the count of iterations\n  - If the sequence_number collapses to zero, then return -1 \n\n[Kaprekar]: http://mathworld.wolfram.com/KaprekarRoutine.html\n\n### Converge values  \nWhile 3-digit numbers converge to the same unique number `k` which is also 3 digits long, all 4-digit numbers also converge to the same unique value `k1` which is 4 digits long. However, 5 digit numbers converge to any one of the following values: `53955, 59994, 61974, 62964, 63954, 71973, 74943, 75933, 82962, 83952`.\n\"\"\"", "inputs": [[4321], [2111], [211], [90900], [992299229]], "outputs": [[4], [6], [7], [9], [22]], "starter_code": "def self_converge(number):", "canonical_solution": "def self_converge(number):\n    n, cycle = (str(number), set())\n    while n not in cycle:\n        cycle.add(n)\n        s = ''.join(sorted(n))\n        n = '%0*d' % (len(n), int(s[::-1]) - int(s))\n    return -1 if not int(n) else len(cycle)", "entry_point": "self_converge", "task_id": "TACO_lite/193", "input_output_examples": [[[9, 2]], [[1]]]}
{"requirement": "def target_game(values):\"\"\"\n## Task\n In your favorite game, you must shoot a target with a water-gun to gain points. Each target can be worth a different amount of points. \n \n You are guaranteed to hit every target that you try to hit. You cannot hit consecutive targets though because targets are only visible for one second (one at a time) and it takes you a full second to reload your water-gun after shooting (you start the game already loaded).\n\n Given an array `vals` with the order of each target's point value, determine the maximum number of points that you can win.\n\n Note that the value can be zero or negative, don't shoot them ;-)\n\n## Input/Output\n\n\n - `[input]` integer array `vals`\n\n  The point values (negative or non-negative) of the targets (in order of appearance).\n\n\n - `[output]` an integer\n\n  The maximum number of points that you can score.\n\"\"\"", "inputs": [[[1, 2, 3, 4]], [[1, 3, 1]], [[5, 5, 5, 5, 5]], [[36, 42, 93, 29, 0, 33, 15, 84, 14, 24, 81, 11]], [[73, 80, 40, 86, 14, 96, 10, 56, 61, 84, 82, 36, 85]], [[11, 82, 47, 48, 80, 35, 73, 99, 86, 32, 32]], [[26, 54, 36, 35, 63, 58, 31, 80, 59, 61, 34, 54, 62, 73, 89, 7, 98, 91, 78]], [[0, 0, -1, -1]], [[1, 0, 0, 1]], [[5, -2, -9, -4]]], "outputs": [[6], [3], [15], [327], [490], [353], [615], [0], [2], [5]], "starter_code": "def target_game(values):", "canonical_solution": "def target_game(values):\n    a = b = 0\n    for n in values:\n        a, b = (b, max(a + n, b))\n    return max(a, b)", "entry_point": "target_game", "task_id": "TACO_lite/194", "input_output_examples": [[["10011010", "10110111"], ["01001000", "01011100"], ["01101000", "00111000"]], [["RBRB"], ["RB"], ["RB"]]]}
{"requirement": "def counter_effect(hit_count):\"\"\"# Introduction\n\nYou are the developer working on a website which features a large counter on its homepage, proudly displaying the number of happy customers who have downloaded your companies software.\n\nYou have been tasked with adding an effect to this counter to make it more interesting.  \n\nInstead of just displaying the count value immediatley when the page loads, we want to create the effect of each digit cycling through its preceding numbers before stopping on the actual value.\n\n\n\n# Task\n\nAs a step towards achieving this; you have decided to create a function that will produce a multi-dimensional array out of the hit count value.  Each inner dimension of the array represents an individual digit in the hit count, and will include all numbers that come before it, going back to 0.\n\n## Rules\n* The function will take one argument which will be a four character `string` representing hit count\n* The function must return a multi-dimensional array containing four inner arrays\n* The final value in each inner array must be the actual value to be displayed\n* Values returned in the array must be of the type `number`\n\"\"\"", "inputs": [["1250"], ["0050"], ["0000"]], "outputs": [[[[0, 1], [0, 1, 2], [0, 1, 2, 3, 4, 5], [0]]], [[[0], [0], [0, 1, 2, 3, 4, 5], [0]]], [[[0], [0], [0], [0]]]], "starter_code": "def counter_effect(hit_count):", "canonical_solution": "def counter_effect(hit_count):\n    return [[i for i in range(int(hit_count[x]) + 1)] for x in range(4)]", "entry_point": "counter_effect", "task_id": "TACO_lite/196", "input_output_examples": [[[1, 6]], [[3]]]}
{"requirement": "def strange_coach(players):\"\"\"\n# Task\n Mirko has been moving up in the world of basketball. He started as a mere spectator, but has already reached the coveted position of the national team coach!\n\n Mirco is now facing a difficult task: selecting five primary players for the upcoming match against Tajikistan. Since Mirko is incredibly lazy, he doesn't bother remembering players' names, let alone their actual skills. That's why he has settled on selecting five players who share the same first letter of their surnames, so that he can remember them easier. If there are no five players sharing the first letter of their surnames, Mirko will simply forfeit the game!\n\n Your task is to find the first letters Mirko's players' surnames can begin with(In alphabetical order), or return `\"forfeit\"` if Mirko can't gather a team.\n\n# Input/Output\n\n\n - `[input]` string array `players`\n\n  Array of players' surnames, consisting only of lowercase English letters.\n\n \n - `[output]` a string\n\n  A **sorted** string of possible first letters, or \"forfeit\" if it's impossible to gather a team.\n\"\"\"", "inputs": [[["michael", "jordan", "lebron", "james", "kobe", "bryant"]], [["babic", "keksic", "boric", "bukic", "sarmic", "balic", "kruzic", "hrenovkic", "beslic", "boksic", "krafnic", "pecivic", "klavirkovic", "kukumaric", "sunkic", "kolacic", "kovacic", "prijestolonasljednikovic"]], [["jgztazpytubijfsmjz", "bokvgratzzdibku", "qineboilzoqdqivc", "bfctyltibtkbxq", "vioxcuhqhikxeqwekqkjo", "nrvsdhttr", "eiaoajuwxpwmyliqikzcchid", "bxrwawgor", "gbsqaxotzmblxttj", "kwchrcaconuwaivhvnyf", "neiemapiica", "bppao", "bxujiwivsjfbqrzygpdgkyz", "jnzrhhmcgcpffflpzwmqib", "jhozlevckrrwimdmyzc", "bomojotkqqditelsk", "ywmbheywzfyqjjs", "snwrclyjkbspysjftcmyak", "eelrsgkuhu", "dnyzsvqjjuqoc"]]], "outputs": [["forfeit"], ["bk"], ["b"]], "starter_code": "def strange_coach(players):", "canonical_solution": "from collections import Counter\n\ndef strange_coach(players):\n    return ''.join(sorted((i for i, j in Counter(map(lambda x: x[0], players)).most_common() if j >= 5))) or 'forfeit'", "entry_point": "strange_coach", "task_id": "TACO_lite/198", "input_output_examples": [[[2]], [[true]]]}
{"requirement": "def get_free_urinals(urinals):\"\"\"# How many urinals are free?\nIn men's public toilets with urinals, there is this unwritten rule that you leave at least one urinal free\nbetween you and the next person peeing. \nThat means that a maximum of 3 people can pee at the same time on public toilets with \n5 urinals when following this rule (Only 2 if the first person pees into urinal 2 or 4).\n\n![Imgur Urinals](https://i.imgur.com/imZE6xm.png)\n\n## Your task:\nYou need to write a function that returns the maximum of free urinals as an integer according to the unwritten rule.\n\n### Input\nA String containing 1s and 0s (1 <= Length <= 20)  \nA one stands for a taken urinal and a zero for a free one. \n\n### Note\nWhen there is already a mistake in the input string (for example `011`), then return `-1`\n\nHave fun and don't pee into the wrong urinal ;)\n\"\"\"", "inputs": [["10001"], ["1001"], ["00000"], ["0000"], ["01000"], ["00010"], ["10000"], ["1"], ["0"], ["10"], ["110"], ["1011000001"]], "outputs": [[1], [0], [3], [2], [1], [1], [2], [0], [1], [0], [-1], [-1]], "starter_code": "def get_free_urinals(urinals):", "canonical_solution": "def get_free_urinals(urinals):\n    return -1 if '11' in urinals else sum(((len(l) - 1) // 2 for l in f'0{urinals}0'.split('1')))", "entry_point": "get_free_urinals", "task_id": "TACO_lite/199", "input_output_examples": [[["Monday", 13]], [[false]]]}
{"requirement": "def frame(text, char):\"\"\"\n```\n\n\nGiven an array of strings and a character to be used as border, output the frame with the content inside.\n\nNotes:\n\n* Always keep a space between the input string and the left and right borders.\n* The biggest string inside the array should always fit in the frame.\n* The input array is never empty.\n```\n\"\"\"", "inputs": [[["Small", "frame"], "~"], [["Create", "this", "kata"], "+"], [["This is a very long single frame"], "-"]], "outputs": [["~~~~~~~~~\n~ Small ~\n~ frame ~\n~~~~~~~~~"], ["++++++++++\n+ Create +\n+ this   +\n+ kata   +\n++++++++++"], ["------------------------------------\n- This is a very long single frame -\n------------------------------------"]], "starter_code": "def frame(text, char):", "canonical_solution": "def frame(text, char):\n    text_lens = [len(x) for x in text]\n    longest_len = max(text_lens)\n    frame_list = [char * (longest_len + 4)]\n    for str in text:\n        frame_list.append('{} {}{} {}'.format(char, str, ' ' * (longest_len - len(str)), char))\n    frame_list.append(char * (longest_len + 4))\n    return '\\n'.join(frame_list)", "entry_point": "frame", "task_id": "TACO_lite/205", "input_output_examples": [[["holly"], ["hello"]], [["hIJKMNPQRSTUVWXZoPQRSTUVWXZlMNPQRSTUVWXZlyZ"], ["hIJKMNPQRSTUVWXYZeFGIJKMNPQRSTUVWXYZlMNPQRSTUVWXYZloPQRSTUVWXYZ"]]]}
{"requirement": "def convergents_of_e(n):\n\t\"\"\"\n# Convergents of e\nThe square root of 2 can be written as an infinite continued fraction.\n![img](http://img0.ph.126.net/x1Hyc4iHQg0Jz2EInmT3ag==/6597639313681841979.png)  \nThe infinite continued fraction can be written, √2 = [1;(2)], (2) indicates that 2 repeats ad infinitum. In a similar way, √23 = [4;(1,3,1,8)].\n\nIt turns out that the sequence of partial values of continued fractions for square roots provide the best rational approximations. Let us consider the convergents for √2.\n![img](http://img1.ph.126.net/xme9gNBQdA7bvQkwIftznQ==/6597819633588793645.png)  \n\nWhat is most surprising is that the important mathematical constant,\ne = [2; 1,2,1, 1,4,1, 1,6,1 , … , 1,2k,1, …].\n\nFind the sum of digits in the numerator of the mth convergent of the continued fraction for e.\n\n\n- Powered by [Project Euler](https://projecteuler.net/problem=65)\n\"\"\"", "inputs": [[57], [125], [298], [938], [3756], [18287], [2132], [9999], [788], [8787]], "outputs": [[125], [298], [938], [3756], [18287], [108346], [9469], [55534], [3151], [48461]], "starter_code": "def convergents_of_e(n):\n\t", "canonical_solution": "e = [1, 2]\nfor n in range(1, 10 ** 4):\n    for f in (1, 2 * n, 1):\n        e.append(f * e[-1] + e[-2])\nconvergents_of_e = lambda n: sum(map(int, str(e[n])))", "entry_point": "convergents_of_e", "task_id": "TACO_lite/207", "input_output_examples": [[["123 456\n555 555\n123 594"]], [["No carry operation\n3 carry operations\n1 carry operations"]]]}
{"requirement": "def solve(s):\"\"\"\nThe vowel substrings in the word `codewarriors` are `o,e,a,io`. The longest of these has a length of 2. Given a lowercase string that has alphabetic characters only (both vowels and consonants) and no spaces, return the length of the longest vowel substring.\nVowels are any of `aeiou`. \n\n```if:csharp\nDocumentation:\nKata.Solve Method (String)\n\nReturns the length of the greatest continuous vowel substring in a string.\n\nSyntax\n\n\npublic\nstatic\nint Solve(\nstring str\n    )\n  \n\n\nParameters\n\nstr\n\nType: System.String\nThe string to be processed.\n\nReturn Value\n\nType: System.Int32\n  The length of the greatest continuous vowel substring in str, or 0 if str contains no vowels.\n\n\nExceptions\n\n\n\nException\nCondition\n\nArgumentNullException\nstr is null.\n\n\n\n\n```\n\nGood luck!\n\nIf you like substring Katas, please try:\n\n[Non-even substrings](https://www.codewars.com/kata/59da47fa27ee00a8b90000b4)\n\n[Vowel-consonant lexicon](https://www.codewars.com/kata/59cf8bed1a68b75ffb000026)\n\"\"\"", "inputs": [["codewarriors"], ["suoidea"], ["ultrarevolutionariees"], ["strengthlessnesses"], ["cuboideonavicuare"], ["chrononhotonthuooaos"], ["iiihoovaeaaaoougjyaw"]], "outputs": [[2], [3], [3], [1], [2], [5], [8]], "starter_code": "def solve(s):", "canonical_solution": "def solve(s):\n    return max(map(len, ''.join((c if c in 'aeiou' else ' ' for c in s)).split()))", "entry_point": "solve", "task_id": "TACO_lite/212", "input_output_examples": [[["Hi mom"], [" A fun little challenge! "], ["How now brown cow"]], [["iH mom"], [" A nuf elttil !egnellahc "], ["woH won nworb woc"]]]}
{"requirement": "def get_animals_count(legs, heads, horns):\"\"\"Farmer Bob have a big farm, where he growths chickens, rabbits and cows. It is very difficult to count the number of animals for each type manually, so he diceded to buy a system to do it. But he bought a cheap system that can count only total number of heads, total number of legs and total number of horns of animals on the farm.\nHelp Bob to figure out how many chickens, rabbits and cows does he have?\n\nAll chickens have 2 legs, 1 head and no horns; all rabbits have 4 legs, 1 head and no horns; all cows have 4 legs, 1 head and 2 horns.\n\nYour task is to write a function \n```Python\nget_animals_count(legs_number, heads_number, horns_number)\n```\n```Csharp\nDictionary get_animals_count(int legs_number, int heads_number, int horns_number)\n```\n, which returns a dictionary \n```python\n{\"rabbits\" : rabbits_count, \"chickens\" : chickens_count, \"cows\" : cows_count}\n``` \n```Csharp\nnew Dictionary(){{\"rabbits\", rabbits_count},{\"chickens\", chickens_count},{\"cows\", cows_count}}\n```\n\nParameters `legs_number, heads_number, horns_number` are integer, all tests have valid input.\n\"\"\"", "inputs": [[34, 11, 6], [154, 42, 10], [74, 20, 34], [152, 38, 34], [56, 17, 0]], "outputs": [[{"rabbits": 3, "chickens": 5, "cows": 3}], [{"rabbits": 30, "chickens": 7, "cows": 5}], [{"rabbits": 0, "chickens": 3, "cows": 17}], [{"rabbits": 21, "chickens": 0, "cows": 17}], [{"rabbits": 11, "chickens": 6, "cows": 0}]], "starter_code": "def get_animals_count(legs, heads, horns):", "canonical_solution": "def get_animals_count(legs, heads, horns):\n    cows = horns // 2\n    rabbits = legs // 2 - cows - heads\n    chickens = heads - cows - rabbits\n    return dict(cows=cows, rabbits=rabbits, chickens=chickens)", "entry_point": "get_animals_count", "task_id": "TACO_lite/213", "input_output_examples": [[[[1, 1, 1]]], [["same"]]]}
{"requirement": "def longer(s):\"\"\"\nCreate a function `longer` that accepts a string and sorts the words in it based on their respective lengths in an ascending order. If there are two words of the same lengths, sort them alphabetically.\n\nAssume that only Alphabets will be entered as the input.\nUppercase characters have priority over lowercase characters.\n\nDon't forget to rate this kata and leave your feedback!! \nThanks\n\"\"\"", "inputs": [["Another Green World"], ["Darkness on the edge of Town"], ["Have you ever Seen the Rain"], ["Like a Rolling Stone"], ["This will be our Year"], ["hello Hello"]], "outputs": [["Green World Another"], ["of on the Town edge Darkness"], ["the you Have Rain Seen ever"], ["a Like Stone Rolling"], ["be our This Year will"], ["Hello hello"]], "starter_code": "def longer(s):", "canonical_solution": "def longer(s):\n    return ' '.join(sorted(s.split(), key=lambda w: (len(w), w)))", "entry_point": "longer", "task_id": "TACO_lite/219", "input_output_examples": [[["Hello world!", 11], ["gOOd MOrniNg", 7864], ["", 11345], ["the lord of the rings", 0]], [["heLLO wORLd!"], ["GooD MorNIng"], [""], ["the lord of the rings"]]]}
{"requirement": "def fixed_points_perms(n, k):\"\"\"\nWe have an integer array with unique elements and we want to do the permutations that have an element fixed, in other words, these permutations should have a certain element at the same position than the original.\n\nThese permutations will be called: **permutations with one fixed point**.\n\n\nFor this array given above (arr) :\n\n- We conclude that we have 8 permutations with one fixed point (two at each index of arr).\n\n- We may do the same development for our array, `arr`, with two fixed points and we will get `6` permutations.\n\n- There are no permutations with coincidences only at three indexes.\n\n- It's good to know that the amount of permutations with no coincidences at all are `9`. See the kata Shuffle It Up!!\n\nIn general:\n\n- When the amount of fixed points is equal to the array length, there is only one permutation, the original array.\n\n- When the amount of fixed points surpasses the length of the array, obviously, there are no permutations at all.\n\nCreate a function that receives the length of the array and the number of fixed points and may output the total amount of permutations for these constraints.\n\nFeatures of the random tests:\n```\nlength of the array = l\nnumber of fixed points = k\n10 ≤ k ≤ l ≤ 9000\n```\nEnjoy it!!\n\nRuby versin will be released soon.\n\n#Note: This kata was published previously but in a version not well optimized.\n\"\"\"", "inputs": [[4, 1], [4, 2], [4, 3], [10, 3], [10, 4], [20, 2], [4, 0], [4, 4], [4, 5]], "outputs": [[8], [6], [0], [222480], [55650], [447507315596451070], [9], [1], [0]], "starter_code": "def fixed_points_perms(n, k):", "canonical_solution": "def fixed_points_perms(n, k):\n    if k > n:\n        return 0\n    if k == n:\n        return 1\n    if k == 0:\n        subf = lambda n: 1 if n == 0 else n * subf(n - 1) + (-1) ** n\n        return subf(n)\n    return fixed_points_perms(n - 1, k - 1) * n // k", "entry_point": "fixed_points_perms", "task_id": "TACO_lite/220", "input_output_examples": [[["65"], ["658776"]], [["A"], ["AWL"]]]}
{"requirement": "def happy_numbers(n):\"\"\"Math geeks and computer nerds love to anthropomorphize numbers and assign emotions and personalities to them. Thus there is defined the concept of a \"happy\" number. A happy number is defined as an integer in which the following sequence ends with the number 1.\n\n* Start with the number itself.\n* Calculate the sum of the square of each individual digit.\n* If the sum is equal to 1, then the number is happy. If the sum is not equal to 1, then repeat steps 1 and 2. A number is considered unhappy once the same number occurs multiple times in a sequence because this means there is a loop and it will never reach 1.\n\nOnce the sequence reaches the number 1, it will stay there forever since 1^(2) = 1\n\nOn the other hand, if the same number occurs twice in the sequence, the sequence is\nguaranteed to go on infinitely, never hitting the number 1, since it repeats\nthis cycle.\n\nYour task is to write a program which will print a list of all happy numbers between 1 and x (both inclusive), where:\n```python\n2 <= x <= 5000\n```\n\n___\n\nDisclaimer: This Kata is an adaptation of a HW assignment I had for McGill University's COMP 208 (Computers in Engineering) class.\n\n___\n\nIf you're up for a challenge, you may want to try a [performance version of this kata](https://www.codewars.com/kata/happy-numbers-performance-edition) by FArekkusu.\n\"\"\"", "inputs": [[10], [50], [100]], "outputs": [[[1, 7, 10]], [[1, 7, 10, 13, 19, 23, 28, 31, 32, 44, 49]], [[1, 7, 10, 13, 19, 23, 28, 31, 32, 44, 49, 68, 70, 79, 82, 86, 91, 94, 97, 100]]], "starter_code": "def happy_numbers(n):", "canonical_solution": "def is_happy(n):\n    seen = set()\n    while n not in seen:\n        seen.add(n)\n        n = sum((int(d) ** 2 for d in str(n)))\n    return n == 1\n\ndef happy_numbers(n):\n    return [x for x in range(1, n + 1) if is_happy(x)]", "entry_point": "happy_numbers", "task_id": "TACO_lite/224", "input_output_examples": [[[[2, 5, 3, 4, 6], 2]], [[12]]]}
{"requirement": "def added_char(s1, s2):\"\"\"\nGiven two strings, the first being a random string and the second being the same as the first, but with three added characters somewhere in the string (three same characters),\n\nWrite a function that returns the added character\n\nThe above is just an example; the characters could be anywhere in the string and string2 is actually **shuffled**.\n\nNote that the added character could also exist in the original string\n\nYou can assume that string2 will aways be larger than string1, and there will always be three added characters in string2.\n\n```if:c\nWrite the function `added_char()` that takes two strings and return the added character as described above.\n```\n\n```if:javascript\nWrite the function `addedChar()` that takes two strings and return the added character as described above.\n```\n\"\"\"", "inputs": [["hello", "checlclo"], ["aabbcc", "aacccbbcc"], ["abcde", "2db2a2ec"]], "outputs": [["c"], ["c"], ["2"]], "starter_code": "def added_char(s1, s2):", "canonical_solution": "from collections import Counter\n\ndef added_char(s1, s2):\n    return next((Counter(s2) - Counter(s1)).elements())", "entry_point": "added_char", "task_id": "TACO_lite/225", "input_output_examples": [[[100], [11], [766], [160]], [[3], [5], [4], [null]]]}
{"requirement": "def powers(n):\"\"\"# Description\n\nGiven a number `n`, you should find a set of numbers for which the sum equals `n`. This set must consist exclusively of values that are a power of `2`.\n\nThe function `powers` takes a single parameter, the number `n`, and should return an array of unique numbers.\n\n## Criteria\n\nThe function will always receive a valid input: any positive integer between `1` and the max integer value for your language.\n\nThe function should return an array of numbers that are a **power of 2** (`2^x = y`).\n\nEach member of the returned array should be **unique**.\n\nMembers should be sorted in **ascending order** (small -> large).\n\"\"\"", "inputs": [[1], [2], [4], [32], [128], [512], [6], [14], [688], [8197], [1966], [9007199254740991]], "outputs": [[[1]], [[2]], [[4]], [[32]], [[128]], [[512]], [[2, 4]], [[2, 4, 8]], [[16, 32, 128, 512]], [[1, 4, 8192]], [[2, 4, 8, 32, 128, 256, 512, 1024]], [[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496]]], "starter_code": "def powers(n):", "canonical_solution": "def powers(n):\n    return [1 << i for i, x in enumerate(reversed(bin(n))) if x == '1']", "entry_point": "powers", "task_id": "TACO_lite/226", "input_output_examples": [[[["a", "b", "c", "d", "f"]], [["O", "Q", "R", "S"]]], [["e"], ["P"]]]}
{"requirement": "def custom_christmas_tree(chars, n):\"\"\"# Task\n\nChristmas is coming, and your task is to build a custom Christmas tree with the specified characters and the specified height.\n\n# Inputs:\n- `chars`: the specified characters. \n- `n`: the specified height. A positive integer greater than 2.\n\n# Output:\n- A multiline string. Each line is separated by `\\n`. A tree contains two parts: leaves and trunks. \n\nThe leaves should be `n` rows. The first row fill in 1 char, the second row fill in 3 chars, and so on. A single space will be added between two adjust chars, and some of the necessary spaces will be added to the left side, to keep the shape of the tree. No space need to be added to the right side.\n\nThe trunk should be at least 1 unit height, it depends on the value of the `n`. The minimum value of n is 3, and the height of the tree trunk is 1 unit height. If `n` increased by 3, and the tree trunk increased by 1 unit.\n\"\"\"", "inputs": [["*@o", 3], ["*@o", 6], ["1234", 6], ["123456789", 3]], "outputs": [["  *\n @ o\n* @ o\n  |"], ["     *\n    @ o\n   * @ o\n  * @ o *\n @ o * @ o\n* @ o * @ o\n     |\n     |"], ["     1\n    2 3\n   4 1 2\n  3 4 1 2\n 3 4 1 2 3\n4 1 2 3 4 1\n     |\n     |"], ["  1\n 2 3\n4 5 6\n  |"]], "starter_code": "def custom_christmas_tree(chars, n):", "canonical_solution": "def custom_christmas_tree(chars, n):\n    from itertools import cycle\n    it = cycle(chars)\n    tree = [' '.join((next(it) for j in range(i))).center(2 * n).rstrip() for i in range(1, n + 1)]\n    tree.extend(('|'.center(2 * n).rstrip() for _ in range(n // 3)))\n    return '\\n'.join(tree)", "entry_point": "custom_christmas_tree", "task_id": "TACO_lite/231", "input_output_examples": [[[[1, 2, 3, 4, 5]], [[1, -2, 3, -4, 5]], [[]]], [[[-1, -2, -3, -4, -5]], [[-1, 2, -3, 4, -5]], [[]]]]}
{"requirement": "def fixed_xor(a, b):\"\"\"\n## Fixed xor\n\nWrite a function that takes two hex strings as input and XORs them against each other. If the strings are different lengths the output should be the length of the shortest string.\n\nHint: The strings would first need to be converted to binary to be XOR'd. \n\n## Note:\nIf the two strings are of different lengths, the output string should be the same length as the smallest string. This means that the longer string will be cut down to the same size as the smaller string, then xor'd\n\n### Further help\n\nMore information on the XOR operation can be found here https://www.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation\n\nMore information of the binary and hex bases can be found here https://www.khanacademy.org/math/algebra-home/alg-intro-to-algebra/algebra-alternate-number-bases/v/number-systems-introduction\n\"\"\"", "inputs": [["1c0111001f010100061a024b53535009181c", "686974207468652062756c6c277320657965"], ["aadf", "bce2"], ["ab3f", "ac"], ["", ""], ["c611d9bdd9de38b9eb", "23a0745505d4d25494"], ["7d1e875da9d5e89b54c7eaf", "3541599be591709795cebd5"], ["785a6677b3e52f0e7", "a8d97da7441"], ["6cbd75511e7f750c6827", "1753547c813bfcd"]], "outputs": [["746865206b696420646f6e277420706c6179"], ["163d"], ["07"], [""], ["e5b1ade8dc0aeaed7f"], ["485fdec64c44980cc10957a"], ["d0831bd0f7f"], ["7bee212d9f4489d"]], "starter_code": "def fixed_xor(a, b):", "canonical_solution": "def fixed_xor(a, b):\n    return ''.join((f'{int(x, 16) ^ int(y, 16):x}' for x, y in zip(a, b)))", "entry_point": "fixed_xor", "task_id": "TACO_lite/233", "input_output_examples": [[["123456789abcdefghijklmnopqrstuwyxvzABCDEFGHIJKLMNOPQRSTUWvXYZ123456789012345678910123"], [""]], [["7891012TUWvXYABCDElmnoabc34"], [""]]]}
{"requirement": "def series_sum(n):\"\"\"\n## Task:\n\nYour task is to write a function which returns the sum of following series upto nth term(parameter).\n\n    Series: 1 + 1/4 + 1/7 + 1/10 + 1/13 + 1/16 +...\n \n## Rules:\n \n* You need to round the answer to 2 decimal places and return it as String.\n\n* If the given value is 0 then it should return 0.00\n\n* You will only be given Natural Numbers as arguments.\n\n**NOTE**: In PHP the function is called `series_sum()`.\n\"\"\"", "inputs": [[1], [2], [3], [4], [5], [6], [7], [8], [9], [15], [39], [58], [0]], "outputs": [["1.00"], ["1.25"], ["1.39"], ["1.49"], ["1.57"], ["1.63"], ["1.68"], ["1.73"], ["1.77"], ["1.94"], ["2.26"], ["2.40"], ["0.00"]], "starter_code": "def series_sum(n):", "canonical_solution": "def series_sum(n):\n    return '{:.2f}'.format(sum((1.0 / (3 * i + 1) for i in range(n))))", "entry_point": "series_sum", "task_id": "TACO_lite/234", "input_output_examples": [[["cba"], ["Cba"], ["cCBbAa"], ["c b a"], ["-c--b--a-"], ["Codewars"]], [["abc"], ["abC"], ["AaBbcC"], ["a b c"], ["-a--b--c-"], ["aCdeorsw"]]]}
{"requirement": "def solution(number):\"\"\"\n## The galactic games have begun!\n\nIt's the galactic games! Beings of all worlds come together to compete in several interesting sports, like nroogring, fredling and buzzing (the beefolks love the last one). However, there's also the traditional marathon run.\n\nUnfortunately, there have been cheaters in the last years, and the committee decided to place sensors on the track. Committees being committees, they've come up with the following rule:\n\n> A sensor should be placed every 3 and 5 meters from the start.\n\nSince you're responsible for the track, you need to buy those sensors. Even worse, you don't know how long the track will be! And since there might be more than a single track, and you can't be bothered to do all of this by hand, you decide to write a program instead.\n\n## Task\nReturn the sum of the multiples of 3 and 5 __below__ a number. Being the _galactic_ games, the tracks can get rather large, so your solution should work for _really_ large numbers (greater than 1,000,000).\n\"\"\"", "inputs": [[10], [100], [1000], [10000], [16], [20], [200], [1000000], [50000000], [50000000000000000000000000000000000000000]], "outputs": [[23], [2318], [233168], [23331668], [60], [78], [9168], [233333166668], [583333291666668], [583333333333333333333333333333333333333291666666666666666666666666666666666666668]], "starter_code": "def solution(number):", "canonical_solution": "def summ(number, d):\n    n = (number - 1) // d\n    return n * (n + 1) * d // 2\n\ndef solution(number):\n    return summ(number, 3) + summ(number, 5) - summ(number, 15)", "entry_point": "solution", "task_id": "TACO_lite/238", "input_output_examples": [[[2, 7], [10, 50], [37, 200]], [[6], [50], [185]]]}
{"requirement": "def repeat_str(repeat, string):\"\"\"\nWrite a function called `repeat_str` which repeats the given string `src` exactly `count` times.\n\"\"\"", "inputs": [[4, "a"], [3, "hello "], [2, "abc"]], "outputs": [["aaaa"], ["hello hello hello "], ["abcabc"]], "starter_code": "def repeat_str(repeat, string):", "canonical_solution": "def repeat_str(repeat, string):\n    return repeat * string", "entry_point": "repeat_str", "task_id": "TACO_lite/241", "input_output_examples": [[[3, 3], [5.8, 7], [4, 5]], [[11.691], [92.053], [38.042]]]}
{"requirement": "def segments(m, arr):\"\"\"You are given a set of `n` segments on the axis `Ox`, each segment has integer endpoints between `0` and `m` inclusive.\n Segments may intersect, overlap or even coincide with each other. Each segment is characterized by two integers li and ri — coordinates of the left and of the right endpoints.\n\n Consider all integer points between `0` and `m` inclusive. Your task is to print all such points that don't belong to any segment. The point x belongs to the segment `[l;r]` if and only if `l ≤ x ≤ r`.\n\n**Input:**\n `m` — the upper bound for coordinates;\n array of coordinates li and ri `0 ≤ li ≤ ri ≤ m` — the endpoints of the `i`-th segment. Segments may intersect, overlap or even coincide with each other.\n\n**Output:**\n All points from `0` to `m` that don't belong to any segment.\n\"\"\"", "inputs": [[7, [[0, 7]]], [2, []], [0, []], [0, [[0, 0]]]], "outputs": [[[]], [[0, 1, 2]], [[0]], [[]]], "starter_code": "def segments(m, arr):", "canonical_solution": "def segments(m, arr):\n    return [i for i in range(m + 1) if not any((a <= i <= b for a, b in arr))]", "entry_point": "segments", "task_id": "TACO_lite/242", "input_output_examples": [[["4455"], ["zazcbaabc"], ["aaab"]], [[true], [true], [false]]]}
{"requirement": "def odd_ones_out(numbers):\"\"\"\nThe town sheriff dislikes odd numbers and wants all odd numbered families out of town! In town crowds can form and individuals are often mixed with other people and families. However you can distinguish the family they belong to by the number on the shirts they wear. As the sheriff's assistant it's your job to find all the odd numbered families and remove them from the town!\n\n~~~if-not:cpp\nChallenge: You are given a list of numbers. The numbers each repeat a certain number of times. Remove all numbers that repeat an odd number of times while keeping everything else the same.\n~~~\n~~~if:cpp\nChallenge: You are given a vector of numbers. The numbers each repeat a certain number of times. Remove all numbers that repeat an odd number of times while keeping everything else the same.\n~~~\n\nAre you up to the challenge?\n\"\"\"", "inputs": [[[1, 2, 3, 1, 3, 3]], [[75, 68, 75, 47, 68]], [[42, 72, 32, 4, 94, 82, 67, 67]], [[100, 100, 5, 5, 100, 50, 68, 50, 68, 50, 68, 5, 100]], [[82, 86, 71, 58, 44, 79, 50, 44, 79, 67, 82, 82, 55, 50]]], "outputs": [[[1, 1]], [[75, 68, 75, 68]], [[67, 67]], [[100, 100, 100, 100]], [[44, 79, 50, 44, 79, 50]]], "starter_code": "def odd_ones_out(numbers):", "canonical_solution": "def odd_ones_out(numbers):\n    return [i for i in numbers if numbers.count(i) % 2 == 0]", "entry_point": "odd_ones_out", "task_id": "TACO_lite/244", "input_output_examples": [[[8], [17]], [["88888888\n87777777\n87666666\n87655555\n87654444\n87654333\n87654322\n87654321"], ["77777777777777777\n76666666666666666\n76555555555555555\n76544444444444444\n76543333333333333\n76543222222222222\n76543211111111111\n76543210000000000\n76543210999999999\n76543210988888888\n76543210987777777\n76543210987666666\n76543210987655555\n76543210987654444\n76543210987654333\n76543210987654322\n76543210987654321"]]]}
{"requirement": "def is_square(n):\"\"\"\n## A square of squares\nYou like building blocks. You especially like building blocks that are squares. And what you even like more, is to arrange them into a square of square building blocks!\n\nHowever, sometimes, you can't arrange them into a square. Instead, you end up with an ordinary rectangle! Those blasted things! If you just had a way to know, whether you're currently working in vain… Wait! That's it! You just have to check if your number of building blocks is a _perfect square_.\n\n## Task\n\nGiven an integral number, determine if it's a [square number](https://en.wikipedia.org/wiki/Square_number):\n\n> In mathematics, a __square number__ or __perfect square__ is an integer that is the square of an integer; in other words, it is the product of some integer with itself.\n\nThe tests will _always_ use some integral number, so don't worry about that in dynamic typed languages.\n\"\"\"", "inputs": [[-1], [25], [26]], "outputs": [[false], [true], [false]], "starter_code": "def is_square(n):", "canonical_solution": "import math\n\ndef is_square(n):\n    return n > -1 and math.sqrt(n) % 1 == 0", "entry_point": "is_square", "task_id": "TACO_lite/248", "input_output_examples": [[["hello"]], [["Error"]]]}
{"requirement": "def fight_resolve(d, a):\"\"\"\nYou are making your very own boardgame. The game is played by two opposing players, featuring a 6 x 6 tile system, with the players taking turns to move their pieces (similar to chess). The design is finished, now it's time to actually write and implement the features. Being the good programmer you are, you carefully plan the procedure and break the program down into smaller managable sections. You decide to start coding the logic for resolving \"fights\" when two pieces engage in combat on a tile. \n\nYour boardgame features four unique pieces: \n\nSwordsman, Cavalry, Archer and Pikeman\n\nEach piece has unique movement and has advantages and weaknesses in combat against one of the other pieces. \n\nTask\n\nYou must write a function ```fightResolve``` that takes the attacking and defending piece as input parameters, and returns the winning piece. It may be the case that both the attacking and defending piece belong to the same player, after which you must return an error value to indicate an illegal move. \n\nIn C++ and C, the pieces will be represented as ```chars```. Values will be case-sensitive to display ownership. Let the following char values represent each piece from their respective player.\n\nPlayer 1:  ```p```= Pikeman, ```k```= Cavalry, ```a```= Archer, ```s```= Swordsman \n\nPlayer 2:  ```P```= Pikeman, ```K```= Cavalry, ```A```= Archer, ```S```= Swordsman \n\nThe outcome of the fight between two pieces depends on which piece attacks, the type of the attacking piece and the type of the defending piece. Archers always win against swordsmens, swordsmen always win against pikemen, pikemen always win against cavalry and cavalry always win against archers. If a matchup occurs that was not previously mentioned the attacker will always win. This table represents the winner of each possible engagement between an attacker and a defender.\n\n\n(Attacker→)\n    (Defender↓)\nArcher\nPikeman\nSwordsman\nKnight\n\n\nKnight\nDefender\nAttacker\nAttacker\nAttacker\n\n\nSwordsman\nAttacker\nDefender\nAttacker\nAttacker\n\n\nArcher\nAttacker\nAttacker\nDefender\nAttacker\n\n\nPikeman\nAttacker\nAttacker\nAttacker\nDefender\n\n\n\nIf two pieces from the same player engage in combat, i.e P vs S or k vs a, the function must return -1 to signify and illegal move. Otherwise assume that no other illegal values will be passed.\n\"\"\"", "inputs": [["K", "A"], ["S", "A"], ["k", "s"], ["a", "a"], ["k", "A"], ["K", "a"]], "outputs": [[-1], [-1], [-1], [-1], ["k"], ["K"]], "starter_code": "def fight_resolve(d, a):", "canonical_solution": "def fight_resolve(d, a):\n    return -1 if d.islower() == a.islower() else d if d.lower() + a.lower() in 'ka sp as pk' else a", "entry_point": "fight_resolve", "task_id": "TACO_lite/250", "input_output_examples": [[[""]], [[{}]]]}
{"requirement": "def avoid_obstacles(arr):\"\"\"# Task\n You are given an array of integers `arr` that representing coordinates of obstacles situated on a straight line.\n\n Assume that you are jumping from the point with coordinate 0 to the right. You are allowed only to make jumps of the same length represented by some integer.\n\n Find the minimal length of the jump enough to avoid all the obstacles.\n\n# Input/Output\n\n\n - `[input]` integer array `arr`\n\n    Non-empty array of positive integers.\n\n    Constraints: `1 ≤ inputArray[i] ≤ 100.`\n\n\n - `[output]` an integer\n\n    The desired length.\n\"\"\"", "inputs": [[[5, 3, 6, 7, 9]], [[2, 3]], [[1, 4, 10, 6, 2]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]]], "outputs": [[4], [4], [7], [101]], "starter_code": "def avoid_obstacles(arr):", "canonical_solution": "def avoid_obstacles(arr):\n    n = 2\n    while 1:\n        if all([x % n for x in arr]):\n            return n\n        n += 1", "entry_point": "avoid_obstacles", "task_id": "TACO_lite/253", "input_output_examples": [[["Yo"], ["Hello, World!"], ["Forty4Three"], ["kcxnjsklsHskjHDkl7878hHJk"]], [[20], [91], [113], [218]]]}
{"requirement": "def powerset(a):\"\"\"# Task\nFor the given set `S` its powerset is the set of all possible subsets of `S`.\n\nGiven an array of integers nums, your task is to return the powerset of its elements.\n\nImplement an algorithm that does it in a depth-first search fashion. That is, for every integer in the set, we can either choose to take or not take it.\n\n# Input/Output\n\n`[input]` integer array `nums`\n\nArray of positive integers, `1 ≤ nums.length ≤ 10`.\n\n[output] 2D integer array\n\nThe powerset of nums.\n\"\"\"", "inputs": [[[1, 2]], [[1, 2, 3]], [[1]], [[125, 15, 155, 15, 158]], [[1, 2, 3, 4]]], "outputs": [[[[], [2], [1], [1, 2]]], [[[], [3], [2], [2, 3], [1], [1, 3], [1, 2], [1, 2, 3]]], [[[], [1]]], [[[], [158], [15], [15, 158], [155], [155, 158], [155, 15], [155, 15, 158], [15], [15, 158], [15, 15], [15, 15, 158], [15, 155], [15, 155, 158], [15, 155, 15], [15, 155, 15, 158], [125], [125, 158], [125, 15], [125, 15, 158], [125, 155], [125, 155, 158], [125, 155, 15], [125, 155, 15, 158], [125, 15], [125, 15, 158], [125, 15, 15], [125, 15, 15, 158], [125, 15, 155], [125, 15, 155, 158], [125, 15, 155, 15], [125, 15, 155, 15, 158]]], [[[], [4], [3], [3, 4], [2], [2, 4], [2, 3], [2, 3, 4], [1], [1, 4], [1, 3], [1, 3, 4], [1, 2], [1, 2, 4], [1, 2, 3], [1, 2, 3, 4]]]], "starter_code": "def powerset(a):", "canonical_solution": "from itertools import compress, product\n\ndef powerset(a):\n    return [list(compress(a, p)) for p in product((0, 1), repeat=len(a))]", "entry_point": "powerset", "task_id": "TACO_lite/254", "input_output_examples": [[["Hello"], ["What is your name?"], ["zoo"], ["zzZAaa"]], [["Ifmmp"], ["Xibu jt zpvs obnf?"], ["app"], ["aaABbb"]]]}
{"requirement": "def is_prime(p):\"\"\"\nDefine a function that takes one integer argument and returns logical value `true` or `false` depending on if the integer is a prime.\n\nPer Wikipedia, a prime number (or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\n## Requirements\n\n* You can assume you will be given an integer input.\n* You can not assume that the integer will be only positive. You may be given negative numbers as well (or `0`).\n* **NOTE on performance**: There are no fancy optimizations required, but still *the* most trivial solutions might time out. Numbers go up to 2^31 (or similar, depends on language version). Looping all the way up to `n`, or `n/2`, will be too slow.\n\"\"\"", "inputs": [[0], [1], [2], [73], [75], [-1]], "outputs": [[false], [false], [true], [true], [false], [false]], "starter_code": "def is_prime(p):", "canonical_solution": "import random\n\ndef even_odd(n):\n    s, d = (0, n)\n    while d % 2 == 0:\n        s += 1\n        d >>= 1\n    return (s, d)\n\ndef Miller_Rabin(a, p):\n    s, d = even_odd(p - 1)\n    a = pow(a, d, p)\n    if a == 1:\n        return True\n    for i in range(s):\n        if a == p - 1:\n            return True\n        a = pow(a, 2, p)\n    return False\n\ndef is_prime(p):\n    if p == 2:\n        return True\n    if p <= 1 or p % 2 == 0:\n        return False\n    return all((Miller_Rabin(random.randint(2, p - 1), p) for _ in range(40)))", "entry_point": "is_prime", "task_id": "TACO_lite/256", "input_output_examples": [[["Ask not what your COUNTRY can do for you ASK WHAT YOU CAN DO FOR YOUR country"], ["the one bumble bee one bumble the bee"], ["The bumble bee"]], [["01234567802856734"], ["01231203"], ["012"]]]}
{"requirement": "def complete_binary_tree(a):\"\"\"__Definition:__ According to Wikipedia, a [complete binary tree](https://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees) is a binary tree _\"where every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible.\"_\n\nThe Wikipedia page referenced above also mentions that _\"Binary trees can also be stored in breadth-first order as an implicit data structure in arrays, and if the tree is a complete binary tree, this method wastes no space.\"_\n\nYour task is to write a method (or function) that takes an array (or list, depending on language) of integers and, assuming that the array is ordered according to an _in-order_ traversal of a complete binary tree, returns an array that contains the values of the tree in breadth-first order.\n\"\"\"", "inputs": [[[1]], [[1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], "outputs": [[[1]], [[4, 2, 6, 1, 3, 5]], [[7, 4, 9, 2, 6, 8, 10, 1, 3, 5]]], "starter_code": "def complete_binary_tree(a):", "canonical_solution": "def complete_binary_tree(a):\n\n    def in_order(n=0):\n        if n < len(a):\n            yield from in_order(2 * n + 1)\n            yield n\n            yield from in_order(2 * n + 2)\n    result = [None] * len(a)\n    for i, x in zip(in_order(), a):\n        result[i] = x\n    return result", "entry_point": "complete_binary_tree", "task_id": "TACO_lite/259", "input_output_examples": [[[0, 10]], [[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]]]}
{"requirement": "def could_be(original, another):\"\"\"\nThe objective is to disambiguate two given names: the original with another\n\nThis kata is slightly more evolved than the previous one: [Author Disambiguation: to the point!](https://www.codewars.com/kata/580a429e1cb4028481000019).\n\nThe function ```could_be``` is still given the original name and another one to test\nagainst. \n\n**Watch out**: When accents comes into the game, they will enter through **UTF-8 unicodes. **\n\nThe function should be tolerant with regards to:\n\n * upper and lower cases: ```could_be(A, a) : True```\n * accents: ```could_be(E, é) : True```\n * dots: ```could_be(E., E) : True```\n * same for other ending punctuations in [!,;:?]: ```could_be(A, A!) : True```\n\nOn the other hand, more consideration needs to be given to *composed names*...\nLet's be bold about it: if you have any, they will be considered as a whole :\n\nAmong the valid combinaisons of the fullname \"Carlos Ray Norris\", you will find\n\nToo easy ? Try the next step: [Author Disambiguation: Signatures worth it](https://www.codewars.com/kata/author-disambiguation-signatures-worth-it)\n\"\"\"", "inputs": [["Carlos Ray Norris", "Carlos Ray Norris"], ["Carlos Ray Norris", "Carlos Ray"], ["Carlos Ray Norris", "Ray Norris"], ["Carlos Ray Norris", "Carlos Norris"], ["Carlos Ray Norris", "Norris"], ["Carlos Ray Norris", "Carlos"], ["Carlos Ray Norris", "Norris Carlos"], ["Carlos Ray Norris", "carlos ray norris"], ["Carlos Ray Norris", "Norris! ?ray"], ["Carlos Ray Norris", "Carlos. Ray; Norris,"], ["Carlos Ray Norris", "Carlos:Ray Norris"], ["Carlos-Ray Norris", "Carlos-Ray Norris:"], ["Carlos Ray-Norris", "Carlos? Ray-Norris"], ["Carlos Ray Norris", "Carlos Ray Norr"], ["Carlos Ray Norris", "Ra Norris"], ["", "C"], ["", ""], ["Carlos Ray Norris", " "], ["Carlos-Ray Norris", "Carlos Ray-Norris"], ["Carlos Ray Norris", "Carlos-Ray Norris"], ["Carlos Ray Norris", "Carlos Ray-Norris"], ["Carlos Ray", "Carlos Ray Norris"], ["Carlos", "Carlos Ray Norris"]], "outputs": [[true], [true], [true], [true], [true], [true], [true], [true], [true], [true], [true], [true], [true], [false], [false], [false], [false], [false], [false], [false], [false], [false], [false]], "starter_code": "def could_be(original, another):", "canonical_solution": "import re\nimport unicodedata\nNAME = re.compile('[\\\\w-]+')\n\ndef decompose(name):\n    standarized = unicodedata.normalize('NFKD', name.lower()).encode('ascii', 'ignore') if type(name) != str else name.lower()\n    return re.findall(NAME, standarized)\n\ndef could_be(original, another):\n    if not another.strip():\n        return False\n    std_original = decompose(original)\n    std_another = decompose(another)\n    return all((name in std_original for name in std_another))", "entry_point": "could_be", "task_id": "TACO_lite/260", "input_output_examples": [[["coffee", "eecoff"], ["eecoff", "coffee"], ["moose", "Moose"], ["isn't", "'tisn"], ["Esham", "Esham"], ["dog", "god"]], [[2], [4], [-1], [2], [0], [-1]]]}
{"requirement": "def green(n):\"\"\"\nThis is a very simply formulated task. Let's call an integer number `N` 'green' if `N²` ends with all of the digits of `N`.\n\nYour task is to write a function `green` that returns `n`th green number, starting with `1` - `green (1) == 1`\n\n---\n\n## Data range\n\n```if:haskell\n`n <= 4000` for Haskell\n```\n```if:java\n`n <= 5000` for Java\n```\n```if:python\n`n <= 5000` for Python\n```\n```if:javascript\n`n <= 3000` for JavaScript\n\nReturn values should be `String`s, and should be exact. A BigNum library is recommended.\n```\n\"\"\"", "inputs": [[1], [2], [3], [4], [12], [13], [100], [110]], "outputs": [[1], [5], [6], [25], [2890625], [7109376], [6188999442576576769103890995893380022607743740081787109376], [9580863811000557423423230896109004106619977392256259918212890625]], "starter_code": "def green(n):", "canonical_solution": "out = [1, 5, 6]\n\ndef green(n):\n    f = 5\n    s = 6\n    q = 1\n    while n >= len(out):\n        q = 10 * q\n        f = f ** 2 % q\n        s = (1 - (s - 1) ** 2) % q\n        out.extend(sorted((j for j in [f, s] if j not in out)))\n    return out[n - 1]", "entry_point": "green", "task_id": "TACO_lite/261", "input_output_examples": [[[true, true], [false, true], [true, false], [false, false]], [[false], [true], [true], [false]]]}
{"requirement": "def amort(rate, bal, term, num_payments):\"\"\"The description is rather long but it tries to explain what a financing plan is. \n\nThe fixed monthly payment for a fixed rate mortgage is the amount paid by the borrower every month that ensures \nthat the loan is paid off in full with interest at the end of its term. \n\nThe monthly payment formula is based on the annuity formula. \nThe monthly payment `c` depends upon:\n\n- `rate` - the monthly interest rate is expressed as a decimal, not a percentage. \nThe monthly rate is simply the **given** yearly percentage rate divided by 100 and then by 12.\n\n- `term` - the number of monthly payments, called the loan's `term`.\n- `principal` - the amount borrowed, known as the loan's principal (or `balance`).\n\nFirst we have to determine `c`.\n\nWe have: `c = n /d` with `n = r * balance` and `d = 1 - (1 + r)**(-term)` where `**` is the `power` function (you can look at the reference below).\n\nThe payment `c` is composed of two parts. The first part pays the interest (let us call it `int`)\ndue for the balance of the given month, the second part repays the balance (let us call this part `princ`) hence for the following month we get a `new balance = old balance - princ` with `c = int + princ`. \n\nLoans are structured so that the amount of principal returned to the borrower starts out small and increases with each mortgage payment. \nWhile the mortgage payments in the first years consist primarily of interest payments, the payments in the final years consist primarily of principal repayment.\n\nA mortgage's amortization schedule provides a detailed look at precisely what portion of each mortgage payment is dedicated to each component.\n\n# Task:\nGiven parameters \n```\nrate: annual rate as percent (don't forgent to divide by 100*12)\nbal: original balance (borrowed amount) \nterm: number of monthly payments\nnum_payment: rank of considered month (from 1 to term)\n```\nthe function `amort` will return a formatted string:\n\n`\"num_payment %d c %.0f princ %.0f int %.0f balance %.0f\" (with arguments num_payment, c, princ, int, balance`)\n\n# Ref\n\"\"\"", "inputs": [[7.4, 10215, 24, 20], [7.9, 107090, 48, 41], [6.8, 105097, 36, 4], [3.8, 48603, 24, 10], [1.9, 182840, 48, 18], [1.9, 19121, 48, 2], [2.2, 112630, 60, 11], [5.6, 133555, 60, 53], [9.8, 67932, 60, 34], [3.7, 64760, 36, 24], [4.6, 85591, 36, 5], [7.0, 168742, 48, 16], [9.6, 17897, 60, 23], [5.2, 53521, 60, 51], [6.8, 139308, 60, 38], [5.0, 182075, 24, 9], [8.0, 128263, 36, 26], [7.8, 112414, 60, 37], [4.9, 93221, 36, 5], [1.2, 146157, 48, 20], [3.6, 168849, 24, 11], [9.3, 87820, 60, 14], [8.7, 155744, 36, 31], [6.4, 179023, 36, 11], [8.3, 38495, 36, 15], [9.6, 150614, 24, 19], [2.5, 159363, 48, 19], [4.7, 56245, 48, 11], [1.5, 142777, 36, 32], [9.6, 187340, 60, 28], [2.4, 57707, 24, 14], [3.0, 180678, 36, 31], [2.0, 139586, 24, 13], [5.3, 142498, 60, 46], [9.0, 150309, 48, 29], [7.1, 60232, 60, 56], [8.7, 172214, 36, 14], [9.0, 187174, 60, 12], [9.5, 119722, 60, 23], [9.2, 10536, 36, 15], [1.9, 70139, 24, 13], [4.5, 141454, 36, 23], [4.5, 154486, 24, 7], [2.2, 20254, 36, 35], [3.7, 114512, 36, 23], [8.6, 121685, 48, 24], [1.1, 171542, 48, 25], [1.1, 121991, 48, 20], [8.9, 162862, 60, 46], [1.9, 152921, 60, 19]], "outputs": [["num_payment 20 c 459 princ 445 int 14 balance 1809"], ["num_payment 41 c 2609 princ 2476 int 133 balance 17794"], ["num_payment 4 c 3235 princ 2685 int 550 balance 94447"], ["num_payment 10 c 2106 princ 2009 int 98 balance 28799"], ["num_payment 18 c 3959 princ 3769 int 189 balance 115897"], ["num_payment 2 c 414 princ 384 int 30 balance 18353"], ["num_payment 11 c 1984 princ 1810 int 174 balance 92897"], ["num_payment 53 c 2557 princ 2464 int 93 balance 17571"], ["num_payment 34 c 1437 princ 1153 int 283 balance 33532"], ["num_payment 24 c 1903 princ 1829 int 75 balance 22389"], ["num_payment 5 c 2550 princ 2256 int 294 balance 74397"], ["num_payment 16 c 4041 princ 3335 int 706 balance 117641"], ["num_payment 23 c 377 princ 278 int 98 balance 12025"], ["num_payment 51 c 1015 princ 972 int 43 balance 8939"], ["num_payment 38 c 2745 princ 2411 int 335 balance 56634"], ["num_payment 9 c 7988 princ 7474 int 514 balance 115917"], ["num_payment 26 c 4019 princ 3736 int 283 balance 38758"], ["num_payment 37 c 2269 princ 1942 int 327 balance 48320"], ["num_payment 5 c 2790 princ 2449 int 341 balance 81077"], ["num_payment 20 c 3120 princ 3031 int 89 balance 86109"], ["num_payment 11 c 7302 princ 7002 int 300 balance 92965"], ["num_payment 14 c 1836 princ 1277 int 559 balance 70807"], ["num_payment 31 c 4931 princ 4722 int 209 balance 24127"], ["num_payment 11 c 5479 princ 4771 int 708 balance 127911"], ["num_payment 15 c 1212 princ 1041 int 170 balance 23607"], ["num_payment 19 c 6922 princ 6599 int 323 balance 33796"], ["num_payment 19 c 3492 princ 3281 int 211 balance 98178"], ["num_payment 11 c 1288 princ 1110 int 178 balance 44271"], ["num_payment 32 c 4058 princ 4033 int 25 balance 16183"], ["num_payment 28 c 3944 princ 3032 int 912 balance 110949"], ["num_payment 14 c 2465 princ 2411 int 54 balance 24381"], ["num_payment 31 c 5254 princ 5176 int 78 balance 26076"], ["num_payment 13 c 5938 princ 5821 int 117 balance 64670"], ["num_payment 46 c 2709 princ 2535 int 173 balance 36695"], ["num_payment 29 c 3740 princ 3221 int 519 balance 66007"], ["num_payment 56 c 1196 princ 1161 int 35 balance 4712"], ["num_payment 14 c 5452 princ 4618 int 835 balance 110505"], ["num_payment 12 c 3885 princ 2694 int 1191 balance 156135"], ["num_payment 23 c 2514 princ 1863 int 651 balance 80372"], ["num_payment 15 c 336 princ 284 int 52 balance 6495"], ["num_payment 13 c 2981 princ 2925 int 56 balance 32478"], ["num_payment 23 c 4208 princ 3993 int 215 balance 53292"], ["num_payment 7 c 6743 princ 6304 int 439 balance 110852"], ["num_payment 35 c 582 princ 580 int 2 balance 581"], ["num_payment 23 c 3366 princ 3224 int 142 balance 42823"], ["num_payment 24 c 3005 princ 2514 int 491 balance 66044"], ["num_payment 25 c 3655 princ 3575 int 79 balance 83139"], ["num_payment 20 c 2599 princ 2531 int 68 balance 71813"], ["num_payment 46 c 3373 princ 3019 int 354 balance 44694"], ["num_payment 19 c 2674 princ 2502 int 172 balance 106057"]], "starter_code": "def amort(rate, bal, term, num_payments):", "canonical_solution": "def amort(rate, bal, term, num_payments):\n    monthlyRate = rate / (12 * 100)\n    c = bal * (monthlyRate * (1 + monthlyRate) ** term) / ((1 + monthlyRate) ** term - 1)\n    newBalance = bal\n    for i in range(num_payments):\n        interest = newBalance * monthlyRate\n        princ = c - interest\n        newBalance = newBalance - princ\n    return 'num_payment %s c %.0f princ %.0f int %.0f balance %.0f' % (num_payments, c, princ, interest, newBalance)", "entry_point": "amort", "task_id": "TACO_lite/262", "input_output_examples": [[[["a", "b", "c"], [1, 2, 3]], [["a", "b", "c"], [1, 2, 3, 4, 5]], [["a", "b", "c"], [1, 2, 3, 4, 5], [6, 7], [8]]], [[["a", 1, "b", 2, "c", 3]], [["a", 1, "b", 2, "c", 3, 4, 5]], [["a", 1, 6, 8, "b", 2, 7, "c", 3, 4, 5]]]]}
{"requirement": "def reduce_pyramid(base):\"\"\"\n## Number pyramid\n\nNumber pyramid is a recursive structure where each next row is constructed by adding adjacent values of the current row.\n\n___\n\n## Task\n\nGiven the first row of the number pyramid, find the value stored in its last row.\n\n___\n\n## Performance tests\n\nNumber of tests: 10\nList size: 10,000\n\"\"\"", "inputs": [[[1]], [[3, 5]], [[3, 9, 4]], [[5, 6, 7, 8]], [[13, 1, 21, 9]], [[13, 76, 21, 42, 63]]], "outputs": [[1], [8], [25], [52], [88], [674]], "starter_code": "def reduce_pyramid(base):", "canonical_solution": "from operator import mul\n\ndef reduce_pyramid(base):\n    return sum(map(mul, base, comb_n(len(base) - 1)))\n\ndef comb_n(n):\n    c = 1\n    for k in range(0, n + 1):\n        yield c\n        c = c * (n - k) // (k + 1)", "entry_point": "reduce_pyramid", "task_id": "TACO_lite/265", "input_output_examples": [[[[9, 3, "7", "3"]]], [[2]]]}
{"requirement": "def simplify(p):\"\"\"# Story\n\nJohn found a path to a treasure, and while searching for its precise location he wrote a list of directions using symbols `\"^\"`, `\"v\"`, `\"<\"`, `\">\"` which mean `north`, `east`, `west`, and `east` accordingly. On his way John had to try many different paths, sometimes walking in circles, and even missing the treasure completely before finally noticing it.\n\n___\n\n## Task\n\nSimplify the list of directions written by John by eliminating any loops.\n\n**Note**: a loop is any sublist of directions which leads John to the coordinate he had already visited.\n\n\"\"\"", "inputs": [["<>>"], [""], ["v>^<"], [">>>>"], ["^>>>>v"], ["<^^>v<^^^"], ["<^>>v<"], ["<^<<^^>>vv<<<>^^^v^"], ["v<<<<<^^^^^v>v>v>v>v>>"], [">^>^>^>^>^>^>v>v>v>v>v>v>v>v<"], ["^^^>>>>>>^^^<<<vvv<<<vvv"], ["^^^>>>>>>^^^<<<vvv<<<vv"], [">vv<<<^^^^>>>>>vvvvvv<<<<<<^^^^^^^^>>>>vv"], [">vv<<<^^^^>>>>>vvvvvv<<<<<<^^^^^^^^>>>>"], [">^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v"], ["<>>^<<v"]], "outputs": [[">"], [""], [""], [">>>>"], ["^>>>>v"], ["<^^^^"], [""], ["<^<<^^^"], ["v>"], [">^>^>^>^>^>^>v>v>v>v>v>v>v>v<"], [""], ["^"], [">vv<<<^^^^>>>"], [">vv<<<^^^^>>>>>vvvvvv<<<<<<^^^^^^^^>>>>"], [">^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v"], [">^<<v"]], "starter_code": "def simplify(p):", "canonical_solution": "def simplify(p):\n    new_p = [(0, 0)]\n    new_str = ''\n    x = 0\n    y = 0\n    for i in p:\n        if i == '<':\n            x -= 1\n        elif i == '>':\n            x += 1\n        elif i == '^':\n            y += 1\n        elif i == 'v':\n            y -= 1\n        if (x, y) not in new_p:\n            new_p.append((x, y))\n            new_str += i\n        else:\n            for j in new_p[::-1]:\n                if j != (x, y):\n                    new_p.pop()\n                    new_str = new_str[:-1]\n                else:\n                    break\n    return new_str", "entry_point": "simplify", "task_id": "TACO_lite/266", "input_output_examples": [[[5], [13], [21], [27], [33], [37], [94], [22]], [[-1], [6], [6], [3], [2], [3], [-1], [-1]]]}
{"requirement": "def expression_matter(a, b, c):\"\"\"\n# Task\n\n* **_Given_** *three integers* `a` ,`b` ,`c`, **_return_** *the **_largest number_** obtained after inserting the following operators and brackets*: `+`, `*`, `()`\n* In other words , **_try every combination of a,b,c with [*+()] , and return the Maximum Obtained_**\n\n___\n\n# Notes \n\n* **_The numbers_** *are always* **_positive_**. \n* **_The numbers_** *are in the range* **_(1  ≤  a, b, c  ≤  10)_**.\n* *You can use the same operation* **_more than once_**.\n* **It's not necessary** *to place all the signs and brackets*.\n* **_Repetition_** *in numbers may occur* .\n* You **_cannot swap the operands_**. For instance, in the given example **_you cannot get expression_** `(1 + 3) * 2 = 8`.\n\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [Bizarre Sorting-katas](https://www.codewars.com/collections/bizarre-sorting-katas)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[2, 1, 2], [2, 1, 1], [1, 1, 1], [1, 2, 3], [1, 3, 1], [2, 2, 2], [5, 1, 3], [3, 5, 7], [5, 6, 1], [1, 6, 1], [2, 6, 1], [6, 7, 1], [2, 10, 3], [1, 8, 3], [9, 7, 2], [1, 1, 10], [9, 1, 1], [10, 5, 6], [1, 10, 1]], "outputs": [[6], [4], [3], [9], [5], [8], [20], [105], [35], [8], [14], [48], [60], [27], [126], [20], [18], [300], [12]], "starter_code": "def expression_matter(a, b, c):", "canonical_solution": "def expression_matter(a, b, c):\n    return max(a * b * c, a + b + c, (a + b) * c, a * (b + c))", "entry_point": "expression_matter", "task_id": "TACO_lite/267", "input_output_examples": [[[[1, 2, 9]], [[100]]], [[15], [0]]]}
{"requirement": "def smaller(arr):\"\"\"\nWrite\n```python\nsmaller(arr)\n```\nthat given an array ```arr```, you have to return the amount of numbers that are smaller than ```arr[i]``` to the right.\n\nIf you've completed this one and you feel like testing your performance tuning of this same kata, head over to the much tougher version How many are smaller than me II?\n\"\"\"", "inputs": [[[5, 4, 3, 2, 1]], [[1, 2, 3]], [[1, 2, 0]], [[1, 2, 1]], [[1, 1, -1, 0, 0]], [[5, 4, 7, 9, 2, 4, 4, 5, 6]]], "outputs": [[[4, 3, 2, 1, 0]], [[0, 0, 0]], [[1, 1, 0]], [[0, 1, 0]], [[3, 3, 0, 0, 0]], [[4, 1, 5, 5, 0, 0, 0, 0, 0]]], "starter_code": "def smaller(arr):", "canonical_solution": "def smaller(arr):\n    return [len([a for a in arr[i:] if a < arr[i]]) for i in range(0, len(arr))]", "entry_point": "smaller", "task_id": "TACO_lite/269", "input_output_examples": [[["P01K02H03H04"], ["H02H10P11H02"]], [[12, 12, 11, 13], [-1, -1, -1, -1]]]}
{"requirement": "def reverse_fizzbuzz(s):\"\"\"FizzBuzz is often one of the first programming puzzles people learn. Now undo it with reverse FizzBuzz!\n\nWrite a function that accepts a string, which will always be a valid section of FizzBuzz. Your function must return an array that contains the numbers in order to generate the given section of FizzBuzz.\n\nNotes:\n- If the sequence can appear multiple times within FizzBuzz, return the numbers that generate the first instance of that sequence.\n- All numbers in the sequence will be greater than zero.\n- You will never receive an empty sequence.\n\"\"\"", "inputs": [["1 2 Fizz 4 Buzz"], ["Fizz 688 689 FizzBuzz"], ["Fizz Buzz"], ["Fizz"], ["Buzz"], ["Buzz Fizz"], ["FizzBuzz"]], "outputs": [[[1, 2, 3, 4, 5]], [[687, 688, 689, 690]], [[9, 10]], [[3]], [[5]], [[5, 6]], [[15]]], "starter_code": "def reverse_fizzbuzz(s):", "canonical_solution": "def reverse_fizzbuzz(s):\n    if s == 'Fizz':\n        return [3]\n    if s == 'Buzz':\n        return [5]\n    if s == 'Fizz Buzz':\n        return [9, 10]\n    if s == 'Buzz Fizz':\n        return [5, 6]\n    if s == 'FizzBuzz':\n        return [15]\n    s = s.split()\n    for i in range(len(s)):\n        if s[i].isdigit():\n            start = int(s[i]) - i\n            return list(range(start, start + len(s)))", "entry_point": "reverse_fizzbuzz", "task_id": "TACO_lite/270", "input_output_examples": [[[5], [10], [15], [20]], [["    1    ", "   121   ", "  12321  ", " 1234321 ", "123454321", " 1234321 ", "  12321  ", "   121   ", "    1    "], ["             1         ", "            121        ", "           12321       ", "          1234321      ", "         123454321     ", "        12345654321    ", "       1234567654321   ", "      123456787654321  ", "     12345678987654321 ", "    1234567890987654321", "     12345678987654321 ", "      123456787654321  ", "       1234567654321   ", "        12345654321    ", "         123454321     ", "          1234321      ", "           12321       ", "            121        ", "             1         "], ["                  1              ", "                 121             ", "                12321            ", "               1234321           ", "              123454321          ", "             12345654321         ", "            1234567654321        ", "           123456787654321       ", "          12345678987654321      ", "         1234567890987654321     ", "        123456789010987654321    ", "       12345678901210987654321   ", "      1234567890123210987654321  ", "     123456789012343210987654321 ", "    12345678901234543210987654321", "     123456789012343210987654321 ", "      1234567890123210987654321  ", "       12345678901210987654321   ", "        123456789010987654321    ", "         1234567890987654321     ", "          12345678987654321      ", "           123456787654321       ", "            1234567654321        ", "             12345654321         ", "              123454321          ", "               1234321           ", "                12321            ", "                 121             ", "                  1              "], ["                       1                   ", "                      121                  ", "                     12321                 ", "                    1234321                ", "                   123454321               ", "                  12345654321              ", "                 1234567654321             ", "                123456787654321            ", "               12345678987654321           ", "              1234567890987654321          ", "             123456789010987654321         ", "            12345678901210987654321        ", "           1234567890123210987654321       ", "          123456789012343210987654321      ", "         12345678901234543210987654321     ", "        1234567890123456543210987654321    ", "       123456789012345676543210987654321   ", "      12345678901234567876543210987654321  ", "     1234567890123456789876543210987654321 ", "    123456789012345678909876543210987654321", "     1234567890123456789876543210987654321 ", "      12345678901234567876543210987654321  ", "       123456789012345676543210987654321   ", "        1234567890123456543210987654321    ", "         12345678901234543210987654321     ", "          123456789012343210987654321      ", "           1234567890123210987654321       ", "            12345678901210987654321        ", "             123456789010987654321         ", "              1234567890987654321          ", "               12345678987654321           ", "                123456787654321            ", "                 1234567654321             ", "                  12345654321              ", "                   123454321               ", "                    1234321                ", "                     12321                 ", "                      121                  ", "                       1                   "]]]}
{"requirement": "def transpose(matrix):\"\"\"\nWrite a function that outputs the transpose of a matrix - a new matrix\nwhere the columns and rows of the original are swapped.\n\nThe input to your function will be an array of matrix rows. You can\nassume that each row has the same length, and that the height and\nwidth of the matrix are both positive.\n\"\"\"", "inputs": [[[[1]]], [[[1, 2, 3]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]]]], "outputs": [[[[1]]], [[[1], [2], [3]]], [[[1, 4, 7], [2, 5, 8], [3, 6, 9]]], [[[1, 0, 0, 0, 1], [0, 1, 0, 1, 0], [0, 0, 1, 0, 0]]]], "starter_code": "def transpose(matrix):", "canonical_solution": "def transpose(matrix):\n    return list(map(list, zip(*matrix)))", "entry_point": "transpose", "task_id": "TACO_lite/272", "input_output_examples": [[["kata"], ["ant"], ["asd"]], [[false], [true], [false]]]}
{"requirement": "def bar_triang(a, b, c):\"\"\"\nThe medians of a triangle are the segments that unit the vertices with the midpoint of their opposite sides.\nThe three medians of a triangle intersect at the same point, called the barycenter or the centroid.\nGiven a triangle, defined by the cartesian coordinates of its vertices we need to localize its barycenter or centroid.\n\nThe function ```bar_triang() or barTriang or bar-triang```, receives the coordinates of the three vertices ```A, B and C ``` as three different arguments and outputs the coordinates of the barycenter ```O``` in an array ```[xO, yO]```\n\nThis is how our asked function should work:\nthe result of the coordinates should be expressed up to four decimals, (rounded result).\n\nYou know that the coordinates of the barycenter are given by the following formulas.\n\n\n\nFor additional information about this important point of a triangle see at: (https://en.wikipedia.org/wiki/Centroid)\n\nThe given points form a real or a degenerate triangle but in each case the above formulas can be used.\n\nEnjoy it and happy coding!!\n\"\"\"", "inputs": [[[4, 6], [12, 4], [10, 10]], [[4, 2], [12, 2], [6, 10]], [[4, 8], [8, 2], [16, 6]]], "outputs": [[[8.6667, 6.6667]], [[7.3333, 4.6667]], [[9.3333, 5.3333]]], "starter_code": "def bar_triang(a, b, c):", "canonical_solution": "def bar_triang(a, b, c):\n    return [round(sum(x) / 3.0, 4) for x in zip(a, b, c)]", "entry_point": "bar_triang", "task_id": "TACO_lite/274", "input_output_examples": [[[[1, 1, 0, 1, 3, 2, 6], 1], [[1, 1, 0, 1, 3, 2, 6], 2], [[7], 1]], [[1, 3, 1, 1, 0, 0, 1], [4, 2, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1]]]}
{"requirement": "def issumofconsecutive(N):\"\"\"\nGiven a number N, find whether N can be expressed as sum of two or more consecutive positive numbers. \n\nYour Task:\nYou don't need to read input or print anything. Your task is to complete the function issumofconsecutive() which takes an Integer N as input and returns \"Yes\" and \"No\" accordingly.\n\nExpected Time Complexity: O(1)\nExpected Auxiliary Space: O(1)\n\nConstraints:\n1 <= N <= 10^{5}\n\"\"\"", "inputs": [[10], [8], [24]], "outputs": [["Yes"], ["No"], ["Yes"]], "starter_code": "def issumofconsecutive(N):", "canonical_solution": "def issumofconsecutive(N):\n    if N & N - 1:\n        return 'Yes'\n    else:\n        return 'No'", "entry_point": "issumofconsecutive", "task_id": "TACO_lite/276", "input_output_examples": [[["30.02.2016"], ["40.06.2015"], ["11.13.2014"], ["99.11.2010"], [""]], [["01.03.2016"], ["10.07.2015"], ["11.01.2015"], ["07.02.2011"], [""]]]}
{"requirement": "def rank_of_element(arr, i):\"\"\"# Task\n Given an array `arr`, find the rank of the element at the ith position.\n\n The `rank` of the arr[i] is a value equal to the number of elements `less than or equal to` arr[i] standing before arr[i], plus the number of elements `less than` arr[i] standing after arr[i].\n\n# Input/Output\n\n\n - `[input]` integer array `arr`\n\n  An array of integers.\n\n  `3 <= arr.length <= 50.`\n\n\n - `[input]` integer `i`\n\n  Index of the element whose rank is to be found.\n\n  \n - `[output]` an integer\n\n  Rank of the element at the ith position.\n\"\"\"", "inputs": [[[2, 1, 2, 1, 2], 2], [[2, 1, 2, 2, 2], 2], [[3, 2, 3, 4, 1], 0], [[3, 2, 3, 4, 1], 1], [[3, 2, 3, 4, 1], 2]], "outputs": [[3], [2], [2], [1], [3]], "starter_code": "def rank_of_element(arr, i):", "canonical_solution": "def rank_of_element(arr, i):\n    return sum((x <= arr[i] if n < i else x < arr[i] for n, x in enumerate(arr)))", "entry_point": "rank_of_element", "task_id": "TACO_lite/278", "input_output_examples": [[[6], [4], [12], [3]], [["101010"], ["1010"], ["101010101010"], ["101"]]]}
{"requirement": "def are_similar(a, b):\"\"\"\n# Task\nTwo arrays are called similar if one can be obtained from another by swapping at most one pair of elements.\n\nGiven two arrays, check whether they are similar.\n\n# Input/Output\n\n- `[input]` integer array `A`\n\nArray of integers.\n\nConstraints: `3 ≤ A.length ≤ 10000, 1 ≤ A[i] ≤ 1000.`\n\n- `[input]` integer array `B`\n\nArray of integers of the same length as `A`.\n\nConstraints: `B.length = A.length, 1 ≤ B[i] ≤ 1000.`\n\n- `[output]` a boolean value\n\n`true` if `A` and `B` are similar, `false` otherwise.\n\"\"\"", "inputs": [[[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [2, 1, 3]], [[1, 2, 2], [2, 1, 1]], [[1, 2, 3], [1, 10, 2]], [[2, 3, 1], [1, 3, 2]], [[1, 1, 2], [1, 2, 2]]], "outputs": [[true], [true], [false], [false], [true], [false]], "starter_code": "def are_similar(a, b):", "canonical_solution": "def are_similar(a, b):\n    return sorted(a) == sorted(b) and sum((i != j for i, j in zip(a, b))) in [0, 2]", "entry_point": "are_similar", "task_id": "TACO_lite/279", "input_output_examples": [[[1729], [42]], [[true], [false]]]}
{"requirement": "def is_palindrome(string):\"\"\"# Palindrome strings\n\nA palindrome is a word, phrase, number, or other sequence of characters which reads the same backward or forward. This includes capital letters, punctuation, and word dividers.\n\nImplement a function that checks if something is a palindrome.\n\"\"\"", "inputs": [["anna"], ["walter"], [12321], [123456]], "outputs": [[true], [false], [true], [false]], "starter_code": "def is_palindrome(string):", "canonical_solution": "def is_palindrome(string):\n    return str(string)[::-1] == str(string)", "entry_point": "is_palindrome", "task_id": "TACO_lite/282", "input_output_examples": [[[[5, 3, 2, 8, 1, 4]]], [[[1, 3, 2, 8, 5, 4]]]]}
{"requirement": "def bubblesort_once(l):\"\"\"# Bubblesort Algorithm\n\n## Overview\n\nThe Bubblesort Algorithm is one of many algorithms used to sort a list of similar items (e.g. all numbers or all letters) into either ascending order or descending order.  Given a list:\n\nTo sort this list in ascending order using Bubblesort, you first have to compare the first two terms of the list.  If the first term is larger than the second term, you perform a swap.  \n\nYou then proceed by comparing the 2nd and 3rd terms, performing a swap *when necessary*, and then the 3rd and 4th term, then the 4th and 5th term, etc. etc.  When you reach the end of the list, it is said that you have completed **1 complete pass**.\n\n## Task\n\nGiven an array of integers, your function `bubblesortOnce`/`bubblesort_once`/`BubblesortOnce` (or equivalent, depending on your language's naming conventions) should return a *new* array equivalent to performing exactly **1 complete pass** on the original array.  Your function should be pure, i.e. it should **not** mutate the input array.\n\"\"\"", "inputs": [[[9, 7, 5, 3, 1, 2, 4, 6, 8]], [[1, 2]], [[2, 1]], [[1, 3]], [[3, 1]], [[24, 57]], [[89, 36]], [[1, 2, 3]], [[2, 4, 1]], [[17, 5, 11]], [[25, 16, 9]], [[103, 87, 113]], [[1032, 3192, 2864]], [[1, 2, 3, 4]], [[2, 3, 4, 1]], [[3, 4, 1, 2]], [[4, 1, 2, 3]], [[7, 5, 3, 1]], [[5, 3, 7, 7]], [[3, 1, 8, 5]], [[1, 9, 5, 5]], [[6, 3, 4, 9, 1, 2, 7, 8, 5]], [[6, 3, 4, 15, 14, 9, 1, 2, 7, 8, 5, 14, 11, 15, 17, 19]], [[42]], [[]]], "outputs": [[[7, 5, 3, 1, 2, 4, 6, 8, 9]], [[1, 2]], [[1, 2]], [[1, 3]], [[1, 3]], [[24, 57]], [[36, 89]], [[1, 2, 3]], [[2, 1, 4]], [[5, 11, 17]], [[16, 9, 25]], [[87, 103, 113]], [[1032, 2864, 3192]], [[1, 2, 3, 4]], [[2, 3, 1, 4]], [[3, 1, 2, 4]], [[1, 2, 3, 4]], [[5, 3, 1, 7]], [[3, 5, 7, 7]], [[1, 3, 5, 8]], [[1, 5, 5, 9]], [[3, 4, 6, 1, 2, 7, 8, 5, 9]], [[3, 4, 6, 14, 9, 1, 2, 7, 8, 5, 14, 11, 15, 15, 17, 19]], [[42]], [[]]], "starter_code": "def bubblesort_once(l):", "canonical_solution": "def bubblesort_once(l):\n    l = l[:]\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            l[i], l[i + 1] = (l[i + 1], l[i])\n    return l", "entry_point": "bubblesort_once", "task_id": "TACO_lite/283", "input_output_examples": [[["abc"]], [[3]]]}
{"requirement": "def productfib(prod):\"\"\"\nThe Fibonacci numbers are the numbers in the following integer sequence (Fn):\n>0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, ...\n\nsuch as \n>F(n) = F(n-1) + F(n-2) with F(0) = 0 and F(1) = 1.\n\nGiven a number, say prod (for product), we search two Fibonacci numbers F(n) and F(n+1) verifying \n>F(n) * F(n+1) = prod.\n\nYour function productfib takes an integer (prod) and returns\nan array: \n```\n[F(n), F(n+1), true] or {F(n), F(n+1), 1} or (F(n), F(n+1), True)\n```\ndepending on the language if F(n) * F(n+1) = prod.\n\nIf you don't find two consecutive F(m) verifying `F(m) * F(m+1) = prod`you will return\n```\n[F(m), F(m+1), false] or {F(n), F(n+1), 0} or (F(n), F(n+1), False)\n```\nF(m) being the smallest one such as `F(m) * F(m+1) > prod`.\n\n### Note:\n\n- You can see examples for your language in \"Sample Tests\".\n\"\"\"", "inputs": [[4895], [5895], [74049690], [84049690], [193864606], [447577], [602070], [602070602070], [1120149658760], [256319508074468182850], [203023208030065646654504166904697594722575], [203023208030065646654504166904697594722576], [0], [1], [2], [3], [4], [5], [6], [7], [105]], "outputs": [[[55, 89, true]], [[89, 144, false]], [[6765, 10946, true]], [[10946, 17711, false]], [[10946, 17711, true]], [[610, 987, false]], [[610, 987, true]], [[832040, 1346269, false]], [[832040, 1346269, true]], [[12586269025, 20365011074, true]], [[354224848179261915075, 573147844013817084101, true]], [[573147844013817084101, 927372692193078999176, false]], [[0, 1, true]], [[1, 1, true]], [[1, 2, true]], [[2, 3, false]], [[2, 3, false]], [[2, 3, false]], [[2, 3, true]], [[3, 5, false]], [[13, 21, false]]], "starter_code": "def productfib(prod):", "canonical_solution": "def productfib(prod):\n    a, b = (0, 1)\n    while prod > a * b:\n        a, b = (b, a + b)\n    return [a, b, prod == a * b]", "entry_point": "productfib", "task_id": "TACO_lite/284", "input_output_examples": [[["abccdefee"]], [["cceee"]]]}
{"requirement": "def direction_in_grid(n, m):\"\"\"# Task\n You're standing at the top left corner of an `n × m` grid and facing towards the `right`. \n \n Then you start walking one square at a time in the direction you are facing. \n \n If you reach the border of the grid or if the next square you are about to visit has already been visited, you turn right. \n \n You stop when all the squares in the grid are visited. What direction will you be facing when you stop?\n\n Given two integers n and m, denoting the number of rows and columns respectively, find out the direction you will be facing at the end. \n \n Output `\"L\"` for left, `\"R\"` for right, `\"U\"` for up, and `\"D\"` for down.\n\n# Input/Output\n\n\n - `[input]` integer `n`\n \n number of rows.\n\n `1 <= n <= 1000`\n\n\n - `[input]` integer `m`\n \n number of columns.\n\n `1 <= m <= 1000`\n \n \n - `[output]` a string\n\n The final direction.\n\"\"\"", "inputs": [[1, 1], [2, 2], [2, 3], [2, 4], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6], [100, 100]], "outputs": [["R"], ["L"], ["L"], ["L"], ["D"], ["U"], ["R"], ["R"], ["R"], ["U"], ["D"], ["L"], ["L"], ["L"], ["U"], ["R"], ["R"], ["L"]], "starter_code": "def direction_in_grid(n, m):", "canonical_solution": "def direction_in_grid(n, m):\n    return 'LR'[n % 2] if m >= n else 'UD'[m % 2]", "entry_point": "direction_in_grid", "task_id": "TACO_lite/285", "input_output_examples": [[[5], [8]], [[2], [1]]]}
{"requirement": "def decode(s):\"\"\"Fans of The Wire will appreciate this one. \nFor those that haven't seen the show, the Barksdale Organization has a simple method for encoding telephone numbers exchanged via pagers: \"Jump to the other side of the 5 on the keypad, and swap 5's and 0's.\"\n\nDetective, we're hot on their trail! We have a big pile of encoded messages here to use as evidence, but it would take way too long to decode by hand. Could you write a program to do this for us?\n\n\nWrite a funciton called decode(). Given an encoded string, return the actual phone number in string form. Don't worry about input validation, parenthesies, or hyphens.\n\"\"\"", "inputs": [["4103432323"], ["4103438970"], ["4104305768"], ["4102204351"], ["4107056043"]], "outputs": [["6957678787"], ["6957672135"], ["6956750342"], ["6958856709"], ["6953504567"]], "starter_code": "def decode(s):", "canonical_solution": "def decode(s):\n    return s.translate(str.maketrans('1234567890', '9876043215'))", "entry_point": "decode", "task_id": "TACO_lite/290", "input_output_examples": [[["cat", 1], ["cat", 0], ["cat", 4]], [[true], [false], [false]]]}
{"requirement": "def vaccine_list(*args):\"\"\"\n### Vaccinations for children under 5\nYou have been put in charge of administrating vaccinations for children in your local area. Write a function that will generate a list of vaccines for each child presented for vaccination, based on the child's age and vaccination history, and the month of the year.\n#### The function takes three parameters: age, status and month\n- The parameter 'age' will be given in weeks up to 16 weeks, and thereafter in months. You can assume that children presented will be scheduled for vaccination (eg '16 weeks', '12 months' etc).\n- The parameter 'status' indicates if the child has missed a scheduled vaccination, and the argument will be a string that says 'up-to-date', or a scheduled stage (eg '8 weeks') that has been missed, in which case you need to add any missing shots to the list. Only one missed vaccination stage will be passed in per function call.\n- If the month is 'september', 'october' or 'november' add 'offer fluVaccine' to the list.\n- Make sure there are no duplicates in the returned list, and sort it alphabetically.\n\n#### To save you typing it up, here is the vaccinations list\n~~~~\nfiveInOne : ['8 weeks', '12 weeks', '16 weeks'],\n//Protects against: diphtheria, tetanus, whooping cough, polio and Hib (Haemophilus influenzae type b)\npneumococcal : ['8 weeks', '16 weeks'],\n//Protects against: some types of pneumococcal infection\nrotavirus : ['8 weeks', '12 weeks'],\n//Protects against: rotavirus infection, a common cause of childhood diarrhoea and sickness\nmeningitisB : ['8 weeks', '16 weeks', '12 months'],\n//Protects against: meningitis caused by meningococcal type B bacteria\nhibMenC : ['12 months'],\n//Protects against: Haemophilus influenzae type b (Hib), meningitis caused by meningococcal group C bacteria    \nmeaslesMumpsRubella : ['12 months', '40 months'],\n//Protects against: measles, mumps and rubella\nfluVaccine : ['september','october','november'],\n//Given at: annually in Sept/Oct\npreSchoolBooster : ['40 months']\n//Protects against: diphtheria, tetanus, whooping cough and polio\n~~~~\n\"\"\"", "inputs": [["12 weeks", "up-to-date", "december"], ["12 months", "16 weeks", "june"], ["40 months", "12 months", "october"]], "outputs": [[["fiveInOne", "rotavirus"]], [["fiveInOne", "hibMenC", "measlesMumpsRubella", "meningitisB", "pneumococcal"]], [["hibMenC", "measlesMumpsRubella", "meningitisB", "offer fluVaccine", "preSchoolBooster"]]], "starter_code": "def vaccine_list(*args):", "canonical_solution": "from itertools import chain\nTOME = {'8 weeks': ['fiveInOne', 'pneumococcal', 'rotavirus', 'meningitisB'], '12 weeks': ['fiveInOne', 'rotavirus'], '16 weeks': ['fiveInOne', 'pneumococcal', 'meningitisB'], '12 months': ['meningitisB', 'hibMenC', 'measlesMumpsRubella'], '40 months': ['measlesMumpsRubella', 'preSchoolBooster'], 'september': ['offer fluVaccine'], 'october': ['offer fluVaccine'], 'november': ['offer fluVaccine']}\n\ndef vaccine_list(*args):\n    return sorted(set(chain.from_iterable((TOME.get(s, ()) for s in args))))", "entry_point": "vaccine_list", "task_id": "TACO_lite/292", "input_output_examples": [[[1000], [100]], [[11], [3]]]}
{"requirement": "def step(g, m, n):\"\"\"\nThe prime numbers are not regularly spaced. \n\nWe will write a function `step` with parameters:\n\n- `g` (integer >= 2) which indicates the step we are looking for,\n\n- `m` (integer >= 2) which gives the start of the search (m inclusive),\n\n- `n` (integer >= m) which gives the end of the search (n inclusive)\n\nIn the problem described above `step(g, m, n)` will return the **first** pair of the two prime numbers spaced with a step of `g`\nbetween the limits `m`, `n` if these g-steps prime numbers exist otherwise `nil` or `null` or `None` or `Nothing` or `[]` or `\"0, 0\"` or `{0, 0}` or `0 0`(depending on the language). \n\n\n#Notes: \nThe idea of \"step\" is close to that of \"gap\" but it is not exactly the same. For those interested they can have a look\nat . \n\nA \"gap\" is more restrictive: there must be no primes in between \n(101-107 is a \"step\" but not a \"gap\". Next kata will be about \"gaps\":-).\n\nFor Go: nil slice is expected when there are no `step` between m and n.\n\"\"\"", "inputs": [[2, 100, 110], [4, 100, 110], [6, 100, 110], [8, 300, 400], [10, 300, 400], [4, 30000, 100000], [6, 30000, 100000], [8, 30000, 100000], [11, 30000, 100000], [16, 5, 20], [2, 10000000, 11000000], [52, 1300, 15000], [10, 4900, 5000], [30, 4900, 5000], [2, 4900, 5000], [2, 104000, 105000], [2, 4900, 4919], [7, 4900, 4919], [4, 30115, 100000], [4, 30140, 100000], [4, 30000, 30325]], "outputs": [[[101, 103]], [[103, 107]], [[101, 107]], [[359, 367]], [[307, 317]], [[30109, 30113]], [[30091, 30097]], [[30089, 30097]], [null], [null], [[10000139, 10000141]], [[1321, 1373]], [[4909, 4919]], [[4903, 4933]], [[4931, 4933]], [[104087, 104089]], [null], [null], [[30133, 30137]], [[30319, 30323]], [[30109, 30113]]], "starter_code": "def step(g, m, n):", "canonical_solution": "import math\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\n\ndef step(g, m, n):\n    if m >= n:\n        return []\n    else:\n        for i in range(m, n + 1 - g):\n            if isPrime(i) and isPrime(i + g):\n                return [i, i + g]", "entry_point": "step", "task_id": "TACO_lite/293", "input_output_examples": [[[0]], [[0]]]}
{"requirement": "def solve(arr):\"\"\"\nIn this Kata, you will be given a list of strings and your task will be to find the strings that have the same characters and return the sum of their positions as follows: \n\nignore those that don't have at least one matching partner.\n\nGood luck!\n\"\"\"", "inputs": [[["abc", "abbc", "ab", "xyz", "xy", "zzyx"]], [["wkskkkkkk", "fokoo", "wkskk", "uizzzz", "fokooff", "wkskkkk", "uizzzzzzz"]], [["xhuhhh", "dghgg", "dghgghh", "mrerrrrrr", "xhuhhhhhh", "mrerrr"]], [["uczcccccc", "idffffiii", "pnjjjjjjj", "pnjjjj", "idffff", "uczcccc", "uczcc"]], [["rvjvvvv", "mihhhh", "mihhhhmmm", "rvjvv", "wsnssww", "wsnss"]], [["ayqqqq", "epqqqqqqq", "epqqqqqqqqqq", "rdsddss", "ayqqqqqqq", "epqqqq", "rdsdd"]], [["gkeeekkgggg", "gkeeekkgg", "bzfffffff", "uoboooooo", "gkeeekk", "uobooo", "bzffff", "gkeee"]]], "outputs": [[[1, 8]], [[5, 7, 9]], [[3, 4, 8]], [[5, 5, 11]], [[3, 3, 9]], [[4, 8, 9]], [[8, 8, 12]]], "starter_code": "def solve(arr):", "canonical_solution": "from collections import defaultdict\n\ndef solve(arr):\n    dct = defaultdict(list)\n    for i, fs in enumerate(map(frozenset, arr)):\n        dct[fs].append(i)\n    return sorted((sum(lst) for lst in dct.values() if len(lst) > 1))", "entry_point": "solve", "task_id": "TACO_lite/296", "input_output_examples": [[[500, 60, 45, 14], [1000, 10, 127, 14]], [[4200], [1120]]]}
{"requirement": "def gap(g, m, n):\"\"\"\nThe prime numbers are not regularly spaced.\n\nA prime gap of length n is a run of n-1 consecutive composite numbers between two **successive** primes (see: http://mathworld.wolfram.com/PrimeGaps.html).\n\nWe will write a function gap with parameters:\n\n`g` (integer >= 2) which indicates the gap we are looking for\n\n`m` (integer > 2) which gives the start of the search (m inclusive)\n\n`n` (integer >= m) which gives the end of the search (n inclusive)\n\nThis function should return the **first** pair of two prime numbers spaced with a gap of `g`\nbetween the limits `m`, `n` if these numbers exist otherwise `nil or null or None or Nothing` (depending on the language). \n\nIn C++ return in such a case `{0, 0}`. In F# return `[||]`. In Kotlin return `[]`\n\n# Note for Go\nFor Go: nil slice is expected when there are no gap between m and n.\n\n#Ref\nhttps://en.wikipedia.org/wiki/Prime_gap\n\"\"\"", "inputs": [[2, 3, 10], [3, 3, 10], [2, 100, 110], [4, 100, 110], [6, 100, 110], [8, 300, 400], [10, 300, 400], [4, 30000, 100000], [6, 30000, 100000], [8, 30000, 100000], [11, 30000, 100000], [2, 10000000, 11000000]], "outputs": [[[3, 5]], [null], [[101, 103]], [[103, 107]], [null], [[359, 367]], [[337, 347]], [[30109, 30113]], [[30091, 30097]], [[30161, 30169]], [null], [[10000139, 10000141]]], "starter_code": "def gap(g, m, n):", "canonical_solution": "def gap(g, m, n):\n    previous_prime = n\n    for i in range(m, n + 1):\n        if is_prime(i):\n            if i - previous_prime == g:\n                return [previous_prime, i]\n            previous_prime = i\n    return None\n\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5 + 1)):\n        if n % i == 0:\n            return False\n    return True", "entry_point": "gap", "task_id": "TACO_lite/299", "input_output_examples": [[[["a", "b", ["c", "d", ["e"]]], "e"], [["a", "b", ["c", "d", ["e"]]], "a"], [["a", "b", ["c", "d", ["e"]]], "f"]], [[true], [true], [false]]]}
{"requirement": "def simplify(n):\"\"\"## Task\n\nGiven a positive integer as input, return the output as a string in the following format: \n\nEach element, corresponding to a digit of the number, multiplied by a power of 10 in such a way that with the sum of these elements you can obtain the original number.\n\nNote: `input >= 0`\n\"\"\"", "inputs": [[8964631], [56], [999], [11], [991], [47], [234], [196587], [660], [600], [9090], [10104], [80008], [90000], [0]], "outputs": [["8*1000000+9*100000+6*10000+4*1000+6*100+3*10+1"], ["5*10+6"], ["9*100+9*10+9"], ["1*10+1"], ["9*100+9*10+1"], ["4*10+7"], ["2*100+3*10+4"], ["1*100000+9*10000+6*1000+5*100+8*10+7"], ["6*100+6*10"], ["6*100"], ["9*1000+9*10"], ["1*10000+1*100+4"], ["8*10000+8"], ["9*10000"], [""]], "starter_code": "def simplify(n):", "canonical_solution": "def simplify(n):\n    output = []\n    exp = 0\n    while n:\n        n, r = divmod(n, 10)\n        if r:\n            output.append(f'{r}*{10 ** exp}' if exp else f'{r}')\n        exp += 1\n    return '+'.join(output[::-1])", "entry_point": "simplify", "task_id": "TACO_lite/301", "input_output_examples": [[[100, 10, 910], [10, 9, 4]], [[10], [1]]]}
{"requirement": "def product(s):\"\"\"\nCount the number of exclamation marks and question marks, return the product.\n\"\"\"", "inputs": [[""], ["!"], ["!!??!!"]], "outputs": [[0], [0], [8]], "starter_code": "def product(s):", "canonical_solution": "def product(s):\n    return s.count('?') * s.count('!')", "entry_point": "product", "task_id": "TACO_lite/303", "input_output_examples": [[["City civilians"]], [["Sity sivilians"]]]}
{"requirement": "def kangaroo(k1, r1, k2, r2):\"\"\"\nTwo kangaroos are jumping on a line. They start out at different points on the line, and jump in the same direction at different speeds. Your task is to determine whether or not they'll ever land in the same spot at the same time (you'll just have to suspend disbelief for a moment and accept that two kangaroos, for the purpose of this kata, can occupy the same space at the same time :)\n\nYour function is given four arguments `(kanga1, rate1, kanga2, rate2)`; the first kangaroo's starting point, the first kangaroo's speed, the second kangaroo's starting point, and the second kangaroo's speed.\n\nReturn `true` if the above conditions are met, else `false`. Starting location and speed may vary wildly. The first kangaroo will _usually_ start behind the second one and travel faster, but not always. Starting locations may be negative, but speeds will always be > 0.\n\nBrute force solutions are possible (and not discouraged), but you'll save yourself a lot of waiting time if you don't go that route :)\n\nGood luck!\n\"\"\"", "inputs": [[0, 3, 4, 2], [0, 9, 16, 4], [-1, 3, 0, 2], [-1571, 4240, 9023, 4234], [-7855, 4240, 9023, 4234], [43, 5, 49, 3], [9023, 4240, 1571, 4234], [129, 15, 147, 9], [129, 15, 147, 90], [0, 2, 100000, 1], [72893, 11125, 24432, 4202], [13613, 299, 65130, 73]], "outputs": [[true], [false], [true], [false], [true], [true], [false], [true], [false], [true], [false], [false]], "starter_code": "def kangaroo(k1, r1, k2, r2):", "canonical_solution": "def kangaroo(k1, r1, k2, r2):\n    if r1 == r2:\n        return k1 == k2\n    cross, r = divmod(k1 - k2, r2 - r1)\n    return cross >= 0 and (not r)", "entry_point": "kangaroo", "task_id": "TACO_lite/306", "input_output_examples": [[["A"], ["Z"], ["AA"]], [[1], [26], [27]]]}
{"requirement": "def press_button(n):\"\"\"# Task\n A lock has `n` buttons in it, numbered from `1 to n`. To open the lock, you have to press all buttons in some order, i.e. a key to the lock is a permutation of the first `n` integers. If you push the right button in the right order, it will be pressed into the lock. Otherwise all pressed buttons will pop out. When all buttons are pressed into the lock, it opens.\n \n Your task is to calculate the number of times you've got to push buttons in order to open the lock in the `worst-case scenario`.\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  The number of buttons in the lock.\n  \n  `0 < n ≤ 2000`\n\n\n - `[output]` an integer\n\n The number of times you've got to push buttons in the `worst-case scenario`.\n\"\"\"", "inputs": [[1], [3], [4], [10], [2000]], "outputs": [[1], [7], [14], [175], [1333335000]], "starter_code": "def press_button(n):", "canonical_solution": "def press_button(n):\n    return (n * n + 5) * n / 6", "entry_point": "press_button", "task_id": "TACO_lite/315", "input_output_examples": [[["Mr. Spock"]], [["Hello, Mr. Spock"]]]}
{"requirement": "def find_the_missing_tree(trees):\"\"\"# Task\nAfter a long night (work, play, study) you find yourself sleeping on a bench in a park. As you wake up and try to figure out what happened you start counting trees.\n\nYou notice there are different tree sizes but there's always one size which is unbalanced.\n\nGiven an array representing different tree sizes. Which one is the unbalanced size.\n\nNotes:\n```\nThere can be any number of sizes but one is always unbalanced\nThe unbalanced size is always one less than the other sizes\nThe array is not ordered (nor the trees)```\n\n# Input/Output\n\n\n- `[input]` integer array `trees`\n\nArray representing different tree sizes\n\n\n- `[output]` an integer\n\nThe size of the missing tree.\n\"\"\"", "inputs": [[[1, 2, 2, 3, 3]], [[11, 2, 3, 3, 3, 11, 2, 2]], [[234, 76, 45, 99, 99, 99, 99, 45, 234, 234, 45, 45, 76, 234, 76]], [[1, 1, 1, 1, 1, 1, 1, 22, 22, 22, 22, 22, 22, 22, 3, 3, 3, 3, 3, 3]], [[10, 205, 3000, 3000, 10]], [[50, 408, 50, 50, 50, 50, 408, 408, 408, 680, 408, 680, 50, 408, 680, 50, 50, 680, 408, 680, 50, 680, 680, 408, 408, 50, 50, 408, 50, 50, 50, 50, 680, 408, 680, 50, 680, 408, 680, 408, 680, 50, 50, 50, 680, 50, 680, 408, 680, 680, 680, 408, 408, 408, 408, 680, 680, 50, 408, 408, 408, 50, 408, 408, 50, 680, 680, 680, 50, 680, 680, 680, 50, 680, 408, 50, 50, 408, 50, 408, 680, 408, 50, 680, 680, 408, 408, 680, 408]]], "outputs": [[1], [11], [76], [3], [205], [50]], "starter_code": "def find_the_missing_tree(trees):", "canonical_solution": "def find_the_missing_tree(trees):\n    return sorted(trees, key=trees.count)[0]", "entry_point": "find_the_missing_tree", "task_id": "TACO_lite/317", "input_output_examples": [[[[1, 2]], [[1, 2, "a"]]], [["11"], [false]]]}
{"requirement": "def revamp(s):\"\"\"# Task\n Consider a string of lowercase Latin letters and space characters (\" \"). \n \n First, rearrange the letters in each word `alphabetically`. \n \n And then rearrange the words in ascending order of the sum of their characters' `ASCII` values. \n \n If two or more words have the same `ASCII` value, rearrange them by their length in ascending order; If their length still equals to each other, rearrange them `alphabetically`.\n \n Finally, return the result.\n\n# Input/Output\n\n\n - `[input]` string `s`\n\n  A string of lowercase words. Each word is separated by exactly one space character.\n\n\n - `[output]` a string\n\"\"\"", "inputs": [["batman is bruce wayne"], ["peter parker is spiderman"], ["codewars is great"], ["airplanes in the night sky"]], "outputs": [["is bceru aenwy aabmnt"], ["is eeprt aekprr adeimnprs"], ["is aegrt acdeorsw"], ["in eht ksy ghint aaeilnprs"]], "starter_code": "def revamp(s):", "canonical_solution": "def revamp(s):\n    words = [''.join(sorted(word)) for word in s.split()]\n    words.sort(key=lambda word: (sum(map(ord, word)), len(word), word))\n    return ' '.join(words)", "entry_point": "revamp", "task_id": "TACO_lite/319", "input_output_examples": [[["()"], [")(()))"], ["("], ["(())((()())())"]], [[true], [false], [false], [true]]]}
{"requirement": "def tiaosheng(a):\"\"\"\n# Task\nSome children are playing rope skipping game. Children skip the rope at roughly the same speed: `once per second`. If the child fails during the jump, he needs to tidy up the rope and continue. This will take `3 seconds`.\n\nYou are given an array `failedCount`, where each element is the jump count at the failed. ie. `[12,23,45]` means the child failed 3 times in the game process. The 1st mistake occurred when he jumped 12 times; The 2nd mistake occurred when he jumped 23 times; The 3rd mistake occurred when he jumped 45 times.\n\nYour task is to calculate how many times the child jumped in 60 seconds.\n\nNote: Each child persisted at least 60 jumps, which meant it could have been over 60 seconds, but the child continued to skip rope.\n\n# Input/Output\n\n`[input]` integer array `failedCount`\n\n`0 ≤ failedCount.length ≤ 60`\n\n`1 ≤ failedCount[i] ≤ 60`\n\n`[output]` an integer\n\nhow many times the child jumped in 60 seconds.\n\"\"\"", "inputs": [[[]], [[12, 23, 45]], [[17]], [[10, 20, 30, 40]], [[10, 20, 30, 40, 58]], [[10, 20, 30, 40, 47, 60]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], "outputs": [[60], [51], [57], [48], [48], [47], [30]], "starter_code": "def tiaosheng(a):", "canonical_solution": "def tiaosheng(a):\n    j, t = (0, 0)\n    for j in a:\n        t += 3\n        if j + t > 60:\n            return min(j, 60 - t + 3)\n    return 60 - t", "entry_point": "tiaosheng", "task_id": "TACO_lite/322", "input_output_examples": [[[[[1, 1, 0, 1], [2, 0, 6, 0], [0, 2, 2, 0]], [4, 0, 20, 10]], [[[1, 1, 0, 1], [2, 0, 6, 0], [0, 2, 2, 0]], [4, 0, 20, 10]], [[1, 1, 0, 1], [2, 0, 6, 0], [0, 2, 2, 0]], [[[1, 1, 0, 1], [2, 0, 6, 0], [0, 2, 2, 0]], [4, 0, 20, 10]], [0, 2, 2, 0], [[[1, 1, 0, 1], [2, 0, 6, 0], [0, 2, 2, 0]], [4, 0, 20, 10]], [4, 0, 20, 10], [[[1, 1, 0, 1], [2, 0, 6, 0], [0, 2, 2, 0]], [4, 0, 20, 10]]], [[7, 8, 0, 0], [7], 7, [7, 9, 0, 0], [0, 2, 2, 0], [20], [4, 0, 20, 10], [7]]]}
{"requirement": "def poohbear(s):\"\"\"\nCreate a function that interprets code in the esoteric language **Poohbear**\n\n## The Language\n\nPoohbear is a stack-based language largely inspired by Brainfuck. It has a maximum integer value of 255, and 30,000 cells. The original intention of Poohbear was to be able to send messages that would, to most, be completely indecipherable: \nPoohbear Wiki\n\n* For the purposes of this kata, you will make a version of Poohbear that has **infinite** memory cells in **both directions** (so you do not need to limit cells to 30,000)\n* Cells have a default value of 0\n* Each cell can hold one byte of data.  Once a cell's value goes above 255, it wraps around to 0.  If a cell's value goes below 0, it wraps to 255.\n* If the result of an operation isn't an int, round the result down to the nearest one.\n* Your interpreter should ignore any non-command characters in the code.\n* If you come to a `W` in the code and the current cell is equal to 0, jump to the corresponding `E`.\n* If you come to an `E` in the code and the current cell is **not** 0, jump back to the corresponding `W`.\n\nHere are the Poohbear commands: \n\n| Command | Definition\n|---| -------------------------\n| + | Add 1 to the current cell\n| - | Subtract 1 from the current cell\n| > | Move the cell pointer 1 space to the right\n| < | Move the cell pointer 1 space to the left\n| c | \"Copy\" the current cell\n| p | Paste the \"copied\" cell into the current cell\n| W | While loop - While the current cell is not equal to 0\n| E | Closing character for loops\n| P | Output the current cell's value as ascii\n| N | Output the current cell's value as an integer\n| T | Multiply the current cell by 2\n| Q | Square the current cell\n| U | Square root the current cell's value\n| L | Add 2 to the current cell\n| I | Subtract 2 from the current cell\n| V | Divide the current cell by 2\n| A | Add the copied value to the current cell's value\n| B | Subtract the copied value from the current cell's value\n| Y | Multiply the current cell's value by the copied value\n| D | Divide the current cell's value by the copied value.\n\"\"\"", "inputs": [["LQTcQAP>pQBBTAI-PA-PPL+P<BVPAL+T+P>PL+PBLPBP<DLLLT+P"], ["LLQT+P >LLLc+QIT-P AAAP P"], ["LLQT>+WN+<P>E"], ["cW>LQQT+P<pE"], ["+W>LQQT+P<-E"], ["+LTQII>+WN<P>+E"], ["+LTQIITTIWP-E"], ["LILcABNBpYDYYYYLLL+P-+W-EQNW-ELLQUTTTT+P"], ["++W-NE"], ["W>UQLIPNPPP45vSDFJLLIPNPqwVMT<E"], ["LLILQQLcYYD"], ["NNN++-NTTTTT+PN"], ["LQQT+P+P+P+P+P+P"], ["+-<>LcIpIL+TQYDABANPAPIIIITUNNQV+++P"], ["+c BANANA BANANA BANANA BANANA BANANA"], ["L       sfdg           ghjk                         kl                                LQTT++++P                        tt                                W                  w                    -                                      E           wewewe                N"]], "outputs": [["Hello World!"], ["!]oo"], ["1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 "], [""], ["!"], ["1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 "], ["~}|{zyxwvutsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?>=<;:9876543210/.-,+*)('&%$#\"! \u001f\u001e\u001d\u001c\u001b\u001a\u0019\u0018\u0017\u0016\u0015\u0014\u0013\u0012\u0011\u0010\u000f\u000e\r\f\u000b\n\t\b\u0007\u0006\u0005\u0004\u0003\u0002\u0001"], ["2'0A"], ["10"], [""], [""], ["0001!33"], ["!\"#$%&"], ["38&(88#"], ["12345678910"], ["D0"]], "starter_code": "def poohbear(s):", "canonical_solution": "from operator import add, mul, floordiv as fdiv, pow\n\ndef poohbear(s):\n\n    def updateMem(func, v):\n        mem[p] = func(mem.get(p, 0), v) % 256\n    braces, stack = ({}, [])\n    for i, c in enumerate(s):\n        if c == 'W':\n            stack.append(i)\n        if c == 'E':\n            braces[i] = stack[-1]\n            braces[stack.pop()] = i\n    mem, copy, output = ({}, 0, [])\n    p, i = (0, 0)\n    while i < len(s):\n        cmd = s[i]\n        if cmd == '>':\n            p += 1\n        elif cmd == '<':\n            p -= 1\n        elif cmd == 'p':\n            mem[p] = copy\n        elif cmd == 'c':\n            copy = mem.get(p, 0)\n        elif cmd == 'W':\n            i = i if bool(mem.get(p, 0)) else braces[i]\n        elif cmd == 'E':\n            i = braces[i] if mem.get(p, 0) else i\n        elif cmd == 'P':\n            output.append(chr(mem.get(p, 0)))\n        elif cmd == 'N':\n            output.append(str(mem.get(p, 0)))\n        elif cmd == '+':\n            updateMem(add, 1)\n        elif cmd == '-':\n            updateMem(add, -1)\n        elif cmd == 'L':\n            updateMem(add, 2)\n        elif cmd == 'I':\n            updateMem(add, -2)\n        elif cmd == 'T':\n            updateMem(mul, 2)\n        elif cmd == 'V':\n            updateMem(fdiv, 2)\n        elif cmd == 'Q':\n            updateMem(pow, 2)\n        elif cmd == 'U':\n            updateMem(lambda a, b: int(pow(a, b)), 0.5)\n        elif cmd == 'A':\n            updateMem(add, copy)\n        elif cmd == 'B':\n            updateMem(add, -copy)\n        elif cmd == 'Y':\n            updateMem(mul, copy)\n        elif cmd == 'D':\n            updateMem(fdiv, copy)\n        i += 1\n    return ''.join(output)", "entry_point": "poohbear", "task_id": "TACO_lite/324", "input_output_examples": [[[2], [2, 3, 4], [48, 7, 8, 9, 10]], [["We have this much circle: 3"], ["We have this much circle: 23"], ["We have this much circle: 2040"]]]}
{"requirement": "def check_alive(health: int):\"\"\"\n## If/else syntax debug\n\nWhile making a game, your partner, Greg, decided to create a function to check if the user is still alive called `checkAlive`/`CheckAlive`/`check_alive`. Unfortunately, Greg made some errors while creating the function.\n\n`checkAlive`/`CheckAlive`/`check_alive` should return true if the player's health is greater than 0 or false if it is 0 or below. \n\n```if-not:csharp\nThe function receives one parameter `health` which will always be a whole number between -10 and 10.\n```\n\"\"\"", "inputs": [[5], [0], [-5]], "outputs": [[true], [false], [false]], "starter_code": "def check_alive(health: int):", "canonical_solution": "def check_alive(health: int):\n    return health > 0", "entry_point": "check_alive", "task_id": "TACO_lite/325", "input_output_examples": [[["01|15|59, 1|47|6, 01|17|20, 1|32|34, 2|3|17"], ["01|15|59, 1|47|16, 01|17|20, 1|32|34, 2|17|17"], [""]], [["Range: 00|47|18 Average: 01|35|15 Median: 01|32|34"], ["Range: 01|01|18 Average: 01|38|05 Median: 01|32|34"], [""]]]}
{"requirement": "def create_anagram(s, t):\"\"\"# Task\n You are given two strings s and t of the same length, consisting of uppercase English letters. Your task is to find the minimum number of \"replacement operations\" needed to get some `anagram` of the string t from the string s. A replacement operation is performed by picking exactly one character from the string s and replacing it by some other character.\n\n About `anagram`: А string x is an anagram of a string y if one can get y by rearranging the letters of x. \n\n# Input/Output\n\n\n - `[input]` string `s`\n\n    Constraints: `5 ≤ s.length ≤ 35`.\n\n\n - `[input]` string `t`\n\n    Constraints: `t.length = s.length`.\n\n\n - `[output]` an integer\n\n    The minimum number of replacement operations needed to get an anagram of the string t from the string s.\n\"\"\"", "inputs": [["AABAA", "BBAAA"], ["OVGHK", "RPGUC"], ["AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAC"]], "outputs": [[1], [4], [1]], "starter_code": "def create_anagram(s, t):", "canonical_solution": "from collections import Counter\n\ndef create_anagram(s, t):\n    return sum((Counter(s) - Counter(t)).values())", "entry_point": "create_anagram", "task_id": "TACO_lite/329", "input_output_examples": [[[300, [300, 200, 400, 600, 100]], [1600, [300, 200, 400, 600, 100]]], [[1], [-1]]]}
{"requirement": "def palindrome_rearranging(s):\"\"\"# Task\n Given a string `s`, find out if its characters can be rearranged to form a palindrome.\n\n# Input/Output\n\n\n - `[input]` string `s`\n\n    A string consisting of lowercase English letters.\n\n    Constraints:\n\n    `4 ≤ inputString.length ≤ 50.`\n\n\n - `[output]` a boolean value\n\n    `true` if the characters of the inputString can be rearranged to form a palindrome, `false` otherwise.\n\"\"\"", "inputs": [["aabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaabc"], ["abbcabb"], ["zyyzzzzz"], ["aaabbb"]], "outputs": [[true], [false], [true], [true], [false]], "starter_code": "def palindrome_rearranging(s):", "canonical_solution": "def palindrome_rearranging(s):\n    return sum((s.count(c) % 2 for c in set(s))) < 2", "entry_point": "palindrome_rearranging", "task_id": "TACO_lite/337", "input_output_examples": [[["crazy", "cseerntiofarmit on  "]], [["secretinformation"]]]}
{"requirement": "def base64_to_base10(string):\"\"\"# Base64 Numeric Translator\n\nOur standard numbering system is (Base 10). That includes 0 through 9. Binary is (Base 2), only 1’s and 0’s.  And Hexadecimal is (Base 16) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F). A hexadecimal “F” has a (Base 10) value of 15. (Base 64) has 64 individual characters which translate in value in (Base 10) from between 0 to 63.\n\n####Write a method that will convert a string from (Base 64) to it's (Base 10) integer value.\n\nThe (Base 64) characters from least to greatest will be\n```\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\n```\nWhere 'A' is equal to 0 and '/' is equal to 63.\n\nJust as in standard (Base 10) when you get to the highest individual integer 9 the next number adds an additional place and starts at the beginning 10; so also (Base 64) when you get to the 63rd digit '/' and the next number adds an additional place and starts at the beginning \"BA\".\n\nWrite a method `base64_to_base10` that will take a string (Base 64) number and output it's (Base 10) value as an integer.\n\"\"\"", "inputs": [["WIN"], ["b64"], ["B64"], ["/+/"], ["HelloWorld"]], "outputs": [[90637], [114360], [7864], [262079], [134710352538679645]], "starter_code": "def base64_to_base10(string):", "canonical_solution": "DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n\ndef base64_to_base10(string):\n    return sum((DIGITS.index(digit) * 64 ** i for i, digit in enumerate(string[::-1])))", "entry_point": "base64_to_base10", "task_id": "TACO_lite/342", "input_output_examples": [[[["Tokyo", "London", "Rome", "Donlon", "Kyoto", "Paris", "Okyot"]], [["Rome", "Rome", "Rome", "Donlon", "London"]], [[]]], [[[["Kyoto", "Okyot", "Tokyo"], ["Donlon", "London"], ["Paris"], ["Rome"]]], [[["Donlon", "London"], ["Rome"]]], [[]]]]}
{"requirement": "def is_divisible(n, x, y):\"\"\"\nCreate a function that checks if a number `n` is divisible by two numbers `x` **AND** `y`. All inputs are positive, non-zero digits.\n\"\"\"", "inputs": [[3, 2, 2], [3, 3, 4], [12, 3, 4], [8, 3, 4], [48, 3, 4], [100, 5, 10], [100, 5, 3], [4, 4, 2], [5, 2, 3], [17, 17, 17], [17, 1, 17]], "outputs": [[false], [false], [true], [false], [true], [true], [false], [true], [false], [true], [true]], "starter_code": "def is_divisible(n, x, y):", "canonical_solution": "def is_divisible(n, x, y):\n    return n % x == 0 and n % y == 0", "entry_point": "is_divisible", "task_id": "TACO_lite/348", "input_output_examples": [[[1], [15], [48], [97]], [[1], [4], [2], [2]]]}
{"requirement": "def letter_check(arr):\"\"\"\nWrite a function that checks if all the letters in the second string are present in the first one at least once, regardless of how many times they appear:\n\nFunction should not be case sensitive, as indicated. Note: both strings are presented as a **single argument** in the form of an array.\n\"\"\"", "inputs": [[["abcd", "aaa"]], [["trances", "nectar"]], [["THE EYES", "they see"]], [["assert", "staring"]], [["arches", "later"]], [["dale", "caller"]], [["parses", "parsecs"]], [["replays", "adam"]], [["mastering", "streaming"]], [["drapes", "compadres"]], [["deltas", "slated"]], [["deltas", ""]], [["", "slated"]]], "outputs": [[true], [true], [true], [false], [false], [false], [false], [false], [true], [false], [true], [true], [false]], "starter_code": "def letter_check(arr):", "canonical_solution": "def letter_check(arr):\n    return set(arr[1].lower()) <= set(arr[0].lower())", "entry_point": "letter_check", "task_id": "TACO_lite/351", "input_output_examples": [[[[1, 2, [3, 4], [5]]]], [[149]]]}
{"requirement": "def word_square(ls):\"\"\"\nA [Word Square](https://en.wikipedia.org/wiki/Word_square) is a set of words written out in a square grid, such that the same words can be read both horizontally and vertically. The number of words, equal to the number of letters in each word, is known as the *order* of the square.\n\nGiven a string of various uppercase `letters`, check whether a *Word Square* can be formed from it. \n\nNote that you should use each letter from `letters` the exact number of times it occurs in the string. If a *Word Square* can be formed, return `true`, otherwise return `false`.\n\n__Input/Output__\n\n* [input] string letters\n\n  A string of uppercase English letters.\n  \n  Constraints: `3 ≤ letters.length ≤ 100`.\n\n\n* [output] boolean\n\n  `true`, if a Word Square can be formed;\n  \n  `false`, if a Word Square cannot be formed.\n\"\"\"", "inputs": [["SATORAREPOTENETOPERAROTAS"], ["NOTSQUARE"], ["BITICETEN"], ["CARDAREAREARDART"], ["CODEWARS"], ["AAAAACEEELLRRRTT"], ["AAACCEEEEHHHMMTT"], ["AAACCEEEEHHHMMTTXXX"], ["ABCD"], ["GHBEAEFGCIIDFHGG"], ["AAHHFDKIHHFCXZBFDERRRTXXAA"], ["AABBCCDDEEFFGGGG"], ["ABCABCABC"], ["FRACTUREOUTLINEDBLOOMINGSEPTETTE"], ["GLASSESRELAPSEIMITATESMEAREDTANNERY"], ["LIMBAREACORKKNEE"], ["DESCENDANTECHENEIDAESHORTCOATSCERBERULUSENTEROMERENECROLATERDIOUMABANAADALETABATNATURENAMETESSERATED"], ["CONGRATUALATIONS"], ["HEARTEMBERABUSERESINTREND"], ["OHLOLWHAT"]], "outputs": [[true], [false], [true], [true], [false], [true], [true], [false], [false], [true], [false], [true], [true], [false], [false], [false], [true], [false], [true], [true]], "starter_code": "def word_square(ls):", "canonical_solution": "from collections import Counter\n\ndef word_square(ls):\n    n = int(len(ls) ** 0.5)\n    return n * n == len(ls) and sum((i % 2 for i in list(Counter(ls).values()))) <= n", "entry_point": "word_square", "task_id": "TACO_lite/352", "input_output_examples": [[[18, 12]], [[true]]]}
{"requirement": "def black_or_white_key(key_press_count):\"\"\"\n## Your Story\n\"A *piano* in the home meant something.\" - *Fried Green Tomatoes at the Whistle Stop Cafe*\n\nYou've just realized a childhood dream by getting a beautiful and beautiful-sounding upright piano from a friend who was leaving the country. You immediately started doing things like playing \"Heart and Soul\" over and over again, using one finger to pick out any melody that came into your head, requesting some sheet music books from the library, signing up for some MOOCs like Developing Your Musicianship, and wondering if you will think of any good ideas for writing piano-related katas and apps. \n\nNow you're doing an exercise where you play the very first (leftmost, lowest in pitch) key on the 88-key keyboard, which (as shown below) is white, with the little finger on your left hand, then the second key, which is black, with the ring finger on your left hand, then the third key, which is white, with the middle finger on your left hand, then the fourth key, also white, with your left index finger, and then the fifth key, which is black, with your left thumb. Then you play the sixth key, which is white, with your right thumb, and continue on playing the seventh, eighth, ninth, and tenth keys with the other four fingers of your right hand. Then for the eleventh key you go back to your left little finger, and so on. Once you get to the rightmost/highest, 88th, key, you start all over again with your left little finger on the first key. Your thought is that this will help you to learn to move smoothly and with uniform pressure on the keys from each finger to the next and back and forth between hands.\n\nYou're not saying the names of the notes while you're doing this, but instead just counting each key press out loud (not starting again at 1 after 88, but continuing on to 89 and so forth) to try to keep a steady rhythm going and to see how far you can get before messing up. You move gracefully and with flourishes, and between screwups you hear, see, and feel that you are part of some great repeating progression between low and high notes and black and white keys. \n\n## Your Function\nThe function you are going to write is not actually going to help you with your piano playing, but just explore one of the patterns you're experiencing: Given the number you stopped on, was it on a black key or a white key?\n\nYour function will receive an integer between 1 and 10000 (maybe you think that in principle it would be cool to count up to, say, a billion, but considering how many years it would take it is just not possible) and return the string \"black\" or \"white\".\n\nHave fun! And if you enjoy this kata, check out the sequel: Piano Kata, Part 2\n\"\"\"", "inputs": [[1], [5], [12], [42], [88], [89], [92], [100], [111], [200], [2017]], "outputs": [["white"], ["black"], ["black"], ["white"], ["white"], ["white"], ["white"], ["black"], ["white"], ["black"], ["white"]], "starter_code": "def black_or_white_key(key_press_count):", "canonical_solution": "def black_or_white_key(key_press_count):\n    return 'black' if (key_press_count - 1) % 88 % 12 in [1, 4, 6, 9, 11] else 'white'", "entry_point": "black_or_white_key", "task_id": "TACO_lite/357", "input_output_examples": [[[12], [13], [99], [999999], [9999999999]], [[15], [15], [105], [1023459], ["There is no possible number that fulfills those requirements"]]]}
{"requirement": "def exchange_sort(sequence):\"\"\"# Task\n Sorting is one of the most basic computational devices used in Computer Science. \n \n Given a sequence (length ≤ 1000) of 3 different key values (7, 8, 9), your task is to find the minimum number of exchange operations necessary to make the sequence sorted. \n\n One operation is the switching of 2 key values in the sequence.\n\n# Input/Output\n\n\n - `[input]` integer array `sequence`\n\n  The Sequence.\n\n\n - `[output]` an integer\n\n  the minimum number of operations.\n\"\"\"", "inputs": [[[7, 7, 8, 8, 9, 9]], [[9, 7, 8, 8, 9, 7]], [[8, 8, 7, 9, 9, 9, 8, 9, 7]], [[9, 9, 9, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7]], [[9, 9, 9, 7, 7, 8, 9, 7, 8, 9, 7, 9]], [[9, 9, 7, 7, 8, 8]], [[9, 7, 9]], [[8, 7, 8]], [[7, 8, 7, 8]], [[8, 8, 7, 8]], [[8, 8, 7, 7, 8]]], "outputs": [[0], [1], [4], [6], [4], [4], [1], [1], [1], [1], [2]], "starter_code": "def exchange_sort(sequence):", "canonical_solution": "from collections import Counter\n\ndef exchange_sort(sequence):\n    swaps, cnt = (0, Counter())\n    for a, b in zip(sequence, sorted(sequence)):\n        if cnt[b, a] > 0:\n            cnt[b, a] -= 1\n            swaps += 1\n        elif a != b:\n            cnt[a, b] += 1\n    return swaps + sum(cnt.values()) // 3 * 2", "entry_point": "exchange_sort", "task_id": "TACO_lite/359", "input_output_examples": [[[1], [-5], [0], [0.12]], [[-1], [-5], [0], [-0.12]]]}
{"requirement": "def presentation_agenda(friend_list):\"\"\"\nA group of friends (n >= 2) have reunited for a get-together after \na very long time. \n\nThey agree that they will make presentations on holiday destinations \nor expeditions they have been to only if it satisfies **one simple rule**: \n> the holiday/journey being presented must have been visited _only_ by the presenter and no one else from the audience.\n\nWrite a program to output the presentation agenda, including the\npresenter and their respective presentation titles.\n\"\"\"", "inputs": [[[{"person": "Abe", "dest": ["London", "Dubai"]}, {"person": "Bond", "dest": ["Melbourne", "Dubai"]}]], [[{"person": "Abe", "dest": ["Dubai"]}, {"person": "Brad", "dest": ["Dubai"]}]], [[{"person": "Abe", "dest": ["London", "Dubai"]}, {"person": "Bond", "dest": ["Melbourne", "Dubai"]}, {"person": "Carrie", "dest": ["Melbourne"]}, {"person": "Damu", "dest": ["Melbourne", "Dubai", "Paris"]}]], [[{"person": "John", "dest": ["Ahmedabad", "Baghdad", "Delhi", "Dhaka"]}, {"person": "Mickeal Angelo", "dest": ["Ahmedabad", "Baghdad", "Delhi", "Hong Kong", "Istanbul", "Jakarta", "Mumbai", "Santiago", "Singapore"]}, {"person": "Gandalf", "dest": ["Chennai", "Hong Kong"]}]]], "outputs": [[[{"person": "Abe", "dest": ["London"]}, {"person": "Bond", "dest": ["Melbourne"]}]], [[]], [[{"person": "Abe", "dest": ["London"]}, {"person": "Damu", "dest": ["Paris"]}]], [[{"person": "John", "dest": ["Dhaka"]}, {"person": "Mickeal Angelo", "dest": ["Istanbul", "Jakarta", "Mumbai", "Santiago", "Singapore"]}, {"person": "Gandalf", "dest": ["Chennai"]}]]], "starter_code": "def presentation_agenda(friend_list):", "canonical_solution": "from collections import Counter\n\ndef presentation_agenda(friend_list):\n    uniqueDest = {d for d, c in Counter((d for p in friend_list for d in p['dest'])).items() if c == 1}\n    pFilteredDest = tuple(((p['person'], [d for d in p['dest'] if d in uniqueDest]) for p in friend_list))\n    return [{'person': name, 'dest': lst} for name, lst in pFilteredDest if lst]", "entry_point": "presentation_agenda", "task_id": "TACO_lite/360", "input_output_examples": [[[1, 1, 1], [10, 8, 10], [1000, 1000, 1000], [13.123, 123.12, 1], [5, 12, 31]], [[0.79], [638.79], [785398163.4], [4436.57], [1858.51]]]}
{"requirement": "def interpreter(code, tape):\"\"\"\n# Esolang Interpreters #2 - Custom Smallfuck Interpreter\n\n## About this Kata Series\n\n\"Esolang Interpreters\" is a Kata Series that originally began as three separate, independent esolang interpreter Kata authored by [@donaldsebleung](http://codewars.com/users/donaldsebleung) which all shared a similar format and were all somewhat inter-related.  Under the influence of [a fellow Codewarrior](https://www.codewars.com/users/nickkwest), these three high-level inter-related Kata gradually evolved into what is known today as the \"Esolang Interpreters\" series.\n\nThis series is a high-level Kata Series designed to challenge the minds of bright and daring programmers by implementing interpreters for various [esoteric programming languages/Esolangs](http://esolangs.org), mainly [Brainfuck](http://esolangs.org/wiki/Brainfuck) derivatives but not limited to them, given a certain specification for a certain Esolang.  Perhaps the only exception to this rule is the very first Kata in this Series which is intended as an introduction/taster to the world of esoteric programming languages and writing interpreters for them.\n\n## The Language\n\nSmallfuck is an [esoteric programming language/Esolang](http://esolangs.org) invented in 2002 which is a sized-down variant of the famous [Brainfuck](http://esolangs.org/wiki/Brainfuck) Esolang.  Key differences include:\n\n- Smallfuck operates only on bits as opposed to bytes\n- It has a limited data storage which varies from implementation to implementation depending on the size of the tape\n- It does not define input or output - the \"input\" is encoded in the initial state of the data storage (tape) and the \"output\" should be decoded in the final state of the data storage (tape)\n\nHere are a list of commands in Smallfuck:\n\n- `>` - Move pointer to the right (by 1 cell)\n- `<` - Move pointer to the left (by 1 cell)\n- `*` - Flip the bit at the current cell\n- `[` - Jump past matching `]` if value at current cell is `0`\n- `]` - Jump back to matching `[` (if value at current cell is nonzero)\n\nAs opposed to Brainfuck where a program terminates only when all of the commands in the program have been considered (left to right), Smallfuck terminates when any of the two conditions mentioned below become true:\n\n- All commands have been considered from left to right\n- The pointer goes out-of-bounds (i.e. if it moves to the left of the first cell or to the right of the last cell of the tape)\n\nSmallfuck is considered to be Turing-complete **if and only if** it had a tape of infinite length; however, since the length of the tape is always defined as finite (as the interpreter cannot return a tape of infinite length), its computational class is of bounded-storage machines with bounded input.\n\nMore information on this Esolang can be found [here](http://esolangs.org/wiki/Smallfuck).\n\n## The Task\n\nImplement a custom Smallfuck interpreter `interpreter()` (`interpreter` in Haskell and F#, `Interpreter` in C#, `custom_small_fuck:interpreter/2` in Erlang) which accepts the following arguments:\n\n1. `code` - **Required**.  The Smallfuck program to be executed, passed in as a string.  May contain non-command characters.  Your interpreter should simply ignore any non-command characters.\n2. `tape` - **Required**.  The initial state of the data storage (tape), passed in **as a string**.  You may assume that all input strings for `tape` will be non-empty and will only contain `\"0\"`s and `\"1\"`s.\n\nYour interpreter should return the final state of the data storage (tape) **as a string** in the same format that it was passed in.\n\n*NOTE: The pointer of the interpreter always starts from the first (leftmost) cell of the tape, same as in Brainfuck.*\n\nGood luck :D\n\n## Kata in this Series\n\n1. [Esolang Interpreters #1 - Introduction to Esolangs and My First Interpreter (MiniStringFuck)](https://www.codewars.com/kata/esolang-interpreters-number-1-introduction-to-esolangs-and-my-first-interpreter-ministringfuck)\n2. **Esolang Interpreters #2 - Custom Smallfuck Interpreter**\n3. [Esolang Interpreters #3 - Custom Paintfuck Interpreter](http://codewars.com/kata/esolang-interpreters-number-3-custom-paintf-star-star-k-interpreter)\n4. [Esolang Interpreters #4 - Boolfuck Interpreter](http://codewars.com/kata/esolang-interpreters-number-4-boolfuck-interpreter)\n\"\"\"", "inputs": [["*", "00101100"], [">*>*", "00101100"], ["*>*>*>*>*>*>*>*", "00101100"], ["*>*>>*>>>*>*", "00101100"], [">>>>>*<*<<*", "00101100"], ["iwmlis *!BOSS 333 ^v$#@", "00101100"], [">*>*;;;.!.,+-++--!!-!!!-", "00101100"], ["    *  >*           >*>*lskdfjsdklfj>*;;+--+--+++--+-+-  lskjfiom,x>*sdfsdf>sdfsfsdfsdfwervbnbvn*,.,.,,.,.  >*", "00101100"], ["*,,...,..,..++-->++++-*>--+>*>+++->>..,+-,*>*", "00101100"], [">>nssewww>>wwess>*<nnn*<<ee*", "00101100"], ["*>>>*>*>>*>>>>>>>*>*>*>*>>>**>>**", "0000000000000000"], ["<<<*>*>*>*>*>>>*>>>>>*>*", "0000000000000000"], ["*>*>*>>>*>>>>>*<<<<<<<<<<<<<<<<<<<<<*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*>*>*", "11111111111111111111111111111111"], [">>*>*>*<<*<*<<*>*", "1101"], ["*[>*]", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["[>*]", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["*>*>>>*>*>>>>>*>[>*]", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["*>*>>>*>*>>>>>*[>*]", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["*[>[*]]", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["*[>[*]]", "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"], ["[[]*>*>*>]", "000"], ["*>[[]*>]<*", "100"], ["[*>[>*>]>]", "11001"], ["[>[*>*>*>]>]", "10110"]], "outputsstarter_code": "def interpreter(code, tape):", "canonical_solution": "def interpreter(code, tape):\n    tape = list(map(int, tape))\n    ptr = step = loop = 0\n    while 0 <= ptr < len(tape) and step < len(code):\n        command = code[step]\n        if loop:\n            if command == '[':\n                loop += 1\n            elif command == ']':\n                loop -= 1\n        elif command == '>':\n            ptr += 1\n        elif command == '<':\n            ptr -= 1\n        elif command == '*':\n            tape[ptr] ^= 1\n        elif command == '[' and tape[ptr] == 0:\n            loop += 1\n        elif command == ']' and tape[ptr] == 1:\n            loop -= 1\n        step += 1 if not loop else loop // abs(loop)\n    return ''.join(map(str, tape))", "entry_point": "interpreter", "task_id": "TACO_lite/361", "input_output_examples": [[[5], [51500], [5000000]], [["5m"], ["51.5km"], ["5Mm"]]]}
{"requirement": "def digits_product(product):\"\"\"# Task\n Given an integer `product`, find the smallest positive integer the product of whose digits is equal to product. If there is no such integer, return -1 instead.\n\n# Input/Output\n\n\n - `[input]` integer `product`\n\n    Constraints: `0 ≤ product ≤ 600`.\n\n\n - `[output]` a positive integer\n\"\"\"", "inputs": [[12], [19], [450], [0], [13], [1], [5], [10]], "outputs": [[26], [-1], [2559], [10], [-1], [11], [15], [25]], "starter_code": "def digits_product(product):", "canonical_solution": "def digits_product(product):\n    if product < 10:\n        return 10 + product\n    n = ''\n    for d in range(9, 1, -1):\n        while not product % d:\n            n += str(d)\n            product //= d\n    return int(n[::-1]) if product == 1 else -1", "entry_point": "digits_product", "task_id": "TACO_lite/366", "input_output_examples": [[[1234567], [321], [8529]], [[87], [48], [79]]]}
{"requirement": "def divisors(num):\"\"\"\nCreate a function named `divisors`/`Divisors` that takes an integer `n > 1` and returns an array with all of the integer's divisors(except for 1 and the number itself), from smallest to largest. If the number is prime return the string '(integer) is prime' (`null` in C#) (use `Either String a` in Haskell and `Result, String>` in Rust).\n\"\"\"", "inputs": [[15], [253], [24], [13], [3], [29]], "outputs": [[[3, 5]], [[11, 23]], [[2, 3, 4, 6, 8, 12]], ["13 is prime"], ["3 is prime"], ["29 is prime"]], "starter_code": "def divisors(num):", "canonical_solution": "def divisors(num):\n    l = [a for a in range(2, num) if num % a == 0]\n    if len(l) == 0:\n        return str(num) + ' is prime'\n    return l", "entry_point": "divisors", "task_id": "TACO_lite/370", "input_output_examples": [[[100, 500], [100, 300]], [[7, 294, 468], [7, 294]]]}
{"requirement": "def ips_between(start, end):\"\"\"\nImplement a function that receives two IPv4 addresses, and returns the number of addresses between them (including the first one, excluding the last one).\n\nAll inputs will be valid IPv4 addresses in the form of strings. The last address will always be greater than the first one.\n\"\"\"", "inputs": [["150.0.0.0", "150.0.0.1"], ["10.0.0.0", "10.0.0.50"], ["20.0.0.10", "20.0.1.0"], ["10.11.12.13", "10.11.13.0"], ["160.0.0.0", "160.0.1.0"], ["170.0.0.0", "170.1.0.0"], ["50.0.0.0", "50.1.1.1"], ["180.0.0.0", "181.0.0.0"], ["1.2.3.4", "5.6.7.8"]], "outputs": [[1], [50], [246], [243], [256], [65536], [65793], [16777216], [67372036]], "starter_code": "def ips_between(start, end):", "canonical_solution": "from ipaddress import ip_address\n\ndef ips_between(start, end):\n    return int(ip_address(end)) - int(ip_address(start))", "entry_point": "ips_between", "task_id": "TACO_lite/371", "input_output_examples": [[["Hello world"], ["Hello He worldwrd"]], [["lllooHe wrd"], ["lllHeo He wordwrd"]]]}
{"requirement": "def descriptions(arr):\"\"\"\n# Task\n A range-collapse representation of an array of integers looks like this: `\"1,3-6,8\"`, where `3-6` denotes the range from `3-6`, i.e. `[3,4,5,6]`. \n \n Hence `\"1,3-6,8\"` = `[1,3,4,5,6,8]`. Some other range-collapse representations of `[1,3,4,5,6,8]` include `\"1,3-5,6,8\", \"1,3,4,5,6,8\", etc`.\n\n Each range is written in the following format `\"a-b\"`, where `a < b`, and the whole range must belong to the array in an increasing order.\n\n You are given an array `arr`. Your task is to find the number of different range-collapse representations of the given array.\n\n# Input/OutPut\n\n\n - `[input]` integer array `arr`\n\n  sorted array of different positive integers.\n\n\n - `[output]` an integer\n\n  the number of different range-collapse representations of the given array.\n\"\"\"", "inputs": [[[1, 3, 4, 5, 6, 8]], [[1, 2, 3]], [[11, 43, 66, 123]], [[3, 4, 5, 8, 9, 10, 11, 23, 43, 66, 67]]], "outputs": [[8], [4], [1], [64]], "starter_code": "def descriptions(arr):", "canonical_solution": "def descriptions(arr):\n    return 2 ** sum((a + 1 == b for a, b in zip(arr, arr[1:])))", "entry_point": "descriptions", "task_id": "TACO_lite/373", "input_output_examples": [[["abcd"], ["RqaEzty"], ["cwAt"], ["ZpglnRxqenU"]], [["A-Bb-Ccc-Dddd"], ["R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy"], ["C-Ww-Aaa-Tttt"], ["Z-Pp-Ggg-Llll-Nnnnn-Rrrrrr-Xxxxxxx-Qqqqqqqq-Eeeeeeeee-Nnnnnnnnnn-Uuuuuuuuuuu"]]]}
{"requirement": "def split_exp(n):\"\"\"# Task\n You are given a decimal number `n` as a **string**. Transform it into an array of numbers (given as **strings** again), such that each number has only one nonzero digit and their sum equals n.\n\n Each number in the output array should be written without any leading and trailing zeros.\n\n# Input/Output\n\n\n - `[input]` string `n`\n\n A non-negative number.\n \n `1 ≤ n.length ≤ 30.`\n\n\n - `[output]` a string array\n\n  Elements in the array should be sorted in descending order.\n\"\"\"", "inputs": [["7970521.5544"], ["7496314"], ["0"], ["6"], ["1.0000000000"], ["0000000000.1"], ["1010101"], ["1234567890.1234567890"]], "outputs": [[["7000000", "900000", "70000", "500", "20", "1", ".5", ".05", ".004", ".0004"]], [["7000000", "400000", "90000", "6000", "300", "10", "4"]], [[]], [["6"]], [["1"]], [[".1"]], [["1000000", "10000", "100", "1"]], [["1000000000", "200000000", "30000000", "4000000", "500000", "60000", "7000", "800", "90", ".1", ".02", ".003", ".0004", ".00005", ".000006", ".0000007", ".00000008", ".000000009"]]], "starter_code": "def split_exp(n):", "canonical_solution": "def split_exp(n):\n    dot = n.find('.')\n    if dot == -1:\n        dot = len(n)\n    return [d + '0' * (dot - i - 1) if i < dot else '.{}{}'.format('0' * (i - dot - 1), d) for i, d in enumerate(n) if i != dot and d != '0']", "entry_point": "split_exp", "task_id": "TACO_lite/374", "input_output_examples": [[[[1, 2, 3]], [[1, 1, 1, 1, 1]], [[1, "a", "2", 3, 3, 4, 5, "b"]]], [[2], ["nil"], [4]]]}
{"requirement": "def solve(n):\"\"\"\nIn this Kata, you will be given a number `n` (`n > 0`) and your task will be to return the smallest square number `N` (`N > 0`) such that `n + N` is also a perfect square. If there is no answer, return `-1` (`nil` in Clojure, `Nothing` in Haskell, `None` in Rust). \n\nMore examples in test cases. \n\nGood luck!\n\"\"\"", "inputs": [[1], [2], [3], [4], [5], [7], [8], [9], [10], [11], [13], [17], [88901], [290101]], "outputs": [[-1], [-1], [1], [-1], [4], [9], [1], [16], [-1], [25], [36], [64], [5428900], [429235524]], "starter_code": "def solve(n):", "canonical_solution": "def solve(n):\n    for i in range(int(n ** 0.5), 0, -1):\n        x = n - i ** 2\n        if x > 0 and x % (2 * i) == 0:\n            return ((n - i ** 2) // (2 * i)) ** 2\n    return -1", "entry_point": "solve", "task_id": "TACO_lite/375", "input_output_examples": [[[10, 2], [5, 7], [12, 5]], [[5, 5], [1, 1, 1, 1, 1, 0, 0], [3, 3, 2, 2, 2]]]}
{"requirement": "def array_center(lst):\"\"\"# Task\nConsider an array of integers `a`. Let `min(a)` be its minimal element, and let `avg(a)` be its mean.\n\nDefine the center of the array `a` as array `b` such that:\n\n```\n- b is formed from a by erasing some of its elements.\n- For each i, |b[i] - avg(a)| < min(a).\n- b has the maximum number of elements among all the arrays\n  satisfying the above requirements.\n```\n\nGiven an array of integers, return its center.\n\n\n\n# Input/Output\n\n\n`[input]` integer array `a`\n\n Unsorted non-empty array of integers.\n\n`2 ≤ a.length ≤ 50,`\n\n`1 ≤ a[i] ≤ 350.`\n\n`[output]` an integer array\n\"\"\"", "inputs": [[[8, 3, 4, 5, 2, 8]], [[1, 3, 2, 1]], [[10, 11, 12, 13, 14]]], "outputs": [[[4, 5]], [[1, 2, 1]], [[10, 11, 12, 13, 14]]], "starter_code": "def array_center(lst):", "canonical_solution": "def array_center(lst):\n    return [i for i in lst if abs(i - sum(lst) * 1.0 / len(lst)) < min(lst)]", "entry_point": "array_center", "task_id": "TACO_lite/376", "input_output_examples": [[[[]]], [[true]]]}
{"requirement": "def validate_ean(code):\n\t\"\"\"\nA lot of goods have an International Article Number (formerly known as \"European Article Number\") abbreviated \"EAN\". EAN is a 13-digits barcode consisting of 12-digits data followed by a single-digit checksum (EAN-8 is not considered in this kata).\n\n\nThe single-digit checksum is calculated as followed (based upon the 12-digit data):\n\nThe digit at the first, third, fifth, etc. position (i.e. at the odd position) has to be multiplied with \"1\". \nThe digit at the second, fourth, sixth, etc. position (i.e. at the even position) has to be multiplied with \"3\".\nSum these results. \n\nIf this sum is dividable by 10, the checksum is 0. Otherwise the checksum has the following formula:\n\n  checksum = 10 - (sum mod 10)\n\nYour Task\nValidate a given EAN-Code. Return true if the given EAN-Code is valid, otherwise false.\n\nAssumption\nYou can assume the given code is syntactically valid, i.e. it only consists of numbers and it exactly has a length of 13 characters.\n\nGood Luck and have fun.\n\"\"\"", "inputs": [["9783815820865"], ["9783815820864"], ["9783827317100"]], "outputs": [[true], [false], [true]], "starter_code": "def validate_ean(code):\n\t", "canonical_solution": "validate_ean = lambda code: (sum(map(int, code[0::2])) + sum(map(int, code[1::2])) * 3) % 10 == 0", "entry_point": "validate_ean", "task_id": "TACO_lite/377", "input_output_examples": [[["codewars"], ["cat"], ["abcdtuvwxyz"]], [["enedazuu"], ["ezu"], ["zeeeutaaaaa"]]]}
{"requirement": "def expanded_form(num):\"\"\"\n# Write Number in Expanded Form\n\nYou will be given a number and you will need to return it as a string in [Expanded Form](https://www.mathplacementreview.com/arithmetic/whole-numbers.php#expanded-form).\n\nNOTE: All numbers will be whole numbers greater than 0.\n\nIf you liked this kata, check out [part 2](https://www.codewars.com/kata/write-number-in-expanded-form-part-2)!!\n\"\"\"", "inputs": [[2], [12], [42], [70304], [4982342]], "outputs": [["2"], ["10 + 2"], ["40 + 2"], ["70000 + 300 + 4"], ["4000000 + 900000 + 80000 + 2000 + 300 + 40 + 2"]], "starter_code": "def expanded_form(num):", "canonical_solution": "def expanded_form(num):\n    num = list(str(num))\n    return ' + '.join((x + '0' * (len(num) - y - 1) for y, x in enumerate(num) if x != '0'))", "entry_point": "expanded_form", "task_id": "TACO_lite/385", "input_output_examples": [[[["Begin on Road A", "Right on Road B", "Right on Road C", "Left on Road D"]], ["Begin on Lua Pkwy", "Right on Sixth Alley", "Right on 1st Cr"], [["Begin on 3rd Blvd", "Right on First Road", "Left on 9th Dr"]]], [["Begin on Road D", "Right on Road C", "Left on Road B", "Left on Road A"], ["Begin on 1st Cr", "Left on Sixth Alley", "Left on Lua Pkwy"], [["Begin on 9th Dr", "Right on First Road", "Left on 3rd Blvd"]]]]}
{"requirement": "def int_diff(arr, n):\"\"\"\nWrite a function that accepts two arguments: an array/list of integers and another integer (`n`). \n\nDetermine the number of times where two integers in the array have a difference of `n`.\n\"\"\"", "inputs": [[[1, 1, 5, 6, 9, 16, 27], 4], [[1, 1, 3, 3], 2], [[4, 8, 12, 12, 3, 6, 2], 6], [[1, 2, 3, 4, 5, 6, 7], 7], [[1, 6, 2, 3, 7, 8, 7], 0], [[1, 2, 3, 4], 0], [[1, 1, 1, 1], 0], [[], 3]], "outputs": [[3], [4], [3], [0], [1], [0], [6], [0]], "starter_code": "def int_diff(arr, n):", "canonical_solution": "def int_diff(arr, n):\n    num = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) == n:\n                num += 1\n    return num", "entry_point": "int_diff", "task_id": "TACO_lite/387", "input_output_examples": [[[["X", "O", "X"]]], [[1]]]}
{"requirement": "def make_change(n):\"\"\"# Making Change\n\nComplete the method that will determine the minimum number of coins needed to make change for a given amount in American currency.\n\nCoins used will be half-dollars, quarters, dimes, nickels, and pennies, worth 50¢, 25¢, 10¢, 5¢ and 1¢, respectively. They'll be represented by the symbols `H`, `Q`, `D`, `N` and `P` (symbols in Ruby, strings in in other languages)\n\nThe argument passed in will be an integer representing the value in cents. The return value should be a hash/dictionary/object with the symbols as keys, and the numbers of coins as values. Coins that are not used should not be included in the hash. If the argument passed in is 0, then the method should return an empty hash.\n\n#### **If you liked this kata, check out [Part 2](https://www.codewars.com/kata/making-change-part-2/ruby).**\n\"\"\"", "inputs": [[0], [1], [5], [43], [91], [101], [239]], "outputs": [[{}], [{"P": 1}], [{"N": 1}], [{"Q": 1, "D": 1, "N": 1, "P": 3}], [{"H": 1, "Q": 1, "D": 1, "N": 1, "P": 1}], [{"H": 2, "P": 1}], [{"H": 4, "Q": 1, "D": 1, "P": 4}]], "starter_code": "def make_change(n):", "canonical_solution": "BASE = {'H': 50, 'Q': 25, 'D': 10, 'N': 5, 'P': 1}\n\ndef make_change(n):\n    r = {}\n    for x, y in BASE.items():\n        if n >= y:\n            r[x], n = divmod(n, y)\n    return r", "entry_point": "make_change", "task_id": "TACO_lite/393", "input_output_examples": [[["192.168.1.0/31"], ["213.256.46.160/28"]], [[["192.168.1.0", "192.168.1.1"]], [null]]]}
{"requirement": "def toothpick(n):\n\t\"\"\"\nIntroduction\n\nIt's been more than 20 minutes since the negligent waiter has taken your order for the house special prime tofu steak with a side of chili fries.\n\nOut of boredom, you start fiddling around with the condiments tray. To be efficient, you want to be familiar with the choice of sauces and spices before your order is finally served.\n\nYou also examine the toothpick holder and try to analyze its inner workings when - yikes - the holder's lid falls off and all 23 picks lay scattered on the table.\n\nBeing a good and hygiene oriented citizen, you decide not to just put them back in the holder. Instead of letting all the good wood go to waste, you start playing around with the picks.\n\nIn the first \"round\", you lay down one toothpick vertically. You've used a total of one toothpick.\n\nIn the second \"round\", at each end of the first toothpick, you add a perpendicular toothpick at its center point. You added two additional toothpicks for a total of three toothpicks.\n\nIn the next rounds, you continue to add perpendicular toothpicks to each free end of toothpicks already on the table.\n\nWith your 23 toothpicks, you can complete a total of six rounds:\n\nYou wonder if you'd be able to implement this sequence in your favorite programming language. Because your food still hasn't arrived, you decide to take out your laptop and start implementing...\n\nChallenge\nImplement a script that returns the amount of toothpicks needed to complete n amount of rounds of the toothpick sequence.\n\n```\n0 <= n <= 5000\n```\n\nHint\nYou can attempt this brute force or get some inspiration from the math department.\n\"\"\"", "inputs": [[0], [3], [16], [32], [49], [89], [327], [363], [366], [512], [656], [1038], [1052], [1222], [1235], [1302], [1735], [1757], [1974], [2048]], "outputs": [[0], [7], [171], [683], [1215], [3715], [52239], [60195], [62063], [174763], [209095], [699451], [700379], [757295], [762019], [832559], [1398915], [1443119], [2038207], [2796203]], "starter_code": "def toothpick(n):\n\t", "canonical_solution": "from math import log2\n\ndef t(n):\n    if n == 0:\n        return 0\n    k = int(log2(n))\n    i = n - 2 ** k\n    if i == 0:\n        return (2 ** (2 * k + 1) + 1) // 3\n    else:\n        return t(2 ** k) + 2 * t(i) + t(i + 1) - 1\ntoothpick = t", "entry_point": "toothpick", "task_id": "TACO_lite/394", "input_output_examples": [[["Code Wars"]], [[69]]]}
{"requirement": "def special_number(n):\"\"\"# Definition \n\nA number is a **_Special Number_** *if it’s digits only consist 0, 1, 2, 3, 4 or 5*\n\n**_Given_** a number *determine if it special number or not* .  \n\n\n\n# Warm-up (Highly recommended)\n\n# [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n___\n\n# Notes \n\n* **_The number_** passed will be **_positive_** (N > 0) .\n\n* All **single-digit numbers** with in the interval **_[0:5]_** are considered as **_special number_**. \n___\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)          \n\n### ALL translation are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[2], [3], [5], [9], [7], [23], [79], [32], [39], [55], [11350224]], "outputs": [["Special!!"], ["Special!!"], ["Special!!"], ["NOT!!"], ["NOT!!"], ["Special!!"], ["NOT!!"], ["Special!!"], ["NOT!!"], ["Special!!"], ["Special!!"]], "starter_code": "def special_number(n):", "canonical_solution": "def special_number(n):\n    return 'Special!!' if max(str(n)) <= '5' else 'NOT!!'", "entry_point": "special_number", "task_id": "TACO_lite/395", "input_output_examples": [[[10], [99], [-32]], [[1], [18], [5]]]}
{"requirement": "def sort_two_arrays(arr1, arr2):\"\"\"\nGive you two arrays `arr1` and `arr2`. They have the same length(length>=2). The elements of two arrays always be integer.\n \nSort `arr1` according to the ascending order of arr2; Sort `arr2` according to the ascending order of arr1. Description is not easy to understand,\n\nFinally, returns the sorted arrays by a 2D array: `[sorted arr1, sorted arr2]`\n \nNote: In ascending order sorting process(not the final sort), if some elements have same value, sort them according to their index; You can modify the original array, but I advise you not to do that. ;-)\n\n```if:haskell\n Note: In Haskell, you are expected to return a tuple of arrays, and good luck trying to modifiy the original array. :]\n```\n\"\"\"", "inputs": [[[5, 4, 3, 2, 1], [6, 5, 7, 8, 9]], [[2, 1, 3, 4, 5], [5, 6, 7, 8, 9]], [[5, 6, 9, 2, 6, 5], [3, 6, 7, 4, 8, 1]]], "outputs": [[[[4, 5, 3, 2, 1], [9, 8, 7, 5, 6]]], [[[2, 1, 3, 4, 5], [6, 5, 7, 8, 9]]], [[[5, 5, 2, 6, 9, 6], [4, 3, 1, 6, 8, 7]]]], "starter_code": "def sort_two_arrays(arr1, arr2):", "canonical_solution": "import numpy as np\n\ndef sort_two_arrays(arr1, arr2):\n    idx2 = np.argsort(arr2, kind='mergesort')\n    idx1 = np.argsort(arr1, kind='mergesort')\n    return [[arr1[i] for i in idx2], [arr2[i] for i in idx1]]", "entry_point": "sort_two_arrays", "task_id": "TACO_lite/404", "input_output_examples": [[["xyz", -23, 6], ["xyz", 0, 4], ["xyz", 19, 2], ["xyz", -4, -4]], [["yzxyzx"], ["xyzx"], ["yz"], ["zxyz"]]]}
{"requirement": "def riders(stations, lost):\"\"\"# A History Lesson\n\nThe Pony Express was a mail service operating in the US in 1859-60.\n\n\n\n\n\nIt reduced the time for messages to travel between the Atlantic and Pacific coasts to about 10 days, before it was made obsolete by the transcontinental telegraph.\n\n# How it worked\n\nThere were a number of *stations*, where:\n\n\n* The rider switched to a fresh horse and carried on, or\n\n* The mail bag was handed over to the next rider\n\n\n# Kata Task\n\n\n`stations` is a list/array of distances (miles) from one station to the next along the Pony Express route.\n\nImplement the `riders` method/function, to return how many riders are necessary to get the mail from one end to the other.\n\n##  Missing rider\n\nIn this version of the Kata a rider may go missing. In practice, this could be for a number of reasons - a lame horse, an accidental fall, foul play... \n\nAfter some time, the rider's absence would be noticed at the **next** station, so the next designated rider from there would have to back-track the mail route to look for his missing colleague. The missing rider is then safely escorted back to the station he last came from, and the mail bags are handed to his rescuer (or another substitute rider if necessary). \n\n`stationX` is the number (2..N) of the station where the rider's absence was noticed.\n\n# Notes\n\n* Each rider travels as far as he can, but never more than 100 miles.\n\n*Good Luck.\nDM.*\n\n---\n\nSee also\n* The Pony Express\n* The Pony Express (missing rider)\n\"\"\"", "inputs": [[[43, 23, 40, 13], 4], [[18, 15], 2], [[43, 23, 40, 13], 3], [[33, 8, 16, 47, 30, 30, 46], 5], [[6, 24, 6, 8, 28, 8, 23, 47, 17, 29, 37, 18, 40, 49], 2], [[50, 50], 2], [[50, 50, 25, 50, 24], 3], [[50, 51, 25, 50, 25], 3], [[50, 100, 25, 50, 26], 3], [[100], 2], [[50, 50], 3], [[50, 51], 3]], "outputs": [[3], [2], [2], [5], [5], [3], [3], [5], [6], [3], [2], [4]], "starter_code": "def riders(stations, lost):", "canonical_solution": "def riders(stations, lost):\n    stations = stations[:lost - 1] + stations[lost - 2:]\n    rider, dist = (1, 0)\n    for i, d in enumerate(stations):\n        rider += (dist + d > 100) + (i == lost - 2)\n        dist = dist * (dist + d <= 100 and i != lost - 2) + d\n    return rider", "entry_point": "riders", "task_id": "TACO_lite/406", "input_output_examples": [[[5], [92], [1], [12], [42], [100], [2017]], [["C#"], ["C"], ["A"], ["G#"], ["D"], ["G#"], ["F"]]]}
{"requirement": "def solution(a):\"\"\"\n## Description\n\nGiven an array X of positive integers, its elements are to be transformed by running the following operation on them as many times as required:\n\n```if X[i] > X[j] then X[i] = X[i] - X[j]```\n\nWhen no more transformations are possible, return its sum (\"smallest possible sum\").\n\n## Solution steps:\n\n## Additional notes:\n\nThere are performance tests consisted of very big numbers and arrays of size at least 30000. Please write an efficient algorithm to prevent timeout.\n\"\"\"", "inputs": [[[6, 9, 21]], [[9]], [[30, 12]], [[11, 22]], [[1, 21, 55]], [[4, 16, 24]], [[3, 13, 23, 7, 83]], [[60, 12, 96, 48, 60, 24, 72, 36, 72, 72, 48]], [[71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71]]], "outputs": [[9], [9], [12], [22], [3], [12], [5], [132], [923]], "starter_code": "def solution(a):", "canonical_solution": "def solution(a):\n    a_len = len(a)\n    a = set(a)\n    while len(a) != 1:\n        b = max(a)\n        a.remove(b)\n        a.add(b - max(a))\n    return max(a) * a_len", "entry_point": "solution", "task_id": "TACO_lite/408", "input_output_examples": [[[4, 1]], [[3]]]}
{"requirement": "def prod_int_partii(n, s, min_=2):\"\"\"\nYou should have done Product Partitions I to do this second part. If you solved it, you should have noticed that we try to obtain the multiplicative partitions with ```n ≤ 100 ```.\n\nIn this kata we will have more challenging values, our ```n ≤  10000```. So, we need a more optimized and faster code.\n\nWe need the function ```prod_int_partii()``` that will give all the amount of different products, excepting the number itself multiplied by one.\n\nThe function ```prod_int_partii()``` will receive two arguments, the number ```n``` for the one we have to obtain all the multiplicative partitions, and an integer s that determines the products that have an amount of factors equals to ```s```.\n\nThe function will output a list with this structure:\n```python\n[(1), (2), [(3)]]\n\n(1) Total amount of different products we can obtain, using the factors of n. (We do not consider the product n . 1)\n\n(2) Total amount of products that have an amount of factors equals to s.\n\n[(3)] A list of lists with each product represented by a sorted list of the factors. All the product- lists should be sorted also.\nIf we have only one product-list as a result, the function will give only the list \nand will not use the list of lists\n```\n\nAgain consider that some numbers will not have multiplicative partitions.\n\nHappy coding!!\n\n(Recursion is advisable)\n\"\"\"", "inputs": [[36, 3], [48, 5], [37, 2], [96, 5], [96, 6]], "outputs": [[[8, 3, [[2, 2, 9], [2, 3, 6], [3, 3, 4]]]], [[11, 1, [2, 2, 2, 2, 3]]], [[0, 0, []]], [[18, 2, [[2, 2, 2, 2, 6], [2, 2, 2, 3, 4]]]], [[18, 1, [2, 2, 2, 2, 2, 3]]]], "starter_code": "def prod_int_partii(n, s, min_=2):", "canonical_solution": "def prod_int_partii(n, s, min_=2):\n    total, fac = (0, [])\n    for d in range(min_, int(n ** 0.5) + 1):\n        if not n % d:\n            count, l, sub = prod_int_partii(n // d, s - 1, d)\n            if l == 1:\n                sub = [sub]\n            total += count + 1\n            fac.extend(([d] + x for x in sub))\n    if s == 1:\n        fac = [[n]]\n    return [total, len(fac), fac[0] if len(fac) == 1 else fac]", "entry_point": "prod_int_partii", "task_id": "TACO_lite/410", "input_output_examples": [[], []]}
{"requirement": "def min_sum(arr):\"\"\"# Introduction and Warm-up (Highly recommended)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n___\n\n# Task\n\n**_Given_** an **_array of integers_** , **_Find the minimum sum_** which is obtained *from summing each Two integers product* .\n___\n\n# Notes \n\n* **_Array/list_** *will contain* **_positives only_** . \n* **_Array/list_** *will always has* **_even size_**\n___\n\n## **_Explanation_**:\n\n* **_The minimum sum_** *obtained from summing each two integers product*\n\n___\n\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[[5, 4, 2, 3]], [[12, 6, 10, 26, 3, 24]], [[9, 2, 8, 7, 5, 4, 0, 6]]], "outputs": [[22], [342], [74]], "starter_code": "def min_sum(arr):", "canonical_solution": "def min_sum(arr):\n    arr = sorted(arr)\n    return sum((arr[i] * arr[-i - 1] for i in range(len(arr) // 2)))", "entry_point": "min_sum", "task_id": "TACO_lite/412", "input_output_examples": [[["Across the rivers", "chris"], ["Next to a lake", "chris"], ["Under a sea", "chris"], ["A crew that boards the ship", "chris"], ["A live son", "Allison"]], [[true], [false], [false], [false], [false]]]}
{"requirement": "def prod_int_part(n, min_=2):\"\"\"\nGiven a natural number n, we want to know in how many ways we may express these numbers as product of other numbers.\n\nWe need the function ```prod_int_part()```, that receives a number n, and ouputs the amount of total different products with all the products of max length sorted in this way:\n\n1) each product will be expressed in a list of its factors in increasing order from left to right\n\n2) if there is more than one list-product, these lists should be ordered by the value of the first term, if two lists have the same term equal thay should be ordered by the value of the second term.\n\nIf we have only one list-product with the maximum length, there is no use to have it with two nested braces, so the result will be like this case:\n\nEnjoy it!!\n\"\"\"", "inputs": [[18], [60], [54], [37], [61]], "outputs": [[[3, [2, 3, 3]]], [[10, [2, 2, 3, 5]]], [[6, [2, 3, 3, 3]]], [[0, []]], [[0, []]]], "starter_code": "def prod_int_part(n, min_=2):", "canonical_solution": "def prod_int_part(n, min_=2):\n    total, fac = (0, [])\n    for d in range(min_, int(n ** 0.5) + 1):\n        if not n % d:\n            count, sub = prod_int_part(n // d, d)\n            total += count + 1\n            if not count:\n                sub = [n // d]\n            if not fac:\n                fac = [d] + sub\n    return [total, fac]", "entry_point": "prod_int_part", "task_id": "TACO_lite/417", "input_output_examples": [[["An old silent pond...\nA frog jumps into the pond,\nsplash! Silence again."], ["Autumn moonlight -\na worm digs silently\ninto the chestnut."]], [[true], [false]]]}
{"requirement": "def spinning_rings(inner_max, outer_max):\"\"\"\nImagine two rings with numbers on them. The inner ring spins clockwise (decreasing by 1 each spin) and the outer ring spins counter clockwise (increasing by 1 each spin). We start with both rings aligned on 0 at the top, and on each move we spin each ring one increment. How many moves will it take before both rings show the same number at the top again?\n\nThe inner ring has integers from 0 to innerMax and the outer ring has integers from 0 to outerMax, where innerMax and outerMax are integers >= 1.\n\n---\n\nfor a bigger challenge, check out the [Performance Version](https://www.codewars.com/kata/59b0b7cd2a00d219ab0000c5) of this kata by @Voile\n\"\"\"", "inputs": [[2, 3], [3, 2], [1, 1], [2, 2], [3, 3]], "outputs": [[5], [2], [1], [3], [2]], "starter_code": "def spinning_rings(inner_max, outer_max):", "canonical_solution": "from itertools import count\n\ndef spinning_rings(inner_max, outer_max):\n    return next((i for i in count(1) if i % (outer_max + 1) == -i % (inner_max + 1)))", "entry_point": "spinning_rings", "task_id": "TACO_lite/418", "input_output_examples": [[[5, 5], [10, 5], [6, 12]], [[2], [2], [4]]]}
{"requirement": "def execute(code):\"\"\"\n# RoboScript #3 - Implement the RS2 Specification\n\n## Disclaimer\n\nThe story presented in this Kata Series is purely fictional; any resemblance to actual programming languages, products, organisations or people should be treated as purely coincidental.\n\n## About this Kata Series\n\nThis Kata Series is based on a fictional story about a computer scientist and engineer who owns a firm that sells a toy robot called MyRobot which can interpret its own (esoteric) programming language called RoboScript.  Naturally, this Kata Series deals with the software side of things (I'm afraid Codewars cannot test your ability to build a physical robot!).\n\n## Story\n\nLast time, you implemented the RS1 specification which allowed your customers to write more concise scripts for their robots by allowing them to simplify consecutive repeated commands by postfixing a non-negative integer onto the selected command. However, you later realised that this simplification wasn't enough. What if a set of commands/moves were to be repeated? The code would still appear cumbersome.\n\n## Task\n\nYour task is to allow your customers to further shorten their scripts and make them even more concise by implementing the newest specification of RoboScript (at the time of writing) that is RS2. RS2 syntax is a superset of RS1 syntax which means that all valid RS1 code from the previous Kata of this Series should still work with your RS2 interpreter. The only main addition in RS2 is that the customer should be able to group certain sets of commands using round brackets. Simply put, your interpreter should be able to deal with nested brackets of any level.\n\nAnd of course, brackets are useless if you cannot use them to repeat a sequence of movements! Similar to how individual commands can be postfixed by a non-negative integer to specify how many times to repeat that command, a sequence of commands grouped by round brackets `()` should also be repeated `n` times provided a non-negative integer is postfixed onto the brackets, like such:\n\n`(SEQUENCE_OF_COMMANDS)n`\n\n... is equivalent to ...\n\n`SEQUENCE_OF_COMMANDS...SEQUENCE_OF_COMMANDS` (repeatedly executed \"n\" times)\n\nAll 4 example tests have been included for you. Good luck :D\n\n## Kata in this Series\n\n1. [RoboScript #1 - Implement Syntax Highlighting](https://www.codewars.com/kata/roboscript-number-1-implement-syntax-highlighting)\n2. [RoboScript #2 - Implement the RS1 Specification](https://www.codewars.com/kata/roboscript-number-2-implement-the-rs1-specification)\n3. **RoboScript #3 - Implement the RS2 Specification**\n4. [RoboScript #4 - RS3 Patterns to the Rescue](https://www.codewars.com/kata/594b898169c1d644f900002e)\n5. [RoboScript #5 - The Final Obstacle (Implement RSU)](https://www.codewars.com/kata/5a12755832b8b956a9000133)\n\"\"\"", "inputs": [["LF5(RF3)(RF3R)F7"], ["(L(F5(RF3))(((R(F3R)F7))))"], ["F4L(F4RF4RF4LF4L)2F4RF4RF4"], ["F4L((F4R)2(F4L)2)2(F4R)2F4"], ["F2LF3L(F2)2LF5L(F3)2LF7L((F2)2)2L(F3)3L(F5)2"], ["F2LF3L(F2)2LF5L(F3)2LF7L(F4)2L((F3)1)3L(F5)2"], ["(F5RF5R(F3R)2)3"], ["((F5R)2(F3R)2)3"], ["((F3LF3R)2FRF6L)2"], ["(F12)3"], ["(F4)13"], ["((F3)10(F2)11)10"], ["FFF0F0LFL0FF((F5R0R)2(F3R)2)0RFR0FFF0FF0F0F0"], ["F0L0F0((F3R0LF3R0R0R)0FL0L0RF6F0L)2F0F0F0F0F0"]], "outputs": [["    ****\r\n    *  *\r\n    *  *\r\n********\r\n    *   \r\n    *   "], ["    ****\r\n    *  *\r\n    *  *\r\n********\r\n    *   \r\n    *   "], ["    *****   *****   *****\r\n    *   *   *   *   *   *\r\n    *   *   *   *   *   *\r\n    *   *   *   *   *   *\r\n*****   *****   *****   *"], ["    *****   *****   *****\r\n    *   *   *   *   *   *\r\n    *   *   *   *   *   *\r\n    *   *   *   *   *   *\r\n*****   *****   *****   *"], ["*********  \r\n*       *  \r\n* ***** *  \r\n* *   * *  \r\n* *   * *  \r\n* * *** *  \r\n* *     *  \r\n* *******  \r\n*          \r\n***********"], ["*********  \r\n*       *  \r\n* ***** *  \r\n* *   * *  \r\n* *   * *  \r\n* * *** *  \r\n* *     *  \r\n* *******  \r\n*          \r\n***********"], ["******    \r\n     *    \r\n  ******  \r\n  *  * *  \r\n  * ******\r\n  **** * *\r\n    * ** *\r\n    **** *\r\n      *  *\r\n      ****"], ["******    \r\n     *    \r\n  ******  \r\n  *  * *  \r\n  * ******\r\n  **** * *\r\n    * ** *\r\n    **** *\r\n      *  *\r\n      ****"], ["      **     **\r\n      **     **\r\n      **     **\r\n   *****  *****\r\n   *   *  *   *\r\n   *   *  *   *\r\nr\n  *    \r\n  *    \r\n***    "], ["** \r\n * \r\n * \r\n * \r\n * \r\n * \r\n **\r\n  *\r\n  *\r\n  *\r\n  *\r\n  *\r\n  *"]], "starter_code": "def execute(code):", "canonical_solution": "from collections import deque\nimport re\nTOKENIZER = re.compile('(R+|F+|L+|\\\\)|\\\\()(\\\\d*)')\n\ndef parseCode(code):\n    cmds = [[]]\n    for cmd, n in TOKENIZER.findall(code):\n        s, r = (cmd[0], int(n or '1') + len(cmd) - 1)\n        if cmd == '(':\n            cmds.append([])\n        elif cmd == ')':\n            lst = cmds.pop()\n            cmds[-1].extend(lst * r)\n        else:\n            cmds[-1] += [(s, r)]\n    return cmds[0]\n\ndef execute(code):\n    pos, dirs = ((0, 0), deque([(0, 1), (1, 0), (0, -1), (-1, 0)]))\n    seens = {pos}\n    for s, r in parseCode(code):\n        if s == 'F':\n            for _ in range(r):\n                pos = tuple((z + dz for z, dz in zip(pos, dirs[0])))\n                seens.add(pos)\n        else:\n            dirs.rotate(r % 4 * (-1) ** (s == 'R'))\n    miX, maX = (min((x for x, y in seens)), max((x for x, y in seens)))\n    miY, maY = (min((y for x, y in seens)), max((y for x, y in seens)))\n    return '\\r\\n'.join((''.join(('*' if (x, y) in seens else ' ' for y in range(miY, maY + 1))) for x in range(miX, maX + 1)))", "entry_point": "execute", "task_id": "TACO_lite/419", "input_output_examples": [[[0], [1], [30], [200]], [[2], [3], [3], ["error"]]]}
{"requirement": "def optimum_location(students, locations):\"\"\"### Preface\nYou are currently working together with a local community to build a school teaching children how to code. First plans have been made and the community wants to decide on the best location for the coding school.\nIn order to make this decision data about the location of students and potential locations is collected. \n\n### Problem\nIn order to be able to attract and teach as many students as possible we want to minimize the total traveling distance for potential students. The streets system is organized in a traditional grid system and students can only travel horizontally or vertically (not diagonal).\n\nThe locations of interested students is given as an array with the first value of each entry presenting the x coordinate and the second value presenting the y coordinate:\n```python\nstudents = [[x1,y1],[x2,y2],...];\n```\nPotential locations are passed as an array of objects with an unique id, a x and y coordinate:\n```python\nlocations = [{\"id\": id1, \"x\": x1, \"y\": y1}, {\"id\": id2, \"x\": x2, \"y\": y2}, ...];\n```\n\nYour task is now to evaluate which of the school locations would be best to minimize the distance for all potential students to the school.\n\nThe desired output should consist of a string indicating the ID of the best suitable location and the x and y coordinates in the following form:\n\n```\n\"The best location is number ID with the coordinates x = X and y = Y\"\n```\n\"\"\"", "inputs": [[[[3, 7], [2, 2], [14, 1]], [{"id": 1, "x": 3, "y": 4}, {"id": 2, "x": 8, "y": 2}]], [[[54, 7], [1, 211], [14, 44], [12, 5], [14, 7]], [{"id": 1, "x": 44, "y": 55}, {"id": 2, "x": 12, "y": 57}, {"id": 3, "x": 23, "y": 66}]], [[[152, 7], [1, 211], [14, 56], [12, 4], [142, 7]], [{"id": 1, "x": 63, "y": 55}, {"id": 2, "x": 55, "y": 21}, {"id": 3, "x": 144, "y": 12}]], [[[152, 742], [466, 2211], [1412, 564], [142, 444], [142, 744]], [{"id": 1, "x": 1263, "y": 525}, {"id": 2, "x": 55, "y": 21}, {"id": 3, "x": 537, "y": 1244}]], [[[7, 66], [71, 7], [0, 94], [16, 93], [33, 49], [49, 81], [17, 2], [95, 71], [32, 14], [31, 41], [92, 72], [12, 79]], [{"y": 38, "x": 32, "id": 1}, {"y": 49, "x": 73, "id": 2}, {"y": 85, "x": 50, "id": 3}, {"y": 2, "x": 79, "id": 4}, {"y": 20, "x": 44, "id": 5}, {"y": 56, "x": 17, "id": 6}, {"y": 43, "x": 26, "id": 7}, {"y": 61, "x": 89, "id": 8}, {"y": 18, "x": 15, "id": 9}, {"y": 34, "x": 41, "id": 10}, {"y": 27, "x": 99, "id": 11}]]], "outputs": [["The best location is number 1 with the coordinates x = 3 and y = 4"], ["The best location is number 2 with the coordinates x = 12 and y = 57"], ["The best location is number 2 with the coordinates x = 55 and y = 21"], ["The best location is number 3 with the coordinates x = 537 and y = 1244"], ["The best location is number 6 with the coordinates x = 17 and y = 56"]], "starter_code": "def optimum_location(students, locations):", "canonical_solution": "def optimum_location(students, locations):\n    m = min(locations, key=lambda loc: sum((abs(loc['x'] - s[0]) + abs(loc['y'] - s[1]) for s in students)))\n    return 'The best location is number %d with the coordinates x = %d and y = %d' % (m['id'], m['x'], m['y'])", "entry_point": "optimum_location", "task_id": "TACO_lite/420", "input_output_examples": [[[6], [12]], [[1], [2]]]}
{"requirement": "def mul_power(n, k):\"\"\"\n## Task\n\nLet's say we have a positive integer, `$n$`. You have to find the smallest possible positive integer that when multiplied by `$n$`, becomes a perfect power of integer `$k$`. A perfect power of `$k$` is any positive integer that can be represented as `$a^k$`.\n\n**Notes:** \n+ `$k, n \\in \\mathbb{N} $` and `$ 1 \\lt n \\lt 10^6,\\text{ } 1 \\lt k \\lt 10 $`\n+ However, the output may be way larger than `$10^6$`.\n\nIf you have trouble seeing the numbers, refresh your page ;-) Please rate this kata. All translations are welcome.\n\nABOVE: [If you see this:](https://imgur.com/TKY59S4), refresh your page.\n\"\"\"", "inputs": [[100, 3], [36, 2], [72, 4], [5, 2], [1152, 3]], "outputs": [[10], [1], [18], [5], [12]], "starter_code": "def mul_power(n, k):", "canonical_solution": "from collections import Counter\nfrom math import ceil\nPRIMES = [2] + [n for n in range(3, 1000, 2) if all((n % d for d in range(3, int(n ** 0.5) + 1, 2)))]\n\ndef get_factors(n):\n    factors = []\n    for p in PRIMES:\n        if p > n:\n            break\n        while n % p == 0:\n            factors.append(p)\n            n //= p\n    if n > 1:\n        factors.append(n)\n    return Counter(factors)\n\ndef mul_power(n, k):\n    factors, lcm = (get_factors(n), 1)\n    for p, e in factors.items():\n        lcm *= p ** (ceil(e / k) * k)\n    return lcm // n", "entry_point": "mul_power", "task_id": "TACO_lite/422", "input_output_examples": [[[[1, 2, 3]], [[1, 1, 1]], [[5, 2, 8]]], [[1], [-1], [3]]]}
{"requirement": "def conference_picker(cities_visited, cities_offered):\"\"\"Lucy loves to travel. Luckily she is a renowned computer scientist and gets to travel to international conferences using her department's budget.\n\nEach year, Society for Exciting Computer Science Research (SECSR) organizes several conferences around the world. Lucy always picks one conference from that list that is hosted in a city she hasn't been to before, and if that leaves her with more than one option, she picks the conference that she thinks would be most relevant for her field of research.\n\nWrite a function `conferencePicker` that takes in two arguments:\n\n- `citiesVisited`, a list of cities that Lucy has visited before, given as an array of strings.\n- `citiesOffered`, a list of cities that will host SECSR conferences this year, given as an array of strings. `citiesOffered` will already be ordered in terms of the relevance of the conferences for Lucy's research (from the most to the least relevant).\n\nThe function should return the city that Lucy should visit, as a string.\n\nAlso note:\n\n- You should allow for the possibility that Lucy hasn't visited any city before.\n- SECSR organizes at least two conferences each year.\n- If all of the offered conferences are hosted in cities that Lucy has visited before, the function should return `'No worthwhile conferences this year!'` (`Nothing` in Haskell)\n\"\"\"", "inputs": [[[], ["Philadelphia", "Osaka", "Tokyo", "Melbourne"]], [[], ["Brussels", "Madrid", "London"]], [[], ["Sydney", "Tokyo"]], [["London", "Berlin", "Mexico City", "Melbourne", "Buenos Aires", "Hong Kong", "Madrid", "Paris"], ["Berlin", "Melbourne"]], [["Beijing", "Johannesburg", "Sydney", "Philadelphia", "Hong Kong", "Stockholm", "Chicago", "Seoul", "Mexico City", "Berlin"], ["Stockholm", "Berlin", "Chicago"]], [["Rome"], ["Rome"]], [["Milan"], ["London"]], [["Mexico City", "Dubai", "Philadelphia", "Madrid", "Houston", "Chicago", "Delhi", "Seoul", "Mumbai", "Lisbon", "Hong Kong", "Brisbane", "Stockholm", "Tokyo", "San Francisco", "Rio De Janeiro"], ["Lisbon", "Mexico City"]], [["Gatlantis", "Baldur's Gate", "Gotham City", "Mystara", "Washinkyo", "Central City"], ["Mystara", "Gatlantis", "MegaTokyo", "Genosha", "Central City", "Washinkyo", "Gotham City", "King's Landing", "Waterdeep"]], [["Thay", "Camelot"], ["Waterdeep", "Washinkyo"]]], "outputs": [["Philadelphia"], ["Brussels"], ["Sydney"], ["No worthwhile conferences this year!"], ["No worthwhile conferences this year!"], ["No worthwhile conferences this year!"], ["London"], ["No worthwhile conferences this year!"], ["MegaTokyo"], ["Waterdeep"]], "starter_code": "def conference_picker(cities_visited, cities_offered):", "canonical_solution": "def conference_picker(cities_visited, cities_offered):\n    for city in cities_offered:\n        if city not in cities_visited:\n            return city\n    return 'No worthwhile conferences this year!'", "entry_point": "conference_picker", "task_id": "TACO_lite/424", "input_output_examples": [[["foos", "of"], ["string", "gnirts"], ["banana", "abn"]], [["oofs"], ["gnirts"], ["aaabnn"]]]}
{"requirement": "def reverse(st):\"\"\"\nYou need to write a function that reverses the words in a given string. A word can also fit an empty string. If this is not clear enough, here are some examples:\n\nAs the input may have trailing spaces, you will also need to ignore unneccesary whitespace.\n\nHappy coding!\n\"\"\"", "inputs": [["I am an expert at this"], ["This is so easy"], ["no one cares"]], "outputs": [["this at expert an am I"], ["easy so is This"], ["cares one no"]], "starter_code": "def reverse(st):", "canonical_solution": "def reverse(st):\n    return ' '.join(reversed(st.split())).strip()", "entry_point": "reverse", "task_id": "TACO_lite/426", "input_output_examples": [[["001000101", 9]], [["001000000"]]]}
{"requirement": "def make_upper_case(s):\"\"\"\nWrite a function which converts the input string to uppercase.\n\n~~~if:bf\nFor BF all inputs end with \\0, all inputs are lowercases and there is no space between. \n~~~\n\"\"\"", "inputs": [["hello"], ["hello world"], ["hello world !"], ["heLlO wORLd !"], ["1,2,3 hello world!"]], "outputs": [["HELLO"], ["HELLO WORLD"], ["HELLO WORLD !"], ["HELLO WORLD !"], ["1,2,3 HELLO WORLD!"]], "starter_code": "def make_upper_case(s):", "canonical_solution": "def make_upper_case(s):\n    return s.upper()", "entry_point": "make_upper_case", "task_id": "TACO_lite/431", "input_output_examples": [[[15, 12], [2, 256]], [[false], [true]]]}
{"requirement": "def center_of(chars):\"\"\"# Task\n\nChristmas is coming. In the [previous kata](https://www.codewars.com/kata/5a405ba4e1ce0e1d7800012e), we build a custom Christmas tree with the specified characters and the specified height.\n\nNow, we are interested in the center of the Christmas tree. \n\nPlease imagine that we build a Christmas tree with `chars = \"abc\" and n = Infinity`.\n\nIf we keep only the center part of leaves, we will got an infinite string, but it has a repeat substring (spaces will be removed). If we join them together, it looks like an infinitely repeating pattern.\n\nSo, your task is to find the repeat substring of the center part of leaves.\n\n# Inputs:\n\n- `chars`: the specified characters. In this kata, they always be lowercase letters.\n\n# Output:\n\n- The repeat substring that satisfy the above conditions.\n\"\"\"", "inputs": [[""], ["a"], ["ab"], ["abc"], ["abab"], ["abcde"], ["aaaaaaaaaaaaaa"], ["abaabaaab"], ["dbdbebedbddbedededeeddbbdeddbeddeebdeddeebbbb"], ["vttussvutvuvvtustsvsvtvu"]], "outputs": [[""], ["a"], ["a"], ["aba"], ["a"], ["aecea"], ["a"], ["aba"], ["deededebddeebeddeddeddbddeddeddebeeddbededeed"], ["vsvvtvvtvvsv"]], "starter_code": "def center_of(chars):", "canonical_solution": "def center_of(chars):\n    if not chars:\n        return ''\n    total = 0\n    res = []\n    for i in range(1, len(chars) * 2 + 1):\n        if i % 2 == 1:\n            res.append((i + 1) // 2 + total)\n            res[-1] = chars[(res[-1] - 1) % len(chars)]\n        total += i\n    res = ''.join(res)\n    for i in range(len(res) // 2 + 1):\n        if len(res) % len(res[:i + 1]) != 0:\n            continue\n        if res[:i + 1] * (len(res) // len(res[:i + 1])) == res:\n            return res[:i + 1]\n    return res", "entry_point": "center_of", "task_id": "TACO_lite/435", "input_output_examples": [[[4], [6], [1]], [["4\n43\n432\n4321"], ["6\n65\n654\n6543\n65432\n654321"], ["1"]]]}
{"requirement": "def change_count(change):\"\"\"\nYou've been collecting change all day, and it's starting to pile up in your pocket, but you're too lazy to see how much you've found.\n\nGood thing you can code!\n\nCreate ```change_count()``` to return a dollar amount of how much change you have!\n\nValid types of change include:\n```\npenny: 0.01\nnickel: 0.05\ndime: 0.10\nquarter: 0.25\ndollar: 1.00\n```\n\n```if:python\nThese amounts are already preloaded as floats into the `CHANGE` dictionary for you to use!\n```\n```if:ruby\nThese amounts are already preloaded as floats into the `CHANGE` hash for you to use!\n```\n```if:javascript\nThese amounts are already preloaded as floats into the `CHANGE` object for you to use!\n```\n```if:php\nThese amounts are already preloaded as floats into the `CHANGE` (a constant) associative array for you to use!\n```\n\nYou should return the total in the format ```$x.xx```.\n\nWarning, some change may amount to over ```$10.00```!\n\"\"\"", "inputs": [["dime penny dollar"], ["dime penny nickel"], ["quarter quarter"], ["dollar penny dollar"], ["dollar dollar dollar dollar dollar dollar dollar dollar dollar dollar penny"]], "outputs": [["$1.11"], ["$0.16"], ["$0.50"], ["$2.01"], ["$10.01"]], "starter_code": "def change_count(change):", "canonical_solution": "def change_count(change):\n    money = {'penny': 0.01, 'nickel': 0.05, 'dime': 0.1, 'quarter': 0.25, 'dollar': 1.0}\n    count = 0\n    for coin in change.split():\n        count += money[coin]\n    result = '%.2f' % count\n    return '$' + result", "entry_point": "change_count", "task_id": "TACO_lite/447", "input_output_examples": [[["testcase"]], [["tabtbvba"]]]}
{"requirement": "def draw(waves):\"\"\"# # Task:\n  * #### Complete the pattern, using the special character ```■   □```\n  * #### In this kata, we draw some histogram of the sound performance of ups and downs.\n\n# # Rules:\n  -  parameter ```waves```  The value of sound waves, an array of number, all number in array >=0.\n  -  return a string, ```■``` represents the sound waves, and ```□``` represents the blank part, draw the histogram from bottom to top.\n\"\"\"", "inputs": [[[1, 2, 3, 4]], [[1, 2, 3, 3, 2, 1]], [[1, 2, 3, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7]], [[5, 3, 1, 2, 4, 6, 5, 4, 2, 3, 5, 2, 1]], [[1, 0, 1, 0, 1, 0, 1, 0]]], "outputs": [["□□□■\n□□■■\n□■■■\n■■■■"], ["□□■■□□\n□■■■■□\n■■■■■■"], ["□□□□□□□□□□□□■\n□□□□□□□□□□□■■\n□□□□□□□□□□■■■\n□□□□□□□□□■■■■\n□□■■□□□□■■■■■\n□■■■■□□■■■■■■\n■■■■■■■■■■■■■"], ["□□□□□■□□□□□□□\n■□□□□■■□□□■□□\n■□□□■■■■□□■□□\n■■□□■■■■□■■□□\n■■□■■■■■■■■■□\n■■■■■■■■■■■■■"], ["■□■□■□■□"]], "starter_code": "def draw(waves):", "canonical_solution": "def draw(waves):\n    m = max(waves)\n    rotHist = [('■' * v).rjust(m, '□') for v in waves]\n    return '\\n'.join(map(''.join, zip(*rotHist)))", "entry_point": "draw", "task_id": "TACO_lite/449", "input_output_examples": [[[1, 1]], [[3]]]}
{"requirement": "def add(a, b):\"\"\"\n##Task:\nYou have to write a function `add` which takes two binary numbers as strings and returns their sum as a string.\n\n##Note:\n* You are `not allowed to convert binary to decimal & vice versa`.\n* The sum should contain `No leading zeroes`.\n\"\"\"", "inputs": [["111", "10"], ["1101", "101"], ["1101", "10111"], ["10111", "001010101"], ["00", "0"]], "outputs": [["1001"], ["10010"], ["100100"], ["1101100"], ["0"]], "starter_code": "def add(a, b):", "canonical_solution": "def binary_string_to_int(string):\n    return sum(((d == '1') * 2 ** i for i, d in enumerate(string[::-1])))\n\ndef add(a, b):\n    return '{:b}'.format(binary_string_to_int(a) + binary_string_to_int(b))", "entry_point": "add", "task_id": "TACO_lite/450", "input_output_examples": [[["test"], ["tEst"], ["    "], []], [[{"vowels": 1, "consonants": 3}], [{"vowels": 1, "consonants": 3}], [{"vowels": 0, "consonants": 0}], [{"vowels": 0, "consonants": 0}]]]}
{"requirement": "def per(n):\"\"\"*Based on this Numberphile video: https://www.youtube.com/watch?v=Wim9WJeDTHQ*\n\n---\n\nMultiply all the digits of a nonnegative integer `n` by each other, repeating with the product until a single digit is obtained. The number of steps required is known as the **multiplicative persistence**.\n\nCreate a function that calculates the individual results of each step, not including the original number, but including the single digit, and outputs the result as a list/array. If the input is a single digit, return an empty list/array.\n\"\"\"", "inputs": [[1234567890], [123456789], [12345678], [1234567], [123456], [12345], [2379], [777], [25], [277777788888899], [3778888999]], "outputs": [[[0]], [[362880, 0]], [[40320, 0]], [[5040, 0]], [[720, 0]], [[120, 0]], [[378, 168, 48, 32, 6]], [[343, 36, 18, 8]], [[10, 0]], [[4996238671872, 438939648, 4478976, 338688, 27648, 2688, 768, 336, 54, 20, 0]], [[438939648, 4478976, 338688, 27648, 2688, 768, 336, 54, 20, 0]]], "starter_code": "def per(n):", "canonical_solution": "def per(n):\n    r = []\n    while n >= 10:\n        p = 1\n        for i in str(n):\n            p = p * int(i)\n        r.append(p)\n        n = p\n    return r", "entry_point": "per", "task_id": "TACO_lite/454", "input_output_examples": [[["test", 7], ["hello world", 7], ["a lot of words for a single line", 10], ["this is a test", 4], ["a longword", 6], ["areallylongword", 6]], [["test"], ["hello--world"], ["a lot of--words for--a single--line"], ["this--is a--test"], ["a long--word"], ["areall--ylongw--ord"]]]}
{"requirement": "def has_unique_chars(s):\"\"\"\nWrite a program to determine if a string contains only unique characters.\nReturn true if it does and false otherwise.\n\nThe string may contain any of the 128 ASCII characters.\nCharacters are case-sensitive, e.g. 'a' and 'A' are considered different characters.\n\"\"\"", "inputs": [["  nAa"], ["abcdef"], ["++-"]], "outputs": [[false], [true], [false]], "starter_code": "def has_unique_chars(s):", "canonical_solution": "def has_unique_chars(s):\n    return len(s) == len(set(s))", "entry_point": "has_unique_chars", "task_id": "TACO_lite/459", "input_output_examples": [[[["abracadabra", "allottee", "assessee"]], [["kelless", "keenness"]], [["ccooddddddewwwaaaaarrrrsssss", "piccaninny", "hubbubbubboo"]]], [["abracadabra", "alote", "asese"], ["keles", "kenes"], ["codewars", "picaniny", "hubububo"]]]}
{"requirement": "def convert_num(number, base):\"\"\"\nPoor Cade has got his number conversions mixed up again!\n\nFix his ```convert_num()``` function so it correctly converts a base-10 ```int```eger, \nto the selected of ```bin```ary or ```hex```adecimal.\n\n```#The output should be a string at all times```\n\nPlease note, invalid ```number``` or ```base``` inputs will be tested.\nIn the event of an invalid ```number/base``` you should return:\n```python\n\"Invalid number input\"\nor\n\"Invalid base input\"\n```\nFor each respectively.\n\nGood luck coding! :D\n\"\"\"", "inputs": [[122, "bin"], ["dog", "bin"], [0, "hex"], [123, "lol"]], "outputs": [["0b1111010"], ["Invalid number input"], ["0x0"], ["Invalid base input"]], "starter_code": "def convert_num(number, base):", "canonical_solution": "def convert_num(number, base):\n    try:\n        if base == 'hex':\n            return hex(number)\n        if base == 'bin':\n            return bin(number)\n    except:\n        return 'Invalid number input'\n    return 'Invalid base input'", "entry_point": "convert_num", "task_id": "TACO_lite/462", "input_output_examples": [[[1, 2, 2]], [[true]]]}
{"requirement": "def share_price(invested, changes):\"\"\"Share price\n===========\n\nYou spent all your saved money to buy some shares.\n\nYou bought it for `invested`, and want to know how much it's worth, but all the info you can quickly get are just the change the shares price made in percentages.\n\nYour task:\n----------\nWrite the function `sharePrice()` that calculates, and returns the current price of your share, given the following two arguments:\n\n- `invested`(number), the amount of money you initially invested in the given share\n\n- `changes`(array of numbers), contains your shares daily movement percentages\n\nThe returned number, should be in string format, and it's precision should be fixed at 2 decimal numbers.\n\nHave fun!\n\n>**Hint:** Try to write the function in a functional manner!\n\"\"\"", "inputs": [[100, []], [100, [-50, 50]], [100, [-50, 100]], [100, [-20, 30]], [1000, [0, 2, 3, 6]]], "outputs": [["100.00"], ["75.00"], ["100.00"], ["104.00"], ["1113.64"]], "starter_code": "def share_price(invested, changes):", "canonical_solution": "def share_price(invested, changes):\n    for change in changes:\n        invested = invested * (100 + change) / 100.0\n    return format(invested, '.2f')", "entry_point": "share_price", "task_id": "TACO_lite/465", "input_output_examples": [[[10, 60]], [[600]]]}
{"requirement": "def format_poem(poem):\"\"\"\nWrite a function, `format_poem()` that takes a string like the one line example as an argument and returns a new string that is formatted across multiple lines with each new sentence starting on a new line when you print it out.\n\nTry to solve this challenge with the [str.split()](https://docs.python.org/3/library/stdtypes.html#str.split) and the [str.join()](https://docs.python.org/3/library/stdtypes.html#str.join) string methods.\n\nEvery sentence will end with a period, and every new sentence will have one space before the previous period. Be careful about trailing whitespace in your solution.\n\"\"\"", "inputs": [["Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated."], ["Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules."], ["Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess."], ["There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now."], ["If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!"]], "outputs": [["Beautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated."], ["Flat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules."], ["Although practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess."], ["There should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now."], ["If the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!"]], "starter_code": "def format_poem(poem):", "canonical_solution": "def format_poem(poem):\n    return '.\\n'.join(poem.split('. '))", "entry_point": "format_poem", "task_id": "TACO_lite/469", "input_output_examples": [[["Hello World!"]], [["Hello World"]]]}
{"requirement": "def encrypt(text, key):\"\"\"\n### Background\nIn classical cryptography, the Hill cipher is a polygraphic substitution cipher based on linear algebra. It was invented by Lester S. Hill in 1929.\n\n\n\n### Task\n\n\nThis cipher involves a text key which has to be turned into a matrix and text which needs to be encoded. The text key can be of any perfect square length but for the sake of this kata we will focus on keys of length 4 forming a 2x2 matrix.\n\nTo encrypt a message using the hill cipher, first of all you need to convert the text key into a key matrix. To do that you will convert the key row wise into a 2x2 matrix. Then you will substitute the letters with their respective positions on the alphabet: A=0, B=1,C=2 and so on till Z=25. \n\nNow the next step is to break the text into pairs of two and convert those pairs into 2x1 matrices. If your text has an odd number of letters then just add a Z next to your last letter. Now again convert those letters into their respective position in the alphabet as above. \n\nNow we need to [multiply](https://www.mathsisfun.com/algebra/matrix-multiplying.html) the key matrix by the text matrix to get our encrypted matrix and then find out the encrypted matrix [modulo](https://en.wikipedia.org/wiki/Modulo_operation) 26:\n\nFor the final step we just find out the letters at the alphabet position of the resulting numbers from the modulo operation. \n\nIn this kata you will be given a function named ```encrypt``` with the parameters ```text``` and ```key``` and you have to return the encrypted message in all uppercase letters\n\nNote:\n- The text to encrypt will contain characters other than the alphabets, its your job to clean them before converting text to matrices. Spaces also need to be removed\n- The text may contain both uppercase and lowercase alphabets. Its your job to standardize them, the encrypted text however should be returned in uppercase letters.\n- The key will always contain 4 lowercase alphabet.\n\"\"\"", "inputs": [["", "azyb"], ["hello", "hill"], ["This is a good day", "bbaa"], ["CODEWARS IS GREAT", "wxyz"], ["Five + Seven = Twelve", "math"], ["+-*/ &*%^$", "azyb"]], "outputs": [[""], ["DRJIMN"], ["AAAAAAGACAGAYA"], ["CICQQIIASSDXKSFP"], ["IVSLIGSLAQEECSWR"], [""]], "starter_code": "def encrypt(text, key):", "canonical_solution": "import numpy as np\nfrom itertools import zip_longest\nfrom string import ascii_lowercase as lower, ascii_uppercase as upper\nD = {c: i % 26 for i, c in enumerate(lower + upper)}\n\ndef encrypt(text, key):\n    result = []\n    text = ''.join(filter(str.isalpha, text))\n    key = np.array(([D[key[0]], D[key[1]]], [D[key[2]], D[key[3]]]))\n    for c1, c2 in zip_longest(text[::2], text[1::2], fillvalue='Z'):\n        x, y = key @ ([D[c1]], [D[c2]])\n        result.append(upper[x[0] % 26] + upper[y[0] % 26])\n    return ''.join(result)", "entry_point": "encrypt", "task_id": "TACO_lite/470", "input_output_examples": [[[1], [7], [12], [86]], [[2], [9], [15], [100]]]}
{"requirement": "def palindrome_chain_length(n):\"\"\"\nNumber is a palindrome if it is equal to the number with digits in reversed order.\n\nWrite a method `palindrome_chain_length` which takes a positive number and returns the number of special steps needed to obtain a palindrome. The special step is: \"reverse the digits, and add to the original number\". If the resulting number is not a  palindrome, repeat the procedure with the sum until the resulting number is a palindrome.\n\nIf the input number is already a palindrome, the number of steps is 0.\n\nInput will always be a positive integer.\n\"\"\"", "inputs": [[87], [1], [88], [89], [10]], "outputs": [[4], [0], [0], [24], [1]], "starter_code": "def palindrome_chain_length(n):", "canonical_solution": "def palindrome_chain_length(n):\n    steps = 0\n    while str(n) != str(n)[::-1]:\n        n = n + int(str(n)[::-1])\n        steps += 1\n    return steps", "entry_point": "palindrome_chain_length", "task_id": "TACO_lite/473", "input_output_examples": [[[[4, 2, 2, 3, 3, 4, 2]]], [[4900]]]}
{"requirement": "def multiply(n, k):\"\"\"\n## Task\n\nGiven a positive integer, `n`, return the number of possible ways such that `k` positive integers multiply to `n`. Order matters.\n\n**Constraints**\n`1 <= n <= 500_000_000`\nand `1 <= k <= 1000`\n\"\"\"", "inputs": [[24, 2], [100, 1], [20, 3], [1, 2], [1000000, 3], [10, 2], [36, 4]], "outputs": [[8], [1], [18], [1], [784], [4], [100]], "starter_code": "def multiply(n, k):", "canonical_solution": "from scipy.special import comb\n\ndef multiply(n, k):\n    r, d = (1, 2)\n    while d * d <= n:\n        i = 0\n        while n % d == 0:\n            i += 1\n            n //= d\n        r *= comb(i + k - 1, k - 1, exact=True)\n        d += 1\n    if n > 1:\n        r *= k\n    return r", "entry_point": "multiply", "task_id": "TACO_lite/481", "input_output_examples": [[["This is a test!", 1], ["This is a test!", 2], ["", 5], ["abc", 0]], [["hsi  etTi sats!"], ["s eT ashi tist!"], [""], ["abc"]]]}
{"requirement": "def jumping_number(number):\"\"\"# Definition\n\n**_Jumping number_** is the number that *All adjacent digits in it differ by 1*.\n\n____\n\n# Task\n\n**_Given_** a number, **_Find if it is Jumping or not_** . \n____\n\n# Warm-up (Highly recommended)\n\n# [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n___\n\n# Notes \n\n* **_Number_** *passed is always*  **_Positive_** .\n\n* **_Return_** *the result as* **_String_** . \n\n* **_The difference between_** *‘9’ and ‘0’* is **_not considered as 1_** . \n\n* **_All single digit numbers_** are considered as **_Jumping numbers_**. \n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[1], [7], [9], [23], [32], [79], [98], [987654322]], "outputs": [["Jumping!!"], ["Jumping!!"], ["Jumping!!"], ["Jumping!!"], ["Jumping!!"], ["Not!!"], ["Jumping!!"], ["Not!!"]], "starter_code": "def jumping_number(number):", "canonical_solution": "def jumping_number(number):\n    arr = list(map(int, str(number)))\n    return ('Not!!', 'Jumping!!')[all(map(lambda a, b: abs(a - b) == 1, arr, arr[1:]))]", "entry_point": "jumping_number", "task_id": "TACO_lite/482", "input_output_examples": [[[[3, 9, 1, 11, 13, 5]]], [[7]]]}
{"requirement": "def sumdig_nthterm(initVal, patternL, nthTerm):\"\"\"\nWe have the first value of a certain sequence, we will name it ```initVal```.\nWe define  pattern list, ```patternL```, an array that has the differences between contiguous terms of the sequence.\n``` E.g: patternL = [k1, k2, k3, k4]``` \n\nThe terms of the sequence will be such values that:\n```python\nterm1 = initVal\nterm2 - term1 = k1\nterm3 - term2 = k2\nterm4 - term3 = k3\nterm5 - term4 = k4\nterm6 - term5 = k1\nterm7 - term6 = k2\nterm8 - term7 = k3\nterm9 - term8 = k4\n....  - ..... = ...\n....  - ..... = ...\n ``` \nSo the values of the differences between contiguous terms are cyclical and are  repeated as the differences values of the pattern list stablishes.\n\nMake a function ```sumdig_nthterm()```, that receives three arguments in this order \n\n ```sumdig_nthterm(initVal, patternL, nthTerm(ordinal number of the term in the sequence)) ```\n\nThis function will output the sum of the digits of the n-th term of the sequence.\n\nEnjoy it and happy coding!!\n\"\"\"", "inputs": [[10, [2, 1, 3], 6], [10, [2, 1, 3], 15], [10, [2, 1, 3], 50], [10, [2, 1, 3], 78], [10, [2, 1, 3], 157], [10, [2, 2, 5, 8], 6], [10, [2, 2, 5, 8], 15], [10, [2, 2, 5, 8], 50], [10, [2, 2, 5, 8], 78], [10, [2, 2, 5, 8], 157], [100, [2, 2, 5, 8], 6], [100, [2, 2, 5, 8], 15], [100, [2, 2, 5, 8], 50], [100, [2, 2, 5, 8], 78], [100, [2, 2, 5, 8], 157], [1000, [2, 2, 5, 8], 2550], [1000, [2, 2, 5, 8], 25500]], "outputs": [[10], [10], [9], [10], [7], [11], [11], [9], [11], [16], [11], [11], [9], [11], [16], [14], [26]], "starter_code": "def sumdig_nthterm(initVal, patternL, nthTerm):", "canonical_solution": "from itertools import cycle\n\ndef sumdig_nthterm(initVal, patternL, nthTerm):\n    for c, i in enumerate(cycle(patternL), 2):\n        initVal += i\n        if c == nthTerm:\n            return sum((int(v) for v in str(initVal)))", "entry_point": "sumdig_nthterm", "task_id": "TACO_lite/483", "input_output_examples": [[["ACGTGGGGACTAGGGG", "GGGG"], ["ACCGTACCAAGGGACC", "AAT"], ["GGG", "GG"], ["TTCCGGAACC", "CC"]], [[5, 13], [], [1, 2], [3, 9]]]}
{"requirement": "def valid_card(card):\"\"\"\nWrite a function that checks whether a credit card number is correct or not, using the Luhn algorithm.\n\nThe algorithm is as follows:\n\n* From the rightmost digit, which is the check digit, moving left, double the value of every second digit; if the product of this doubling operation is greater than 9 (e.g., 8 × 2 = 16), then sum the digits of the products (e.g., 16: 1 + 6 = 7, 18: 1 + 8 = 9) or alternatively subtract 9 from the product (e.g., 16: 16 - 9 = 7, 18: 18 - 9 = 9).\n* Take the sum of all the digits.\n* If the total modulo 10 is equal to 0 (if the total ends in zero) then the number is valid according to the Luhn formula; else it is not valid.\n\nThe input is a string with the full credit card number, in groups of 4 digits separated by spaces, i.e. \"1234 5678 9012 3456\"  \nDon´t worry about wrong inputs, they will always be a string with 4 groups of 4 digits each separated by space.\n\nfor reference check: https://en.wikipedia.org/wiki/Luhn_algorithm\n\"\"\"", "inputs": [["5457 6238 9823 4311"], ["8895 6238 9323 4311"], ["5457 6238 5568 4311"], ["5457 6238 9323 4311"], ["2222 2222 2222 2224"], ["5457 1125 9323 4311"], ["1252 6238 9323 4311"], ["9999 9999 9999 9995"], ["0000 0300 0000 0000"], ["4444 4444 4444 4448"], ["5457 6238 9323 1252"], ["5457 6238 1251 4311"], ["3333 3333 3333 3331"], ["6666 6666 6666 6664"], ["5457 6238 0254 4311"], ["0000 0000 0000 0000"], ["5457 1111 9323 4311"], ["1145 6238 9323 4311"], ["8888 8888 8888 8888"], ["0025 2521 9323 4311"], ["1111 1111 1111 1117"], ["1234 5678 9012 3452"], ["5458 4444 9323 4311"], ["5457 6238 3333 4311"], ["0123 4567 8901 2345"], ["5555 5555 5555 5557"]], "outputs": [[true], [false], [false], [false], [true], [false], [false], [true], [false], [true], [false], [false], [true], [true], [false], [true], [false], [false], [true], [false], [true], [true], [false], [false], [false], [true]], "starter_code": "def valid_card(card):", "canonical_solution": "def valid_card(card):\n    s = list(map(int, str(card.replace(' ', ''))))\n    s[0::2] = [d * 2 - 9 if d * 2 > 9 else d * 2 for d in s[0::2]]\n    return sum(s) % 10 == 0", "entry_point": "valid_card", "task_id": "TACO_lite/487", "input_output_examples": [[[4, [0, 2, 4, 4], [3, 5, 2, 0]]], [[6]]]}
{"requirement": "def rounding(n, m):\"\"\"# Task\n Round the given number `n` to the nearest multiple of `m`.\n\n If `n` is exactly in the middle of 2 multiples of m, return `n` instead.\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n `1 ≤ n < 10^9.`\n\n\n - `[input]` integer `m`\n\n `3 ≤ m < 109`.\n\n\n - `[output]` an integer\n\"\"\"", "inputs": [[20, 3], [19, 3], [1, 10], [50, 100], [123, 456]], "outputs": [[21], [18], [0], [50], [0]], "starter_code": "def rounding(n, m):", "canonical_solution": "def rounding(n, m):\n    return n if n % m == m / 2 else m * round(n / m)", "entry_point": "rounding", "task_id": "TACO_lite/488", "input_output_examples": [[[13]], [[1, 3, 6, 13]]]}
{"requirement": "def extra_perfect(n):\"\"\"# Definition\n\n**_Extra perfect number_** *is the number that* **_first_** and **_last_** *bits* are **_set bits_**.\n\n____\n\n# Task\n\n**_Given_**  *a positive integer*   `N` ,  **_Return_** the **_extra perfect numbers_** *in range from*  `1`  to  `N` .\n____\n\n# Warm-up (Highly recommended)\n\n# [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n___\n\n# Notes \n\n\n* **_Number_** *passed is always*  **_Positive_** .\n\n* **_Returned array/list_** should *contain the extra perfect numbers in ascending order*  **from lowest to highest**\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[3], [5], [7], [28], [39]], "outputs": [[[1, 3]], [[1, 3, 5]], [[1, 3, 5, 7]], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]]], "starter_code": "def extra_perfect(n):", "canonical_solution": "def extra_perfect(n):\n    return list(range(1, n + 1, 2))", "entry_point": "extra_perfect", "task_id": "TACO_lite/489", "input_output_examples": [[[1, 1, 2], [2, 4, 3]], [[5], [47]]]}
{"requirement": "def sum_even_numbers(seq):\"\"\"# Task\n\nWrite a function named `sumEvenNumbers`, taking a sequence of numbers as single parameter. Your function must return the sum of **the even values** of this sequence.\n\nOnly numbers without decimals like `4` or `4.0` can be even. \n\n## Input\n* sequence of numbers: those numbers could be integers and/or floats. \n\"\"\"", "inputs": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[]], [[1337, 374, 849, 22.5, 19, 16, 0, 0, 16, 32]], [[-16, -32, 20, 21, 41, 42]], [[15397, 12422, 10495, 22729, 23921, 18326, 27955, 24073, 23690, 15002, 11615, 15682, 24346, 16725, 17252, 20467, 20493, 17807, 13041, 25861, 22471, 22747, 24082, 18979, 28543, 26488, 10002, 24740, 17950, 26573, 25851, 19446, 22584, 14857, 17387, 29310, 28265, 19497, 11394, 28111, 20957, 17201, 26647, 26885, 27297, 17252, 25961, 12409, 22858, 27869, 19832, 13906, 11256, 11304, 24186, 28783, 16647, 23073, 11105, 13327, 17102, 10172, 21104, 23001, 24108, 16166, 21690, 14218, 11903, 10286, 19116, 18585, 25511, 18273, 11862, 17166, 13456, 28562, 16262, 11100, 22806, 14748, 17362, 11633, 17165, 16390, 24580, 22498, 26121, 16170, 18917, 26963, 17605, 20839, 22487, 12187, 23752, 12444, 14392, 28313]]], "outputs": [[30], [0], [438], [14], [870822]], "starter_code": "def sum_even_numbers(seq):", "canonical_solution": "def sum_even_numbers(seq):\n    return sum((n for n in seq if not n % 2))", "entry_point": "sum_even_numbers", "task_id": "TACO_lite/493", "input_output_examples": [[[3, 3], [2, 2]], [[[1, 2, 3], [2, 4, 6], [3, 6, 9]], [[1, 2], [2, 4]]]]}
{"requirement": "def get_issuer(number):\"\"\"\nGiven a credit card number we can determine who the issuer/vendor is with a few basic knowns.\n\n```if:python\nComplete the function `get_issuer()` that will use the values shown below to determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`.\n```\n```if-not:python\nComplete the function `getIssuer()` that will use the values shown below to determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`.\n```\n```if:typescript\nWhere `Issuer` is defined with the following enum type.\n~~~typescript\nenum Issuer {\n  VISA = 'VISA',\n  AMEX = 'AMEX',\n  Mastercard = 'Mastercard',\n  Discover = 'Discover',\n  Unknown = 'Unknown',\n}\n~~~\n```\n\n```markdown\n| Card Type  | Begins With          | Number Length |\n|------------|----------------------|---------------|\n| AMEX       | 34 or 37             | 15            |\n| Discover   | 6011                 | 16            |\n| Mastercard | 51, 52, 53, 54 or 55 | 16            |\n| VISA       | 4                    | 13 or 16      |\n```\n\n```if:c,cpp\n**C/C++ note:** The return value in C is not freed.\n```\n\"\"\"", "inputs": [[4111111111111111], [4111111111111], [4012888888881881], [41111111111111], [411111111111111], [378282246310005], [348282246310005], [6011111111111117], [5105105105105100], [5105105105105106], [5205105105105106], [5305105105105106], [5405105105105106], [5505105105105106], [9111111111111111], [5605105105105106]], "outputs": [["VISA"], ["VISA"], ["VISA"], ["Unknown"], ["Unknown"], ["AMEX"], ["AMEX"], ["Discover"], ["Mastercard"], ["Mastercard"], ["Mastercard"], ["Mastercard"], ["Mastercard"], ["Mastercard"], ["Unknown"], ["Unknown"]], "starter_code": "def get_issuer(number):", "canonical_solution": "def get_issuer(number):\n    s = str(number)\n    return 'AMEX' if len(s) == 15 and s[:2] in ('34', '37') else 'Discover' if len(s) == 16 and s.startswith('6011') else 'Mastercard' if len(s) == 16 and s[0] == '5' and (s[1] in '12345') else 'VISA' if len(s) in [13, 16] and s[0] == '4' else 'Unknown'", "entry_point": "get_issuer", "task_id": "TACO_lite/496", "input_output_examples": [[[[6, 2, 4, 2, 2, 2, 1, 5, 0, 0]]], [[true]]]}
{"requirement": "def day_and_time(mins):\"\"\"\nWrite a function that takes a negative or positive integer, which represents the number of minutes before (-) or after (+) Sunday midnight, and returns the current day of the week and the current time in 24hr format ('hh:mm') as a string.\n\"\"\"", "inputs": [[0], [-3], [45], [759], [1236], [1447], [7832], [18876], [259180], [-349000]], "outputs": [["Sunday 00:00"], ["Saturday 23:57"], ["Sunday 00:45"], ["Sunday 12:39"], ["Sunday 20:36"], ["Monday 00:07"], ["Friday 10:32"], ["Saturday 02:36"], ["Thursday 23:40"], ["Tuesday 15:20"]], "starter_code": "def day_and_time(mins):", "canonical_solution": "from datetime import timedelta, datetime\n\ndef day_and_time(mins):\n    return '{:%A %H:%M}'.format(datetime(2017, 1, 1) + timedelta(minutes=mins))", "entry_point": "day_and_time", "task_id": "TACO_lite/498", "input_output_examples": [[["redlionfish"], ["pufferfish"]], [[12], [1]]]}
{"requirement": "def next_happy_year(year):\"\"\"# Scenario \n\n*You're saying good-bye your best friend* , **_See you next happy year_** . \n\n**_Happy Year_** *is the year with only distinct digits* , \n\n___\n# Task\n\n**_Given_** a year, **_Find_** **_The next happy year_** or **_The closest year You'll see your best friend_**      ![!alt](https://i.imgur.com/mdX8dJP.png) ![!alt](https://i.imgur.com/mdX8dJP.png)\n\n___\n# Notes\n\n* **_Year_** Of Course always **_Positive_** .\n* **_Have no fear_** , *It is guaranteed that the answer exists* . \n* **_It's not necessary_** *that the year passed to the function is Happy one* .   \n* **_Input Year with in range_** *(1000  ≤  y  ≤  9000)*\n\n____\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[1001], [1123], [2001], [2334], [3331], [1987], [5555], [7712], [8088], [8999]], "outputs": [[1023], [1203], [2013], [2340], [3401], [2013], [5601], [7801], [8091], [9012]], "starter_code": "def next_happy_year(year):", "canonical_solution": "def next_happy_year(year):\n    year += 1\n    while len(set(str(year))) != 4:\n        year += 1\n    return year", "entry_point": "next_happy_year", "task_id": "TACO_lite/500", "input_output_examples": [[[9, 8]], [[1]]]}
{"requirement": "def best_match(goals1, goals2):\"\"\"# Task\n \"AL-AHLY\" and \"Zamalek\" are the best teams in Egypt, but \"AL-AHLY\" always wins the matches between them. \"Zamalek\" managers want to know what is the best match they've played so far.\n \n The best match is the match they lost with the minimum goal difference. If there is more than one match with the same difference, choose the one \"Zamalek\" scored more goals in.\n \n Given the information about all matches they played, return the `index` of the best match (`0-based`). If more than one valid result, return the smallest index.\n\n# Input/Output\n\n\n -  `[input]` integer array `ALAHLYGoals`\n\n  The number of goals \"AL-AHLY\" scored in each match.\n\n\n - `[input]` integer array `zamalekGoals`\n\n  The number of goals \"Zamalek\" scored in each match. It is guaranteed that zamalekGoals[i] < ALAHLYGoals[i] for each element.\n\n\n - `[output]` an integer\n\n  Index of the best match.\n\"\"\"", "inputs": [[[6, 4], [1, 2]], [[1], [0]], [[1, 2, 3, 4, 5], [0, 1, 2, 3, 4]], [[3, 4, 3], [1, 1, 2]], [[4, 3, 4], [1, 1, 1]]], "outputs": [[1], [0], [4], [2], [1]], "starter_code": "def best_match(goals1, goals2):", "canonical_solution": "def best_match(goals1, goals2):\n    return min(((a - b, -b, i) for i, (a, b) in enumerate(zip(goals1, goals2))))[2]", "entry_point": "best_match", "task_id": "TACO_lite/502", "input_output_examples": [[[["allow", "lowering", "ringmaster", "terror"]], [["kingdom", "dominator", "notorious", "usual", "allegory"]]], [["lowringter"], ["failed to mesh"]]]}
{"requirement": "def matrix_mult(a, b):\"\"\"\nWrite a function that accepts two square (`NxN`) matrices (two dimensional arrays), and returns the product of the two. Only square matrices will be given.\n\nHow to multiply two square matrices: \n\nWe are given two matrices, A and B, of size 2x2 (note: tests are not limited to 2x2). Matrix C, the solution, will be equal to the product of A and B. To fill in cell `[0][0]` of matrix C, you need to compute: `A[0][0] * B[0][0] + A[0][1] * B[1][0]`.\n\nMore general: To fill in cell `[n][m]` of matrix C, you need to first multiply the elements in the nth row of matrix A by the elements in the mth column of matrix B, then take the sum of all those products. This will give you the value for cell `[m][n]` in matrix C. \n\nLink to Wikipedia explaining matrix multiplication (look at the square matrix example): \nhttp://en.wikipedia.org/wiki/Matrix_multiplication\n\nA more visual explanation of matrix multiplication: http://matrixmultiplication.xyz\n\n~~~if:c\n**Note:** In **C**, the dimensions of both square matrices `n` will be passed into your function.  However, since the dimensions of your returned \"matrix\" is expected to be the same as that of the inputs, you will not need to keep track of the dimensions of your matrix in another variable.\n~~~\n\"\"\"", "inputs": [[[[1, 2], [3, 2]], [[3, 2], [1, 1]]], [[[9, 7], [0, 1]], [[1, 1], [4, 12]]], [[[1, 2, 3], [3, 2, 1], [2, 1, 3]], [[4, 5, 6], [6, 5, 4], [4, 6, 5]]]], "outputs": [[[[5, 4], [11, 8]]], [[[37, 93], [4, 12]]], [[[28, 33, 29], [28, 31, 31], [26, 33, 31]]]], "starter_code": "def matrix_mult(a, b):", "canonical_solution": "from numpy import matrix\n\ndef matrix_mult(a, b):\n    return (matrix(a) * matrix(b)).tolist()", "entry_point": "matrix_mult", "task_id": "TACO_lite/504", "input_output_examples": [[[[1, 2, 5]]], [[50]]]}
{"requirement": "def penaltyshots(shots, score):\"\"\"\n# Task\nYou are a lifelong fan of your local football club, and proud to say you rarely miss a game. Even though you're a superfan, you still hate boring games. Luckily, boring games often end in a draw, at which point the winner is determined by a penalty shoot-out, which brings some excitement to the viewing experience. Once, in the middle of a penalty shoot-out, you decided to count the lowest total number of shots required to determine the winner. So, given the number of shots each team has already made and the current score, `how soon` can the game end?\n\nIf you are not familiar with penalty shoot-out rules, here they are:\n\n`Teams take turns to kick from the penalty mark until each has taken five kicks. However, if one side has scored more successful kicks than the other could possibly reach with all of its remaining kicks, the shoot-out immediately ends regardless of the number of kicks remaining.`\n\n`If at the end of these five rounds of kicks the teams have scored an equal number of successful kicks, additional rounds of one kick each will be used until the tie is broken.`\n\n\n# Input/Output\n\n\n`[input]` integer `shots`\n\nAn integer, the number of shots each team has made thus far.\n\n`0 ≤ shots ≤ 100.`\n\n`[input]` integer array `score`\n\nAn array of two integers, where score[0] is the current score of the first team and score[1] - of the second team.\n\n`score.length = 2,`\n\n`0 ≤ score[i] ≤ shots.`\n\n`[output]` an integer\n\nThe minimal possible total number of shots required to determine the winner.\n\"\"\"", "inputs": [[2, [1, 2]], [10, [10, 10]], [5, [5, 5]], [0, [0, 0]], [1, [0, 0]], [1, [0, 1]], [1, [1, 1]], [3, [3, 3]], [3, [1, 3]], [100, [100, 100]]], "outputs": [[3], [2], [2], [6], [5], [4], [5], [3], [1], [2]], "starter_code": "def penaltyshots(shots, score):", "canonical_solution": "def penaltyshots(shots, score):\n    return (2 if shots > 4 else 5 - shots + 1) - abs(score[0] - score[1])", "entry_point": "penaltyshots", "task_id": "TACO_lite/507", "input_output_examples": [[[1, 3.414], [42, " is the answer."]], [[4.414], [null]]]}
{"requirement": "def find_the_ball(start, swaps):\"\"\"The Shell Game\" involves cups upturned on a playing surface, with a ball placed underneath one of them.  The index of the cups are swapped around multiple times. After that the players will try to find which cup contains the ball.\n\nYour task is as follows.  Given the cup that the ball starts under, and list of swaps, return the location of the ball at the end.  Cups are given like array/list indices.\n\nThere aren't necessarily only three cups in this game, but there will be at least two.  You can assume all swaps are valid, and involve two distinct indices.\n\"\"\"", "inputs": [[5, []], [0, []], [9, []], [0, [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39], [39, 40], [40, 41], [41, 42], [42, 43], [43, 44], [44, 45], [45, 46], [46, 47], [47, 48], [48, 49], [49, 50], [50, 51], [51, 52], [52, 53], [53, 54], [54, 55], [55, 56], [56, 57], [57, 58], [58, 59], [59, 60], [60, 61], [61, 62], [62, 63], [63, 64], [64, 65], [65, 66], [66, 67], [67, 68], [68, 69], [69, 70], [70, 71], [71, 72], [72, 73], [73, 74], [74, 75], [75, 76], [76, 77], [77, 78], [78, 79], [79, 80], [80, 81], [81, 82], [82, 83], [83, 84], [84, 85], [85, 86], [86, 87], [87, 88], [88, 89], [89, 90], [90, 91], [91, 92], [92, 93], [93, 94], [94, 95], [95, 96], [96, 97], [97, 98], [98, 99], [99, 100], [100, 101]]], [0, [[1, 0], [2, 1], [3, 2], [4, 3], [5, 4], [6, 5], [7, 6], [8, 7], [9, 8], [10, 9], [11, 10], [12, 11], [13, 12], [14, 13], [15, 14], [16, 15], [17, 16], [18, 17], [19, 18], [20, 19], [21, 20], [22, 21], [23, 22], [24, 23], [25, 24], [26, 25], [27, 26], [28, 27], [29, 28], [30, 29], [31, 30], [32, 31], [33, 32], [34, 33], [35, 34], [36, 35], [37, 36], [38, 37], [39, 38], [40, 39], [41, 40], [42, 41], [43, 42], [44, 43], [45, 44], [46, 45], [47, 46], [48, 47], [49, 48], [50, 49], [51, 50], [52, 51], [53, 52], [54, 53], [55, 54], [56, 55], [57, 56], [58, 57], [59, 58], [60, 59], [61, 60], [62, 61], [63, 62], [64, 63], [65, 64], [66, 65], [67, 66], [68, 67], [69, 68], [70, 69], [71, 70], [72, 71], [73, 72], [74, 73], [75, 74], [76, 75], [77, 76], [78, 77], [79, 78], [80, 79], [81, 80], [82, 81], [83, 82], [84, 83], [85, 84], [86, 85], [87, 86], [88, 87], [89, 88], [90, 89], [91, 90], [92, 91], [93, 92], [94, 93], [95, 94], [96, 95], [97, 96], [98, 97], [99, 98], [100, 99], [101, 100]]]], "outputs": [[5], [0], [9], [101], [101]], "starter_code": "def find_the_ball(start, swaps):", "canonical_solution": "def find_the_ball(start, swaps):\n    pos = start\n    for a, b in swaps:\n        if a == pos:\n            pos = b\n        elif b == pos:\n            pos = a\n    return pos", "entry_point": "find_the_ball", "task_id": "TACO_lite/510", "input_output_examples": [[["love"]], [[775]]]}
{"requirement": "def strings_crossover(arr, result):\"\"\"\nDefine crossover operation over two equal-length strings A and B as follows:\n\n the result of that operation is a string of the same length as the input strings result[i] is chosen at random between A[i] and B[i]. \n \n Given array of strings `arr` and a string result, find for how many pairs of strings from `arr` the result of the crossover operation over them may be equal to result.\n\n Note that (A, B) and (B, A) are the same pair. Also note that the pair cannot include the same element of the array twice (however, if there are two equal elements in the array, they can form a pair).\n\n# Input/Output\n\n\n - `[input]` string array `arr`\n\n   A non-empty array of equal-length strings.\n\n   Constraints: `2 ≤ arr.length ≤ 10, 1 ≤ arr[i].length ≤ 10.`\n\n\n - `[input]` string `result`\n\n   A string of the same length as each of the arr elements.\n\n   Constraints: `result.length = arr[i].length.`\n\n\n - `[output]` an integer\n\"\"\"", "inputs": [[["abc", "aaa", "aba", "bab"], "bbb"], [["aacccc", "bbcccc"], "abdddd"], [["a", "b", "c", "d", "e"], "c"], [["aa", "ab", "ba"], "bb"], [["a", "b", "c", "d", "e"], "f"], [["aaa", "aaa"], "aaa"]], "outputs": [[2], [0], [4], [1], [0], [1]], "starter_code": "def strings_crossover(arr, result):", "canonical_solution": "from itertools import combinations\n\ndef strings_crossover(arr, result):\n    return sum((1 for s1, s2 in combinations(arr, 2) if all((r in (x, y) for x, y, r in zip(s1, s2, result)))))", "entry_point": "strings_crossover", "task_id": "TACO_lite/515", "input_output_examples": [[[5], [6], [7], [5000]], [[105], [168], [252], [62537505000]]]}
{"requirement": "def min_value(digits):\"\"\"\n# Task\n\n**_Given_** a **_list of digits_**, *return the **_smallest number_** that could be formed from these digits, using the digits only once (ignore duplicates).* \n___\n\n# Notes:\n\n* Only **_positive integers_** *will be passed to the function (> 0 ), no negatives or zeros.*\n\n___\n## [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [Bizarre Sorting-katas](https://www.codewars.com/collections/bizarre-sorting-katas)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[[1, 3, 1]], [[4, 7, 5, 7]], [[4, 8, 1, 4]], [[5, 7, 9, 5, 7]], [[6, 7, 8, 7, 6, 6]], [[5, 6, 9, 9, 7, 6, 4]], [[1, 9, 1, 3, 7, 4, 6, 6, 7]], [[3, 6, 5, 5, 9, 8, 7, 6, 3, 5, 9]]], "outputs": [[13], [457], [148], [579], [678], [45679], [134679], [356789]], "starter_code": "def min_value(digits):", "canonical_solution": "def min_value(digits):\n    return int(''.join(map(str, sorted(set(digits)))))", "entry_point": "min_value", "task_id": "TACO_lite/519", "input_output_examples": [[[32], [39]], [["32? That's just 20, in base 16!"], ["39? That's just 21, in base 19!"]]]}
{"requirement": "def champernowneDigit(n):\n\t\"\"\"\nHo ho! So you think you know integers, do you? Well then, young wizard, tell us what the Nth digit of the [Champernowne constant](https://en.wikipedia.org/wiki/Champernowne_constant) is!\n\nThe constant proceeds like this: `0.12345678910111213141516...`\n\nI hope you see the pattern!\n\nConjure a function that will accept an integer, `n`, and return the (one-indexed) `n`th digit of Champernowne's constant. Can you get it to run in _constant_ time?\n\nFor any invalid values, such as `0` and below, or non-integers, return... `NaN`!\n\nI hope (for your sake) that you've been practicing your mathemagical spells, because a naïve solution will _not_ be fast enough to compete in this championship!\n\nInvoke with _precision_, and be wary of rounding errors in the realms of enormity!\n\nMay the best integer win!\n\"\"\"", "inputs": [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [20], [35], [36], [37], [100], [101], [102], [103], [104], [105], [190], [2890], [38890], [488890], [5888890], [3678608], [3678609], [3678610], [3678611], [3678612], [3678613], [3678614], [3897249], [3897189], [3897309], [3897369], [3898749], [3898809], [3898869], [3898929], [3898989], [3899049], [3899109], [999999999], [1000599563], [1000599564], [1000599565], [1000599566], [1000599567], [1000599568], [101800813569], [77199254740991], [501337501337101]], "outputs": [[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [1], [0], [4], [2], [2], [2], [4], [5], [5], [5], [6], [5], [9], [9], [9], [9], [9], [6], [1], [9], [6], [3], [1], [6], [5], [4], [6], [7], [0], [1], [2], [3], [4], [5], [6], [8], [1], [2], [3], [5], [2], [3], [6], [7], [3]], "starter_code": "def champernowneDigit(n):\n\t", "canonical_solution": "def champernowne_digit(n):\n    if not type(n) is int or n < 1:\n        return float('NaN')\n    i, l = (1, 11)\n    while l <= n:\n        i, l = (i + 1, l + 9 * (i + 1) * 10 ** i)\n    return (n - l) // (i * 10 ** (i - 1 - (n - l) % i)) % 10\nchampernownedigit = champernowne_digit", "entry_point": "champernownedigit", "task_id": "TACO_lite/521", "input_output_examples": [[[1, 25]], [[4]]]}
{"requirement": "def warn_the_sheep(queue):\"\"\"# A wolf in sheep's clothing\n\nWolves have been reintroduced to Great Britain. You are a sheep farmer, and are now plagued by wolves which pretend to be sheep. Fortunately, you are good at spotting them. \n\nWarn the sheep in front of the wolf that it is about to be eaten. Remember that you are standing **at the front of the queue** which is at the end of the array:\n\n```\n[sheep, sheep, sheep, sheep, sheep, wolf, sheep, sheep]      (YOU ARE HERE AT THE FRONT OF THE QUEUE)\n   7      6      5      4      3            2      1\n```\n\nIf the wolf is the closest animal to you, return `\"Pls go away and stop eating my sheep\"`. Otherwise, return `\"Oi! Sheep number N! You are about to be eaten by a wolf!\"` where `N` is the sheep's position in the queue.\n\n**Note:** there will always be exactly one wolf in the array.\n\"\"\"", "inputs": [[["sheep", "sheep", "sheep", "sheep", "sheep", "wolf", "sheep", "sheep"]], [["sheep", "wolf", "sheep", "sheep", "sheep", "sheep", "sheep"]], [["wolf", "sheep", "sheep", "sheep", "sheep", "sheep", "sheep"]], [["sheep", "wolf", "sheep"]], [["sheep", "sheep", "wolf"]]], "outputs": [["Oi! Sheep number 2! You are about to be eaten by a wolf!"], ["Oi! Sheep number 5! You are about to be eaten by a wolf!"], ["Oi! Sheep number 6! You are about to be eaten by a wolf!"], ["Oi! Sheep number 1! You are about to be eaten by a wolf!"], ["Pls go away and stop eating my sheep"]], "starter_code": "def warn_the_sheep(queue):", "canonical_solution": "def warn_the_sheep(queue):\n    n = len(queue) - queue.index('wolf') - 1\n    return f'Oi! Sheep number {n}! You are about to be eaten by a wolf!' if n else 'Pls go away and stop eating my sheep'", "entry_point": "warn_the_sheep", "task_id": "TACO_lite/522", "input_output_examples": [[[[[1, 2], [0, 3], [0, 3], [1, 2, 4], [3]]], [[], []]], [[false], [false]]]}
{"requirement": "def starts_with(st, prefix):\n\t\"\"\"\nGiven two null-terminated strings in the arguments \"string\" and \"prefix\", determine if \"string\" starts with the \"prefix\" string. Return 1 (or any other \"truthy\" value) if true, 0 if false.\n\nAddendum:\nFor this problem, an empty \"prefix\" string should always return 1 (true) for any value of \"string\".\n\nIf the length of the \"prefix\" string is greater than the length of the \"string\", return 0.\n\nThe check should be case-sensitive, i.e. startsWith(\"hello\", \"HE\") should return 0, whereas startsWith(\"hello\", \"he\") should return 1.\n\nThe length of the \"string\" as well as the \"prefix\" can be defined by the formula: 0 <= length < +Infinity\n\nNo characters should be ignored and/or omitted during the test, e.g. whitespace characters should not be ignored.\n\"\"\"", "inputs": [["hello world!", "hello"], ["hello world!", "HELLO"], ["nowai", "nowaisir"], ["", ""], ["abc", ""], ["", "abc"]], "outputs": [[true], [false], [false], [true], [true], [false]], "starter_code": "def starts_with(st, prefix):\n\t", "canonical_solution": "starts_with = str.startswith", "entry_point": "starts_with", "task_id": "TACO_lite/526", "input_output_examples": [[[4], [15], [0]], [[7], [10], [0]]]}
{"requirement": "def triangle_type(a, b, c):\"\"\"\nIn this kata, you should calculate type of triangle with three given sides ``a``, ``b`` and ``c`` (given in any order).\n\nIf all angles are less than ``90°``, this triangle is ``acute`` and function should return ``1``.\n\nIf one angle is strictly ``90°``, this triangle is ``right`` and function should return ``2``.\n\nIf one angle more than ``90°``, this triangle is ``obtuse`` and function should return ``3``.\n\nIf three sides cannot form triangle, or one angle is ``180°`` (which turns triangle into segment) - function should return ``0``.\n\nInput parameters are ``sides`` of given triangle. All input values are non-negative floating point or integer numbers (or both).\n\n\nIf you stuck, this can help you: http://en.wikipedia.org/wiki/Law_of_cosines. But you can solve this kata even without angle calculation.\n\nThere is very small chance of random test to fail due to round-off error, in such case resubmit your solution.\n\"\"\"", "inputs": [[1, 2, 3], [5.5, 4.5, 10], [7, 3, 2], [5, 10, 5], [3, 3, 0], [3, 3, 1], [5, 5, 5], [122.14, 222.11, 250], [8, 5, 7], [100000, 100005, 111111], [3, 4, 5], [21, 220, 221], [8.625, 33.625, 32.5], [65, 56, 33], [68000, 285000, 293000], [2, 4, 5], [105, 100, 6], [102, 200, 250], [65, 55, 33], [7, 8, 12], [7.99999, 4, 4]], "outputs": [[0], [0], [0], [0], [0], [1], [1], [1], [1], [1], [2], [2], [2], [2], [2], [3], [3], [3], [3], [3], [3]], "starter_code": "def triangle_type(a, b, c):", "canonical_solution": "def triangle_type(a, b, c):\n    x, y, z = sorted([a, b, c])\n    if z >= x + y:\n        return 0\n    if z * z == x * x + y * y:\n        return 2\n    return 1 if z * z < x * x + y * y else 3", "entry_point": "triangle_type", "task_id": "TACO_lite/527", "input_output_examples": [[[["24", "12", "23", "22", "4", "26", "9", "8"]]], [["codewars"]]]}
{"requirement": "def convert_to_mixed_numeral(parm):\"\"\"In Math, an improper fraction is a fraction where the numerator (the top number) is greater than or equal to the denominator (the bottom number).\n\nA mixed numeral is a whole number and a fraction combined into one \"mixed\" number.\n\n## Task\n\nWrite a function `convertToMixedNumeral` to convert the improper fraction into a mixed numeral.\n\nThe input will be given as a ```string``` (e.g. ```'4/3'```).\n\nThe output should be a ```string```, with a space in between the whole number and the fraction (e.g. ```'1 1/3'```).  You do not need to reduce the result to its simplest form.\n\nFor the purpose of this exercise, there will be no ```0```, ```empty string``` or ```null``` input value. However, the input can be:\n\n- a negative fraction\n- a fraction that does not require conversion\n- a fraction that can be converted into a whole number\n\"\"\"", "inputs": [["74/3"], ["9999/24"], ["74/30"], ["13/5"], ["5/3"], ["1/1"], ["10/10"], ["900/10"], ["9920/124"], ["6/2"], ["9/77"], ["96/100"], ["12/18"], ["6/36"], ["1/18"], ["-64/8"], ["-6/8"], ["-9/78"], ["-504/26"], ["-47/2"], ["-21511/21"]], "outputs": [["24 2/3"], ["416 15/24"], ["2 14/30"], ["2 3/5"], ["1 2/3"], ["1"], ["1"], ["90"], ["80"], ["3"], ["9/77"], ["96/100"], ["12/18"], ["6/36"], ["1/18"], ["-8"], ["-6/8"], ["-9/78"], ["-19 10/26"], ["-23 1/2"], ["-1024 7/21"]], "starter_code": "def convert_to_mixed_numeral(parm):", "canonical_solution": "def convert_to_mixed_numeral(parm):\n    a, b = list(map(int, parm.split('/')))\n    d, r = divmod(abs(a), b)\n    s = (0 < a) - (a < 0)\n    return parm if d == 0 else ('{}' + ' {}/{}' * (r != 0)).format(d * s, r, b)", "entry_point": "convert_to_mixed_numeral", "task_id": "TACO_lite/528", "input_output_examples": [[[["I", "IIV", "IVI", "IX", "XII", "MCD"]], [["MMMMCMXCIX", "MMDCXLIV", "MMCIX", "CLD", "LCD"]], [["MMMCDLXVL", "MDLXXXVI", "DCLXII", "MMMMCLL", "MMDCCCLXXXIVCD"]]], [["I", "IX", "XII", "MCD"], ["MMMMCMXCIX", "MMDCXLIV", "MMCIX"], ["MDLXXXVI", "DCLXII"]]]}
{"requirement": "def cake_slice(n):\"\"\"# Task\nA cake is sliced with `n` straight lines. Your task is to calculate the maximum number of pieces the cake can have.\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  `0 ≤ n ≤ 10000`\n\n\n - `[output]` an integer\n\n  The maximum number of pieces the sliced cake can have.\n\"\"\"", "inputs": [[0], [1], [2], [3], [10]], "outputs": [[1], [2], [4], [7], [56]], "starter_code": "def cake_slice(n):", "canonical_solution": "def cake_slice(n):\n    return (n ** 2 + n + 2) // 2", "entry_point": "cake_slice", "task_id": "TACO_lite/529", "input_output_examples": [[[10], [12]], [[48], [60]]]}
{"requirement": "def tetris(arr):\"\"\"# Fun fact\nTetris was the first video game played in outer space\n\nIn 1993, Russian cosmonaut Aleksandr A. Serebrov spent 196 days on the Mir space station with a very special distraction: a gray Game Boy loaded with Tetris. During that time the game orbited the Earth 3,000 times and became the first video game played in space. The Game Boy was sold in a Bonhams auction for $1,220 during the Space History Sale in 2011.\n\n# Task\nParse the game log and determine how many lines have been cleared through the game. The game ends if all commands from input were interpreted or the maximum field height (30 units) is reached.\n\nA horizontal line, according to the rules of classic Tetris, is considered cleared if it represents a solid line without gaps formed by falling blocks.\nWhen such a line is formed, it disappears and any blocks above it fall down to fill the space.\n\n# Input\nAs an argument, you are given gamelog - an array of commands which you need to interpret.\n\nEach command has the same form:\n* The first character - the type of block (integer from 1 to 4, as in this kata we have only 4 types of blocks). Block types are described below.\n* The second - the direction of movement (`\"R\"` or `\"L\"` - right or left).\n* The third is an offset (integer from 0 to 4, as width of our field 9 units and new block always appears at the center of the field) relative to the starting position. Thus, `L4` means the leftmost position, and `R4` the rightmost, and `L0` is equivalent to `R0`.\n\n# Output\nThe total number of cleaned horizontal lines (`int`) to the end of the game. Note, if the field height is exceeded, then the game ends immediately.\n\n# Blocks\nIn this kata we have only 4 types of blocks. Yes, this is not a classic set of shapes, but this is only for simplicity.\n```\n# and their graphical representation:\n             ■\n         ■   ■\n     ■   ■   ■\n ■   ■   ■   ■\n---+---+---+---\n#1  #2  #3  #4\n```\n# Field\nGamefield (a rectangular vertical shaft) has width 9 units and height 30 units.\n\n\ntable, th, td {\n  border: 1px solid;\n}\n\n\nIndices can be represented as:\n\n\nL4\nL3\nL2\nL1\nL0/R0\nR1\nR2\nR3\nR4\n\n\n\n# Note\n\nSince there is no rotation of blocks in our model and all blocks are very simple, do not overthink the task.\n\n# Other  \n\nIf you like the idea: leave feedback, and there will be more katas in the Tetris series.\n\n* 7 kyuTetris Series #1 — Scoring System\n* 6 kyuTetris Series #2 — Primitive Gameplay\n* 6 kyuTetris Series #3 — Adding Rotation (TBA)\n* 5 kyuTetris Series #4 — New Block Types (TBA)\n* 4 kyuTetris Series #5 — Complex Block Types (TBA?)\n\"\"\"", "inputs": [[["1R4", "2L3", "3L2", "4L1", "1L0", "2R1", "3R2", "4R3", "1L4"]], [["1L2", "4R2", "3L3", "3L1", "1L4", "1R4"]], [["4R4", "4L3", "4L2", "4L1", "4L0", "4R1", "4R2", "4R3", "3L4"]]], "outputs": [[1], [0], [3]], "starter_code": "def tetris(arr):", "canonical_solution": "pos = {'L4': 0, 'L3': 1, 'L2': 2, 'L1': 3, 'L0': 4, 'R0': 4, 'R1': 5, 'R2': 6, 'R3': 7, 'R4': 8}\n\ndef tetris(arr):\n    current, res = ([0] * 9, 0)\n    for x in arr:\n        p = pos[x[1:]]\n        current[p] += int(x[0])\n        if current[p] >= 30:\n            break\n        y = min(current)\n        if y:\n            current, res = ([v - y for v in current], res + y)\n    return res", "entry_point": "tetris", "task_id": "TACO_lite/530", "input_output_examples": [[[1234], [414], [50000]], [[4], [5], [4]]]}
{"requirement": "def shortest_steps_to_num(num):\"\"\"# Summary:\nGiven a number, `num`, return the shortest amount of `steps` it would take from 1, to land exactly on that number.\n\n# Description:\nA `step` is defined as either:\n- Adding 1 to the number: `num += 1`\n- Doubling the number: `num *= 2`\n\nYou will always start from the number `1` and you will have to return the shortest count of steps it would take to land exactly on that number.\n\n`1 <= num <= 10000`\n\"\"\"", "inputs": [[2], [3], [4], [5], [6], [7], [8], [9], [10], [20], [30], [40], [50], [11], [24], [37], [19], [48], [59], [65], [73], [83], [64], [99], [100], [10000], [1500], [1534], [1978], [2763], [9999], [2673], [4578], [9876], [2659], [7777], [9364], [7280], [4998], [9283], [8234], [7622], [800], [782], [674], [4467], [1233], [3678], [7892], [5672]], "outputs": [[1], [2], [2], [3], [3], [4], [3], [4], [4], [5], [7], [6], [7], [5], [5], [7], [6], [6], [9], [7], [8], [9], [6], [9], [8], [17], [16], [18], [17], [17], [20], [16], [17], [18], [16], [18], [17], [17], [17], [17], [16], [19], [11], [13], [12], [18], [14], [18], [19], [16]], "starter_code": "def shortest_steps_to_num(num):", "canonical_solution": "def shortest_steps_to_num(num):\n    steps = 0\n    while num != 1:\n        if num % 2:\n            num -= 1\n        else:\n            num //= 2\n        steps += 1\n    return steps", "entry_point": "shortest_steps_to_num", "task_id": "TACO_lite/535", "input_output_examples": [[[[1, 2, 3, 4]], [[5, 5, 5, 5, 5]], [[0, 0, -1, -1]], [[5, -2, -9, -4]]], [[6], [15], [0], [5]]]}
{"requirement": "def fit_in(a, b, m, n):\"\"\"Mr. Square is going on a holiday. He wants to bring 2 of his favorite squares with him, so he put them in his rectangle suitcase.\n\nWrite a function that, given the size of the squares and the suitcase, return whether the squares can fit inside the suitcase.\n```Python\nfit_in(a,b,m,n)\na,b are the sizes of the 2 squares\nm,n are the sizes of the suitcase\n```\n\"\"\"", "inputs": [[1, 2, 3, 2], [1, 2, 2, 1], [3, 2, 3, 2], [1, 2, 1, 2], [6, 5, 8, 7], [6, 6, 12, 6], [7, 1, 7, 8], [10, 10, 11, 11], [7, 2, 9, 7], [7, 2, 8, 7], [4, 1, 5, 3], [1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2], [1, 4, 2, 3], [1, 4, 3, 2], [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1, 4], [2, 3, 4, 1], [2, 4, 1, 3], [2, 4, 3, 1], [3, 2, 1, 4], [3, 2, 4, 1], [3, 1, 2, 4], [3, 1, 4, 2], [3, 4, 2, 1], [3, 4, 1, 2], [4, 2, 3, 1], [4, 2, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 1, 2, 3], [4, 1, 3, 2]], "outputs": [[true], [false], [false], [false], [false], [true], [true], [false], [true], [false], [false], [true], [true], [false], [false], [false], [false], [true], [true], [false], [false], [false], [false], [false], [false], [false], [false], [false], [false], [false], [false], [false], [false], [false], [false]], "starter_code": "def fit_in(a, b, m, n):", "canonical_solution": "def fit_in(a, b, m, n):\n    return max(a, b) <= min(m, n) and a + b <= max(m, n)", "entry_point": "fit_in", "task_id": "TACO_lite/537", "input_output_examples": [[[1]], [[7]]]}
{"requirement": "def insert_dash(num):\"\"\"\nWrite a function `insertDash(num)`/`InsertDash(int num)` that will insert dashes ('-') between each two odd numbers in num. Don't count zero as an odd number.\n\nNote that the number will always be non-negative (>= 0).\n\"\"\"", "inputs": [[454793], [123456], [1003567], [24680], [13579]], "outputs": [["4547-9-3"], ["123456"], ["1003-567"], ["24680"], ["1-3-5-7-9"]], "starter_code": "def insert_dash(num):", "canonical_solution": "import re\n\ndef insert_dash(num):\n    return re.sub('([13579])(?=[13579])', '\\\\1-', str(num))", "entry_point": "insert_dash", "task_id": "TACO_lite/538", "input_output_examples": [[["1250"]], [[[[0, 1], [0, 1, 2], [0, 1, 2, 3, 4, 5], [0]]]]]}
{"requirement": "def shades_of_grey(n):\"\"\"\nWhy would we want to stop to only 50 shades of grey? Let's see to how many we can go. \n\nWrite a function that takes a number n as a parameter and return an array containing n shades of grey in hexadecimal code (`#aaaaaa` for example). The array should be sorted in ascending order starting with `#010101`, `#020202`, etc. (using lower case letters).\n\nAs a reminder, the grey color is composed by the same number of red, green and blue: `#010101`, `#aeaeae`, `#555555`, etc. Also, `#000000` and `#ffffff` are not accepted values.\n\nWhen n is negative, just return an empty array.\nIf n is higher than 254, just return an array of 254 elements.\n\nHave fun\n\"\"\"", "inputs": [[-1], [0], [1], [254], [5000]], "outputs": [[[]], [[]], [["#010101"]], [["#010101", "#020202", "#030303", "#040404", "#050505", "#060606", "#070707", "#080808", "#090909", "#0a0a0a", "#0b0b0b", "#0c0c0c", "#0d0d0d", "#0e0e0e", "#0f0f0f", "#101010", "#111111", "#121212", "#131313", "#141414", "#151515", "#161616", "#171717", "#181818", "#191919", "#1a1a1a", "#1b1b1b", "#1c1c1c", "#1d1d1d", "#1e1e1e", "#1f1f1f", "#202020", "#212121", "#222222", "#232323", "#242424", "#252525", "#262626", "#272727", "#282828", "#292929", "#2a2a2a", "#2b2b2b", "#2c2c2c", "#2d2d2d", "#2e2e2e", "#2f2f2f", "#303030", "#313131", "#323232", "#333333", "#343434", "#353535", "#363636", "#373737", "#383838", "#393939", "#3a3a3a", "#3b3b3b", "#3c3c3c", "#3d3d3d", "#3e3e3e", "#3f3f3f", "#404040", "#414141", "#424242", "#434343", "#444444", "#454545", "#464646", "#474747", "#484848", "#494949", "#4a4a4a", "#4b4b4b", "#4c4c4c", "#4d4d4d", "#4e4e4e", "#4f4f4f", "#505050", "#515151", "#525252", "#535353", "#545454", "#555555", "#565656", "#575757", "#585858", "#595959", "#5a5a5a", "#5b5b5b", "#5c5c5c", "#5d5d5d", "#5e5e5e", "#5f5f5f", "#606060", "#616161", "#626262", "#636363", "#646464", "#656565", "#666666", "#676767", "#686868", "#696969", "#6a6a6a", "#6b6b6b", "#6c6c6c", "#6d6d6d", "#6e6e6e", "#6f6f6f", "#707070", "#717171", "#727272", "#737373", "#747474", "#757575", "#767676", "#777777", "#787878", "#797979", "#7a7a7a", "#7b7b7b", "#7c7c7c", "#7d7d7d", "#7e7e7e", "#7f7f7f", "#808080", "#818181", "#828282", "#838383", "#848484", "#858585", "#868686", "#878787", "#888888", "#898989", "#8a8a8a", "#8b8b8b", "#8c8c8c", "#8d8d8d", "#8e8e8e", "#8f8f8f", "#909090", "#919191", "#929292", "#939393", "#949494", "#959595", "#969696", "#979797", "#989898", "#999999", "#9a9a9a", "#9b9b9b", "#9c9c9c", "#9d9d9d", "#9e9e9e", "#9f9f9f", "#a0a0a0", "#a1a1a1", "#a2a2a2", "#a3a3a3", "#a4a4a4", "#a5a5a5", "#a6a6a6", "#a7a7a7", "#a8a8a8", "#a9a9a9", "#aaaaaa", "#ababab", "#acacac", "#adadad", "#aeaeae", "#afafaf", "#b0b0b0", "#b1b1b1", "#b2b2b2", "#b3b3b3", "#b4b4b4", "#b5b5b5", "#b6b6b6", "#b7b7b7", "#b8b8b8", "#b9b9b9", "#bababa", "#bbbbbb", "#bcbcbc", "#bdbdbd", "#bebebe", "#bfbfbf", "#c0c0c0", "#c1c1c1", "#c2c2c2", "#c3c3c3", "#c4c4c4", "#c5c5c5", "#c6c6c6", "#c7c7c7", "#c8c8c8", "#c9c9c9", "#cacaca", "#cbcbcb", "#cccccc", "#cdcdcd", "#cecece", "#cfcfcf", "#d0d0d0", "#d1d1d1", "#d2d2d2", "#d3d3d3", "#d4d4d4", "#d5d5d5", "#d6d6d6", "#d7d7d7", "#d8d8d8", "#d9d9d9", "#dadada", "#dbdbdb", "#dcdcdc", "#dddddd", "#dedede", "#dfdfdf", "#e0e0e0", "#e1e1e1", "#e2e2e2", "#e3e3e3", "#e4e4e4", "#e5e5e5", "#e6e6e6", "#e7e7e7", "#e8e8e8", "#e9e9e9", "#eaeaea", "#ebebeb", "#ececec", "#ededed", "#eeeeee", "#efefef", "#f0f0f0", "#f1f1f1", "#f2f2f2", "#f3f3f3", "#f4f4f4", "#f5f5f5", "#f6f6f6", "#f7f7f7", "#f8f8f8", "#f9f9f9", "#fafafa", "#fbfbfb", "#fcfcfc", "#fdfdfd", "#fefefe"]], [["#010101", "#020202", "#030303", "#040404", "#050505", "#060606", "#070707", "#080808", "#090909", "#0a0a0a", "#0b0b0b", "#0c0c0c", "#0d0d0d", "#0e0e0e", "#0f0f0f", "#101010", "#111111", "#121212", "#131313", "#141414", "#151515", "#161616", "#171717", "#181818", "#191919", "#1a1a1a", "#1b1b1b", "#1c1c1c", "#1d1d1d", "#1e1e1e", "#1f1f1f", "#202020", "#212121", "#222222", "#232323", "#242424", "#252525", "#262626", "#272727", "#282828", "#292929", "#2a2a2a", "#2b2b2b", "#2c2c2c", "#2d2d2d", "#2e2e2e", "#2f2f2f", "#303030", "#313131", "#323232", "#333333", "#343434", "#353535", "#363636", "#373737", "#383838", "#393939", "#3a3a3a", "#3b3b3b", "#3c3c3c", "#3d3d3d", "#3e3e3e", "#3f3f3f", "#404040", "#414141", "#424242", "#434343", "#444444", "#454545", "#464646", "#474747", "#484848", "#494949", "#4a4a4a", "#4b4b4b", "#4c4c4c", "#4d4d4d", "#4e4e4e", "#4f4f4f", "#505050", "#515151", "#525252", "#535353", "#545454", "#555555", "#565656", "#575757", "#585858", "#595959", "#5a5a5a", "#5b5b5b", "#5c5c5c", "#5d5d5d", "#5e5e5e", "#5f5f5f", "#606060", "#616161", "#626262", "#636363", "#646464", "#656565", "#666666", "#676767", "#686868", "#696969", "#6a6a6a", "#6b6b6b", "#6c6c6c", "#6d6d6d", "#6e6e6e", "#6f6f6f", "#707070", "#717171", "#727272", "#737373", "#747474", "#757575", "#767676", "#777777", "#787878", "#797979", "#7a7a7a", "#7b7b7b", "#7c7c7c", "#7d7d7d", "#7e7e7e", "#7f7f7f", "#808080", "#818181", "#828282", "#838383", "#848484", "#858585", "#868686", "#878787", "#888888", "#898989", "#8a8a8a", "#8b8b8b", "#8c8c8c", "#8d8d8d", "#8e8e8e", "#8f8f8f", "#909090", "#919191", "#929292", "#939393", "#949494", "#959595", "#969696", "#979797", "#989898", "#999999", "#9a9a9a", "#9b9b9b", "#9c9c9c", "#9d9d9d", "#9e9e9e", "#9f9f9f", "#a0a0a0", "#a1a1a1", "#a2a2a2", "#a3a3a3", "#a4a4a4", "#a5a5a5", "#a6a6a6", "#a7a7a7", "#a8a8a8", "#a9a9a9", "#aaaaaa", "#ababab", "#acacac", "#adadad", "#aeaeae", "#afafaf", "#b0b0b0", "#b1b1b1", "#b2b2b2", "#b3b3b3", "#b4b4b4", "#b5b5b5", "#b6b6b6", "#b7b7b7", "#b8b8b8", "#b9b9b9", "#bababa", "#bbbbbb", "#bcbcbc", "#bdbdbd", "#bebebe", "#bfbfbf", "#c0c0c0", "#c1c1c1", "#c2c2c2", "#c3c3c3", "#c4c4c4", "#c5c5c5", "#c6c6c6", "#c7c7c7", "#c8c8c8", "#c9c9c9", "#cacaca", "#cbcbcb", "#cccccc", "#cdcdcd", "#cecece", "#cfcfcf", "#d0d0d0", "#d1d1d1", "#d2d2d2", "#d3d3d3", "#d4d4d4", "#d5d5d5", "#d6d6d6", "#d7d7d7", "#d8d8d8", "#d9d9d9", "#dadada", "#dbdbdb", "#dcdcdc", "#dddddd", "#dedede", "#dfdfdf", "#e0e0e0", "#e1e1e1", "#e2e2e2", "#e3e3e3", "#e4e4e4", "#e5e5e5", "#e6e6e6", "#e7e7e7", "#e8e8e8", "#e9e9e9", "#eaeaea", "#ebebeb", "#ececec", "#ededed", "#eeeeee", "#efefef", "#f0f0f0", "#f1f1f1", "#f2f2f2", "#f3f3f3", "#f4f4f4", "#f5f5f5", "#f6f6f6", "#f7f7f7", "#f8f8f8", "#f9f9f9", "#fafafa", "#fbfbfb", "#fcfcfc", "#fdfdfd", "#fefefe"]]], "starter_code": "def shades_of_grey(n):", "canonical_solution": "def shades_of_grey(n):\n    if n > 254:\n        n = 254\n    return ['#%02x%02x%02x' % (i, i, i) for i in range(1, n + 1)]", "entry_point": "shades_of_grey", "task_id": "TACO_lite/539", "input_output_examples": [[["key1", "key2", "key3", "key n", "bigkey2", "bigkey1"], ["key1", "key22", "key333"]], [["'bigkey1', 'bigkey2'"], ["'key333'"]]]}
{"requirement": "def factor_sum(n):\"\"\"# Task\n Consider the following operation:\n \n We take a positive integer `n` and replace it with the sum of its `prime factors` (if a prime number is presented multiple times in the factorization of `n`, then it's counted the same number of times in the sum). \n \n This operation is applied sequentially first to the given number, then to the first result, then to the second result and so on.., until the result remains the same.\n\n  Given number `n`, find the final result of the operation.\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  Constraints: `2 ≤ n ≤ 10000.`\n\n\n - `[output]` an integer\n\"\"\"", "inputs": [[24], [35], [156], [4], [31]], "outputs": [[5], [7], [5], [4], [31]], "starter_code": "def factor_sum(n):", "canonical_solution": "def factor_sum(n):\n    while True:\n        i = 2\n        s = 0\n        a = n\n        while i <= n:\n            if n % i == 0:\n                s += i\n                n /= i\n                if n == 1:\n                    break\n            else:\n                i += 1\n        if a != s:\n            n = s\n        else:\n            return s", "entry_point": "factor_sum", "task_id": "TACO_lite/541", "input_output_examples": [[[["michael", "jordan", "lebron", "james", "kobe", "bryant"]], [["babic", "keksic", "boric", "bukic", "sarmic", "balic", "kruzic", "hrenovkic", "beslic", "boksic", "krafnic", "pecivic", "klavirkovic", "kukumaric", "sunkic", "kolacic", "kovacic", "prijestolonasljednikovic"]]], [["forfeit"], ["bk"]]]}
{"requirement": "def count_paths(N, coords):\n\t\"\"\"\nThere is a play grid NxN; Always square! \n\nYou start from a random point. I mean, you are given the coordinates of your start position in format (row, col). \n\nAnd your TASK is to define the number of unique paths to reach position X (always in the top right corner).\n\nFrom any point you can go only UP or RIGHT.\n\nImplement a function count_paths(N, (row, col)) which returns int; \nAssume input params are always valid.\n\nbtw. you can use preloaded Grid class, which constructs 2d array for you. It's very very basic and simple. You can use numpy instead or any other way to produce the correct answer =)\n grid = Grid(2, 2, 0) \nsamegrid = Grid.square(2) will give you a grid[2][2], which you can print easily to console. \n\nprint(grid)\n\n\n[0, 0]\n[0, 0]\n\n\nEnjoy!\n\nYou can continue adventures:\nHappy traveller [Part 2]\n\"\"\"", "inputs": [[1, [0, 0]], [2, [1, 0]], [2, [1, 1]], [3, [1, 0]], [5, [4, 0]], [6, [5, 0]], [7, [6, 0]]], "outputs": [[0], [2], [1], [3], [70], [252], [924]], "starter_code": "def count_paths(N, coords):\n\t", "canonical_solution": "from math import factorial as f\ncount_paths = lambda n, c: f(c[0] + abs(n - c[1] - 1)) // (f(abs(n - c[1] - 1)) * f(c[0])) if n != 1 else 0", "entry_point": "count_paths", "task_id": "TACO_lite/545", "input_output_examples": [[["10001"], ["1001"], ["00000"], ["0000"], ["01000"]], [[1], [0], [3], [2], [1]]]}
{"requirement": "def ds_multof_pfs(n, m):\"\"\"\nThe numbers have something in common related with their divisors and their prime factors, let's see it.\n\nThere is an obvious property you can see: the sum of the divisors of a number is divisible by the sum of its prime factors.\n\nWe need the function ```ds_multof_pfs()``` that receives two arguments: ```nMin``` and  ```nMax```, as a lower and upper limit (inclusives), respectively, and outputs a sorted list with the numbers that fulfill the property described above.\n\nWe represent the features of the described function:\n```python\nds_multof_pfs(nMin, nMax) -----> [n1, n2, ....., nl] # nMin ≤ n1 < n2 < ..< nl ≤ nMax\n```\n\nEnjoy it!!\n\"\"\"", "inputs": [[10, 100], [20, 120], [50, 140]], "outputs": [[[12, 15, 35, 42, 60, 63, 66, 68, 84, 90, 95]], [[35, 42, 60, 63, 66, 68, 84, 90, 95, 110, 114, 119]], [[60, 63, 66, 68, 84, 90, 95, 110, 114, 119, 140]]], "starter_code": "def ds_multof_pfs(n, m):", "canonical_solution": "from bisect import bisect_left\na = [12, 15, 35, 42, 60, 63, 66, 68, 84, 90, 95, 110, 114, 119, 140, 143, 152, 168, 189, 195, 204, 209, 216, 234, 245, 258, 264, 270, 280, 287, 290, 294, 297, 319, 322, 323, 352, 368, 377, 380, 384, 396, 470, 476, 480, 506, 510, 527, 531, 544, 552, 558, 559, 572, 588, 616, 621, 693, 702, 741, 744, 756, 760, 779, 812, 819, 825, 837, 855, 880, 899, 902, 923, 940, 950, 952, 989, 990, 1007, 1010, 1026, 1044, 1056, 1064, 1078, 1080, 1102, 1144, 1170, 1188, 1189, 1197, 1199, 1280, 1288, 1292, 1298, 1334, 1343, 1349, 1365, 1372, 1375, 1386, 1392, 1440, 1456, 1470, 1494, 1566, 1595, 1620, 1625, 1638, 1652, 1672, 1696, 1700, 1704, 1750, 1763, 1768, 1785, 1804, 1836, 1840, 1845, 1887, 1908, 1914, 1917, 1919, 1944, 1950, 1980, 1989, 1998, 2024, 2052, 2060, 2070, 2075, 2080, 2107, 2130, 2145, 2158, 2159, 2162, 2208, 2240, 2242, 2272, 2340, 2392, 2448, 2464, 2496, 2507, 2520, 2541, 2632, 2660, 2668, 2673, 2688, 2691, 2728, 2759, 2772, 2784, 2805, 2808, 2828, 2835, 2842, 2882, 2911, 2970, 2992, 3000, 3002, 3015, 3026, 3069, 3072, 3078, 3096, 3132, 3159, 3160, 3168, 3239, 3266, 3300, 3304, 3366, 3375, 3402, 3422, 3471, 3485, 3496, 3500, 3560, 3572, 3596, 3599, 3624, 3652, 3690, 3705, 3720, 3752, 3773, 3784, 3816, 3818, 3827, 3840, 3852, 3933, 3936, 3952, 3990, 4018, 4031, 4060, 4077, 4116, 4128, 4136, 4165, 4182, 4216, 4256, 4264, 4292, 4305, 4320, 4368, 4389, 4410, 4437, 4446, 4522, 4524, 4557, 4592, 4607, 4625, 4644, 4648, 4653, 4655, 4662, 4680, 4704, 4706, 4719, 4720, 4731, 4736, 4750, 4785, 4806, 4810, 4860, 4864, 4872, 4992, 4998, 5005, 5015, 5032, 5040, 5070, 5076, 5125, 5166, 5175, 5183, 5200, 5207, 5225, 5229, 5249, 5264, 5307, 5310, 5346, 5400, 5424, 5434, 5452, 5459, 5460, 5472, 5508, 5543, 5544, 5546, 5560, 5586, 5590, 5664, 5698, 5704, 5720, 5728, 5775, 5800, 5848, 5850, 5865, 5886, 5950, 5992, 6000, 6006, 6018, 6039, 6095, 6150, 6156, 6160, 6171, 6250, 6256, 6270, 6424, 6439, 6460, 6510, 6517, 6528, 6565, 6579, 6580, 6600, 6624, 6656, 6660, 6688, 6725, 6750, 6776, 6802, 6804, 6806, 6816, 6837, 6840, 6860, 6887, 6903, 6909, 6944, 6952, 6960, 7007, 7038, 7040, 7050, 7052, 7067, 7140, 7144, 7150, 7176, 7210, 7236, 7254, 7279, 7314, 7336, 7384, 7395, 7410, 7425, 7426, 7462, 7506, 7524, 7532, 7544, 7568, 7581, 7616, 7668, 7682, 7700, 7701, 7722, 7735, 7739, 7742, 7750, 7752, 7821, 7830, 7872, 7878, 7888, 7904, 7912, 7964, 8140, 8159, 8225, 8232, 8280, 8330, 8349, 8352, 8379, 8385, 8397, 8415, 8470, 8500, 8528, 8568, 8575, 8580, 8639, 8642, 8673, 8692, 8721, 8745, 8786, 8800, 8829, 8832, 8856, 8874, 8960, 8964, 8991, 8993, 9063, 9064, 9088, 9112, 9164, 9179, 9180, 9218, 9240, 9256, 9282, 9308, 9310, 9328, 9352, 9375, 9432, 9460, 9468, 9504, 9537, 9593, 9633, 9639, 9660, 9701, 9720, 9768, 9794, 9799, 9856, 9869, 9870, 9900, 9911, 9912, 9920, 9933, 9936, 9947, 9956, 9963, 9996, 10005, 10064, 10080, 10120, 10150, 10185, 10200, 10207, 10240, 10283, 10296, 10395, 10403, 10465, 10494, 10502, 10508, 10528, 10545, 10582, 10647, 10660, 10664, 10672, 10763, 10792, 10848, 10864, 10877, 10880, 10989, 11050, 11088, 11109, 11125, 11128, 11132, 11151, 11160, 11172, 11176, 11193, 11214, 11223, 11224, 11253, 11266, 11275, 11305, 11340, 11342, 11408, 11417, 11439, 11468, 11475, 11500, 11505, 11556, 11560, 11613, 11648, 11659, 11662, 11663, 11682, 11750, 11774, 11800, 11844, 11865, 11904, 11970, 11979, 11985, 12000, 12006, 12095, 12098, 12136, 12141, 12180, 12208, 12222, 12240, 12276, 12319, 12328, 12360, 12366, 12397, 12412, 12441, 12460, 12474, 12519, 12524, 12540, 12555, 12558, 12561, 12576, 12580, 12628, 12638, 12712, 12740, 12784, 12792, 12851, 12903, 12960, 12975, 12992, 13056, 13068, 13144, 13199, 13209, 13230, 13260, 13280, 13300, 13332, 13439, 13464, 13500, 13509, 13529, 13536, 13566, 13572, 13585, 13608, 13629, 13653, 13662, 13677, 13702, 13716, 13720, 13750, 13761, 13770, 13826, 13840, 13862, 13869, 13912, 13919, 14098, 14100, 14104, 14105, 14144, 14145, 14190, 14195, 14250, 14256, 14259, 14260, 14299, 14326, 14344, 14382, 14396, 14402, 14504, 14514, 14520, 14616, 14632, 14645, 14685, 14688, 14690, 14700, 14732, 14749, 14824, 14850, 14875, 14940, 14950, 14972, 14973, 14994, 15008, 15050, 15066, 15088, 15105, 15210, 15249, 15250, 15272, 15288, 15435, 15480, 15503, 15539, 15540, 15544, 15582, 15602, 15631, 15664, 15698, 15708, 15730, 15732, 15785, 15870, 15873, 15878, 15912, 15930, 15960]\n\ndef ds_multof_pfs(n, m):\n    return a[bisect_left(a, n):bisect_left(a, m + 1)]", "entry_point": "ds_multof_pfs", "task_id": "TACO_lite/546", "input_output_examples": [[[""], ["CodeWars"], ["abc"], ["ABC"], ["123235"], ["HelloWorld"]], [[""], ["cODEwARS"], ["ABC"], ["abc"], ["123235"], ["hELLOwORLD"]]]}
{"requirement": "def protein(rna):\"\"\"\nThe central dogma of molecular biology is that DNA is transcribed into RNA, which is then translated into protein. RNA, like DNA, is a long strand of nucleic acids held together by a sugar backbone (ribose in this case). Each segment of three bases is called a codon. Molecular machines called ribosomes translate the RNA codons into amino acid chains, called polypeptides which are then folded into a protein. \n\nProtein sequences are easily visualized in much the same way that DNA and RNA are, as large strings of letters. An important thing to note is that the 'Stop' codons do not encode for a specific amino acid. Their only function is to stop translation of the protein, as such they are not incorporated into the polypeptide chain. 'Stop' codons should not be in the final protein sequence. To save you a lot of unnecessary (and boring) typing the keys and values for your amino acid dictionary are provided.\n\nGiven a string of RNA, create a function which translates the RNA into its protein sequence. Note: the test cases will always produce a valid string.\n\nAmino Acid Dictionary\n----------------------\n\n```python\n    # Phenylalanine\n    'UUC':'F', 'UUU':'F',\n    # Leucine\n    'UUA':'L', 'UUG':'L', 'CUU':'L', 'CUC':'L','CUA':'L','CUG':'L', \n    # Isoleucine\n    'AUU':'I', 'AUC':'I', 'AUA':'I', \n    # Methionine\n    'AUG':'M', \n    # Valine\n    'GUU':'V', 'GUC':'V', 'GUA':'V', 'GUG':'V', \n    # Serine\n    'UCU':'S', 'UCC':'S', 'UCA':'S', 'UCG':'S', 'AGU':'S', 'AGC':'S', \n    # Proline\n    'CCU':'P', 'CCC':'P', 'CCA':'P', 'CCG':'P', \n    # Threonine\n    'ACU':'T', 'ACC':'T', 'ACA':'T', 'ACG':'T',\n    # Alanine\n    'GCU':'A', 'GCC':'A', 'GCA':'A', 'GCG':'A', \n    # Tyrosine\n    'UAU':'Y', 'UAC':'Y', \n    # Histidine\n    'CAU':'H', 'CAC':'H',\n    # Glutamine\n    'CAA':'Q', 'CAG':'Q', \n    # Asparagine\n    'AAU':'N', 'AAC':'N', \n    # Lysine\n    'AAA':'K', 'AAG':'K',\n    # Aspartic Acid\n    'GAU':'D', 'GAC':'D', \n    # Glutamic Acid\n    'GAA':'E', 'GAG':'E',\n    # Cystine\n    'UGU':'C', 'UGC':'C',\n    # Tryptophan\n    'UGG':'W', \n    # Arginine\n    'CGU':'R', 'CGC':'R', 'CGA':'R', 'CGG':'R', 'AGA':'R', 'AGG':'R', \n    # Glycine\n    'GGU':'G',  'GGC':'G', 'GGA':'G', 'GGG':'G', \n    # Stop codon\n    'UAA':'Stop', 'UGA':'Stop', 'UAG':'Stop'\n```\n\"\"\"", "inputs": [["AUGUGA"], ["AUGUAUAAA"], ["UGCGAUGAAUGGGCUCGCUCC"], ["AUGUUAAUUUGA"], ["AUGUCCUUCCAUCAAGGAAACCAUGCGCGUUCAGCUUUCUGA"], ["AUGCUUCAAGUGCACUGGAAAAGGAGAGGGAAAACCAGUUGA"], ["AUGGCGUUCAGCUUUCUAUGGAGGGUAGUGUACCCAUGCUGA"], ["AUGCAGCUUUCUAUGGAGGGUAGUGUUAACUACCACGCCUGA"], ["AUGCUAUGGAGGGUAGUGUUAACUACCACGCCCAGUACUUGA"], ["AUGCUGAUUAUGGUUGUUGUAUCUUCCUAUCAAAAUAAAACUACCACAUGA"], ["AUGGAGCACAAUAAAAUACCAAUACCACUCACUCUCUACCCUACUCUACUCUCAUGA"], ["AUGUAUCCUUCCAUCAAGGAAACCAUGCGCGUUCAGCUUUCUAUGGAGGGUAGUGUUAACUACCACGCCUUCAAGUGCACUGGAAAAGGAGAGGGAAAACCAUACGAAGGCACCCAAAGCCUGAAUAUUACAAUAACUGAAGGAGGUCCUCUGCCAUUUGCUUUUGACAUUCUGUCACACGCCUUUCAGUAUGGCAUCAAGGUCUUCGCCAAGUACCCCAAAGAAAUUCCUGACUUCUUUAAGCAGUCUCUACCUGGUGGUUUUUCUUGGGAAAGAGUAAGCACCUAUGAAGAUGGAGGAGUGCUUUCAGCUACCCAAGAAACAAGUUUGCAGGGUGAUUGCAUCAUCUGCAAAGUUAAAGUCCUUGGCACCAAUUUUCCCGCAAACGGUCCAGUGAUGCAAAAGAAGACCUGUGGAUGGGAGCCAUCAACUGAAACAGUCAUCCCACGAGAUGGUGGACUUCUGCUUCGCGAUACCCCCGCACUUAUGCUGGCUGACGGAGGUCAUCUUUCUUGCUUCAUGGAAACAACUUACAAGUCGAAGAAAGAGGUAAAGCUUCCAGAACUUCACUUUCAUCAUUUGCGUAUGGAAAAGCUGAACAUAAGUGACGAUUGGAAGACCGUUGAGCAGCACGAGUCUGUGGUGGCUAGCUACUCCCAAGUGCCUUCGAAAUUAGGACAUAACUGA"]], "outputs": [["M"], ["MYK"], ["CDEWARS"], ["MLI"], ["MSFHQGNHARSAF"], ["MLQVHWKRRGKTS"], ["MAFSFLWRVVYPC"], ["MQLSMEGSVNYHA"], ["MLWRVVLTTTPST"], ["MLIMVVVSSYQNKTTT"], ["MEHNKIPIPLTLYPTLLS"], ["MYPSIKETMRVQLSMEGSVNYHAFKCTGKGEGKPYEGTQSLNITITEGGPLPFAFDILSHAFQYGIKVFAKYPKEIPDFFKQSLPGGFSWERVSTYEDGGVLSATQETSLQGDCIICKVKVLGTNFPANGPVMQKKTCGWEPSTETVIPRDGGLLLRDTPALMLADGGHLSCFMETTYKSKKEVKLPELHFHHLRMEKLNISDDWKTVEQHESVVASYSQVPSKLGHN"]], "starter_code": "def protein(rna):", "canonical_solution": "import re\ndict = {'UUC': 'F', 'UUU': 'F', 'UUA': 'L', 'UUG': 'L', 'CUU': 'L', 'CUC': 'L', 'CUA': 'L', 'CUG': 'L', 'AUU': 'I', 'AUC': 'I', 'AUA': 'I', 'AUG': 'M', 'GUU': 'V', 'GUC': 'V', 'GUA': 'V', 'GUG': 'V', 'UCU': 'S', 'UCC': 'S', 'UCA': 'S', 'UCG': 'S', 'AGU': 'S', 'AGC': 'S', 'CCU': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P', 'ACU': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T', 'GCU': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A', 'UAU': 'Y', 'UAC': 'Y', 'CAU': 'H', 'CAC': 'H', 'CAA': 'Q', 'CAG': 'Q', 'AAU': 'N', 'AAC': 'N', 'AAA': 'K', 'AAG': 'K', 'GAU': 'D', 'GAC': 'D', 'GAA': 'E', 'GAG': 'E', 'UGU': 'C', 'UGC': 'C', 'UGG': 'W', 'CGU': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R', 'AGA': 'R', 'AGG': 'R', 'GGU': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G'}\n\ndef protein(rna):\n    return re.sub('.{3}', lambda r: dict.get(r.group(0), ''), rna)", "entry_point": "protein", "task_id": "TACO_lite/547", "input_output_examples": [[["taxi"], ["taxis"], ["man i need a taxi up to ubud"]], [["atix"], ["atxsi"], ["man i ende a atix up to budu"]]]}
{"requirement": "def reverse_number(n):\"\"\"Given a number, write a function to output its reverse digits. \n\nNumbers should preserve their sign; i.e. a negative number should still be negative when reversed.\n\"\"\"", "inputs": [[123], [-123], [1000], [4321234], [5], [0], [98989898]], "outputs": [[321], [-321], [1], [4321234], [5], [0], [89898989]], "starter_code": "def reverse_number(n):", "canonical_solution": "def reverse_number(n):\n    s = str(n)\n    ret = int('-{}'.format(s[:0:-1]) if '-' in s else s[::-1])\n    return ret", "entry_point": "reverse_number", "task_id": "TACO_lite/549", "input_output_examples": [[[""]], [[null]]]}
{"requirement": "def symmetric_point(p, q):\"\"\"\"Point reflection\" or \"point symmetry\" is a basic concept in geometry where a given point, P, at a given position relative to a mid-point, Q has a corresponding point, P1, which is the same distance from Q but in the opposite direction.\n\n## Task\n\nGiven two points P and Q, output the symmetric point of point P about Q.\nEach argument is a two-element array of integers representing the point's X and Y coordinates.  Output should be in the same format, giving the X and Y coordinates of point P1.  You do not have to validate the input.\n\nThis kata was inspired by the Hackerrank challenge [Find Point](https://www.hackerrank.com/challenges/find-point)\n\"\"\"", "inputs": [[[0, 0], [1, 1]], [[2, 6], [-2, -6]], [[10, -10], [-10, 10]], [[1, -35], [-12, 1]], [[1000, 15], [-7, -214]], [[0, 0], [0, 0]]], "outputs": [[[2, 2]], [[-6, -18]], [[-30, 30]], [[-25, 37]], [[-1014, -443]], [[0, 0]]], "starter_code": "def symmetric_point(p, q):", "canonical_solution": "def symmetric_point(p, q):\n    return [2 * q[0] - p[0], 2 * q[1] - p[1]]", "entry_point": "symmetric_point", "task_id": "TACO_lite/550", "input_output_examples": [[[12]], [[true]]]}
{"requirement": "def freeway_game(km, kph, cars):\"\"\"# Back-Story\n\nEvery day I travel on the freeway.\n\nWhen I am more bored than usual I sometimes like to play the following counting game I made up:\n\n* As I join the freeway my count is ```0```\n* Add ```1``` for every car that I overtake\n* Subtract ```1``` for every car that overtakes me\n* Stop counting when I reach my exit\n\nWhat an easy game! What fun!\n\n# Kata Task\n\nYou will be given\n* The distance to my exit (km)\n* How fast I am going (kph)\n* Information about a lot of other cars \n * Their time (relative to me) as I join the freeway.\n * How fast they are going (kph)\n\nFind what is my \"score\" as I exit the freeway!\n\n# Notes\n\n* Assume all cars travel at a constant speeds\n\n Safety Warning \n\nIf you plan to play this \"game\" remember that it is not really a game. You are in a **real** car.\n\nThere may be a temptation to try to beat your previous best score.\n\nPlease don't do that...\n\"\"\"", "inputs": [[50.0, 130.0, [[-1.0, 120.0], [-1.5, 120.0]]], [50.0, 110.0, [[1.0, 120.0], [1.5, 125.0]]], [50.0, 120.0, [[-1.0, 115.0], [-1.5, 110.0], [1.0, 130.0], [1.5, 130.0]]], [30.0, 100.0, [[-1.0, 110.0], [-0.7, 102.0], [-1.5, 108.0]]], [30.0, 130.0, [[1.0, 120.0], [0.7, 125.0], [1.5, 110.0]]], [50.0, 110.0, [[-1.0, 110.0], [0.5, 110.0], [1.0, 110.0], [1.5, 110.0]]], [50.0, 110.0, [[0.0, 110.0]]], [50.0, 130.0, []]], "outputs": [[2], [-2], [0], [0], [0], [0], [0], [0]], "starter_code": "def freeway_game(km, kph, cars):", "canonical_solution": "def freeway_game(km, kph, cars):\n    t = km / kph\n    c = 0\n    for dt, speed in cars:\n        d = km - (t - dt / 60) * speed\n        if dt <= 0:\n            c += d > 0\n        else:\n            c -= d < 0\n    return c", "entry_point": "freeway_game", "task_id": "TACO_lite/556", "input_output_examples": [[[1], [14], [-34]], [[-1], [-14], [34]]]}
{"requirement": "def bucketize(*arr):```python\n\"\"\"`Description:`\n\nGiven an input array (`arr`) of positive integers, the objective is to return an output array where each index represents the amount of times an element appeared (frequency) in the input array. \n\nMore specifically, the element at each index of the output array will be an array (bucket) containing integers that appeared index-amount-of-times. \n\nOtherwise, slot nulls (JavaScript, Java), None's (Python) nils (Ruby), or NULL's (C/C++) where appropriate. A valid array will always be provided.\n\n`Explanation:`\n\nAn element cannot appear 0 times, so a null is placed at outputArray[0]. The elements are grouped together in an array and sorted in ascending order based on their frequency of appearance.\n\nAlthough an integer could have possibly appeared multiple times, this is not the case for all elements. This is the reason why the elements at certain indices are null values.\n\"\"\"", "inputs": [[2, 2, 4, 4, 6, 6, 9, 9, 9, 9], [3, 3, 3, 3, 2], [5, 5, 5, 5, 5], [77, 3, 40, 40, 40], [16, 7, 5, 3, 6, 23]], "outputs": [[[null, null, [2, 4, 6], null, [9], null, null, null, null, null, null]], [[null, [2], null, null, [3], null]], [[null, null, null, null, null, [5]]], [[null, [3, 77], null, [40], null, null]], [[null, [3, 5, 6, 7, 16, 23], null, null, null, null, null]]], "starter_code": "def bucketize(*arr):", "canonical_solution": "from collections import Counter\n\ndef bucketize(*arr):\n    c = Counter(arr)\n    c = {i: sorted([k for k, v in list(c.items()) if v == i]) for i in list(c.values())}\n    return [c[e] if e in c else None for e in range(len(arr) + 1)]", "entry_point": "bucketize", "task_id": "TACO_lite/559", "input_output_examples": [[[["Create", "a", "frame"], "+"], [["Small", "frame"], "~"]], [["++++++++++\n+ Create +\n+ a      +\n+ frame  +\n++++++++++"], ["~~~~~~~~~\n~ Small ~\n~ frame ~\n~~~~~~~~~"]]]}
{"requirement": "def exp_sum(number):\"\"\"# How many ways can you make the sum of a number?\n\nFrom wikipedia: https://en.wikipedia.org/wiki/Partition_(number_theory)#\n\n>In number theory and combinatorics, a partition of a positive integer *n*, also called an *integer partition*, is a way of writing n as a sum of positive integers. Two sums that differ only in the order of their summands are considered the same partition. If order matters, the sum becomes a composition.\n\nSee [here](http://www.numericana.com/data/partition.htm) for more examples.\n\"\"\"", "inputs": [[1], [2], [3], [4], [5], [20], [30], [40], [43], [60], [70], [90], [200], [275]], "outputs": [[1], [2], [3], [5], [7], [627], [5604], [37338], [63261], [966467], [4087968], [56634173], [3972999029388], [1520980492851175]], "starter_code": "def exp_sum(number):", "canonical_solution": "ANSWERS = {0: 1, 1: 1, 2: 2, 3: 3, 4: 5, 5: 7, 6: 11, 7: 15, 8: 22, 9: 30, 10: 42, 11: 56, 12: 77, 13: 101, 14: 135, 15: 176, 16: 231, 17: 297, 18: 385, 19: 490, 20: 627, 21: 792, 22: 1002, 23: 1255, 24: 1575, 25: 1958, 26: 2436, 27: 3010, 28: 3718, 29: 4565, 30: 5604, 31: 6842, 32: 8349, 33: 10143, 34: 12310, 35: 14883, 36: 17977, 37: 21637, 38: 26015, 39: 31185, 40: 37338, 41: 44583, 42: 53174, 43: 63261, 44: 75175, 45: 89134, 46: 105558, 47: 124754, 48: 147273, 49: 173525, 50: 204226, 51: 239943, 52: 281589, 53: 329931, 54: 386155, 55: 451276, 56: 526823, 57: 614154, 58: 715220, 59: 831820, 60: 966467, 61: 1121505, 62: 1300156, 63: 1505499, 64: 1741630, 65: 2012558, 66: 2323520, 67: 2679689, 68: 3087735, 69: 3554345, 70: 4087968, 71: 4697205, 72: 5392783, 73: 6185689, 74: 7089500, 75: 8118264, 76: 9289091, 77: 10619863, 78: 12132164, 79: 13848650, 80: 15796476, 81: 18004327, 82: 20506255, 83: 23338469, 84: 26543660, 85: 30167357, 86: 34262962, 87: 38887673, 88: 44108109, 89: 49995925, 90: 56634173, 91: 64112359, 92: 72533807, 93: 82010177, 94: 92669720, 95: 104651419, 96: 118114304, 97: 133230930, 98: 150198136, 99: 169229875, 100: 190569292, 101: 214481126, 102: 241265379, 103: 271248950, 104: 304801365, 105: 342325709, 106: 384276336, 107: 431149389, 108: 483502844, 109: 541946240, 110: 607163746, 111: 679903203, 112: 761002156, 113: 851376628, 114: 952050665, 115: 1064144451, 116: 1188908248, 117: 1327710076, 118: 1482074143, 119: 1653668665, 120: 1844349560, 121: 2056148051, 122: 2291320912, 123: 2552338241, 124: 2841940500, 125: 3163127352, 126: 3519222692, 127: 3913864295, 128: 4351078600, 129: 4835271870, 130: 5371315400, 131: 5964539504, 132: 6620830889, 133: 7346629512, 134: 8149040695, 135: 9035836076, 136: 10015581680, 137: 11097645016, 138: 12292341831, 139: 13610949895, 140: 15065878135, 141: 16670689208, 142: 18440293320, 143: 20390982757, 144: 22540654445, 145: 24908858009, 146: 27517052599, 147: 30388671978, 148: 33549419497, 149: 37027355200, 150: 40853235313, 151: 45060624582, 152: 49686288421, 153: 54770336324, 154: 60356673280, 155: 66493182097, 156: 73232243759, 157: 80630964769, 158: 88751778802, 159: 97662728555, 160: 107438159466, 161: 118159068427, 162: 129913904637, 163: 142798995930, 164: 156919475295, 165: 172389800255, 166: 189334822579, 167: 207890420102, 168: 228204732751, 169: 250438925115, 170: 274768617130, 171: 301384802048, 172: 330495499613, 173: 362326859895, 174: 397125074750, 175: 435157697830, 176: 476715857290, 177: 522115831195, 178: 571701605655, 179: 625846753120, 180: 684957390936, 181: 749474411781, 182: 819876908323, 183: 896684817527, 184: 980462880430, 185: 1071823774337, 186: 1171432692373, 187: 1280011042268, 188: 1398341745571, 189: 1527273599625, 190: 1667727404093, 191: 1820701100652, 192: 1987276856363, 193: 2168627105469, 194: 2366022741845, 195: 2580840212973, 196: 2814570987591, 197: 3068829878530, 198: 3345365983698, 199: 3646072432125, 200: 3972999029388, 201: 4328363658647, 202: 4714566886083, 203: 5134205287973, 204: 5590088317495, 205: 6085253859260, 206: 6622987708040, 207: 7206841706490, 208: 7840656226137, 209: 8528581302375, 210: 9275102575355, 211: 10085065885767, 212: 10963707205259, 213: 11916681236278, 214: 12950095925895, 215: 14070545699287, 216: 15285151248481, 217: 16601598107914, 218: 18028182516671, 219: 19573856161145, 220: 21248279009367, 221: 23061871173849, 222: 25025873760111, 223: 27152408925615, 224: 29454549941750, 225: 31946390696157, 226: 34643126322519, 227: 37561133582570, 228: 40718063627362, 229: 44132934884255, 230: 47826239745920, 231: 51820051838712, 232: 56138148670947, 233: 60806135438329, 234: 65851585970275, 235: 71304185514919, 236: 77195892663512, 237: 83561103925871, 238: 90436839668817, 239: 97862933703585, 240: 105882246722733, 241: 114540884553038, 242: 123888443077259, 243: 133978259344888, 244: 144867692496445, 245: 156618412527946, 246: 169296722391554, 247: 182973889854026, 248: 197726516681672, 249: 213636919820625, 250: 230793554364681, 251: 249291451168559, 252: 269232701252579, 253: 290726957916112, 254: 313891991306665, 255: 338854264248680, 256: 365749566870782, 257: 394723676655357, 258: 425933084409356, 259: 459545750448675, 260: 495741934760846, 261: 534715062908609, 262: 576672674947168, 263: 621837416509615, 264: 670448123060170, 265: 722760953690372, 266: 779050629562167, 267: 839611730366814, 268: 904760108316360, 269: 974834369944625, 270: 1050197489931117, 271: 1131238503938606, 272: 1218374349844333, 273: 1312051800816215, 274: 1412749565173450, 275: 1520980492851175, 276: 1637293969337171, 277: 1762278433057269, 278: 1896564103591584, 279: 2040825852575075, 280: 2195786311682516, 281: 2362219145337711, 282: 2540952590045698, 283: 2732873183547535, 284: 2938929793929555, 285: 3160137867148997, 286: 3397584011986773, 287: 3652430836071053, 288: 3925922161489422, 289: 4219388528587095, 290: 4534253126900886, 291: 4872038056472084, 292: 5234371069753672, 293: 5622992691950605, 294: 6039763882095515, 295: 6486674127079088, 296: 6965850144195831, 297: 7479565078510584, 298: 8030248384943040, 299: 8620496275465025, 300: 9253082936723602, 301: 9930972392403501, 302: 10657331232548839, 303: 11435542077822104, 304: 12269218019229465, 305: 13162217895057704, 306: 14118662665280005, 307: 15142952738857194, 308: 16239786535829663, 309: 17414180133147295, 310: 18671488299600364, 311: 20017426762576945, 312: 21458096037352891, 313: 23000006655487337, 314: 24650106150830490, 315: 26415807633566326, 316: 28305020340996003, 317: 30326181989842964, 318: 32488293351466654, 319: 34800954869440830, 320: 37274405776748077, 321: 39919565526999991, 322: 42748078035954696, 323: 45772358543578028, 324: 49005643635237875, 325: 52462044228828641, 326: 56156602112874289, 327: 60105349839666544, 328: 64325374609114550, 329: 68834885946073850, 330: 73653287861850339, 331: 78801255302666615, 332: 84300815636225119, 333: 90175434980549623, 334: 96450110192202760, 335: 103151466321735325, 336: 110307860425292772, 337: 117949491546113972, 338: 126108517833796355, 339: 134819180623301520, 340: 144117936527873832, 341: 154043597379576030, 342: 164637479165761044, 343: 175943559810422753, 344: 188008647052292980, 345: 200882556287683159, 346: 214618299743286299, 347: 229272286871217150, 348: 244904537455382406, 349: 261578907351144125, 350: 279363328483702152, 351: 298330063062758076, 352: 318555973788329084, 353: 340122810048577428, 354: 363117512048110005, 355: 387632532919029223, 356: 413766180933342362, 357: 441622981929358437, 358: 471314064268398780, 359: 502957566506000020, 360: 536679070310691121, 361: 572612058898037559, 362: 610898403751884101, 363: 651688879997206959, 364: 695143713458946040, 365: 741433159884081684, 366: 790738119649411319, 367: 843250788562528427, 368: 899175348396088349, 369: 958728697912338045, 370: 1022141228367345362, 371: 1089657644424399782, 372: 1161537834849962850, 373: 1238057794119125085, 374: 1319510599727473500, 375: 1406207446561484054, 376: 1498478743590581081, 377: 1596675274490756791, 378: 1701169427975813525, 379: 1812356499739472950, 380: 1930656072350465812, 381: 2056513475336633805, 382: 2190401332423765131, 383: 2332821198543892336, 384: 2484305294265418180, 385: 2645418340688763701, 386: 2816759503217942792, 387: 2998964447736452194, 388: 3192707518433532826, 389: 3398704041358160275, 390: 3617712763867604423, 391: 3850538434667429186, 392: 4098034535626594791, 393: 4361106170762284114, 394: 4640713124699623515, 395: 4937873096788191655, 396: 5253665124416975163, 397: 5589233202595404488, 398: 5945790114707874597, 399: 6324621482504294325, 400: 6727090051741041926, 401: 7154640222653942321, 402: 7608802843339879269, 403: 8091200276484465581, 404: 8603551759348655060, 405: 9147679068859117602, 406: 9725512513742021729, 407: 10339097267123947241, 408: 10990600063775926994, 409: 11682316277192317780, 410: 12416677403151190382, 411: 13196258966925435702, 412: 14023788883518847344, 413: 14902156290309948968, 414: 15834420884488187770, 415: 16823822787139235544, 416: 17873792969689876004, 417: 18987964267331664557, 418: 20170183018805933659, 419: 21424521360255636320, 420: 22755290216580025259, 421: 24167053021441363961, 422: 25664640213837714846, 423: 27253164546230421739, 424: 28938037257084798150, 425: 30724985147095051099, 426: 32620068617410232189, 427: 34629700713903575934, 428: 36760667241831527309, 429: 39020148000237259665, 430: 41415739207102358378, 431: 43955477170518116534, 432: 46647863284229267991, 433: 49501890409405150715, 434: 52527070729108240605, 435: 55733465144636286656, 436: 59131714309169618645, 437: 62733071376043079215, 438: 66549436566966297367, 439: 70593393646562135510, 440: 74878248419470886233, 441: 79418069346443402240, 442: 84227730407729499781, 443: 89322956321353645667, 444: 94720370257893471820, 445: 100437544171752847604, 446: 106493051905239118581, 447: 112906525199196103354, 448: 119698712782720205954, 449: 126891542690981418000, 450: 134508188001572923840, 451: 142573136155347404229, 452: 151112262071917313678, 453: 160152905244553715585, 454: 169723951046458040965, 455: 179855916453958267598, 456: 190581040442651931034, 457: 201933379285114688629, 458: 213948907032733069132, 459: 226665621435831345565, 460: 240123655613925192081, 461: 254365395758574199975, 462: 269435605212954994471, 463: 285381555241961986287, 464: 302253162872576636605, 465: 320103136152993290544, 466: 338987127249525432549, 467: 358963893768162876613, 468: 380095468763120598477, 469: 402447339861711475160, 470: 426088638015652413417, 471: 451092336355096099864, 472: 477535459708164115593, 473: 505499305314204629558, 474: 535069675351607262125, 475: 566337121865805599675, 476: 599397204782301852926, 477: 634350763653787028583, 478: 671304203896731807232, 479: 710369798236628238005, 480: 751666004194993125591, 481: 795317798414758232180, 482: 841457028742823649455, 483: 890222784951928088294, 484: 941761789114997698055, 485: 996228806608573411012, 486: 1053787078862455346513, 487: 1114608778936426484248, 488: 1178875491155735802646, 489: 1246778716001272919665, 490: 1318520401612270233223, 491: 1394313503224447816939, 492: 1474382572040363953132, 493: 1558964374994977806173, 494: 1648308547066172438760, 495: 1742678277747760981187, 496: 1842351033503159891466, 497: 1947619317987658064007, 498: 2058791472042884901563, 499: 2176192515439287461625, 500: 2300165032574323995027, 501: 2431070104309287327876, 502: 2569288288377098289281, 503: 2715220650772245313220, 504: 2869289850802400662045, 505: 3031941282464413132742, 506: 3203644275096202070012, 507: 3384893356244349844341, 508: 3576209579998154653671, 509: 3778141924035171537110, 510: 3991268758958164118300, 511: 4216199393504640098482, 512: 4453575699570940947378, 513: 4704073821002175842062, 514: 4968405970488126319775, 515: 5247322318923878793976, 516: 5541612982013113936133, 517: 5852110108921301661040, 518: 6179690078238084808000, 519: 6525275806549652788115, 520: 6889839175409542385648, 521: 7274403582551733377346, 522: 7680046623716094332553, 523: 8107902911527474124146, 524: 8559167038437716736150, 525: 9035096690829005915201, 526: 9537015921990240021538, 527: 10066318591787500106586, 528: 10624471981512075020731, 529: 11213020592521695111580, 530: 11833590138006300416410, 531: 12487891737367521803652, 532: 13177726323474524612308, 533: 13904989273245567335012, 534: 14671675272840783232475, 535: 15479883428970761068959, 536: 16331822638729701493803, 537: 17229817230617210720599, 538: 18176312890390861435034, 539: 19173882885687454484110, 540: 20225234604409151266221, 541: 21333216422211708570598, 542: 22500824915577356165493, 543: 23731212437346370138355, 544: 25027695072821279146420, 545: 26393760995005382968154, 546: 27833079238879849385687, 547: 29349508915133986374841, 548: 30947108885217475101876, 549: 32630147920163234060900, 550: 34403115367205050943160, 551: 36270732348871285128752, 552: 38237963520943177237554, 553: 40310029416409244587122, 554: 42492419404397720872600, 555: 44790905293907018009131, 556: 47211555614160398040338, 557: 49760750604354432757376, 558: 52445197947746313627407, 559: 55271949286085137715955, 560: 58248417552751868050007, 561: 61382395164161775318496, 562: 64682073111542943380454, 563: 68156060996536236172174, 564: 71813408056839596203570, 565: 75663625229609055443637, 566: 79716708303343130521599, 567: 83983162210640880002321, 568: 88474026517495817981253, 569: 93200902166643654187580, 570: 98175979536033971312388, 571: 103412067875563710992446, 572: 108922626189067392956037, 573: 114721795630860408658491, 574: 120824433490320564237125, 575: 127246148840551966562301, 576: 134003339931725153597473, 577: 141113233412529912746558, 578: 148593925468119890197615, 579: 156464424966082817448060, 580: 164744698707340387584240, 581: 173455718882380096095248, 582: 182619512839056823919887, 583: 192259215272078129526277, 584: 202399122950629095580175, 585: 213064752104884207160129, 586: 224282898599046831034631, 587: 236081701023305130945921, 588: 248490706844586261413858, 589: 261540941761240642265710, 590: 275264982414934173206642, 591: 289697032618827122974972, 592: 304873003269975366031783, 593: 320830596120295386610807, 594: 337609391590065169560935, 595: 355250940815002702558187, 596: 373798862128436852709430, 597: 393298942187883251157044, 598: 413799241966727832978027, 599: 435350207840317348270000, 600: 458004788008144308553622, 601: 481818554503286362923739, 602: 506849831053734861481872, 603: 533159827070679866278987, 604: 560812778053476538349420, 605: 589876092712502332463864, 606: 620420507127059714307352, 607: 652520246268116112057164, 608: 686253193233019826880477, 609: 721701066553229757379480, 610: 758949605954969709105721, 611: 798088766967999186006767, 612: 839212924798226411060795, 613: 882421087896683264554175, 614: 927817121679723721849795, 615: 975509982873756796925504, 616: 1025613964982134990453294, 617: 1078248955392080004474789, 618: 1133540704665979618906662, 619: 1191621108583631746910145, 620: 1252628503530795506440909, 621: 1316707975853817969920561, 622: 1384011685831426958558879, 623: 1454699206941558115141676, 624: 1528937881135168275063375, 625: 1606903190858354689128371, 626: 1688779148601189609516729, 627: 1774758704783877366657989, 628: 1865044174831202682776536, 629: 1959847686321528964669495, 630: 2059391647140527228529479, 631: 2163909235608484556362424, 632: 2273644913597837330081136, 633: 2388854963699932382735982, 634: 2509808051552031608082535, 635: 2636785814481962651219075, 636: 2770083477684418110395121, 637: 2910010499193691843303014, 638: 3056891244979232231862474, 639: 3211065695545980277248740, 640: 3372890185488482409685019, 641: 3542738177508596708707874, 642: 3721001072479541451508397, 643: 3908089057205582486668934, 644: 4104431991606013700457110, 645: 4310480337124871462076948, 646: 4526706128254173781044298, 647: 4753603989138067267826945, 648: 4991692197319220372390544, 649: 5241513796775816319683700, 650: 5503637762499727151307095, 651: 5778660218961559003723580, 652: 6067205714919484306343541, 653: 6369928557132709817142929, 654: 6687514205661440172553650, 655: 7020680733548749464953877, 656: 7370180353811425547662139, 657: 7736801016790889035132284, 658: 8121368081058512888507057, 659: 8524746061205131302394950, 660: 8947840456000332817673697, 661: 9391599660555044587641517, 662: 9857016966290401433259592, 663: 10345132652677367520056676, 664: 10857036174895938656583295, 665: 11393868451739000294452939, 666: 11956824258286445517629485, 667: 12547154728067493595502055, 668: 13166169969647255482980383, 669: 13815241802783448943206160, 670: 14495806619536377005379418, 671: 15209368375944215483241988, 672: 15957501720133631304230773, 673: 16741855262985451980947171, 674: 17564154997755650263621500, 675: 18426207875324210441995136, 676: 19329905542049511423199336, 677: 20277228247502764885900784, 678: 21270248929688765106878025, 679: 22311137485682880566295780, 680: 23402165235974892374954302, 681: 24545709591163085124246501, 682: 25744258930034131533263392, 683: 27000417698448800353553865, 684: 28316911738879831363625420, 685: 29696593860867277871605321, 686: 31142449663120060247020395, 687: 32657603618448918933404658, 688: 34245325433219728719773420, 689: 35909036693513349075724695, 690: 37652317810725762600765183, 691: 39478915279883795756623331, 692: 41392749264546866860893416, 693: 43397921522754943172592795, 694: 45498723689129703063649450, 695: 47699645928878027716139269, 696: 50005385980149860746062163, 697: 52420858601901549459658530, 698: 54951205445179608281719072, 699: 57601805366500810491219000, 700: 60378285202834474611028659, 701: 63286531028521032840985510, 702: 66332699915362724119980694, 703: 69523232218023552371152320, 704: 72864864407855341219969825, 705: 76364642479247406973532354, 706: 80029935953661656574123574, 707: 83868452507581852374822598, 708: 87888253251761884175130183, 709: 92097768690318501305952845, 710: 96505815389469697877049934, 711: 101121613386982294887579670, 712: 105954804374756131323439197, 713: 111015470688345108146850290, 714: 116314155138696524440183805, 715: 121861881722882938654960142, 716: 127670177252209281782740521, 717: 133751093937700984130081285, 718: 140117232974725477106760252, 719: 146781769170263852819573505, 720: 153758476658245881594406593, 721: 161061755750279477635534762, 722: 168706660971164630122439117, 723: 176708930330666271859881567, 724: 185085015885255746880625875, 725: 193852115645795752984189381, 726: 203028206889569986197651315, 727: 212632080937520072186590492, 728: 222683379460186024851577401, 729: 233202632378520643600875145, 730: 244211297428606706709925517, 731: 255731801462210865865001525, 732: 267787583558210323920375877, 733: 280403140023083872114273884, 734: 293604071362025285843562670, 735: 307417131305664218954016427, 736: 321870277981032622582593573, 737: 336992727319136467572139095, 738: 352815008795455957133215652, 739: 369369023603738655757458075, 740: 386688105367749941220651375, 741: 404807083500032850651734059, 742: 423762349321394151918928481, 743: 443591925059596733749014862, 744: 464335535850798483634138280, 745: 486034684872448271784326296, 746: 508732731741838107613602755, 747: 532474974320122372524707631, 748: 557308734067567635805394638, 749: 583283445101886813536239875, 750: 610450747117966916191771809, 751: 638864582333908382360557376, 752: 668581296635294279311393900, 753: 699659745096778286894322787, 754: 732161402067670820574405230, 755: 766150476015982127183457373, 756: 801694029333610862568750951, 757: 838862103313805798709299373, 758: 877727848520950325159242658, 759: 918367660781873199488134935, 760: 960861323037560814483873080, 761: 1005292153304074193879898920, 762: 1051747159001957690209588887, 763: 1100317197924192833923669753, 764: 1151097146124113726578727360, 765: 1204186073016375022219516992, 766: 1259687423996378387111229150, 767: 1317709210896221493178043552, 768: 1378364210608578997366598385, 769: 1441770172223648126550509165, 770: 1508050033038752490738311726, 771: 1577332143815074048889599022, 772: 1649750503671651735806603894, 773: 1725445005022910006140645612, 774: 1804561688982956164492944650, 775: 1887253011677361609828822380, 776: 1973678121921532286407950000, 777: 2064003150743712843868729636, 778: 2158401513250589964731360493, 779: 2257054223353982965849642005, 780: 2360150221898687182164777966, 781: 2467886718753771981901721670, 782: 2580469549453004933593920862, 783: 2698113546994164480174756373, 784: 2821042929432312216467202070, 785: 2949491703928193388274450292, 786: 3083704087940340693022764503, 787: 3223934948277725160271634798, 788: 3370450258759473520427114109, 789: 3523527577258789108163787100, 790: 3683456542940343404363084600, 791: 3850539394533563994343413787, 792: 4025091510519029370421431033, 793: 4207441972141088280734057870, 794: 4397934150197476827913759850, 795: 4596926316595586652827474186, 796: 4804792281705797515062559743, 797: 5021922058584382849328869242, 798: 5248722555182613689484387822, 799: 5485618295704258477069984050, 800: 5733052172321422504456911979, 801: 5991486228508002426815719537, 802: 6261402475301701333080509487, 803: 6543303741858946450905285538, 804: 6837714561722963378455094385, 805: 7145182096283051986707103605, 806: 7466277096963606051213804496, 807: 7801594907743960700949000443, 808: 8151756509675604512522473567, 809: 8517409609130970421571757565, 810: 8899229771588828461969917962, 811: 9297921602834531195851268718, 812: 9714219979529959777862768265, 813: 10148891331187245215547993864, 814: 10602734975663191221223594155, 815: 11076584510377034355391142064, 816: 11571309261543787320061392679, 817: 12087815793808125625662163707, 818: 12627049482760689878061744701, 819: 13189996152918959195978870030, 820: 13777683783859651786576215682, 821: 14391184287298069419105856949, 822: 15031615358023124634594092724, 823: 15700142401714084441377203063, 824: 16397980542787591098996821750, 825: 17126396715550358417594267021, 826: 17886711842065410771034749979, 827: 18680303100276877491522988120, 828: 19508606286081561360311437674, 829: 20373118273183778133458320225, 830: 21275399574724765449983360003, 831: 22217077010838260632179411313, 832: 23199846486451169343993151122, 833: 24225475883821531494697782922, 834: 25295808074486832813101046425, 835: 26412764055483014097178757689, 836: 27578346214889968804237171486, 837: 28794641731961759722351371983, 838: 30063826117310982372086476080, 839: 31388166898835484452139885750, 840: 32770027459303858556350798600, 841: 34211871031752548278772284453, 842: 35716264859093977687647313415, 843: 37285884524590579748861394570, 844: 38923518460115987806848673270, 845: 40632072639400673752129300324, 846: 42414575463747094337180792099, 847: 44274182847997609942310578598, 848: 46214183514849300594196193732, 849: 48238004505931946889525421000, 850: 50349216918401212177548479675, 851: 52551541876147039010384562987, 852: 54848856745079917639394818823, 853: 57245201602333536237114022805, 854: 59744785969613964515539259105, 855: 62351995821331449988466091712, 856: 65071400878573831543609957267, 857: 67907762200418949875852866531, 858: 70866040084540107092698343096, 859: 73951402289532005957331751320, 860: 77169232591877674590168543277, 861: 80525139690988018278755885205, 862: 84024966476277979232856334449, 863: 87674799670795146675673859587, 864: 91480979866491345649258758095, 865: 95450111966823518214883921610, 866: 99589076052990565170686659417, 867: 103905038690755971019484297576, 868: 108405464695475636367939373595, 869: 113098129373644577851404473535, 870: 117991131259998859170817958839, 871: 123092905369958432777075796052, 872: 128412236987976529870072690275, 873: 133958276013169939669531019316, 874: 139740551884446204479331411000, 875: 145768989108216487062234772851, 876: 152053923412691097170490155923, 877: 158606118553696417431847045996, 878: 165436783797931931934295220337, 879: 172557592110602218633091543840, 880: 179980699075416049556058362840, 881: 187718762576041099642814429720, 882: 195784963269243383580949581161, 883: 204193025881123335512830178821, 884: 212957241359090878236182734445, 885: 222092489913497780851227603386, 886: 231614264984172822820073009257, 887: 241538698168481624527315178361, 888: 251882585148964518765460484674, 889: 262663412660090356154504995095, 890: 273899386535208029575034561337, 891: 285609460876378579895067651923, 892: 297813368391435715163322531331, 893: 310531651944349233813920512829, 894: 323785697366761254448562966675, 895: 337597767580427105501057917306, 896: 351991038082228660789452118410, 897: 366989633845435601723754690835, 898: 382618667692977386826261193199, 899: 398904280200653395819254517900, 900: 415873681190459054784114365430, 901: 433555192876539531087229255477, 902: 451978294728708525214023001725, 903: 471173670120985588372050797999, 904: 491173254835220446432862090800, 905: 512010287492584845146484412308, 906: 533719361988531136324395159455, 907: 556336482009740068071399064008, 908: 579899117714618242279047917300, 909: 604446264662056374189988834755, 910: 630018505076433611630379753807, 911: 656658071540248718776792346785, 912: 684408913209287275550344075013, 913: 713316764648893234122621625751, 914: 743429217393715213042975617565, 915: 774795794337240928934816284899, 916: 807468027061529837515792402675, 917: 841499536221802614337232047468, 918: 876946115104959930393838357571, 919: 913865816485680423486405066750, 920: 952319042908502961911588247808, 921: 992368640529229737341624411924, 922: 1034079996654109332431762911842, 923: 1077521141120571341397403386532, 924: 1122762851668802145076610697775, 925: 1169878763459173895733432737528, 926: 1218945482896482311379736998403, 927: 1270042705928112564209840426896, 928: 1323253340989653981276400185806, 929: 1378663636778122744608506419570, 930: 1436363315039845896899358328033, 931: 1496445708567209282036578487803, 932: 1559007904605896258842021462474, 933: 1624150893881942976244820893255, 934: 1691979725465930503404211099660, 935: 1762603667699924360130192603237, 936: 1836136375421380008668856717532, 937: 1912696063727159213943851080855, 938: 1992405688530070149968413761596, 939: 2075393134169954709485716047155, 940: 2161791408351324312330912522447, 941: 2251738844689892053427982289844, 942: 2345379313161090374436414551558, 943: 2442862438754801545567295092897, 944: 2544343828652090726779455860435, 945: 2649985308251720770267133439311, 946: 2759955166386673475403099789409, 947: 2874428410083806869907819978392, 948: 2993587029233173241168779714732, 949: 3117620271547411926979127053250, 950: 3246724928206047105940972859506, 951: 3381105630594468612010288127863, 952: 3520975158562887897616477410546, 953: 3666554760646647127956344306190, 954: 3818074486705953843294627812035, 955: 3975773533460423034845675035419, 956: 4139900603411771887815710365915, 957: 4310714277666637214536144927329, 958: 4488483403190813123215639907302, 959: 4673487495046245204241629451110, 960: 4866017154182911354694265206413, 961: 5066374501379277964399166419563, 962: 5274873627947390097986152243705, 963: 5491841063841846500452896053582, 964: 5717616263835974099255567733750, 965: 5952552112453464578853008309794, 966: 6197015448369619941842104648894, 967: 6451387609023188709970129910797, 968: 6716064996207615136996693074302, 969: 6991459663439386169435859778910, 970: 7277999925931103886207676505429, 971: 7576130994027952290703815097177, 972: 7886315630998429231248733036419, 973: 8209034836103596418058528755338, 974: 8544788553903729460741526714750, 975: 8894096410797147287955714755082, 976: 9257498479823236816318777820416, 977: 9635556074800288403768986034253, 978: 10028852574908795418824727341746, 979: 10437994280872373856676062879735, 980: 10863611303931504965592652844878, 981: 11306358488849924787366667765407, 982: 11766916372239763961801564990016, 983: 12245992177539511607834487453052, 984: 12744320848028628464246059627690, 985: 13262666119314202551196742822008, 986: 13801821632778520931079437719552, 987: 14362612091531863067120268402228, 988: 14945894460472306341153073892017, 989: 15552559212113915719970799358900, 990: 16183531619906475296861224625027, 991: 16839773100833956878604913215477, 992: 17522282609145324707635966077022, 993: 18232098083140097717852712346115, 994: 18970297947002453464660671155990, 995: 19738002669751617842096992232436, 996: 20536376383452971700767593594021, 997: 21366628562913781584556907794729, 998: 22230015769169865076825741905555, 999: 23127843459154899464880444632250, 1000: 24061467864032622473692149727991, 1001: 25032297938763929621013218349796, 1002: 26041797385576000582369625213281, 1003: 27091486754099167408984061096127, 1004: 28182945621039436811282417218990, 1005: 29317814852360484763188469380980, 1006: 30497798951058731380716134731126, 1007: 31724668493728872881006491578226, 1008: 33000262659235183814081519827753, 1009: 34326491852926110526276105821510, 1010: 35705340429956356495500048880518, 1011: 37138869521411924622451440267117, 1012: 38629219967069644267226780200798, 1013: 40178615358763694337831877170404, 1014: 41789365198477765393682507986660, 1015: 43463868175432916528376380161993, 1016: 45204615566598118821992112719830, 1017: 47014194765213080671467587361162, 1018: 48895292942081479136595740785155, 1019: 50850700844567331975836762416180, 1020: 52883316738408211899530127054215, 1021: 54996150497646497195116039121846, 1022: 57192327848174163803231700285962, 1023: 59475094770587936660132803278445, 1024: 61847822068260244309086870983975, 1025: 64314010106747559065438412709786, 1026: 66877293730881687431325192921834, 1027: 69541447366121616918816177545634, 1028: 72310390310983979753319152713934, 1029: 75188192227619293524858181464065, 1030: 78179078837859260757658669457252, 1031: 81287437832327804842152878336251, 1032: 84517825000485590628268677129623, 1033: 87874970589764795726619149717517, 1034: 91363785902248291467082481888195, 1035: 94989370137655453801161398756590, 1036: 98757017491716010698603869808070, 1037: 102672224519343960454073227246547, 1038: 106740697772366151410092496101554, 1039: 110968361721914939732387042839470, 1040: 115361366975961956826368092270559, 1041: 119926098802850790583643914139778, 1042: 124669185972080868004022654618279, 1043: 129597509924003418690815024769614, 1044: 134718214280513689012974236132740, 1045: 140038714709261994367964528304147, 1046: 145566709154360370820516947589011, 1047: 151310188447031979898125505211430, 1048: 157277447310137702096803724432844, 1049: 163477095771019024080265786609550, 1050: 169918070997619096807349078318498, 1051: 176609649573385253852206425342508, 1052: 183561460227017093724267411668558, 1053: 190783497033705025399011223174627, 1054: 198286133105105766051740791002035, 1055: 206080134785924286913455951259466, 1056: 214176676375616994965530422655441, 1057: 222587355394399185288134561600051, 1058: 231324208413431926871476886628488, 1059: 240399727469780275150398352541295, 1060: 249826877087477024806306436682550, 1061: 259619111926794902903903858282467, 1062: 269790395084626208521306859330203, 1063: 280355217069693265922512204254601, 1064: 291328615477166797747643128851965, 1065: 302726195388153340970512449363108, 1066: 314564150520428320398942429589829, 1067: 326859285157739328217944658021195, 1068: 339629036885985812650521091739503, 1069: 352891500165597792693064105229860, 1070: 366665450770488753893927654278831, 1071: 380970371125047658469252263285168, 1072: 395826476571763477972460354798893, 1073: 411254742603244027745802489871124, 1074: 427276933093600703409672633110750, 1075: 443915629565423279460548833975619, 1076: 461194261529865886819548193737883, 1077: 479137137938708024340405275972933, 1078: 497769479788644748304553495300446, 1079: 517117453919499510741582247311995, 1080: 537208208049543370281513128274546, 1081: 558069907092647074919064078269009, 1082: 579731770803589829653889090465310, 1083: 602224112799502127836867703068534, 1084: 625578381007131993715400129218655, 1085: 649827199587396195485096741151797, 1086: 675004412390512738195023734124239, 1087: 701145127996910209394091171983043, 1088: 728285766401075776846633724874013, 1089: 756464107397538946738052845597325, 1090: 785719340730295196686468011045384, 1091: 816092118069154575020287144949660, 1092: 847624606878758096201928227674051, 1093: 880360546248341702038727418718373, 1094: 914345304752746677204951178080640, 1095: 949625940417679322961779585842763, 1096: 986251262864814583017230902369159, 1097: 1024271897715020987348060381346241, 1098: 1063740353330761125682320075116819, 1099: 1104711089981595892462307006170625, 1100: 1147240591519695580043346988281283, 1101: 1191387439655339764253910592315288, 1102: 1237212390925574690626025966996290, 1103: 1284778456452494990829233226377379, 1104: 1334150984591030161739618104847170, 1105: 1385397746569649033264079085023363, 1106: 1438589025231051837956193683375282, 1107: 1493797706983703451005350179037500, 1108: 1551099377078977592324977502565855, 1109: 1610572418332734533482318570551190, 1110: 1672298113414349146588255526290127, 1111: 1736360750830546535004742869861557, 1112: 1802847734735894350158767668809929, 1113: 1871849698706449115822481531031302, 1114: 1943460623617864164855763103650900, 1115: 2017777959774244383161311335135412, 1116: 2094902753439183950276117590000925, 1117: 2174939777925753277977786731439319, 1118: 2257997669407716887103312005936867, 1119: 2344189067619971039484826726136835, 1120: 2433630761622095504505007624351926, 1121: 2526443840805024325560621670846260, 1122: 2622753851327163276606626468293628, 1123: 2722690958172823755991785784326387, 1124: 2826390113032612069265970456163500, 1125: 2933991228212416784843441604124699, 1126: 3045639356784883554548008634432380, 1127: 3161484879204764376319516386806829, 1128: 3281683696617285755657387337131749, 1129: 3406397431096706053660787897070925, 1130: 3535793633060536116646611744883745, 1131: 3670045996113488118329838058723628, 1132: 3809334579584105681944821254585338, 1133: 3953846039026223475533484851711932, 1134: 4103773864966917551549475742004630, 1135: 4259318630192449100691154502765975, 1136: 4420688245873885709566584952625897, 1137: 4588098226844616747507844508037264, 1138: 4761771966352875646576237849731855, 1139: 4941941020623653451737160975884815, 1140: 5128845403576048431946742302750170, 1141: 5322733892054158457915227866236060, 1142: 5523864341942100491068450472029219, 1143: 5732504015546648477080676455520535, 1144: 5948929920644332374606657683899745, 1145: 6173429161603651508297858791951031, 1146: 6406299303007341112943259722223788, 1147: 6647848746214407376439536432805536, 1148: 6898397119316930779355317551024978, 1149: 7158275680962446691834888697663475, 1150: 7427827738529064471293660118664110, 1151: 7707409081157399483953096394984678, 1152: 7997388428160886234821473483000555, 1153: 8298147893354134143293856722998488, 1154: 8610083465857701451154337181278065, 1155: 8933605507957017621037375468973282, 1156: 9269139270613202791504126859283685, 1157: 9617125427244236129299819591578718, 1158: 9978020626416337178370164768812546, 1159: 10352298064107568778430054733760345, 1160: 10740448076228572334937735566562385, 1161: 11142978752109030998555590333304243, 1162: 11560416569682950887414131083801684, 1163: 11993307053131181401163436777097233, 1164: 12442215453765791987839842332792770, 1165: 12907727454968012800119940123354311, 1166: 13390449902019461518054086533162960, 1167: 13891011557695348536983250121102793, 1168: 14410063884518310798493113995825913, 1169: 14948281854602503175542820411276425, 1170: 15506364788049610799716682308517542, 1171: 16085037220891570656183958875514689, 1172: 16685049803609043819824168449851071, 1173: 17307180231290097851615771678718278, 1174: 17952234206530182283975172821446800, 1175: 18621046436212348314484589328413725, 1176: 19314481663345819649385158162679300, 1177: 20033435735181507108244024178275807, 1178: 20778836708864920831259413450679734, 1179: 21551645995930215818617016034137500, 1180: 22352859546983857840754489692613399, 1181: 23183509077972665661421886007454584, 1182: 24044663339478824029548767493555588, 1183: 24937429430533921473492651656959612, 1184: 25862954158495203059166455452470495, 1185: 26822425446580095904068198565803164, 1186: 27817073790709723558345700246365971, 1187: 28848173767368633057992125893483779, 1188: 29917045594246378653834785571179351, 1189: 31025056745487001593014803461929555, 1190: 32173623623434883211416744742294747, 1191: 33364213288829995905464566634140396, 1192: 34598345251472305106432161856883007, 1193: 35877593323444056632515580254383154, 1194: 37203587537049994338271609307035630, 1195: 38578016129709269105524749061283955, 1196: 40002627598109003613035027587346239, 1197: 41479232824008249429294178038617951, 1198: 43009707274162500911950054844789890, 1199: 44595993276923101114218051405894000, 1200: 46240102378152881298913555099661657, 1201: 47944117779189310556261099429006223, 1202: 49710196859679394486867802358932901, 1203: 51540573788206651013836802198036893, 1204: 53437562223729812777303406841914935, 1205: 55403558110955564979344325681437822, 1206: 57441042572873737644094937785113022, 1207: 59552584903793044889004529388335732, 1208: 61740845666328821093587961517238033, 1209: 64008579895911365238424857597692590, 1210: 66358640416504598253672231293216761, 1211: 68793981271349892486345394543503614, 1212: 71317661272679283934970057444157431, 1213: 73932847674475963853859804733408932, 1214: 76642819972498112301511348487927130, 1215: 79450973835924928534740056571220837, 1216: 82360825175131287067719845184002304, 1217: 85376014350249959857626768802856615, 1218: 88500310525337959944194241004565748, 1219: 91737616173126446538485123122674660, 1220: 95091971735501962459496140992085663, 1221: 98567560445040729668418191983592407, 1222: 102168713313097495533124764187939944, 1223: 105899914290136190948927875636615483, 1224: 109765805604181632042444034426405625, 1225: 113771193283469872120310539095739833, 1226: 117921052869579803514689801523449638, 1227: 122220535327540435729044764084697099, 1228: 126674973159627164610485151798391797, 1229: 131289886729786527240095013237443045, 1230: 136070990805862651658706033366694460, 1231: 141024201327040104811696041691045190, 1232: 146155642404167375009402954907061316, 1233: 151471653560883058451095421311451141, 1234: 156978797223733228787865722354959930, 1235: 162683866469743733376335192519362494, 1236: 168593893040195573779320686453020964, 1237: 174716155629645388794651866300906835, 1238: 181058188459536679140275000227478496, 1239: 187627790146061111217741961494883890, 1240: 194433032872253346998515292619988830, 1241: 201482271874637706375741021005730181, 1242: 208784155255090933098578892158986338, 1243: 216347634128942766400406396453655835, 1244: 224181973120705296790445342451587490, 1245: 232296761219203590802475861123264133, 1246: 240701923004274209788971782007579802, 1247: 249407730257605432130910077287592727, 1248: 258424813970713646981839124047488243, 1249: 267764176763484957967824140618533500, 1250: 277437205727159975794000686688315348, 1251: 287455685706103555386947650491244181, 1252: 297831813033180334721514504126791124, 1253: 308578209734051855476222280888835192, 1254: 319707938216222310789920115620477565, 1255: 331234516459188101998422700026723439, 1256: 343171933722591949005782567849433641, 1257: 355534666789845852070090701405470932, 1258: 368337696765269337188595637416276068, 1259: 381596526443390734228095202493032600, 1260: 395327198269680365975835178420652411, 1261: 409546312912626108164576640399383898, 1262: 424271048467724485839916892830607059, 1263: 439519180314644983035319377172158032, 1264: 455309101649532274915393819410766690, 1265: 471659844715141371979173526935980437, 1266: 488591102752254955447569352295355812, 1267: 506123252696611256922641286254645760, 1268: 524277378646375504218896129395592376, 1269: 543075296126019045035073055561928520, 1270: 562539577173328634024088141916141596, 1271: 582693576277154906994867051360796655, 1272: 603561457194424687753064451343608383, 1273: 625168220675887416175494833282535136, 1274: 647539733131042629585359752478706350, 1275: 670702756263704072335812679441391888, 1276: 694684977710697693392039019806832594, 1277: 719515042717266582828863521396088515, 1278: 745222586883866905899271646915240282, 1279: 771838270020186251303063741763018130, 1280: 799393811143400700904158178331205389, 1281: 827922024658910558926936487548336568, 1282: 857456857763058308684876665745077292, 1283: 888033429108637280324653641355847207, 1284: 919688068775347054572190680423598070, 1285: 952458359588743164917093657911776850, 1286: 986383179832665621554422059019604497, 1287: 1021502747401614623677846147487591813, 1288: 1057858665441074072255055670604124719, 1289: 1095493969525365696982675003469664810, 1290: 1134453176424250386882487822532585142, 1291: 1174782334511180318623311370757902964, 1292: 1216529075867847432892383159101984374, 1293: 1259742670141472479018316728428818781, 1294: 1304474080213136065603158197122179375, 1295: 1350776019737370796417180820702333527, 1296: 1398703012615213588677365804960180341, 1297: 1448311454464961662889458094993182194, 1298: 1499659676156986538068572255824972432, 1299: 1552808009481139790520320395733292300, 1300: 1607818855017534550841511230454411672, 1301: 1664756752283809987147800849591201736, 1302: 1723688452234384707674372422071320679, 1303: 1784682992189681523983975379146100758, 1304: 1847811773275862853601073393199008865, 1305: 1913148640458255774876416600453369682, 1306: 1980769965254371045106648307068906619, 1307: 2050754731215233987976941410834180457, 1308: 2123184622266649887649796215921782211, 1309: 2198144114005025303125952328225613580, 1310: 2275720568045462559712283145467243327, 1311: 2356004329523040680859896842728890474, 1312: 2439088827851495409213115816339495726, 1313: 2525070680846917026164254568053937634, 1314: 2614049802327600836872111661056230165, 1315: 2706129513304814950403979441635984290, 1316: 2801416656882996994241981980679918559, 1317: 2900021716991759392273170147031719072, 1318: 3002058941076075680836616507226015622, 1319: 3107646466875142011769945929778234485, 1320: 3216906453424662618200536823961141148, 1321: 3329965216421699826558324552595808770, 1322: 3446953368095762574438358199469775528, 1323: 3568005961734486838351757966808790919, 1324: 3693262641017091556254336031236632750, 1325: 3822867794313779335421691039194332368, 1326: 3956970714114397433384120384166003416, 1327: 4095725761754986283464866437718755283, 1328: 4239292537616325490949332681096528358, 1329: 4387836056974246172531213471126988170, 1330: 4541526931687319371792477450694975225, 1331: 4700541557913558825461268913956492487, 1332: 4865062310053998559115610911870100035, 1333: 5035277741127427794082646196764289585, 1334: 5211382789787193810929017395424321210, 1335: 5393578994197824268512706677957552625, 1336: 5582074712996280787878705083147454523, 1337: 5777085353569942323599828874448120571, 1338: 5978833607890937159258923653545207827, 1339: 6187549696154203668120613167259109435, 1340: 6403471618474669930531089742522848797, 1341: 6626845414907208756853259936695984136, 1342: 6857925434061555771629308454994509373, 1343: 7096974610593182332652154711768629954, 1344: 7344264751860200848154682253520601870, 1345: 7600076834045756410267481267000412856, 1346: 7864701308055034793828023244287340980, 1347: 8138438415506002236313232141990462682, 1348: 8421598515143296812402544776496284973, 1349: 8714502420015324706702901500511538625, 1350: 9017481745765587687202719206979752339, 1351: 9330879270400591290587334955958115107, 1352: 9655049305908367725798746534773552348, 1353: 9990358082113704664098849646925432237, 1354: 10337184143168612691406936474627379320, 1355: 10695918757089402353832391602114778863, 1356: 11066966338764988954966020552846311185, 1357: 11450744886874712432979257653673465667, 1358: 11847686435168064074325478460954986607, 1359: 12258237518573265193633495987026371935, 1360: 12682859654616659385819889316805008574, 1361: 13122029840650374087829702479479965035, 1362: 13576241067401694028191547060980833568, 1363: 14046002849374084164798517831067165046, 1364: 14531841772646818920248481411605550560, 1365: 15034302060637734370093170532411179780, 1366: 15553946158411737537905952886830918329, 1367: 16091355336136399592075372322853441977, 1368: 16647130312305245611392419213169232605, 1369: 17221891897369251284144496300865473815, 1370: 17816281658437585657529146257903261665, 1371: 18430962605729818628447970674590396131, 1372: 19066619901483662703451906966061889217, 1373: 19723961592044861669045607586672623550, 1374: 20403719363889095930868650315257219250, 1375: 21106649324349767740001100592550916016, 1376: 21833532807850282420908580590825862986, 1377: 22585177208464977793681819296712788065, 1378: 23362416839659197789401547387242312544, 1379: 24166113822086183031380235679888630795, 1380: 24997159000346486985219767235597236100, 1381: 25856472889644547994140059803514309099, 1382: 26745006653306882839626895694957692242, 1383: 27663743112157144914230446319916689190, 1384: 28613697786775039130057416743650633105, 1385: 29595919973698836617070193875375888205, 1386: 30611493856665016404478212802210021309, 1387: 31661539654013410832232951778996345076, 1388: 32747214803422179685312303680676279243, 1389: 33869715185174019207110095647396061120, 1390: 35030276385193261591559928994266853030, 1391: 36230174999132974647956742131787699078, 1392: 37470729978831867653000833781535492047, 1393: 38753304022502786601002774984625192104, 1394: 40079305010057880061198034072619085310, 1395: 41450187485020176719746625583516317963, 1396: 42867454184517379844972195257339462150, 1397: 44332657618901196005888853882051385939, 1398: 45847401702584520468158717245312104000, 1399: 47413343437739346154537960139775251600, 1400: 49032194652550394774839040691532998261, 1401: 50705723795773236966373450556265512689, 1402: 52435757789401123913939450130086135644, 1403: 54224183941301948277230817879517159495, 1404: 56072951919745741389655873424027752720, 1405: 57984075791803952210030966295696158116, 1406: 59959636127664498822125654803605200455, 1407: 62001782172971294457628166694777458740, 1408: 64112734091363688056165357762141754716, 1409: 66294785279460087023332346767177823090, 1410: 68550304756601011890673498202891728627, 1411: 70881739631740035679525259959146526016, 1412: 73291617649946553739726907624791770380, 1413: 75782549821062183481895201583751205263, 1414: 78357233133132880842076215608511229415, 1415: 81018453353321656721019131504035339537, 1416: 83769087919092159661630333467319344902, 1417: 86612108922541440552472192615179632742, 1418: 89550586190851013626818983550558814889, 1419: 92587690465918960312381724727166445110, 1420: 95726696686332376146505918443171660625, 1421: 98970987374939026118276437676742560264, 1422: 102324056135379743432459471263142178485, 1423: 105789511261048976512902596439531532566, 1424: 109371079460060057837671640558228717300, 1425: 113072609699904337559514844445146843472, 1426: 116898077175609399692092533607036637857, 1427: 120851587405321266865514819340648620862, 1428: 124937380457358912643772141796859437854, 1429: 129159835312916652764103424563956670300, 1430: 133523474368721196662101633251149823925, 1431: 138032968084085429989744342641002104875, 1432: 142693139776940493084095678732486636969, 1433: 147508970573571548730224671300676243591, 1434: 152485604516930928407097683383484266510, 1435: 157628353838555246722760639034336216136, 1436: 162942704399270720489853224525723269795, 1437: 168434321304033467550147269349447360294, 1438: 174109054696419141315515890296286539118, 1439: 179972945738449034728553750103340839325, 1440: 186032232781617921513478910563182232444, 1441: 192293357735172557401982780429019456969, 1442: 198762972637879108865432799270626669004, 1443: 205447946439712986100137659510287259781, 1444: 212355372000105810413242676805207816705, 1445: 219492573309591728816879034317080350983, 1446: 226867112941909191440813277312570747145, 1447: 234486799743834826784604048875528356971, 1448: 242359696770253388472695000770509170206, 1449: 250494129472202113601016657658116885375, 1450: 258898694145869442049569648660373941152, 1451: 267582266650777119653998333871688332247, 1452: 276554011405631474170238269248906446792, 1453: 285823390670594346502222808229127105074, 1454: 295400174124997022998049389765214784995, 1455: 305294448749801797154111873648107967492, 1456: 315516629024405747970164359073870491229, 1457: 326077467447680222173319384811207626600, 1458: 336988065393447621514574974879775699372, 1459: 348259884310914705271679879631949049780, 1460: 359904757280909011630794460361074410538, 1461: 371934900939102477916959218389244857418, 1462: 384362927777754206102413138268506970021, 1463: 397201858837862893052822862772992037235, 1464: 410465136803989050790556876831592919085, 1465: 424166639514388116438037562729473373486, 1466: 438320693899488240621648045435196959242, 1467: 452942090362151303283202948578566379295, 1468: 468046097613572904390385124958730619192, 1469: 483648477979107092056857426409232236010, 1470: 499765503188744811845488653259134061244, 1471: 516413970667431889729975411863080081224, 1472: 533611220340883210895592492267492392503, 1473: 551375151973035052959106187501778547015, 1474: 569724243051777714078869714336553502625, 1475: 588677567240126095472954965375170347997, 1476: 608254813410517219620274841577537789254, 1477: 628476305280471269092869681239382035111, 1478: 649363021668417110482089106581996800736, 1479: 670936617389064931646215631627734512060, 1480: 693219444808308092528746108408911793239, 1481: 716234576078254109447577888083725273959, 1482: 740005826073621415936329176309708825539, 1483: 764557776051394742131574284792974302805, 1484: 789915798056308219059157433980611758115, 1485: 816106080095422250986408555099636706156, 1486: 843155652105778433840074131252109568468, 1487: 871092412739856974449839116812405949463, 1488: 899945156994323847635597208986502059289, 1489: 929743604708340998940330812008055415670, 1490: 960518429958522963981451968247615571768, 1491: 992301291378458055449596203783102865285, 1492: 1025124863431572512298240504372933893698, 1493: 1059022868667002481099668362066093137208, 1494: 1094030110989052198741424671895432081910, 1495: 1130182509971758083662737515471154158801, 1496: 1167517136251048459523457118438435734632, 1497: 1206072248027988195015615498189010425646, 1498: 1245887328717627537181110407053143579875, 1499: 1287003125779035759903231323132670516000, 1500: 1329461690763193888825263136701886891117, 1501: 1373306420616547671126845059808771245199, 1502: 1418582100279183135137313919163744611210, 1503: 1465334946617783561814630036179107930696, 1504: 1513612653734759530017526259861629678205, 1505: 1563464439696213993716384678301014319431, 1506: 1614941094722713228367155822930278965324, 1507: 1668095030888183105149797247519563263487, 1508: 1722980333373639710221714255936544610213, 1509: 1779652813323895051112691937493275900640, 1510: 1838170062356853750560836014387165897751, 1511: 1898591508776536523215092101916644734126, 1512: 1960978475542532205781057345396110080746, 1513: 2025394240050193548750246784190116959083, 1514: 2091904095777554301862779830720186765825, 1515: 2160575415856657801620130127396601613839, 1516: 2231477718628751807313395954393627156678, 1517: 2304682735244622286166458817442330457493, 1518: 2380264479373211819043135033180865953593, 1519: 2458299319083597933290739975588639913960, 1520: 2538866050967394665741511337736337646822, 1521: 2622045976570688763353306228619701197220, 1522: 2707922981206731940550655607258234921458, 1523: 2796583615222784382740474040856321114152, 1524: 2888117177796744121961996863481080757250, 1525: 2982615803341503976179051696005120224577, 1526: 3080174550597354460133578989992600710402, 1527: 3180891494495199523837557418419727460583, 1528: 3284867820875874297854866890890114734440, 1529: 3392207924153452428300151849140308700620, 1530: 3503019508013107340706503153715459439135, 1531: 3617413689236849218690486699230663550120, 1532: 3735505104753300028632631618647052984126, 1533: 3857412022010595043668172932897782160438, 1534: 3983256452774513571402317362452698824910, 1535: 4113164270457046596687344259862579939532, 1536: 4247265331083807518632379721321456268679, 1537: 4385693598011986873811172464601561040968, 1538: 4528587270513945762405321738705440092603, 1539: 4676088916345038581429933773569294261235, 1540: 4828345608417856657751813260670405103571, 1541: 4985509065708793590462102906287902242693, 1542: 5147735798526653777473353718656776051935, 1543: 5315187258276961029029844229698454778001, 1544: 5488029991859677773715074283837789258005, 1545: 5666435800842220652541448314024017081118, 1546: 5850581905553958890153341953182905874297, 1547: 6040651114252811450773802339294340809537, 1548: 6236831997519121462431059121804263835744, 1549: 6439319068036685669987130768251283335700, 1550: 6648312965925656816271400679772663779731, 1551: 6864020649797022030147590897007762961557, 1552: 7086655593703494823378002063833638733692, 1553: 7316437990166946592699616833531354911573, 1554: 7553594959467950148686513765206276332400, 1555: 7798360765388617440490476800142578927168, 1556: 8050977037605691145961262617379106893607, 1557: 8311693000936800120986617647413681760089, 1558: 8580765711648916968128569908862807858077, 1559: 8858460301044367459544239649173485609090, 1560: 9145050226546241655095435675456471213374, 1561: 9440817530511750873400887128525102883050, 1562: 9746053107008968945969854946579275550253, 1563: 10061056976799496323982724378320247274070, 1564: 10386138570776897699583240005533846228720, 1565: 10721617022118294111300879958656795681727, 1566: 11067821467414245473548388055474400555521, 1567: 11425091357050045737330444087123696839842, 1568: 11793776775119777282986614097061549565288, 1569: 12174238769162940693809364157051309012420, 1570: 12566849690022197996332017608789608083314, 1571: 12971993542129749223451407990577313551957, 1572: 13390066344539111423681390555352209300441, 1573: 13821476503028593889295382128265725457026, 1574: 14266645193612571525140101316505187638875, 1575: 14726006757806758281011522810861817647486, 1576: 15200009110004083021400239371051767831673, 1577: 15689114157328479953978540694207577474781, 1578: 16193798232344933888778097136641377589301, 1579: 16714552539015476523707617004948193446275, 1580: 17251883612302523293667801378616630723938, 1581: 17806313791832981004049940595952236488989, 1582: 18378381710048954709565959117356034045626, 1583: 18968642795283648606471174187975250526914, 1584: 19577669790214200898277149916663590160135, 1585: 20206053286156727802917377116665528100452, 1586: 20854402273682788549513827814948445887987, 1587: 21523344710050833153156141436233019518750, 1588: 22213528103960970088758743797991090055558, 1589: 22925620118156604193077050587843661667620, 1590: 23660309190412159054931489112539937306848, 1591: 24418305173462226026373553546995875617627, 1592: 25200339994444087406536213435901662689794, 1593: 26007168334442658312725535116810982082161, 1594: 26839568328744494665699148030346372021260, 1595: 27698342288425638399643940633635778570228, 1596: 28584317443916730715736989648170031498488, 1597: 29498346711208035625096160181520548669694, 1598: 30441309481376795323275876211869020871017, 1599: 31414112434139702720919278494304352579875, 1600: 32417690376154241824102577250721959572183, 1601: 33453007104814231206634568834252067530087, 1602: 34521056298307127650200260789840693447039, 1603: 35622862432723524773564047600591620474611, 1604: 36759481727032834297334619181982868193810, 1605: 37932003116763385216396036596083684144149, 1606: 39141549257250138871243034824146893141432, 1607: 40389277557338916599575631087245664105779, 1608: 41676381244462492794128018619459154745923, 1609: 43004090462031141893576046232131339283625, 1610: 44373673400108265833414174147846823131033, 1611: 45786437460370592180018097454654125762209, 1612: 47243730456382146639125256475201485557926, 1613: 48746941850241791637271332996842921594539, 1614: 50297504026695610706485495279896144769485, 1615: 51896893605837832676324724372468638684687, 1616: 53546632795557357169752166455397628534844, 1617: 55248290784921291361962286829338022618145, 1618: 57003485179722265948521834701738678421349, 1619: 58813883481452695155464304054870553436360, 1620: 60681204611006611632952513664174735563434, 1621: 62607220478448273296879161314388228250413, 1622: 64593757600226437608809675150800761682315, 1623: 66642698765254062321100804776702438717922, 1624: 68755984751315254218264566880232672144875, 1625: 70935616093304583685847007991159666098679, 1626: 73183654904848448867540438473174344075670, 1627: 75502226754904045590148716826986516533057, 1628: 77893522600978716067675261669847531834806, 1629: 80359800780661049649804576562965921695475, 1630: 82903389063205132690374405132401276101050, 1631: 85526686762960833261150746165714536727005, 1632: 88232166916496002397533755182876654157205, 1633: 91022378525311020523414800627504843113662, 1634: 93899948866102260607570160618726171594330, 1635: 96867585870588824684642587049077568806146, 1636: 99928080576976385190854302771818195507418, 1637: 103084309655193176038845274579543287624753, 1638: 106339238008096180814672350296895542938848, 1639: 109695921450910408688484641855278054316360, 1640: 113157509471230885841519620824589853318260, 1641: 116727248071985676199747488789041121983568, 1642: 120408482699828936375465082551662467674163, 1643: 124204661261505763907840490901149694071182, 1644: 128119337230805474780434782661196752002675, 1645: 132156172848797007097973143732608413596901, 1646: 136318942420119455804633282594364118870621, 1647: 140611535708182363299559887896839185406573, 1648: 145037961432214389489427685180617331098024, 1649: 149602350869185430852497209043356597608875, 1650: 154308961563716222079735293780517268790662, 1651: 159162181149181008424137378091161149008138, 1652: 164166531283303096726173462843072095335410, 1653: 169326671701640055015539018518705699850330, 1654: 174647404392455113639317800019372440640580, 1655: 180133677896574006306024799468201257241780, 1656: 185790591735932160859341593488427864239206, 1657: 191623400974625892978847721669762887224010, 1658: 197637520916393159778610138707329017740693, 1659: 203838531942564585384018857484505756167480, 1660: 210232184494643970555920434333513855824223, 1661: 216824404205799439501151597527348613503086, 1662: 223621297185671858108005694276757667011704, 1663: 230629155463036280733315769829856728366831, 1664: 237854462590985052006674013310829555807395, 1665: 245303899419437913541037116166052239846061, 1666: 252984350039925153650180418719145316631826, 1667: 260902907907734605017003921684746498516403, 1668: 269066882146662257820916698151184555362272, 1669: 277483804041759534527674431707495428212025, 1670: 286161433725627991209904771339900788624872, 1671: 295107767063974496251592243518106809957385, 1672: 304331042746306921569506210339059205494747, 1673: 313839749587822198745641666552447374489321, 1674: 323642634048715381224461508374001874352425, 1675: 333748707977320256428395802157949938763484, 1676: 344167256583679214774724367914264615318981, 1677: 354907846650332656774577448740278805781989, 1678: 365980334987316359577499492665661423156220, 1679: 377394877138559089794329589034333523822720, 1680: 389161936347082504011271085636055422264324, 1681: 401292292786621190557291178310378056588836, 1682: 413797053067502749043669672231562125696658, 1683: 426687660024856256094871226711613620285845, 1684: 439975902797452509721828685778957458838000, 1685: 453673927205721269316833783775783610703320, 1686: 467794246437739506976775111608393022209053, 1687: 482349752052240657962887540925835136720740, 1688: 497353725307958208396664918548576500570384, 1689: 512819848828887897371554062220903289550130, 1690: 528762218615331555088826226879544901167527, 1691: 545195356410872371074704272735369048924689, 1692: 562134222435726415975597022642148002675881, 1693: 579594228497218762288102882601473336765100, 1694: 597591251488444805746508999799665944566660, 1695: 616141647286498628873307956507246249662412, 1696: 635262265061980727342758633558885467930686, 1697: 654970462011837401470060834112028353314761, 1698: 675284118527933869908522234215965152162520, 1699: 696221653814122968723573796976021441661750, 1700: 717802041964941442478681516751205185010007, 1701: 740044828519446608929091853958115568986164, 1702: 762970147504097887787893822256219849371554, 1703: 786598738978990637725956554797278124357808, 1704: 810951967102164263980984405643613443347625, 1705: 836051838727132970358751925465426223753244, 1706: 861921022549226171951777077723669881527186, 1707: 888582868816776806015468170319304987709289, 1708: 916061429623659935353293704664261165680563, 1709: 944381479800161498529884419450242134471605, 1710: 973568538419648201851756811932637866236071, 1711: 1003648890939014757529114525804772812444576, 1712: 1034649611991404349880377024889805948451966, 1713: 1066598588850232767185892564930056790115492, 1714: 1099524545584096492698787529446425808960485, 1715: 1133457067922710638072138797746330685194571, 1716: 1168426628854604371943988173648061076656356, 1717: 1204464614977899904017040550277724793430409, 1718: 1241603353626116601935133531509635427501801, 1719: 1279876140791574929056038110412443745546155, 1720: 1319317269869626093912245397158785002901753, 1721: 1359962061247603108750056330533001022811146, 1722: 1401846892763077891420050435782921418973709, 1723: 1445009231056717653171633051674494164837538, 1724: 1489487663845762650867366119648959070605125, 1725: 1535321933144897017630429081796659362863565, 1726: 1582552969462055408849028210050341395113316, 1727: 1631222926997501215103529967929557707274660, 1728: 1681375219875327721201833943152266777825092, 1729: 1733054559437372469717283290044275542482740, 1730: 1786306992630397874710969065930279993530728, 1731: 1841179941518278501517284167616876198477309, 1732: 1897722243951848075290887164802970670035779, 1733: 1955984195429997917538913727371549522655006, 1734: 2016017592186583869120124322228807307858970, 1735: 2077875775538691593667272042037771337062872, 1736: 2141613677532831241625032098057988491948517, 1737: 2207287867926682588244859017849269988676029, 1738: 2274956602545091757332316519809900057062533, 1739: 2344679873050131347512524469147852330603290, 1740: 2416519458166178053962910323080826683013954, 1741: 2490538976402136614754617183069000726495038, 1742: 2566803940314147020741857199436825485292885, 1743: 2645381812353354350387072647528700656565179, 1744: 2726342062344598291243970336667065409029860, 1745: 2809756226643193380147979076327264594704745, 1746: 2895697969018322254247325865029474629995508, 1747: 2984243143312953802987213049129995837626487, 1748: 3075469857931627124375487934417729522202013, 1749: 3169458542208911724615579730356050273697000, 1750: 3266292014712865596629588272103919719684547, 1751: 3366055553539366839888542445766361166135204, 1752: 3468836968654792543650918885868953010691040, 1753: 3574726676346161983924385238571158169261725, 1754: 3683817775839551051322373817401051497424420, 1755: 3796206128149322537872121900182662159228241, 1756: 3911990437222503807420937006192549828899684, 1757: 4031272333444480835500888704164496363681686, 1758: 4154156459574067047582172896269352052007031, 1759: 4280750559177948266124532321685590709003370, 1760: 4411165567636502893727652799725970383582718, 1761: 4545515705795050750500358651870382988186314, 1762: 4683918576336696329734155119529513589827658, 1763: 4826495262955104262123827190438060829061153, 1764: 4973370432407778155253526316242844344573385, 1765: 5124672439532710418254508515826522600609941, 1766: 5280533435313631955425559713040649796775465, 1767: 5441089478081518530016413892489308199319929, 1768: 5606480647942507023374562583725669127988521, 1769: 5776851164524941659873115036048663114937695, 1770: 5952349508140909502130662763236950728528684, 1771: 6133128544460338166089749412557583307068767, 1772: 6319345652798518839604562697210438023241550, 1773: 6511162858120786446819766577778364926946013, 1774: 6708746966871038378408979787060247103179750, 1775: 6912269706733805859936155115580770892194054, 1776: 7121907870442710074828422368434553047727682, 1777: 7337843463751340976339671250105665526337260, 1778: 7560263857685892761905455418833343917244062, 1779: 7789361945202278758472065509114228369126600, 1780: 8025336302373932563237571980294779250756300, 1781: 8268391354240084356595173268406241855198176, 1782: 8518737545447984082077112629884273268761094, 1783: 8776591515826329476185591848477738781761689, 1784: 9042176281031049610986292577509011838783245, 1785: 9315721418408596645489064435708989370524469, 1786: 9597463258226012911089716132158337004512929, 1787: 9887645080421270408475092400425112950304770, 1788: 10186517317031728481382143156507032880864866, 1789: 10494337760463026157910800552509870425432010, 1790: 10811371777765321805152346144711499265489879, 1791: 11137892531088517813516189325593809889812108, 1792: 11474181204492965595127263976240658672733891, 1793: 11820527237297139926370474832027317722017807, 1794: 12177228564148905369732416163985994571309670, 1795: 12544591862012275060173347722472359244046903, 1796: 12922932804266987528897386291108558284524280, 1797: 13312576322123804564848753689176255125112158, 1798: 13713856873564166596625513497299706749207160, 1799: 14127118720018736045636750699617456881311725, 1800: 14552716211005418005132948684850541312590849, 1801: 14991014076953676011289439394970540421861988, 1802: 15442387730448363289492676946827168544596921, 1803: 15907223576132871507960364168750022280398562, 1804: 16385919329518164710931105850817769087241385, 1805: 16878884344951220830025131180984215659580858, 1806: 17386539953003552219964871974446413826117272, 1807: 17909319807547825412134603270711842061393357, 1808: 18447670242798154252456532648116438246904907, 1809: 19002050640597405466197703977606842321053540, 1810: 19572933808242837304672225027800498209481360, 1811: 20160806367149596270203427106156960870472824, 1812: 20766169152660030143204019897118002904900168, 1813: 21389537625315443974415368124511782893607123, 1814: 22031442293915835855052489509763576677617505, 1815: 22692429150702307814484325155610270148732358, 1816: 23373060119006260978552660565770602425866730, 1817: 24073913513719160198707702330267411589158084, 1818: 24795584514946598972622146485353975132184526, 1819: 25538685655220618058549873928821959736691905, 1820: 26303847320654738379516399526912590943781620, 1821: 27091718266436968469332058999564180929593866, 1822: 27902966147067146894819024985472934375689121, 1823: 28738278061756389082181003004910619210874204, 1824: 29598361115418134291077518460315335403586750, 1825: 30483942995692340860959609721949330792795099, 1826: 31395772566456765282571775715588003409132613, 1827: 32334620478291992350263579043602637456626234, 1828: 33301279796379969106727880491661424703794769, 1829: 34296566646329244238310747147664839490574535, 1830: 35321320878433937019039707727760782467717785, 1831: 36376406750887666110543978036746824592455791, 1832: 37462713632488269058784695792011875893039111, 1833: 38581156725384149030225659607573893303383795, 1834: 39732677808428507338475836002967756141425565, 1835: 40918246001723570069537718918088365292496141, 1836: 42138858552953206373244111655326855421732185, 1837: 43395541646119076823784928057386091817027588, 1838: 44689351233312655065605577356497222364030752, 1839: 46021373890173147491957400810472661489846635, 1840: 47392727695699507038180086415408337440470086, 1841: 48804563137103411752378288723762455918172986, 1842: 50258064040409270440055764682612968116562013, 1843: 51754448527527040549257397842950059733038281, 1844: 53294970000543912137117431914902281880953875, 1845: 54880918154001741201408795026747551723720527, 1846: 56513620015948521242261975310131861303268895, 1847: 58194441018574179427502571579696887885537742, 1848: 59924786099263589386584792985885004002385100, 1849: 61706100832922923109471297093651456522575000, 1850: 63539872596459336786702846316806859551222764, 1851: 65427631766318517268030842666066129833124679, 1852: 67370952950009825188774721810114716943378422, 1853: 69371456252574676254257996014226320491002233, 1854: 71430808578980422724679205565325409535341535, 1855: 73550724973449352362958820460243849915161295, 1856: 75732969996760532083864127998517020593740791, 1857: 77979359142591108905489195759391328910134418, 1858: 80291760293993362744249170815935430293952943, 1859: 82672095221134305875868191384112819286758200, 1860: 85122341121455964860570648618210990142492639, 1861: 87644532203446685358824902714882088097498633, 1862: 90240761315246892123800470058435668367783935, 1863: 92913181619346739765141403639335218061558813, 1864: 95664008314668029507699782676107535163671365, 1865: 98495520407358668662814112828386043342039288, 1866: 101410062531664839123433827120996801871554118, 1867: 104410046822283945831589672011997862390810762, 1868: 107497954839640363519148716631132136446924023, 1869: 110676339549566018509524250906452596245408440, 1870: 113947827358908961175629034752466582068886470, 1871: 117315120208635333752283890034504840221064086, 1872: 120780997726033548383095326244127836720276225, 1873: 124348319437674093156601079636921240241787962, 1874: 128020027044824211921357710559027384266649000, 1875: 131799146763063790207250005304405120478900361, 1876: 135688791727897158862480183289001251910301886, 1877: 139692164468205234207238255169848532611147557, 1878: 143812559449433484718637448310794816419480218, 1879: 148053365688463686582704780998822076298210405, 1880: 152418069442171341962802939167993644252844977, 1881: 156910256971726023650131079907915129924767174, 1882: 161533617384748818044426030157299715901448409, 1883: 166291945557499506406187783344043042314534878, 1884: 171189145139326194380356742395417581059236130, 1885: 176229231641671815409487530302217850452007387, 1886: 181416335613995339496338175675291780004357523, 1887: 186754705909030660706666553292223320927706878, 1888: 192248713039873061921465120214608474899151280, 1889: 197902852631451912018290889751846175017276700, 1890: 203721748969018888548080806839085873409222663, 1891: 209710158646353589075380551065506324110555541, 1892: 215872974316462949034790068311792114803360768, 1893: 222215228547627476999327377660931337519227930, 1894: 228742097787726004875938672290676073251112495, 1895: 235458906439851487440117948662414751746035425, 1896: 242371131052313431017875037233367567350390976, 1897: 249484404626207844803286441041017222801266718, 1898: 256804521043823251651497040551112296246458295, 1899: 264337439621241331244215401011574782781334700, 1900: 272089289788583262011466359201428623427767364, 1901: 280066375901447845568248481717977121765830398, 1902: 288275182187185106927480861934498895209154826, 1903: 296722377829749335448869068867067104949579464, 1904: 305414822196978537321624475491324386207138350, 1905: 314359570214253084228181897886953506729950270, 1906: 323563877888595040544848710079341268243350278, 1907: 333035207987381310882223234930566921371066351, 1908: 342781235875958450915909855966319285240611144, 1909: 352809855518564809408156722848357746339640390, 1910: 363129185647086702371268910149149152584766993, 1911: 373747576102299648025575523786476989131026713, 1912: 384673614352373402423945044973430693054218643, 1913: 395916132193550721591800039752382776657876433, 1914: 407484212638044530444951338680763930621994820, 1915: 419387196994336597778328640988515637140928750, 1916: 431634692145202999016827948773519398239274548, 1917: 444236578028937695571550278721551746219224713, 1918: 457203015329395575643972370763403591173830810, 1919: 470544453380630393038248327984084169870052370, 1920: 484271638292061317700921219995285769876393805, 1921: 498395621300264386957594139661914904785275330, 1922: 512927767353652135411965358701027725220931707, 1923: 527879763936476202951968110645920036905758794, 1924: 543263630138763896173977941441058199308011100, 1925: 559091725978980633941148481298313317618632967, 1926: 575376761986396071222827176058084413124270202, 1927: 592131809050322598728023510231907577504041350, 1928: 609370308543590994569721078158344505753246979, 1929: 627106082727829397306582084065079630894972195, 1930: 645353345448318619933615779058934561872409372, 1931: 664126713126409278261223804893870154281524038, 1932: 683441216057704415059243252710086070145621992, 1933: 703312310024435417776917212697059694728111811, 1934: 723755888230689211116144545349876787252027480, 1935: 744788293569381118983800284897623329523811384, 1936: 766426331230110600455862693324715237997598939, 1937: 788687281657286442867926694461098498097562065, 1938: 811588913868164118077309502293768840003949925, 1939: 835149499140701056072067990291237777551833530, 1940: 859387825081405748983159033075649135425638325, 1941: 884323210083634058665255574996164926064666511, 1942: 909975518187071057883524303147934812769277935, 1943: 936365174349429389500998978473009079907862954, 1944: 963513180141695685953126594506747030515761180, 1945: 991441129878565264237073831290682236831192947, 1946: 1020171227196022316757683410004293870517496706, 1947: 1049726302088348378540247976304143049122065214, 1948: 1080129828417176195331669321286587690711167057, 1949: 1111405941905549479818145590739116367242780000, 1950: 1143579458630301665664240006110545368915059329, 1951: 1176675894026428898785508782184245465533665048, 1952: 1210721482417504396219216523662601652136179376, 1953: 1245743197086563215894590527223118960072913202, 1954: 1281768770902278683167516719540860443130307320, 1955: 1318826717515654486899160825985211020969456836, 1956: 1356946353142870071117550937780046987060960843, 1957: 1396157818950341697358512735475562356104045295, 1958: 1436492104058497734745724852296636956267964954, 1959: 1477981069181214654702422049514025480619599210, 1960: 1520657470918320177914639277247113472181645153, 1961: 1564554986719042364085227429425894281463674979, 1962: 1609708240534768479916261201915809290266567989, 1963: 1656152829179975566133060952832169077820577902, 1964: 1703925349420706097654088225457498186848567210, 1965: 1753063425810487348828764073209783931216955698, 1966: 1803605739294132404035202382553315081341190088, 1967: 1855592056600414568536728473961840601327835478, 1968: 1909063260445175620937659060948648856259756235, 1969: 1964061380567012302624155966071951926644451875, 1970: 2020629625618285067432170725261207144994992239, 1971: 2078812415934808833368620144510853807585221613, 1972: 2138655417208217715431844885515291279369574680, 1973: 2200205575085644913617857845505033592721522553, 1974: 2263511150722025533817142690940119270064496250, 1975: 2328621757311014594133664064174539456980750339, 1976: 2395588397621215290008835331658621643021314292, 1977: 2464463502565134245725579502592034085209328984, 1978: 2535300970829021467547395315846813198183591546, 1979: 2608156209592513548223075037746157905702847505, 1980: 2683086176367779880674969950590007819202341357, 1981: 2760149421988673761061033114268064448054050548, 1982: 2839406134781213852952373747778159055380262422, 1983: 2920918185947567114582770377976676661508796149, 1984: 3004749176196572544459946686955919368234128060, 1985: 3090964483654736576896042159262866214940589314, 1986: 3179631313092546273793802882159493889001969611, 1987: 3270818746501886244063493400323024051287288941, 1988: 3364597795061310125684361619251416376860936489, 1989: 3461041452526908153028282986522280729367368365, 1990: 3560224750087529486464584716859554522268776125, 1991: 3662224812724162303217742306542356590926722479, 1992: 3767120917114346857096063738777247515406335526, 1993: 3874994551123597548057533501867770741416429535, 1994: 3985929474926940257994009093217001343955328335, 1995: 4100011783804831583821441379839563991285227198, 1996: 4217329972658917930562969936711305445974785514, 1997: 4337975002294315534109569503386742455494341143, 1998: 4462040367516348205694592687945941817364967127, 1999: 4589622167090968789784046573687400867942870250, 2000: 4720819175619413888601432406799959512200344166, 2001: 4855732917379000237574365609687488912697273143, 2002: 4994467742183366148074839035447416380393781644, 2003: 5137130903316893622770745464235084139384928426, 2004: 5283832637599517075572081746564260420858901705, 2005: 5434686247639634059061258993904042430607990074, 2006: 5589808186334383050291570992756471405633041387, 2007: 5749318143678144230778676663789672984169195116, 2008: 5913339135941752405965378691599572441324623941, 2009: 6081997597286587859405678030809218670282246785, 2010: 6255423473879432172551153347179787953125682826, 2011: 6433750320575743037411316728215679204642749660, 2012: 6617115400240816052275556661314890288999332009, 2013: 6805659785780163657391920602286596663406217911, 2014: 6999528464952353007567067145415164276505069670, 2015: 7198870448039506994791503590601126801607534137, 2016: 7403838878452687162912842119176262318542314409, 2017: 7614591146351445269661694564912786246445478891, 2018: 7831289005358953156344654888013498638339711692, 2019: 8054098692456299826324570548607480763080403880, 2020: 8283191051141781691732068101840743191755759916, 2021: 8518741657943308344041302580996941768179250799, 2022: 8760930952374403498169602637389577451855415964, 2023: 9009944370426700552244228695797096011740585251, 2024: 9265972481694316138437595284729122693073711400, 2025: 9529211130228034799395854632912272457677896880, 2026: 9799861579219855238744997642818047729388291567, 2027: 10078130659621135236933601810787303619515113811, 2028: 10364230922800330115415428619787879783434758914, 2029: 10658380797349150440403847607713189208549844510, 2030: 10960804750148870398245267228037581609577682339, 2031: 11271733451811500913798689538973402825112404379, 2032: 11591403946613603138135282386492611425148475178, 2033: 11920059827043660471886625110700606109457615243, 2034: 12257951413087152938966999455842406831025654415, 2035: 12605335936376788660643906067688568691477294599, 2036: 12962477729338745637101954446070534143126297085, 2037: 13329648419469265315863347103932314055721954884, 2038: 13707127128879519866370496154104287110788727040, 2039: 14095200679250350101462435045670967566714006190, 2040: 14494163802342243065803242497250145705564482929, 2041: 14904319356209789989230727462504226498494263931, 2042: 15325978547273839186092526952960232758544597811, 2043: 15759461158408637244144834830819680263402565217, 2044: 16205095783205438232082764786847977319531548455, 2045: 16663220066578357477963673318612506891057322162, 2046: 17134180951882656619355889974597586372298980947, 2047: 17618334934720173062514849536736413843694654543, 2048: 18116048323611252751541173214616030020513022685, 2049: 18627697507717313357328883548487129542980353125, 2050: 19153669231803058848943059805108758933859747374, 2051: 19694360878632389188479682121479772827588278091, 2052: 20250180758997203961018562965051517467373563574, 2053: 20821548409583589567679943310731809893410960813, 2054: 21408894898885309715106534167513145969112337635, 2055: 22012663141380091963647773040348591535494857021, 2056: 22633308220189922777870335143856096247251187948, 2057: 23271297718452433681930253947266040250043569734, 2058: 23927112059636485682887466272819725468557276242, 2059: 24601244857041242112722641487525252331485884885, 2060: 25294203272724365584159904646608138971697036406, 2061: 26006508386111487092631615069752229687889047419, 2062: 26738695572545778772495897103306702147812265676, 2063: 27491314892043320887814631666080168776331811888, 2064: 28264931488526992879603605279805458570836160570, 2065: 29060125999818842393508123538658855855869573724, 2066: 29877494978678299986437859187588252356283557915, 2067: 30717651325181215594079225685922159612710890246, 2068: 31581224730742500897001026737587458361246031363, 2069: 32468862134093174645484430948409904593113694670, 2070: 33381228189530831120385246576357623531476650368, 2071: 34319005747770990684777087747947525376490393829, 2072: 35282896349735451425203004555804514075824949148, 2073: 36273620733622647942922713748119798292462316154, 2074: 37291919355614143333586997222803939193763027250, 2075: 38338552924580739339245889549713324449360541521, 2076: 39414302951161293776274047281093717842584188891, 2077: 40519972311597190003244878215733219997449415843, 2078: 41656385826715516924455731088372893657996361228, 2079: 42824390856464396526209228476474575762774879465, 2080: 44024857910414546084950481401735302373848095782, 2081: 45258681274652091016547586287700221970008068755, 2082: 46526779655498859083237494859206365034702358134, 2083: 47830096840507894753763929606166424148960110424, 2084: 49169602377193741528342591922356853935149504975, 2085: 50546292269969157794099110029993948769746687671, 2086: 51961189695772366269783089381199090558960547606, 2087: 53415345738881696537662435419712492307334180478, 2088: 54909840145427572963129830596638040418770704515, 2089: 56445782098125235102442269204682620745124030885, 2090: 58024311011765363351557172881384457469348901699, 2091: 59646597350013928176910703744766844433767270677, 2092: 61313843464087096107973721257849778294625405081, 2093: 63027284453881919316292784641070835053831354052, 2094: 64788189052158817856342546799691255570877518150, 2095: 66597860532387544551063529093372826237515675728, 2096: 68457637640884412378329010378860869685804024262, 2097: 70368895553885073626926030071097479233359907864, 2098: 72333046860214079886074787715712944920415424984, 2099: 74351542570229833233029956235268391407949627875, 2100: 76425873151741373195807749021080021459080291165, 2101: 78557569593611742891613633197716231871513782517, 2102: 80748204497781453174729297053600127492388932998, 2103: 82999393200464827976246067679320326020971457938, 2104: 85312794923291779902869927934730036659721510375, 2105: 87690113955187845526792666366851401712801134274, 2106: 90133100865806117918203480753613859038381596324, 2107: 92643553751346063460833585063932351673594098859, 2108: 95223319513616114811576859302283546424619314506, 2109: 97874295173219406337291510865301717288885200445, 2110: 100598429217765077170980775830078597915978709260, 2111: 103397722986031225236603653787203378188231402292, 2112: 106274232089029868642533106912359104776603150690, 2113: 109230067868949174578477633685673008965957469120, 2114: 112267398896973766514395710229044460157179222920, 2115: 115388452511010134752244464747991318862444784689, 2116: 118595516394371070307305070689995677519803374830, 2117: 121890940196500635216372474879596908517840948778, 2118: 125277137196849491653446187682001921308870438795, 2119: 128756586013039456106279781429309224204637155235, 2120: 132331832354485942225817194731144948296095338913, 2121: 136005490822677526183628341619662696228169437779, 2122: 139780246759343231332496879136294914183920566235, 2123: 143658858143770305041408732118198629930850140819, 2124: 147644157540568270666807354340091712330909224000, 2125: 151739054099208903158067016467162544501125246216, 2126: 155946535606706519753573960842521384418556790909, 2127: 160269670594838620141199867367375227901178121673, 2128: 164711610503343476443764262455655533446463188624, 2129: 169275591900568786145109713871008667212574145360, 2130: 173964938763083984897646967444489323060065487907, 2131: 178783064815808295968062329270497666350416021621, 2132: 183733475934247094438727208707795835845879643176, 2133: 188819772610470713392617031395550078686410106988, 2134: 194045652484512443040038057363040342445733893240, 2135: 199414912942906199650168544999618866932966543484, 2136: 204931453786129197483756438132982529754356479553, 2137: 210599279966760972657750340621024569609658319243, 2138: 216422504400217312716806872498425178952708753752, 2139: 222405350849966070103844047835296998593257719870, 2140: 228552156889181512949138540918848061266047740791, 2141: 234867376940844824665120188180587152072518199582, 2142: 241355585398350637585388084310633650150819331465, 2143: 248021479828733108998565670865001643954560554353, 2144: 254869884260680054932039940494913967190530868955, 2145: 261905752559560083345100350260758248905652921875, 2146: 269134171891745550301357546978902318483150550307, 2147: 276560366280573537433149830945908221546675684073, 2148: 284189700256347954756384460822072399114186994724, 2149: 292027682602848348780952829894171946286185196525, 2150: 300079970202875082019467410865495625479979094694, 2151: 308352371985426287572392634796034918345831989966, 2152: 316850852977169433649870812195036854291507911207, 2153: 325581538460939500937426146405250734530774231825, 2154: 334550718244066724977417207615678241114465752975, 2155: 343764851039409631696645200323540686552303329604, 2156: 353230568962043743490045985418104968175497835998, 2157: 362954682144632903677995273534058279957414924705, 2158: 372944183474588707707117294510467908715140736065, 2159: 383206253456204090418195791785818308423831594945, 2160: 393748265201029751587449904786884268416346918520, 2161: 404577789549846859589538794509144411672022826612, 2162: 415702600329676409598230534926593885982499170401, 2163: 427130679749354783768755297437892949499654467597, 2164: 438870223937296523272831771890659665602286473475, 2165: 450929648625159134260052749493609306300370136632, 2166: 463317594981220971649101966934064855005088490212, 2167: 476042935597381937471938911243959272191670950572, 2168: 489114780633797957215706040263930987465371910798, 2169: 502542484125264022730810437527574105649622691760, 2170: 516335650453567079927347553251246871212620557984, 2171: 530504140990139261462232960508189648909724886170, 2172: 545058080913453988432836606455557467047353067377, 2173: 560007866205722361999363584087410496745060913524, 2174: 575364170833565108914383039346175332072363129225, 2175: 591137954117456209042263051672264094963902965317, 2176: 607340468294858294890172396576637459876728673686, 2177: 623983266282097051667127111749751355541610352255, 2178: 641078209640152242143041148426227499209194350336, 2179: 658637476749676716333547258428298949880301221655, 2180: 676673571200691926609848235322274189175428592431, 2181: 695199330402549141183113024435698489390907024630, 2182: 714227934419889822186067591088150189762713935508, 2183: 733772915040486600160233205517764582904605949651, 2184: 753848165080998028345195047409661205734061410010, 2185: 774467947936825933802831039011913166290856798904, 2186: 795646907382423796556925927113569848920749045025, 2187: 817400077628568283525440629036885986580578161120, 2188: 839742893643273944545131128461036809985928936965, 2189: 862691201743203249313515607587263855592485446510, 2190: 886261270462600715344592984957682094231262687955, 2191: 910469801706960959527768615813845716032362752763, 2192: 935333942198826213870111109341848015258586306792, 2193: 960871295223299296636466125655717340185883228697, 2194: 987099932681053343467853379878084516482176109430, 2195: 1014038407456819902258601282188003020164821077713, 2196: 1041705766111542406799393149921058024912789843193, 2197: 1070121561906592696806185003711836723976318646033, 2198: 1099305868168664278558814578725663660095230751347, 2199: 1129279292004177556899411779284367814322107068750, 2200: 1160062988372259455129906418328374912794875140516, 2201: 1191678674525592817234330378465180518007035567938, 2202: 1224148644828669903250292851179037002332204681842, 2203: 1257495785963229293609758350537517985043490101070, 2204: 1291743592530906765707814604565428064732892610835, 2205: 1326916183063388353539586696826007823016666575690, 2206: 1363038316450618010620081932775702626766948267742, 2207: 1400135408797883233268006240578157606704308520406, 2208: 1438233550722879835539717164127729784341377881813, 2209: 1477359525104141972742451850876428128946776467300, 2210: 1517540825292515665993072463432902551892845533240, 2211: 1558805673797653668641491334803497135876242089678, 2212: 1601183041461816724044580259727354612842328867083, 2213: 1644702667133581285344348736857245137869671730074, 2214: 1689395077854376798567156661483099222514277324220, 2215: 1735291609571106892437555774714449031725527460139, 2216: 1782424428388448478757191595009703327418571383436, 2217: 1830826552374771058174587388568897962322872702465, 2218: 1880531873935975665104704330318867749822093808655, 2219: 1931575182771919095318938056959674511017686068185, 2220: 1983992189430464568754141912398798172706580941262, 2221: 2037819549474585022525115674537508812727151594151, 2222: 2093094888278340044956073813211683523416074682898, 2223: 2149856826467952296650447653773869417501164619869, 2224: 2208145006024624371311040214176565237134381870625, 2225: 2268000117066162685610486257867691977952149636083, 2226: 2329463925324911418747662088887963091854286975547, 2227: 2392579300339947019867081675868949317697298397221, 2228: 2457390244381942643492189138307718097264928854677, 2229: 2523941922129582344692758164350149756471869195790, 2230: 2592280691116887259141942758496845583141659899537, 2231: 2662454132971310608073787558386111506684369385813, 2232: 2734511085462965511444391934177140596906494183587, 2233: 2808501675385869578994261445169376899379754972068, 2234: 2884477352292623400907075579322579400861330771315, 2235: 2962490923104486707892612022451087039141493329190, 2236: 3042596587619376453548710860694923114675620792521, 2237: 3124849974940885736970186673957557524827120772983, 2238: 3209308180852011686602310843936272621314792055526, 2239: 3296029806157884531966398832249411659082252110525, 2240: 3385074996022409471869790373849802994298808805690, 2241: 3476505480324367989101580130555189921672623462046, 2242: 3570384615059176354982401320439389024740905215964, 2243: 3666777424813166614813801947045518673161561892966, 2244: 3765750646337939759592154130429553527537766985115, 2245: 3867372773253042492891322334008521298830352179629, 2246: 3971714101905938427653556222571377434088646307540, 2247: 4078846778418982139592272233327190495676444439866, 2248: 4188844846953860716858469962505733762730156946697, 2249: 4301784299224742745702713528067084946594634381000, 2250: 4417743125292169536796493320206228992803910550343, 2251: 4536801365670538316236136117174461033288094273661, 2252: 4659041164782862580763013973003868359053553220232, 2253: 4784546825797351362566231731168417844332785838733, 2254: 4913404866881227292111965728061869527659853830530, 2255: 5045704078908103627757617096847635981526636026359, 2256: 5181535584656163391837451036356625290841516214407, 2257: 5320992899535329981545125277691916180855473998805, 2258: 5464171993882588690437588095807084889323827738187, 2259: 5611171356865613078294130300389571289206397311350, 2260: 5762092062035869673687412904560243239930531635515, 2261: 5917037834573419710379575999541430738890622626340, 2262: 6076115120266708126452900640242923623341866228338, 2263: 6239433156271728550695355451490575993085942292134, 2264: 6407104043696079137218319509378718229702705761905, 2265: 6579242822054578576274630855578948789533455298734, 2266: 6755967545644295113522674510292835122483775946206, 2267: 6937399361888054675782970897485983723264323011797, 2268: 7123662591696737970806754341094737575112103730614, 2269: 7314884811901951462222340761939935289641834289395, 2270: 7511196939811964197947649707463044206175866380723, 2271: 7712733319945142389521924617582058172801542180874, 2272: 7919631812996487219317452100595913257543028088576, 2273: 8132033887094289430962576814720449927838393960827, 2274: 8350084711405357694774361105408889911972402015300, 2275: 8573933252148757415018198504928925593185861873742, 2276: 8803732371079513461579268567498022304249933730391, 2277: 9039638926505285189617314422998964084970595438542, 2278: 9281813876900616004271298745383250743059729594527, 2279: 9530422387184993604151073155371828079705355168950, 2280: 9785633937732631891816046069641124632254214557235, 2281: 10047622436183602390848394841406802515973193043806, 2282: 10316566332127702901769041143039403233989122380996, 2283: 10592648734734255132957468343310308444321456043571, 2284: 10876057533402872254341014560334244700946683620780, 2285: 11166985521512132864360358955503173717957792328653, 2286: 11465630523345040885726361109312137419668093929920, 2287: 11772195524272142592252579142228927699835475405262, 2288: 12086888804275213526126666074714236379441857513978, 2289: 12409924074896520730686758323108856061617655222490, 2290: 12741520619700810766902679602920740106349316265795, 2291: 13081903438339372702369995825105861818651826992639, 2292: 13431303394307778991751050067148151893379620506077, 2293: 13789957366491217272065156663906255405414311071587, 2294: 14158108404593693973445004415760318309772932242370, 2295: 14536005888549817728742960090051403934327801222156, 2296: 14923905692020358321733692442892587286459907678047, 2297: 15322070350075326847761463298913968554265401515217, 2298: 15730769231170936413643835624649288938501733002618, 2299: 16150278713529481654471379166675899361510665760775, 2300: 16580882366033921211442301450921091904365926280416, 2301: 17022871133751761754598643267756804218108498650480, 2302: 17476543528205726845562009156571175360531579106807, 2303: 17942205822511650658087298129211531345495818175057, 2304: 18420172251507067091174412069974707159021665744880, 2305: 18910765216997070947078996545777114475682919623589, 2306: 19414315498247211476154846356983916621521411447697, 2307: 19931162467856441629277246980513463599759674413041, 2308: 20461654313146490770914182133145338856645809727187, 2309: 21006148263207456404192932627622104852595304280970, 2310: 21565010821742923705373368869534441911701199887419, 2311: 22138618005861522471365237940368652982888104075000, 2312: 22727355590965521614482418924663783733921186781149, 2313: 23331619361890843810727406215610806254135308857160, 2314: 23951815370456759593096244705083096637451017834880, 2315: 24588360199587493406897494649744406335205727290057, 2316: 25241681234172046294108468111219387029991510514102, 2317: 25912216938832713390963025920891990759428674050912, 2318: 26600417142777051809706408361950504454660772072685, 2319: 27306743331912438295458811467722364839525869129400, 2320: 28031668948406848928849481174161195141360108410956, 2321: 28775679697884097775242882020060349688803476984805, 2322: 29539273864446490518541231137563989837057604952179, 2323: 30322962633722685585711432023667002655631855893969, 2324: 31127270424143511960418282768032077800615961592375, 2325: 31952735226653572764265207581869821725011637243487, 2326: 32799908953071669788426324706615644528794262188810, 2327: 33669357793318419597396187557448074241909961160527, 2328: 34561662581734899786701292837993789078148269659948, 2329: 35477419172721767722086620675579581559062365395875, 2330: 36417238825934036963035091771377814636876895938849, 2331: 37381748601272582004301821355152191840543933044480, 2332: 38371591763919473464910961559285225914454949449279, 2333: 39387428199670427009917909560877277324279071654230, 2334: 40429934840823983789090419362572880622618841036000, 2335: 41499806102893531791299424581039874366426784160676, 2336: 42597754332414930108684698464207986438238414531147, 2337: 43724510266129315639709919648795164529190983190550, 2338: 44880823501827658290753362113015735891775860228025, 2339: 46067462981150790416506320013365490407603364278280, 2340: 47285217484645973326080769865489605746387338228688, 2341: 48534896139388582534016509015707084448606794509814, 2342: 49817328939485198519236927086579980055136752412153, 2343: 51133367279782285645165745517535680609133370052296, 2344: 52483884503112733276871946748564813602003527319855, 2345: 53869776461420824806590383880147822175719204551469, 2346: 55291962091114697184508819760614991511857392669436, 2347: 56751384003004060684283391440819878903446789803099, 2348: 58249009087189871171927544609837628960380623034142, 2349: 59785829133281790377677305788784327434428364970750, 2350: 61362861466328639006942053695686748622617850877171, 2351: 62981149598856648513992946515066172932792511110884, 2352: 64641763899420155681002068750650481144652897951882, 2353: 66345802278079465613952539750862814246981008871159, 2354: 68094390889230939345801166300675543634997580023495, 2355: 69888684852224948030989898005576415781403878920995, 2356: 71729868990218182977254525351745038902483193889528, 2357: 73619158587717925895914811729724245783180985354842, 2358: 75557800167287273321320320811040130784252221919060, 2359: 77547072285891979874115998945868567670402747044445, 2360: 79588286351381543804941144999617740627898062871643, 2361: 81682787459609412105690788920445375282931841060492, 2362: 83831955252709738636327407566454519669269037443061, 2363: 86037204799060994583504133500298291142599767525961, 2364: 88299987495479913719532319572840702828357104994815, 2365: 90621791992202763126914659986946872015595738278003, 2366: 93004145141224771243446359569837640488487305606833, 2367: 95448612968582727407224954007027627693270062216153, 2368: 97956801671180298878693599735216669857785613237715, 2369: 100530358638770501129135789786132580428696541463525, 2370: 103170973501725013759939661850158896906366983382795, 2371: 105880379205235666714568162057607929186246674835477, 2372: 108660353110609438642727243903401536959027659486124, 2373: 111512718124334720773264584058717478384571245088082, 2374: 114439343855613415076071522953096149591716910973500, 2375: 117442147803070664704054798350668120890654926300513, 2376: 120523096571371667803183996442776155815729810091602, 2377: 123684207118493113105268436573489685721321552781151, 2378: 126927548034415307868377394917913546501247383867613, 2379: 130255240852020056553944404306572055559539047530145, 2380: 133669461390998803240347188535274022509125836065110, 2381: 137172441135595483551688849972013947996581871778170, 2382: 140766468647028954484433593096055372616292751308832, 2383: 144453891011460794882135190497537058556764977948995, 2384: 148237115324395707667015292482470242745754168289775, 2385: 152118610212423719809411357105042520067307779240520, 2386: 156100907393235880227548485941067592747534460439448, 2387: 160186603274868212495995174730244824826286924759060, 2388: 164378360595152301854136694694118079266206458932708, 2389: 168678910102375098323537690529566365095195830119715, 2390: 173091052278175313875346442702502205694341724313429, 2391: 177617659103729195986746184184236646145304254737028, 2392: 182261675870304487388520687355584130250935690880972, 2393: 187026123035288047490867195922886699634867141186408, 2394: 191914098124819930404162679326110679178204492902970, 2395: 196928777684194703542432119373410255613845416290627, 2396: 202073419277219465790162920942761564437025278844409, 2397: 207351363535747401800832745531222095970123079470866, 2398: 212766036260635806253027202800291886071043511130893, 2399: 218320950575408346303872686615815518603736687265550, 2400: 224019709133932919957689061390552862746031758458304, 2401: 229866006383458830949778967121025947053151071434926, 2402: 235863630884390155812442175854014517889393984836232, 2403: 242016467688206145276344061824939391497289921344319, 2404: 248328500774974299762177021852107412058234599633660, 2405: 254803815551937407606287486346848530864431251682411, 2406: 261446601414692355496335282873363983668020889836360, 2407: 268261154372515934523018586706764224652758295238166, 2408: 275251879739431193944393927980843975448015734231456, 2409: 282423294892647160394499527988292633580813431968720, 2410: 289780032100044965565638185282633831588088504297253, 2411: 297326841418424633617945474627449518623223932967198, 2412: 305068593664268994544312629723329236676843814611957, 2413: 313010283458824435839645487672681448751536128120719, 2414: 321157032349342507073515697424466804962980378707300, 2415: 329514092008371775927573078641257544141430283832310, 2416: 338086847513035826131406156272669425469096435441169, 2417: 346880820706280914339971199061511110032851886967137, 2418: 355901673642125591813707043622534952223283339280101, 2419: 365155212116994575920151188842851740380508864908970, 2420: 374647389289270354779812696943359199223073776527524, 2421: 384384309389248455327267290257609074709972871788879, 2422: 394372231521736030856900123129107963761511852907062, 2423: 404617573563588459702218138566029837845857058362469, 2424: 415126916158535023731030449746058156911457360217500, 2425: 425907006811702486258611691435747829051036619210903, 2426: 436964764086304546997571902667823798077679571339689, 2427: 448307281905025750783203518734071850525930124835870, 2428: 459941833958690501858441260833172834575927050017497, 2429: 471875878224871422129752689802003581309719671216145, 2430: 484117061599156426525236728117223720907832020184888, 2431: 496673224641860608784678055946833883950031191035725, 2432: 509552406443037374969583492229383313416835733059701, 2433: 522762849608713268897451362983651906277382721179854, 2434: 536313005371342643715460083111040042096768651944785, 2435: 550211538827551788032090316191702467148009553891765, 2436: 564467334306317355502338280181042531694130943361929, 2437: 579089500870801016601654991798984624538203584674550, 2438: 594087377957141194645081615027313378657219091976058, 2439: 609470541153583610086244251156702088407546864564250, 2440: 625248808123415184021445170239142357065496320226974, 2441: 641432244675250690988723453000798446534275367015717, 2442: 658031170984308451084537723836848917759126780943929, 2443: 675056167968400361774985057979390540476824195499264, 2444: 692518083822452741394297527894579793217444427279865, 2445: 710428040715467841255717203419691810125435835218542, 2446: 728797441653931534847387578562876222605215306007682, 2447: 747637977515770665320414243823232108546943571791584, 2448: 766961634259063882272862309538971496456501841189299, 2449: 786780700309812582901493233837104883069651992252500, 2450: 807107774133183849507621375104362485942528919417094, 2451: 827955771992745105077858611205558631300937454362243, 2452: 849337935902320652619232737317794449777545949179711, 2453: 871267841775213384980863950063063429886904651528812, 2454: 893759407775650814410526929963928966861696330836200, 2455: 916826902877433240978780331677009554236212353692084, 2456: 940484955634883423732306479679700600136395142799772, 2457: 964748563171321607096873785043308907920748393645865, 2458: 989633100390417258370972350733200785584553946028102, 2459: 1015154329415899462551538855668088513315200292902465, 2460: 1041328409265241672356796753836476758668568608962817, 2461: 1068171905763073500068056689718618672673472054705623, 2462: 1095701801700212541420510934836771894810436524644206, 2463: 1123935507244352919801698227500042488236652668362464, 2464: 1152890870608594412929146690100187865796230009117415, 2465: 1182586188984146757378861272237745685156851393567877, 2466: 1213040219743698104212153283094735988868458164856735, 2467: 1244272191922094708920237946746471334658921810675089, 2468: 1276301817981140870474529866246359687648227775992726, 2469: 1309149305865493979065272921268867078953610074980355, 2470: 1342835371356799383941072744632607586619060990003342, 2471: 1377381250733383747666895193431311551421473834674537, 2472: 1412808713743003709421434478836269410607157240633931, 2473: 1449140076896329138317020116671377802568526770518725, 2474: 1486398217089027121199419785627770438512228407175000, 2475: 1524606585560504203472825372845600976263733665501642, 2476: 1563789222197560394205351099996482830581156974888244, 2477: 1603970770191409168676519057930382172908445935119463, 2478: 1645176491056723265830534175841536314124424257900655, 2479: 1687432280021576600685684487181671811367617087501755, 2480: 1730764681797368211260238937556940484156749101230455, 2481: 1775200906738034957464112810216480762332001678674799, 2482: 1820768847398085810011063048337611865735620543349686, 2483: 1867497095499222138016227017428624557231848665351291, 2484: 1915414959315545554866069359053268627009894091487255, 2485: 1964552481487597746580633524928622127514294053468578, 2486: 2014940457275725421793253569605575859047900517862975, 2487: 2066610453263518227450300026070406061787487374956619, 2488: 2119594826522328312496888837397949369108992226003579, 2489: 2173926744248147339669532102906132397617461595649235, 2490: 2229640203882390293040946390903966696602633829194840, 2491: 2286770053728415559686499093247615980043870048333375, 2492: 2345352014075897634933772608434944801289607520822444, 2493: 2405422698845462573006497019894423614036351120521629, 2494: 2467019637766297143181469675691820929552138013921170, 2495: 2530181299099750724441152937967329319658147447405249, 2496: 2594947112922264451615392923126900249342712365881980, 2497: 2661357494981285189837685277991457183899724929972336, 2498: 2729453871138152742649660700418835108908145695065284, 2499: 2799278702412287477405614444445747930301938442180000, 2500: 2870875510641352469269629800993561138276373608937244, 2501: 2944288904772419516055596903431635682611440388817684, 2502: 3019564607799532159016586951616642980389816614848623, 2503: 3096749484363431362720513648966835225350796839944705, 2504: 3175891569029590968434327113853291229809825601961265, 2505: 3257040095261100652976951554528119114719453404725007, 2506: 3340245525103334116822171147466786507458445890183988, 2507: 3425559579597749814517587789768024144026745140376550, 2508: 3513035269942590955686749126214187667970579050845937, 2509: 3602726929418680979845445364711401806180203650663725, 2510: 3694690246098950482357992748748848483474524052004611, 2511: 3788982296360781887103496312666448565688651771156677, 2512: 3885661579220719274616818998490729558629719751838590, 2513: 3984788051511562939333648375836061468352863107532895, 2514: 4086423163922351728879727101483809741806177963555690, 2515: 4190629897922231281075551233411026977189480304097898, 2516: 4297472803589713195797719954967455347047259565521535, 2517: 4407018038369349240856665212333154882125704077589469, 2518: 4519333406778376182071537408268876717047377660539309, 2519: 4634488401086431042999613202320599056013666269808095, 2520: 4752554242991993841520963249414089899868727306156151}\n\ndef exp_sum(number):\n    if number < 0:\n        return 0\n    return ANSWERS[number]", "entry_point": "exp_sum", "task_id": "TACO_lite/561", "input_output_examples": [[[4]], [[9]]]}
{"requirement": "def max_sum(arr, ranges):\"\"\"\nGiven an array `arr` that contains some integers(positive, negative or 0), and a `range` list such as `[[start1,end1],[start2,end2],...]`, start and end are the index of `arr` and start always less than end. Your task is to calculate the sum value of each range (start index and end index are both inclusive), and return the maximum sum value.\n\n# Note:\n\n - `arr`/`$a` always has at least 5 elements;\n - `range`/`$range`/`ranges` always has at least 1 element;\n - All inputs are valid;\n - This is a simple version, if you want some challenge, please [try the challenge version](https://www.codewars.com/kata/the-maximum-sum-value-of-ranges-challenge-version/).\n\"\"\"", "inputs": [[[1, -2, 3, 4, -5, -4, 3, 2, 1], [[1, 3], [0, 4], [6, 8]]], [[1, -2, 3, 4, -5, -4, 3, 2, 1], [[1, 3]]], [[1, -2, 3, 4, -5, -4, 3, 2, 1], [[1, 4], [2, 5]]], [[11, -22, 31, 34, -45, -46, 35, 32, 21], [[1, 4], [0, 3], [6, 8], [0, 8]]]], "outputs": [[6], [5], [0], [88]], "starter_code": "def max_sum(arr, ranges):", "canonical_solution": "def max_sum(arr, ranges):\n    return max((sum(arr[start:stop + 1]) for start, stop in ranges))", "entry_point": "max_sum", "task_id": "TACO_lite/563", "input_output_examples": [[[10]], [[17]]]}
{"requirement": "def pattern(n, *x):\"\"\"\n## Task:\n\nYou have to write a function `pattern` which returns the following Pattern(See Examples) upto desired number of rows. \n\n* Note:`Returning` the pattern is not the same as `Printing` the pattern.\n\n### Parameters:\n    \n    pattern(        n        ,        x        );\n                    ^                 ^         \n                    |                 |         \n             Term upto which   Number of times  \n              Basic Pattern     Basic Pattern   \n                should be         should be     \n                 created          repeated      \n                                horizontally    \n    \n* Note: `Basic Pattern` means what we created in [Complete the pattern #12](\"http://www.codewars.com/kata/558ac25e552b51dbc60000c3\")\n### Rules/Note:\n\n* The pattern should be created using only unit digits.\n* If `n < 1` then it should return \"\" i.e. empty string.\n* If `x <= 1` then the basic pattern should not be repeated horizontally.\n* `The length of each line is same`, and is equal to the length of longest line in the pattern.\n* Range of Parameters (for the sake of CW Compiler) :\n  + `n ∈ (-∞,50]`\n  + `x ∈ (-∞,25]`\n* If only one argument is passed then the function `pattern` should run as if `x <= 1`.\n* The function `pattern` should work when extra arguments are passed, by ignoring the extra arguments.\n\"\"\"", "inputs": [[3, 7], [15, 3], [10, -29], [5], [4, 2, 3, 5, 7, -8], [-3, 5], [-11, -1], [-9999999], [-25, -11, 9], [-25, 5, -9, 55, -8, -7, 8]], "outputs": [["1   1   1   1   1   1   1   1\n 2 2 2 2 2 2 2 2 2 2 2 2 2 2 \n  3   3   3   3   3   3   3  \n 2 2 2 2 2 2 2 2 2 2 2 2 2 2 \n1   1   1   1   1   1   1   1"], ["1                           1                           1                           1\n 2                         2 2                         2 2                         2 \n  3                       3   3                       3   3                       3  \n   4                     4     4                     4     4                     4   \n    5                   5       5                   5       5                   5    \n     6                 6         6                 6         6                 6     \n      7               7           7               7           7               7      \n       8             8             8             8             8             8       \n        9           9               9           9               9           9        \n         0         0                 0         0                 0         0         \n          1       1                   1       1                   1       1          \n           2     2                     2     2                     2     2           \n            3   3                       3   3                       3   3            \n             4 4                         4 4                         4 4             \n              5                           5                           5              \n             4 4                         4 4                         4 4             \n            3   3                       3   3                       3   3            \n           2     2                     2     2                     2     2           \n          1       1                   1       1                   1       1          \n         0         0                 0         0                 0         0         \n        9           9               9           9               9           9        \n       8             8             8             8             8             8       \n      7               7           7               7           7               7      \n     6                 6         6                 6         6                 6     \n    5                   5       5                   5       5                   5    \n   4                     4     4                     4     4                     4   \n  3                       3   3                       3   3                       3  \n 2                         2 2                         2 2                         2 \n1                           1                           1                           1"], ["1                 1\n 2               2 \n  3             3  \n   4           4   \n    5         5    \n     6       6     \n      7     7      \n       8   8       \n        9 9        \n         0         \n        9 9        \n       8   8       \n      7     7      \n     6       6     \n    5         5    \n   4           4   \n  3             3  \n 2               2 \n1                 1"], ["1       1\n 2     2 \n  3   3  \n   4 4   \n    5    \n   4 4   \n  3   3  \n 2     2 \n1       1"], ["1     1     1\n 2   2 2   2 \n  3 3   3 3  \n   4     4   \n  3 3   3 3  \n 2   2 2   2 \n1     1     1"], [""], [""], [""], [""], [""]], "starter_code": "def pattern(n, *x):", "canonical_solution": "def pattern(n, *x):\n    if n < 1:\n        return ''\n    x = x[0] if x and x[0] > 0 else 1\n    result = []\n    for i in range(1, n + 1):\n        line = ' ' * (i - 1) + str(i % 10) + ' ' * (n - i)\n        result.append(line + line[::-1][1:] + (line[1:] + line[::-1][1:]) * (x - 1))\n    return '\\n'.join(result + result[::-1][1:])", "entry_point": "pattern", "task_id": "TACO_lite/567", "input_output_examples": [[[5, 10, 14], [10, 10, 21]], [[7.32], ["Too much clothes"]]]}
{"requirement": "def is_divisible(wall_length, pixel_size):\"\"\"\nYou're laying out a rad pixel art mural to paint on your living room wall in homage to [Paul Robertson](http://68.media.tumblr.com/0f55f7f3789a354cfcda7c2a64f501d1/tumblr_o7eq3biK9s1qhccbco1_500.png), your favorite pixel artist.\n\nYou want your work to be perfect down to the millimeter. You haven't decided on the dimensions of your piece, how large you want your pixels to be, or which wall you want to use. You just know that you want to fit an exact number of pixels.\n\nTo help decide those things you've decided to write a function, `is_divisible()` that will tell you whether a wall of a certain length can exactly fit an integer number of pixels of a certain length.\n\nYour function should take two arguments: the size of the wall in millimeters and the size of a pixel in millimeters. It should return `True` if you can fit an exact number of pixels on the wall, otherwise it should return `False`.\n\nNote: you don't need to use an `if` statement here. Remember that in Python an expression using the `==` comparison operator will evaluate to either `True` or `False`.\n\n\n```if:csharp\nDocumentation:\nKata.IsDivisible Method (Int32, Int32)\n\nReturns a boolean representing if the first argument is perfectly divisible by the second argument.\n\nSyntax\n\n\npublic\nstatic\nbool IsDivisible(\nint wallLength,\n    int pixelSize,\n    )\n  \n\n\n\nParameters\n\nwallLength\n\nType: System.Int32\nThe length of the wall in millimeters.\n\npixelSize\n\nType: System.Int32\nThe length of a pixel in millimeters.\n\nReturn Value\n\nType: System.Boolean\n  A boolean value representing if the first argument is perfectly divisible by the second.\n\n```\n\"\"\"", "inputs": [[4050, 27], [4066, 27], [10000, 20], [10005, 20]], "outputs": [[true], [false], [true], [false]], "starter_code": "def is_divisible(wall_length, pixel_size):", "canonical_solution": "def is_divisible(wall_length, pixel_size):\n    return wall_length % pixel_size == 0", "entry_point": "is_divisible", "task_id": "TACO_lite/569", "input_output_examples": [[[[-7, -7, 7, 0]]], [[1]]]}
{"requirement": "def decode_resistor_colors(bands):\"\"\"\n## Overview\nResistors are electrical components marked with colorful stripes/bands to indicate both their resistance value in ohms and how tight a tolerance that value has. While you could always get a tattoo like Jimmie Rodgers to help you remember the resistor color codes, in the meantime, you can write a function that will take a string containing a resistor's band colors and return a string identifying the resistor's ohms and tolerance values.\n\n## The resistor color codes\nYou can see this Wikipedia page for a colorful chart, but the basic resistor color codes are:\n\nblack: 0, brown: 1, red: 2, orange: 3, yellow: 4, green: 5, blue: 6, violet: 7, gray: 8, white: 9\n\nEach resistor will have at least three bands, with the first and second bands indicating the first two digits of the ohms value, and the third indicating the power of ten to multiply them by.\n\nMost resistors will also have a fourth band that is either gold or silver, with gold indicating plus or minus 5% tolerance, and silver indicating 10% tolerance. Resistors that do not have a fourth band are rated at 20% tolerance. (There are also more specialized resistors which can have more bands and additional meanings for some of the colors, but this kata will not cover them.)\n\n## Your mission\nThe way the ohms value needs to be formatted in the string you return depends on the magnitude of the value:\n\n* For resistors less than 1000 ohms, return a string containing the number of ohms, a space, the word \"ohms\" followed by a comma and a space, the tolerance value (5, 10, or 20), and a percent sign. \n\n* For resistors greater than or equal to 1000 ohms, but less than 1000000 ohms, you will use the same format as above, except that the ohms value will be divided by 1000 and have a lower-case \"k\" after it.\n\n* For resistors of 1000000 ohms or greater, you will divide the ohms value by 1000000 and have an upper-case \"M\" after it.\n\nTest case resistor values will all be between 10 ohms and 990M ohms.\n\nHave fun! And if you enjoy this kata, check out the sequel: Resistor Color Codes, Part 2\n\"\"\"", "inputs": [["yellow violet black"], ["yellow violet red gold"], ["brown black green silver"], ["brown black black"], ["brown black brown gold"], ["red red brown"], ["orange orange brown gold"], ["yellow violet brown silver"], ["blue gray brown"], ["brown black red silver"], ["brown black orange"], ["red red orange silver"], ["yellow violet orange gold"], ["brown black yellow gold"], ["orange orange yellow gold"], ["red black green gold"]], "outputs": [["47 ohms, 20%"], ["4.7k ohms, 5%"], ["1M ohms, 10%"], ["10 ohms, 20%"], ["100 ohms, 5%"], ["220 ohms, 20%"], ["330 ohms, 5%"], ["470 ohms, 10%"], ["680 ohms, 20%"], ["1k ohms, 10%"], ["10k ohms, 20%"], ["22k ohms, 10%"], ["47k ohms, 5%"], ["100k ohms, 5%"], ["330k ohms, 5%"], ["2M ohms, 5%"]], "starter_code": "def decode_resistor_colors(bands):", "canonical_solution": "code = {'black': 0, 'brown': 1, 'red': 2, 'orange': 3, 'yellow': 4, 'green': 5, 'blue': 6, 'violet': 7, 'gray': 8, 'white': 9, 'gold': 5, 'silver': 10, '': 20}\n\ndef decode_resistor_colors(bands):\n    colors = (bands + ' ').split(' ')\n    value = 10 * code[colors[0]] + code[colors[1]]\n    value *= 10 ** code[colors[2]]\n    tolerance = code[colors[3]]\n    prefix = ''\n    for p in 'kM':\n        if value // 1000:\n            prefix = p\n            value /= 1000\n    return '%g%s ohms, %d%%' % (value, prefix, tolerance)", "entry_point": "decode_resistor_colors", "task_id": "TACO_lite/570", "input_output_examples": [[[13], [17], [18], [20], [30]], [["drink toddy"], ["drink coke"], ["drink beer"], ["drink beer"], ["drink whisky"]]]}
{"requirement": "def remove_smallest(numbers):\"\"\"# The museum of incredible dull things\n\nThe museum of incredible dull things wants to get rid of some exhibitions. Miriam, the interior architect, comes up with a plan to remove the most boring exhibitions. She gives them a rating, and then removes the one with the lowest rating.\n\nHowever, just as she finished rating all exhibitions, she's off to an important fair, so she asks you to write a program that tells her the ratings of the items after one removed the lowest one. Fair enough.\n\n# Task\n\nGiven an array of integers, remove the smallest value. **Do not mutate the original array/list**. If there are multiple elements with the same value, remove the one with a lower index. If you get an empty array/list, return an empty array/list.\n\nDon't change the order of the elements that are left.\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5]], [[1, 2, 3, 4]], [[5, 3, 2, 1, 4]], [[1, 2, 3, 1, 1]], [[]]], "outputs": [[[2, 3, 4, 5]], [[2, 3, 4]], [[5, 3, 2, 4]], [[2, 3, 1, 1]], [[]]], "starter_code": "def remove_smallest(numbers):", "canonical_solution": "def remove_smallest(numbers):\n    a = numbers[:]\n    if a:\n        a.remove(min(a))\n    return a", "entry_point": "remove_smallest", "task_id": "TACO_lite/572", "input_output_examples": [[[25, 1], [24, 0], [115, -1], [5, 1], [4, 0], [4, 1]], [[3], [2], [5], [1], [0], [1]]]}
{"requirement": "def pattern(n):\"\"\"\n## Task \n\nUsing `n` as a parameter in the function `pattern`, where `n>0`, complete the codes to get the pattern (take the help of examples):\n\n**Note:** There is no newline in the end (after the pattern ends)\n\"\"\"", "inputs": [[3], [7], [20]], "outputs": [["1\n1*2\n1**3"], ["1\n1*2\n1**3\n1***4\n1****5\n1*****6\n1******7"], ["1\n1*2\n1**3\n1***4\n1****5\n1*****6\n1******7\n1*******8\n1********9\n1*********10\n1**********11\n1***********12\n1************13\n1*************14\n1**************15\n1***************16\n1****************17\n1*****************18\n1******************19\n1*******************20"]], "starter_code": "def pattern(n):", "canonical_solution": "def pattern(n):\n    return '\\n'.join(['1'] + ['1' + '*' * (i - 1) + str(i) for i in range(2, n + 1)])", "entry_point": "pattern", "task_id": "TACO_lite/575", "input_output_examples": [[["codewarriors"]], [[2]]]}
{"requirement": "def maximum_product(arr):\"\"\"# Task\nGiven an integer array `arr`. Your task is to remove one element, maximize the product of elements. \n\nThe result is the element which should be removed. If more than one valid results exist, return the smallest one.\n\n\n# Input/Output\n\n\n`[input]` integer array `arr`\n\nnon-empty unsorted integer array. It contains positive integer, negative integer or zero.\n\n`3 ≤ arr.length ≤ 15`\n\n`-10 ≤ arr[i] ≤ 10`\n\n`[output]` an integer\n\nThe element that should be removed.\n\"\"\"", "inputs": [[[1, 2, 3]], [[-1, 2, -3]], [[-1, -2, -3]], [[-1, -2, -3, -4]], [[0, 1, 2, 3]], [[0, -1, -2, -3]], [[0, -1, -2, -3, -4]], [[0, -1, 2, -3, 4]], [[0, -1, 2, 3]], [[0, -1, -2, -3, 4]], [[0, 0, 1]], [[0, 0, -1]], [[0, -1, 1]], [[0, 0, -1, 1]], [[0, 0, 0]], [[0, 0, 1, 2, 3]], [[-1, -2, -3, 0, 1, 2, 3]], [[-1, -2, 0, 1, 2]], [[-1, -2, 1, 2]], [[-1, -2, -3, 1, 2, 3]]], "outputs": [[1], [2], [-1], [-4], [0], [-3], [0], [0], [-1], [-3], [0], [-1], [-1], [-1], [0], [0], [-3], [0], [1], [-1]], "starter_code": "def maximum_product(arr):", "canonical_solution": "def maximum_product(arr):\n    if arr.count(0) > 1:\n        return min(arr)\n    neg = [n for n in arr if n < 0]\n    pos = [n for n in arr if n >= 0]\n    if len(neg) % 2:\n        return min(neg) if 0 in arr else max(neg)\n    else:\n        return min(pos) if pos else min(neg)", "entry_point": "maximum_product", "task_id": "TACO_lite/576", "input_output_examples": [[[34, 11, 6], [154, 42, 10]], [[{"rabbits": 3, "chickens": 5, "cows": 3}], [{"rabbits": 30, "chickens": 7, "cows": 5}]]]}
{"requirement": "def rotate(arr, n):\"\"\"\nCreate a function named \"rotate\" that takes an array and returns a new one with the elements inside rotated n spaces.\n\nIf n is greater than 0 it should rotate the array to the right. If n is less than 0 it should rotate the array to the left. If n is 0, then it should return the array unchanged.\n\nFurthermore the method should take ANY array of objects and perform this operation on them.\n\nFinally the rotation shouldn't be limited by the indices available in the array. Meaning that if we exceed the indices of the array it keeps rotating.\n\n**Note**: This kata is a translation of this (Java) one: http://www.codewars.com/kata/rotate-array. I have not translated this first one as usual because I did not solved it, and I fear not being able to solve it (Java is **not** my cup of... tea). @cjmcgraw, if you want to use my translation on your kata feel free to use it.\n\"\"\"", "inputs": [[["a", "b", "c"], 1], [[1.0, 2.0, 3.0], 1], [[true, true, false], 1]], "outputs": [[["c", "a", "b"]], [[3.0, 1.0, 2.0]], [[false, true, true]]], "starter_code": "def rotate(arr, n):", "canonical_solution": "def rotate(arr, n):\n    n = n % len(arr)\n    return arr[-n:] + arr[:-n]", "entry_point": "rotate", "task_id": "TACO_lite/577", "input_output_examples": [[["deprived", [11, 11, 11, 11, 11, 11, 11, 11]]], [["Starting as a deprived, level 6 will require 0 souls."]]]}
{"requirement": "def pythagorean_triplet(n):\"\"\"\nA Pythagorean triplet is a set of three numbers a, b, and c where `a^2 + b^2 = c^2`. In this Kata, you will be tasked with finding the Pythagorean triplets whose product is equal to `n`, the given argument to the function `pythagorean_triplet`.\n\n## Your task\n\nIn this Kata, you will be tasked with finding the Pythagorean triplets whose product is equal to `n`, the given argument to the function, where `0 < n < 10000000`\n\"\"\"", "inputs": [[60], [780], [2040], [4200], [12180], [120120], [192720], [328860], [907200], [1440600]], "outputs": [[[3, 4, 5]], [[5, 12, 13]], [[8, 15, 17]], [[7, 24, 25]], [[20, 21, 29]], [[33, 56, 65]], [[48, 55, 73]], [[60, 63, 87]], [[42, 144, 150]], [[49, 168, 175]]], "starter_code": "def pythagorean_triplet(n):", "canonical_solution": "def pythagorean_triplet(n):\n    for a in range(3, n):\n        for b in range(a + 1, n):\n            c = (a * a + b * b) ** 0.5\n            if a * b * c > n:\n                break\n            if c == int(c) and a * b * c == n:\n                return [a, b, c]", "entry_point": "pythagorean_triplet", "task_id": "TACO_lite/578", "input_output_examples": [[[[1, 2, 4, 3]], [[2, 1, 4, 3]], [[1, 2, 3, 4]]], [[[1, 2, 3, 4]], [[1, 2, 4, 3], [1, 2, 3, 4]], []]]}
{"requirement": "def solve(a, b):\"\"\"\nConsider the numbers `6969` and `9116`. When you rotate them `180 degrees` (upside down), these numbers remain the same. To clarify, if we write them down on a paper and turn the paper upside down, the numbers will be the same. Some numbers such as `2` or `5` don't yield numbers when rotated.\n\nGiven a range, return the count of upside down numbers within that range.\n\nGood luck!\n\nIf you like this Kata, please try \n\n[Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e995880000e3)\n\n[Life without primes](https://www.codewars.com/kata/59f8750ac374cba8f0000033)\n\nPlease also try the performance version of this kata at [Upside down numbers - Challenge Edition ](https://www.codewars.com/kata/59f98052120be4abfa000304)\n\"\"\"", "inputs": [[0, 10], [10, 100], [100, 1000], [1000, 10000], [10000, 15000], [15000, 20000], [60000, 70000], [60000, 130000]], "outputs": [[3], [4], [12], [20], [6], [9], [15], [55]], "starter_code": "def solve(a, b):", "canonical_solution": "REV = {'6': '9', '9': '6'}\nBASE = set('01869')\n\ndef isReversible(n):\n    s = str(n)\n    return not set(s) - BASE and (not len(s) % 2 or s[len(s) // 2] not in '69') and all((REV.get(c, c) == s[-1 - i] for i, c in enumerate(s[:len(s) // 2])))\n\ndef solve(a, b):\n    return sum((isReversible(n) for n in range(a, b)))", "entry_point": "solve", "task_id": "TACO_lite/586", "input_output_examples": [[[0]], [[1]]]}
{"requirement": "def f(n):\"\"\"\nWhen you want to get the square of a binomial of two variables x and y, you will have:\n\n`$(x+y)^2 = x^2 + 2xy + y ^2$`\n\nAnd the cube:\n\n`$(x+y)^3 = x^3 + 3x^2y + 3xy^2 +y^3$`\n\nIt is known from many centuries ago that for an exponent n, the result of a binomial x + y raised to the n-th power is:\n\nOr using the sumation notation:\n\nEach coefficient of a term has the following value:\n\nEach coefficient value coincides with the amount of combinations without replacements of a set of n elements using only k different ones of that set.\n\nLet's see the total sum of the coefficients of the different powers for the binomial:\n\n`$(x+y)^0(1)$`\n\n`$(x+y)^1 = x+y(2)$`\n\n`$(x+y)^2 = x^2 + 2xy + y ^2(4)$`\n\n`$(x+y)^3 = x^3 + 3x^2y + 3xy^2 +y^3(8)$`\n\nWe need a function that may generate an array with the values of all the coefficients sums from 0 to the value of n included and has the addition of all the sum values as last element.\n\nFeatures of the test\n``` \nLow Performance Tests\nNumber of tests = 50\n9 < n < 101\n\nHigh Performance Tests\nNumber of Tests = 50\n99 < n < 5001\n```\n\"\"\"", "inputs": [[0], [1], [2], [3], [6], [10]], "outputs": [[[1, 1]], [[1, 2, 3]], [[1, 2, 4, 7]], [[1, 2, 4, 8, 15]], [[1, 2, 4, 8, 16, 32, 64, 127]], [[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2047]]], "starter_code": "def f(n):", "canonical_solution": "def f(n):\n    return [2 ** i for i in range(n + 1)] + [2 ** (n + 1) - 1]", "entry_point": "f", "task_id": "TACO_lite/589", "input_output_examples": [[["abba", ["aabb", "abcd", "bbaa", "dada"]], ["racer", ["crazer", "carer", "racar", "caers", "racer"]], ["laser", ["lazing", "lazy", "lacer"]]], [["aabb", "bbaa"], ["carer", "racer"], []]]}
{"requirement": "def count_squares(lines):\"\"\"\nYour task is to write a function which counts the number of squares contained in an ASCII art picture.\n\nThe input pictures contain rectangles---some of them squares---drawn with the characters `-`, `|`, and `+`, where `-` and `|` are used to represent horizontal and vertical sides, and `+` is used to represent corners and intersections. Each picture may contain multiple, possibly overlapping, rectangles.\n\nYou are going to implement a function `count_squares()` which takes an ASCII art picture as input and returns the number of squares the picture shows. The input to that function is an array of strings, where each string corresponds to a line of the ASCII art picture. Each string is guaranteed to contain only the characters `-`, `|`, `+`, and `` `` (space).\n\nThe smallest valid square has a side length of 2 and is represented by four `+` characters arranged in a square; a single `+` character is not considered a square.\n\nHave fun!\n\"\"\"", "inputs": [[["+--+  +----+", "|  |  |    |    +-+", "|  |  +----+    | |", "+--+            +-+"]], [["+-----+", "|     |", "+-----+"]], [["+---+", "|   |", "| +-+-+", "| | | |", "+-+-+ |", "  |   |", "  +---+"]], [["+-+-+", "| | |", "+-+-+", "| | |", "+-+-+"]], [["+---+", "|   |", "|   |", "|   |", "|   |", "|   |", "|   |", "|   |", "+---+"]], [["+---+", "|   |", "|   |", "|   |", "+---+"]], [["+---+", "|   |", "|  ++--+", "|  ||  |", "+--++  |", "   |   |", "   +---+"]], [["   +---+", "   |   |", "+--++  |", "|  ||  |", "|  ++--+", "|   |", "+---+"]], [["+---+", "|   |", "|   |  +---+", "|   |  |   |", "+---+  |   |", "       |   |", "       +---+"]], [["+---+---+", "|   |   |", "|   |   |", "|   |   |", "+---+---+", "|   |   |", "|   |   |", "|   |   |", "+---+---+"]], [["+----+--+", "|    |  |", "|    |  |", "|    |  |", "+----+--+", "|    |  |", "|    |  |", "|    |  |", "+----+--+"]], [["+---+---+", "|   |   |", "|   |   |", "|   |   |", "|   |   |", "+---+---+", "|   |   |", "|   |   |", "+---+---+"]], [["+---+---+", "|   |   |", "| +-+-+ |", "| | | | |", "+-+-+-+-+", "| | | | |", "| +-+-+ |", "|   |   |", "+---+---+"]], [["  +---+", "  |   |", "  |   |  +--+", "+-+-+ |  |  |", "| +-+-+  |  |", "+---+    +--+"]], [["+---+", "|   |", "|   |", "+--+|+--+", "+--++|  |", "+--+-+--+", "   | |", "   | |", "   +-+"]], [["+---------+--+", "|  +---+  |  |", "|  |   |  |  |", "|  |   |  +--+", "|  |   |     |", "|  +---+     |", "|            |", "|            |", "|            |", "|            |", "|    +---+---+", "|    |   |   |", "|    |   |   |", "+----+---+---+", "     +---+"]], [["++", "++"]], [["+"]], [["   +--+", "   |  |", "   |  |", "+--+--+--+", "|  |  |  |", "|  |  |  |", "+--+--+--+", "   |  |", "   |  |", "   +--+"]], [["+--+  +--+", "|  |  |  |", "|  |  |  |", "+--+--+--+", "   |  |", "   |  |", "+--+--+--+", "|  |  |  |", "|  |  |  |", "+--+  +--+"]], [["   +--+  +--+", "   |  |  |  |", "   |  |  |  |", "+--+--+--+--+", "|  |  |  |", "|  |  |  |", "+--+--+--+--+", "   |  |  |  |", "   |  |  |  |", "+--+--+--+--+", "|  |  |  |", "|  |  |  |", "+--+  +--+"]], [["+-+ +-+", "| | | |", "+-+ +-+", "+-+ +-+", "| | | |", "+-+ +-+"]], [["+-+---+", "| |   |", "| |   |", "+-+-+-+", "| | | |", "| | | |", "+-+ +-+"]], [["++++++++", "++++++++", "++++++++", "++++++++", "++++++++", "++++++++", "++++++++", "++++++++"]], [["", "    +--+", " +--++ |   +-+", " |  || |   | |", " |  ++-+---+-+", " |   | |   |", " +---+-+   |", "       |   |", "       +---+", "", "+---+", "|   |", "|   |", "|   |", "+---+"]]], "outputs": [[2], [0], [3], [5], [0], [1], [2], [2], [2], [5], [1], [1], [10], [2], [1], [4], [1], [0], [5], [5], [11], [4], [0], [140], [6]], "starter_code": "def count_squares(lines):", "canonical_solution": "def count_squares(lines):\n\n    def s(i, j, z):\n        try:\n            return '+' == lines[i + z][j] == lines[i][j + z] == lines[i + z][j + z] and all((lines[i][c] in '-+' for c in range(j + 1, j + z))) and all((lines[i + z][c] in '-+' for c in range(j + 1, j + z))) and all((lines[r][j] in '|+' for r in range(i + 1, i + z))) and all((lines[r][j + z] in '|+' for r in range(i + 1, i + z)))\n        except IndexError:\n            return 0\n    return sum((x == '+' and sum((s(i, j, z) for z in range(1, min(len(lines) - i, len(row) - j)))) for i, row in enumerate(lines[:-1]) for j, x in enumerate(row[:-1])))", "entry_point": "count_squares", "task_id": "TACO_lite/590", "input_output_examples": [[["abc def", 10]], [["   abc def"]]]}
{"requirement": "def bits_battle(nums):\"\"\"\nYou are given a list of positive integers. The odd numbers from the list will fight using their `1` bits from their binary representation, while the even numbers will fight using their `0` bits. If present in the list, number `0` will be neutral, hence not fight for either side.\n\nYou should return:\n\n* `odds win` if number of `1`s from odd numbers is larger than `0`s from even numbers\n* `evens win` if number of `1`s from odd numbers is smaller than `0`s from even numbers\n* `tie` if equal, including if list is empty\n\nPlease note that any prefix that might appear in the binary representation, e.g. `0b`, should not be counted towards the battle.\n\nIf you enjoyed this kata, you can find a nice variation of it [here](https://www.codewars.com/kata/world-bits-war).\n\"\"\"", "inputs": [[[5, 3, 14]], [[3, 8, 22, 15, 78]], [[]], [[1, 13, 16]]], "outputs": [["odds win"], ["evens win"], ["tie"], ["tie"]], "starter_code": "def bits_battle(nums):", "canonical_solution": "def bits_battle(nums):\n    binary = '{:b}'.format\n    evens = odds = 0\n    for num in nums:\n        if num % 2:\n            odds += binary(num).count('1')\n        else:\n            evens += binary(num).count('0')\n    if odds == evens:\n        return 'tie'\n    return '{} win'.format('odds' if odds > evens else 'evens')", "entry_point": "bits_battle", "task_id": "TACO_lite/592", "input_output_examples": [[["Another Green World"], ["Darkness on the edge of Town"], ["Have you ever Seen the Rain"], ["hello Hello"]], [["Green World Another"], ["of on the Town edge Darkness"], ["the you Have Rain Seen ever"], ["Hello hello"]]]}
{"requirement": "def print_number(number, char):\"\"\"# Task\n\n**Your task** is to implement function `printNumber` (`print_number` in C/C++ and Python `Kata.printNumber` in Java) that returns string that represents given number in text format.\n\nArguments:\n - `number` — Number that we need to print (`num` in C/C++/Java)\n - `char` — Character for building number (`ch` in C/C++/Java)\n\n>***Note, that***:\n - Number should be `0 <= number <= 99999` and have `5 digits` (should have zeros at the start if needed)\n - Test cases contains only valid values (integers that are 0 <= number <= 99999) and characters\n - Numbers should have the same shape as in the examples (6x6 by the way)\n - Returned string should be joined by `\\n` character (except of the end)\n - Returned string should have 1 character *(height)* border (use the same character as for number) + padding (1 character in height vertical and 2 horizontal with ` `) around borders and 1 character margin between \"digits\"\n \n *Suggestions and translations are welcome.*\n\"\"\"", "inputs": [[99, "$"], [12345, "*"], [67890, "@"]], "outputs": [["$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n$                                      $\n$   $$$$   $$$$   $$$$   $$$$   $$$$   $\n$  $$  $$ $$  $$ $$  $$ $$  $$ $$  $$  $\n$  $$  $$ $$  $$ $$  $$ $$  $$ $$  $$  $\n$  $$  $$ $$  $$ $$  $$  $$$$   $$$$   $\n$  $$  $$ $$  $$ $$  $$   $$     $$    $\n$   $$$$   $$$$   $$$$   $$     $$     $\n$                                      $\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"], ["****************************************\n*                                      *\n*    **    ****   ****  **  ** ******  *\n*   ***   **  ** **  ** **  ** **      *\n*  * **      **     **  **  ** *****   *\n*    **     **      **   *****     **  *\n*    **    **    **  **     **     **  *\n*  ****** ******  ****      ** *****   *\n*                                      *\n****************************************"], ["@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@                                      @\n@     @@  @@@@@@  @@@@   @@@@   @@@@   @\n@    @@   @@  @@ @@  @@ @@  @@ @@  @@  @\n@   @@@@     @@   @@@@  @@  @@ @@  @@  @\n@  @@  @@   @@    @@@@   @@@@  @@  @@  @\n@  @@  @@  @@    @@  @@   @@   @@  @@  @\n@   @@@@   @@     @@@@   @@     @@@@   @\n@                                      @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"]], "starter_code": "def print_number(number, char):", "canonical_solution": "L = ((' #### ', '  ##  ', ' #### ', ' #### ', '##  ##', '######', '   ## ', '######', ' #### ', ' #### ').__getitem__, ('##  ##', ' ###  ', '##  ##', '##  ##', '##  ##', '##    ', '  ##  ', '##  ##', '##  ##', '##  ##').__getitem__, ('##  ##', '# ##  ', '   ## ', '   ## ', '##  ##', '##### ', ' #### ', '   ## ', ' #### ', '##  ##').__getitem__, ('##  ##', '  ##  ', '  ##  ', '   ## ', ' #####', '    ##', '##  ##', '  ##  ', ' #### ', ' #### ').__getitem__, ('##  ##', '  ##  ', ' ##   ', '##  ##', '    ##', '    ##', '##  ##', ' ##   ', '##  ##', '  ##  ').__getitem__, (' #### ', '######', '######', ' #### ', '    ##', '##### ', ' #### ', ' ##   ', ' #### ', ' ##   ').__getitem__)\n\ndef print_number(number, char):\n    s1, s2, l = ('#' * 40, f'#{' ' * 38}#', list(map(int, f'{number:05}')))\n    return '\\n'.join([s1, s2] + [f'#  {' '.join(map(L[i], l))}  #' for i in range(6)] + [s2, s1]).replace('#', char)", "entry_point": "print_number", "task_id": "TACO_lite/593", "input_output_examples": [[[4, 1], [4, 2]], [[8], [6]]]}
{"requirement": "def xp_to_target_lvl(*args):\"\"\"In this Kata you are a game developer and have programmed the #1 MMORPG(Massively Multiplayer Online Role Playing Game) worldwide!!! Many suggestions came across you to make the game better, one of which you are interested in and will start working on at once.\n\nPlayers in the game have levels from 1 to 170, XP(short for experience) is required to increase the player's level and is obtained by doing all sorts of things in the game, a new player starts at level 1 with 0 XP. You want to add a feature that would enable the player to input a target level and the output would be how much XP the player must obtain in order for him/her to reach the target level...simple huh.\n\nCreate a function called ```xp_to_target_lvl``` that takes 2 arguments(```current_xp``` and ```target_lvl```, both as integer) and returns the remaining XP for the player to reach the ```target_lvl``` formatted as a rounded down integer.\n\nLeveling up from level 1 to level 2 requires 314 XP, at first each level up requires 25% XP more than the previous level up, every 10 levels the percentage increase reduces by 1.\n\nKeep in mind that when players reach level 170 they stop leveling up but they continue gaining experience.\n\nIf one or both of the arguments are invalid(not given,  not in correct format, not in range...etc) return \"Input is invalid.\".\n\nIf the player has already reached the ```target_lvl``` return ```\"You have already reached level target_lvl.\"```.\n\nMake sure you round down the XP required for each level up, rounding up will result in the output being slightly wrong.\n\"\"\"", "inputs": [[0, 5], [12345, 17], [313, 2], [832696988485, 170], [769832696988484, 170], [10395, 11], [31428, "47"], [1, 171], [7392984749, 900], [123, 0], [-987654321, 99], [999999, [101]], [10396, 11], [0, 1], [2017, 4], [769832696988485, 170]], "outputs": [[1808], [29535], [1], [769000000000000], [1], [1], ["Input is invalid."], ["Input is invalid."], ["Input is invalid."], ["Input is invalid."], ["Input is invalid."], ["Input is invalid."], ["You have already reached level 11."], ["You have already reached level 1."], ["You have already reached level 4."], ["You have already reached level 170."]], "starter_code": "def xp_to_target_lvl(*args):", "canonical_solution": "def xp_to_target_lvl(*args):\n    if len(args) < 2:\n        return 'Input is invalid.'\n    current_xp, target_lvl = args\n    if not isinstance(target_lvl, int):\n        return 'Input is invalid.'\n    if not 0 < target_lvl < 171:\n        return 'Input is invalid.'\n    if current_xp < 0:\n        return 'Input is invalid.'\n    level = 1\n    xp = 314\n    xp_bump = 25\n    sum_ = 0\n    while level < target_lvl:\n        sum_ += xp\n        level += 1\n        xp_bump_reduction = level // 10\n        xp += int(xp * (xp_bump - xp_bump_reduction) / 100)\n    diff = sum_ - current_xp\n    if diff <= 0:\n        return 'You have already reached level {}.'.format(target_lvl)\n    else:\n        return diff", "entry_point": "xp_to_target_lvl", "task_id": "TACO_lite/596", "input_output_examples": [[[5]], [[2]]]}
{"requirement": "def halving_sum(n):\"\"\"\n## Task\n\nGiven a positive integer `n`, calculate the following sum: \n\n```\nn + n/2 + n/4 + n/8 + ...\n``` \n\nAll elements of the sum are the results of integer division.\n\"\"\"", "inputs": [[25], [127], [38], [1], [320], [13], [15], [47], [101], [257]], "outputs": [[47], [247], [73], [1], [638], [23], [26], [89], [198], [512]], "starter_code": "def halving_sum(n):", "canonical_solution": "def halving_sum(n):\n    s = 0\n    while n:\n        s += n\n        n >>= 1\n    return s", "entry_point": "halving_sum", "task_id": "TACO_lite/597", "input_output_examples": [[[417]], [[267]]]}
{"requirement": "def absolute_values_sum_minimization(A):\n\t\"\"\"\nGiven a sorted array of integers `A`, find such an integer x that the value of `abs(A[0] - x) + abs(A[1] - x) + ... + abs(A[A.length - 1] - x)`\nis the smallest possible (here abs denotes the `absolute value`).\n\n If there are several possible answers, output the smallest one.\n\n# Input/Output\n\n\n - `[input]` integer array `A`\n\n    A non-empty array of integers, sorted in ascending order.\n\n    Constraints:\n\n    `1 ≤ A.length ≤ 200,`\n\n    `-1000000 ≤ A[i] ≤ 1000000.`\n\n\n - `[output]` an integer\n\"\"\"", "inputs": [[[2, 4, 7]], [[1, 1, 3, 4]], [[23]], [[-10, -10, -10, -10, -10, -9, -9, -9, -8, -8, -7, -6, -5, -4, -3, -2, -1, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]], [[-4, -1]], [[0, 7, 9]], [[-1000000, -10000, -10000, -1000, -100, -10, -1, 0, 1, 10, 100, 1000, 10000, 100000, 1000000]]], "outputs": [[4], [1], [23], [15], [-4], [7], [0]], "starter_code": "def absolute_values_sum_minimization(A):\n\t", "canonical_solution": "from statistics import median_low as absolute_values_sum_minimization", "entry_point": "absolute_values_sum_minimization", "task_id": "TACO_lite/599", "input_output_examples": [[["1", "1", "add"], ["10", "10", "add"], ["1", "10", "subtract"], ["10", "100", "subtract"]], [["10"], ["100"], ["-1"], ["-10"]]]}
{"requirement": "def self_descriptive(num):\"\"\"\nA number is self-descriptive when the n'th digit describes the amount n appears in the number.\n\nNumbers can be of any length up to 9 digits and are only full integers. For a given number derive a function ```selfDescriptive(num)``` that returns; ```true``` if the number is self-descriptive or ```false``` if the number is not.\n\"\"\"", "inputs": [[21200], [3211000], [42101000], [21230], [11200], [1210], [51120111], [2020], [11201], [6210001000]], "outputs": [[true], [true], [true], [false], [false], [true], [false], [true], [false], [true]], "starter_code": "def self_descriptive(num):", "canonical_solution": "from collections import Counter\n\ndef self_descriptive(num):\n    s = [int(a) for a in str(num)]\n    cnt = Counter(s)\n    return all((cnt[i] == b for i, b in enumerate(s)))", "entry_point": "self_descriptive", "task_id": "TACO_lite/601", "input_output_examples": [[[10]], [[[1, 7, 10]]]]}
{"requirement": "def ant_bridge(ants, terrain):\"\"\"# Background\n\nMy pet bridge-maker ants are marching across a terrain from left to right.\n\nIf they encounter a gap, the first one stops and then next one climbs over him, then the next, and the next, until a bridge is formed across the gap. \n\nWhat clever little things they are!\n\nNow all the other ants can walk over the ant-bridge.\n\nWhen the last ant is across, the ant-bridge dismantles itself similar to how it was constructed.\n\nThis process repeats as many times as necessary (there may be more than one gap to cross) until all the ants reach the right hand side.\n\n# Kata Task\n\nMy little ants are marching across the terrain from left-to-right in the order ```A``` then ```B``` then ```C```...\n\nWhat order do they exit on the right hand side?\n\n# Notes\n\n* ```-``` = solid ground\n* ```.``` = a gap\n* The number of ants may differ but there are always enough ants to bridge the gaps\n* The terrain never starts or ends with a gap\n* Ants cannot pass other ants except by going over ant-bridges\n* If there is ever ambiguity which ant should move, then the ant at the **back** moves first\n\"\"\"", "inputs": [["GFEDCBA", "-----------------------"], ["GFEDCBA", "------------...-----------"], ["GFEDCBA", "------------.....---------"], ["GFEDCBA", "------.....------.....---------"], ["GFEDCBA", "------------...-----..----"], ["CBA", "--.--.---"], ["GFEDCBA", "------....-.---"], ["EDCBA", "--..---...-..-...----..-----"], ["JIHGFEDCBA", "--........------.-........-........---....-----"], ["JIHGFEDCBA", "-.....------........-.......-.......----"], ["JIHGFEDCBA", "-------.......-.......-"], ["JIHGFEDCBA", "-------.......-.......-.......-"], ["GFEDCBA", "-.-.-.-"]], "outputs": [["GFEDCBA"], ["EDCBAGF"], ["GFEDCBA"], ["GFEDCBA"], ["BAGFEDC"], ["CBA"], ["AGFEDCB"], ["EDCBA"], ["GFEDCBAJIH"], ["CBAJIHGFED"], ["GFEDCBAJIH"], ["EDCBAJIHGF"], ["GFEDCBA"]], "starter_code": "def ant_bridge(ants, terrain):", "canonical_solution": "import re\n\ndef ant_bridge(ants, terrain):\n    nGap = sum((2 + len(gap) - (free == '-') for free, gap in re.findall('(-+)(\\\\.+)', '-' + terrain))) % len(ants)\n    return ants[-nGap:] + ants[:-nGap]", "entry_point": "ant_bridge", "task_id": "TACO_lite/602", "input_output_examples": [[["hello", "aaahello"], ["abcde", "2db2a2ec"], ["aabbcc", "aacccbbcc"]], [["a"], ["2"], ["c"]]]}
{"requirement": "def number2words(n):\"\"\"\nCreate a function that transforms any positive number to a string representing the number in words.  The function should work for all numbers between 0 and 999999.\n\"\"\"", "inputs": [[0], [1], [8], [5], [9], [10], [19], [20], [22], [54], [80], [98], [100], [301], [793], [800], [650], [1000], [1003], [3052], [7300], [7217], [8340], [99997], [888887]], "outputs": [["zero"], ["one"], ["eight"], ["five"], ["nine"], ["ten"], ["nineteen"], ["twenty"], ["twenty-two"], ["fifty-four"], ["eighty"], ["ninety-eight"], ["one hundred"], ["three hundred one"], ["seven hundred ninety-three"], ["eight hundred"], ["six hundred fifty"], ["one thousand"], ["one thousand three"], ["three thousand fifty-two"], ["seven thousand three hundred"], ["seven thousand two hundred seventeen"], ["eight thousand three hundred forty"], ["ninety-nine thousand nine hundred ninety-seven"], ["eight hundred eighty-eight thousand eight hundred eighty-seven"]], "starter_code": "def number2words(n):", "canonical_solution": "words = 'zero one two three four five six seven eight nine' + ' ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty' + ' thirty forty fifty sixty seventy eighty ninety'\nwords = words.split(' ')\n\ndef number2words(n):\n    if n < 20:\n        return words[n]\n    elif n < 100:\n        return words[18 + n // 10] + ('' if n % 10 == 0 else '-' + words[n % 10])\n    elif n < 1000:\n        return number2words(n // 100) + ' hundred' + (' ' + number2words(n % 100) if n % 100 > 0 else '')\n    elif n < 1000000:\n        return number2words(n // 1000) + ' thousand' + (' ' + number2words(n % 1000) if n % 1000 > 0 else '')", "entry_point": "number2words", "task_id": "TACO_lite/603", "input_output_examples": [[[1]], [[[1]]]]}
{"requirement": "def change(st):\"\"\"\nCreate a function which accepts one arbitrary string as an argument, and return a string of length 26.\n\nThe objective is to set each of the 26 characters of the output string to either `'1'` or `'0'` based on the fact whether the Nth letter of the alphabet is present in the input (independent of its case).\n\nSo if an `'a'` or an `'A'` appears anywhere in the input string (any number of times), set the first character of the output string to `'1'`, otherwise to `'0'`. if `'b'` or `'B'` appears in the string, set the second character to `'1'`, and so on for the rest of the alphabet.\n\"\"\"", "inputs": [["a **&  bZ"], ["Abc e  $$  z"], ["!!a$%&RgTT"], [""], ["abcdefghijklmnopqrstuvwxyz"], ["aaaaaaaaaaa"], ["&%&%/$%$%$%$%GYtf67fg34678hgfdyd"]], "outputs": [["11000000000000000000000001"], ["11101000000000000000000001"], ["10000010000000000101000000"], ["00000000000000000000000000"], ["11111111111111111111111111"], ["10000000000000000000000000"], ["00010111000000000001000010"]], "starter_code": "def change(st):", "canonical_solution": "def change(st):\n    new = ''\n    st = st.lower()\n    for letter in 'abcdefghijklmnopqrstuvwxyz':\n        if letter in st:\n            new += '1'\n        else:\n            new += '0'\n    return new", "entry_point": "change", "task_id": "TACO_lite/609", "input_output_examples": [[[2, 2, 2], [2, 6, 2], [1, 5, 1], [1, 5, 3]], [[2], [12], [15], [5]]]}
{"requirement": "def will_it_balance(stick, gnd):\"\"\"\nA stick is balanced horizontally on a support. Will it topple over or stay balanced? (This is a physics problem: imagine a real wooden stick balanced horizontally on someone's finger or on a narrow table).\n\nThe stick is represented as a list, where each entry shows the mass in that part of the stick.\n\nThe stick is balanced on a support. The \"terrain\" is represented by a list of 1s and 0s, where the 1s represent the support and the 0s represent empty space. Each index is a coordinate on the x-axis.\n\nThe stick will only balance if its centre of mass is directly above some part of its support. Return `True` if the stick will balance and `False` if it will topple.\n\nBoth lists will be of equal length (that is, the stick and the terrain have equal width so that each index of the stick is directly above the corresponding index of the terrain). Every terrain will contain one, and only one, support.\n\"\"\"", "inputs": [[[2, 3, 2], [0, 1, 0]], [[5, 1, 1], [0, 1, 0]], [[3, 3, 4], [0, 1, 0]], [[9, 7, 1, 1], [1, 1, 0, 0]], [[9, 1, 1, 7], [1, 1, 0, 0]]], "outputs": [[true], [false], [false], [true], [false]], "starter_code": "def will_it_balance(stick, gnd):", "canonical_solution": "from math import ceil\n\ndef will_it_balance(stick, gnd):\n    gravPt = sum((v * i for i, v in enumerate(stick))) / sum(stick)\n    return gnd[int(gravPt)] == gnd[ceil(gravPt)] == 1", "entry_point": "will_it_balance", "task_id": "TACO_lite/618", "input_output_examples": [[["obugobugobuoobugsoo"], ["obbugugo"]], [["ooobuoobugsoo"], ["obugo"]]]}
{"requirement": "def shuffled_array(s):\"\"\"# Task\n A noob programmer was given two simple tasks: sum and sort the elements of the given array `arr` = [a1, a2, ..., an]. \n \n He started with summing and did it easily, but decided to store the sum he found in some random position of the original array which was a bad idea. Now he needs to cope with the second task, sorting the original array arr, and it's giving him trouble since he modified it.\n\n Given the array `shuffled`, consisting of elements a1, a2, ..., an, and their sumvalue in random order, return the sorted array of original elements a1, a2, ..., an.\n\n# Input/Output\n\n\n - `[input]` integer array `shuffled`\n\n    Array of at least two integers. It is guaranteed that there is an index i such that shuffled[i] = shuffled[0] + ... + shuffled[i - 1] + shuffled[i + 1] + ... + shuffled[n].\n\n    Constraints:\n\n    `2 ≤ shuffled.length ≤ 30,`\n\n    `-300 ≤ shuffled[i] ≤ 300.`\n\n\n - `[output]` an integer array\n\n    A `sorted` array of shuffled.length - 1 elements.\n\"\"\"", "inputs": [[[1, 12, 3, 6, 2]], [[1, -3, -5, 7, 2]], [[2, -1, 2, 2, -1]], [[-3, -3]]], "outputs": [[[1, 2, 3, 6]], [[-5, -3, 2, 7]], [[-1, -1, 2, 2]], [[-3]]], "starter_code": "def shuffled_array(s):", "canonical_solution": "def shuffled_array(s):\n    result = sorted(s)\n    result.remove(sum(result) // 2)\n    return result", "entry_point": "shuffled_array", "task_id": "TACO_lite/619", "input_output_examples": [[[1], [2], [3]], [[1], [1], [2]]]}
{"requirement": "def solve(a, b):\"\"\"\nConsider a sequence made up of the consecutive prime numbers. This infinite sequence would start with: \n```python\n\"2357111317192329313741434753596167717379...\"\n```\n\nYou will be given two numbers: `a` and `b`, and your task will be to return `b` elements starting from index `a` in this sequence.\n\nTests go up to about index `20000`.\n\nPlease also try [Simple time difference](https://www.codewars.com/kata/5b76a34ff71e5de9db0000f2)\n\"\"\"", "inputs": [[2, 2], [10, 5], [10, 3], [20, 9], [30, 12], [40, 8], [50, 6], [10000, 5], [20000, 5]], "outputs": [["57"], ["19232"], ["192"], ["414347535"], ["616771737983"], ["83899710"], ["031071"], ["02192"], ["09334"]], "starter_code": "def solve(a, b):", "canonical_solution": "def solve(a, b):\n    primes = '2357111317192329313741434753596167717379838997101103107109113127131137139149151157163167173179181191193197199211223227229233239241251257263269271277281283293307311313317331337347349353359367373379383389397401409419421431433439443449457461463467479487491499503509521523541547557563569571577587593599601607613617619631641643647653659661673677683691701709719727733739743751757761769773787797809811821823827829839853857859863877881883887907911919929937941947953967971977983991997100910131019102110311033103910491051106110631069108710911093109711031109111711231129115111531163117111811187119312011213121712231229123112371249125912771279128312891291129713011303130713191321132713611367137313811399140914231427142914331439144714511453145914711481148314871489149314991511152315311543154915531559156715711579158315971601160716091613161916211627163716571663166716691693169716991709172117231733174117471753175917771783178717891801181118231831184718611867187118731877187918891901190719131931193319491951197319791987199319971999200320112017202720292039205320632069208120832087208920992111211321292131213721412143215321612179220322072213222122372239224322512267226922732281228722932297230923112333233923412347235123572371237723812383238923932399241124172423243724412447245924672473247725032521253125392543254925512557257925912593260926172621263326472657265926632671267726832687268926932699270727112713271927292731274127492753276727772789279127972801280328192833283728432851285728612879288728972903290929172927293929532957296329692971299930013011301930233037304130493061306730793083308931093119312131373163316731693181318731913203320932173221322932513253325732593271329933013307331333193323332933313343334733593361337133733389339134073413343334493457346134633467346934913499351135173527352935333539354135473557355935713581358335933607361336173623363136373643365936713673367736913697370137093719372737333739376137673769377937933797380338213823383338473851385338633877388138893907391139173919392339293931394339473967398940014003400740134019402140274049405140574073407940914093409941114127412941334139415341574159417742014211421742194229423142414243425342594261427142734283428942974327433743394349435743634373439143974409442144234441444744514457446344814483449345074513451745194523454745494561456745834591459746034621463746394643464946514657466346734679469147034721472347294733475147594783478747894793479948014813481748314861487148774889490349094919493149334937494349514957496749694973498749934999500350095011502150235039505150595077508150875099510151075113511951475153516751715179518951975209522752315233523752615273527952815297530353095323533353475351538153875393539954075413541754195431543754415443544954715477547954835501550355075519552155275531555755635569557355815591562356395641564756515653565756595669568356895693570157115717573757415743574957795783579158015807581358215827583958435849585158575861586758695879588158975903592359275939595359815987600760116029603760436047605360676073607960896091610161136121613161336143615161636173619761996203621162176221622962476257626362696271627762876299630163116317632363296337634363536359636163676373637963896397642164276449645164696473648164916521652965476551655365636569657165776581659966076619663766536659666166736679668966916701670367096719673367376761676367796781679167936803682368276829683368416857686368696871688368996907691169176947694969596961696769716977698369916997700170137019702770397043705770697079710371097121712771297151715971777187719372077211721372197229723772437247725372837297730773097321733173337349735173697393741174177433745174577459747774817487748974997507751775237529753775417547754975597561757375777583758975917603760776217639764376497669767376817687769176997703771777237727774177537757775977897793781778237829784178537867787378777879788379017907791979277933793779497951796379938009801180178039805380598069808180878089809381018111811781238147816181678171817981918209821982218231823382378243826382698273828782918293829783118317832983538363836983778387838984198423842984318443844784618467850185138521852785378539854385638573858185978599860986238627862986418647866386698677868186898693869987078713871987318737874187478753876187798783880388078819882188318837883988498861886388678887889389238929893389418951896389698971899990019007901190139029904190439049905990679091910391099127913391379151915791619173918191879199920392099221922792399241925792779281928392939311931993239337934193439349937193779391939794039413941994219431943394379439946194639467947394799491949795119521953395399547955195879601961396199623962996319643964996619677967996899697971997219733973997439749976797699781978797919803981198179829983398399851985798599871988398879901990799239929993199419949996799731000710009100371003910061100671006910079100911009310099101031011110133101391014110151101591016310169101771018110193102111022310243102471025310259102671027110273102891030110303103131032110331103331033710343103571036910391103991042710429104331045310457104591046310477104871049910501105131052910531105591056710589105971060110607106131062710631106391065110657106631066710687106911070910711107231072910733107391075310771107811078910799108311083710847108531085910861108671088310889108911090310909109371093910949109571097310979109871099311003110271104711057110591106911071110831108711093111131111711119111311114911159111611117111173111771119711213112391124311251112571126111273112791128711299113111131711321113291135111353113691138311393113991141111423114371144311447114671147111483114891149111497115031151911527115491155111579115871159311597116171162111633116571167711681116891169911701117171171911731117431177711779117831178911801118071181311821118271183111833118391186311867118871189711903119091192311927119331193911941119531195911969119711198111987120071201112037120411204312049120711207312097121011210712109121131211912143121491215712161121631219712203122111222712239122411225112253122631226912277122811228912301123231232912343123471237312377123791239112401124091241312421124331243712451124571247312479124871249112497125031251112517125271253912541125471255312569125771258312589126011261112613126191263712641126471265312659126711268912697127031271312721127391274312757127631278112791127991280912821128231282912841128531288912893128991290712911129171291912923129411295312959129671297312979129831300113003130071300913033130371304313049130631309313099131031310913121131271314713151131591316313171131771318313187132171321913229132411324913259132671329113297133091331313327133311333713339133671338113397133991341113417134211344113451134571346313469134771348713499135131352313537135531356713577135911359713613136191362713633136491366913679136811368713691136931369713709137111372113723137291375113757137591376313781137891379913807138291383113841138591387313877138791388313901139031390713913139211393113933139631396713997139991400914011140291403314051140571407114081140831408714107141431414914153141591417314177141971420714221142431424914251142811429314303143211432314327143411434714369143871438914401144071441114419144231443114437144471444914461144791448914503145191453314537145431454914551145571456114563145911459314621146271462914633146391465314657146691468314699147131471714723147311473714741147471475314759147671477114779147831479714813148211482714831148431485114867148691487914887148911489714923149291493914947149511495714969149831501315017150311505315061150731507715083150911510115107151211513115137151391514915161151731518715193151991521715227152331524115259152631526915271152771528715289152991530715313153191532915331153491535915361153731537715383153911540115413154271543915443154511546115467154731549315497155111552715541155511555915569155811558315601156071561915629156411564315647156491566115667156711567915683157271573115733157371573915749157611576715773157871579115797158031580915817158231585915877158811588715889159011590715913159191592315937159591597115973159911600116007160331605716061160631606716069160731608716091160971610316111161271613916141161831618716189161931621716223162291623116249162531626716273163011631916333163391634916361163631636916381164111641716421164271643316447164511645316477164811648716493165191652916547165531656116567165731660316607166191663116633166491665116657166611667316691166931669916703167291674116747167591676316787168111682316829168311684316871168791688316889169011690316921169271693116937169431696316979169811698716993170111702117027170291703317041170471705317077170931709917107171171712317137171591716717183171891719117203172071720917231172391725717291172931729917317173211732717333173411735117359173771738317387173891739317401174171741917431174431744917467174711747717483174891749117497175091751917539175511756917573175791758117597175991760917623176271765717659176691768117683177071771317729177371774717749177611778317789177911780717827178371783917851178631788117891179031790917911179211792317929179391795717959179711797717981179871798918013180411804318047180491805918061180771808918097181191812118127181311813318143181491816918181181911819918211182171822318229182331825118253182571826918287182891830118307183111831318329183411835318367183711837918397184011841318427184331843918443184511845718461184811849318503185171852118523185391854118553185831858718593186171863718661186711867918691187011871318719187311874318749187571877318787187931879718803188391885918869188991891118913189171891918947189591897318979190011900919013190311903719051190691907319079190811908719121191391914119157191631918119183192071921119213192191923119237192491925919267192731928919301193091931919333193731937919381193871939119403194171942119423194271942919433194411944719457194631946919471194771948319489195011950719531195411954319553195591957119577195831959719603196091966119681196871969719699197091971719727197391975119753197591976319777197931980119813198191984119843198531986119867198891989119913199191992719937199491996119963199731997919991199931999720011200212002320029200472005120063200712008920101201072011320117201232012920143201472014920161201732017720183202012021920231202332024920261202692028720297203232032720333203412034720353203572035920369203892039320399204072041120431204412044320477204792048320507205092052120533205432054920551205632059320599206112062720639206412066320681206932070720717207192073120743207472074920753207592077120773207892080720809208492085720873208792088720897208992090320921209292093920947209592096320981209832100121011210132101721019210232103121059210612106721089211012110721121211392114321149211572116321169211792118721191211932121121221212272124721269212772128321313213172131921323213412134721377213792138321391213972140121407214192143321467214812148721491214932149921503215172152121523215292155721559215632156921577215872158921599216012161121613216172164721649216612167321683217012171321727217372173921751217572176721773217872179921803218172182121839218412185121859218632187121881218932191121929219372194321961219772199121997220032201322027220312203722039220512206322067220732207922091220932210922111221232212922133221472215322157221592217122189221932222922247222592227122273222772227922283222912230322307223432234922367223692238122391223972240922433224412244722453224692248122483225012251122531225412254322549225672257122573226132261922621226372263922643226512266922679226912269722699227092271722721227272273922741227512276922777227832278722807228112281722853228592286122871228772290122907229212293722943229612296322973229932300323011230172302123027230292303923041230532305723059230632307123081230872309923117231312314323159231672317323189231972320123203232092322723251232692327923291232932329723311233212332723333233392335723369233712339923417234312344723459234732349723509235312353723539235492355723561235632356723581235932359923603236092362323627236292363323663236692367123677236872368923719237412374323747237532376123767237732378923801238132381923827238312383323857238692387323879238872389323899239092391123917239292395723971239772398123993240012400724019240232402924043240492406124071240772408324091240972410324107241092411324121241332413724151241692417924181241972420324223242292423924247242512428124317243292433724359243712437324379243912440724413244192442124439244432446924473244812449924509245172452724533245472455124571245932461124623246312465924671246772468324691246972470924733247492476324767247812479324799248092482124841248472485124859248772488924907249172491924923249432495324967249712497724979249892501325031250332503725057250732508725097251112511725121251272514725153251632516925171251832518925219252292523725243252472525325261253012530325307253092532125339253432534925357253672537325391254092541125423254392544725453254572546325469254712552325537255412556125577255792558325589256012560325609256212563325639256432565725667256732567925693257032571725733257412574725759257632577125793257992580125819258412584725849258672587325889259032591325919259312593325939259432595125969259812599725999260032601726021260292604126053260832609926107261112611326119261412615326161261712617726183261892620326209262272623726249262512626126263262672629326297263092631726321263392634726357263712638726393263992640726417264232643126437264492645926479264892649726501265132653926557265612657326591265972662726633266412664726669266812668326687266932669926701267112671326717267232672926731267372675926777267832680126813268212683326839268492686126863268792688126891268932690326921269272694726951269532695926981269872699327011270172703127043270592706127067270732707727091271032710727109271272714327179271912719727211272392724127253272592727127277272812728327299273292733727361273672739727407274092742727431274372744927457274792748127487275092752727529275392754127551275812758327611276172763127647276532767327689276912769727701277332773727739277432774927751277632776727773277792779127793277992780327809278172782327827278472785127883278932790127917279192794127943279472795327961279672798327997280012801928027280312805128057280692808128087280972809928109281112812328151281632818128183282012821128219282292827728279282832828928297283072830928319283492835128387283932840328409284112842928433284392844728463284772849328499285132851728537285412854728549285592857128573285792859128597286032860728619286212862728631286432864928657286612866328669286872869728703287112872328729287512875328759287712878928793288072881328817288372884328859288672887128879289012890928921289272893328949289612897929009290172902129023290272903329059290632907729101291232912929131291372914729153291672917329179291912920129207292092922129231292432925129269292872929729303293112932729333293392934729363293832938729389293992940129411294232942929437294432945329473294832950129527295312953729567295692957329581295872959929611296292963329641296632966929671296832971729723297412975329759297612978929803298192983329837298512986329867298732987929881299172992129927299472995929983299893001130013300293004730059300713008930091300973010330109301133011930133301373013930161301693018130187301973020330211302233024130253302593026930271302933030730313303193032330341303473036730389303913040330427304313044930467304693049130493304973050930517305293053930553305573055930577305933063130637306433064930661306713067730689306973070330707307133072730757307633077330781308033080930817308293083930841308513085330859308693087130881308933091130931309373094130949309713097730983310133101931033310393105131063310693107931081310913112131123311393114731151311533115931177311813118331189311933121931223312313123731247312493125331259312673127131277313073131931321313273133331337313573137931387313913139331397314693147731481314893151131513315173153131541315433154731567315733158331601316073162731643316493165731663316673168731699317213172331727317293174131751317693177131793317993181731847318493185931873318833189131907319573196331973319813199132003320093202732029320513205732059320633206932077320833208932099321173211932141321433215932173321833218932191322033221332233322373225132257322613229732299323033230932321323233232732341323533235932363323693237132377323813240132411324133242332429324413244332467324793249132497325033250732531325333253732561325633256932573325793258732603326093261132621326333264732653326873269332707327133271732719327493277132779327833278932797328013280332831328333283932843328693288732909329113291732933329393294132957329693297132983329873299332999330133302333029330373304933053330713307333083330913310733113331193314933151331613317933181331913319933203332113322333247332873328933301333113331733329333313334333347333493335333359333773339133403334093341333427334573346133469334793348733493335033352133529335333354733563335693357733581335873358933599336013361333617336193362333629336373364133647336793370333713337213373933749337513375733767337693377333791337973380933811338273382933851338573386333871338893389333911339233393133937339413396133967339973401934031340333403934057340613412334127341293414134147341573415934171341833421134213342173423134253342593426134267342733428334297343013430334313343193432734337343513436134367343693438134403344213442934439344573446934471344833448734499345013451134513345193453734543345493458334589345913460334607346133463134649346513466734673346793468734693347033472134729347393474734757347593476334781348073481934841348433484734849348713487734883348973491334919349393494934961349633498135023350273505135053350593506935081350833508935099351073511135117351293514135149351533515935171352013522135227352513525735267352793528135291353113531735323353273533935353353633538135393354013540735419354233543735447354493546135491355073550935521355273553135533355373554335569355733559135593355973560335617356713567735729357313574735753357593577135797358013580335809358313583735839358513586335869358793589735899359113592335933359513596335969359773598335993359993600736011360133601736037360613606736073360833609736107361093613136137361513616136187361913620936217362293624136251362633626936277362933629936307363133631936341363433635336373363833638936433364513645736467364693647336479364933649736523365273652936541365513655936563365713658336587365993660736629366373664336653366713667736683366913669736709367133672136739367493676136767367793678136787367913679336809368213683336847368573687136877368873689936901369133691936923369293693136943369473697336979369973700337013370193702137039370493705737061370873709737117371233713937159371713718137189371993720137217372233724337253372733727737307373093731337321373373733937357373613736337369373793739737409374233744137447374633748337489374933750137507375113751737529375373754737549375613756737571375733757937589375913760737619376333764337649376573766337691376933769937717377473778137783377993781137813378313784737853378613787137879378893789737907379513795737963379673798737991379933799738011380393804738053380693808338113381193814938153381673817738183381893819738201382193823138237382393826138273382813828738299383033831738321383273832938333383513837138377383933843138447384493845338459384613850138543385573856138567385693859338603386093861138629386393865138653386693867138677386933869938707387113871338723387293873738747387493876738783387913880338821388333883938851388613886738873388913890338917389213892338933389533895938971389773899339019390233904139043390473907939089390973910339107391133911939133391393915739161391633918139191391993920939217392273922939233392393924139251392933930139313393173932339341393433935939367393713937339383393973940939419394393944339451394613949939503395093951139521395413955139563395693958139607396193962339631396593966739671396793970339709397193972739733397493976139769397793979139799398213982739829398393984139847398573986339869398773988339887399013992939937399533997139979399833998940009400134003140037400394006340087400934009940111401234012740129401514015340163401694017740189401934021340231402374024140253402774028340289403434035140357403614038740423404274042940433404594047140483404874049340499405074051940529405314054340559405774058340591405974060940627406374063940693406974069940709407394075140759407634077140787408014081340819408234082940841408474084940853408674087940883408974090340927409334093940949409614097340993410114101741023410394104741051410574107741081411134111741131411414114341149411614117741179411834118941201412034121341221412274123141233412434125741263412694128141299413334134141351413574138141387413894139941411414134144341453414674147941491415074151341519415214153941543415494157941593415974160341609416114161741621416274164141647416514165941669416814168741719417294173741759417614177141777418014180941813418434184941851418634187941887418934189741903419114192741941419474195341957419594196941981419834199942013420174201942023420434206142071420734208342089421014213142139421574216942179421814218742193421974220942221422234222742239422574228142283422934229942307423234233142337423494235942373423794239142397424034240742409424334243742443424514245742461424634246742473424874249142499425094253342557425694257142577425894261142641426434264942667426774268342689426974270142703427094271942727427374274342751427674277342787427934279742821428294283942841428534285942863428994290142923429294293742943429534296142967429794298943003430134301943037430494305143063430674309343103431174313343151431594317743189432014320743223432374326143271432834329143313433194332143331433914339743399434034341143427434414345143457434814348743499435174354143543435734357743579435914359743607436094361343627436334364943651436614366943691437114371743721437534375943777437814378343787437894379343801438534386743889438914391343933439434395143961439634396943973439874399143997440174402144027440294404144053440594407144087440894410144111441194412344129441314415944171441794418944201442034420744221442494425744263442674426944273442794428144293443514435744371443814438344389444174444944453444834449144497445014450744519445314453344537445434454944563445794458744617446214462344633446414464744651446574468344687446994470144711447294474144753447714477344777447894479744809448194483944843448514486744879448874489344909449174492744939449534495944963449714498344987450074501345053450614507745083451194512145127451314513745139451614517945181451914519745233452474525945263452814528945293453074531745319453294533745341453434536145377453894540345413454274543345439454814549145497455034552345533455414555345557455694558745589455994561345631456414565945667456734567745691456974570745737457514575745763457674577945817458214582345827458334584145853458634586945887458934594345949459534595945971459794598946021460274604946051460614607346091460934609946103461334614146147461534617146181461834618746199462194622946237462614627146273462794630146307463094632746337463494635146381463994641146439464414644746451464574647146477464894649946507465114652346549465594656746573465894659146601466194663346639466434664946663466794668146687466914670346723467274674746751467574676946771468074681146817468194682946831468534686146867468774688946901469194693346957469934699747017470414705147057470594708747093471114711947123471294713747143471474714947161471894720747221472374725147269472794728747293472974730347309473174733947351473534736347381473874738947407474174741947431474414745947491474974750147507475134752147527475334754347563475694758147591475994760947623476294763947653476574765947681476994770147711477134771747737477414774347777477794779147797478074780947819478374784347857478694788147903479114791747933479394794747951479634796947977479814801748023480294804948073480794809148109481194812148131481574816348179481874819348197482214823948247482594827148281482994831148313483374834148353483714838348397484074840948413484374844948463484734847948481484874849148497485234852748533485394854148563485714858948593486114861948623486474864948661486734867748679487314873348751487574876148767487794878148787487994880948817488214882348847488574885948869488714888348889489074894748953489734898948991490034900949019490314903349037490434905749069490814910349109491174912149123491394915749169491714917749193491994920149207492114922349253492614927749279492974930749331493334933949363493674936949391493934940949411494174942949433494514945949463494774948149499495234952949531495374954749549495594959749603496134962749633496394966349667496694968149697497114972749739497414974749757497834978749789498014980749811498234983149843498534987149877498914991949921499274993749939499434995749991499934999950021500235003350047500515005350069500775008750093501015011150119501235012950131501475015350159501775020750221502275023150261502635027350287502915031150321503295033350341503595036350377503835038750411504175042350441504595046150497505035051350527505395054350549505515058150587505915059350599506275064750651506715068350707507235074150753507675077350777507895082150833508395084950857508675087350891508935090950923509295095150957509695097150989509935100151031510435104751059510615107151109511315113351137511515115751169511935119751199512035121751229512395124151257512635128351287513075132951341513435134751349513615138351407514135141951421514275143151437514395144951461514735147951481514875150351511515175152151539515515156351577515815159351599516075161351631516375164751659516735167951683516915171351719517215174951767517695178751797518035181751827518295183951853518595186951871518935189951907519135192951941519495197151973519775199152009520215202752051520575206752069520815210352121521275214752153521635217752181521835218952201522235223752249522535225952267522895229152301523135232152361523635236952379523875239152433524535245752489525015251152517525295254152543525535256152567525715257952583526095262752631526395266752673526915269752709527115272152727527335274752757527695278352807528135281752837528595286152879528835288952901529035291952937529515295752963529675297352981529995300353017530475305153069530775308753089530935310153113531175312953147531495316153171531735318953197532015323153233532395326753269532795328153299533095332353327533535335953377533815340153407534115341953437534415345353479535035350753527535495355153569535915359353597536095361153617536235362953633536395365353657536815369353699537175371953731537595377353777537835379153813538195383153849538575386153881538875389153897538995391753923539275393953951539595398753993540015401154013540375404954059540835409154101541215413354139541515416354167541815419354217542515426954277542875429354311543195432354331543475436154367543715437754401544035440954413544195442154437544435444954469544935449754499545035451754521545395454154547545595456354577545815458354601546175462354629546315464754667546735467954709547135472154727547515476754773547795478754799548295483354851548695487754881549075491754919549415494954959549735497954983550015500955021550495505155057550615507355079551035510955117551275514755163551715520155207552135521755219552295524355249552595529155313553315533355337553395534355351553735538155399554115543955441554575546955487555015551155529555415554755579555895560355609556195562155631556335563955661556635566755673556815569155697557115571755721557335576355787557935579955807558135581755819558235582955837558435584955871558895589755901559035592155927559315593355949559675598755997560035600956039560415605356081560875609356099561015611356123561315614956167561715617956197562075620956237562395624956263562675626956299563115633356359563695637756383563935640156417564315643756443564535646756473564775647956489565015650356509565195652756531565335654356569565915659756599566115662956633566595666356671566815668756701567115671356731567375674756767567735677956783568075680956813568215682756843568575687356891568935689756909569115692156923569295694156951569575696356983569895699356999570375704157047570595707357077570895709757107571195713157139571435714957163571735717957191571935720357221572235724157251572595726957271572835728757301573295733157347573495736757373573835738957397574135742757457574675748757493575035752757529575575755957571575875759357601576375764157649576535766757679576895769757709577135771957727577315773757751577735778157787577915779357803578095782957839578475785357859578815789957901579175792357943579475797357977579915801358027580315804358049580575806158067580735809958109581115812958147581515815358169581715818958193581995820758211582175822958231582375824358271583095831358321583375836358367583695837958391583935840358411584175842758439584415845158453584775848158511585375854358549585675857358579586015860358613586315865758661586795868758693586995871158727587335874158757587635877158787587895883158889588975890158907589095891358921589375894358963589675897958991589975900959011590215902359029590515905359063590695907759083590935910759113591195912359141591495915959167591835919759207592095921959221592335923959243592635927359281593335934159351593575935959369593775938759393593995940759417594195944159443594475945359467594715947359497595095951359539595575956159567595815961159617596215962759629596515965959663596695967159693596995970759723597295974359747597535977159779597915979759809598335986359879598875992159929599515995759971599815999960013600176002960037600416007760083600896009160101601036010760127601336013960149601616016760169602096021760223602516025760259602716028960293603176033160337603436035360373603836039760413604276044360449604576049360497605096052160527605396058960601606076061160617606236063160637606476064960659606616067960689607036071960727607336073760757607616076360773607796079360811608216085960869608876088960899609016091360917609196092360937609436095360961610016100761027610316104361051610576109161099611216112961141611516115361169612116122361231612536126161283612916129761331613336133961343613576136361379613816140361409614176144161463614696147161483614876149361507615116151961543615476155361559615616158361603616096161361627616316163761643616516165761667616736168161687617036171761723617296175161757617816181361819618376184361861618716187961909619276193361949619616196761979619816198761991620036201162017620396204762053620576207162081620996211962129621316213762141621436217162189621916220162207622136221962233622736229762299623036231162323623276234762351623836240162417624236245962467624736247762483624976250162507625336253962549625636258162591625976260362617626276263362639626536265962683626876270162723627316274362753627616277362791628016281962827628516286162869628736289762903629216292762929629396296962971629816298362987629896302963031630596306763073630796309763103631136312763131631496317963197631996321163241632476327763281632996331163313633176333163337633476335363361633676337763389633916339763409634196342163439634436346363467634736348763493634996352163527635336354163559635776358763589635996360163607636116361763629636476364963659636676367163689636916369763703637096371963727637376374363761637736378163793637996380363809638236383963841638536385763863639016390763913639296394963977639976400764013640196403364037640636406764081640916410964123641516415364157641716418764189642176422364231642376427164279642836430164303643196432764333643736438164399644036443364439644516445364483644896449964513645536456764577645796459164601646096461364621646276463364661646636466764679646936470964717647476476364781647836479364811648176484964853648716487764879648916490164919649216492764937649516496964997650036501165027650296503365053650636507165089650996510165111651196512365129651416514765167651716517365179651836520365213652396525765267652696528765293653096532365327653536535765371653816539365407654136541965423654376544765449654796549765519655216553765539655436555165557655636557965581655876559965609656176562965633656476565165657656776568765699657016570765713657176571965729657316576165777657896580965827658316583765839658436585165867658816589965921659276592965951659576596365981659836599366029660376604166047660676607166083660896610366107661096613766161661696617366179661916622166239662716629366301663376634366347663596636166373663776638366403664136643166449664576646366467664916649966509665236652966533665416655366569665716658766593666016661766629666436665366683666976670166713667216673366739667496675166763667916679766809668216684166851668536686366877668836688966919669236693166943669476694966959669736697767003670216703367043670496705767061670736707967103671216712967139671416715367157671696718167187671896721167213672176721967231672476726167271672736728967307673396734367349673696739167399674096741167421674276742967433674476745367477674816748967493674996751167523675316753767547675596756767577675796758967601676076761967631676516767967699677096772367733677416775167757677596776367777677836778967801678076781967829678436785367867678836789167901679276793167933679396794367957679616796767979679876799368023680416805368059680716808768099681116811368141681476816168171682076820968213682196822768239682616827968281683116832968351683716838968399684376844368447684496847368477684836848968491685016850768521685316853968543685676858168597686116863368639686596866968683686876869968711687136872968737687436874968767687716877768791688136881968821688636887968881688916889768899689036890968917689276894768963689936900169011690196902969031690616906769073691096911969127691436914969151691636919169193691976920369221692336923969247692576925969263693136931769337693416937169379693836938969401694036942769431694396945769463694676947369481694916949369497694996953969557695936962369653696616967769691696976970969737697396976169763697676977969809698216982769829698336984769857698596987769899699116992969931699416995969991699977000170003700097001970039700517006170067700797009970111701177012170123701397014170157701637017770181701837019970201702077022370229702377024170249702717028970297703097031370321703277035170373703797038170393704237042970439704517045770459704817048770489705017050770529705377054970571705737058370589706077061970621706277063970657706637066770687707097071770729707537076970783707937082370841708437084970853708677087770879708917090170913709197092170937709497095170957709697097970981709917099770999710117102371039710597106971081710897111971129711437114771153711617116771171711917120971233712377124971257712617126371287712937131771327713297133371339713417134771353713597136371387713897139971411714137141971429714377144371453714717147371479714837150371527715377154971551715637156971593715977163371647716637167171693716997170771711717137171971741717617177771789718077180971821718377184371849718617186771879718817188771899719097191771933719417194771963719717198371987719937199972019720317204372047720537207372077720897209172101721037210972139721617216772169721737221172221722237222772229722517225372269722717227772287723077231372337723417235372367723797238372421724317246172467724697248172493724977250372533725477255172559725777261372617726237264372647726497266172671726737267972689727017270772719727277273372739727637276772797728177282372859728697287172883728897289372901729077291172923729317293772949729537295972973729777299773009730137301973037730397304373061730637307973091731217312773133731417318173189732377324373259732777329173303733097332773331733517336173363733697337973387734177342173433734537345973471734777348373517735237352973547735537356173571735837358973597736077360973613736377364373651736737367973681736937369973709737217372773751737577377173783738197382373847738497385973867738777388373897739077393973943739517396173973739997401774021740277404774051740717407774093740997410174131741437414974159741617416774177741897419774201742037420974219742317425774279742877429374297743117431774323743537435774363743777438174383744117441374419744417444974453744717448974507745097452174527745317455174561745677457374587745977460974611746237465374687746997470774713747177471974729747317474774759747617477174779747977482174827748317484374857748617486974873748877489174897749037492374929749337494174959750117501375017750297503775041750797508375109751337514975161751677516975181751937520975211752177522375227752397525375269752777528975307753237532975337753477535375367753777538975391754017540375407754317543775479755037551175521755277553375539755417555375557755717557775583756117561775619756297564175653756597567975683756897570375707757097572175731757437576775773757817578775793757977582175833758537586975883759137593175937759417596775979759837598975991759977600176003760317603976079760817609176099761037612376129761477615776159761637620776213762317624376249762537625976261762837628976303763337634376367763697637976387764037642176423764417646376471764817648776493765077651176519765377654176543765617657976597766037660776631766497665176667766737667976697767177673376753767577677176777767817680176819768297683176837768477687176873768837690776913769197694376949769617696376991770037701777023770297704177047770697708177093771017713777141771537716777171771917720177213772377723977243772497726177263772677726977279772917731777323773397734777351773597736977377773837741777419774317744777471774777747977489774917750977513775217752777543775497755177557775637756977573775877759177611776177762177641776477765977681776877768977699777117771377719777237773177743777477776177773777837779777801778137783977849778637786777893778997792977933779517796977977779837799978007780177803178041780497805978079781017812178137781397815778163781677817378179781917819378203782297823378241782597827778283783017830778311783177834178347783677840178427784377843978467784797848778497785097851178517785397854178553785697857178577785837859378607786237864378649786537869178697787077871378721787377877978781787877879178797788037880978823788397885378857788777888778889788937890178919789297894178977789797898979031790397904379063790877910379111791337913979147791517915379159791817918779193792017922979231792417925979273792797928379301793097931979333793377934979357793677937979393793977939979411794237942779433794517948179493795317953779549795597956179579795897960179609796137962179627796317963379657796697968779691796937969779699797577976979777798017981179813798177982379829798417984379847798617986779873798897990179903799077993979943799677997379979799877999779999800218003980051800718007780107801118014180147801498015380167801738017780191802078020980221802318023380239802518026380273802798028780309803178032980341803478036380369803878040780429804478044980471804738048980491805138052780537805578056780599806038061180621806278062980651806578066980671806778068180683806878070180713807378074780749807618077780779807838078980803808098081980831808338084980863808978090980911809178092380929809338095380963809898100181013810178101981023810318104181043810478104981071810778108381097811018111981131811578116381173811818119781199812038122381233812398128181283812938129981307813318134381349813538135981371813738140181409814218143981457814638150981517815278153381547815518155381559815638156981611816198162981637816478164981667816718167781689817018170381707817278173781749817618176981773817998181781839818478185381869818838189981901819198192981931819378194381953819678197181973820038200782009820138202182031820378203982051820678207382129821398214182153821638217182183821898219382207822178221982223822318223782241822618226782279823018230782339823498235182361823738238782393824218245782463824698247182483824878249382499825078252982531825498255982561825678257182591826018260982613826198263382651826578269982721827238272782729827578275982763827818278782793827998281182813828378284782883828898289182903829138293982963829818299783003830098302383047830598306383071830778308983093831018311783137831778320383207832198322183227832318323383243832578326783269832738329983311833398334183357833838338983399834018340783417834238343183437834438344983459834718347783497835378355783561835638357983591835978360983617836218363983641836538366383689837018371783719837378376183773837778379183813838338384383857838698387383891839038391183921839338393983969839838398784011840178404784053840598406184067840898412184127841318413784143841638417984181841918419984211842218422384229842398424784263842998430784313843178431984347843498437784389843918440184407844218443184437844438444984457844638446784481844998450384509845218452384533845518455984589846298463184649846538465984673846918469784701847138471984731847378475184761847878479384809848118482784857848598486984871849138491984947849618496784977849798499185009850218502785037850498506185081850878509185093851038510985121851338514785159851938519985201852138522385229852378524385247852598529785303853138533185333853618536385369853818541185427854298543985447854518545385469854878551385517855238553185549855718557785597856018560785619856218562785639856438566185667856698569185703857118571785733857518578185793858178581985829858318583785843858478585385889859038590985931859338599185999860118601786027860298606986077860838611186113861178613186137861438616186171861798618386197862018620986239862438624986257862638626986287862918629386297863118632386341863518635386357863698637186381863898639986413864238644186453864618646786477864918650186509865318653386539865618657386579865878659986627866298667786689866938671186719867298674386753867678677186783868138683786843868518685786861868698692386927869298693986951869598696986981869938701187013870378704187049870718708387103871078711987121871338714987151871798718187187872118722187223872518725387257872778728187293872998731387317873238733787359873838740387407874218742787433874438747387481874918750987511875178752387539875418754787553875578755987583875878758987613876238762987631876418764387649876718767987683876918769787701877198772187739877438775187767877938779787803878118783387853878698787787881878878791187917879318794387959879618797387977879918800188003880078801988037880698807988093881178812988169881778821188223882378824188259882618828988301883218832788337883398837988397884118842388427884638846988471884938849988513885238854788589885918860788609886438865188657886618866388667886818872188729887418874788771887898879388799888018880788811888138881788819888438885388861888678887388883888978890388919889378895188969889938899789003890098901789021890418905189057890698907189083890878910189107891138911989123891378915389189892038920989213892278923189237892618926989273892938930389317893298936389371893818938789393893998941389417894318944389449894598947789491895018951389519895218952789533895618956389567895918959789599896038961189627896338965389657896598966989671896818968989753897598976789779897838979789809898198982189833898398984989867898918989789899899098991789923899398995989963899778998389989900019000790011900179001990023900319005390059900679007190073900899010790121901279014990163901739018790191901979019990203902179022790239902479026390271902819028990313903539035990371903739037990397904019040390407904379043990469904739048190499905119052390527905299053390547905839059990617906199063190641906479065990677906799069790703907099073190749907879079390803908219082390833908419084790863908879090190907909119091790931909479097190977909899099791009910199103391079910819109791099911219112791129911399114191151911539115991163911839119391199912299123791243912499125391283912919129791303913099133191367913699137391381913879139391397914119142391433914539145791459914639149391499915139152991541915719157391577915839159191621916319163991673916919170391711917339175391757917719178191801918079181191813918239183791841918679187391909919219193991943919519195791961919679196991997920039200992033920419205192077920839210792111921199214392153921739217792179921899220392219922219222792233922379224392251922699229792311923179233392347923539235792363923699237792381923839238792399924019241392419924319245992461924679247992489925039250792551925579256792569925819259392623926279263992641926479265792669926719268192683926939269992707927179272392737927539276192767927799278992791928019280992821928319284992857928619286392867928939289992921929279294192951929579295992987929939300193047930539305993077930839308993097931039311393131931339313993151931699317993187931999322993239932419325193253932579326393281932839328793307933199332393329933379337193377933839340793419934279346393479934819348793491934939349793503935239352993553935579355993563935819360193607936299363793683937019370393719937399376193763937879380993811938279385193871938879388993893939019391193913939239393793941939499396793971939799398393997940079400994033940499405794063940799409994109941119411794121941519415394169942019420794219942299425394261942739429194307943099432194327943319434394349943519437994397943999442194427944339443994441944479446394477944839451394529945319454194543945479455994561945739458394597946039461394621946499465194687946939470994723947279474794771947779478194789947939481194819948239483794841948479484994873948899490394907949339494994951949619499394999950039500995021950279506395071950839508795089950939510195107951119513195143951539517795189951919520395213952199523195233952399525795261952679527395279952879531195317953279533995369953839539395401954139541995429954419544395461954679547195479954839550795527955319553995549955619556995581955979560395617956219562995633956519570195707957139571795723957319573795747957739578395789957919580195803958139581995857958699587395881958919591195917959239592995947959579595995971959879598996001960139601796043960539605996079960979613796149961579616796179961819619996211962219622396233962599626396269962819628996293963239632996331963379635396377964019641996431964439645196457964619646996479964879649396497965179652796553965579658196587965899660196643966619666796671966979670396731967379673996749967579676396769967799678796797967999682196823968279684796851968579689396907969119693196953969599697396979969899699797001970039700797021970399707397081971039711797127971519715797159971699717197177971879721397231972419725997283973019730397327973679736997373973799738197387973979742397429974419745397459974639749997501975119752397547975499755397561975719757797579975839760797609976139764997651976739768797711977299777197777977879778997813978299784197843978479784997859978619787197879978839791997927979319794397961979679797397987980099801198017980419804798057980819810198123981299814398179982079821398221982279825198257982699829798299983179832198323983279834798369983779838798389984079841198419984299844398453984599846798473984799849198507985199853398543985619856398573985979862198627986399864198663986699868998711987139871798729987319873798773987799880198807988099883798849988679886998873988879889398897988999890998911989279892998939989479895398963989819899398999990139901799023990419905399079990839908999103991099911999131991339913799139991499917399181991919922399233992419925199257992599927799289993179934799349993679937199377993919939799401994099943199439994699948799497995239952799529995519955999563995719957799581996079961199623996439966199667996799968999707997099971399719997219973399761997679978799793998099981799823998299983399839998599987199877998819990199907999239992999961999719998999991100003100019100043100049100057100069100103100109100129100151100153100169100183100189100193100207100213100237100267100271100279100291100297100313100333100343100357100361100363100379100391100393100403100411100417100447100459100469100483100493100501100511100517100519100523100537100547100549100559100591100609100613100621100649100669100673100693100699100703100733100741100747100769100787100799100801100811100823100829100847100853100907100913100927100931100937100943100957100981100987100999101009101021101027101051101063101081101089101107101111101113101117101119101141101149101159101161101173101183101197101203101207101209101221101267101273101279101281101287101293101323101333101341101347101359101363101377101383101399101411101419101429101449101467101477101483101489101501101503101513101527101531101533101537101561101573101581101599101603101611101627101641101653101663101681101693101701101719101723101737101741101747101749101771101789101797101807101833101837101839101863101869101873101879101891101917101921101929101939101957101963101977101987101999102001102013102019102023102031102043102059102061102071102077102079102101102103102107102121102139102149102161102181102191102197102199102203102217102229102233102241102251102253102259102293102299102301102317102329102337102359102367102397102407102409102433102437102451102461102481102497102499102503102523102533102539102547102551102559102563102587102593102607102611102643102647102653102667102673102677102679102701102761102763102769102793102797102811102829102841102859102871102877102881102911102913102929102931102953102967102983103001103007103043103049103067103069103079103087103091103093103099103123103141103171103177103183103217103231103237103289103291103307103319103333103349103357103387103391103393103399103409103421103423103451103457103471103483103511103529103549103553103561103567103573103577103583103591103613103619103643103651103657103669103681103687103699103703103723103769103787103801103811103813103837103841103843103867103889103903103913103919103951103963103967103969103979103981103991103993103997104003104009104021104033104047104053104059104087104089104107104113104119104123104147104149104161104173104179104183104207104231104233104239104243104281104287104297104309104311104323104327104347104369104381104383104393104399104417104459104471104473104479104491104513104527104537104543104549104551104561104579104593104597104623104639104651104659104677104681104683104693104701104707104711104717104723104729104743104759104761104773104779104789104801104803104827104831104849104851104869104879104891104911104917104933104947104953104959104971104987104999105019105023105031105037105071105097105107105137105143105167105173105199105211105227105229105239105251105253105263105269105277105319105323105331105337105341105359105361105367105373105379105389105397105401105407105437105449105467105491105499105503105509105517105527105529105533105541105557105563105601105607105613105619105649105653105667105673105683105691105701105727105733105751105761105767105769105817105829105863105871105883105899105907105913105929105943105953105967105971105977105983105997106013106019106031106033106087106103106109106121106123106129106163106181106187106189106207106213106217106219106243106261106273106277106279106291106297106303106307106319106321106331106349106357106363106367106373106391106397106411106417106427106433106441106451106453106487106501106531106537106541106543106591106619106621106627106637106649106657106661106663106669106681106693106699106703106721106727106739106747106751106753106759106781106783106787106801106823106853106859106861106867106871106877106903106907106921106937106949106957106961106963106979106993107021107033107053107057107069107071107077107089107099107101107119107123107137107171107183107197107201107209107227107243107251107269107273107279107309107323107339107347107351107357107377107441107449107453107467107473107507107509107563107581107599107603107609107621107641107647107671107687107693107699107713107717107719107741107747107761107773107777107791107827107837107839107843107857107867107873107881107897107903107923107927107941107951107971107981107999108007108011108013108023108037108041108061108079108089108107108109108127108131108139108161108179108187108191108193108203108211108217108223108233108247108263108271108287108289108293108301108343108347108359108377108379108401108413108421108439108457108461108463108497108499108503108517108529108533108541108553108557108571108587108631108637108643108649108677108707108709108727108739108751108761108769108791108793108799108803108821108827108863108869108877108881108883108887108893108907108917108923108929108943108947108949108959108961108967108971108991109001109013109037109049109063109073109097109103109111109121109133109139109141109147109159109169109171109199109201109211109229109253109267109279109297109303109313109321109331109357109363109367109379109387109391109397109423109433109441109451109453109469109471109481109507109517109519109537109541109547109567109579109583109589109597109609109619109621109639109661109663109673109717109721109741109751109789109793109807109819109829109831109841109843109847109849109859109873109883109891109897109903109913109919109937109943109961109987110017110023110039110051110059110063110069110083110119110129110161110183110221110233110237110251110261110269110273110281110291110311110321110323110339110359110419110431110437110441110459110477110479110491110501110503110527110533110543110557110563110567110569110573110581110587110597110603110609110623110629110641110647110651110681110711110729110731110749110753110771110777110807110813110819110821110849110863110879110881110899110909110917110921110923110927110933110939110947110951110969110977110989111029111031111043111049111053111091111103111109111119111121111127111143111149111187111191111211111217111227111229111253111263111269111271111301111317111323111337111341111347111373111409111427111431111439111443111467111487111491111493111497111509111521111533111539111577111581111593111599111611111623111637111641111653111659111667111697111721111731111733111751111767111773111779111781111791111799111821111827111829111833111847111857111863111869111871111893111913111919111949111953111959111973111977111997112019112031112061112067112069112087112097112103112111112121112129112139112153112163112181112199112207112213112223112237112241112247112249112253112261112279112289112291112297112303112327112331112337112339112349112361112363112397112403112429112459112481112501112507112543112559112571112573112577112583112589112601112603112621112643112657112663112687112691112741112757112759112771112787112799112807112831112843112859112877112901112909112913112919112921112927112939112951112967112979112997113011113017113021113023113027113039113041113051113063113081113083113089113093113111113117113123113131113143113147113149113153113159113161113167113171113173113177113189113209113213113227113233113279113287113327113329113341113357113359113363113371113381113383113417113437113453113467113489113497113501113513113537113539113557113567113591113621113623113647113657113683113717113719113723113731113749113759113761113777113779113783113797113809113819113837113843113891113899113903113909113921113933113947113957113963113969113983113989114001114013114031114041114043114067114073114077114083114089114113114143114157114161114167114193114197114199114203114217114221114229114259114269114277114281114299114311114319114329114343114371114377114407114419114451114467114473114479114487114493114547114553114571114577114593114599114601114613114617114641114643114649114659114661114671114679114689114691114713114743114749114757114761114769114773114781114797114799114809114827114833114847114859114883114889114901114913114941114967114973114997115001115013115019115021115057115061115067115079115099115117115123115127115133115151115153115163115183115201115211115223115237115249115259115279115301115303115309115319115321115327115331115337115343115361115363115399115421115429115459115469115471115499115513115523115547115553115561115571115589115597115601115603115613115631115637115657115663115679115693115727115733115741115751115757115763115769115771115777115781115783115793115807115811115823115831115837115849115853115859115861115873115877115879115883115891115901115903115931115933115963115979115981115987116009116027116041116047116089116099116101116107116113116131116141116159116167116177116189116191116201116239116243116257116269116273116279116293116329116341116351116359116371116381116387116411116423116437116443116447116461116471116483116491116507116531116533116537116539116549116579116593116639116657116663116681116687116689116707116719116731116741116747116789116791116797116803116819116827116833116849116867116881116903116911116923116927116929116933116953116959116969116981116989116993117017117023117037117041117043117053117071117101117109117119117127117133117163117167117191117193117203117209117223117239117241117251117259117269117281117307117319117329117331117353117361117371117373117389117413117427117431117437117443117497117499117503117511117517117529117539117541117563117571117577117617117619117643117659117671117673117679117701117703117709117721117727117731117751117757117763117773117779117787117797117809117811117833117839117841117851117877117881117883117889117899117911117917117937117959117973117977117979117989117991118033118037118043118051118057118061118081118093118127118147118163118169118171118189118211118213118219118247118249118253118259118273118277118297118343118361118369118373118387118399118409118411118423118429118453118457118463118471118493118529118543118549118571118583118589118603118619118621118633118661118669118673118681118687118691118709118717118739118747118751118757118787118799118801118819118831118843118861118873118891118897118901118903118907118913118927118931118967118973119027119033119039119047119057119069119083119087119089119099119101119107119129119131119159119173119179119183119191119227119233119237119243119267119291119293119297119299119311119321119359119363119389119417119419119429119447119489119503119513119533119549119551119557119563119569119591119611119617119627119633119653119657119659119671119677119687119689119699119701119723119737119747119759119771119773119783119797119809119813119827119831119839119849119851119869119881119891119921119923119929119953119963119971119981119983119993120011120017120041120047120049120067120077120079120091120097120103120121120157120163120167120181120193120199120209120223120233120247120277120283120293120299120319120331120349120371120383120391120397120401120413120427120431120473120503120511120539120551120557120563120569120577120587120607120619120623120641120647120661120671120677120689120691120709120713120721120737120739120749120763120767120779120811120817120823120829120833120847120851120863120871120877120889120899120907120917120919120929120937120941120943120947120977120997121001121007121013121019121021121039121061121063121067121081121123121139121151121157121169121171121181121189121229121259121267121271121283121291121309121313121321121327121333121343121349121351121357121367121369121379121403121421121439121441121447121453121469121487121493121501121507121523121531121547121553121559121571121577121579121591121607121609121621121631121633121637121661121687121697121711121721121727121763121787121789121843121853121867121883121889121909121921121931121937121949121951121963121967121993121997122011122021122027122029122033122039122041122051122053122069122081122099122117122131122147122149122167122173122201122203122207122209122219122231122251122263122267122273122279122299122321122323122327122347122363122387122389122393122399122401122443122449122453122471122477122489122497122501122503122509122527122533122557122561122579122597122599122609122611122651122653122663122693122701122719122741122743122753122761122777122789122819122827122833122839122849122861122867122869122887122891122921122929122939122953122957122963122971123001123007123017123031123049123059123077123083123091123113123121123127123143123169123191123203123209123217123229123239123259123269123289123307123311123323123341123373123377123379123397123401123407123419123427123433123439123449123457123479123491123493123499123503123517123527123547123551123553123581123583123593123601123619123631123637123653123661123667123677123701123707123719123727123731123733123737123757123787123791123803123817123821123829123833123853123863123887123911123923123931123941123953123973123979123983123989123997124001124021124067124087124097124121124123124133124139124147124153124171124181124183124193124199124213124231124247124249124277124291124297124301124303124309124337124339124343124349124351124363124367124427124429124433124447124459124471124477124489124493124513124529124541124543124561124567124577124601124633124643124669124673124679124693124699124703124717124721124739124753124759124769124771124777124781124783124793124799124819124823124847124853124897124907124909124919124951124979124981124987124991125003125017125029125053125063125093125101125107125113125117125119125131125141125149125183125197125201125207125219125221125231125243125261125269125287125299125303125311125329125339125353125371125383125387125399125407125423125429125441125453125471125497125507125509125527125539125551125591125597125617125621125627125639125641125651125659125669125683125687125693125707125711125717125731125737125743125753125777125789125791125803125813125821125863125887125897125899125921125927125929125933125941125959125963126001126011126013126019126023126031126037126041126047126067126079126097126107126127126131126143126151126173126199126211126223126227126229126233126241126257126271126307126311126317126323126337126341126349126359126397126421126433126443126457126461126473126481126487126491126493126499126517126541126547126551126583126601126611126613126631126641126653126683126691126703126713126719126733126739126743126751126757126761126781126823126827126839126851126857126859126913126923126943126949126961126967126989127031127033127037127051127079127081127103127123127133127139127157127163127189127207127217127219127241127247127249127261127271127277127289127291127297127301127321127331127343127363127373127399127403127423127447127453127481127487127493127507127529127541127549127579127583127591127597127601127607127609127637127643127649127657127663127669127679127681127691127703127709127711127717127727127733127739127747127763127781127807127817127819127837127843127849127859127867127873127877127913127921127931127951127973127979127997128021128033128047128053128099128111128113128119128147128153128159128173128189128201128203128213128221128237128239128257128273128287128291128311128321128327128339128341128347128351128377128389128393128399128411128413128431128437128449128461128467128473128477128483128489128509128519128521128549128551128563128591128599128603128621128629128657128659128663128669128677128683128693128717128747128749128761128767128813128819128831128833128837128857128861128873128879128903128923128939128941128951128959128969128971128981128983128987128993129001129011129023129037129049129061129083129089129097129113129119129121129127129169129187129193129197129209129221129223129229129263129277129281129287129289129293129313129341129347129361129379129401129403129419129439129443129449129457129461129469129491129497129499129509129517129527129529129533129539129553129581129587129589129593129607129629129631129641129643129671129707129719129733129737129749129757129763129769129793129803129841129853129887129893129901129917129919129937129953129959129967129971130003130021130027130043130051130057130069130073130079130087130099130121130127130147130171130183130199130201130211130223130241130253130259130261130267130279130303130307130337130343130349130363130367130369130379130399130409130411130423130439130447130457130469130477130483130489130513130517130523130531130547130553130579130589130619130621130631130633130639130643130649130651130657130681130687130693130699130729130769130783130787130807130811130817130829130841130843130859130873130927130957130969130973130981130987131009131011131023131041131059131063131071131101131111131113131129131143131149131171131203131213131221131231131249131251131267131293131297131303131311131317131321131357131363131371131381131413131431131437131441131447131449131477131479131489131497131501131507131519131543131561131581131591131611131617131627131639131641131671131687131701131707131711131713131731131743131749131759131771131777131779131783131797131837131839131849131861131891131893131899131909131927131933131939131941131947131959131969132001132019132047132049132059132071132103132109132113132137132151132157132169132173132199132229132233132241132247132257132263132283132287132299132313132329132331132347132361132367132371132383132403132409132421132437132439132469132491132499132511132523132527132529132533132541132547132589132607132611132619132623132631132637132647132661132667132679132689132697132701132707132709132721132739132749132751132757132761132763132817132833132851132857132859132863132887132893132911132929132947132949132953132961132967132971132989133013133033133039133051133069133073133087133097133103133109133117133121133153133157133169133183133187133201133213133241133253133261133271133277133279133283133303133319133321133327133337133349133351133379133387133391133403133417133439133447133451133481133493133499133519133541133543133559133571133583133597133631133633133649133657133669133673133691133697133709133711133717133723133733133769133781133801133811133813133831133843133853133873133877133919133949133963133967133979133981133993133999134033134039134047134053134059134077134081134087134089134093134129134153134161134171134177134191134207134213134219134227134243134257134263134269134287134291134293134327134333134339134341134353134359134363134369134371134399134401134417134437134443134471134489134503134507134513134581134587134591134593134597134609134639134669134677134681134683134699134707134731134741134753134777134789134807134837134839134851134857134867134873134887134909134917134921134923134947134951134989134999135007135017135019135029135043135049135059135077135089135101135119135131135151135173135181135193135197135209135211135221135241135257135271135277135281135283135301135319135329135347135349135353135367135389135391135403135409135427135431135433135449135461135463135467135469135479135497135511135533135559135571135581135589135593135599135601135607135613135617135623135637135647135649135661135671135697135701135719135721135727135731135743135757135781135787135799135829135841135851135859135887135893135899135911135913135929135937135977135979136013136027136033136043136057136067136069136093136099136111136133136139136163136177136189136193136207136217136223136237136247136261136273136277136303136309136319136327136333136337136343136351136361136373136379136393136397136399136403136417136421136429136447136453136463136471136481136483136501136511136519136523136531136537136541136547136559136573136601136603136607136621136649136651136657136691136693136709136711136727136733136739136751136753136769136777136811136813136841136849136859136861136879136883136889136897136943136949136951136963136973136979136987136991136993136999137029137077137087137089137117137119137131137143137147137153137177137183137191137197137201137209137219137239137251137273137279137303137321137339137341137353137359137363137369137383137387137393137399137413137437137443137447137453137477137483137491137507137519137537137567137573137587137593137597137623137633137639137653137659137699137707137713137723137737137743137771137777137791137803137827137831137849137867137869137873137909137911137927137933137941137947137957137983137993137999138007138041138053138059138071138077138079138101138107138113138139138143138157138163138179138181138191138197138209138239138241138247138251138283138289138311138319138323138337138349138371138373138389138401138403138407138427138433138449138451138461138469138493138497138511138517138547138559138563138569138571138577138581138587138599138617138629138637138641138647138661138679138683138727138731138739138763138793138797138799138821138829138841138863138869138883138889138893138899138917138923138937138959138967138977139021139033139067139079139091139109139121139123139133139169139177139187139199139201139241139267139273139291139297139301139303139309139313139333139339139343139361139367139369139387139393139397139409139423139429139439139457139459139483139487139493139501139511139537139547139571139589139591139597139609139619139627139661139663139681139697139703139709139721139729139739139747139753139759139787139801139813139831139837139861139871139883139891139901139907139921139939139943139967139969139981139987139991139999140009140053140057140069140071140111140123140143140159140167140171140177140191140197140207140221140227140237140249140263140269140281140297140317140321140333140339140351140363140381140401140407140411140417140419140423140443140449140453140473140477140521140527140533140549140551140557140587140593140603140611140617140627140629140639140659140663140677140681140683140689140717140729140731140741140759140761140773140779140797140813140827140831140837140839140863140867140869140891140893140897140909140929140939140977140983140989141023141041141061141067141073141079141101141107141121141131141157141161141179141181141199141209141221141223141233141241141257141263141269141277141283141301141307141311141319141353141359141371141397141403141413141439141443141461141481141497141499141509141511141529141539141551141587141601141613141619141623141629141637141649141653141667141671141677141679141689141697141707141709141719141731141761141767141769141773141793141803141811141829141833141851141853141863141871141907141917141931141937141941141959141961141971141991142007142019142031142039142049142057142061142067142097142099142111142123142151142157142159142169142183142189142193142211142217142223142231142237142271142297142319142327142357142369142381142391142403142421142427142433142453142469142501142529142537142543142547142553142559142567142573142589142591142601142607142609142619142657142673142697142699142711142733142757142759142771142787142789142799142811142837142841142867142871142873142897142903142907142939142949142963142969142973142979142981142993143053143063143093143107143111143113143137143141143159143177143197143239143243143249143257143261143263143281143287143291143329143333143357143387143401143413143419143443143461143467143477143483143489143501143503143509143513143519143527143537143551143567143569143573143593143609143617143629143651143653143669143677143687143699143711143719143729143743143779143791143797143807143813143821143827143831143833143873143879143881143909143947143953143971143977143981143999144013144031144037144061144071144073144103144139144161144163144167144169144173144203144223144241144247144253144259144271144289144299144307144311144323144341144349144379144383144407144409144413144427144439144451144461144479144481144497144511144539144541144563144569144577144583144589144593144611144629144659144667144671144701144709144719144731144737144751144757144763144773144779144791144817144829144839144847144883144887144889144899144917144931144941144961144967144973144983145007145009145021145031145037145043145063145069145091145109145121145133145139145177145193145207145213145219145253145259145267145283145289145303145307145349145361145381145391145399145417145423145433145441145451145459145463145471145477145487145501145511145513145517145531145543145547145549145577145589145601145603145633145637145643145661145679145681145687145703145709145721145723145753145757145759145771145777145799145807145819145823145829145861145879145897145903145931145933145949145963145967145969145987145991146009146011146021146023146033146051146057146059146063146077146093146099146117146141146161146173146191146197146203146213146221146239146249146273146291146297146299146309146317146323146347146359146369146381146383146389146407146417146423146437146449146477146513146519146521146527146539146543146563146581146603146609146617146639146647146669146677146681146683146701146719146743146749146767146777146801146807146819146833146837146843146849146857146891146893146917146921146933146941146953146977146983146987146989147011147029147031147047147073147083147089147097147107147137147139147151147163147179147197147209147211147221147227147229147253147263147283147289147293147299147311147319147331147341147347147353147377147391147397147401147409147419147449147451147457147481147487147503147517147541147547147551147557147571147583147607147613147617147629147647147661147671147673147689147703147709147727147739147743147761147769147773147779147787147793147799147811147827147853147859147863147881147919147937147949147977147997148013148021148061148063148073148079148091148123148139148147148151148153148157148171148193148199148201148207148229148243148249148279148301148303148331148339148361148367148381148387148399148403148411148429148439148457148469148471148483148501148513148517148531148537148549148573148579148609148627148633148639148663148667148669148691148693148711148721148723148727148747148763148781148783148793148817148829148853148859148861148867148873148891148913148921148927148931148933148949148957148961148991148997149011149021149027149033149053149057149059149069149077149087149099149101149111149113149119149143149153149159149161149173149183149197149213149239149249149251149257149269149287149297149309149323149333149341149351149371149377149381149393149399149411149417149419149423149441149459149489149491149497149503149519149521149531149533149543149551149561149563149579149603149623149627149629149689149711149713149717149729149731149749149759149767149771149791149803149827149837149839149861149867149873149893149899149909149911149921149939149953149969149971149993150001150011150041150053150061150067150077150083150089150091150097150107150131150151150169150193150197150203150209150211150217150221150223150239150247150287150299150301150323150329150343150373150377150379150383150401150407150413150427150431150439150473150497150503150517150523150533150551150559150571150583150587150589150607150611150617150649150659150697150707150721150743150767150769150779150791150797150827150833150847150869150881150883150889150893150901150907150919150929150959150961150967150979150989150991151007151009151013151027151049151051151057151091151121151141151153151157151163151169151171151189151201151213151237151241151243151247151253151273151279151289151303151337151339151343151357151379151381151391151397151423151429151433151451151471151477151483151499151507151517151523151531151537151549151553151561151573151579151597151603151607151609151631151637151643151651151667151673151681151687151693151703151717151729151733151769151771151783151787151799151813151817151841151847151849151871151883151897151901151903151909151937151939151967151969152003152017152027152029152039152041152063152077152081152083152093152111152123152147152183152189152197152203152213152219152231152239152249152267152287152293152297152311152363152377152381152389152393152407152417152419152423152429152441152443152459152461152501152519152531152533152539152563152567152597152599152617152623152629152639152641152657152671152681152717152723152729152753152767152777152783152791152809152819152821152833152837152839152843152851152857152879152897152899152909152939152941152947152953152959152981152989152993153001153059153067153071153073153077153089153107153113153133153137153151153191153247153259153269153271153277153281153287153313153319153337153343153353153359153371153379153407153409153421153427153437153443153449153457153469153487153499153509153511153521153523153529153533153557153563153589153607153611153623153641153649153689153701153719153733153739153743153749153757153763153817153841153871153877153887153889153911153913153929153941153947153949153953153991153997154001154027154043154057154061154067154073154079154081154087154097154111154127154153154157154159154181154183154211154213154229154243154247154267154277154279154291154303154313154321154333154339154351154369154373154387154409154417154423154439154459154487154493154501154523154543154571154573154579154589154591154613154619154621154643154667154669154681154691154699154723154727154733154747154753154769154787154789154799154807154823154841154849154871154873154877154883154897154927154933154937154943154981154991155003155009155017155027155047155069155081155083155087155119155137155153155161155167155171155191155201155203155209155219155231155251155269155291155299155303155317155327155333155371155377155381155383155387155399155413155423155443155453155461155473155501155509155521155537155539155557155569155579155581155593155599155609155621155627155653155657155663155671155689155693155699155707155717155719155723155731155741155747155773155777155783155797155801155809155821155833155849155851155861155863155887155891155893155921156007156011156019156041156059156061156071156089156109156119156127156131156139156151156157156217156227156229156241156253156257156259156269156307156319156329156347156353156361156371156419156421156437156467156487156491156493156511156521156539156577156589156593156601156619156623156631156641156659156671156677156679156683156691156703156707156719156727156733156749156781156797156799156817156823156833156841156887156899156901156913156941156943156967156971156979157007157013157019157037157049157051157057157061157081157103157109157127157133157141157163157177157181157189157207157211157217157219157229157231157243157247157253157259157271157273157277157279157291157303157307157321157327157349157351157363157393157411157427157429157433157457157477157483157489157513157519157523157543157559157561157571157579157627157637157639157649157667157669157679157721157733157739157747157769157771157793157799157813157823157831157837157841157867157877157889157897157901157907157931157933157951157991157999158003158009158017158029158047158071158077158113158129158141158143158161158189158201158209158227158231158233158243158261158269158293158303158329158341158351158357158359158363158371158393158407158419158429158443158449158489158507158519158527158537158551158563158567158573158581158591158597158611158617158621158633158647158657158663158699158731158747158749158759158761158771158777158791158803158843158849158863158867158881158909158923158927158941158959158981158993159013159017159023159059159073159079159097159113159119159157159161159167159169159179159191159193159199159209159223159227159233159287159293159311159319159337159347159349159361159389159403159407159421159431159437159457159463159469159473159491159499159503159521159539159541159553159563159569159571159589159617159623159629159631159667159671159673159683159697159701159707159721159737159739159763159769159773159779159787159791159793159799159811159833159839159853159857159869159871159899159911159931159937159977159979160001160009160019160031160033160049160073160079160081160087160091160093160117160141160159160163160169160183160201160207160217160231160243160253160309160313160319160343160357160367160373160387160397160403160409160423160441160453160481160483160499160507160541160553160579160583160591160603160619160621160627160637160639160649160651160663160669160681160687160697160709160711160723160739160751160753160757160781160789160807160813160817160829160841160861160877160879160883160903160907160933160967160969160981160997161009161017161033161039161047161053161059161071161087161093161123161137161141161149161159161167161201161221161233161237161263161267161281161303161309161323161333161339161341161363161377161387161407161411161453161459161461161471161503161507161521161527161531161543161561161563161569161573161591161599161611161627161639161641161659161683161717161729161731161741161743161753161761161771161773161779161783161807161831161839161869161873161879161881161911161921161923161947161957161969161971161977161983161999162007162011162017162053162059162079162091162109162119162143162209162221162229162251162257162263162269162277162287162289162293162343162359162389162391162413162419162439162451162457162473162493162499162517162523162527162529162553162557162563162577162593162601162611162623162629162641162649162671162677162683162691162703162709162713162727162731162739162749162751162779162787162791162821162823162829162839162847162853162859162881162889162901162907162917162937162947162971162973162989162997163003163019163021163027163061163063163109163117163127163129163147163151163169163171163181163193163199163211163223163243163249163259163307163309163321163327163337163351163363163367163393163403163409163411163417163433163469163477163481163483163487163517163543163561163567163573163601163613163621163627163633163637163643163661163673163679163697163729163733163741163753163771163781163789163811163819163841163847163853163859163861163871163883163901163909163927163973163979163981163987163991163993163997164011164023164039164051164057164071164089164093164113164117164147164149164173164183164191164201164209164231164233164239164249164251164267164279164291164299164309164321164341164357164363164371164377164387164413164419164429164431164443164447164449164471164477164503164513164531164569164581164587164599164617164621164623164627164653164663164677164683164701164707164729164743164767164771164789164809164821164831164837164839164881164893164911164953164963164987164999165001165037165041165047165049165059165079165083165089165103165133165161165173165181165203165211165229165233165247165287165293165311165313165317165331165343165349165367165379165383165391165397165437165443165449165457165463165469165479165511165523165527165533165541165551165553165559165569165587165589165601165611165617165653165667165673165701165703165707165709165713165719165721165749165779165799165811165817165829165833165857165877165883165887165901165931165941165947165961165983166013166021166027166031166043166063166081166099166147166151166157166169166183166189166207166219166237166247166259166273166289166297166301166303166319166349166351166357166363166393166399166403166409166417166429166457166471166487166541166561166567166571166597166601166603166609166613166619166627166631166643166657166667166669166679166693166703166723166739166741166781166783166799166807166823166841166843166847166849166853166861166867166871166909166919166931166949166967166973166979166987167009167017167021167023167033167039167047167051167071167077167081167087167099167107167113167117167119167149167159167173167177167191167197167213167221167249167261167267167269167309167311167317167329167339167341167381167393167407167413167423167429167437167441167443167449167471167483167491167521167537167543167593167597167611167621167623167627167633167641167663167677167683167711167729167747167759167771167777167779167801167809167861167863167873167879167887167891167899167911167917167953167971167987168013168023168029168037168043168067168071168083168089168109168127168143168151168193168197168211168227168247168253168263168269168277168281168293168323168331168347168353168391168409168433168449168451168457168463168481168491168499168523168527168533168541168559168599168601168617168629168631168643168673168677168697168713168719168731168737168743168761168769168781168803168851168863168869168887168893168899168901168913168937168943168977168991169003169007169009169019169049169063169067169069169079169093169097169111169129169151169159169177169181169199169217169219169241169243169249169259169283169307169313169319169321169327169339169343169361169369169373169399169409169427169457169471169483169489169493169501169523169531169553169567169583169591169607169627169633169639169649169657169661169667169681169691169693169709169733169751169753169769169777169783169789169817169823169831169837169843169859169889169891169909169913169919169933169937169943169951169957169987169991170003170021170029170047170057170063170081170099170101170111170123170141170167170179170189170197170207170213170227170231170239170243170249170263170267170279170293170299170327170341170347170351170353170363170369170371170383170389170393170413170441170447170473170483170497170503170509170537170539170551170557170579170603170609170627170633170641170647170669170689170701170707170711170741170749170759170761170767170773170777170801170809170813170827170837170843170851170857170873170881170887170899170921170927170953170957170971171007171023171029171043171047171049171053171077171079171091171103171131171161171163171167171169171179171203171233171251171253171263171271171293171299171317171329171341171383171401171403171427171439171449171467171469171473171481171491171517171529171539171541171553171559171571171583171617171629171637171641171653171659171671171673171679171697171707171713171719171733171757171761171763171793171799171803171811171823171827171851171863171869171877171881171889171917171923171929171937171947172001172009172021172027172031172049172069172079172093172097172127172147172153172157172169172171172181172199172213172217172219172223172243172259172279172283172297172307172313172321172331172343172351172357172373172399172411172421172423172427172433172439172441172489172507172517172519172541172553172561172573172583172589172597172603172607172619172633172643172649172657172663172673172681172687172709172717172721172741172751172759172787172801172807172829172849172853172859172867172871172877172883172933172969172973172981172987172993172999173021173023173039173053173059173081173087173099173137173141173149173177173183173189173191173207173209173219173249173263173267173273173291173293173297173309173347173357173359173429173431173473173483173491173497173501173531173539173543173549173561173573173599173617173629173647173651173659173669173671173683173687173699173707173713173729173741173743173773173777173779173783173807173819173827173839173851173861173867173891173897173909173917173923173933173969173977173981173993174007174017174019174047174049174061174067174071174077174079174091174101174121174137174143174149174157174169174197174221174241174257174259174263174281174289174299174311174329174331174337174347174367174389174407174413174431174443174457174467174469174481174487174491174527174533174569174571174583174599174613174617174631174637174649174653174659174673174679174703174721174737174749174761174763174767174773174799174821174829174851174859174877174893174901174907174917174929174931174943174959174989174991175003175013175039175061175067175069175079175081175103175129175141175211175229175261175267175277175291175303175309175327175333175349175361175391175393175403175411175433175447175453175463175481175493175499175519175523175543175573175601175621175631175633175649175663175673175687175691175699175709175723175727175753175757175759175781175783175811175829175837175843175853175859175873175891175897175909175919175937175939175949175961175963175979175991175993176017176021176023176041176047176051176053176063176081176087176089176123176129176153176159176161176179176191176201176207176213176221176227176237176243176261176299176303176317176321176327176329176333176347176353176357176369176383176389176401176413176417176419176431176459176461176467176489176497176503176507176509176521176531176537176549176551176557176573176591176597176599176609176611176629176641176651176677176699176711176713176741176747176753176777176779176789176791176797176807176809176819176849176857176887176899176903176921176923176927176933176951176977176983176989177007177011177013177019177043177091177101177109177113177127177131177167177173177209177211177217177223177239177257177269177283177301177319177323177337177347177379177383177409177421177427177431177433177467177473177481177487177493177511177533177539177553177589177601177623177647177677177679177691177739177743177761177763177787177791177797177811177823177839177841177883177887177889177893177907177913177917177929177943177949177953177967177979178001178021178037178039178067178069178091178093178103178117178127178141178151178169178183178187178207178223178231178247178249178259178261178289178301178307178327178333178349178351178361178393178397178403178417178439178441178447178469178481178487178489178501178513178531178537178559178561178567178571178597178601178603178609178613178621178627178639178643178681178691178693178697178753178757178781178793178799178807178813178817178819178831178853178859178873178877178889178897178903178907178909178921178931178933178939178951178973178987179021179029179033179041179051179057179083179089179099179107179111179119179143179161179167179173179203179209179213179233179243179261179269179281179287179317179321179327179351179357179369179381179383179393179407179411179429179437179441179453179461179471179479179483179497179519179527179533179549179563179573179579179581179591179593179603179623179633179651179657179659179671179687179689179693179717179719179737179743179749179779179801179807179813179819179821179827179833179849179897179899179903179909179917179923179939179947179951179953179957179969179981179989179999180001180007180023180043180053180071180073180077180097180137180161180179180181180211180221180233180239180241180247180259180263180281180287180289180307180311180317180331180337180347180361180371180379180391180413180419180437180463180473180491180497180503180511180533180539180541180547180563180569180617180623180629180647180667180679180701180731180749180751180773180779180793180797180799180811180847180871180883180907180949180959181001181003181019181031181039181061181063181081181087181123181141181157181183181193181199181201181211181213181219181243181253181273181277181283181297181301181303181361181387181397181399181409181421181439181457181459181499181501181513181523181537181549181553181603181607181609181619181639181667181669181693181711181717181721181729181739181751181757181759181763181777181787181789181813181837181871181873181889181891181903181913181919181927181931181943181957181967181981181997182009182011182027182029182041182047182057182059182089182099182101182107182111182123182129182131182141182159182167182177182179182201182209182233182239182243182261182279182297182309182333182339182341182353182387182389182417182423182431182443182453182467182471182473182489182503182509182519182537182549182561182579182587182593182599182603182617182627182639182641182653182657182659182681182687182701182711182713182747182773182779182789182803182813182821182839182851182857182867182887182893182899182921182927182929182933182953182957182969182981182999183023183037183041183047183059183067183089183091183119183151183167183191183203183247183259183263183283183289183299183301183307183317183319183329183343183349183361183373183377183383183389183397183437183439183451183461183473183479183487183497183499183503183509183511183523183527183569183571183577183581183587183593183611183637183661183683183691183697183707183709183713183761183763183797183809183823183829183871183877183881183907183917183919183943183949183959183971183973183979184003184007184013184031184039184043184057184073184081184087184111184117184133184153184157184181184187184189184199184211184231184241184259184271184273184279184291184309184321184333184337184351184369184409184417184441184447184463184477184487184489184511184517184523184553184559184567184571184577184607184609184627184631184633184649184651184669184687184693184703184711184721184727184733184753184777184823184829184831184837184843184859184879184901184903184913184949184957184967184969184993184997184999185021185027185051185057185063185069185071185077185089185099185123185131185137185149185153185161185167185177185183185189185221185233185243185267185291185299185303185309185323185327185359185363185369185371185401185429185441185467185477185483185491185519185527185531185533185539185543185551185557185567185569185593185599185621185641185651185677185681185683185693185699185707185711185723185737185747185749185753185767185789185797185813185819185821185831185833185849185869185873185893185897185903185917185923185947185951185957185959185971185987185993186007186013186019186023186037186041186049186071186097186103186107186113186119186149186157186161186163186187186191186211186227186229186239186247186253186259186271186283186299186301186311186317186343186377186379186391186397186419186437186451186469186479186481186551186569186581186583186587186601186619186629186647186649186653186671186679186689186701186707186709186727186733186743186757186761186763186773186793186799186841186859186869186871186877186883186889186917186947186959187003187009187027187043187049187067187069187073187081187091187111187123187127187129187133187139187141187163187171187177187181187189187193187211187217187219187223187237187273187277187303187337187339187349187361187367187373187379187387187393187409187417187423187433187441187463187469187471187477187507187513187531187547187559187573187597187631187633187637187639187651187661187669187687187699187711187721187751187763187787187793187823187843187861187871187877187883187897187907187909187921187927187931187951187963187973187987188011188017188021188029188107188137188143188147188159188171188179188189188197188249188261188273188281188291188299188303188311188317188323188333188351188359188369188389188401188407188417188431188437188443188459188473188483188491188519188527188533188563188579188603188609188621188633188653188677188681188687188693188701188707188711188719188729188753188767188779188791188801188827188831188833188843188857188861188863188869188891188911188927188933188939188941188953188957188983188999189011189017189019189041189043189061189067189127189139189149189151189169189187189199189223189229189239189251189253189257189271189307189311189337189347189349189353189361189377189389189391189401189407189421189433189437189439189463189467189473189479189491189493189509189517189523189529189547189559189583189593189599189613189617189619189643189653189661189671189691189697189701189713189733189743189757189767189797189799189817189823189851189853189859189877189881189887189901189913189929189947189949189961189967189977189983189989189997190027190031190051190063190093190097190121190129190147190159190181190207190243190249190261190271190283190297190301190313190321190331190339190357190367190369190387190391190403190409190471190507190523190529190537190543190573190577190579190583190591190607190613190633190639190649190657190667190669190699190709190711190717190753190759190763190769190783190787190793190807190811190823190829190837190843190871190889190891190901190909190913190921190979190997191021191027191033191039191047191057191071191089191099191119191123191137191141191143191161191173191189191227191231191237191249191251191281191297191299191339191341191353191413191441191447191449191453191459191461191467191473191491191497191507191509191519191531191533191537191551191561191563191579191599191621191627191657191669191671191677191689191693191699191707191717191747191749191773191783191791191801191803191827191831191833191837191861191899191903191911191929191953191969191977191999192007192013192029192037192043192047192053192091192097192103192113192121192133192149192161192173192187192191192193192229192233192239192251192259192263192271192307192317192319192323192341192343192347192373192377192383192391192407192431192461192463192497192499192529192539192547192553192557192571192581192583192587192601192611192613192617192629192631192637192667192677192697192737192743192749192757192767192781192791192799192811192817192833192847192853192859192877192883192887192889192917192923192931192949192961192971192977192979192991193003193009193013193031193043193051193057193073193093193133193139193147193153193163193181193183193189193201193243193247193261193283193301193327193337193357193367193373193379193381193387193393193423193433193441193447193451193463193469193493193507193513193541193549193559193573193577193597193601193603193607193619193649193663193679193703193723193727193741193751193757193763193771193789193793193799193811193813193841193847193859193861193871193873193877193883193891193937193939193943193951193957193979193993194003194017194027194057194069194071194083194087194093194101194113194119194141194149194167194179194197194203194239194263194267194269194309194323194353194371194377194413194431194443194471194479194483194507194521194527194543194569194581194591194609194647194653194659194671194681194683194687194707194713194717194723194729194749194767194771194809194813194819194827194839194861194863194867194869194891194899194911194917194933194963194977194981194989195023195029195043195047195049195053195071195077195089195103195121195127195131195137195157195161195163195193195197195203195229195241195253195259195271195277195281195311195319195329195341195343195353195359195389195401195407195413195427195443195457195469195479195493195497195511195527195539195541195581195593195599195659195677195691195697195709195731195733195737195739195743195751195761195781195787195791195809195817195863195869195883195887195893195907195913195919195929195931195967195971195973195977195991195997196003196033196039196043196051196073196081196087196111196117196139196159196169196171196177196181196187196193196201196247196271196277196279196291196303196307196331196337196379196387196429196439196453196459196477196499196501196519196523196541196543196549196561196579196583196597196613196643196657196661196663196681196687196699196709196717196727196739196751196769196771196799196817196831196837196853196871196873196879196901196907196919196927196961196991196993197003197009197023197033197059197063197077197083197089197101197117197123197137197147197159197161197203197207197221197233197243197257197261197269197273197279197293197297197299197311197339197341197347197359197369197371197381197383197389197419197423197441197453197479197507197521197539197551197567197569197573197597197599197609197621197641197647197651197677197683197689197699197711197713197741197753197759197767197773197779197803197807197831197837197887197891197893197909197921197927197933197947197957197959197963197969197971198013198017198031198043198047198073198083198091198097198109198127198139198173198179198193198197198221198223198241198251198257198259198277198281198301198313198323198337198347198349198377198391198397198409198413198427198437198439198461198463198469198479198491198503198529198533198553198571198589198593198599198613198623198637198641198647198659198673198689198701198719198733198761198769198811198817198823198827198829198833198839198841198851198859198899198901198929198937198941198943198953198959198967198971198977198997199021199033199037199039199049199081199103199109199151199153199181199193199207199211199247199261199267199289199313199321199337199343199357199373199379199399199403199411199417199429199447199453199457199483199487199489199499199501199523199559199567199583199601199603199621199637199657199669199673199679199687199697199721199729199739199741199751199753199777199783199799199807199811199813199819199831199853199873199877199889199909199921199931199933199961199967199999200003200009200017200023200029200033200041200063200087200117200131200153200159200171200177200183200191200201200227200231200237200257200273200293200297200323200329200341200351200357200363200371200381200383200401200407200437200443200461200467200483200513200569200573200579200587200591200597200609200639200657200671200689200699200713200723200731200771200779200789200797200807200843200861200867200869200881200891200899200903200909200927200929200971200983200987200989201007201011201031201037201049201073201101201107201119201121201139201151201163201167201193201203201209201211201233201247201251201281201287201307201329201337201359201389201401201403201413201437201449201451201473201491201493201497201499201511201517201547201557201577201581201589201599201611201623201629201653201661201667201673201683201701201709201731201743201757201767201769201781201787201791201797201809201821201823201827201829201833201847201881201889201893201907201911201919201923201937201947201953201961201973201979201997202001202021202031202049202061202063202067202087202099202109202121202127202129202183202187202201202219202231202243202277202289202291202309202327202339202343202357202361202381202387202393202403202409202441202471202481202493202519202529202549202567202577202591202613202621202627202637202639202661202667202679202693202717202729202733202747202751202753202757202777202799202817202823202841202859202877202879202889202907202921202931202933202949202967202973202981202987202999203011203017203023203039203051203057203117203141203173203183203207203209203213203221203227203233203249203279203293203309203311203317203321203323203339203341203351203353203363203381203383203387203393203417203419203429203431203449203459203461203531203549203563203569203579203591203617203627203641203653203657203659203663203669203713203761203767203771203773203789203807203809203821203843203857203869203873203897203909203911203921203947203953203969203971203977203989203999204007204013204019204023204047204059204067204101204107204133204137204143204151204161204163204173204233204251204299204301204311204319204329204331204353204359204361204367204371204377204397204427204431204437204439204443204461204481204487204509204511204517204521204557204563204583204587204599204601204613204623204641204667204679204707204719204733204749204751204781204791204793204797204803204821204857204859204871204887204913204917204923204931204947204973204979204983205019205031205033205043205063205069205081205097205103205111205129205133205141205151205157205171205187205201205211205213205223205237205253205267205297205307205319205327205339205357205391205397205399205417205421205423205427205433205441205453205463205477205483205487205493205507205519205529205537205549205553205559205589205603205607205619205627205633205651205657205661205663205703205721205759205763205783205817205823205837205847205879205883205913205937205949205951205957205963205967205981205991205993206009206021206027206033206039206047206051206069206077206081206083206123206153206177206179206183206191206197206203206209206221206233206237206249206251206263206273206279206281206291206299206303206341206347206351206369206383206399206407206411206413206419206447206461206467206477206483206489206501206519206527206543206551206593206597206603206623206627206639206641206651206699206749206779206783206803206807206813206819206821206827206879206887206897206909206911206917206923206933206939206951206953206993207013207017207029207037207041207061207073207079207113207121207127207139207169207187207191207197207199207227207239207241207257207269207287207293207301207307207329207331207341207343207367207371207377207401207409207433207443207457207463207469207479207481207491207497207509207511207517207521207523207541207547207551207563207569207589207593207619207629207643207653207661207671207673207679207709207719207721207743207763207769207797207799207811207821207833207847207869207877207923207931207941207947207953207967207971207973207997208001208003208009208037208049208057208067208073208099208111208121208129208139208141208147208189208207208213208217208223208231208253208261208277208279208283208291208309208319208333208337208367208379208387208391208393208409208433208441208457208459208463208469208489208493208499208501208511208513208519208529208553208577208589208591208609208627208631208657208667208673208687208697208699208721208729208739208759208787208799208807208837208843208877208889208891208907208927208931208933208961208963208991208993208997209021209029209039209063209071209089209123209147209159209173209179209189209201209203209213209221209227209233209249209257209263209267209269209299209311209317209327209333209347209353209357209359209371209381209393209401209431209441209449209459209471209477209497209519209533209543209549209563209567209569209579209581209597209621209623209639209647209659209669209687209701209707209717209719209743209767209771209789209801209809209813209819209821209837209851209857209861209887209917209927209929209939209953209959209971209977209983209987210011210019210031210037210053210071210097210101210109210113210127210131210139210143210157210169210173210187210191210193210209210229210233210241210247210257210263210277210283210299210317210319210323210347210359210361210391210401210403210407210421210437210461210467210481210487210491210499210523210527210533210557210599210601210619210631210643210659210671210709210713210719210731210739210761210773210803210809210811210823210827210839210853210857210869210901210907210911210913210923210929210943210961210967211007211039211049211051211061211063211067211073211093211097211129211151211153211177211187211193211199211213211217211219211229211231211241211247211271211283211291211297211313211319211333211339211349211369211373211403211427211433211441211457211469211493211499211501211507211543211559211571211573211583211597211619211639211643211657211661211663211681211691211693211711211723211727211741211747211777211781211789211801211811211817211859211867211873211877211879211889211891211927211931211933211943211949211969211979211997212029212039212057212081212099212117212123212131212141212161212167212183212203212207212209212227212239212243212281212293212297212353212369212383212411212419212423212437212447212453212461212467212479212501212507212557212561212573212579212587212593212627212633212651212669212671212677212683212701212777212791212801212827212837212843212851212867212869212873212881212897212903212909212917212923212969212981212987212999213019213023213029213043213067213079213091213097213119213131213133213139213149213173213181213193213203213209213217213223213229213247213253213263213281213287213289213307213319213329213337213349213359213361213383213391213397213407213449213461213467213481213491213523213533213539213553213557213589213599213611213613213623213637213641213649213659213713213721213727213737213751213791213799213821213827213833213847213859213881213887213901213919213929213943213947213949213953213973213977213989214003214007214009214021214031214033214043214051214063214069214087214091214129214133214141214147214163214177214189214211214213214219214237214243214259214283214297214309214351214363214373214381214391214399214433214439214451214457214463214469214481214483214499214507214517214519214531214541214559214561214589214603214607214631214639214651214657214663214667214673214691214723214729214733214741214759214763214771214783214787214789214807214811214817214831214849214853214867214883214891214913214939214943214967214987214993215051215063215077215087215123215141215143215153215161215179215183215191215197215239215249215261215273215279215297215309215317215329215351215353215359215381215389215393215399215417215443215447215459215461215471215483215497215503215507215521215531215563215573215587215617215653215659215681215687215689215693215723215737215753215767215771215797215801215827215833215843215851215857215863215893215899215909215921215927215939215953215959215981215983216023216037216061216071216091216103216107216113216119216127216133216149216157216173216179216211216217216233216259216263216289216317216319216329216347216371216373216379216397216401216421216431216451216481216493216509216523216551216553216569216571216577216607216617216641216647216649216653216661216679216703216719216731216743216751216757216761216779216781216787216791216803216829216841216851216859216877216899216901216911216917216919216947216967216973216991217001217003217027217033217057217069217081217111217117217121217157217163217169217199217201217207217219217223217229217241217253217271217307217309217313217319217333217337217339217351217361217363217367217369217387217397217409217411217421217429217439217457217463217489217499217517217519217559217561217573217577217579217619217643217661217667217681217687217691217697217717217727217733217739217747217771217781217793217823217829217849217859217901217907217909217933217937217969217979217981218003218021218047218069218077218081218083218087218107218111218117218131218137218143218149218171218191218213218227218233218249218279218287218357218363218371218381218389218401218417218419218423218437218447218453218459218461218479218509218513218521218527218531218549218551218579218591218599218611218623218627218629218641218651218657218677218681218711218717218719218723218737218749218761218783218797218809218819218833218839218843218849218857218873218887218923218941218947218963218969218971218987218989218993219001219017219019219031219041219053219059219071219083219091219097219103219119219133219143219169219187219217219223219251219277219281219293219301219311219313219353219361219371219377219389219407219409219433219437219451219463219467219491219503219517219523219529219533219547219577219587219599219607219613219619219629219647219649219677219679219683219689219707219721219727219731219749219757219761219763219767219787219797219799219809219823219829219839219847219851219871219881219889219911219917219931219937219941219943219953219959219971219977219979219983220009220013220019220021220057220063220123220141220147220151220163220169220177220189220217220243220279220291220301220307220327220333220351220357220361220369220373220391220399220403220411220421220447220469220471220511220513220529220537220543220553220559220573220579220589220613220663220667220673220681220687220699220709220721220747220757220771220783220789220793220807220811220841220859220861220873220877220879220889220897220901220903220907220919220931220933220939220973221021221047221059221069221071221077221083221087221093221101221159221171221173221197221201221203221209221219221227221233221239221251221261221281221303221311221317221327221393221399221401221411221413221447221453221461221471221477221489221497221509221537221539221549221567221581221587221603221621221623221653221657221659221671221677221707221713221717221719221723221729221737221747221773221797221807221813221827221831221849221873221891221909221941221951221953221957221987221989221999222007222011222023222029222041222043222059222067222073222107222109222113222127222137222149222151222161222163222193222197222199222247222269222289222293222311222317222323222329222337222347222349222361222367222379222389222403222419222437222461222493222499222511222527222533222553222557222587222601222613222619222643222647222659222679222707222713222731222773222779222787222791222793222799222823222839222841222857222863222877222883222913222919222931222941222947222953222967222977222979222991223007223009223019223037223049223051223061223063223087223099223103223129223133223151223207223211223217223219223229223241223243223247223253223259223273223277223283223291223303223313223319223331223337223339223361223367223381223403223423223429223439223441223463223469223481223493223507223529223543223547223549223577223589223621223633223637223667223679223681223697223711223747223753223757223759223781223823223829223831223837223841223843223849223903223919223921223939223963223969223999224011224027224033224041224047224057224069224071224101224113224129224131224149224153224171224177224197224201224209224221224233224239224251224261224267224291224299224303224309224317224327224351224359224363224401224423224429224443224449224461224467224473224491224501224513224527224563224569224579224591224603224611224617224629224633224669224677224683224699224711224717224729224737224743224759224771224797224813224831224863224869224881224891224897224909224911224921224929224947224951224969224977224993225023225037225061225067225077225079225089225109225119225133225143225149225157225161225163225167225217225221225223225227225241225257225263225287225289225299225307225341225343225347225349225353225371225373225383225427225431225457225461225479225493225499225503225509225523225527225529225569225581225583225601225611225613225619225629225637225671225683225689225697225721225733225749225751225767225769225779225781225809225821225829225839225859225871225889225919225931225941225943225949225961225977225983225989226001226007226013226027226063226087226099226103226123226129226133226141226169226183226189226199226201226217226231226241226267226283226307226313226337226357226367226379226381226397226409226427226433226451226453226463226483226487226511226531226547226549226553226571226601226609226621226631226637226643226649226657226663226669226691226697226741226753226769226777226783226789226799226813226817226819226823226843226871226901226903226907226913226937226943226991227011227027227053227081227089227093227111227113227131227147227153227159227167227177227189227191227207227219227231227233227251227257227267227281227299227303227363227371227377227387227393227399227407227419227431227453227459227467227471227473227489227497227501227519227531227533227537227561227567227569227581227593227597227603227609227611227627227629227651227653227663227671227693227699227707227719227729227743227789227797227827227849227869227873227893227947227951227977227989227993228013228023228049228061228077228097228103228113228127228131228139228181228197228199228203228211228223228233228251228257228281228299228301228307228311228331228337228341228353228359228383228409228419228421228427228443228451228457228461228469228479228509228511228517228521228523228539228559228577228581228587228593228601228611228617228619228637228647228677228707228713228731228733228737228751228757228773228793228797228799228829228841228847228853228859228869228881228883228887228901228911228913228923228929228953228959228961228983228989229003229027229037229081229093229123229127229133229139229153229157229171229181229189229199229213229217229223229237229247229249229253229261229267229283229309229321229343229351229373229393229399229403229409229423229433229459229469229487229499229507229519229529229547229549229553229561229583229589229591229601229613229627229631229637229639229681229693229699229703229711229717229727229739229751229753229759229763229769229771229777229781229799229813229819229837229841229847229849229897229903229937229939229949229961229963229979229981230003230017230047230059230063230077230081230089230101230107230117230123230137230143230149230189230203230213230221230227230233230239230257230273230281230291230303230309230311230327230339230341230353230357230369230383230387230389230393230431230449230453230467230471230479230501230507230539230551230561230563230567230597230611230647230653230663230683230693230719230729230743230761230767230771230773230779230807230819230827230833230849230861230863230873230891230929230933230939230941230959230969230977230999231001231017231019231031231041231053231067231079231107231109231131231169231197231223231241231269231271231277231289231293231299231317231323231331231347231349231359231367231379231409231419231431231433231443231461231463231479231481231493231503231529231533231547231551231559231563231571231589231599231607231611231613231631231643231661231677231701231709231719231779231799231809231821231823231827231839231841231859231871231877231893231901231919231923231943231947231961231967232003232007232013232049232051232073232079232081232091232103232109232117232129232153232171232187232189232207232217232259232303232307232333232357232363232367232381232391232409232411232417232433232439232451232457232459232487232499232513232523232549232567232571232591232597232607232621232633232643232663232669232681232699232709232711232741232751232753232777232801232811232819232823232847232853232861232871232877232891232901232907232919232937232961232963232987233021233069233071233083233113233117233141233143233159233161233173233183233201233221233231233239233251233267233279233293233297233323233327233329233341233347233353233357233371233407233417233419233423233437233477233489233509233549233551233557233591233599233609233617233621233641233663233669233683233687233689233693233713233743233747233759233777233837233851233861233879233881233911233917233921233923233939233941233969233983233993234007234029234043234067234083234089234103234121234131234139234149234161234167234181234187234191234193234197234203234211234217234239234259234271234281234287234293234317234319234323234331234341234343234361234383234431234457234461234463234467234473234499234511234527234529234539234541234547234571234587234589234599234613234629234653234659234673234683234713234721234727234733234743234749234769234781234791234799234803234809234811234833234847234851234863234869234893234907234917234931234947234959234961234967234977234979234989235003235007235009235013235043235051235057235069235091235099235111235117235159235171235177235181235199235211235231235241235243235273235289235307235309235337235349235369235397235439235441235447235483235489235493235513235519235523235537235541235553235559235577235591235601235607235621235661235663235673235679235699235723235747235751235783235787235789235793235811235813235849235871235877235889235891235901235919235927235951235967235979235997236017236021236053236063236069236077236087236107236111236129236143236153236167236207236209236219236231236261236287236293236297236323236329236333236339236377236381236387236399236407236429236449236461236471236477236479236503236507236519236527236549236563236573236609236627236641236653236659236681236699236701236707236713236723236729236737236749236771236773236779236783236807236813236867236869236879236881236891236893236897236909236917236947236981236983236993237011237019237043237053237067237071237073237089237091237137237143237151237157237161237163237173237179237203237217237233237257237271237277237283237287237301237313237319237331237343237361237373237379237401237409237467237487237509237547237563237571237581237607237619237631237673237683237689237691237701237707237733237737237749237763237767237781237791237821237851237857237859237877237883237901237911237929237959237967237971237973237977237997238001238009238019238031238037238039238079238081238093238099238103238109238141238151238157238159238163238171238181238201238207238213238223238229238237238247238261238267238291238307238313238321238331238339238361238363238369238373238397238417238423238439238451238463238471238477238481238499238519238529238531238547238573238591238627238639238649238657238673238681238691238703238709238723238727238729238747238759238781238789238801238829238837238841238853238859238877238879238883238897238919238921238939238943238949238967238991239017239023239027239053239069239081239087239119239137239147239167239171239179239201239231239233239237239243239251239263239273239287239297239329239333239347239357239383239387239389239417239423239429239431239441239461239489239509239521239527239531239539239543239557239567239579239587239597239611239623239633239641239671239689239699239711239713239731239737239753239779239783239803239807239831239843239849239851239857239873239879239893239929239933239947239957239963239977239999240007240011240017240041240043240047240049240059240073240089240101240109240113240131240139240151240169240173240197240203240209240257240259240263240271240283240287240319240341240347240349240353240371240379240421240433240437240473240479240491240503240509240517240551240571240587240589240599240607240623240631240641240659240677240701240707240719240727240733240739240743240763240769240797240811240829240841240853240859240869240881240883240893240899240913240943240953240959240967240997241013241027241037241049241051241061241067241069241079241093241117241127241141241169241177241183241207241229241249241253241259241261241271241291241303241313241321241327241333241337241343241361241363241391241393241421241429241441241453241463241469241489241511241513241517241537241543241559241561241567241589241597241601241603241639241643241651241663241667241679241687241691241711241727241739241771241781241783241793241807241811241817241823241847241861241867241873241877241883241903241907241919241921241931241939241951241963241973241979241981241993242009242057242059242069242083242093242101242119242129242147242161242171242173242197242201242227242243242257242261242273242279242309242329242357242371242377242393242399242413242419242441242447242449242453242467242479242483242491242509242519242521242533242551242591242603242617242621242629242633242639242647242659242677242681242689242713242729242731242747242773242779242789242797242807242813242819242863242867242873242887242911242923242927242971242989242999243011243031243073243077243091243101243109243119243121243137243149243157243161243167243197243203243209243227243233243239243259243263243301243311243343243367243391243401243403243421243431243433243437243461243469243473243479243487243517243521243527243533243539243553243577243583243587243589243613243623243631243643243647243671243673243701243703243707243709243769243781243787243799243809243829243839243851243857243863243871243889243911243917243931243953243973243989244003244009244021244033244043244087244091244109244121244129244141244147244157244159244177244199244217244219244243244247244253244261244291244297244301244303244313244333244339244351244357244367244379244381244393244399244403244411244423244429244451244457244463244471244481244493244507244529244547244553244561244567244583244589244597244603244619244633244637244639244667244669244687244691244703244711244721244733244747244753244759244781244787244813244837244841244843244859244861244873244877244889244897244901244939244943244957244997245023245029245033245039245071245083245087245107245129245131245149245171245173245177245183245209245251245257245261245269245279245291245299245317245321245339245383245389245407245411245417245419245437245471245473245477245501245513245519245521245527245533245561245563245587245591245593245621245627245629245639245653245671245681245683245711245719245723245741245747245753245759245771245783245789245821245849245851245863245881245897245899245909245911245941245963245977245981245983245989246011246017246049246073246097246119246121246131246133246151246167246173246187246193246203246209246217246223246241246247246251246271246277246289246317246319246329246343246349246361246371246391246403246439246469246473246497246509246511246523246527246539246557246569246577246599246607246611246613246637246641246643246661246683246689246707246709246713246731246739246769246773246781246787246793246803246809246811246817246833246839246889246899246907246913246919246923246929246931246937246941246947246971246979247001247007247031247067247069247073247087247099247141247183247193247201247223247229247241247249247259247279247301247309247337247339247343247363247369247381247391247393247409247421247433247439247451247463247501247519247529247531247547247553247579247591247601247603247607247609247613247633247649247651247691247693247697247711247717247729247739247759247769247771247781247799247811247813247829247847247853247873247879247889247901247913247939247943247957247991247993247997247999248021248033248041248051248057248063248071248077248089248099248117248119248137248141248161248167248177248179248189248201248203248231248243248257248267248291248293248299248309248317248323248351248357248371248389248401248407248431248441248447248461248473248477248483248509248533248537248543248569248579248587248593248597248609248621248627248639248641248657248683248701248707248719248723248737248749248753248779248783248789248797248813248821248827248839248851248861248867248869248879248887248891248893248903248909248971248981248987249017249037249059249079249089249097249103249107249127249131249133249143249181249187249199249211249217249229249233249253249257249287249311249317249329249341249367249377249383249397249419249421249427249433249437249439249449249463249497249499249503249517249521249533249539249541249563249583249589249593249607249647249659249671249677249703249721249727249737249749249763249779249797249811249827249833249853249857249859249863249871249881249911249923249943249947249967249971249973249989250007250013250027250031250037250043250049250051250057250073250091250109250123250147250153250169250199250253250259250267250279250301250307250343250361250403250409250423250433250441250451250489250499250501250543250583250619250643250673250681250687250693250703250709250721250727250739250741250751250753250777250787250793250799250807250813250829250837250841250853250867250871250889250919250949250951250963250967250969250979250993251003251033251051251057251059251063251071251081251087251099251117251143251149251159251171251177251179251191251197251201251203251219251221251231251233251257251261251263251287251291251297251323251347251353251359251387251393251417251429251431251437251443251467251473251477251483251491251501251513251519251527251533251539251543251561251567251609251611251621251623251639251653251663251677251701251707251737251761251789251791251809251831251833251843251857251861251879251887251893251897251903251917251939251941251947251969251971251983252001252013252017252029252037252079252101252139252143252151252157252163252169252173252181252193252209252223252233252253252277252283252289252293252313252319252323252341252359252383252391252401252409252419252431252443252449252457252463252481252509252533252541252559252583252589252607252611252617252641252667252691252709252713252727252731252737252761252767252779252817252823252827252829252869252877252881252887252893252899252911252913252919252937252949252971252979252983253003253013253049253063253081253103253109253133253153253157253159253229253243253247253273253307253321253343253349253361253367253369253381253387253417253423253427253433253439253447253469253481253493253501253507253531253537253543253553253567253573253601253607253609253613253633253637253639253651253661253679253681253703253717253733253741253751253763253769253777253787253789253801253811253819253823253853253867253871253879253901253907253909253919253937253949253951253969253987253993253999254003254021254027254039254041254047254053254071254083254119254141254147254161254179254197254207254209254213254249254257254279254281254291254299254329254369254377254383254389254407254413254437254447254461254489254491254519254537254557254593254623254627254647254659254663254699254713254729254731254741254747254753254773254777254783254791254803254827254831254833254857254869254873254879254887254899254911254927254929254941254959254963254971254977254987254993255007255019255023255043255049255053255071255077255083255097255107255121255127255133255137255149255173255179255181255191255193255197255209255217255239255247255251255253255259255313255329255349255361255371255383255413255419255443255457255467255469255473255487255499255503255511255517255523255551255571255587255589255613255617255637255641255649255653255659255667255679255709255713255733255743255757255763255767255803255839255841255847255851255859255869255877255887255907255917255919255923255947255961255971255973255977255989256019256021256031256033256049256057256079256093256117256121256129256133256147256163256169256181256187256189256199256211256219256279256301256307256313256337256349256363256369256391256393256423256441256469256471256483256489256493256499256517256541256561256567256577256579256589256603256609256639256643256651256661256687256699256721256723256757256771256799256801256813256831256873256877256889256901256903256931256939256957256967256981257003257017257053257069257077257093257099257107257123257141257161257171257177257189257219257221257239257249257263257273257281257287257293257297257311257321257339257351257353257371257381257399257401257407257437257443257447257459257473257489257497257501257503257519257539257561257591257611257627257639257657257671257687257689257707257711257713257717257731257783257791257797257837257857257861257863257867257869257879257893257903257921257947257953257981257987257989257993258019258023258031258061258067258101258107258109258113258119258127258131258143258157258161258173258197258211258233258241258253258277258283258299258317258319258329258331258337258353258373258389258403258407258413258421258437258443258449258469258487258491258499258521258527258539258551258563258569258581258607258611258613258617258623258631258637258659258673258677258691258697258703258707258721258733258737258743258763258779258787258803258809258827258847258871258887258917258919258949258959258967258971258977258983258991259001259009259019259033259099259121259123259151259157259159259163259169259177259183259201259211259213259219259229259271259277259309259321259339259379259381259387259397259411259421259429259451259453259459259499259507259517259531259537259547259577259583259603259619259621259627259631259639259643259657259667259681259691259697259717259723259733259751259771259781259783259801259813259823259829259837259841259867259907259933259937259943259949259967259991259993260003260009260011260017260023260047260081260089260111260137260171260179260189260191260201260207260209260213260231260263260269260317260329260339260363260387260399260411260413260417260419260441260453260461260467260483260489260527260539260543260549260551260569260573260581260587260609260629260647260651260671260677260713260717260723260747260753260761260773260791260807260809260849260857260861260863260873260879260893260921260941260951260959260969260983260987260999261011261013261017261031261043261059261061261071261077261089261101261127261167261169261223261229261241261251261271261281261301261323261329261337261347261353261379261389261407261427261431261433261439261451261463261467261509261523261529261557261563261577261581261587261593261601261619261631261637261641261643261673261697261707261713261721261739261757261761261773261787261791261799261823261847261881261887261917261959261971261973261977261983262007262027262049262051262069262079262103262109262111262121262127262133262139262147262151262153262187262193262217262231262237262253262261262271262303262313262321262331262337262349262351262369262387262391262399262411262433262459262469262489262501262511262513262519262541262543262553262567262583262597262621262627262643262649262651262657262681262693262697262709262723262733262739262741262747262781262783262807262819262853262877262883262897262901262909262937262949262957262981263009263023263047263063263071263077263083263089263101263111263119263129263167263171263183263191263201263209263213263227263239263257263267263269263273263287263293263303263323263369263383263387263399263401263411263423263429263437263443263489263491263503263513263519263521263533263537263561263567263573263591263597263609263611263621263647263651263657263677263723263729263737263759263761263803263819263821263827263843263849263863263867263869263881263899263909263911263927263933263941263951263953263957263983264007264013264029264031264053264059264071264083264091264101264113264127264133264137264139264167264169264179264211264221264263264269264283264289264301264323264331264343264349264353264359264371264391264403264437264443264463264487264527264529264553264559264577264581264599264601264619264631264637264643264659264697264731264739264743264749264757264763264769264779264787264791264793264811264827264829264839264871264881264889264893264899264919264931264949264959264961264977264991264997265003265007265021265037265079265091265093265117265123265129265141265151265157265163265169265193265207265231265241265247265249265261265271265273265277265313265333265337265339265381265399265403265417265423265427265451265459265471265483265493265511265513265541265543265547265561265567265571265579265607265613265619265621265703265709265711265717265729265739265747265757265781265787265807265813265819265831265841265847265861265871265873265883265891265921265957265961265987266003266009266023266027266029266047266051266053266059266081266083266089266093266099266111266117266129266137266153266159266177266183266221266239266261266269266281266291266293266297266333266351266353266359266369266381266401266411266417266447266449266477266479266489266491266521266549266587266599266603266633266641266647266663266671266677266681266683266687266689266701266711266719266759266767266797266801266821266837266839266863266867266891266897266899266909266921266927266933266947266953266957266971266977266983266993266999267017267037267049267097267131267133267139267143267167267187267193267199267203267217267227267229267233267259267271267277267299267301267307267317267341267353267373267389267391267401267403267413267419267431267433267439267451267469267479267481267493267497267511267517267521267523267541267551267557267569267581267587267593267601267611267613267629267637267643267647267649267661267667267671267677267679267713267719267721267727267737267739267749267763267781267791267797267803267811267829267833267857267863267877267887267893267899267901267907267913267929267941267959267961268003268013268043268049268063268069268091268123268133268153268171268189268199268207268211268237268253268267268271268283268291268297268343268403268439268459268487268493268501268507268517268519268529268531268537268547268573268607268613268637268643268661268693268721268729268733268747268757268759268771268777268781268783268789268811268813268817268819268823268841268843268861268883268897268909268913268921268927268937268969268973268979268993268997268999269023269029269039269041269057269063269069269089269117269131269141269167269177269179269183269189269201269209269219269221269231269237269251269257269281269317269327269333269341269351269377269383269387269389269393269413269419269429269431269441269461269473269513269519269527269539269543269561269573269579269597269617269623269641269651269663269683269701269713269719269723269741269749269761269779269783269791269851269879269887269891269897269923269939269947269953269981269987270001270029270031270037270059270071270073270097270121270131270133270143270157270163270167270191270209270217270223270229270239270241270269270271270287270299270307270311270323270329270337270343270371270379270407270421270437270443270451270461270463270493270509270527270539270547270551270553270563270577270583270587270593270601270619270631270653270659270667270679270689270701270709270719270737270749270761270763270791270797270799270821270833270841270859270899270913270923270931270937270953270961270967270973271003271013271021271027271043271057271067271079271097271109271127271129271163271169271177271181271211271217271231271241271253271261271273271277271279271289271333271351271357271363271367271393271409271429271451271463271471271483271489271499271501271517271549271553271571271573271597271603271619271637271639271651271657271693271703271723271729271753271769271771271787271807271811271829271841271849271853271861271867271879271897271903271919271927271939271967271969271981272003272009272011272029272039272053272059272093272131272141272171272179272183272189272191272201272203272227272231272249272257272263272267272269272287272299272317272329272333272341272347272351272353272359272369272381272383272399272407272411272417272423272449272453272477272507272533272537272539272549272563272567272581272603272621272651272659272683272693272717272719272737272759272761272771272777272807272809272813272863272879272887272903272911272917272927272933272959272971272981272983272989272999273001273029273043273047273059273061273067273073273083273107273113273127273131273149273157273181273187273193273233273253273269273271273281273283273289273311273313273323273349273359273367273433273457273473273503273517273521273527273551273569273601273613273617273629273641273643273653273697273709273719273727273739273773273787273797273803273821273827273857273881273899273901273913273919273929273941273943273967273971273979273997274007274019274033274061274069274081274093274103274117274121274123274139274147274163274171274177274187274199274201274213274223274237274243274259274271274277274283274301274333274349274357274361274403274423274441274451274453274457274471274489274517274529274579274583274591274609274627274661274667274679274693274697274709274711274723274739274751274777274783274787274811274817274829274831274837274843274847274853274861274867274871274889274909274931274943274951274957274961274973274993275003275027275039275047275053275059275083275087275129275131275147275153275159275161275167275183275201275207275227275251275263275269275299275309275321275323275339275357275371275389275393275399275419275423275447275449275453275459275461275489275491275503275521275531275543275549275573275579275581275591275593275599275623275641275651275657275669275677275699275711275719275729275741275767275773275783275813275827275837275881275897275911275917275921275923275929275939275941275963275969275981275987275999276007276011276019276037276041276043276047276049276079276083276091276113276137276151276173276181276187276191276209276229276239276247276251276257276277276293276319276323276337276343276347276359276371276373276389276401276439276443276449276461276467276487276499276503276517276527276553276557276581276587276589276593276599276623276629276637276671276673276707276721276739276763276767276779276781276817276821276823276827276833276839276847276869276883276901276907276917276919276929276949276953276961276977277003277007277021277051277063277073277087277097277099277157277163277169277177277183277213277217277223277231277247277259277261277273277279277297277301277309277331277363277373277411277421277427277429277483277493277499277513277531277547277549277567277577277579277597277601277603277637277639277643277657277663277687277691277703277741277747277751277757277787277789277793277813277829277847277859277883277889277891277897277903277919277961277993277999278017278029278041278051278063278071278087278111278119278123278143278147278149278177278191278207278209278219278227278233278237278261278269278279278321278329278347278353278363278387278393278413278437278459278479278489278491278497278501278503278543278549278557278561278563278581278591278609278611278617278623278627278639278651278671278687278689278701278717278741278743278753278767278801278807278809278813278819278827278843278849278867278879278881278891278903278909278911278917278947278981279001279007279023279029279047279073279109279119279121279127279131279137279143279173279179279187279203279211279221279269279311279317279329279337279353279397279407279413279421279431279443279451279479279481279511279523279541279551279553279557279571279577279583279593279607279613279619279637279641279649279659279679279689279707279709279731279751279761279767279779279817279823279847279857279863279883279913279919279941279949279967279977279991280001280009280013280031280037280061280069280097280099280103280121280129280139280183280187280199280207280219280223280229280243280249280253280277280297280303280321280327280337280339280351280373280409280411280451280463280487280499280507280513280537280541280547280549280561280583280589280591280597280603280607280613280627280639280673280681280697280699280703280711280717280729280751280759280769280771280811280817280837280843280859280871280879280883280897280909280913280921280927280933280939280949280957280963280967280979280997281023281033281053281063281069281081281117281131281153281159281167281189281191281207281227281233281243281249281251281273281279281291281297281317281321281327281339281353281357281363281381281419281423281429281431281509281527281531281539281549281551281557281563281579281581281609281621281623281627281641281647281651281653281663281669281683281717281719281737281747281761281767281777281783281791281797281803281807281833281837281839281849281857281867281887281893281921281923281927281933281947281959281971281989281993282001282011282019282053282059282071282089282091282097282101282103282127282143282157282167282221282229282239282241282253282281282287282299282307282311282313282349282377282383282389282391282407282409282413282427282439282461282481282487282493282559282563282571282577282589282599282617282661282671282677282679282683282691282697282703282707282713282767282769282773282797282809282827282833282847282851282869282881282889282907282911282913282917282959282973282977282991283001283007283009283027283051283079283093283097283099283111283117283121283133283139283159283163283181283183283193283207283211283267283277283289283303283369283397283403283411283447283463283487283489283501283511283519283541283553283571283573283579283583283601283607283609283631283637283639283669283687283697283721283741283763283769283771283793283799283807283813283817283831283837283859283861283873283909283937283949283957283961283979284003284023284041284051284057284059284083284093284111284117284129284131284149284153284159284161284173284191284201284227284231284233284237284243284261284267284269284293284311284341284357284369284377284387284407284413284423284429284447284467284477284483284489284507284509284521284527284539284551284561284573284587284591284593284623284633284651284657284659284681284689284701284707284723284729284731284737284741284743284747284749284759284777284783284803284807284813284819284831284833284839284857284881284897284899284917284927284957284969284989285007285023285031285049285071285079285091285101285113285119285121285139285151285161285179285191285199285221285227285251285281285283285287285289285301285317285343285377285421285433285451285457285463285469285473285497285517285521285533285539285553285557285559285569285599285611285613285629285631285641285643285661285667285673285697285707285709285721285731285749285757285763285767285773285781285823285827285839285841285871285937285949285953285977285979285983285997286001286009286019286043286049286061286063286073286103286129286163286171286199286243286249286289286301286333286367286369286381286393286397286411286421286427286453286457286459286469286477286483286487286493286499286513286519286541286543286547286553286589286591286609286613286619286633286651286673286687286697286703286711286721286733286751286753286763286771286777286789286801286813286831286859286873286927286973286981286987286999287003287047287057287059287087287093287099287107287117287137287141287149287159287167287173287179287191287219287233287237287239287251287257287269287279287281287291287297287321287327287333287341287347287383287387287393287437287449287491287501287503287537287549287557287579287597287611287629287669287671287681287689287701287731287747287783287789287801287813287821287849287851287857287863287867287873287887287921287933287939287977288007288023288049288053288061288077288089288109288137288179288181288191288199288203288209288227288241288247288257288283288293288307288313288317288349288359288361288383288389288403288413288427288433288461288467288481288493288499288527288529288539288551288559288571288577288583288647288649288653288661288679288683288689288697288731288733288751288767288773288803288817288823288833288839288851288853288877288907288913288929288931288947288973288979288989288991288997289001289019289021289031289033289039289049289063289067289099289103289109289111289127289129289139289141289151289169289171289181289189289193289213289241289243289249289253289273289283289291289297289309289319289343289349289361289369289381289397289417289423289439289453289463289469289477289489289511289543289559289573289577289589289603289607289637289643289657289669289717289721289727289733289741289759289763289771289789289837289841289843289847289853289859289871289889289897289937289951289957289967289973289987289999290011290021290023290027290033290039290041290047290057290083290107290113290119290137290141290161290183290189290201290209290219290233290243290249290317290327290347290351290359290369290383290393290399290419290429290441290443290447290471290473290489290497290509290527290531290533290539290557290593290597290611290617290621290623290627290657290659290663290669290671290677290701290707290711290737290761290767290791290803290821290827290837290839290861290869290879290897290923290959290963290971290987290993290999291007291013291037291041291043291077291089291101291103291107291113291143291167291169291173291191291199291209291217291253291257291271291287291293291299291331291337291349291359291367291371291373291377291419291437291439291443291457291481291491291503291509291521291539291547291559291563291569291619291647291649291661291677291689291691291701291721291727291743291751291779291791291817291829291833291853291857291869291877291887291899291901291923291971291979291983291997292021292027292037292057292069292079292081292091292093292133292141292147292157292181292183292223292231292241292249292267292283292301292309292319292343292351292363292367292381292393292427292441292459292469292471292477292483292489292493292517292531292541292549292561292573292577292601292627292631292661292667292673292679292693292703292709292711292717292727292753292759292777292793292801292807292819292837292841292849292867292879292909292921292933292969292973292979292993293021293071293081293087293093293099293107293123293129293147293149293173293177293179293201293207293213293221293257293261293263293269293311293329293339293351293357293399293413293431293441293453293459293467293473293483293507293543293599293603293617293621293633293639293651293659293677293681293701293717293723293729293749293767293773293791293803293827293831293861293863293893293899293941293957293983293989293999294001294013294023294029294043294053294059294067294103294127294131294149294157294167294169294179294181294199294211294223294227294241294247294251294269294277294289294293294311294313294317294319294337294341294347294353294383294391294397294403294431294439294461294467294479294499294509294523294529294551294563294629294641294647294649294659294673294703294731294751294757294761294773294781294787294793294799294803294809294821294829294859294869294887294893294911294919294923294947294949294953294979294989294991294997295007295033295037295039295049295073295079295081295111295123295129295153295187295199295201295219295237295247295259295271295277295283295291295313295319295333295357295363295387295411295417295429295433295439295441295459295513295517295541295553295567295571295591295601295663295693295699295703295727295751295759295769295777295787295819295831295837295843295847295853295861295871295873295877295879295901295903295909295937295943295949295951295961295973295993296011296017296027296041296047296071296083296099296117296129296137296159296183296201296213296221296237296243296249296251296269296273296279296287296299296347296353296363296369296377296437296441296473296477296479296489296503296507296509296519296551296557296561296563296579296581296587296591296627296651296663296669296683296687296693296713296719296729296731296741296749296753296767296771296773296797296801296819296827296831296833296843296909296911296921296929296941296969296971296981296983296987297019297023297049297061297067297079297083297097297113297133297151297161297169297191297233297247297251297257297263297289297317297359297371297377297391297397297403297421297439297457297467297469297481297487297503297509297523297533297581297589297601297607297613297617297623297629297641297659297683297691297707297719297727297757297779297793297797297809297811297833297841297853297881297889297893297907297911297931297953297967297971297989297991298013298021298031298043298049298063298087298093298099298153298157298159298169298171298187298201298211298213298223298237298247298261298283298303298307298327298339298343298349298369298373298399298409298411298427298451298477298483298513298559298579298583298589298601298607298621298631298651298667298679298681298687298691298693298709298723298733298757298759298777298799298801298817298819298841298847298853298861298897298937298943298993298999299011299017299027299029299053299059299063299087299099299107299113299137299147299171299179299191299197299213299239299261299281299287299311299317299329299333299357299359299363299371299389299393299401299417299419299447299471299473299477299479299501299513299521299527299539299567299569299603299617299623299653299671299681299683299699299701299711299723299731299743299749299771299777299807299843299857299861299881299891299903299909299933299941299951299969299977299983299993300007300017300023300043300073300089300109300119300137300149300151300163300187300191300193300221300229300233300239300247300277300299300301300317300319300323300331300343300347300367300397300413300427300431300439300463300481300491300493300497300499300511300557300569300581300583300589300593300623300631300647300649300661300667300673300683300691300719300721300733300739300743300749300757300761300779300787300799300809300821300823300851300857300869300877300889300893300929300931300953300961300967300973300977300997301013301027301039301051301057301073301079301123301127301141301153301159301177301181301183301211301219301237301241301243301247301267301303301319301331301333301349301361301363301381301403301409301423301429301447301459301463301471301487301489301493301501301531301577301579301583301591301601301619301627301643301649301657301669301673301681301703301711301747301751301753301759301789301793301813301831301841301843301867301877301897301901301907301913301927301933301943301949301979301991301993301997301999302009302053302111302123302143302167302171302173302189302191302213302221302227302261302273302279302287302297302299302317302329302399302411302417302429302443302459302483302507302513302551302563302567302573302579302581302587302593302597302609302629302647302663302681302711302723302747302759302767302779302791302801302831302833302837302843302851302857302873302891302903302909302921302927302941302959302969302971302977302983302989302999303007303011303013303019303029303049303053303073303089303091303097303119303139303143303151303157303187303217303257303271303283303287303293303299303307303313303323303337303341303361303367303371303377303379303389303409303421303431303463303469303473303491303493303497303529303539303547303551303553303571303581303587303593303613303617303619303643303647303649303679303683303689303691303703303713303727303731303749303767303781303803303817303827303839303859303871303889303907303917303931303937303959303983303997304009304013304021304033304039304049304063304067304069304081304091304099304127304151304153304163304169304193304211304217304223304253304259304279304301304303304331304349304357304363304373304391304393304411304417304429304433304439304457304459304477304481304489304501304511304517304523304537304541304553304559304561304597304609304631304643304651304663304687304709304723304729304739304751304757304763304771304781304789304807304813304831304847304849304867304879304883304897304901304903304907304933304937304943304949304961304979304981305017305021305023305029305033305047305069305093305101305111305113305119305131305143305147305209305219305231305237305243305267305281305297305329305339305351305353305363305369305377305401305407305411305413305419305423305441305449305471305477305479305483305489305497305521305533305551305563305581305593305597305603305611305621305633305639305663305717305719305741305743305749305759305761305771305783305803305821305839305849305857305861305867305873305917305927305933305947305971305999306011306023306029306041306049306083306091306121306133306139306149306157306167306169306191306193306209306239306247306253306259306263306301306329306331306347306349306359306367306377306389306407306419306421306431306437306457306463306473306479306491306503306511306517306529306533306541306563306577306587306589306643306653306661306689306701306703306707306727306739306749306763306781306809306821306827306829306847306853306857306871306877306883306893306899306913306919306941306947306949306953306991307009307019307031307033307067307079307091307093307103307121307129307147307163307169307171307187307189307201307243307253307259307261307267307273307277307283307289307301307337307339307361307367307381307397307399307409307423307451307471307481307511307523307529307537307543307577307583307589307609307627307631307633307639307651307669307687307691307693307711307733307759307817307823307831307843307859307871307873307891307903307919307939307969308003308017308027308041308051308081308093308101308107308117308129308137308141308149308153308213308219308249308263308291308293308303308309308311308317308323308327308333308359308383308411308423308437308447308467308489308491308501308507308509308519308521308527308537308551308569308573308587308597308621308639308641308663308681308701308713308723308761308773308801308809308813308827308849308851308857308887308899308923308927308929308933308939308951308989308999309007309011309013309019309031309037309059309079309083309091309107309109309121309131309137309157309167309173309193309223309241309251309259309269309271309277309289309293309311309313309317309359309367309371309391309403309433309437309457309461309469309479309481309493309503309521309523309539309541309559309571309577309583309599309623309629309637309667309671309677309707309713309731309737309769309779309781309797309811309823309851309853309857309877309899309929309931309937309977309989310019310021310027310043310049310081310087310091310111310117310127310129310169310181310187310223310229310231310237310243310273310283310291310313310333310357310361310363310379310397310423310433310439310447310459310463310481310489310501310507310511310547310553310559310567310571310577310591310627310643310663310693310697310711310721310727310729310733310741310747310771310781310789310801310819310823310829310831310861310867310883310889310901310927310931310949310969310987310997311009311021311027311033311041311099311111311123311137311153311173311177311183311189311197311203311237311279311291311293311299311303311323311329311341311347311359311371311393311407311419311447311453311473311533311537311539311551311557311561311567311569311603311609311653311659311677311681311683311687311711311713311737311743311747311749311791311803311807311821311827311867311869311881311897311951311957311963311981312007312023312029312031312043312047312071312073312083312089312101312107312121312161312197312199312203312209312211312217312229312233312241312251312253312269312281312283312289312311312313312331312343312349312353312371312383312397312401312407312413312427312451312469312509312517312527312551312553312563312581312583312589312601312617312619312623312643312673312677312679312701312703312709312727312737312743312757312773312779312799312839312841312857312863312887312899312929312931312937312941312943312967312971312979312989313003313009313031313037313081313087313109313127313129313133313147313151313153313163313207313211313219313241313249313267313273313289313297313301313307313321313331313333313343313351313373313381313387313399313409313471313477313507313517313543313549313553313561313567313571313583313589313597313603313613313619313637313639313661313669313679313699313711313717313721313727313739313741313763313777313783313829313849313853313879313883313889313897313909313921313931313933313949313961313969313979313981313987313991313993313997314003314021314059314063314077314107314113314117314129314137314159314161314173314189314213314219314227314233314239314243314257314261314263314267314299314329314339314351314357314359314399314401314407314423314441314453314467314491314497314513314527314543314549314569314581314591314597314599314603314623314627314641314651314693314707314711314719314723314747314761314771314777314779314807314813314827314851314879314903314917314927314933314953314957314983314989315011315013315037315047315059315067315083315097315103315109315127315179315181315193315199315223315247315251315257315269315281315313315349315361315373315377315389315407315409315421315437315449315451315461315467315481315493315517315521315527315529315547315551315559315569315589315593315599315613315617315631315643315671315677315691315697315701315703315739315743315751315779315803315811315829315851315857315881315883315893315899315907315937315949315961315967315977316003316031316033316037316051316067316073316087316097316109316133316139316153316177316189316193316201316213316219316223316241316243316259316271316291316297316301316321316339316343316363316373316391316403316423316429316439316453316469316471316493316499316501316507316531316567316571316577316583316621316633316637316649316661316663316681316691316697316699316703316717316753316759316769316777316783316793316801316817316819316847316853316859316861316879316891316903316907316919316937316951316957316961316991317003317011317021317029317047317063317071317077317087317089317123317159317171317179317189317197317209317227317257317263317267317269317279317321317323317327317333317351317353317363317371317399317411317419317431317437317453317459317483317489317491317503317539317557317563317587317591317593317599317609317617317621317651317663317671317693317701317711317717317729317731317741317743317771317773317777317783317789317797317827317831317839317857317887317903317921317923317957317959317963317969317971317983317987318001318007318023318077318103318107318127318137318161318173318179318181318191318203318209318211318229318233318247318259318271318281318287318289318299318301318313318319318323318337318347318349318377318403318407318419318431318443318457318467318473318503318523318557318559318569318581318589318601318629318641318653318671318677318679318683318691318701318713318737318743318749318751318781318793318809318811318817318823318833318841318863318881318883318889318907318911318917318919318949318979319001319027319031319037319049319057319061319069319093319097319117319127319129319133319147319159319169319183319201319211319223319237319259319279319289319313319321319327319339319343319351319357319387319391319399319411319427319433319439319441319453319469319477319483319489319499319511319519319541319547319567319577319589319591319601319607319639319673319679319681319687319691319699319727319729319733319747319757319763319811319817319819319829319831319849319883319897319901319919319927319931319937319967319973319981319993320009320011320027320039320041320053320057320063320081320083320101320107320113320119320141320143320149320153320179320209320213320219320237320239320267320269320273320291320293320303320317320329320339320377320387320389320401320417320431320449320471320477320483320513320521320533320539320561320563320591320609320611320627320647320657320659320669320687320693320699320713320741320759320767320791320821320833320839320843320851320861320867320899320911320923320927320939320941320953321007321017321031321037321047321053321073321077321091321109321143321163321169321187321193321199321203321221321227321239321247321289321301321311321313321319321323321329321331321341321359321367321371321383321397321403321413321427321443321449321467321469321509321547321553321569321571321577321593321611321617321619321631321647321661321679321707321709321721321733321743321751321757321779321799321817321821321823321829321833321847321851321889321901321911321947321949321961321983321991322001322009322013322037322039322051322057322067322073322079322093322097322109322111322139322169322171322193322213322229322237322243322247322249322261322271322319322327322339322349322351322397322403322409322417322429322433322459322463322501322513322519322523322537322549322559322571322573322583322589322591322607322613322627322631322633322649322669322709322727322747322757322769322771322781322783322807322849322859322871322877322891322901322919322921322939322951322963322969322997322999323003323009323027323053323077323083323087323093323101323123323131323137323149323201323207323233323243323249323251323273323333323339323341323359323369323371323377323381323383323413323419323441323443323467323471323473323507323509323537323549323567323579323581323591323597323599323623323641323647323651323699323707323711323717323759323767323789323797323801323803323819323837323879323899323903323923323927323933323951323957323987324011324031324053324067324073324089324097324101324113324119324131324143324151324161324179324199324209324211324217324223324239324251324293324299324301324319324329324341324361324391324397324403324419324427324431324437324439324449324451324469324473324491324497324503324517324523324529324557324587324589324593324617324619324637324641324647324661324673324689324697324707324733324743324757324763324773324781324791324799324809324811324839324847324869324871324889324893324901324931324941324949324953324977324979324983324991324997325001325009325019325021325027325043325051325063325079325081325093325133325153325163325181325187325189325201325217325219325229325231325249325271325301325307325309325319325333325343325349325379325411325421325439325447325453325459325463325477325487325513325517325537325541325543325571325597325607325627325631325643325667325673325681325691325693325697325709325723325729325747325751325753325769325777325781325783325807325813325849325861325877325883325889325891325901325921325939325943325951325957325987325993325999326023326057326063326083326087326099326101326113326119326141326143326147326149326153326159326171326189326203326219326251326257326309326323326351326353326369326437326441326449326467326479326497326503326537326539326549326561326563326567326581326593326597326609326611326617326633326657326659326663326681326687326693326701326707326737326741326773326779326831326863326867326869326873326881326903326923326939326941326947326951326983326993326999327001327007327011327017327023327059327071327079327127327133327163327179327193327203327209327211327247327251327263327277327289327307327311327317327319327331327337327343327347327401327407327409327419327421327433327443327463327469327473327479327491327493327499327511327517327529327553327557327559327571327581327583327599327619327629327647327661327667327673327689327707327721327737327739327757327779327797327799327809327823327827327829327839327851327853327869327871327881327889327917327923327941327953327967327979327983328007328037328043328051328061328063328067328093328103328109328121328127328129328171328177328213328243328249328271328277328283328291328303328327328331328333328343328357328373328379328381328397328411328421328429328439328481328511328513328519328543328579328589328591328619328621328633328637328639328651328667328687328709328721328753328777328781328787328789328813328829328837328847328849328883328891328897328901328919328921328931328961328981329009329027329053329059329081329083329089329101329111329123329143329167329177329191329201329207329209329233329243329257329267329269329281329293329297329299329309329317329321329333329347329387329393329401329419329431329471329473329489329503329519329533329551329557329587329591329597329603329617329627329629329639329657329663329671329677329683329687329711329717329723329729329761329773329779329789329801329803329863329867329873329891329899329941329947329951329957329969329977329993329999330017330019330037330041330047330053330061330067330097330103330131330133330139330149330167330199330203330217330227330229330233330241330247330271330287330289330311330313330329330331330347330359330383330389330409330413330427330431330433330439330469330509330557330563330569330587330607330611330623330641330643330653330661330679330683330689330697330703330719330721330731330749330767330787330791330793330821330823330839330853330857330859330877330887330899330907330917330943330983330997331013331027331031331043331063331081331099331127331141331147331153331159331171331183331207331213331217331231331241331249331259331277331283331301331307331319331333331337331339331349331367331369331391331399331423331447331451331489331501331511331519331523331537331543331547331549331553331577331579331589331603331609331613331651331663331691331693331697331711331739331753331769331777331781331801331819331841331843331871331883331889331897331907331909331921331937331943331957331967331973331997331999332009332011332039332053332069332081332099332113332117332147332159332161332179332183332191332201332203332207332219332221332251332263332273332287332303332309332317332393332399332411332417332441332447332461332467332471332473332477332489332509332513332561332567332569332573332611332617332623332641332687332699332711332729332743332749332767332779332791332803332837332851332873332881332887332903332921332933332947332951332987332989332993333019333023333029333031333041333049333071333097333101333103333107333131333139333161333187333197333209333227333233333253333269333271333283333287333299333323333331333337333341333349333367333383333397333419333427333433333439333449333451333457333479333491333493333497333503333517333533333539333563333581333589333623333631333647333667333673333679333691333701333713333719333721333737333757333769333779333787333791333793333803333821333857333871333911333923333929333941333959333973333989333997334021334031334043334049334057334069334093334099334127334133334157334171334177334183334189334199334231334247334261334289334297334319334331334333334349334363334379334387334393334403334421334423334427334429334447334487334493334507334511334513334541334547334549334561334603334619334637334643334651334661334667334681334693334699334717334721334727334751334753334759334771334777334783334787334793334843334861334877334889334891334897334931334963334973334987334991334993335009335021335029335033335047335051335057335077335081335089335107335113335117335123335131335149335161335171335173335207335213335221335249335261335273335281335299335323335341335347335381335383335411335417335429335449335453335459335473335477335507335519335527335539335557335567335579335591335609335633335641335653335663335669335681335689335693335719335729335743335747335771335807335809335813335821335833335843335857335879335893335897335917335941335953335957335999336029336031336041336059336079336101336103336109336113336121336143336151336157336163336181336199336211336221336223336227336239336247336251336253336263336307336317336353336361336373336397336403336419336437336463336491336499336503336521336527336529336533336551336563336571336577336587336593336599336613336631336643336649336653336667336671336683336689336703336727336757336761336767336769336773336793336799336803336823336827336829336857336863336871336887336899336901336911336929336961336977336983336989336997337013337021337031337039337049337069337081337091337097337121337153337189337201337213337217337219337223337261337277337279337283337291337301337313337327337339337343337349337361337367337369337397337411337427337453337457337487337489337511337517337529337537337541337543337583337607337609337627337633337639337651337661337669337681337691337697337721337741337751337759337781337793337817337837337853337859337861337867337871337873337891337901337903337907337919337949337957337969337973337999338017338027338033338119338137338141338153338159338161338167338171338183338197338203338207338213338231338237338251338263338267338269338279338287338293338297338309338321338323338339338341338347338369338383338389338407338411338413338423338431338449338461338473338477338497338531338543338563338567338573338579338581338609338659338669338683338687338707338717338731338747338753338761338773338777338791338803338839338851338857338867338893338909338927338959338993338999339023339049339067339071339091339103339107339121339127339137339139339151339161339173339187339211339223339239339247339257339263339289339307339323339331339341339373339389339413339433339467339491339517339527339539339557339583339589339601339613339617339631339637339649339653339659339671339673339679339707339727339749339751339761339769339799339811339817339821339827339839339841339863339887339907339943339959339991340007340027340031340037340049340057340061340063340073340079340103340111340117340121340127340129340169340183340201340211340237340261340267340283340297340321340337340339340369340381340387340393340397340409340429340447340451340453340477340481340519340541340559340573340577340579340583340591340601340619340633340643340649340657340661340687340693340709340723340757340777340787340789340793340801340811340819340849340859340877340889340897340903340909340913340919340927340931340933340937340939340957340979340999341017341027341041341057341059341063341083341087341123341141341171341179341191341203341219341227341233341269341273341281341287341293341303341311341321341323341333341339341347341357341423341443341447341459341461341477341491341501341507341521341543341557341569341587341597341603341617341623341629341641341647341659341681341687341701341729341743341749341771341773341777341813341821341827341839341851341863341879341911341927341947341951341953341959341963341983341993342037342047342049342059342061342071342073342077342101342107342131342143342179342187342191342197342203342211342233342239342241342257342281342283342299342319342337342341342343342347342359342371342373342379342389342413342421342449342451342467342469342481342497342521342527342547342553342569342593342599342607342647342653342659342673342679342691342697342733342757342761342791342799342803342821342833342841342847342863342869342871342889342899342929342949342971342989343019343037343051343061343073343081343087343127343141343153343163343169343177343193343199343219343237343243343253343261343267343289343303343307343309343313343327343333343337343373343379343381343391343393343411343423343433343481343489343517343529343531343543343547343559343561343579343583343589343591343601343627343631343639343649343661343667343687343709343727343769343771343787343799343801343813343817343823343829343831343891343897343901343913343933343939343943343951343963343997344017344021344039344053344083344111344117344153344161344167344171344173344177344189344207344209344213344221344231344237344243344249344251344257344263344269344273344291344293344321344327344347344353344363344371344417344423344429344453344479344483344497344543344567344587344599344611344621344629344639344653344671344681344683344693344719344749344753344759344791344797344801344807344819344821344843344857344863344873344887344893344909344917344921344941344957344959344963344969344987345001345011345017345019345041345047345067345089345109345133345139345143345181345193345221345227345229345259345263345271345307345311345329345379345413345431345451345461345463345473345479345487345511345517345533345547345551345571345577345581345599345601345607345637345643345647345659345673345679345689345701345707345727345731345733345739345749345757345769345773345791345803345811345817345823345853345869345881345887345889345907345923345937345953345979345997346013346039346043346051346079346091346097346111346117346133346139346141346147346169346187346201346207346217346223346259346261346277346303346309346321346331346337346349346361346369346373346391346393346397346399346417346421346429346433346439346441346447346453346469346501346529346543346547346553346559346561346589346601346607346627346639346649346651346657346667346669346699346711346721346739346751346763346793346831346849346867346873346877346891346903346933346939346943346961346963347003347033347041347051347057347059347063347069347071347099347129347131347141347143347161347167347173347177347183347197347201347209347227347233347239347251347257347287347297347299347317347329347341347359347401347411347437347443347489347509347513347519347533347539347561347563347579347587347591347609347621347629347651347671347707347717347729347731347747347759347771347773347779347801347813347821347849347873347887347891347899347929347933347951347957347959347969347981347983347987347989347993348001348011348017348031348043348053348077348083348097348149348163348181348191348209348217348221348239348241348247348253348259348269348287348307348323348353348367348389348401348407348419348421348431348433348437348443348451348457348461348463348487348527348547348553348559348563348571348583348587348617348629348637348643348661348671348709348731348739348757348763348769348779348811348827348833348839348851348883348889348911348917348919348923348937348949348989348991349007349039349043349051349079349081349093349099349109349121349133349171349177349183349187349199349207349211349241349291349303349313349331349337349343349357349369349373349379349381349387349397349399349403349409349411349423349471349477349483349493349499349507349519349529349553349567349579349589349603349637349663349667349697349709349717349729349753349759349787349793349801349813349819349829349831349837349841349849349871349903349907349913349919349927349931349933349939349949349963349967349981350003350029350033350039350087350089350093350107350111350137350159350179350191350213350219350237350249350257350281350293350347350351350377350381350411350423350429350431350437350443350447350453350459350503350521350549350561350563350587350593350617350621350629350657350663350677350699350711350719350729350731350737350741350747350767350771350783350789350803350809350843350851350869350881350887350891350899350941350947350963350971350981350983350989351011351023351031351037351041351047351053351059351061351077351079351097351121351133351151351157351179351217351223351229351257351259351269351287351289351293351301351311351341351343351347351359351361351383351391351397351401351413351427351437351457351469351479351497351503351517351529351551351563351587351599351643351653351661351667351691351707351727351731351733351749351751351763351773351779351797351803351811351829351847351851351859351863351887351913351919351929351931351959351971351991352007352021352043352049352057352069352073352081352097352109352111352123352133352181352193352201352217352229352237352249352267352271352273352301352309352327352333352349352357352361352367352369352381352399352403352409352411352421352423352441352459352463352481352483352489352493352511352523352543352549352579352589352601352607352619352633352637352661352691352711352739352741352753352757352771352813352817352819352831352837352841352853352867352883352907352909352931352939352949352951352973352991353011353021353047353053353057353069353081353099353117353123353137353147353149353161353173353179353201353203353237353263353293353317353321353329353333353341353359353389353401353411353429353443353453353459353471353473353489353501353527353531353557353567353603353611353621353627353629353641353653353657353677353681353687353699353711353737353747353767353777353783353797353807353813353819353833353867353869353879353891353897353911353917353921353929353939353963354001354007354017354023354031354037354041354043354047354073354091354097354121354139354143354149354163354169354181354209354247354251354253354257354259354271354301354307354313354317354323354329354337354353354371354373354377354383354391354401354421354439354443354451354461354463354469354479354533354539354551354553354581354587354619354643354647354661354667354677354689354701354703354727354737354743354751354763354779354791354799354829354833354839354847354869354877354881354883354911354953354961354971354973354979354983354997355007355009355027355031355037355039355049355057355063355073355087355093355099355109355111355127355139355171355193355211355261355297355307355321355331355339355343355361355363355379355417355427355441355457355463355483355499355501355507355513355517355519355529355541355549355559355571355573355591355609355633355643355651355669355679355697355717355721355723355753355763355777355783355799355811355819355841355847355853355867355891355909355913355933355937355939355951355967355969356023356039356077356093356101356113356123356129356137356141356143356171356173356197356219356243356261356263356287356299356311356327356333356351356387356399356441356443356449356453356467356479356501356509356533356549356561356563356567356579356591356621356647356663356693356701356731356737356749356761356803356819356821356831356869356887356893356927356929356933356947356959356969356977356981356989356999357031357047357073357079357083357103357107357109357131357139357169357179357197357199357211357229357239357241357263357271357281357283357293357319357347357349357353357359357377357389357421357431357437357473357503357509357517357551357559357563357569357571357583357587357593357611357613357619357649357653357659357661357667357671357677357683357689357703357727357733357737357739357767357779357781357787357793357809357817357823357829357839357859357883357913357967357977357983357989357997358031358051358069358073358079358103358109358153358157358159358181358201358213358219358223358229358243358273358277358279358289358291358297358301358313358327358331358349358373358417358427358429358441358447358459358471358483358487358499358531358541358571358573358591358597358601358607358613358637358667358669358681358691358697358703358711358723358727358733358747358753358769358783358793358811358829358847358859358861358867358877358879358901358903358907358909358931358951358973358979358987358993358999359003359017359027359041359063359069359101359111359129359137359143359147359153359167359171359207359209359231359243359263359267359279359291359297359299359311359323359327359353359357359377359389359407359417359419359441359449359477359479359483359501359509359539359549359561359563359581359587359599359621359633359641359657359663359701359713359719359731359747359753359761359767359783359837359851359869359897359911359929359981359987360007360023360037360049360053360071360089360091360163360167360169360181360187360193360197360223360229360233360257360271360277360287360289360293360307360317360323360337360391360407360421360439360457360461360497360509360511360541360551360589360593360611360637360649360653360749360769360779360781360803360817360821360823360827360851360853360863360869360901360907360947360949360953360959360973360977360979360989361001361003361013361033361069361091361093361111361159361183361211361213361217361219361223361237361241361271361279361313361321361327361337361349361351361357361363361373361409361411361421361433361441361447361451361463361469361481361499361507361511361523361531361541361549361561361577361637361643361649361651361663361679361687361723361727361747361763361769361787361789361793361799361807361843361871361873361877361901361903361909361919361927361943361961361967361973361979361993362003362027362051362053362059362069362081362093362099362107362137362143362147362161362177362191362203362213362221362233362237362281362291362293362303362309362333362339362347362353362357362363362371362377362381362393362407362419362429362431362443362449362459362473362521362561362569362581362599362629362633362657362693362707362717362723362741362743362749362753362759362801362851362863362867362897362903362911362927362941362951362953362969362977362983362987363017363019363037363043363047363059363061363067363119363149363151363157363161363173363179363199363211363217363257363269363271363277363313363317363329363343363359363361363367363371363373363379363397363401363403363431363437363439363463363481363491363497363523363529363533363541363551363557363563363569363577363581363589363611363619363659363677363683363691363719363731363751363757363761363767363773363799363809363829363833363841363871363887363889363901363911363917363941363947363949363959363967363977363989364027364031364069364073364079364103364127364129364141364171364183364187364193364213364223364241364267364271364289364291364303364313364321364333364337364349364373364379364393364411364417364423364433364447364451364459364471364499364513364523364537364541364543364571364583364601364607364621364627364643364657364669364687364691364699364717364739364747364751364753364759364801364829364853364873364879364883364891364909364919364921364937364943364961364979364993364997365003365017365021365039365063365069365089365107365119365129365137365147365159365173365179365201365213365231365249365251365257365291365293365297365303365327365333365357365369365377365411365413365419365423365441365461365467365471365473365479365489365507365509365513365527365531365537365557365567365569365587365591365611365627365639365641365669365683365689365699365747365749365759365773365779365791365797365809365837365839365851365903365929365933365941365969365983366001366013366019366029366031366053366077366097366103366127366133366139366161366167366169366173366181366193366199366211366217366221366227366239366259366269366277366287366293366307366313366329366341366343366347366383366397366409366419366433366437366439366461366463366467366479366497366511366517366521366547366593366599366607366631366677366683366697366701366703366713366721366727366733366787366791366811366829366841366851366853366859366869366881366889366901366907366917366923366941366953366967366973366983366997367001367007367019367021367027367033367049367069367097367121367123367127367139367163367181367189367201367207367219367229367231367243367259367261367273367277367307367309367313367321367357367369367391367397367427367453367457367469367501367519367531367541367547367559367561367573367597367603367613367621367637367649367651367663367673367687367699367711367721367733367739367751367771367777367781367789367819367823367831367841367849367853367867367879367883367889367909367949367957368021368029368047368059368077368083368089368099368107368111368117368129368141368149368153368171368189368197368227368231368233368243368273368279368287368293368323368327368359368363368369368399368411368443368447368453368471368491368507368513368521368531368539368551368579368593368597368609368633368647368651368653368689368717368729368737368743368773368783368789368791368801368803368833368857368873368881368899368911368939368947368957369007369013369023369029369067369071369077369079369097369119369133369137369143369169369181369191369197369211369247369253369263369269369283369293369301369319369331369353369361369407369409369419369469369487369491369539369553369557369581369637369647369659369661369673369703369709369731369739369751369791369793369821369827369829369833369841369851369877369893369913369917369947369959369961369979369983369991369997370003370009370021370033370057370061370067370081370091370103370121370133370147370159370169370193370199370207370213370217370241370247370261370373370387370399370411370421370423370427370439370441370451370463370471370477370483370493370511370529370537370547370561370571370597370603370609370613370619370631370661370663370673370679370687370693370723370759370793370801370813370837370871370873370879370883370891370897370919370949371027371029371057371069371071371083371087371099371131371141371143371153371177371179371191371213371227371233371237371249371251371257371281371291371299371303371311371321371333371339371341371353371359371383371387371389371417371447371453371471371479371491371509371513371549371561371573371587371617371627371633371639371663371669371699371719371737371779371797371831371837371843371851371857371869371873371897371927371929371939371941371951371957371971371981371999372013372023372037372049372059372061372067372107372121372131372137372149372167372173372179372223372241372263372269372271372277372289372293372299372311372313372353372367372371372377372397372401372409372413372443372451372461372473372481372497372511372523372539372607372611372613372629372637372653372661372667372677372689372707372709372719372733372739372751372763372769372773372797372803372809372817372829372833372839372847372859372871372877372881372901372917372941372943372971372973372979373003373007373019373049373063373073373091373127373151373157373171373181373183373187373193373199373207373211373213373229373231373273373291373297373301373327373339373343373349373357373361373363373379373393373447373453373459373463373487373489373501373517373553373561373567373613373621373631373649373657373661373669373693373717373721373753373757373777373783373823373837373859373861373903373909373937373943373951373963373969373981373987373999374009374029374039374041374047374063374069374083374089374093374111374117374123374137374149374159374173374177374189374203374219374239374287374291374293374299374317374321374333374347374351374359374389374399374441374443374447374461374483374501374531374537374557374587374603374639374641374653374669374677374681374683374687374701374713374719374729374741374753374761374771374783374789374797374807374819374837374839374849374879374887374893374903374909374929374939374953374977374981374987374989374993375017375019375029375043375049375059375083375091375097375101375103375113375119375121375127375149375157375163375169375203375209375223375227375233375247375251375253375257375259375281375283375311375341375359375367375371375373375391375407375413375443375449375451375457375467375481375509375511375523375527375533375553375559375563375569375593375607375623375631375643375647375667375673375703375707375709375743375757375761375773375779375787375799375833375841375857375899375901375923375931375967375971375979375983375997376001376003376009376021376039376049376063376081376097376099376127376133376147376153376171376183376199376231376237376241376283376291376297376307376351376373376393376399376417376463376469376471376477376483376501376511376529376531376547376573376577376583376589376603376609376627376631376633376639376657376679376687376699376709376721376729376757376759376769376787376793376801376807376811376819376823376837376841376847376853376889376891376897376921376927376931376933376949376963376969377011377021377051377059377071377099377123377129377137377147377171377173377183377197377219377231377257377263377287377291377297377327377329377339377347377353377369377371377387377393377459377471377477377491377513377521377527377537377543377557377561377563377581377593377599377617377623377633377653377681377687377711377717377737377749377761377771377779377789377801377809377827377831377843377851377873377887377911377963377981377999378011378019378023378041378071378083378089378101378127378137378149378151378163378167378179378193378223378229378239378241378253378269378277378283378289378317378353378361378379378401378407378439378449378463378467378493378503378509378523378533378551378559378569378571378583378593378601378619378629378661378667378671378683378691378713378733378739378757378761378779378793378809378817378821378823378869378883378893378901378919378929378941378949378953378967378977378997379007379009379013379033379039379073379081379087379097379103379123379133379147379157379163379177379187379189379199379207379273379277379283379289379307379319379333379343379369379387379391379397379399379417379433379439379441379451379459379499379501379513379531379541379549379571379573379579379597379607379633379649379663379667379679379681379693379699379703379721379723379727379751379777379787379811379817379837379849379853379859379877379889379903379909379913379927379931379963379979379993379997379999380041380047380059380071380117380129380131380141380147380179380189380197380201380203380207380231380251380267380269380287380291380299380309380311380327380329380333380363380377380383380417380423380441380447380453380459380461380483380503380533380557380563380591380621380623380629380641380651380657380707380713380729380753380777380797380803380819380837380839380843380867380869380879380881380909380917380929380951380957380971380977380983381001381011381019381037381047381061381071381077381097381103381167381169381181381209381221381223381233381239381253381287381289381301381319381323381343381347381371381373381377381383381389381401381413381419381439381443381461381467381481381487381509381523381527381529381533381541381559381569381607381629381631381637381659381673381697381707381713381737381739381749381757381761381791381793381817381841381853381859381911381917381937381943381949381977381989381991382001382003382021382037382061382069382073382087382103382117382163382171382189382229382231382241382253382267382271382303382331382351382357382363382373382391382427382429382457382463382493382507382511382519382541382549382553382567382579382583382589382601382621382631382643382649382661382663382693382703382709382727382729382747382751382763382769382777382801382807382813382843382847382861382867382871382873382883382919382933382939382961382979382999383011383023383029383041383051383069383077383081383083383099383101383107383113383143383147383153383171383179383219383221383261383267383281383291383297383303383321383347383371383393383399383417383419383429383459383483383489383519383521383527383533383549383557383573383587383609383611383623383627383633383651383657383659383681383683383693383723383729383753383759383767383777383791383797383807383813383821383833383837383839383869383891383909383917383923383941383951383963383969383983383987384001384017384029384049384061384067384079384089384107384113384133384143384151384157384173384187384193384203384227384247384253384257384259384277384287384289384299384301384317384331384343384359384367384383384403384407384437384469384473384479384481384487384497384509384533384547384577384581384589384599384611384619384623384641384673384691384697384701384719384733384737384751384757384773384779384817384821384827384841384847384851384889384907384913384919384941384961384973385001385013385027385039385057385069385079385081385087385109385127385129385139385141385153385159385171385193385199385223385249385261385267385279385289385291385321385327385331385351385379385391385393385397385403385417385433385471385481385493385501385519385531385537385559385571385573385579385589385591385597385607385621385631385639385657385661385663385709385739385741385771385783385793385811385817385831385837385843385859385877385897385901385907385927385939385943385967385991385997386017386039386041386047386051386083386093386117386119386129386131386143386149386153386159386161386173386219386227386233386237386249386263386279386297386299386303386329386333386339386363386369386371386381386383386401386411386413386429386431386437386471386489386501386521386537386543386549386569386587386609386611386621386629386641386647386651386677386689386693386713386719386723386731386747386777386809386839386851386887386891386921386927386963386977386987386989386993387007387017387031387047387071387077387083387089387109387137387151387161387169387173387187387197387199387203387227387253387263387269387281387307387313387329387341387371387397387403387433387437387449387463387493387503387509387529387551387577387587387613387623387631387641387659387677387679387683387707387721387727387743387749387763387781387791387799387839387853387857387911387913387917387953387967387971387973387977388009388051388057388067388081388099388109388111388117388133388159388163388169388177388181388183388187388211388231388237388253388259388273388277388301388313388319388351388363388369388373388391388403388459388471388477388481388483388489388499388519388529388541388567388573388621388651388657388673388691388693388697388699388711388727388757388777388781388789388793388813388823388837388859388879388891388897388901388903388931388933388937388961388963388991389003389023389027389029389041389047389057389083389089389099389111389117389141389149389161389167389171389173389189389219389227389231389269389273389287389297389299389303389357389369389381389399389401389437389447389461389479389483389507389513389527389531389533389539389561389563389567389569389579389591389621389629389651389659389663389687389699389713389723389743389749389761389773389783389791389797389819389839389849389867389891389897389903389911389923389927389941389947389953389957389971389981389989389999390001390043390067390077390083390097390101390107390109390113390119390151390157390161390191390193390199390209390211390223390263390281390289390307390323390343390347390353390359390367390373390389390391390407390413390419390421390433390437390449390463390479390487390491390493390499390503390527390539390553390581390647390653390671390673390703390707390721390727390737390739390743390751390763390781390791390809390821390829390851390869390877390883390889390893390953390959390961390967390989390991391009391019391021391031391049391057391063391067391073391103391117391133391151391159391163391177391199391217391219391231391247391249391273391283391291391301391331391337391351391367391373391379391387391393391397391399391403391441391451391453391487391519391537391553391579391613391619391627391631391639391661391679391691391693391711391717391733391739391751391753391757391789391801391817391823391847391861391873391879391889391891391903391907391921391939391961391967391987391999392011392033392053392059392069392087392099392101392111392113392131392143392149392153392159392177392201392209392213392221392233392239392251392261392263392267392269392279392281392297392299392321392333392339392347392351392363392383392389392423392437392443392467392473392477392489392503392519392531392543392549392569392593392599392611392629392647392663392669392699392723392737392741392759392761392767392803392807392809392827392831392837392849392851392857392879392893392911392923392927392929392957392963392969392981392983393007393013393017393031393059393073393077393079393083393097393103393109393121393137393143393157393161393181393187393191393203393209393241393247393257393271393287393299393301393311393331393361393373393377393383393401393403393413393451393473393479393487393517393521393539393541393551393557393571393577393581393583393587393593393611393629393637393649393667393671393677393683393697393709393713393721393727393739393749393761393779393797393847393853393857393859393863393871393901393919393929393931393947393961393977393989393997394007394019394039394049394063394073394099394123394129394153394157394169394187394201394211394223394241394249394259394271394291394319394327394357394363394367394369394393394409394411394453394481394489394501394507394523394529394549394571394577394579394601394619394631394633394637394643394673394699394717394721394727394729394733394739394747394759394787394811394813394817394819394829394837394861394879394897394931394943394963394967394969394981394987394993395023395027395039395047395069395089395093395107395111395113395119395137395141395147395159395173395189395191395201395231395243395251395261395273395287395293395303395309395321395323395377395383395407395429395431395443395449395453395459395491395509395513395533395537395543395581395597395611395621395627395657395671395677395687395701395719395737395741395749395767395803395849395851395873395887395891395897395909395921395953395959395971396001396029396031396041396043396061396079396091396103396107396119396157396173396181396197396199396203396217396239396247396259396269396293396299396301396311396323396349396353396373396377396379396413396427396437396443396449396479396509396523396527396533396541396547396563396577396581396601396619396623396629396631396637396647396667396679396703396709396713396719396733396833396871396881396883396887396919396931396937396943396947396953396971396983396997397013397027397037397051397057397063397073397093397099397127397151397153397181397183397211397217397223397237397253397259397283397289397297397301397303397337397351397357397361397373397379397427397429397433397459397469397489397493397517397519397541397543397547397549397567397589397591397597397633397643397673397687397697397721397723397729397751397753397757397759397763397799397807397811397829397849397867397897397907397921397939397951397963397973397981398011398023398029398033398039398053398059398063398077398087398113398117398119398129398143398149398171398207398213398219398227398249398261398267398273398287398303398311398323398339398341398347398353398357398369398393398407398417398423398441398459398467398471398473398477398491398509398539398543398549398557398569398581398591398609398611398621398627398669398681398683398693398711398729398731398759398771398813398819398821398833398857398863398887398903398917398921398933398941398969398977398989399023399031399043399059399067399071399079399097399101399107399131399137399149399151399163399173399181399197399221399227399239399241399263399271399277399281399283399353399379399389399391399401399403399409399433399439399473399481399491399493399499399523399527399541399557399571399577399583399587399601399613399617399643399647399667399677399689399691399719399727399731399739399757399761399769399781399787399793399851399853399871399887399899399911399913399937399941399953399979399983399989400009400031400033400051400067400069400087400093400109400123400151400157400187400199400207400217400237400243400247400249400261400277400291400297400307400313400321400331400339400381400391400409400417400429400441400457400471400481400523400559400579400597400601400607400619400643400651400657400679400681400703400711400721400723400739400753400759400823400837400849400853400859400871400903400927400931400943400949400963400997401017401029401039401053401057401069401077401087401101401113401119401161401173401179401201401209401231401237401243401279401287401309401311401321401329401341401347401371401381401393401407401411401417401473401477401507401519401537401539401551401567401587401593401627401629401651401669401671401689401707401711401743401771401773401809401813401827401839401861401867401887401903401909401917401939401953401957401959401981401987401993402023402029402037402043402049402053402071402089402091402107402131402133402137402139402197402221402223402239402253402263402277402299402307402313402329402331402341402343402359402361402371402379402383402403402419402443402487402503402511402517402527402529402541402551402559402581402583402587402593402601402613402631402691402697402739402751402757402761402763402767402769402797402803402817402823402847402851402859402863402869402881402923402943402947402949402991403001403003403037403043403049403057403061403063403079403097403103403133403141403159403163403181403219403241403243403253403261403267403289403301403309403327403331403339403363403369403387403391403433403439403483403499403511403537403547403549403553403567403577403591403603403607403621403649403661403679403681403687403703403717403721403729403757403783403787403817403829403831403849403861403867403877403889403901403933403951403957403969403979403981403993404009404011404017404021404029404051404081404099404113404119404123404161404167404177404189404191404197404213404221404249404251404267404269404273404291404309404321404323404357404381404387404389404399404419404423404429404431404449404461404483404489404497404507404513404527404531404533404539404557404597404671404693404699404713404773404779404783404819404827404837404843404849404851404941404951404959404969404977404981404983405001405011405029405037405047405049405071405073405089405091405143405157405179405199405211405221405227405239405241405247405253405269405277405287405299405323405341405343405347405373405401405407405413405437405439405473405487405491405497405499405521405527405529405541405553405577405599405607405611405641405659405667405677405679405683405689405701405703405709405719405731405749405763405767405781405799405817405827405829405857405863405869405871405893405901405917405947405949405959405967405989405991405997406013406027406037406067406073406093406117406123406169406171406177406183406207406247406253406267406271406309406313406327406331406339406349406361406381406397406403406423406447406481406499406501406507406513406517406531406547406559406561406573406577406579406583406591406631406633406649406661406673406697406699406717406729406739406789406807406811406817406837406859406873406883406907406951406969406981406993407023407047407059407083407119407137407149407153407177407179407191407203407207407219407221407233407249407257407263407273407287407291407299407311407317407321407347407357407359407369407377407383407401407437407471407483407489407501407503407509407521407527407567407573407579407587407599407621407633407639407651407657407669407699407707407713407717407723407741407747407783407789407791407801407807407821407833407843407857407861407879407893407899407917407923407947407959407969407971407977407993408011408019408041408049408071408077408091408127408131408137408169408173408197408203408209408211408217408223408229408241408251408263408271408283408311408337408341408347408361408379408389408403408413408427408431408433408437408461408469408479408491408497408533408539408553408563408607408623408631408637408643408659408677408689408691408701408703408713408719408743408763408769408773408787408803408809408817408841408857408869408911408913408923408943408953408959408971408979408997409007409021409027409033409043409063409069409081409099409121409153409163409177409187409217409237409259409261409267409271409289409291409327409333409337409349409351409369409379409391409397409429409433409441409463409471409477409483409499409517409523409529409543409573409579409589409597409609409639409657409691409693409709409711409723409729409733409753409769409777409781409813409817409823409831409841409861409867409879409889409891409897409901409909409933409943409951409961409967409987409993409999410009410029410063410087410093410117410119410141410143410149410171410173410203410231410233410239410243410257410279410281410299410317410323410339410341410353410359410383410387410393410401410411410413410453410461410477410489410491410497410507410513410519410551410561410587410617410621410623410629410651410659410671410687410701410717410731410741410747410749410759410783410789410801410807410819410833410857410899410903410929410953410983410999411001411007411011411013411031411041411049411067411071411083411101411113411119411127411143411157411167411193411197411211411233411241411251411253411259411287411311411337411347411361411371411379411409411421411443411449411469411473411479411491411503411527411529411557411563411569411577411583411589411611411613411617411637411641411667411679411683411703411707411709411721411727411737411739411743411751411779411799411809411821411823411833411841411883411919411923411937411941411947411967411991412001412007412019412031412033412037412039412051412067412073412081412099412109412123412127412133412147412157412171412187412189412193412201412211412213412219412249412253412273412277412289412303412333412339412343412387412397412411412457412463412481412487412493412537412561412567412571412589412591412603412609412619412627412637412639412651412663412667412717412739412771412793412807412831412849412859412891412901412903412939412943412949412967412987413009413027413033413053413069413071413081413087413089413093413111413113413129413141413143413159413167413183413197413201413207413233413243413251413263413267413293413299413353413411413417413429413443413461413477413521413527413533413537413551413557413579413587413597413629413653413681413683413689413711413713413719413737413753413759413779413783413807413827413849413863413867413869413879413887413911413923413951413981414013414017414019414031414049414053414061414077414083414097414101414107414109414131414157414179414199414203414209414217414221414241414259414269414277414283414311414313414329414331414347414361414367414383414389414397414413414431414433414451414457414461414467414487414503414521414539414553414559414571414577414607414611414629414641414643414653414677414679414683414691414697414703414707414709414721414731414737414763414767414769414773414779414793414803414809414833414857414871414889414893414899414913414923414929414949414959414971414977414991415013415031415039415061415069415073415087415097415109415111415133415141415147415153415159415171415187415189415201415213415231415253415271415273415319415343415379415381415391415409415427415447415469415477415489415507415517415523415543415553415559415567415577415603415607415609415627415631415643415651415661415669415673415687415691415697415717415721415729415759415783415787415799415801415819415823415861415873415879415901415931415937415949415951415957415963415969415979415993415999416011416023416071416077416089416107416147416149416153416159416167416201416219416239416243416249416257416263416281416291416333416359416387416389416393416399416401416407416413416417416419416441416443416459416473416477416491416497416501416503416513416531416543416573416579416593416621416623416629416659416677416693416719416761416797416821416833416839416849416851416873416881416887416947416957416963416989417007417017417019417023417037417089417097417113417119417127417133417161417169417173417181417187417191417203417217417227417239417251417271417283417293417311417317417331417337417371417377417379417383417419417437417451417457417479417491417493417509417511417523417541417553417559417577417581417583417617417623417631417643417649417671417691417719417721417727417731417733417737417751417763417773417793417811417821417839417863417869417881417883417899417931417941417947417953417959417961417983417997418007418009418027418031418043418051418069418073418079418087418109418129418157418169418177418181418189418199418207418219418259418273418279418289418303418321418331418337418339418343418349418351418357418373418381418391418423418427418447418459418471418493418511418553418559418597418601418603418631418633418637418657418667418699418709418721418739418751418763418771418783418787418793418799418811418813418819418837418843418849418861418867418871418883418889418909418921418927418933418939418961418981418987418993418997419047419051419053419057419059419087419141419147419161419171419183419189419191419201419231419249419261419281419291419297419303419317419329419351419383419401419417419423419429419443419449419459419467419473419477419483419491419513419527419537419557419561419563419567419579419591419597419599419603419609419623419651419687419693419701419711419743419753419777419789419791419801419803419821419827419831419873419893419921419927419929419933419953419959419999420001420029420037420041420047420073420097420103420149420163420191420193420221420241420253420263420269420271420293420307420313420317420319420323420331420341420349420353420361420367420383420397420419420421420439420457420467420479420481420499420503420521420551420557420569420571420593420599420613420671420677420683420691420731420737420743420757420769420779420781420799420803420809420811420851420853420857420859420899420919420929420941420967420977420997421009421019421033421037421049421079421081421093421103421121421123421133421147421159421163421177421181421189421207421241421273421279421303421313421331421339421349421361421381421397421409421417421423421433421453421459421469421471421483421493421501421517421559421607421609421621421633421639421643421657421661421691421697421699421703421709421711421717421727421739421741421783421801421807421831421847421891421907421913421943421973421987421997422029422041422057422063422069422077422083422087422089422099422101422111422113422129422137422141422183422203422209422231422239422243422249422267422287422291422309422311422321422339422353422363422369422377422393422407422431422453422459422479422537422549422551422557422563422567422573422581422621422627422657422689422701422707422711422749422753422759422761422789422797422803422827422857422861422867422869422879422881422893422897422899422911422923422927422969422987423001423013423019423043423053423061423067423083423091423097423103423109423121423127423133423173423179423191423209423221423229423233423251423257423259423277423281423287423289423299423307423323423341423347423389423403423413423427423431423439423457423461423463423469423481423497423503423509423541423547423557423559423581423587423601423617423649423667423697423707423713423727423749423751423763423769423779423781423791423803423823423847423853423859423869423883423887423931423949423961423977423989423991424001424003424007424019424027424037424079424091424093424103424117424121424129424139424147424157424163424169424187424199424223424231424243424247424261424267424271424273424313424331424339424343424351424397424423424429424433424451424471424481424493424519424537424547424549424559424573424577424597424601424639424661424667424679424687424693424709424727424729424757424769424771424777424811424817424819424829424841424843424849424861424867424889424891424903424909424913424939424961424967424997425003425027425039425057425059425071425083425101425107425123425147425149425189425197425207425233425237425251425273425279425281425291425297425309425317425329425333425363425377425387425393425417425419425423425441425443425471425473425489425501425519425521425533425549425563425591425603425609425641425653425681425701425713425779425783425791425801425813425819425837425839425851425857425861425869425879425899425903425911425939425959425977425987425989426007426011426061426073426077426089426091426103426131426161426163426193426197426211426229426233426253426287426301426311426319426331426353426383426389426401426407426421426427426469426487426527426541426551426553426563426583426611426631426637426641426661426691426697426707426709426731426737426739426743426757426761426763426773426779426787426799426841426859426863426871426889426893426913426917426919426931426941426971426973426997427001427013427039427043427067427069427073427079427081427103427117427151427169427181427213427237427241427243427247427249427279427283427307427309427327427333427351427369427379427381427403427417427421427423427429427433427439427447427451427457427477427513427517427523427529427541427579427591427597427619427621427681427711427717427723427727427733427751427781427787427789427813427849427859427877427879427883427913427919427939427949427951427957427967427969427991427993427997428003428023428027428033428039428041428047428083428093428137428143428147428149428161428167428173428177428221428227428231428249428251428273428297428299428303428339428353428369428401428411428429428471428473428489428503428509428531428539428551428557428563428567428569428579428629428633428639428657428663428671428677428683428693428731428741428759428777428797428801428807428809428833428843428851428863428873428899428951428957428977429007429017429043429083429101429109429119429127429137429139429161429181429197429211429217429223429227429241429259429271429277429281429283429329429347429349429361429367429389429397429409429413429427429431429449429463429467429469429487429497429503429509429511429521429529429547429551429563429581429587429589429599429631429643429659429661429673429677429679429683429701429719429727429731429733429773429791429797429817429823429827429851429853429881429887429889429899429901429907429911429917429929429931429937429943429953429971429973429991430007430009430013430019430057430061430081430091430093430121430139430147430193430259430267430277430279430289430303430319430333430343430357430393430411430427430433430453430487430499430511430513430517430543430553430571430579430589430601430603430649430663430691430697430699430709430723430739430741430747430751430753430769430783430789430799430811430819430823430841430847430861430873430879430883430891430897430907430909430921430949430957430979430981430987430999431017431021431029431047431051431063431077431083431099431107431141431147431153431173431191431203431213431219431237431251431257431267431269431287431297431311431329431339431363431369431377431381431399431423431429431441431447431449431479431513431521431533431567431581431597431603431611431617431621431657431659431663431671431693431707431729431731431759431777431797431801431803431807431831431833431857431863431867431869431881431887431891431903431911431929431933431947431983431993432001432007432023432031432037432043432053432059432067432073432097432121432137432139432143432149432161432163432167432199432203432227432241432251432277432281432287432301432317432323432337432343432349432359432373432389432391432401432413432433432437432449432457432479432491432499432503432511432527432539432557432559432569432577432587432589432613432631432637432659432661432713432721432727432737432743432749432781432793432797432799432833432847432857432869432893432907432923432931432959432961432979432983432989433003433033433049433051433061433073433079433087433093433099433117433123433141433151433187433193433201433207433229433241433249433253433259433261433267433271433291433309433319433337433351433357433361433369433373433393433399433421433429433439433453433469433471433501433507433513433549433571433577433607433627433633433639433651433661433663433673433679433681433703433723433729433747433759433777433781433787433813433817433847433859433861433877433883433889433931433943433963433967433981434009434011434029434039434081434087434107434111434113434117434141434167434179434191434201434209434221434237434243434249434261434267434293434297434303434311434323434347434353434363434377434383434387434389434407434411434431434437434459434461434471434479434501434509434521434561434563434573434593434597434611434647434659434683434689434699434717434719434743434761434783434803434807434813434821434827434831434839434849434857434867434873434881434909434921434923434927434933434939434947434957434963434977434981434989435037435041435059435103435107435109435131435139435143435151435161435179435181435187435191435221435223435247435257435263435277435283435287435307435317435343435349435359435371435397435401435403435419435427435437435439435451435481435503435529435541435553435559435563435569435571435577435583435593435619435623435637435641435647435649435653435661435679435709435731435733435739435751435763435769435779435817435839435847435857435859435881435889435893435907435913435923435947435949435973435983435997436003436013436027436061436081436087436091436097436127436147436151436157436171436181436217436231436253436273436279436283436291436307436309436313436343436357436399436417436427436439436459436463436477436481436483436507436523436529436531436547436549436571436591436607436621436627436649436651436673436687436693436717436727436729436739436741436757436801436811436819436831436841436853436871436889436913436957436963436967436973436979436993436999437011437033437071437077437083437093437111437113437137437141437149437153437159437191437201437219437237437243437263437273437279437287437293437321437351437357437363437387437389437401437413437467437471437473437497437501437509437519437527437533437539437543437557437587437629437641437651437653437677437681437687437693437719437729437743437753437771437809437819437837437849437861437867437881437909437923437947437953437959437977438001438017438029438047438049438091438131438133438143438169438203438211438223438233438241438253438259438271438281438287438301438313438329438341438377438391438401438409438419438439438443438467438479438499438517438521438523438527438533438551438569438589438601438611438623438631438637438661438667438671438701438707438721438733438761438769438793438827438829438833438847438853438869438877438887438899438913438937438941438953438961438967438979438983438989439007439009439063439081439123439133439141439157439163439171439183439199439217439253439273439279439289439303439339439349439357439367439381439409439421439427439429439441439459439463439471439493439511439519439541439559439567439573439577439583439601439613439631439639439661439667439687439693439697439709439723439729439753439759439763439771439781439787439799439811439823439849439853439861439867439883439891439903439919439949439961439969439973439981439991440009440023440039440047440087440093440101440131440159440171440177440179440183440203440207440221440227440239440261440269440281440303440311440329440333440339440347440371440383440389440393440399440431440441440443440471440497440501440507440509440527440537440543440549440551440567440569440579440581440641440651440653440669440677440681440683440711440717440723440731440753440761440773440807440809440821440831440849440863440893440903440911440939440941440953440959440983440987440989441011441029441041441043441053441073441079441101441107441109441113441121441127441157441169441179441187441191441193441229441247441251441257441263441281441307441319441349441359441361441403441421441443441449441461441479441499441517441523441527441547441557441563441569441587441607441613441619441631441647441667441697441703441713441737441751441787441797441799441811441827441829441839441841441877441887441907441913441923441937441953441971442003442007442009442019442027442031442033442061442069442097442109442121442139442147442151442157442171442177442181442193442201442207442217442229442237442243442271442283442291442319442327442333442363442367442397442399442439442447442457442469442487442489442499442501442517442531442537442571442573442577442579442601442609442619442633442691442699442703442721442733442747442753442763442769442777442781442789442807442817442823442829442831442837442843442861442879442903442919442961442963442973442979442987442991442997443011443017443039443041443057443059443063443077443089443117443123443129443147443153443159443161443167443171443189443203443221443227443231443237443243443249443263443273443281443291443293443341443347443353443363443369443389443407443413443419443423443431443437443453443467443489443501443533443543443551443561443563443567443587443591443603443609443629443659443687443689443701443711443731443749443753443759443761443771443777443791443837443851443867443869443873443879443881443893443899443909443917443939443941443953443983443987443999444001444007444029444043444047444079444089444109444113444121444127444131444151444167444173444179444181444187444209444253444271444281444287444289444293444307444341444343444347444349444401444403444421444443444449444461444463444469444473444487444517444523444527444529444539444547444553444557444569444589444607444623444637444641444649444671444677444701444713444739444767444791444793444803444811444817444833444841444859444863444869444877444883444887444893444901444929444937444953444967444971444979445001445019445021445031445033445069445087445091445097445103445141445157445169445183445187445199445229445261445271445279445283445297445307445321445339445363445427445433445447445453445463445477445499445507445537445541445567445573445583445589445597445619445631445633445649445657445691445699445703445741445747445769445771445789445799445807445829445847445853445871445877445883445891445931445937445943445967445969446003446009446041446053446081446087446111446123446129446141446179446189446191446197446221446227446231446261446263446273446279446293446309446323446333446353446363446387446389446399446401446417446441446447446461446473446477446503446533446549446561446569446597446603446609446647446657446713446717446731446753446759446767446773446819446827446839446863446881446891446893446909446911446921446933446951446969446983447001447011447019447053447067447079447101447107447119447133447137447173447179447193447197447211447217447221447233447247447257447259447263447311447319447323447331447353447401447409447427447439447443447449447451447463447467447481447509447521447527447541447569447571447611447617447637447641447677447683447701447703447743447749447757447779447791447793447817447823447827447829447841447859447877447883447893447901447907447943447961447983447991448003448013448027448031448057448067448073448093448111448121448139448141448157448159448169448177448187448193448199448207448241448249448303448309448313448321448351448363448367448373448379448387448397448421448451448519448531448561448597448607448627448631448633448667448687448697448703448727448733448741448769448793448801448807448829448843448853448859448867448871448873448879448883448907448927448939448969448993448997448999449003449011449051449077449083449093449107449117449129449131449149449153449161449171449173449201449203449209449227449243449249449261449263449269449287449299449303449311449321449333449347449353449363449381449399449411449417449419449437449441449459449473449543449549449557449563449567449569449591449609449621449629449653449663449671449677449681449689449693449699449741449759449767449773449783449797449807449821449833449851449879449921449929449941449951449959449963449971449987449989450001450011450019450029450067450071450077450083450101450103450113450127450137450161450169450193450199450209450217450223450227450239450257450259450277450287450293450299450301450311450343450349450361450367450377450383450391450403450413450421450431450451450473450479450481450487450493450503450529450533450557450563450581450587450599450601450617450641450643450649450677450691450707450719450727450761450767450787450797450799450803450809450811450817450829450839450841450847450859450881450883450887450893450899450913450917450929450943450949450971450991450997451013451039451051451057451069451093451097451103451109451159451177451181451183451201451207451249451277451279451301451303451309451313451331451337451343451361451387451397451411451439451441451481451499451519451523451541451547451553451579451601451609451621451637451657451663451667451669451679451681451691451699451709451723451747451753451771451783451793451799451823451831451837451859451873451879451897451901451903451909451921451933451937451939451961451967451987452009452017452027452033452041452077452083452087452131452159452161452171452191452201452213452227452233452239452269452279452293452297452329452363452377452393452401452443452453452497452519452521452531452533452537452539452549452579452587452597452611452629452633452671452687452689452701452731452759452773452797452807452813452821452831452857452869452873452923452953452957452983452989453023453029453053453073453107453119453133453137453143453157453161453181453197453199453209453217453227453239453247453269453289453293453301453311453317453329453347453367453371453377453379453421453451453461453527453553453559453569453571453599453601453617453631453637453641453643453659453667453671453683453703453707453709453737453757453797453799453823453833453847453851453877453889453907453913453923453931453949453961453977453983453991454009454021454031454033454039454061454063454079454109454141454151454159454183454199454211454213454219454229454231454247454253454277454297454303454313454331454351454357454361454379454387454409454417454451454453454483454501454507454513454541454543454547454577454579454603454609454627454637454673454679454709454711454721454723454759454763454777454799454823454843454847454849454859454889454891454907454919454921454931454943454967454969454973454991455003455011455033455047455053455093455099455123455149455159455167455171455177455201455219455227455233455237455261455263455269455291455309455317455321455333455339455341455353455381455393455401455407455419455431455437455443455461455471455473455479455489455491455513455527455531455537455557455573455579455597455599455603455627455647455659455681455683455687455701455711455717455737455761455783455789455809455827455831455849455863455881455899455921455933455941455953455969455977455989455993455999456007456013456023456037456047456061456091456107456109456119456149456151456167456193456223456233456241456283456293456329456349456353456367456377456403456409456427456439456451456457456461456499456503456517456523456529456539456553456557456559456571456581456587456607456611456613456623456641456647456649456653456679456683456697456727456737456763456767456769456791456809456811456821456871456877456881456899456901456923456949456959456979456991457001457003457013457021457043457049457057457087457091457097457099457117457139457151457153457183457189457201457213457229457241457253457267457271457277457279457307457319457333457339457363457367457381457393457397457399457403457411457421457433457459457469457507457511457517457547457553457559457571457607457609457621457643457651457661457669457673457679457687457697457711457739457757457789457799457813457817457829457837457871457889457903457913457943457979457981457987458009458027458039458047458053458057458063458069458119458123458173458179458189458191458197458207458219458239458309458317458323458327458333458357458363458377458399458401458407458449458477458483458501458531458533458543458567458569458573458593458599458611458621458629458639458651458663458669458683458701458719458729458747458789458791458797458807458819458849458863458879458891458897458917458921458929458947458957458959458963458971458977458981458987458993459007459013459023459029459031459037459047459089459091459113459127459167459169459181459209459223459229459233459257459271459293459301459313459317459337459341459343459353459373459377459383459397459421459427459443459463459467459469459479459509459521459523459593459607459611459619459623459631459647459649459671459677459691459703459749459763459791459803459817459829459841459847459883459913459923459929459937459961460013460039460051460063460073460079460081460087460091460099460111460127460147460157460171460181460189460211460217460231460247460267460289460297460301460337460349460373460379460387460393460403460409460417460451460463460477460531460543460561460571460589460609460619460627460633460637460643460657460673460697460709460711460721460771460777460787460793460813460829460841460843460871460891460903460907460913460919460937460949460951460969460973460979460981460987460991461009461011461017461051461053461059461093461101461119461143461147461171461183461191461207461233461239461257461269461273461297461299461309461317461323461327461333461359461381461393461407461411461413461437461441461443461467461479461507461521461561461569461581461599461603461609461627461639461653461677461687461689461693461707461717461801461803461819461843461861461887461891461917461921461933461957461971461977461983462013462041462067462073462079462097462103462109462113462131462149462181462191462199462221462239462263462271462307462311462331462337462361462373462377462401462409462419462421462437462443462467462481462491462493462499462529462541462547462557462569462571462577462589462607462629462641462643462653462659462667462673462677462697462713462719462727462733462739462773462827462841462851462863462871462881462887462899462901462911462937462947462953462983463003463031463033463093463103463157463181463189463207463213463219463231463237463247463249463261463283463291463297463303463313463319463321463339463343463363463387463399463433463447463451463453463457463459463483463501463511463513463523463531463537463549463579463613463627463633463643463649463663463679463693463711463717463741463747463753463763463781463787463807463823463829463831463849463861463867463873463889463891463907463919463921463949463963463973463987463993464003464011464021464033464047464069464081464089464119464129464131464137464141464143464171464173464197464201464213464237464251464257464263464279464281464291464309464311464327464351464371464381464383464413464419464437464447464459464467464479464483464521464537464539464549464557464561464587464591464603464617464621464647464663464687464699464741464747464749464753464767464771464773464777464801464803464809464813464819464843464857464879464897464909464917464923464927464939464941464951464953464963464983464993464999465007465011465013465019465041465061465067465071465077465079465089465107465119465133465151465161465163465167465169465173465187465209465211465259465271465277465281465293465299465317465319465331465337465373465379465383465407465419465433465463465469465523465529465541465551465581465587465611465631465643465649465659465679465701465721465739465743465761465781465797465799465809465821465833465841465887465893465901465917465929465931465947465977465989466009466019466027466033466043466061466069466073466079466087466091466121466139466153466171466181466183466201466243466247466261466267466273466283466303466321466331466339466357466369466373466409466423466441466451466483466517466537466547466553466561466567466573466579466603466619466637466649466651466673466717466723466729466733466747466751466777466787466801466819466853466859466897466909466913466919466951466957466997467003467009467017467021467063467081467083467101467119467123467141467147467171467183467197467209467213467237467239467261467293467297467317467329467333467353467371467399467417467431467437467447467471467473467477467479467491467497467503467507467527467531467543467549467557467587467591467611467617467627467629467633467641467651467657467669467671467681467689467699467713467729467737467743467749467773467783467813467827467833467867467869467879467881467893467897467899467903467927467941467953467963467977468001468011468019468029468049468059468067468071468079468107468109468113468121468133468137468151468157468173468187468191468199468239468241468253468271468277468289468319468323468353468359468371468389468421468439468451468463468473468491468493468499468509468527468551468557468577468581468593468599468613468619468623468641468647468653468661468667468683468691468697468703468709468719468737468739468761468773468781468803468817468821468841468851468859468869468883468887468889468893468899468913468953468967468973468983469009469031469037469069469099469121469127469141469153469169469193469207469219469229469237469241469253469267469279469283469303469321469331469351469363469367469369469379469397469411469429469439469457469487469501469529469541469543469561469583469589469613469627469631469649469657469673469687469691469717469723469747469753469757469769469787469793469801469811469823469841469849469877469879469891469907469919469939469957469969469979469993470021470039470059470077470081470083470087470089470131470149470153470161470167470179470201470207470209470213470219470227470243470251470263470279470297470299470303470317470333470347470359470389470399470411470413470417470429470443470447470453470461470471470473470489470501470513470521470531470539470551470579470593470597470599470609470621470627470647470651470653470663470669470689470711470719470731470749470779470783470791470819470831470837470863470867470881470887470891470903470927470933470941470947470957470959470993470999471007471041471061471073471089471091471101471137471139471161471173471179471187471193471209471217471241471253471259471277471281471283471299471301471313471353471389471391471403471407471439471451471467471481471487471503471509471521471533471539471553471571471589471593471607471617471619471641471649471659471671471673471677471683471697471703471719471721471749471769471781471791471803471817471841471847471853471871471893471901471907471923471929471931471943471949471959471997472019472027472051472057472063472067472103472111472123472127472133472139472151472159472163472189472193472247472249472253472261472273472289472301472309472319472331472333472349472369472391472393472399472411472421472457472469472477472523472541472543472559472561472573472597472631472639472643472669472687472691472697472709472711472721472741472751472763472793472799472817472831472837472847472859472883472907472909472921472937472939472963472993473009473021473027473089473101473117473141473147473159473167473173473191473197473201473203473219473227473257473279473287473293473311473321473327473351473353473377473381473383473411473419473441473443473453473471473477473479473497473503473507473513473519473527473531473533473549473579473597473611473617473633473647473659473719473723473729473741473743473761473789473833473839473857473861473867473887473899473911473923473927473929473939473951473953473971473981473987473999474017474029474037474043474049474059474073474077474101474119474127474137474143474151474163474169474197474211474223474241474263474289474307474311474319474337474343474347474359474379474389474391474413474433474437474443474479474491474497474499474503474533474541474547474557474569474571474581474583474619474629474647474659474667474671474707474709474737474751474757474769474779474787474809474811474839474847474857474899474907474911474917474923474931474937474941474949474959474977474983475037475051475073475081475091475093475103475109475141475147475151475159475169475207475219475229475243475271475273475283475289475297475301475327475331475333475351475367475369475379475381475403475417475421475427475429475441475457475469475483475511475523475529475549475583475597475613475619475621475637475639475649475669475679475681475691475693475697475721475729475751475753475759475763475777475789475793475807475823475831475837475841475859475877475879475889475897475903475907475921475927475933475957475973475991475997476009476023476027476029476039476041476059476081476087476089476101476107476111476137476143476167476183476219476233476237476243476249476279476299476317476347476351476363476369476381476401476407476419476423476429476467476477476479476507476513476519476579476587476591476599476603476611476633476639476647476659476681476683476701476713476719476737476743476753476759476783476803476831476849476851476863476869476887476891476911476921476929476977476981476989477011477013477017477019477031477047477073477077477091477131477149477163477209477221477229477259477277477293477313477317477329477341477359477361477383477409477439477461477469477497477511477517477523477539477551477553477557477571477577477593477619477623477637477671477677477721477727477731477739477767477769477791477797477809477811477821477823477839477847477857477863477881477899477913477941477947477973477977477991478001478039478063478067478069478087478099478111478129478139478157478169478171478189478199478207478213478241478243478253478259478271478273478321478339478343478351478391478399478403478411478417478421478427478433478441478451478453478459478481478483478493478523478531478571478573478579478589478603478627478631478637478651478679478697478711478727478729478739478741478747478763478769478787478801478811478813478823478831478843478853478861478871478879478897478901478913478927478931478937478943478963478967478991478999479023479027479029479041479081479131479137479147479153479189479191479201479209479221479231479239479243479263479267479287479299479309479317479327479357479371479377479387479419479429479431479441479461479473479489479497479509479513479533479543479561479569479581479593479599479623479629479639479701479749479753479761479771479777479783479797479813479821479833479839479861479879479881479891479903479909479939479951479953479957479971480013480017480019480023480043480047480049480059480061480071480091480101480107480113480133480143480157480167480169480203480209480287480299480317480329480341480343480349480367480373480379480383480391480409480419480427480449480451480461480463480499480503480509480517480521480527480533480541480553480563480569480583480587480647480661480707480713480731480737480749480761480773480787480803480827480839480853480881480911480919480929480937480941480959480967480979480989481001481003481009481021481043481051481067481073481087481093481097481109481123481133481141481147481153481157481171481177481181481199481207481211481231481249481297481301481303481307481343481363481373481379481387481409481417481433481447481469481489481501481513481531481549481571481577481589481619481633481639481651481667481673481681481693481697481699481721481751481753481769481787481801481807481813481837481843481847481849481861481867481879481883481909481939481963481997482017482021482029482033482039482051482071482093482099482101482117482123482179482189482203482213482227482231482233482243482263482281482309482323482347482351482359482371482387482393482399482401482407482413482423482437482441482483482501482507482509482513482519482527482539482569482593482597482621482627482633482641482659482663482683482687482689482707482711482717482719482731482743482753482759482767482773482789482803482819482827482837482861482863482873482897482899482917482941482947482957482971483017483031483061483071483097483127483139483163483167483179483209483211483221483229483233483239483247483251483281483289483317483323483337483347483367483377483389483397483407483409483433483443483467483481483491483499483503483523483541483551483557483563483577483611483619483629483643483649483671483697483709483719483727483733483751483757483761483767483773483787483809483811483827483829483839483853483863483869483883483907483929483937483953483971483991484019484027484037484061484067484079484091484111484117484123484129484151484153484171484181484193484201484207484229484243484259484283484301484303484327484339484361484369484373484397484411484417484439484447484457484459484487484489484493484531484543484577484597484607484609484613484621484639484643484691484703484727484733484751484763484769484777484787484829484853484867484927484951484987484999485021485029485041485053485059485063485081485101485113485123485131485137485161485167485171485201485207485209485263485311485347485351485363485371485383485389485411485417485423485437485447485479485497485509485519485543485567485587485593485603485609485647485657485671485689485701485717485729485731485753485777485819485827485831485833485893485899485909485923485941485959485977485993486023486037486041486043486053486061486071486091486103486119486133486139486163486179486181486193486203486221486223486247486281486293486307486313486323486329486331486341486349486377486379486389486391486397486407486433486443486449486481486491486503486509486511486527486539486559486569486583486589486601486617486637486641486643486653486667486671486677486679486683486697486713486721486757486767486769486781486797486817486821486833486839486869486907486923486929486943486947486949486971486977486991487007487013487021487049487051487057487073487079487093487099487111487133487177487183487187487211487213487219487247487261487283487303487307487313487349487363487381487387487391487397487423487427487429487447487457487463487469487471487477487481487489487507487561487589487601487603487607487637487649487651487657487681487691487703487709487717487727487733487741487757487769487783487789487793487811487819487829487831487843487873487889487891487897487933487943487973487979487997488003488009488011488021488051488057488069488119488143488149488153488161488171488197488203488207488209488227488231488233488239488249488261488263488287488303488309488311488317488321488329488333488339488347488353488381488399488401488407488417488419488441488459488473488503488513488539488567488573488603488611488617488627488633488639488641488651488687488689488701488711488717488723488729488743488749488759488779488791488797488821488827488833488861488879488893488897488909488921488947488959488981488993489001489011489019489043489053489061489101489109489113489127489133489157489161489179489191489197489217489239489241489257489263489283489299489329489337489343489361489367489389489407489409489427489431489439489449489457489479489487489493489529489539489551489553489557489571489613489631489653489659489673489677489679489689489691489733489743489761489791489793489799489803489817489823489833489847489851489869489871489887489901489911489913489941489943489959489961489977489989490001490003490019490031490033490057490097490103490111490117490121490151490159490169490183490201490207490223490241490247490249490267490271490277490283490309490313490339490367490393490417490421490453490459490463490481490493490499490519490537490541490543490549490559490571490573490577490579490591490619490627490631490643490661490663490697490733490741490769490771490783490829490837490849490859490877490891490913490921490927490937490949490951490957490967490969490991490993491003491039491041491059491081491083491129491137491149491159491167491171491201491213491219491251491261491273491279491297491299491327491329491333491339491341491353491357491371491377491417491423491429491461491483491489491497491501491503491527491531491537491539491581491591491593491611491627491633491639491651491653491669491677491707491719491731491737491747491773491783491789491797491819491833491837491851491857491867491873491899491923491951491969491977491983492007492013492017492029492047492053492059492061492067492077492083492103492113492227492251492253492257492281492293492299492319492377492389492397492403492409492413492421492431492463492467492487492491492511492523492551492563492587492601492617492619492629492631492641492647492659492671492673492707492719492721492731492757492761492763492769492781492799492839492853492871492883492893492901492911492967492979493001493013493021493027493043493049493067493093493109493111493121493123493127493133493139493147493159493169493177493193493201493211493217493219493231493243493249493277493279493291493301493313493333493351493369493393493397493399493403493433493447493457493463493481493523493531493541493567493573493579493583493607493621493627493643493657493693493709493711493721493729493733493747493777493793493807493811493813493817493853493859493873493877493897493919493931493937493939493967493973493979493993494023494029494041494051494069494077494083494093494101494107494129494141494147494167494191494213494237494251494257494267494269494281494287494317494327494341494353494359494369494381494383494387494407494413494441494443494471494497494519494521494539494561494563494567494587494591494609494617494621494639494647494651494671494677494687494693494699494713494719494723494731494737494743494749494759494761494783494789494803494843494849494873494899494903494917494927494933494939494959494987495017495037495041495043495067495071495109495113495119495133495139495149495151495161495181495199495211495221495241495269495277495289495301495307495323495337495343495347495359495361495371495377495389495401495413495421495433495437495449495457495461495491495511495527495557495559495563495569495571495587495589495611495613495617495619495629495637495647495667495679495701495707495713495749495751495757495769495773495787495791495797495799495821495827495829495851495877495893495899495923495931495947495953495959495967495973495983496007496019496039496051496063496073496079496123496127496163496187496193496211496229496231496259496283496289496291496297496303496313496333496339496343496381496399496427496439496453496459496471496477496481496487496493496499496511496549496579496583496609496631496669496681496687496703496711496733496747496763496789496813496817496841496849496871496877496889496891496897496901496913496919496949496963496997496999497011497017497041497047497051497069497093497111497113497117497137497141497153497171497177497197497239497257497261497269497279497281497291497297497303497309497323497339497351497389497411497417497423497449497461497473497479497491497501497507497509497521497537497551497557497561497579497587497597497603497633497659497663497671497677497689497701497711497719497729497737497741497771497773497801497813497831497839497851497867497869497873497899497929497957497963497969497977497989497993497999498013498053498061498073498089498101498103498119498143498163498167498181498209498227498257498259498271498301498331498343498361498367498391498397498401498403498409498439498461498467498469498493498497498521498523498527498551498557498577498583498599498611498613498643498647498653498679498689498691498733498739498749498761498767498779498781498787498791498803498833498857498859498881498907498923498931498937498947498961498973498977498989499021499027499033499039499063499067499099499117499127499129499133499139499141499151499157499159499181499183499189499211499229499253499267499277499283499309499321499327499349499361499363499391499397499403499423499439499459499481499483499493499507499519499523499549499559499571499591499601499607499621499633499637499649499661499663499669499673499679499687499691499693499711499717499729499739499747499781499787499801499819499853499879499883499897499903499927499943499957499969499973499979500009500029500041500057500069500083500107500111500113500119500153500167500173500177500179500197500209500231500233500237500239500249500257500287500299500317500321500333500341500363500369500389500393500413500417500431500443500459500471500473500483500501500509500519500527500567500579500587500603500629500671500677500693500699500713500719500723500729500741500777500791500807500809500831500839500861500873500881500887500891500909500911500921500923500933500947500953500957500977501001501013501019501029501031501037501043501077501089501103501121501131501133501139501157501173501187501191501197501203501209501217501223501229501233501257501271501287501299501317501341501343501367501383501401501409501419501427501451501463501493501503501511501563501577501593501601501617501623501637501659501691501701501703501707501719501731501769501779501803501817501821501827501829501841501863501889501911501931501947501953501967501971501997502001502013502039502043502057502063502079502081502087502093502121502133502141502171502181502217502237502247502259502261502277502301502321502339502393502409502421502429502441502451502487502499502501502507502517502543502549502553502591502597502613502631502633502643502651502669502687502699502703502717502729502769502771502781502787502807502819502829502841502847502861502883502919502921502937502961502973503003503017503039503053503077503123503131503137503147503159503197503207503213503227503231503233503249503267503287503297503303503317503339503351503359503369503381503383503389503407503413503423503431503441503453503483503501503543503549503551503563503593503599503609503611503621503623503647503653503663503707503717503743503753503771503777503779503791503803503819503821503827503851503857503869503879503911503927503929503939503947503959503963503969503983503989504001504011504017504047504061504073504103504121504139504143504149504151504157504181504187504197504209504221504247504269504289504299504307504311504323504337504349504353504359504377504379504389504403504457504461504473504479504521504523504527504547504563504593504599504607504617504619504631504661504667504671504677504683504727504767504787504797504799504817504821504851504853504857504871504877504893504901504929504937504943504947504953504967504983504989504991505027505031505033505049505051505061505067505073505091505097505111505117505123505129505139505157505159505181505187505201505213505231505237505277505279505283505301505313505319505321505327505339505357505367505369505399505409505411505429505447505459505469505481505493505501505511505513505523505537505559505573505601505607505613505619505633505639505643505657505663505669505691505693505709505711505727505759505763505777505781505811505819505823505867505871505877505907505919505927505949505961505969505979506047506071506083506101506113506119506131506147506171506173506183506201506213506251506263506269506281506291506327506329506333506339506347506351506357506381506393506417506423506449506459506461506479506491506501506507506531506533506537506551506563506573506591506593506599506609506629506647506663506683506687506689506699506729506731506743506773506783506791506797506809506837506843506861506873506887506893506899506903506911506929506941506963506983506993506999507029507049507071507077507079507103507109507113507119507137507139507149507151507163507193507197507217507289507301507313507317507329507347507349507359507361507371507383507401507421507431507461507491507497507499507503507523507557507571507589507593507599507607507631507641507667507673507691507697507713507719507743507757507779507781507797507803507809507821507827507839507883507901507907507917507919507937507953507961507971507979508009508019508021508033508037508073508087508091508097508103508129508159508171508187508213508223508229508237508243508259508271508273508297508301508327508331508349508363508367508373508393508433508439508451508471508477508489508499508513508517508531508549508559508567508577508579508583508619508621508637508643508661508693508709508727508771508789508799508811508817508841508847508867508901508903508909508913508919508931508943508951508957508961508969508973508987509023509027509053509063509071509087509101509123509137509147509149509203509221509227509239509263509281509287509293509297509317509329509359509363509389509393509413509417509429509441509449509477509513509521509543509549509557509563509569509573509581509591509603509623509633509647509653509659509681509687509689509693509699509723509731509737509741509767509783509797509801509833509837509843509863509867509879509909509911509921509939509947509959509963509989510007510031510047510049510061510067510073510077510079510089510101510121510127510137510157510179510199510203510217510227510233510241510247510253510271510287510299510311510319510331510361510379510383510401510403510449510451510457510463510481510529510551510553510569510581510583510589510611510613510617510619510677510683510691510707510709510751510767510773510793510803510817510823510827510847510889510907510919510931510941510943510989511001511013511019511033511039511057511061511087511109511111511123511151511153511163511169511171511177511193511201511211511213511223511237511243511261511279511289511297511327511333511337511351511361511387511391511409511417511439511447511453511457511463511477511487511507511519511523511541511549511559511573511579511583511591511603511627511631511633511669511691511703511711511723511757511787511793511801511811511831511843511859511867511873511891511897511909511933511939511961511963511991511997512009512011512021512047512059512093512101512137512147512167512207512249512251512269512287512311512321512333512353512389512419512429512443512467512497512503512507512521512531512537512543512569512573512579512581512591512593512597512609512621512641512657512663512671512683512711512713512717512741512747512761512767512779512797512803512819512821512843512849512891512899512903512917512921512927512929512959512977512989512999513001513013513017513031513041513047513053513059513067513083513101513103513109513131513137513157513167513169513173513203513239513257513269513277513283513307513311513313513319513341513347513353513367513371513397513407513419513427513431513439513473513479513481513509513511513529513533513593513631513641513649513673513679513683513691513697513719513727513731513739513749513761513767513769513781513829513839513841513871513881513899513917513923513937513943513977513991514001514009514013514021514049514051514057514061514079514081514093514103514117514123514127514147514177514187514201514219514229514243514247514249514271514277514289514309514313514333514343514357514361514379514399514417514429514433514453514499514513514519514523514529514531514543514561514571514621514637514639514643514649514651514669514681514711514733514739514741514747514751514757514769514783514793514819514823514831514841514847514853514859514867514873514889514903514933514939514949514967515041515087515089515111515143515149515153515173515191515227515231515233515237515279515293515311515323515351515357515369515371515377515381515401515429515477515507515519515539515563515579515587515597515611515621515639515651515653515663515677515681515687515693515701515737515741515761515771515773515777515783515803515813515839515843515857515861515873515887515917515923515929515941515951515969515993516017516023516049516053516077516091516127516151516157516161516163516169516179516193516199516209516223516227516233516247516251516253516277516283516293516319516323516349516359516361516371516377516391516407516421516431516433516437516449516457516469516493516499516517516521516539516541516563516587516589516599516611516617516619516623516643516653516673516679516689516701516709516713516721516727516757516793516811516821516829516839516847516871516877516883516907516911516931516947516949516959516973516977516979516991517003517043517061517067517073517079517081517087517091517129517151517169517177517183517189517207517211517217517229517241517243517249517261517267517277517289517303517337517343517367517373517381517393517399517403517411517417517457517459517469517471517481517487517499517501517507517511517513517547517549517553517571517577517589517597517603517609517613517619517637517639517711517717517721517729517733517739517747517817517823517831517861517873517877517901517919517927517931517949517967517981517991517999518017518047518057518059518083518099518101518113518123518129518131518137518153518159518171518179518191518207518209518233518237518239518249518261518291518299518311518327518341518387518389518411518417518429518431518447518467518471518473518509518521518533518543518579518587518597518611518621518657518689518699518717518729518737518741518743518747518759518761518767518779518801518803518807518809518813518831518863518867518893518911518933518953518981518983518989519011519031519037519067519083519089519091519097519107519119519121519131519151519161519193519217519227519229519247519257519269519283519287519301519307519349519353519359519371519373519383519391519413519427519433519457519487519499519509519521519523519527519539519551519553519577519581519587519611519619519643519647519667519683519691519703519713519733519737519769519787519793519797519803519817519863519881519889519907519917519919519923519931519943519947519971519989519997520019520021520031520043520063520067520073520103520111520123520129520151520193520213520241520279520291520297520307520309520313520339520349520357520361520363520369520379520381520393520409520411520423520427520433520447520451520529520547520549520567520571520589520607520609520621520631520633520649520679520691520699520703520717520721520747520759520763520787520813520837520841520853520867520889520913520921520943520957520963520967520969520981521009521021521023521039521041521047521051521063521107521119521137521153521161521167521173521177521179521201521231521243521251521267521281521299521309521317521329521357521359521363521369521377521393521399521401521429521447521471521483521491521497521503521519521527521533521537521539521551521557521567521581521603521641521657521659521669521671521693521707521723521743521749521753521767521777521789521791521809521813521819521831521861521869521879521881521887521897521903521923521929521981521993521999522017522037522047522059522061522073522079522083522113522127522157522161522167522191522199522211522227522229522233522239522251522259522281522283522289522317522323522337522371522373522383522391522409522413522439522449522469522479522497522517522521522523522541522553522569522601522623522637522659522661522673522677522679522689522703522707522719522737522749522757522761522763522787522811522827522829522839522853522857522871522881522883522887522919522943522947522959522961522989523007523021523031523049523093523097523109523129523169523177523207523213523219523261523297523307523333523349523351523357523387523403523417523427523433523459523463523487523489523493523511523519523541523543523553523571523573523577523597523603523631523637523639523657523667523669523673523681523717523729523741523759523763523771523777523793523801523829523847523867523877523903523907523927523937523949523969523987523997524047524053524057524063524071524081524087524099524113524119524123524149524171524189524197524201524203524219524221524231524243524257524261524269524287524309524341524347524351524353524369524387524389524411524413524429524453524497524507524509524519524521524591524593524599524633524669524681524683524701524707524731524743524789524801524803524827524831524857524863524869524873524893524899524921524933524939524941524947524957524959524963524969524971524981524983524999525001525013525017525029525043525101525127525137525143525157525163525167525191525193525199525209525221525241525247525253525257525299525313525353525359525361525373525377525379525391525397525409525431525433525439525457525461525467525491525493525517525529525533525541525571525583525593525599525607525641525649525671525677525697525709525713525719525727525731525739525769525773525781525809525817525839525869525871525887525893525913525923525937525947525949525953525961525979525983526027526037526049526051526063526067526069526073526087526117526121526139526157526159526189526193526199526213526223526231526249526271526283526289526291526297526307526367526373526381526387526391526397526423526429526441526453526459526483526499526501526511526531526543526571526573526583526601526619526627526633526637526649526651526657526667526679526681526703526709526717526733526739526741526759526763526777526781526829526831526837526853526859526871526909526913526931526937526943526951526957526963526993526997527053527057527063527069527071527081527099527123527129527143527159527161527173527179527203527207527209527237527251527273527281527291527327527333527347527353527377527381527393527399527407527411527419527441527447527453527489527507527533527557527563527581527591527599527603527623527627527633527671527699527701527729527741527749527753527789527803527809527819527843527851527869527881527897527909527921527929527941527981527983527987527993528001528013528041528043528053528091528097528107528127528131528137528163528167528191528197528217528223528247528263528289528299528313528317528329528373528383528391528401528403528413528419528433528469528487528491528509528511528527528559528611528623528629528631528659528667528673528679528691528707528709528719528763528779528791528799528811528821528823528833528863528877528881528883528911528929528947528967528971528973528991529003529007529027529033529037529043529049529051529097529103529117529121529127529129529153529157529181529183529213529229529237529241529259529271529273529301529307529313529327529343529349529357529381529393529411529421529423529471529489529513529517529519529531529547529577529579529603529619529637529649529657529673529681529687529691529693529709529723529741529747529751529807529811529813529819529829529847529871529927529933529939529957529961529973529979529981529987529999530017530021530027530041530051530063530087530093530129530137530143530177530183530197530203530209530227530237530249530251530261530267530279530293530297530303530329530333530339530353530359530389530393530401530429530443530447530501530507530513530527530531530533530539530549530567530597530599530603530609530641530653530659530669530693530701530711530713530731530741530743530753530767530773530797530807530833530837530843530851530857530861530869530897530911530947530969530977530983530989531017531023531043531071531079531101531103531121531133531143531163531169531173531197531203531229531239531253531263531281531287531299531331531337531343531347531353531359531383531457531481531497531521531547531551531569531571531581531589531611531613531623531631531637531667531673531689531701531731531793531799531821531823531827531833531841531847531857531863531871531877531901531911531919531977531983531989531997532001532009532027532033532061532069532093532099532141532153532159532163532183532187532193532199532241532249532261532267532277532283532307532313532327532331532333532349532373532379532391532403532417532421532439532447532451532453532489532501532523532529532531532537532547532561532601532603532607532619532621532633532639532663532669532687532691532709532733532739532751532757532771532781532783532789532801532811532823532849532853532867532907532919532949532951532981532993532999533003533009533011533033533051533053533063533077533089533111533129533149533167533177533189533191533213533219533227533237533249533257533261533263533297533303533317533321533327533353533363533371533389533399533413533447533453533459533509533543533549533573533581533593533633533641533671533693533711533713533719533723533737533747533777533801533809533821533831533837533857533879533887533893533909533921533927533959533963533969533971533989533993533999534007534013534019534029534043534047534049534059534073534077534091534101534113534137534167534173534199534203534211534229534241534253534283534301534307534311534323534329534341534367534371534403534407534431534439534473534491534511534529534553534571534577534581534601534607534617534629534631534637534647534649534659534661534671534697534707534739534799534811534827534839534841534851534857534883534889534913534923534931534943534949534971535013535019535033535037535061535099535103535123535133535151535159535169535181535193535207535219535229535237535243535273535303535319535333535349535351535361535387535391535399535481535487535489535499535511535523535529535547535571535573535589535607535609535627535637535663535669535673535679535697535709535727535741535751535757535771535783535793535811535849535859535861535879535919535937535939535943535957535967535973535991535999536017536023536051536057536059536069536087536099536101536111536141536147536149536189536191536203536213536219536227536233536243536267536273536279536281536287536293536311536323536353536357536377536399536407536423536441536443536447536449536453536461536467536479536491536509536513536531536533536561536563536593536609536621536633536651536671536677536687536699536717536719536729536743536749536771536773536777536779536791536801536803536839536849536857536867536869536891536909536917536923536929536933536947536953536971536989536999537001537007537011537023537029537037537041537067537071537079537091537127537133537143537157537169537181537191537197537221537233537241537269537281537287537307537331537343537347537373537379537401537403537413537497537527537547537569537583537587537599537611537637537661537673537679537703537709537739537743537749537769537773537781537787537793537811537841537847537853537877537883537899537913537919537941537991538001538019538049538051538073538079538093538117538121538123538127538147538151538157538159538163538199538201538247538249538259538267538283538297538301538303538309538331538333538357538367538397538399538411538423538457538471538481538487538511538513538519538523538529538553538561538567538579538589538597538621538649538651538697538709538711538721538723538739538751538763538771538777538789538799538801538817538823538829538841538871538877538921538927538931538939538943538987539003539009539039539047539089539093539101539107539111539113539129539141539153539159539167539171539207539219539233539237539261539267539269539293539303539309539311539321539323539339539347539351539389539401539447539449539479539501539503539507539509539533539573539621539629539633539639539641539653539663539677539687539711539713539723539729539743539761539783539797539837539839539843539849539863539881539897539899539921539947539993540041540061540079540101540119540121540139540149540157540167540173540179540181540187540203540217540233540251540269540271540283540301540307540343540347540349540367540373540377540383540389540391540433540437540461540469540509540511540517540539540541540557540559540577540587540599540611540613540619540629540677540679540689540691540697540703540713540751540769540773540779540781540803540809540823540851540863540871540877540901540907540961540989541001541007541027541049541061541087541097541129541133541141541153541181541193541201541217541231541237541249541267541271541283541301541309541339541349541361541363541369541381541391541417541439541447541469541483541507541511541523541529541531541537541543541547541549541571541577541579541589541613541631541657541661541669541693541699541711541721541727541759541763541771541777541781541799541817541831541837541859541889541901541927541951541967541987541991541993541999542021542023542027542053542063542071542081542083542093542111542117542119542123542131542141542149542153542167542183542189542197542207542219542237542251542261542263542281542293542299542323542371542401542441542447542461542467542483542489542497542519542533542537542539542551542557542567542579542587542599542603542683542687542693542713542719542723542747542761542771542783542791542797542821542831542837542873542891542911542921542923542933542939542947542951542981542987542999543017543019543029543061543097543113543131543139543143543149543157543161543163543187543203543217543223543227543233543241543253543259543281543287543289543299543307543311543313543341543349543353543359543379543383543407543427543463543497543503543509543539543551543553543593543601543607543611543617543637543659543661543671543679543689543703543707543713543769543773543787543791543793543797543811543827543841543853543857543859543871543877543883543887543889543901543911543929543967543971543997544001544007544009544013544021544031544097544099544109544123544129544133544139544171544177544183544199544223544259544273544277544279544367544373544399544403544429544451544471544477544487544501544513544517544543544549544601544613544627544631544651544667544699544717544721544723544727544757544759544771544781544793544807544813544837544861544877544879544883544889544897544903544919544927544937544961544963544979545023545029545033545057545063545087545089545093545117545131545141545143545161545189545203545213545231545239545257545267545291545329545371545387545429545437545443545449545473545477545483545497545521545527545533545543545549545551545579545599545609545617545621545641545647545651545663545711545723545731545747545749545759545773545789545791545827545843545863545873545893545899545911545917545929545933545939545947545959546001546017546019546031546047546053546067546071546097546101546103546109546137546149546151546173546179546197546211546233546239546241546253546263546283546289546317546323546341546349546353546361546367546373546391546461546467546479546509546523546547546569546583546587546599546613546617546619546631546643546661546671546677546683546691546709546719546731546739546781546841546859546863546869546881546893546919546937546943546947546961546967546977547007547021547037547061547087547093547097547103547121547133547139547171547223547229547237547241547249547271547273547291547301547321547357547361547363547369547373547387547397547399547411547441547453547471547483547487547493547499547501547513547529547537547559547567547577547583547601547609547619547627547639547643547661547663547681547709547727547741547747547753547763547769547787547817547819547823547831547849547853547871547889547901547909547951547957547999548003548039548059548069548083548089548099548117548123548143548153548189548201548213548221548227548239548243548263548291548309548323548347548351548363548371548393548399548407548417548423548441548453548459548461548489548501548503548519548521548533548543548557548567548579548591548623548629548657548671548677548687548693548707548719548749548753548761548771548783548791548827548831548833548837548843548851548861548869548893548897548903548909548927548953548957548963549001549011549013549019549023549037549071549089549091549097549121549139549149549161549163549167549169549193549203549221549229549247549257549259549281549313549319549323549331549379549391549403549421549431549443549449549481549503549509549511549517549533549547549551549553549569549587549589549607549623549641549643549649549667549683549691549701549707549713549719549733549737549739549749549751549767549817549833549839549863549877549883549911549937549943549949549977549979550007550009550027550049550061550063550073550111550117550127550129550139550163550169550177550181550189550211550213550241550267550279550283550289550309550337550351550369550379550427550439550441550447550457550469550471550489550513550519550531550541550553550577550607550609550621550631550637550651550657550661550663550679550691550703550717550721550733550757550763550789550801550811550813550831550841550843550859550861550903550909550937550939550951550961550969550973550993550997551003551017551027551039551059551063551069551093551099551107551113551129551143551179551197551207551219551231551233551269551281551297551311551321551339551347551363551381551387551407551423551443551461551483551489551503551519551539551543551549551557551569551581551587551597551651551653551659551671551689551693551713551717551723551729551731551743551753551767551773551801551809551813551843551849551861551909551911551917551927551933551951551959551963551981552001552011552029552031552047552053552059552089552091552103552107552113552127552137552179552193552217552239552241552259552263552271552283552301552317552341552353552379552397552401552403552469552473552481552491552493552511552523552527552553552581552583552589552611552649552659552677552703552707552709552731552749552751552757552787552791552793552809552821552833552841552847552859552883552887552899552913552917552971552983552991553013553037553043553051553057553067553073553093553097553099553103553123553139553141553153553171553181553193553207553211553229553249553253553277553279553309553351553363553369553411553417553433553439553447553457553463553471553481553507553513553517553529553543553549553561553573553583553589553591553601553607553627553643553649553667553681553687553699553703553727553733553747553757553759553769553789553811553837553849553867553873553897553901553919553921553933553961553963553981553991554003554011554017554051554077554087554089554117554123554129554137554167554171554179554189554207554209554233554237554263554269554293554299554303554317554347554377554383554417554419554431554447554453554467554503554527554531554569554573554597554611554627554633554639554641554663554669554677554699554707554711554731554747554753554759554767554779554789554791554797554803554821554833554837554839554843554849554887554891554893554899554923554927554951554959554969554977555029555041555043555053555073555077555083555091555097555109555119555143555167555209555221555251555253555257555277555287555293555301555307555337555349555361555383555391555419555421555439555461555487555491555521555523555557555589555593555637555661555671555677555683555691555697555707555739555743555761555767555823555827555829555853555857555871555931555941555953555967556007556021556027556037556043556051556067556069556093556103556123556159556177556181556211556219556229556243556253556261556267556271556273556279556289556313556321556327556331556343556351556373556399556403556441556459556477556483556487556513556519556537556559556573556579556583556601556607556609556613556627556639556651556679556687556691556693556697556709556723556727556741556753556763556769556781556789556793556799556811556817556819556823556841556849556859556861556867556883556891556931556939556943556957556967556981556987556999557017557021557027557033557041557057557059557069557087557093557153557159557197557201557261557269557273557281557303557309557321557329557339557369557371557377557423557443557449557461557483557489557519557521557533557537557551557567557573557591557611557633557639557663557671557693557717557729557731557741557743557747557759557761557779557789557801557803557831557857557861557863557891557899557903557927557981557987558007558017558029558053558067558083558091558109558113558121558139558149558167558179558197558203558209558223558241558251558253558287558289558307558319558343558401558413558421558427558431558457558469558473558479558491558497558499558521558529558533558539558541558563558583558587558599558611558629558643558661558683558703558721558731558757558769558781558787558791558793558827558829558863558869558881558893558913558931558937558947558973558979558997559001559049559051559067559081559093559099559123559133559157559177559183559201559211559213559217559219559231559243559259559277559297559313559319559343559357559367559369559397559421559451559459559469559483559511559513559523559529559541559547559549559561559571559577559583559591559597559631559633559639559649559667559673559679559687559703559709559739559747559777559781559799559807559813559831559841559849559859559877559883559901559907559913559939559967559973559991560017560023560029560039560047560081560083560089560093560107560113560117560123560137560149560159560171560173560179560191560207560213560221560227560233560237560239560243560249560281560293560297560299560311560317560341560353560393560411560437560447560459560471560477560479560489560491560501560503560531560543560551560561560597560617560621560639560641560653560669560683560689560701560719560737560753560761560767560771560783560797560803560827560837560863560869560873560887560891560893560897560929560939560941560969560977561019561047561053561059561061561079561083561091561097561101561103561109561161561173561181561191561199561229561251561277561307561313561343561347561359561367561373561377561389561409561419561439561461561521561529561551561553561559561599561607561667561703561713561733561761561767561787561797561809561829561839561907561917561923561931561943561947561961561973561983561997562007562019562021562043562091562103562129562147562169562181562193562201562231562259562271562273562283562291562297562301562307562313562333562337562349562351562357562361562399562403562409562417562421562427562439562459562477562493562501562517562519562537562577562579562589562591562607562613562621562631562633562651562663562669562673562691562693562699562703562711562721562739562753562759562763562781562789562813562831562841562871562897562901562909562931562943562949562963562967562973562979562987562997563009563011563021563039563041563047563051563077563081563099563113563117563119563131563149563153563183563197563219563249563263563287563327563351563357563359563377563401563411563413563417563419563447563449563467563489563501563503563543563551563561563587563593563599563623563657563663563723563743563747563777563809563813563821563831563837563851563869563881563887563897563929563933563947563971563987563999564013564017564041564049564059564061564089564097564103564127564133564149564163564173564191564197564227564229564233564251564257564269564271564299564301564307564313564323564353564359564367564371564373564391564401564407564409564419564437564449564457564463564467564491564497564523564533564593564607564617564643564653564667564671564679564701564703564709564713564761564779564793564797564827564871564881564899564917564919564923564937564959564973564979564983564989564997565013565039565049565057565069565109565111565127565163565171565177565183565189565207565237565241565247565259565261565273565283565289565303565319565333565337565343565361565379565381565387565391565393565427565429565441565451565463565469565483565489565507565511565517565519565549565553565559565567565571565583565589565597565603565613565637565651565661565667565723565727565769565771565787565793565813565849565867565889565891565907565909565919565921565937565973565979565997566011566023566047566057566077566089566101566107566131566149566161566173566179566183566201566213566227566231566233566273566311566323566347566387566393566413566417566429566431566437566441566443566453566521566537566539566543566549566551566557566563566567566617566633566639566653566659566677566681566693566701566707566717566719566723566737566759566767566791566821566833566851566857566879566911566939566947566963566971566977566987566999567011567013567031567053567059567067567097567101567107567121567143567179567181567187567209567257567263567277567319567323567367567377567383567389567401567407567439567449567451567467567487567493567499567527567529567533567569567601567607567631567649567653567659567661567667567673567689567719567737567751567761567767567779567793567811567829567841567857567863567871567877567881567883567899567937567943567947567949567961567979567991567997568019568027568033568049568069568091568097568109568133568151568153568163568171568177568187568189568193568201568207568231568237568241568273568279568289568303568349568363568367568387568391568433568439568441568453568471568481568493568523568541568549568577568609568619568627568643568657568669568679568691568699568709568723568751568783568787568807568823568831568853568877568891568903568907568913568921568963568979568987568991568999569003569011569021569047569053569057569071569077569081569083569111569117569137569141569159569161569189569197569201569209569213569237569243569249569251569263569267569269569321569323569369569417569419569423569431569447569461569479569497569507569533569573569579569581569599569603569609569617569623569659569663569671569683569711569713569717569729569731569747569759569771569773569797569809569813569819569831569839569843569851569861569869569887569893569897569903569927569939569957569983570001570013570029570041570043570047570049570071570077570079570083570091570107570109570113570131570139570161570173570181570191570217570221570233570253570329570359570373570379570389570391570403570407570413570419570421570461570463570467570487570491570497570499570509570511570527570529570539570547570553570569570587570601570613570637570643570649570659570667570671570677570683570697570719570733570737570743570781570821570827570839570841570851570853570859570881570887570901570919570937570949570959570961570967570991571001571019571031571037571049571069571093571099571111571133571147571157571163571199571201571211571223571229571231571261571267571279571303571321571331571339571369571381571397571399571409571433571453571471571477571531571541571579571583571589571601571603571633571657571673571679571699571709571717571721571741571751571759571777571783571789571799571801571811571841571847571853571861571867571871571873571877571903571933571939571969571973572023572027572041572051572053572059572063572069572087572093572107572137572161572177572179572183572207572233572239572251572269572281572303572311572321572323572329572333572357572387572399572417572419572423572437572449572461572471572479572491572497572519572521572549572567572573572581572587572597572599572609572629572633572639572651572653572657572659572683572687572699572707572711572749572777572791572801572807572813572821572827572833572843572867572879572881572903572909572927572933572939572941572963572969572993573007573031573047573101573107573109573119573143573161573163573179573197573247573253573263573277573289573299573317573329573341573343573371573379573383573409573437573451573457573473573479573481573487573493573497573509573511573523573527573557573569573571573637573647573673573679573691573719573737573739573757573761573763573787573791573809573817573829573847573851573863573871573883573887573899573901573929573941573953573967573973573977574003574031574033574051574061574081574099574109574127574157574159574163574169574181574183574201574219574261574279574283574289574297574307574309574363574367574373574393574423574429574433574439574477574489574493574501574507574529574543574547574597574619574621574627574631574643574657574667574687574699574703574711574723574727574733574741574789574799574801574813574817574859574907574913574933574939574949574963574967574969575009575027575033575053575063575077575087575119575123575129575131575137575153575173575177575203575213575219575231575243575249575251575257575261575303575317575359575369575371575401575417575429575431575441575473575479575489575503575513575551575557575573575579575581575591575593575611575623575647575651575669575677575689575693575699575711575717575723575747575753575777575791575821575837575849575857575863575867575893575903575921575923575941575957575959575963575987576001576013576019576029576031576041576049576089576101576119576131576151576161576167576179576193576203576211576217576221576223576227576287576293576299576313576319576341576377576379576391576421576427576431576439576461576469576473576493576509576523576529576533576539576551576553576577576581576613576617576637576647576649576659576671576677576683576689576701576703576721576727576731576739576743576749576757576769576787576791576881576883576889576899576943576949576967576977577007577009577033577043577063577067577069577081577097577111577123577147577151577153577169577177577193577219577249577259577271577279577307577327577331577333577349577351577363577387577397577399577427577453577457577463577471577483577513577517577523577529577531577537577547577559577573577589577601577613577627577637577639577667577721577739577751577757577781577799577807577817577831577849577867577873577879577897577901577909577919577931577937577939577957577979577981578021578029578041578047578063578077578093578117578131578167578183578191578203578209578213578251578267578297578299578309578311578317578327578353578363578371578399578401578407578419578441578453578467578477578483578489578497578503578509578533578537578563578573578581578587578597578603578609578621578647578659578687578689578693578701578719578729578741578777578779578789578803578819578821578827578839578843578857578861578881578917578923578957578959578971578999579011579017579023579053579079579083579107579113579119579133579179579197579199579239579251579259579263579277579281579283579287579311579331579353579379579407579409579427579433579451579473579497579499579503579517579521579529579533579539579541579563579569579571579583579587579611579613579629579637579641579643579653579673579701579707579713579721579737579757579763579773579779579809579829579851579869579877579881579883579893579907579947579949579961579967579973579983580001580031580033580079580081580093580133580163580169580183580187580201580213580219580231580259580291580301580303580331580339580343580357580361580373580379580381580409580417580471580477580487580513580529580549580553580561580577580607580627580631580633580639580663580673580687580691580693580711580717580733580747580757580759580763580787580793580807580813580837580843580859580871580889580891580901580913580919580927580939580969580981580997581029581041581047581069581071581089581099581101581137581143581149581171581173581177581183581197581201581227581237581239581261581263581293581303581311581323581333581341581351581353581369581377581393581407581411581429581443581447581459581473581491581521581527581549581551581557581573581597581599581617581639581657581663581683581687581699581701581729581731581743581753581767581773581797581809581821581843581857581863581869581873581891581909581921581941581947581953581981581983582011582013582017582031582037582067582083582119582137582139582157582161582167582173582181582203582209582221582223582227582247582251582299582317582319582371582391582409582419582427582433582451582457582469582499582509582511582541582551582563582587582601582623582643582649582677582689582691582719582721582727582731582737582761582763582767582773582781582793582809582821582851582853582859582887582899582931582937582949582961582971582973582983583007583013583019583021583031583069583087583127583139583147583153583169583171583181583189583207583213583229583237583249583267583273583279583291583301583337583339583351583367583391583397583403583409583417583421583447583459583469583481583493583501583511583519583523583537583543583577583603583613583619583621583631583651583657583669583673583697583727583733583753583769583777583783583789583801583841583853583859583861583873583879583903583909583937583969583981583991583997584011584027584033584053584057584063584081584099584141584153584167584183584203584249584261584279584281584303584347584357584359584377584387584393584399584411584417584429584447584471584473584509584531584557584561584587584593584599584603584609584621584627584659584663584677584693584699584707584713584719584723584737584767584777584789584791584809584849584863584869584873584879584897584911584917584923584951584963584971584981584993584999585019585023585031585037585041585043585049585061585071585073585077585107585113585119585131585149585163585199585217585251585269585271585283585289585313585317585337585341585367585383585391585413585437585443585461585467585493585503585517585547585551585569585577585581585587585593585601585619585643585653585671585677585691585721585727585733585737585743585749585757585779585791585799585839585841585847585853585857585863585877585881585883585889585899585911585913585917585919585953585989585997586009586037586051586057586067586073586087586111586121586123586129586139586147586153586189586213586237586273586277586291586301586309586319586349586361586363586367586387586403586429586433586457586459586463586471586493586499586501586541586543586567586571586577586589586601586603586609586627586631586633586667586679586693586711586723586741586769586787586793586801586811586813586819586837586841586849586871586897586903586909586919586921586933586939586951586961586973586979586981587017587021587033587051587053587057587063587087587101587107587117587123587131587137587143587149587173587179587189587201587219587263587267587269587281587287587297587303587341587371587381587387587413587417587429587437587441587459587467587473587497587513587519587527587533587539587549587551587563587579587599587603587617587621587623587633587659587669587677587687587693587711587731587737587747587749587753587771587773587789587813587827587833587849587863587887587891587897587927587933587947587959587969587971587987587989587999588011588019588037588043588061588073588079588083588097588113588121588131588151588167588169588173588191588199588229588239588241588257588277588293588311588347588359588361588383588389588397588403588433588437588463588481588493588503588509588517588521588529588569588571588619588631588641588647588649588667588673588683588703588733588737588743588767588773588779588811588827588839588871588877588881588893588911588937588941588947588949588953588977589021589027589049589063589109589111589123589139589159589163589181589187589189589207589213589219589231589241589243589273589289589291589297589327589331589349589357589387589409589439589451589453589471589481589493589507589529589531589579589583589591589601589607589609589639589643589681589711589717589751589753589759589763589783589793589807589811589829589847589859589861589873589877589903589921589933589993589997590021590027590033590041590071590077590099590119590123590129590131590137590141590153590171590201590207590243590251590263590267590269590279590309590321590323590327590357590363590377590383590389590399590407590431590437590489590537590543590567590573590593590599590609590627590641590647590657590659590669590713590717590719590741590753590771590797590809590813590819590833590839590867590899590921590923590929590959590963590983590987591023591053591061591067591079591089591091591113591127591131591137591161591163591181591193591233591259591271591287591289591301591317591319591341591377591391591403591407591421591431591443591457591469591499591509591523591553591559591581591599591601591611591623591649591653591659591673591691591709591739591743591749591751591757591779591791591827591841591847591863591881591887591893591901591937591959591973592019592027592049592057592061592073592087592099592121592129592133592139592157592199592217592219592223592237592261592289592303592307592309592321592337592343592351592357592367592369592387592391592393592429592451592453592463592469592483592489592507592517592531592547592561592577592589592597592601592609592621592639592643592649592661592663592681592693592723592727592741592747592759592763592793592843592849592853592861592873592877592897592903592919592931592939592967592973592987592993593003593029593041593051593059593071593081593083593111593119593141593143593149593171593179593183593207593209593213593227593231593233593251593261593273593291593293593297593321593323593353593381593387593399593401593407593429593447593449593473593479593491593497593501593507593513593519593531593539593573593587593597593603593627593629593633593641593647593651593689593707593711593767593777593783593839593851593863593869593899593903593933593951593969593977593987593993594023594037594047594091594103594107594119594137594151594157594161594163594179594193594203594211594227594241594271594281594283594287594299594311594313594329594359594367594379594397594401594403594421594427594449594457594467594469594499594511594521594523594533594551594563594569594571594577594617594637594641594653594667594679594697594709594721594739594749594751594773594793594821594823594827594829594857594889594899594911594917594929594931594953594959594961594977594989595003595037595039595043595057595069595073595081595087595093595097595117595123595129595139595141595157595159595181595183595201595207595229595247595253595261595267595271595277595291595303595313595319595333595339595351595363595373595379595381595411595451595453595481595513595519595523595547595549595571595577595579595613595627595687595703595709595711595717595733595741595801595807595817595843595873595877595927595939595943595949595951595957595961595963595967595981596009596021596027596047596053596059596069596081596083596093596117596119596143596147596159596179596209596227596231596243596251596257596261596273596279596291596293596317596341596363596369596399596419596423596461596489596503596507596537596569596573596579596587596593596599596611596623596633596653596663596669596671596693596707596737596741596749596767596779596789596803596821596831596839596851596857596861596863596879596899596917596927596929596933596941596963596977596983596987597031597049597053597059597073597127597131597133597137597169597209597221597239597253597263597269597271597301597307597349597353597361597367597383597391597403597407597409597419597433597437597451597473597497597521597523597539597551597559597577597581597589597593597599597613597637597643597659597671597673597677597679597689597697597757597761597767597769597781597803597823597827597833597853597859597869597889597899597901597923597929597967597997598007598049598051598057598079598093598099598123598127598141598151598159598163598187598189598193598219598229598261598303598307598333598363598369598379598387598399598421598427598439598447598457598463598487598489598501598537598541598571598613598643598649598651598657598669598681598687598691598711598721598727598729598777598783598789598799598817598841598853598867598877598883598891598903598931598933598963598967598973598981598987598999599003599009599021599023599069599087599117599143599147599149599153599191599213599231599243599251599273599281599303599309599321599341599353599359599371599383599387599399599407599413599419599429599477599479599491599513599519599537599551599561599591599597599603599611599623599629599657599663599681599693599699599701599713599719599741599759599779599783599803599831599843599857599869599891599899599927599933599939599941599959599983599993599999600011600043600053600071600073600091600101600109600167600169600203600217600221600233600239600241600247600269600283600289600293600307600311600317600319600337600359600361600367600371600401600403600407600421600433600449600451600463600469600487600517600529600557600569600577600601600623600631600641600659600673600689600697600701600703600727600751600791600823600827600833600841600857600877600881600883600889600893600931600947600949600959600961600973600979600983601021601031601037601039601043601061601067601079601093601127601147601187601189601193601201601207601219601231601241601247601259601267601283601291601297601309601313601319601333601339601357601379601397601411601423601439601451601457601487601507601541601543601589601591601607601631601651601669601687601697601717601747601751601759601763601771601801601807601813601819601823601831601849601873601883601889601897601903601943601949601961601969601981602029602033602039602047602057602081602083602087602093602099602111602137602141602143602153602179602197602201602221602227602233602257602267602269602279602297602309602311602317602321602333602341602351602377602383602401602411602431602453602461602477602479602489602501602513602521602543602551602593602597602603602621602627602639602647602677602687602689602711602713602717602729602743602753602759602773602779602801602821602831602839602867602873602887602891602909602929602947602951602971602977602983602999603011603013603023603047603077603091603101603103603131603133603149603173603191603203603209603217603227603257603283603311603319603349603389603391603401603431603443603457603467603487603503603521603523603529603541603553603557603563603569603607603613603623603641603667603679603689603719603731603739603749603761603769603781603791603793603817603821603833603847603851603853603859603881603893603899603901603907603913603917603919603923603931603937603947603949603989604001604007604013604031604057604063604069604073604171604189604223604237604243604249604259604277604291604309604313604319604339604343604349604361604369604379604397604411604427604433604441604477604481604517604529604547604559604579604589604603604609604613604619604649604651604661604697604699604711604727604729604733604753604759604781604787604801604811604819604823604829604837604859604861604867604883604907604931604939604949604957604973604997605009605021605023605039605051605069605071605113605117605123605147605167605173605177605191605221605233605237605239605249605257605261605309605323605329605333605347605369605393605401605411605413605443605471605477605497605503605509605531605533605543605551605573605593605597605599605603605609605617605629605639605641605687605707605719605779605789605809605837605849605861605867605873605879605887605893605909605921605933605947605953605977605987605993606017606029606031606037606041606049606059606077606079606083606091606113606121606131606173606181606223606241606247606251606299606301606311606313606323606341606379606383606413606433606443606449606493606497606503606521606527606539606559606569606581606587606589606607606643606649606653606659606673606721606731606733606737606743606757606791606811606829606833606839606847606857606863606899606913606919606943606959606961606967606971606997607001607003607007607037607043607049607063607067607081607091607093607097607109607127607129607147607151607153607157607163607181607199607213607219607249607253607261607301607303607307607309607319607331607337607339607349607357607363607417607421607423607471607493607517607531607549607573607583607619607627607667607669607681607697607703607721607723607727607741607769607813607819607823607837607843607861607883607889607909607921607931607933607939607951607961607967607991607993608011608029608033608087608089608099608117608123608129608131608147608161608177608191608207608213608269608273608297608299608303608339608347608357608359608369608371608383608389608393608401608411608423608429608431608459608471608483608497608519608521608527608581608591608593608609608611608633608653608659608669608677608693608701608737608743608749608759608767608789608819608831608843608851608857608863608873608887608897608899608903608941608947608953608977608987608989608999609043609047609067609071609079609101609107609113609143609149609163609173609179609199609209609221609227609233609241609253609269609277609283609289609307609313609337609359609361609373609379609391609397609403609407609421609437609443609461609487609503609509609517609527609533609541609571609589609593609599609601609607609613609617609619609641609673609683609701609709609743609751609757609779609781609803609809609821609859609877609887609907609911609913609923609929609979609989609991609997610031610063610081610123610157610163610187610193610199610217610219610229610243610271610279610289610301610327610331610339610391610409610417610429610439610447610457610469610501610523610541610543610553610559610567610579610583610619610633610639610651610661610667610681610699610703610721610733610739610741610763610781610783610787610801610817610823610829610837610843610847610849610867610877610879610891610913610919610921610933610957610969610993611011611027611033611057611069611071611081611101611111611113611131611137611147611189611207611213611257611263611279611293611297611323611333611389611393611411611419611441611449611453611459611467611483611497611531611543611549611551611557611561611587611603611621611641611657611671611693611707611729611753611791611801611803611827611833611837611839611873611879611887611903611921611927611939611951611953'\n    return primes[a:a + b]\n    pass", "entry_point": "solve", "task_id": "TACO_lite/620", "input_output_examples": [[["Appleby Arrows vs Montrose Magpies", "Montrose Magpies: Quaffle goal, Montrose Magpies: Quaffle goal, Appleby Arrows: Quaffle goal, Appleby Arrows: Quaffle goal, Montrose Magpies: Haverstacking foul, Appleby Arrows: Quaffle goal, Appleby Arrows: Quaffle goal, Appleby Arrows: Quaffle goal, Appleby Arrows: Quaffle goal, Montrose Magpies: Caught Snitch"]], [["Appleby Arrows: 60, Montrose Magpies: 140"]]]}
{"requirement": "def yellow_be_gone(s):\"\"\"\n## The Story\nGreen Lantern's long hours of study and practice with his ring have really paid off -- his skills, focus, and control have improved so much that now he can even use his ring to update and redesign his web site. Earlier today he was focusing his will and a beam from his ring upon the Justice League web server, while intensely brainstorming and visualizing in minute detail different looks and ideas for his web site, and when he finished and reloaded his home page, he was absolutely thrilled to see that among other things it now displayed\n\n~~~~\nIn brightest day, in blackest night,\nThere's nothing cooler than my site!\n~~~~\n\nin his favorite font in very large blinking green letters.\n\nThe problem is, Green Lantern's ring has no power over anything yellow, so if he's experimenting with his web site and accidentally changes some text or background color to yellow, he will no longer be able to make any changes to those parts of the content or presentation (because he doesn't actually know any HTML, CSS, programming languages, frameworks, etc.) until he gets a more knowledgable friend to edit the code for him.\n\n## Your Mission\nYou can help Green Lantern by writing a function that will replace any color property values that are too yellow with shades of green or blue-green. Presumably at a later time the two of you will be doing some testing to find out at exactly which RGB values yellow stops being yellow and starts being off-white, orange, brown, etc. as far as his ring is concerned, but here's the plan to get version 1.0 up and running as soon as possible:\n\nYour function will receive either an HTML color name or a six-digit hex color code. (You're not going to bother with other types of color codes just now because you don't think they will come up.) If the color is too yellow, your function needs to return a green or blue-green shade instead, but if it is not too yellow, it needs to return the original color name or hex color code unchanged.\n\n### HTML Color Names\n(If don't know what HTML color names are, take a look at this HTML colors names reference.)\n\nFor HMTL color names, you are going to start out trying a pretty strict definition of yellow, replacing any of the following colors as specified:\n\n~~~~\nGold => ForestGreen\nKhaki => LimeGreen\nLemonChiffon => PaleGreen\nLightGoldenRodYellow => SpringGreen\nLightYellow => MintCream\nPaleGoldenRod => LightGreen\nYellow => Lime\n~~~~\n\nHTML color names are case-insensitive, so your function will need to be able to identify the above yellow shades regardless of the cases used, but should output the green shades as capitalized above.\n\n### Hex Color Codes\n(If you don't know what six-digit hex color codes are, take a look at this Wikipedia description. Basically the six digits are made up of three two-digit numbers in base 16, known as hexidecimal or hex, from 00 to FF (equivalent to 255 in base 10, also known as decimal), with the first two-digit number specifying the color's red value, the second the green value, and the third blue.)\n\nWith six-digit color hex codes, you are going to start out going really overboard, interpreting as \"yellow\" any hex code where the red (R) value and the green (G) value are each greater than the blue (B) value. When you find one of these \"yellow\" hex codes, your function will take the three hex values and rearrange them that the largest goes to G, the middle goes to B, and the smallest to R. \n\nHex color codes are also case-insensitive, but your function should output them in the same case they were received in, just for consistency with whatever style is being used.\n\"\"\"", "inputs": [["lemonchiffon"], ["GOLD"], ["pAlEgOlDeNrOd"], ["BlueViolet"], ["#000000"], ["#b8860b"], ["#8FBC8F"], ["#C71585"]], "outputs": [["PaleGreen"], ["ForestGreen"], ["LightGreen"], ["BlueViolet"], ["#000000"], ["#0bb886"], ["#8FBC8F"], ["#C71585"]], "starter_code": "def yellow_be_gone(s):", "canonical_solution": "def yellow_be_gone(s):\n    d = {'gold': 'ForestGreen', 'khaki': 'LimeGreen', 'lemonchiffon': 'PaleGreen', 'lightgoldenrodyellow': 'SpringGreen', 'lightyellow': 'MintCream', 'palegoldenrod': 'LightGreen', 'yellow': 'Lime'}\n    if s[0] == '#':\n        R, G, B = (s[1:3], s[3:5], s[5:])\n        if B < G and B < R:\n            R, B, G = sorted([R, G, B])\n            s = '#' + R + G + B\n    return d.get(s.lower(), s)", "entry_point": "yellow_be_gone", "task_id": "TACO_lite/622", "input_output_examples": [[["*@o", 3], ["*@o", 6], ["1234", 6], ["123456789", 3]], [["  *\n @ o\n* @ o\n  |"], ["     *\n    @ o\n   * @ o\n  * @ o *\n @ o * @ o\n* @ o * @ o\n     |\n     |"], ["     1\n    2 3\n   4 1 2\n  3 4 1 2\n 3 4 1 2 3\n4 1 2 3 4 1\n     |\n     |"], ["  1\n 2 3\n4 5 6\n  |"]]]}
{"requirement": "def flatten(lst):\"\"\"\nWrite a function that flattens an `Array` of `Array` objects into a flat `Array`.  Your function must only do one level of flattening.\n\"\"\"", "inputs": [[[[[3], [4], [5]], [9], [9, 9], [8], [[1, 2, 3]]]], [[[[3], [4], [5]], [9], [9, 9], [8], [[1, 2, 3], [77777]]]], [[[[3], [4], [5]], [9], [9, 9], [8], [[1, 2, 3], [77777]], "a"]], [[[[3], [4], [5]], [9], [9, 9], [8], [[1, 2, 3], [77777]], [["a"]]]]], "outputs": [[[[3], [4], [5], 9, 9, 9, 8, [1, 2, 3]]], [[[3], [4], [5], 9, 9, 9, 8, [1, 2, 3], [77777]]], [[[3], [4], [5], 9, 9, 9, 8, [1, 2, 3], [77777], "a"]], [[[3], [4], [5], 9, 9, 9, 8, [1, 2, 3], [77777], ["a"]]]], "starter_code": "def flatten(lst):", "canonical_solution": "def flatten(lst):\n    r = []\n    for x in lst:\n        if type(x) is list:\n            r.extend(x)\n        else:\n            r.append(x)\n    return r", "entry_point": "flatten", "task_id": "TACO_lite/625", "input_output_examples": [[[["a", "a", "b", "b", "c", "a", "b", "c"]]], [[["a", "b", "c", "a", "b", "c"]]]]}
{"requirement": "def to_chinese_numeral(n):\"\"\"\nCreate a function that takes a Number as its argument and returns a Chinese numeral string. You don't need to validate the input argument, it will always be a Number in the range `[-99999.999, 99999.999]`, rounded to 8 decimal places.\n\nSimplified Chinese numerals have characters representing each number from 0 to 9 and additional numbers representing larger numbers like 10, 100, 1000, and 10000. \n\nMultiple-digit numbers are constructed by first the digit value (1 to 9) and then the place multiplier (such as 10, 100, 1000), starting with the most significant digit. A special case is made for 10 - 19 where the leading digit value (yī 一) is dropped. Note that this special case is only made for the actual values 10 - 19, not any larger values.\n\nTrailing zeros are omitted, but interior zeros are grouped together and indicated by a single 零 character without giving the place multiplier.\n\nDecimal numbers are constructed by first writing the whole number part, and then inserting a point (diǎn 点), followed by the decimal portion. The decimal portion is expressed using only the digits 0 to 9, without any positional characters and without grouping zeros.\n\nNegative numbers are the same as other numbers, but add a 负 (fù) before the number.\n\nFor more information, please see http://en.wikipedia.org/wiki/Chinese_numerals.\n\"\"\"", "inputs": [[0], [9], [99], [999], [9999], [99999], [-5], [-54], [-543], [-5432], [-54321], [0.5], [0.25], [0.125], [0.0625], [0.03125], [10], [14], [18], [20], [24], [50], [100], [110], [111], [-10], [-14], [-18], [-20], [-100], [-110], [-111], [1000], [10000], [10306], [10006], [10006.005], [-10306.005], [-10.000001], [99999.999], [-99999.999]], "outputs": [["零"], ["九"], ["九十九"], ["九百九十九"], ["九千九百九十九"], ["九万九千九百九十九"], ["负五"], ["负五十四"], ["负五百四十三"], ["负五千四百三十二"], ["负五万四千三百二十一"], ["零点五"], ["零点二五"], ["零点一二五"], ["零点零六二五"], ["零点零三一二五"], ["十"], ["十四"], ["十八"], ["二十"], ["二十四"], ["五十"], ["一百"], ["一百一十"], ["一百一十一"], ["负十"], ["负十四"], ["负十八"], ["负二十"], ["负一百"], ["负一百一十"], ["负一百一十一"], ["一千"], ["一万"], ["一万零三百零六"], ["一万零六"], ["一万零六点零零五"], ["负一万零三百零六点零零五"], ["负十点零零零零零一"], ["九万九千九百九十九点九九九"], ["负九万九千九百九十九点九九九"]], "starter_code": "def to_chinese_numeral(n):", "canonical_solution": "import re\nNEG, DOT, _, *DIGS = '负点 零一二三四五六七八九'\nPOWS = ' 十 百 千 万'.split(' ')\nNUMS = {str(i): c for i, c in enumerate(DIGS)}\nfor n in range(10):\n    NUMS[str(n + 10)] = POWS[1] + DIGS[n] * bool(n)\n\ndef to_chinese_numeral(n):\n    ss = str(abs(n)).split('.')\n    return NEG * (n < 0) + parse(ss[0]) + (len(ss) > 1 and decimals(ss[1]) or '')\n\ndef decimals(digs):\n    return DOT + ''.join((NUMS[d] for d in digs))\n\ndef parse(s):\n    if s in NUMS:\n        return NUMS[s]\n    s = ''.join(reversed([NUMS[d] + POWS[i] * (d != '0') for i, d in enumerate(reversed(s))]))\n    return re.sub(f'零+$|(?<=零)零+', '', s)", "entry_point": "to_chinese_numeral", "task_id": "TACO_lite/628", "input_output_examples": [[["ab3f", "ac"], ["aadf", "bce2"], ["1c0111001f010100061a024b53535009181c", "686974207468652062756c6c277320657965"]], [["07"], ["163d"], ["746865206b696420646f6e277420706c6179"]]]}
{"requirement": "def words_to_object(s):\"\"\"\nYou're given a string containing a sequence of words separated with whitespaces. Let's say it is a sequence of patterns: a name and a corresponding number - like this:\n\n```\n\"red 1 yellow 2 black 3 white 4\"\n```\n\nYou want to turn it into a different **string** of objects you plan to work with later on - like this:\n\n```\n\"[{name : 'red', id : '1'}, {name : 'yellow', id : '2'}, {name : 'black', id : '3'}, {name : 'white', id : '4'}]\"\n```\n\nDoing this manually is a pain. So you've decided to write a short function that would make the computer do the job for you. Keep in mind, the pattern isn't necessarily a word and a number. Consider anything separated by a whitespace, just don't forget: an array of objects with two elements: name and id.\n\nAs a result you'll have a string you may just copy-paste whenever you feel like defining a list of objects - now without the need to put in names, IDs, curly brackets, colon signs, screw up everything, fail searching for a typo and begin anew. This might come in handy with large lists.\n\"\"\"", "inputs": [["red 1 yellow 2 black 3 white 4"], ["1 red 2 white 3 violet 4 green"], ["1 1 2 2 3 3 4 4"], ["#@&fhds 123F3f 2vn2# 2%y6D @%fd3 @!#4fs W@R^g WE56h%"], [""]], "outputs": [["[{name : 'red', id : '1'}, {name : 'yellow', id : '2'}, {name : 'black', id : '3'}, {name : 'white', id : '4'}]"], ["[{name : '1', id : 'red'}, {name : '2', id : 'white'}, {name : '3', id : 'violet'}, {name : '4', id : 'green'}]"], ["[{name : '1', id : '1'}, {name : '2', id : '2'}, {name : '3', id : '3'}, {name : '4', id : '4'}]"], ["[{name : '#@&fhds', id : '123F3f'}, {name : '2vn2#', id : '2%y6D'}, {name : '@%fd3', id : '@!#4fs'}, {name : 'W@R^g', id : 'WE56h%'}]"], ["[]"]], "starter_code": "def words_to_object(s):", "canonical_solution": "import re\n\ndef words_to_object(s):\n    return '[' + re.sub('([^ ]+) ([^ ]+)', \"{name : '\\\\1', id : '\\\\2'},\", s).strip(',') + ']'", "entry_point": "words_to_object", "task_id": "TACO_lite/629", "input_output_examples": [[[1], [2], [5]], [["1.00"], ["1.25"], ["1.57"]]]}
{"requirement": "def solve(a, b):\"\"\"\nThe prime number sequence starts with: `2,3,5,7,11,13,17,19...`. Notice that `2` is in position `one`. \n\n`3` occupies position `two`, which is a prime-numbered position. Similarly, `5`, `11` and `17` also occupy prime-numbered positions. We shall call primes such as `3,5,11,17` dominant primes because they occupy prime-numbered positions in the prime number sequence. Let's call this `listA`. \n\nGiven a `range (a,b)`, what is the sum of dominant primes within that range? Note that  `a <= range <= b` and `b` will not exceed `500000`.\n\nGood luck!\n\nIf you like this Kata, you will enjoy:\n\n[Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e99fc70000e3)\n\n[Sum of prime-indexed elements](https://www.codewars.com/kata/59f38b033640ce9fc700015b)\n\n[Divisor harmony](https://www.codewars.com/kata/59bf97cd4f98a8b1cd00007e)\n\"\"\"", "inputs": [[0, 10], [2, 200], [200, 2000], [500, 10000], [1000, 100000], [2000, 200000], [3000, 400000], [4000, 500000]], "outputs": [[8], [1080], [48132], [847039], [52114889], [183035206], [650120994], [972664400]], "starter_code": "def solve(a, b):", "canonical_solution": "n = 500000\nsieve, PRIMES = ([0] * (n // 2 + 1), [0, 2])\nfor i in range(3, n + 1, 2):\n    if not sieve[i // 2]:\n        PRIMES.append(i)\n        for j in range(i ** 2, n + 1, i * 2):\n            sieve[j // 2] = 1\nDOMINANTS = []\nfor p in PRIMES:\n    if p >= len(PRIMES):\n        break\n    DOMINANTS.append(PRIMES[p])\n\ndef solve(a, b):\n    return sum((p for p in DOMINANTS if a <= p <= b))", "entry_point": "solve", "task_id": "TACO_lite/632", "input_output_examples": [[[1, 2, 5]], [["1, 3, 5, 7, 9"]]]}
{"requirement": "def f(n):\"\"\"\nWe have a set of consecutive numbers from ```1``` to ```n```.\nWe want to count all the subsets that do not contain consecutive numbers.\n\nMake a code that may give the amount of all these subsets for any integer       ```n >= 2       ```.\n\nFeatures of the random tests:\n```\nnumber of tests = 100 \n10 <= n <= 120\n```\n\"\"\"", "inputs": [[5], [3], [2], [20]], "outputs": [[12], [4], [2], [17710]], "starter_code": "def f(n):", "canonical_solution": "def f(n):\n    a, b = (0, 1)\n    for _ in range(n):\n        a, b = (b, a + b + 1)\n    return a", "entry_point": "f", "task_id": "TACO_lite/636", "input_output_examples": [[["aabbccdde"], ["wxyz"], ["testing"]], [["e"], ["w"], ["e"]]]}
{"requirement": "def largest_arrangement(numbers):\n\t\"\"\"\nCreate a function that takes a list of one or more non-negative integers, and arranges them such that they form the largest possible number.\n\"\"\"", "inputs": [[[50, 2, 1, 9]], [[3655, 89]], [[8]], [[12, 13, 89, 155, 8, 26, 0]], [[76, 4, 3, 81, 514, 6, 716]], [[817, 6879, 163, 348, 8, 22, 47]], [[411, 742, 89, 691, 284]], [[587, 625, 638, 898, 122]], [[797, 535, 210, 87]], [[5, 2, 1, 9, 50, 56]], [[197, 853, 819]], [[23044, 2, 7626, 914, 7800]], [[451, 850, 85, 283, 4, 734, 605, 499, 249]], [[304, 12, 206, 584, 78, 69, 864, 860]], [[8346, 991, 25, 4, 67]], [[298, 268, 58, 598, 702, 603, 597]], [[422, 995, 500, 202, 772, 230, 258, 144, 752]], [[618, 514, 863, 195, 965, 262]], [[141, 63, 51, 966, 520, 48, 82, 14, 397]], [[756, 688, 8, 657, 912]], [[70, 7, 81, 28, 336, 246, 817, 77, 4, 550]], [[150, 398, 919, 890, 447, 285]], [[783, 19, 88, 5, 7]], [[10, 327, 6, 70, 13, 83, 482, 77]], [[8, 6, 590, 70]], [[6, 73, 79, 356, 7]], [[64, 29, 5, 9, 982, 3]], [[3487, 103559, 243]], [[7, 78, 79, 72, 709, 7, 94]]], "outputs": [[95021], [893655], [8], [8982615513120], [8176716651443], [881768794734822163], [89742691411284], [898638625587122], [87797535210], [95655021], [853819197], [91478007626230442], [858507346054994514283249], [864860786958430420612], [991834667425], [70260359859758298268], [995772752500422258230202144], [965863618514262195], [9668263520514839714141], [9128756688657], [8181777770550433628246], [919890447398285150], [887837519], [83777064823271310], [8706590], [797736356], [9982645329], [3487243103559], [9479787772709]], "starter_code": "def largest_arrangement(numbers):\n\t", "canonical_solution": "from functools import cmp_to_key\ncmp = lambda a, b: int('%i%i' % (b, a)) - int('%i%i' % (a, b))\nlargest_arrangement = lambda n: int(''.join((str(i) for i in sorted(n, key=cmp_to_key(cmp)))))", "entry_point": "largest_arrangement", "task_id": "TACO_lite/637", "input_output_examples": [[[[200, 30, 18, 8, 64, 34]]], [[2]]]}
{"requirement": "def can_jump(arr):\"\"\"\nJump is a simple one-player game:\n\nYou are initially at the first cell of an array of cells containing non-negative integers;\n\nAt each step you can jump ahead in the array as far as the integer at the current cell, or any smaller number of cells.\nYou win if there is a path that allows you to jump from one cell to another, eventually jumping past the end of the array, otherwise you lose.\n\nNote: You can **not** jump from the last cell!\n\nYour task is to complete the function `canJump()`  that determines if a given game is winnable.\n\"\"\"", "inputs": [[[11, 6, 11, 0, 2, 1, 14, 3, 7, 6, 2, 1, 10, 6, 0, 0, 8, 10, 2, 12, 13, 11, 14, 6, 1, 4, 14, 3, 10, 4, 14, 2, 3, 10, 8, 13, 14, 8, 2, 13, 11, 14, 0, 1, 6, 2, 1, 6, 8, 2, 0, 12, 4, 9, 2, 6, 8, 14, 4, 14, 4, 10, 8, 7, 12, 11, 0, 3, 8, 0, 13, 9, 9, 11, 10, 13, 12, 1, 0, 10, 14, 6, 1, 11, 7, 8, 6, 2, 1, 3, 1, 1, 0, 3, 5, 11, 13, 8, 4, 9, 9, 7, 6, 2, 10, 13, 6, 12, 10, 2, 0, 3, 14, 6, 6, 7, 13, 12, 11, 5, 2, 0, 12, 2, 11, 8]], [[2, 0, 1, 5, 0, 0, 3, 0, 0, 3, 1, 0]], [[5]], [[2, 5]], [[5, 0, 0, 0]], [[1, 1]], [[3, 0, 2, 3]], [[4, 1, 2, 0, 1]]], "outputs": [[true], [true], [false], [true], [true], [false], [true], [false]], "starter_code": "def can_jump(arr):", "canonical_solution": "def can_jump(arr):\n    if arr[0] == 0 or len(arr) == 1:\n        return False\n    if arr[0] >= len(arr):\n        return True\n    for jump in range(1, arr[0] + 1):\n        if can_jump(arr[jump:]):\n            return True\n    return False", "entry_point": "can_jump", "task_id": "TACO_lite/638", "input_output_examples": [[[10], [20]], [[23], [78]]]}
{"requirement": "def hamming_distance(a, b):\"\"\"# Task\n The `hamming distance` between a pair of numbers is the number of binary bits that differ in their binary notation. \n \n# Input/Output\n\n\n - `[input]` integer `a`\n\n  First Number. `1 <= a <= 2^20`\n\n\n - `[input]` integer `b`\n\n  Second Number. `1 <= b <= 2^20`\n\n\n - `[output]` an integer\n\n  Hamming Distance\n\"\"\"", "inputs": [[25, 87], [256, 302], [543, 634], [34013, 702]], "outputs": [[4], [4], [4], [7]], "starter_code": "def hamming_distance(a, b):", "canonical_solution": "def hamming_distance(a, b):\n    return bin(a ^ b).count('1')", "entry_point": "hamming_distance", "task_id": "TACO_lite/642", "input_output_examples": [[[88], [86], [87], [89]], [["Leo finally won the oscar! Leo is happy"], ["Not even for Wolf of wallstreet?!"], ["When will you give Leo an Oscar?"], ["Leo got one already!"]]]}
{"requirement": "def moment_of_time_in_space(moment):\"\"\"# Task\n You are given a `moment` in time and space. What you must do is break it down into time and space, to determine if that moment is from the past, present or future.\n\n `Time` is the sum of characters that increase time (i.e. numbers in range ['1'..'9'].\n \n `Space` in the number of characters which do not increase time (i.e. all characters but those that increase time).\n \n The moment of time is determined as follows:\n```\nIf time is greater than space, than the moment is from the future.\nIf time is less than space, then the moment is from the past.\nOtherwise, it is the present moment.```\n\n You should return an array of three elements, two of which are false, and one is true. The true value should be at the `1st, 2nd or 3rd` place for `past, present and future` respectively.\n\n# Input/Output\n\n\n - `[input]` string `moment`\n\n  The moment of time and space that the input time came from.\n\n\n - `[output]` a boolean array\n\n  Array of three elements, two of which are false, and one is true. The true value should be at the 1st, 2nd or 3rd place for past, present and future respectively.\n\"\"\"", "inputs": [["12:30 am"], ["12:02 pm"], ["01:00 pm"], ["11:12 am"], ["05:20 pm"], ["04:20 am"]], "outputs": [[[false, false, true]], [[false, true, false]], [[true, false, false]], [[false, false, true]], [[false, false, true]], [[false, true, false]]], "starter_code": "def moment_of_time_in_space(moment):", "canonical_solution": "def moment_of_time_in_space(moment):\n    d = sum((int(c) if c in '123456789' else -1 for c in moment))\n    return [d < 0, d == 0, d > 0]", "entry_point": "moment_of_time_in_space", "task_id": "TACO_lite/643", "input_output_examples": [[[[1, 3, 4, 5], 7], [[4, 3, 4, 5], 4], [[45, -10, 4, 5, 4], 4]], [[null], [null], [45]]]}
{"requirement": "def tongues(code):\"\"\"\n### Tongues\n\nGandalf's writings have long been available for study, but no one has yet figured out what language they are written in. Recently, due to programming work by a hacker known only by the code name ROT13, it has been discovered that Gandalf used nothing but a simple letter substitution scheme, and further, that it is its own inverse|the same operation scrambles the message as unscrambles it. \n\nThis operation is performed by replacing vowels in the sequence `'a' 'i' 'y' 'e' 'o' 'u'` with the vowel three advanced, cyclicly, while preserving case (i.e., lower or upper). \n\nSimilarly, consonants are replaced from the sequence `'b' 'k' 'x' 'z' 'n' 'h' 'd' 'c' 'w' 'g' 'p' 'v' 'j' 'q' 't' 's' 'r' 'l' 'm' 'f'` by advancing ten letters.\n\nThe fascinating thing about this transformation is that the resulting language yields pronounceable words.  For this problem, you will write code to translate Gandalf's manuscripts into plain text.\n\nYour job is to write a function that decodes Gandalf's writings.\n\n### Input\n\nThe function will be passed a string for the function to decode.  Each string will contain up to 100 characters, representing some text written by Gandalf. All characters will be plain ASCII, in the range space (32) to tilde (126).\n\n### Output\n\nFor each string passed to the decode function return its translation.\n\"\"\"", "inputs": [["Ita dotf ni dyca nsaw ecc."], ["Tim oh nsa nowa gid ecc fiir wat ni liwa ni nsa eor ig nsaod liytndu."], ["Giydhlida etr hakat uaedh efi iyd gidagensadh pdiyfsn ytni nsoh"], ["litnotatn e tam tenoit."], ["Nsa zyolv pdimt gij xywbar ikad nsa cequ rifh."], ["Tywpadh (1234567890) etr bytlnyenoit, nsau hsiycr pins pa ytlsetfar!"], [" "], ["Nsoh oh tin Vcotfit pyn on liycr pa e roggadatn gidaoft cetfyefa."], ["0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm"], ["z"], [""], ["****************************************************************************************************"], ["q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1"]], "outputs": [["One ring to rule them all."], ["Now is the time for all good men to come to the aid of their country."], ["Fourscore and seven years ago our forefathers brought unto this"], ["continent a new nation."], ["The quick brown fox jumped over the lazy dogs."], ["Numbers (1234567890) and punctuation, they should both be unchanged!"], [" "], ["This is not Klingon but it could be a different foreign language."], ["0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"], ["eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"], ["wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww"], ["q"], [""], ["****************************************************************************************************"], ["z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1"]], "starter_code": "def tongues(code):", "canonical_solution": "def tongues(code):\n    AsT = ''\n    for i in code:\n        if i == 'i':\n            AsT = AsT + 'o'\n        elif i == 't':\n            AsT = AsT + 'n'\n        elif i == 'a':\n            AsT = AsT + 'e'\n        elif i == 'd':\n            AsT = AsT + 'r'\n        elif i == 'f':\n            AsT = AsT + 'g'\n        elif i == 'y':\n            AsT = AsT + 'u'\n        elif i == 'c':\n            AsT = AsT + 'l'\n        elif i == 's':\n            AsT = AsT + 'h'\n        elif i == 'w':\n            AsT = AsT + 'm'\n        elif i == 'v':\n            AsT = AsT + 'k'\n        elif i == 'q':\n            AsT = AsT + 'z'\n        elif i == 'p':\n            AsT = AsT + 'b'\n        elif i == 'j':\n            AsT = AsT + 'x'\n        elif i == 'o':\n            AsT = AsT + 'i'\n        elif i == 'n':\n            AsT = AsT + 't'\n        elif i == 'e':\n            AsT = AsT + 'a'\n        elif i == 'r':\n            AsT = AsT + 'd'\n        elif i == 'g':\n            AsT = AsT + 'f'\n        elif i == 'u':\n            AsT = AsT + 'y'\n        elif i == 'l':\n            AsT = AsT + 'c'\n        elif i == 'h':\n            AsT = AsT + 's'\n        elif i == 'm':\n            AsT = AsT + 'w'\n        elif i == 'k':\n            AsT = AsT + 'v'\n        elif i == 'z':\n            AsT = AsT + 'q'\n        elif i == 'b':\n            AsT = AsT + 'p'\n        elif i == 'x':\n            AsT = AsT + 'j'\n        elif i == 'I':\n            AsT = AsT + 'O'\n        elif i == 'T':\n            AsT = AsT + 'N'\n        elif i == 'A':\n            AsT = AsT + 'E'\n        elif i == 'D':\n            AsT = AsT + 'R'\n        elif i == 'F':\n            AsT = AsT + 'G'\n        elif i == 'Y':\n            AsT = AsT + 'U'\n        elif i == 'C':\n            AsT = AsT + 'L'\n        elif i == 'S':\n            AsT = AsT + 'H'\n        elif i == 'W':\n            AsT = AsT + 'M'\n        elif i == 'V':\n            AsT = AsT + 'K'\n        elif i == 'Q':\n            AsT = AsT + 'Z'\n        elif i == 'P':\n            AsT = AsT + 'B'\n        elif i == 'J':\n            AsT = AsT + 'X'\n        elif i == 'O':\n            AsT = AsT + 'I'\n        elif i == 'N':\n            AsT = AsT + 'T'\n        elif i == 'E':\n            AsT = AsT + 'A'\n        elif i == 'R':\n            AsT = AsT + 'D'\n        elif i == 'G':\n            AsT = AsT + 'F'\n        elif i == 'U':\n            AsT = AsT + 'Y'\n        elif i == 'L':\n            AsT = AsT + 'C'\n        elif i == 'H':\n            AsT = AsT + 'S'\n        elif i == 'M':\n            AsT = AsT + 'W'\n        elif i == 'K':\n            AsT = AsT + 'V'\n        elif i == 'Z':\n            AsT = AsT + 'Q'\n        elif i == 'B':\n            AsT = AsT + 'P'\n        elif i == 'X':\n            AsT = AsT + 'J'\n        else:\n            AsT = AsT + i\n    return AsT", "entry_point": "tongues", "task_id": "TACO_lite/645", "input_output_examples": [[[4, "a"]], [["aaaa"]]]}
{"requirement": "def cypher(s):\"\"\"\n## Number encrypting: cypher\n## Part I of Number encrypting Katas\n***\n\n## Introduction\nBack then when the internet was coming up, most search functionalities simply looked for keywords in text to show relevant documents. Hackers weren't very keen on having their information displayed on websites, bulletin boards, newsgroups or any other place, so they started to replace certain letters in words. It started out with simple vowel substitutions like a 4 instead of an A, or a 3 instead of an E. This meant that topics like cracking or hacking remained undetected.\n\nHere we will use a reduced version of the *Leet Speak alphabet*, but you can find more information [here](http://www.gamehouse.com/blog/leet-speak-cheat-sheet/) or at [Wikipedia](https://en.wikipedia.org/wiki/Leet).\n\n## Task\nYou will receive a string composed by English words, `string`. You will have to return a cyphered version of that string.\n\nThe numbers corresponding to each letter are represented at the table below. Notice that different letters can share the same number. In those cases, one letter will be upper case and the other one lower case.\n\n\n  .cell {\n    border: 1px solid white;\n    text-align: center;\n    width: 7%;\n  }\n  \n  .title {\n    border: 1px solid white;\n    border-bottom: 1px solid white;\n    text-align: center;\n    min-width: 11em;\n  }\n  \n  .no-border {border: none}\n  \n  table {\n    margin-bottom: 10px\n  }\n\n\n\n  \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    0\n  \n  \n    Upper case\n    I\n    R\n    E\n    A\n    S\n    G\n    T\n    B\n    \n    O\n  \n  \n    Lower case\n    l\n    z\n    e\n    a\n    s\n    b\n    t\n    \n    g\n    o\n  \n  \n\n\n\nAny character that is not at the table, does not change when cyphered.\n\n## Part II\nIf you liked this Kata, you can find the [part II: *Number encrypting: decypher*](https://www.codewars.com/kata/number-encrypting-decypher), where your goal is to decypher the strings.\n\"\"\"", "inputs": [["Hello World"], ["I am your father"], ["I do not know what else I can test. Be cool. Good luck"], ["IlRzEeAaSsGbTtBgOo"], [""]], "outputs": [["H3110 W0r1d"], ["1 4m y0ur f47h3r"], ["1 d0 n07 kn0w wh47 3153 1 c4n 7357. 83 c001. 600d 1uck"], ["112233445566778900"], [""]], "starter_code": "def cypher(s):", "canonical_solution": "def cypher(s):\n    return s.translate(str.maketrans('IREASGTBlzeasbtgoO', '123456781234567900'))", "entry_point": "cypher", "task_id": "TACO_lite/649", "input_output_examples": [[[5, [[2, 2], [1, 2], [5, 5]]], [7, [[0, 7]]]], [[0, 3, 4], []]]}
{"requirement": "def f(n):\"\"\"Mutual Recursion allows us to take the fun of regular recursion (where a function calls itself until a terminating condition) and apply it to multiple functions calling each other! \n\nLet's use the Hofstadter Female and Male sequences to demonstrate this technique. You'll want to create two functions `F` and `M` such that the following equations are true: \n\n```\nF(0) = 1\nM(0) = 0\nF(n) = n - M(F(n - 1))\nM(n) = n - F(M(n - 1))\n```\n\nDon't worry about negative numbers, `n` will always be greater than or equal to zero.\n\n~~~if:php,csharp\nYou *do* have to worry about performance though, mutual recursion uses up a lot of stack space (and is highly inefficient) so you may have to find a way to make your solution consume less stack space (and time).  Good luck :)\n~~~\n\nHofstadter Wikipedia Reference http://en.wikipedia.org/wiki/Hofstadter_sequence#Hofstadter_Female_and_Male_sequences\n\"\"\"", "inputs": [[0], [5], [10], [15], [25]], "outputs": [[1], [3], [6], [9], [16]], "starter_code": "def f(n):", "canonical_solution": "def f(n):\n    return n - m(f(n - 1)) if n else 1\n\ndef m(n):\n    return n - f(m(n - 1)) if n else 0", "entry_point": "f", "task_id": "TACO_lite/652", "input_output_examples": [[["hlo", "el"], ["h3lo", "el4"], ["", ""]], [["hello"], ["hello"], [""]]]}
{"requirement": "def value_at(poly, x):\"\"\"\nThe Binomial Form of a polynomial has many uses, just as the standard form does.  For comparison, if p(x) is in Binomial Form and q(x) is in standard form, we might write\n\np(x) := a0 \\* xC0 + a1 \\* xC1 + a2 \\* xC2 + ... + aN \\* xCN\n\nq(x) := b0 + b1 \\* x + b2 \\* x^(2) + ... + bN \\* x^(N)\n\nBoth forms have tricks for evaluating them, but tricks should not be necessary.  The most important thing to keep in mind is that aCb can be defined for non-integer values of a; in particular,\n\n```\naCb := a * (a-1) * (a-2) * ... * (a-b+1) / b!   // for any value a and integer values b\n    := a! / ((a-b)!b!)                          // for integer values a,b\n```\n\nThe inputs to your function are an array which specifies a polynomial in Binomial Form, ordered by highest-degree-first, and also a number to evaluate the polynomial at.\n\nMore information can be found by reading about [Binomial Coefficients](https://en.wikipedia.org/wiki/Binomial_coefficient) or about [Finite Differences](https://en.wikipedia.org/wiki/Finite_difference).\n\nNote that while a solution should be able to handle non-integer inputs and get a correct result, any solution should make use of rounding to two significant digits (as the official solution does) since high precision for non-integers is not the point here.\n\"\"\"", "inputs": [[[1, 2, 7], 3], [[1, 2, 7, 0, 5], 2], [[1, 1, 1, 1, 7, 0, 5], 2], [[1, 2, 7, 0, 5], 0.6], [[1, 2, 7, 0, 5], 0]], "outputs": [[16], [12], [12], [4.24], [5.0]], "starter_code": "def value_at(poly, x):", "canonical_solution": "from functools import reduce\nfrom math import factorial\n\ndef value_at(poly, x):\n    return round(sum((n * aCb(x, i) for i, n in enumerate(poly[::-1]))), 2)\n\ndef aCb(a, b):\n    return reduce(lambda x, y: x * y, (a - i for i in range(b)), 1) / factorial(b)", "entry_point": "value_at", "task_id": "TACO_lite/654", "input_output_examples": [[[[1, 2, 3, 1, 3, 3]], [[1, 1, 2, 2, 3, 3, 3]], [[26, 23, 24, 17, 23, 24, 23, 26]], [[1, 2, 3]], [[1]]], [[1, 1], [1, 1, 2, 2], [26, 24, 24, 26], [], []]]}
{"requirement": "def pattern(n):\"\"\"\n###Task:\n\nYou have to write a function **pattern** which creates the following Pattern(See Examples) upto n(parameter) number of rows.\n\n####Rules/Note:\n* If the Argument is 0 or a Negative Integer then it should return \"\" i.e. empty string.\n* All the lines in the pattern have same length i.e equal to the number of characters in the last line.\n* Range of n is (-∞,100]\n\n###Amazing Fact: \n\n\n```Hint: Use \\n in string to jump to next line```\n\"\"\"", "inputs": [[7], [1], [4], [0], [-25]], "outputs": [["      1      \n     121     \n    12321    \n   1234321   \n  123454321  \n 12345654321 \n1234567654321"], ["1"], ["   1   \n  121  \n 12321 \n1234321"], [""], [""]], "starter_code": "def pattern(n):", "canonical_solution": "def pattern(n):\n    output = []\n    for i in range(1, n + 1):\n        wing = ' ' * (n - i) + ''.join((str(d % 10) for d in range(1, i)))\n        output.append(wing + str(i % 10) + wing[::-1])\n    return '\\n'.join(output)", "entry_point": "pattern", "task_id": "TACO_lite/656", "input_output_examples": [[[10], [21], [1]], [[1], [1.75], [0.1]]]}
{"requirement": "def segment_cover(A, L):\"\"\"# Task\n Given some points(array `A`) on the same line, determine the minimum number of line segments with length `L` needed to cover all of the given points. A point is covered if it is located inside some segment or on its bounds.\n\n# Input/Output\n\n\n - `[input]` integer array A\n\n    Array of point coordinates on the line (all points are different).\n\n    Constraints:\n\n    `1 ≤ A.length ≤ 50,`\n\n    `-5000 ≤ A[i] ≤ 5000.`\n\n\n - `[input]` integer `L`\n\n    Segment length, a positive integer.\n\n    Constraints: `1 ≤ L ≤ 100.`\n\n\n - `[output]` an integer\n \n   The minimum number of line segments that can cover all of the given points.\n\"\"\"", "inputs": [[[1, 3, 4, 5, 8], 3], [[-7, -2, 0, -1, -6, 7, 3, 4], 4], [[1, 5, 2, 4, 3], 1], [[1, 10, 100, 1000], 1]], "outputs": [[2], [3], [3], [4]], "starter_code": "def segment_cover(A, L):", "canonical_solution": "def segment_cover(A, L):\n    n = 1\n    s = min(A)\n    for i in sorted(A):\n        if s + L < i:\n            s = i\n            n += 1\n    return n", "entry_point": "segment_cover", "task_id": "TACO_lite/659", "input_output_examples": [[[440]], [["A"]]]}
{"requirement": "def divide(weight):\"\"\"\n# It's too hot, and they can't even…\n\nOne hot summer day Pete and his friend Billy decided to buy watermelons. They chose the biggest crate. They rushed home, dying of thirst, and decided to divide their loot, however they faced a hard problem.\n\nPete and Billy are great fans of even numbers, that's why they want to divide the number of watermelons in such a way that each of the two parts consists of an even number of watermelons. However, it is not obligatory that the parts are equal. \n\nThe boys are extremely tired and want to start their meal as soon as possible, that's why you should help them and find out, whether they can divide the fruits in the way they want. For sure, each of them should get a part of positive weight.\n\n# Task\nGiven an integral number of watermelons `w` (`1 ≤ w ≤ 100`; `1 ≤ w` in Haskell), check whether Pete and Billy can divide the melons so that each of them gets an even amount.\n\"\"\"", "inputs": [[4], [2], [5], [88], [100], [67], [90], [10], [99], [32]], "outputs": [[true], [false], [false], [true], [true], [false], [true], [true], [false], [true]], "starter_code": "def divide(weight):", "canonical_solution": "def divide(weight):\n    return weight > 2 and weight % 2 == 0", "entry_point": "divide", "task_id": "TACO_lite/670", "input_output_examples": [[["012345"], ["012"]], [["504132"], ["201"]]]}
{"requirement": "def poly_add(p1, p2):\"\"\"\n## Nova polynomial add\n\nThis kata is from a series on polynomial handling. ( [#1](http://www.codewars.com/kata/nova-polynomial-1-add-1) [#2](http://www.codewars.com/kata/570eb07e127ad107270005fe) [#3](http://www.codewars.com/kata/5714041e8807940ff3001140 ) [#4](http://www.codewars.com/kata/571a2e2df24bdfd4e20001f5) )\n\nConsider a polynomial in a list where each element in the list element corresponds to a factor. The factor order is the position in the list. The first element is the zero order factor (the constant).\n\n`p = [a0, a1, a2, a3]` signifies the polynomial `a0 + a1x + a2x^2 + a3*x^3`\n\nIn this kata add two polynomials:\n\"\"\"", "inputs": [[[1], [1]], [[1, 2], [1]], [[1, 2, 3, 4], [4, 3, 2, 1]], [[], []], [[1, 2, 3, 4, 5, 6], []], [[], [1, 2, 3, 4, 5, 6]]], "outputs": [[[2]], [[2, 2]], [[5, 5, 5, 5]], [[]], [[1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5, 6]]], "starter_code": "def poly_add(p1, p2):", "canonical_solution": "def poly_add(p1, p2):\n    if p1 == []:\n        return p2\n    if p2 == []:\n        return p1\n    return [p1[0] + p2[0]] + poly_add(p1[1:], p2[1:])", "entry_point": "poly_add", "task_id": "TACO_lite/672", "input_output_examples": [[[-1], [0], [3], [4], [25], [26]], [[false], [true], [false], [true], [true], [false]]]}
{"requirement": "def sort_by_value_and_index(arr):\"\"\"# Sort an array by value and index\n\nYour task is to sort an array of integer numbers by the product of the value and the index of the positions.\n\nFor sorting the index starts at 1, NOT at 0!\nThe sorting has to be ascending.\nThe array will never be null and will always contain numbers.\n\nHave fun coding it and please don't forget to vote and rank this kata! :-) \n\nI have also created other katas. Take a look if you enjoyed this kata!\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5]], [[23, 2, 3, 4, 5]], [[26, 2, 3, 4, 5]], [[9, 5, 1, 4, 3]]], "outputs": [[[1, 2, 3, 4, 5]], [[2, 3, 4, 23, 5]], [[2, 3, 4, 5, 26]], [[1, 9, 5, 3, 4]]], "starter_code": "def sort_by_value_and_index(arr):", "canonical_solution": "def sort_by_value_and_index(arr):\n    return [y[1] for y in sorted(enumerate(arr), key=lambda x: (x[0] + 1) * x[1])]", "entry_point": "sort_by_value_and_index", "task_id": "TACO_lite/674", "input_output_examples": [[[[10, 14, 2, 23, 19]], [[99, 2, 2, 23, 19]]], [[42], [122]]]}
{"requirement": "def pattern(n, x=1, y=1, *args):\"\"\"< PREVIOUS KATA\nNEXT KATA >\n\n## Task:\n\nYou have to write a function `pattern` which returns the following Pattern(See Examples) upto desired number of rows. \n\n* Note:```Returning``` the pattern is not the same as ```Printing``` the pattern.\n\n### Parameters:\n    \n    pattern(        n        ,        x        ,        y        );\n                    ^                 ^                 ^   \n                    |                 |                 |\n             Term upto which   Number of times   Number of times\n              Basic Pattern     Basic Pattern     Basic Pattern\n                should be         should be         should be\n                 created          repeated           repeated\n                                horizontally        vertically\n    \n* Note: `Basic Pattern` means what we created in Complete The Pattern #12\n\n## Rules/Note:\n\n* The pattern should be created using only unit digits.\n* If `n < 1` then it should return \"\" i.e. empty string.\n* If `x <= 1` then the basic pattern should not be repeated horizontally.\n* If `y <= 1` then the basic pattern should not be repeated vertically.\n* `The length of each line is same`, and is equal to the length of longest line in the pattern.\n* Range of Parameters (for the sake of CW Compiler) :\n  + `n ∈ (-∞,25]`\n  + `x ∈ (-∞,10]`\n  + `y ∈ (-∞,10]`\n* If only two arguments are passed then the function `pattern` should run as if `y <= 1`.\n* If only one argument is passed then the function `pattern` should run as if `x <= 1` & `y <= 1`.\n* The function `pattern` should work when extra arguments are passed, by ignoring the extra arguments.\n\"\"\"", "inputs": [[4, 2, 3], [3, -29, 4], [5, -28, 0], [7, 2], [10, -2999], [5], [4, 2, 3, 5, 7, -8], [-3, -5, 0], [-11, 1, 3], [-25, 5, -9], [-25, -11, 9], [-3, -5], [-11, 3], [-9999999], [-25, 5, -9, 55, -8, -7, 8], [0, 1, 2], [0, -1, 0], [0, -1, 2], [0, 1, -2], [0, 1], [0, -1], [0], [0, -5, 8, -7, 10]], "outputs": [["1     1     1\n 2   2 2   2 \n  3 3   3 3  \n   4     4   \n  3 3   3 3  \n 2   2 2   2 \n1     1     1\n 2   2 2   2 \n  3 3   3 3  \n   4     4   \n  3 3   3 3  \n 2   2 2   2 \n1     1     1\n 2   2 2   2 \n  3 3   3 3  \n   4     4   \n  3 3   3 3  \n 2   2 2   2 \n1     1     1"], ["1   1\n 2 2 \n  3  \n 2 2 \n1   1\n 2 2 \n  3  \n 2 2 \n1   1\n 2 2 \n  3  \n 2 2 \n1   1\n 2 2 \n  3  \n 2 2 \n1   1"], ["1       1\n 2     2 \n  3   3  \n   4 4   \n    5    \n   4 4   \n  3   3  \n 2     2 \n1       1"], ["1           1           1\n 2         2 2         2 \n  3       3   3       3  \n   4     4     4     4   \n    5   5       5   5    \n     6 6         6 6     \n      7           7      \n     6 6         6 6     \n    5   5       5   5    \n   4     4     4     4   \n  3       3   3       3  \n 2         2 2         2 \n1           1           1"], ["1                 1\n 2               2 \n  3             3  \n   4           4   \n    5         5    \n     6       6     \n      7     7      \n       8   8       \n        9 9        \n         0         \n        9 9        \n       8   8       \n      7     7      \n     6       6     \n    5         5    \n   4           4   \n  3             3  \n 2               2 \n1                 1"], ["1       1\n 2     2 \n  3   3  \n   4 4   \n    5    \n   4 4   \n  3   3  \n 2     2 \n1       1"], ["1     1     1\n 2   2 2   2 \n  3 3   3 3  \n   4     4   \n  3 3   3 3  \n 2   2 2   2 \n1     1     1\n 2   2 2   2 \n  3 3   3 3  \n   4     4   \n  3 3   3 3  \n 2   2 2   2 \n1     1     1\n 2   2 2   2 \n  3 3   3 3  \n   4     4   \n  3 3   3 3  \n 2   2 2   2 \n1     1     1"], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""]], "starter_code": "def pattern(n, x=1, y=1, *args):", "canonical_solution": "def pattern(n, x=1, y=1, *args):\n    if n < 1:\n        return ''\n    result = []\n    for i in range(1, n + 1):\n        line = ' ' * (i - 1) + str(i % 10) + ' ' * (n - i)\n        result.append(line + line[::-1][1:] + (line[1:] + line[::-1][1:]) * (x - 1))\n    return '\\n'.join(result + result[::-1][1:] + (result[1:] + result[::-1][1:]) * (y - 1))", "entry_point": "pattern", "task_id": "TACO_lite/683", "input_output_examples": [[["a", "P"], ["k", "A"], ["S", "A"]], [["P"], ["k"], [-1]]]}
{"requirement": "def count_consonants(text):\"\"\"\nComplete the function that counts the number of unique consonants in a string (made up of printable ascii characters).\n\nConsonants are letters used in English other than `\"a\", \"e\", \"i\", \"o\", \"u\"`. We will count `\"y\"` as a consonant.\n\nRemember, your function needs to return the number of unique consonants - disregarding duplicates. Similarly, the function should also disregard duplicate consonants of differing cases.\n\"\"\"", "inputs": [["sillystring"], ["aeiou"], ["abcdefghijklmnopqrstuvwxyz"], ["Count my unique consonants!!"]], "outputs": [[7], [0], [21], [7]], "starter_code": "def count_consonants(text):", "canonical_solution": "CONSONANTS = set('bcdfghjklmnpqrstvwxyz')\n\ndef count_consonants(text):\n    return len(CONSONANTS.intersection(text.lower()))", "entry_point": "count_consonants", "task_id": "TACO_lite/687", "input_output_examples": [[[1], [6], [14]], [["hue"], ["huehuehuehuehuehue"], ["huehuehuehuehuehuehuehuehuehuehuehuehuehue"]]]}
{"requirement": "def soundex(name):\"\"\"\n# A History Lesson\n\nSoundex is an interesting phonetic algorithm developed nearly 100 years ago for indexing names as they are pronounced in English. The goal is for homophones to be encoded to the same representation so that they can be matched despite minor differences in spelling.\n\nReference: https://en.wikipedia.org/wiki/Soundex\n\n\n\n# Preface\n\nI first read about Soundex over 30 years ago. At the time it seemed to me almost  like  A.I. that you could just type in somebody's name the way it sounded and there was still a pretty good chance it could match the correct person record. That was about the same year as the first \"Terminator\" movie so it was easy for me to put 2 and 2 together and conclude that Arnie must have had some kind of futuristic Soundex chip in his titanium skull helping him to locate ```Serah Coner```... or was it ```Sarh Connor```... or maybe ```Sayra Cunnarr```...\n\n:-)\n\n\n\n# Task\n\nIn this Kata you will encode strings using a Soundex variation called \"American Soundex\" using the following (case insensitive) steps:\n\n* Save the first letter. Remove all occurrences of ```h``` and ```w``` except first letter.\n* Replace all consonants (include the first letter) with digits as follows:\n * ```b```, ```f```, ```p```, ```v``` = 1\n * ```c```, ```g```, ```j```, ```k```, ```q```, ```s```, ```x```, ```z``` = 2\n * ```d```, ```t``` = 3\n * ```l``` = 4\n * ```m```, ```n``` = 5\n * ```r``` = 6\n* Replace all adjacent same digits with one digit.\n* Remove all occurrences of ```a```, ```e```, ```i```, ```o```, ```u```, ```y``` except first letter.\n* If first symbol is a digit replace it with letter saved on step 1.\n* Append 3 zeros if result contains less than 3 digits. Remove all except first letter and 3 digits after it\n\n## Input\n\nA space separated string of one or more names.\n\n## Output\n\nSpace separated string of equivalent Soundex codes (the first character of each code must be uppercase).\n\"\"\"", "inputs": [["Sarah Connor"], ["Sara Conar"], ["Serah Coner"], ["Sarh Connor"], ["Sayra Cunnarr"], ["Tim"], ["Joe"], ["Bob"], ["Robert"], ["Rupert"], ["Rubin"], ["Ashcraft"], ["Ashcroft"], ["Tymczak"], ["Pfister"], ["zxqurlwbx"], ["uryrtkzp"]], "outputs": [["S600 C560"], ["S600 C560"], ["S600 C560"], ["S600 C560"], ["S600 C560"], ["T500"], ["J000"], ["B100"], ["R163"], ["R163"], ["R150"], ["A261"], ["A261"], ["T522"], ["P236"], ["Z641"], ["U663"]], "starter_code": "def soundex(name):", "canonical_solution": "import re\nREPLACMENTS = ['BFPV', 'CGJKQSXZ', 'DT', 'L', 'MN', 'R']\nER1, ER2 = ('HW', 'AEIOUY')\nTABLE_ERASE1 = str.maketrans('', '', ER1)\nTABLE_NUMS = str.maketrans(''.join(REPLACMENTS), ''.join((str(n) * len(elt) for n, elt in enumerate(REPLACMENTS, 1))))\nTABLE_ERASE2 = str.maketrans('', '', ER2)\n\ndef formatSoundex(w):\n    s = w[0] * (w[0] in ER1 + ER2) + re.sub('(\\\\d)\\\\1*', '\\\\1', w.translate(TABLE_ERASE1).translate(TABLE_NUMS)).translate(TABLE_ERASE2)\n    return ((w[0] if s[0].isdigit() else s[0]) + s[1:] + '000')[:4]\n\ndef soundex(name):\n    return ' '.join((formatSoundex(w.upper()) for w in name.split(' ')))", "entry_point": "soundex", "task_id": "TACO_lite/688", "input_output_examples": [[[348597], [35231]], [[7, 9, 5, 8, 4, 3], [1, 3, 2, 5, 3]]]}
{"requirement": "def are_equally_strong(your_left, your_right, friends_left, friends_right):\"\"\"# Task\n Call two arms equally strong if the heaviest weights they each are able to lift are equal.\n\n Call two people equally strong if their strongest arms are equally strong (the strongest arm can be both the right and the left), and so are their weakest arms.\n\n Given your and your friend's arms' lifting capabilities find out if you two are equally strong.\n\n# Input/Output\n\n\n - `[input]` integer `yourLeft`\n\n    A non-negative integer representing the heaviest weight you can lift with your left arm.\n    \n\n - `[input]` integer `yourRight`\n\n    A non-negative integer representing the heaviest weight you can lift with your right arm.\n\n\n - `[input]` integer `friendsLeft`\n\n    A non-negative integer representing the heaviest weight your friend can lift with his or her left arm.\n\n\n - `[input]` integer `friendsRight`\n\n    A non-negative integer representing the heaviest weight your friend can lift with his or her right arm.\n\n\n - `[output]` a boolean value\n\"\"\"", "inputs": [[10, 15, 15, 10], [15, 10, 15, 10], [10, 10, 10, 10], [15, 10, 15, 9], [10, 5, 5, 10], [1, 10, 10, 0], [10, 5, 11, 4]], "outputs": [[true], [true], [true], [false], [true], [false], [false]], "starter_code": "def are_equally_strong(your_left, your_right, friends_left, friends_right):", "canonical_solution": "def are_equally_strong(your_left, your_right, friends_left, friends_right):\n    return sorted([your_left, your_right]) == sorted([friends_left, friends_right])", "entry_point": "are_equally_strong", "task_id": "TACO_lite/689", "input_output_examples": [[[[5, 3, 6, 7, 9]]], [[4]]]}
{"requirement": "def lose_weight(gender, weight, duration):\"\"\"###BACKGROUND:\nJacob recently decided to get healthy and lose some weight. He did a lot of reading and research and after focusing on steady exercise and a healthy diet for several months, was able to shed over 50 pounds! Now he wants to share his success, and has decided to tell his friends and family how much weight they could expect to lose if they used the same plan he followed.\n\nLots of people are really excited about Jacob's program and they want to know how much weight they would lose if they followed his plan. Unfortunately, he's really bad at math, so he's turned to you to help write a program that will calculate the expected weight loss for a particular person, given their weight and how long they think they want to continue the plan.\n\n###TECHNICAL DETAILS:\nJacob's weight loss protocol, if followed closely, yields loss according to a simple formulae, depending on gender. Men can expect to lose 1.5% of their current body weight each week they stay on plan. Women can expect to lose 1.2%. (Children are advised to eat whatever they want, and make sure to play outside as much as they can!)\n\n###TASK:\nWrite a function that takes as input:\n```\n- The person's gender ('M' or 'F');\n- Their current weight (in pounds);\n- How long they want to stay true to the protocol (in weeks);\n```\nand then returns the expected weight at the end of the program.\n\n###NOTES:\nWeights (both input and output) should be decimals, rounded to the nearest tenth.\nDuration (input) should be a whole number (integer). If it is not, the function should round to the nearest whole number.\nWhen doing input parameter validity checks, evaluate them in order or your code will not pass final tests.\n\"\"\"", "inputs": [["K", 200, 10], ["M", 0, 10], ["M", -5, 10], ["F", 160, 0], ["F", 160, -10], [",", 0, 1100], ["??", -10, -10], ["llama", 1, -10], ["F", -461.9, 0.0], ["M", 250, 5], ["F", 190, 8], ["M", 405, 12], ["F", 130, 7]], "outputs": [["Invalid gender"], ["Invalid weight"], ["Invalid weight"], ["Invalid duration"], ["Invalid duration"], ["Invalid gender"], ["Invalid gender"], ["Invalid gender"], ["Invalid weight"], [231.8], [172.5], [337.8], [119.5]], "starter_code": "def lose_weight(gender, weight, duration):", "canonical_solution": "def lose_weight(gender, weight, duration):\n    if not gender in ['M', 'F']:\n        return 'Invalid gender'\n    if weight <= 0:\n        return 'Invalid weight'\n    if duration <= 0:\n        return 'Invalid duration'\n    nl = 0.985 if gender == 'M' else 0.988\n    for i in range(duration):\n        weight *= nl\n    return round(weight, 1)", "entry_point": "lose_weight", "task_id": "TACO_lite/692", "input_output_examples": [[[[1, 2]], [[1, 2, 3]]], [[[], [2], [1], [1, 2]], [[], [3], [2], [2, 3], [1], [1, 3], [1, 2], [1, 2, 3]]]]}
{"requirement": "def colorful(number):\"\"\"## Problem\n\nDetermine whether a positive integer number is **colorful** or not.\n\n`263` is a colorful number because `[2, 6, 3, 2*6, 6*3, 2*6*3]` are all different; whereas `236` is not colorful, because `[2, 3, 6, 2*3, 3*6, 2*3*6]` have `6` twice.\n\nSo take all consecutive subsets of digits, take their product and ensure all the products are different.\n\"\"\"", "inputs": [[5], [23], [263], [235789], [50], [13], [236], [2357893]], "outputs": [[true], [true], [true], [true], [false], [false], [false], [false]], "starter_code": "def colorful(number):", "canonical_solution": "def colorful(number):\n    base_result = []\n    for x in str(number):\n        base_result.append(int(x))\n    for y in range(len(base_result) - 1):\n        temp = base_result[y] * base_result[y + 1]\n        base_result.append(temp)\n    return len(set(base_result)) == len(base_result)", "entry_point": "colorful", "task_id": "TACO_lite/693", "input_output_examples": [[[2], [5], [170]], [[true], [false], [true]]]}
{"requirement": "def pawn_move_tracker(moves):\"\"\"\nA chess board is normally played with 16 pawns and 16 other pieces, for this kata a variant will be played with only the pawns.  All other pieces will not be on the board.  \nFor information on how pawns move, refer [here](http://www.chesscorner.com/tutorial/basic/pawn/pawn.htm)\n  \n  \nWrite a function that can turn a list of pawn moves into a visual representation of the resulting board.  \nA chess move will be represented by a string,\n```\n\"c3\"\n```\nThis move represents a pawn moving to `c3`.  If it was white to move, the move would represent a pawn from `c2` moving to `c3`.  If it was black to move, a pawn would move from `c4` to `c3`, because black moves in the other direction.  \nThe first move in the list and every other move will be for white's pieces.\n  \nThe letter represents the column, while the number represents the row of the square where the piece is moving  \n    \nCaptures are represented differently from normal moves:\n\n```\n\"bxc3\"\n```\nrepresents a pawn on the column represented by 'b' (the second column) capturing a pawn on `c3`.\n\nFor the sake of this kata a chess board will be represented by a list like this one:  \n```\n[[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],\n [\"p\",\"p\",\"p\",\"p\",\"p\",\"p\",\"p\",\"p\"],\n [\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],\n [\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],\n [\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],\n [\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],\n [\"P\",\"P\",\"P\",\"P\",\"P\",\"P\",\"P\",\"P\"],\n [\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\n```\nWhite pawns are represented by capital `'P'` while black pawns are lowercase `'p'`.  \n  \nIf an invalid move (a move is added that no pawn could perform, a capture where there is no piece, a move to a square where there is already a piece, etc.) is found in the list of moves, return '(move) is invalid'.\n\nThe list passed to `pawn_move_tracker / PawnMoveTracker.movePawns` will always be a list of strings in the form (regex pattern): `[a-h][1-8]` or `[a-h]x[a-h][1-8]`.  \n\nNotes:\n\n* In the case of a capture, the first lowercase letter will always be adjacent to the second in the alphabet, a move like `axc5` will never be passed.\n* A pawn can move two spaces on its first move\n* There are no cases with the 'en-passant' rule.\n\"\"\"", "inputs": [[[]], [["e3", "e6", "d3", "g6"]], [["d3", "e5", "d4", "f5"]], [["d3", "e5", "d4", "f5", "dxe5", "f4"]], [["d4", "f6", "d5", "f6", "dxe5", "f4"]], [["d4", "a5", "d5", "f6", "dxe7", "f4"]], [["a4", "a5", "b4", "b5", "c4", "b4"]], [["h3", "h5", "h4", "g5", "hxg5", "h4"]], [["e5"]], [["e4", "d5", "dxe4"]], [["a3", "h6", "a4", "h5", "a5", "h4", "a6", "h3", "axb7", "hxg2"]], [["e4"]], [["d5"]]], "outputs": [[[[".", ".", ".", ".", ".", ".", ".", "."], ["p", "p", "p", "p", "p", "p", "p", "p"], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], ["P", "P", "P", "P", "P", "P", "P", "P"], [".", ".", ".", ".", ".", ".", ".", "."]]], [[[".", ".", ".", ".", ".", ".", ".", "."], ["p", "p", "p", "p", ".", "p", ".", "p"], [".", ".", ".", ".", "p", ".", "p", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", "P", "P", ".", ".", "."], ["P", "P", "P", ".", ".", "P", "P", "P"], [".", ".", ".", ".", ".", ".", ".", "."]]], [[[".", ".", ".", ".", ".", ".", ".", "."], ["p", "p", "p", "p", ".", ".", "p", "p"], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", "p", "p", ".", "."], [".", ".", ".", "P", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], ["P", "P", "P", ".", "P", "P", "P", "P"], [".", ".", ".", ".", ".", ".", ".", "."]]], [[[".", ".", ".", ".", ".", ".", ".", "."], ["p", "p", "p", "p", ".", ".", "p", "p"], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", "P", ".", ".", "."], [".", ".", ".", ".", ".", "p", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], ["P", "P", "P", ".", "P", "P", "P", "P"], [".", ".", ".", ".", ".", ".", ".", "."]]], ["f6 is invalid"], ["dxe7 is invalid"], ["b4 is invalid"], [[[".", ".", ".", ".", ".", ".", ".", "."], ["p", "p", "p", "p", "p", "p", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", "P", "."], [".", ".", ".", ".", ".", ".", ".", "p"], [".", ".", ".", ".", ".", ".", ".", "."], ["P", "P", "P", "P", "P", "P", "P", "."], [".", ".", ".", ".", ".", ".", ".", "."]]], ["e5 is invalid"], ["dxe4 is invalid"], [[[".", ".", ".", ".", ".", ".", ".", "."], ["p", "P", "p", "p", "p", "p", "p", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", "P", "P", "P", "P", "P", "p", "P"], [".", ".", ".", ".", ".", ".", ".", "."]]], [[[".", ".", ".", ".", ".", ".", ".", "."], ["p", "p", "p", "p", "p", "p", "p", "p"], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", "P", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], ["P", "P", "P", "P", ".", "P", "P", "P"], [".", ".", ".", ".", ".", ".", ".", "."]]], ["d5 is invalid"]], "starter_code": "def pawn_move_tracker(moves):", "canonical_solution": "LETTERS = 'abcdefgh'\nNUMBERS = '87654321'\nW, B = WB = 'Pp'\nEMPTY, CAPTURE = '.x'\nWHITEHOME = '12'\nBLACKHOME = '87'\nJUMP = '54'\n\ndef pawn_move_tracker(moves):\n    board = {letter + number: B if number == BLACKHOME[1] else W if number == WHITEHOME[1] else EMPTY for letter in LETTERS for number in NUMBERS}\n    whitemove = True\n    for move in moves:\n        target = move[-2:]\n        mover = move[0] + str(int(move[-1]) + 1 - whitemove * 2)\n        if move[-1] in JUMP[whitemove] and board[mover] == EMPTY:\n            mover = move[0] + str(int(move[-1]) + 2 - whitemove * 4)\n        if move[-1] in (BLACKHOME, WHITEHOME)[whitemove] or board[target] != (EMPTY, WB[whitemove])[move[1] == CAPTURE] or board[mover] != WB[not whitemove]:\n            return '{} is invalid'.format(move)\n        whitemove = not whitemove\n        board[mover] = EMPTY\n        board[target] = WB[whitemove]\n    return [[board[letter + number] for letter in LETTERS] for number in NUMBERS]", "entry_point": "pawn_move_tracker", "task_id": "TACO_lite/695", "input_output_examples": [[[1], [2], [-1]], [[false], [true], [false]]]}
{"requirement": "def tidynumber(n):\"\"\"# Definition\n\nA **_Tidy number_**  *is a number whose*  **_digits are in non-decreasing order_**.\n___\n# Task\n\n**_Given_** a number, **_Find if it is Tidy or not_** . \n____\n\n# Warm-up (Highly recommended)\n\n# [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n___\n\n# Notes \n\n\n* **_Number_** *passed is always*  **_Positive_** .\n\n* **_Return_** *the result as* a **_Boolean_** \n\n~~~if:prolog\n* Since prolog doesn't have booleans,  return value should be 1 for (True) or 0 for (false)\n~~~\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[12], [102], [9672], [2789], [2335]], "outputs": [[true], [false], [false], [true], [true]], "starter_code": "def tidynumber(n):", "canonical_solution": "def tidynumber(n):\n    s = list(str(n))\n    return s == sorted(s)", "entry_point": "tidynumber", "task_id": "TACO_lite/697", "input_output_examples": [[[1], [6], [12], [3]], [["          1 1"], ["                          1 1\n                      1 2 2 1  \n                  1 2 3 3 2 1\n              1 2 3 4 4 3 2 1\n          1 2 3 4 5 5 4 3 2 1\n      1 2 3 4 5 6 6 5 4 3 2 1"], ["                                                  1 1\n                                              1 2 2 1\n                                          1 2 3 3 2 1\n                                      1 2 3 4 4 3 2 1\n                                  1 2 3 4 5 5 4 3 2 1\n                              1 2 3 4 5 6 6 5 4 3 2 1\n                          1 2 3 4 5 6 7 7 6 5 4 3 2 1\n                      1 2 3 4 5 6 7 8 8 7 6 5 4 3 2 1\n                  1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1\n              1 2 3 4 5 6 7 8 9 0 0 9 8 7 6 5 4 3 2 1\n          1 2 3 4 5 6 7 8 9 0 1 1 0 9 8 7 6 5 4 3 2 1\n      1 2 3 4 5 6 7 8 9 0 1 2 2 1 0 9 8 7 6 5 4 3 2 1"], ["        1 1\n    1 2 2 1\n1 2 3 3 2 1"]]]}
{"requirement": "def goldbach_partitions(n):\"\"\"German mathematician Christian Goldbach (1690-1764) [conjectured](https://en.wikipedia.org/wiki/Goldbach%27s_conjecture) that every even number greater than 2 can be represented by the sum of two prime numbers.\n\nYour job is to make the function return a list containing all unique possible representations of `n` in an increasing order if `n` is an even integer; if `n` is odd, return an empty list. Hence, the first addend must always be less than or equal to the second to avoid duplicates.\n\nConstraints : `2 < n < 32000` and `n` is even\n\"\"\"", "inputs": [[15], [393], [31133], [4], [100], [594], [1500]], "outputs": [[[]], [[]], [[]], [["2+2"]], [["3+97", "11+89", "17+83", "29+71", "41+59", "47+53"]], [["7+587", "17+577", "23+571", "31+563", "37+557", "47+547", "53+541", "71+523", "73+521", "103+491", "107+487", "127+467", "131+463", "137+457", "151+443", "163+431", "173+421", "193+401", "197+397", "211+383", "227+367", "241+353", "257+337", "263+331", "277+317", "281+313", "283+311"]], [["7+1493", "11+1489", "13+1487", "17+1483", "19+1481", "29+1471", "41+1459", "47+1453", "53+1447", "61+1439", "67+1433", "71+1429", "73+1427", "101+1399", "127+1373", "139+1361", "173+1327", "179+1321", "181+1319", "193+1307", "197+1303", "199+1301", "211+1289", "223+1277", "241+1259", "251+1249", "263+1237", "269+1231", "271+1229", "277+1223", "283+1217", "307+1193", "313+1187", "337+1163", "347+1153", "349+1151", "383+1117", "397+1103", "409+1091", "431+1069", "439+1061", "449+1051", "461+1039", "467+1033", "479+1021", "487+1013", "491+1009", "503+997", "509+991", "523+977", "547+953", "563+937", "571+929", "593+907", "613+887", "617+883", "619+881", "641+859", "643+857", "647+853", "661+839", "673+827", "677+823", "691+809", "727+773", "739+761", "743+757"]]], "starter_code": "def goldbach_partitions(n):", "canonical_solution": "import math\n\ndef goldbach_partitions(n):\n\n    def is_prime(x):\n        for i in range(2, int(math.sqrt(x)) + 1):\n            if x % i == 0:\n                return False\n        return True\n    if n % 2:\n        return []\n    ret = []\n    for first in range(2, n // 2 + 1):\n        if is_prime(first):\n            second = n - first\n            if is_prime(second):\n                ret.append('%d+%d' % (first, second))\n    return ret", "entry_point": "goldbach_partitions", "task_id": "TACO_lite/700", "input_output_examples": [[["a1"]], [[["b3", "c2"]]]]}
{"requirement": "def survivor(a):\"\"\"\nStory:\nIn the realm of numbers, the apocalypse has arrived. Hordes of zombie numbers have infiltrated and are ready to turn everything into undead. The properties of zombies are truly apocalyptic: they reproduce themselves unlimitedly and freely interact with each other. Anyone who equals them is doomed. Out of an infinite number of natural numbers, only a few remain. This world needs a hero who leads remaining numbers in hope for survival: The highest number to lead those who still remain.\n\nBriefing:\nThere is a list of positive natural numbers. Find the largest number that cannot be represented as the sum of this numbers, given that each number can be added unlimited times. Return this number, either 0 if there are no such numbers, or -1 if there are an infinite number of them.\n\nTest specs:\nRandom cases will input up to 10 numbers with up to 1000 value\n\nSpecial thanks:\nThanks to Voile-sama, mathsisfun-sama, and Avanta-sama for heavy assistance. And to everyone who tried and beaten the kata ^_^\n\"\"\"", "inputs": [[[7, 11]], [[1, 7, 15]], [[2, 10]], [[687, 829, 998]], [[]], [[1]]], "outputs": [[59], [0], [-1], [45664], [-1], [0]], "starter_code": "def survivor(a):", "canonical_solution": "from functools import reduce\nfrom math import gcd\n\ndef survivor(a):\n\n    def __residue_table(a):\n        n = [0] + [None] * (a[0] - 1)\n        for i in range(1, len(a)):\n            d = gcd(a[0], a[i])\n            for r in range(d):\n                try:\n                    nn = min((n[q] for q in range(r, a[0], d) if n[q] is not None))\n                except ValueError:\n                    continue\n                for _ in range(a[0] // d):\n                    nn += a[i]\n                    p = nn % a[0]\n                    if n[p] is not None:\n                        nn = min(nn, n[p])\n                    n[p] = nn\n        return n\n    a.sort()\n    if len(a) < 1 or reduce(gcd, a) > 1:\n        return -1\n    if a[0] == 1:\n        return 0\n    return max(__residue_table(a)) - a[0]", "entry_point": "survivor", "task_id": "TACO_lite/703", "input_output_examples": [[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 2, 6, 7, 5]]], [[7, 4, 9, 2, 6, 8, 10, 1, 3, 5], [6, 2, 5, 1, 2, 7]]]}
{"requirement": "def product_array(numbers):\"\"\"# Introduction and Warm-up (Highly recommended)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n___\n\n# Task\n\n**_Given_** an *array/list [] of integers* , **_Construct_** a *product array **_Of same size_** Such That prod[i] is equal to The Product of all the elements of Arr[] except Arr[i]*. \n___\n\n# Notes \n\n\n* **_Array/list_** size is *at least 2* .\n\n* **_Array/list's numbers_**  Will be **_only Positives_** \n\n* **_Repetition_** of numbers in *the array/list could occur*.\n___\n\n## **_Explanation_**:\n\n* **_The first element_**  *in prod [] array* **_is the product of all array's elements except the first element*\n\n* **_The second element_** *is the product of all array's elements except the second element* .\n___\n\n## **_Explanation_**: \n\n\n* **_The first element_** *is the product of all array's elements except the first element*\n\n* **_The second element_** *is the product of all array's elements except the second element*\n\n* **_The Third element_** *is the product of all array's elements except the third element*.\n\n___\n\n## **_Explanation_**: \n\n\n* **_The first element_** *is the product of all array's elements except the first element*\n\n* **_The second element_** *is the product of all array's elements except the second element*\n\n* **_The Third element_** *is the product of all array's elements except the third element*\n\n* **_The Fourth element_** *is the product of all array's elements except the fourth element*\n\n* *Finally* ,**_The Fifth element_** *is the product of all array's elements except the fifth element*\n\n___\n# [A more challenging version of this kata by Firefly2002](https://www.codewars.com/kata/array-product-sans-n)\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[[12, 20]], [[3, 27, 4, 2]], [[13, 10, 5, 2, 9]], [[16, 17, 4, 3, 5, 2]]], "outputs": [[[20, 12]], [[216, 24, 162, 324]], [[900, 1170, 2340, 5850, 1300]], [[2040, 1920, 8160, 10880, 6528, 16320]]], "starter_code": "def product_array(numbers):", "canonical_solution": "from operator import mul\nfrom functools import reduce\n\ndef product_array(numbers):\n    tot = reduce(mul, numbers)\n    return [tot // n for n in numbers]", "entry_point": "product_array", "task_id": "TACO_lite/704", "input_output_examples": [[["Chuck Norris", "chück!"], ["Chuck Norris", "superman"], ["Carlos Ray Norris", "Carlos Ray Norris"], ["Carlos-Ray Norris", "Carlos-Ray Norris"], ["Carlos Ray Norris", "Carlos-Ray Norris"], ["Carlos-Ray Norris", "Carlos Ray Norris"], ["Carlos-Ray Norris", "Carlos Ray-Norris"], ["Carlos Ray Norris", "carlos ray"], ["Carlos Ray Norris", "Carlos. Ray, Norris;"], ["Carlos Ray Norris", "Carlòs! Norris"]], [[true], [false], [true], [true], [false], [false], [false], [true], [true], [true]]]}
{"requirement": "def getmatrixproduct(a, b):\"\"\"\nIn mathematics, a matrix (plural matrices) is a rectangular array of numbers. Matrices have many applications in programming, from performing transformations in 2D space to machine learning. \n\nOne of the most useful operations to perform on matrices is matrix multiplication, which takes a pair of matrices and produces another matrix – known as the dot product. Multiplying matrices is very different to multiplying real numbers, and follows its own set of rules. \n\nUnlike multiplying real numbers, multiplying matrices is non-commutative: in other words, multiplying matrix ```a``` by matrix ```b``` will not give the same result as multiplying matrix ```b``` by matrix ```a```.\n\nAdditionally, not all pairs of matrix can be multiplied. For two matrices to be multipliable, the number of columns in matrix ```a``` must match the number of rows in matrix ```b```.\n\nThere are many introductions to matrix multiplication online, including at Khan Academy, and in the classic MIT lecture series by Herbert Gross. \n\nTo complete this kata, write a function that takes two matrices - ```a``` and ```b``` - and returns the dot product of those matrices. If the matrices cannot be multiplied, return ```-1``` for JS/Python, or `null` for Java.\n\nEach matrix will be represented by a two-dimensional list (a list of lists). Each inner list will contain one or more numbers, representing a row in the matrix.\n\nIt can be assumed that all lists will be valid matrices, composed of lists with equal numbers of elements, and which contain only numbers. The numbers may include integers and/or decimal points.\n\"\"\"", "inputs": [[[[2, -2], [5, 3]], [[-1, 4], [7, -6]]], [[[1]], [[3]]], [[[1, 2], [3, 4]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[7, 3], [2, 5], [6, 8], [9, 0]], [[7, 4, 9], [8, 1, 5]]], [[[1, 0.5], [-0.5, 1]], [[5, 0.25], [2, 0.5]]]], "outputs": [[[[-16, 20], [16, 2]]], [[[3]]], [-1], [[[73, 31, 78], [54, 13, 43], [106, 32, 94], [63, 36, 81]]], [[[6.0, 0.5], [-0.5, 0.375]]]], "starter_code": "def getmatrixproduct(a, b):", "canonical_solution": "import numpy as np\n\ndef getmatrixproduct(a, b):\n    try:\n        return np.matmul(a, b).tolist()\n    except:\n        return -1", "entry_point": "getmatrixproduct", "task_id": "TACO_lite/707", "input_output_examples": [[[5], [11], [376], [1]], [[true], [false], [true], [1]]]}
{"requirement": "def missing_alphabets(s):\"\"\"# Task\n Given string `s`, which contains only letters from `a to z` in lowercase.\n\n A set of alphabet is given by `abcdefghijklmnopqrstuvwxyz`.\n \n 2 sets of alphabets mean 2 or more alphabets.\n \n Your task is to find the missing letter(s). You may need to output them by the order a-z. It is possible that there is more than one missing letter from more than one set of alphabet.\n\n If the string contains all of the letters in the alphabet, return an empty string `\"\"`\n\n# Input/Output\n\n\n - `[input]` string `s`\n\n  Given string(s) contains one or more set of alphabets in lowercase.\n\n\n - `[output]` a string\n\n  Find the letters contained in each alphabet but not in the string(s). Output them by the order `a-z`. If missing alphabet is repeated, please repeat them like `\"bbccdd\"`, not `\"bcdbcd\"`\n\"\"\"", "inputs": [["abcdefghijklmnopqrstuvwxy"], ["abcdefghijklmnopqrstuvwxyz"], ["aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyy"], ["abbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxy"], ["codewars"]], "outputs": [["z"], [""], ["zz"], ["ayzz"], ["bfghijklmnpqtuvxyz"]], "starter_code": "def missing_alphabets(s):", "canonical_solution": "from collections import Counter\nfrom string import ascii_lowercase\n\ndef missing_alphabets(s):\n    c = Counter(s)\n    m = max(c.values())\n    return ''.join((letter * (m - c[letter]) for letter in ascii_lowercase))", "entry_point": "missing_alphabets", "task_id": "TACO_lite/712", "input_output_examples": [[[6, 100000, 360, 1], [6, 100000, 360, 12]], [["num_payment 1 c 600 princ 100 int 500 balance 99900"], ["num_payment 12 c 600 princ 105 int 494 balance 98772"]]]}
{"requirement": "def side_len(x, y):\"\"\"**DESCRIPTION:**\n\n  Your strict math teacher is teaching you about right triangles, and the Pythagorean Theorem --> a^2 + b^2 = c^2 whereas a and b are the legs of the right triangle and c is the hypotenuse of the right triangle. On the test however, the question asks: What are the possible integer lengths for the other side of the triangle, but since you never learned anything about that in class, you realize she meant What are the possible integer lengths for the other side of the right triangle. Because you want to address the fact that she asked the wrong question and the fact that you're smart at math, you've decided to answer all the possible values for the third side EXCLUDING the possibilities for a right triangle in increasing order.\n\n**RETURN:**\n\n  Return your answer as a list of all the possible third side lengths of the triangle without the right triangles in increasing order.\n  \nBy the way, after finishing this kata, please try some of my other katas: [Here](https://www.codewars.com/collections/tonylicodings-authored-katas)\n\nNOTE:\n  \n  When given side_len(x, y), y will always be greater than or equal to x. Also, if a right triangle's legs are passed in, exclude the hypotenuse. If a right triangle's leg and hypotenuse are passed in, exclude the other leg.\n\"\"\"", "inputs": [[1, 1], [3, 4], [4, 6], [5, 12], [8, 10]], "outputs": [[[1]], [[2, 3, 4, 6]], [[3, 4, 5, 6, 7, 8, 9]], [[8, 9, 10, 11, 12, 14, 15, 16]], [[3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]], "starter_code": "def side_len(x, y):", "canonical_solution": "def side_len(x, y):\n    return [z for z in range(abs(x - y) + 1, x + y) if z * z not in (abs(x * x - y * y), x * x + y * y)]", "entry_point": "side_len", "task_id": "TACO_lite/714", "input_output_examples": [[["Hannah"], ["aabbcc_yYx_"], ["A"]], [[6], [9], [1]]]}
{"requirement": "def min_length_num(digits, max_num):\"\"\"\nWe define the \"self reversed power sequence\" as one shown below:\n\n\n\nImplement a function that takes 2 arguments (`ord max` and `num dig`), and finds the smallest term of the sequence whose index is less than or equal to `ord max`, and has exactly `num dig` number of digits.\n\nIf there is a number with correct amount of digits, the result should be an array in the form:\n\n```python\n[True, smallest found term]\n[False, -1]\n```\n\n## Input range:\n\n```python\nord_max <= 1000\n```\n\n___\n\nEnjoy it and happy coding!!\n\"\"\"", "inputs": [[5, 10], [7, 11], [7, 14], [8, 16], [10, 20]], "outputs": [[[true, 10]], [[false, -1]], [[true, 13]], [[true, 15]], [[true, 17]]], "starter_code": "def min_length_num(digits, max_num):", "canonical_solution": "results = {}\nn, digits = (1, 0)\nwhile digits <= 1000:\n    digits = len(str(sum((x ** (n - x + 1) for x in range(1, n)))))\n    if digits not in results:\n        results[digits] = n\n    n += 1\n\ndef min_length_num(digits, max_num):\n    n = results.get(digits, 0)\n    return [True, n + 1] if n and n < max_num else [False, -1]", "entry_point": "min_length_num", "task_id": "TACO_lite/716", "input_output_examples": [[[[100], 0]], [[[1, 1]]]]}
{"requirement": "def solve(s, k):\"\"\"\nConsider the string of numbers. Given a string of numbers and an integer `k`, return the number of pairs that when concatenated, are divisible by `k`.\n\nNote:\n-- 21 and 12 are different pairs. \n-- Elements must be from different indices, so concatenations from the same index like '3636` are not valid. \n\nPlease also try [Simple remove duplicates](https://www.codewars.com/kata/5ba38ba180824a86850000f7)\n\"\"\"", "inputs": [["1 2 36 4 8", 2], ["1 2 36 4 8", 3], ["1 2 36 4 8", 4], ["1 2 36 4 8", 8]], "outputs": [[16], [8], [11], [4]], "starter_code": "def solve(s, k):", "canonical_solution": "from itertools import permutations\n\ndef solve(s, k):\n    return sum((not v % k for v in map(int, map(''.join, permutations(s.split(), 2)))))", "entry_point": "solve", "task_id": "TACO_lite/718", "input_output_examples": [[[[1]], [[3, 5]], [[3, 9, 4]]], [[1], [8], [25]]]}
{"requirement": "def palindrome(num):\"\"\"\nA palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward. \n\nFor a given number ```num```, return its closest numerical palindrome which can either be smaller or larger than ```num```. If there are 2 possible values, the larger value should be returned. If ```num``` is a numerical palindrome itself, return it. \n\nFor this kata, single digit numbers will NOT be considered numerical palindromes. \n\nAlso, you know the drill - be sure to return \"Not valid\" if the input is not an integer or is less than 0.\n\n```Haskell\nIn Haskell the function should return a Maybe Int with Nothing for cases where the argument is less than zero.\n```\nOther Kata in this Series:\nNumerical Palindrome #1\nNumerical Palindrome #1.5\nNumerical Palindrome #2\nNumerical Palindrome #3\nNumerical Palindrome #3.5\nNumerical Palindrome #4\nNumerical Palindrome #5\n\"\"\"", "inputs": [[8], [281], [1029], [1221], ["BGHHGB"], ["11029"], [-1029]], "outputs": [[11], [282], [1001], [1221], ["Not valid"], ["Not valid"], ["Not valid"]], "starter_code": "def palindrome(num):", "canonical_solution": "def palindrome(num):\n    if type(num) is not int or num < 0:\n        return 'Not valid'\n    else:\n        c = 0\n        for i in range(num, num ** 2):\n            if is_pal(i):\n                return i\n            elif is_pal(i - c):\n                return i - c\n            else:\n                c += 2\n\ndef is_pal(n):\n    return n > 10 and n == int(str(n)[::-1])", "entry_point": "palindrome", "task_id": "TACO_lite/723", "input_output_examples": [[["<>>"], ["<^^>v<^^^"], [[]], ["^< > v\n    ^   v\n> > C > D > >\n^   ^   v\n^ < B < <\n    ^\n    A"]], [[">"], ["<^^^^"], [""], ["A -> B -> C -> D"]]]}
{"requirement": "def isvalid(formula):\"\"\"\nNow we will confect a reagent. There are eight materials to choose from, numbered 1,2,..., 8 respectively.\n\nWe know the rules of confect:\n```\nmaterial1 and material2 cannot be selected at the same time\nmaterial3 and material4 cannot be selected at the same time\nmaterial5 and material6 must be selected at the same time\nmaterial7 or  material8 must be selected(at least one, or both)\n```\n\n# Task\n\nYou are given a integer array `formula`. Array contains only digits 1-8 that represents material 1-8. Your task is to determine if the formula is valid. Returns `true` if it's valid, `false` otherwise.\n\n\n# Note\n\n- All inputs are valid. Array contains at least 1 digit. Each digit appears at most once. \n\n- Happy Coding `^_^`\n\"\"\"", "inputs": [[[1, 3, 7]], [[7, 1, 2, 3]], [[1, 3, 5, 7]], [[1, 5, 6, 7, 3]], [[5, 6, 7]], [[5, 6, 7, 8]], [[6, 7, 8]], [[7, 8]]], "outputs": [[true], [false], [false], [true], [true], [true], [false], [true]], "starter_code": "def isvalid(formula):", "canonical_solution": "def isvalid(formula):\n    return not (1 in formula and 2 in formula or (3 in formula and 4 in formula) or (5 in formula and (not 6 in formula)) or (not 5 in formula and 6 in formula) or (not 7 in formula and (not 8 in formula)))", "entry_point": "isvalid", "task_id": "TACO_lite/724", "input_output_examples": [[[1, 2, 3], [1, 1, 1], [9, 1, 1]], [[9], [3], [18]]]}
{"requirement": "def minimum(arr):\n\t\"\"\"\nYour task is to make two functions, ```max``` and ```min``` (`maximum` and `minimum` in PHP and Python) that take a(n) array/vector of integers ```list``` as input and outputs, respectively, the largest and lowest number in that array/vector.\n\n#Notes\n- You may consider that there will not be any empty arrays/vectors.\n\"\"\"", "inputs": [[[-52, 56, 30, 29, -54, 0, -110]], [[42, 54, 65, 87, 0]], [[1, 2, 3, 4, 5, 10]], [[-1, -2, -3, -4, -5, -10]], [[9]]], "outputs": [[-110], [0], [1], [-10], [9]], "starter_code": "def minimum(arr):\n\t", "canonical_solution": "minimum = min\nmaximum = max", "entry_point": "minimum", "task_id": "TACO_lite/729", "input_output_examples": [[[[6, 9, 3, 4, 3, 82, 11], 3]], [[[2, 4]]]]}
{"requirement": "def hamster_me(code, message):\"\"\"# Introduction \n\nHamsters are rodents belonging to the subfamily Cricetinae. The subfamily contains about 25 species, classified in six or seven genera. They have become established as popular small house pets, and, partly because they are easy to breed in captivity, hamsters are often used as laboratory animals.\n\n\n# Task \n\nWrite a function that accepts two inputs: `code` and `message` and returns an encrypted string from `message` using the `code`.   \nThe `code` is a string that generates the key in the way shown below:\n\n```\n 1  | h a m s t e r\n 2  | i b n   u f\n 3  | j c o   v g\n 4  | k d p   w\n 5  | l   q   x\n 6  |         y\n 7  |         z\n\n```\n\nAll letters from `code` get number `1`. All letters which directly follow letters from `code` get number `2` (unless they already have a smaller number assigned), etc. It's difficult to describe but it should be easy to understand.\n\nHow does the encoding work using the `hamster` code?    \n\nAnd you probably started wondering what will happen if there is no `a` in the `code`.  \nJust add these letters after the last available letter (in alphabetic order) in the `code`.\n\nThe key for code `hmster` is:\n```\n 1  | e h m r s t\n 2  | f i n     u\n 3  | g j o     v\n 4  |   k p     w\n 5  |   l q     x\n 6  |           y\n 7  |           z\n 8  |           a\n 9  |           b\n10  |           c\n11  |           d\n```\n\n# Additional notes\n\nThe `code` will have at least 1 letter.   \nDuplication of letters in `code` is possible and should be handled.    \nThe `code` and `message` consist of only lowercase letters.\n\"\"\"", "inputs": [["hamster", "hamster"], ["hamster", "helpme"], ["hmster", "hamster"], ["hhhhammmstteree", "hamster"], ["f", "abcdefghijklmnopqrstuvwxyz"]], "outputs": [["h1a1m1s1t1e1r1"], ["h1e1h5m4m1e1"], ["h1t8m1s1t1e1r1"], ["h1a1m1s1t1e1r1"], ["f22f23f24f25f26f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21"]], "starter_code": "def hamster_me(code, message):", "canonical_solution": "def hamster_me(code, message):\n    code, dct = (sorted(set(code)), {})\n    for c1, c2 in zip(code, code[1:] + [chr(ord('z') + ord(code[0]) - ord('a'))]):\n        for n in range(ord(c1), ord(c2) + 1):\n            dct[chr((n - 97) % 26 + 97)] = c1 + str(n - ord(c1) + 1)\n    return ''.join((dct[c] for c in message))", "entry_point": "hamster_me", "task_id": "TACO_lite/730", "input_output_examples": [[[[5, 4, 3, 2, 1]], [[1, 2, 0]], [[1, 2, 3]]], [[[4, 3, 2, 1, 0]], [[1, 1, 0]], [[0, 0, 0]]]]}
{"requirement": "def mygcd(x, y):\"\"\"\nFind the greatest common divisor of two positive integers. The integers can be large, so you need to find a clever solution. \n\nThe inputs `x` and `y` are always greater or equal to 1, so the greatest common divisor will always be an integer that is also greater or equal to 1.\n\"\"\"", "inputs": [[1, 3], [60, 12], [2672, 5678], [10927782, 6902514], [1590771464, 1590771620]], "outputs": [[1], [12], [334], [846], [4]], "starter_code": "def mygcd(x, y):", "canonical_solution": "def mygcd(x, y):\n    while y:\n        x, y = (y, x % y)\n    return x", "entry_point": "mygcd", "task_id": "TACO_lite/731", "input_output_examples": [[["1 2 Fizz 4 Buzz"], ["Fizz 688 689 FizzBuzz"], ["Fizz Buzz"]], [[[1, 2, 3, 4, 5]], [[687, 688, 689, 690]], [[9, 10]]]]}
{"requirement": "def is_john_lying(a, b, s):\"\"\"# Task\n\nJohn and Alice have an appointment today. \n\nIn the morning, John starts from (`0,0`) and goes to the place (`a,b`) where he is dating. Unfortunately, John had no sense of direction at all, so he moved 1 step in a random direction (up, down, left or right) each time. \n\nObviously, when he arrived at the destination, it was already too late and Alice had already left. It's a sadly story :(\n\nAlice wants to know whether John is lying. Please help Alice to judge.\n\nGiven two coordinates `a, b` and the step `s`, return `true` if John tells the truth, `false` otherwise.\n\n# Input/Output\n\n\n`[input]` integer `a`\n\nThe x-coordinates of the dating site.\n\n`-10^7 <= a <= 10^7`\n\n`[input]` integer `b`\n\nThe y-coordinates of the dating site.\n\n`-10^7 <= b <= 10^7`\n\n`[input]` integer `s`\n\nA positive integer.  The steps John using.\n\n`0 < s <= 10^9`\n\n`[output]` a boolean value\n\nreturn `true` if John tells the truth, `false` otherwise.\n\"\"\"", "inputs": [[3, 3, 6], [4, 5, 10], [-5, -5, 10], [-5, -5, 8], [10, -10, 10]], "outputs": [[true], [false], [true], [false], [false]], "starter_code": "def is_john_lying(a, b, s):", "canonical_solution": "def is_john_lying(a, b, s):\n    delta = abs(a) + abs(b) - s\n    return delta <= 0 and delta % 2 == 0", "entry_point": "is_john_lying", "task_id": "TACO_lite/732", "input_output_examples": [[[100]], [[null]]]}
{"requirement": "def find_unknown_number(x, y, z):\"\"\"\n# Problem\n\nIn China, there is an ancient mathematical book, called \"The Mathematical Classic of Sun Zi\"(《孙子算经》). In the book, there is a classic math problem: “今有物不知其数，三三数之剩二，五五数之剩三，七七数之剩二，问物几何？” \n\nAhh, Sorry. I forgot that you don't know Chinese. Let's translate it to English:\n\nThere is an unknown positive integer `n`. We know: \n\n`n % 3 = 2`, and `n % 5 = 3`, and `n % 7 = 2`. \n\nWhat's the minimum possible positive integer `n`?\n\nThe correct answer is `23`.\n\n# Task\n\nYou are given three non-negative integers `x,y,z`. They represent the remainders of the unknown positive integer `n` divided by 3,5,7.\n\nThat is: `n % 3 = x, n % 5 = y, n % 7 = z`\n\nYour task is to find the minimum possible positive integer `n` and return it.\n\n# Note\n\n- `0 <= x < 3, 0 <= y < 5, 0 <= z < 7`\n\n- Happy Coding `^_^`\n\"\"\"", "inputs": [[2, 3, 2], [1, 2, 3], [1, 3, 5], [0, 0, 0], [1, 1, 1]], "outputs": [[23], [52], [103], [105], [1]], "starter_code": "def find_unknown_number(x, y, z):", "canonical_solution": "def find_unknown_number(x, y, z):\n    return (x * 70 + y * 21 + z * 15) % 105 or 105", "entry_point": "find_unknown_number", "task_id": "TACO_lite/733", "input_output_examples": [[[[1, 2, 3], [4, 5, 6]]], [[[1, 4], [2, 5], [3, 6]]]]}
{"requirement": "def num_primorial(n):\"\"\"# Definition (Primorial Of a Number)\n\n*Is similar to factorial of a number*, **_In primorial_**, not all the natural numbers get multiplied, **_only prime numbers are multiplied to calculate the primorial of a number_**. It's denoted with **_P_****_#_** and it is the product of the first n prime numbers.\n___ \n\n# Task\n\n**_Given_** *a number N* , **_calculate its primorial_**. ![!alt](https://i.imgur.com/mdX8dJP.png)  ![!alt](https://i.imgur.com/mdX8dJP.png)  \n___\n\n# Notes\n\n* **_Only positive_** numbers *will be passed (N > 0)* .\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[3], [4], [5], [8], [9]], "outputs": [[30], [210], [2310], [9699690], [223092870]], "starter_code": "def num_primorial(n):", "canonical_solution": "def num_primorial(n):\n    primorial, x, n = (2, 3, n - 1)\n    while n:\n        if all((x % d for d in range(3, int(x ** 0.5) + 1, 2))):\n            primorial *= x\n            n -= 1\n        x += 2\n    return primorial", "entry_point": "num_primorial", "task_id": "TACO_lite/736", "input_output_examples": [[["english"], ["czech"], ["unknown_language"]], [["Welcome"], ["Vitejte"], ["Welcome"]]]}
{"requirement": "def unique(integers):\"\"\"# Remove Duplicates\n\nYou are to write a function called `unique` that takes an array of integers and returns the array with duplicates removed. It must return the values in the same order as first seen in the given array. Thus no sorting should be done, if 52 appears before 10 in the given array then it should also be that 52 appears before 10 in the returned array.\n\n## Assumptions\n\n* All values given are integers (they can be positive or negative).\n* You are given an array but it may be empty.\n* They array may have duplicates or it may not.\n\"\"\"", "inputs": [[[]], [[-1]], [[-1, 5, 10, -100, 3, 2]], [[1, 2, 3, 3, 2, 1, 2, 3, 1, 1, 3, 2]], [[1, 3, 2, 3, 2, 1, 2, 3, 1, 1, 3, 2]], [[3, 2, 3, 3, 2, 1, 2, 3, 1, 1, 3, 2]]], "outputs": [[[]], [[-1]], [[-1, 5, 10, -100, 3, 2]], [[1, 2, 3]], [[1, 3, 2]], [[3, 2, 1]]], "starter_code": "def unique(integers):", "canonical_solution": "from collections import OrderedDict\n\ndef unique(integers):\n    return list(OrderedDict.fromkeys(integers))", "entry_point": "unique", "task_id": "TACO_lite/737", "input_output_examples": [[[[4, 6], [12, 4], [10, 10]], [[4, 2], [12, 2], [6, 10]]], [[8.6667, 6.6667], [7.3333, 4.6667]]]}
{"requirement": "def solve(n):\"\"\"\nConsider the number triangle below, in which each number is equal to the number above plus the number to the left. If there is no number above, assume it's a `0`.\n\nThe triangle has `5` rows and the sum of the last row is `sum([1,4,9,14,14]) = 42`.\n\nYou will be given an integer `n` and your task will be to return the sum of the last row of a triangle of `n` rows. \n\n```if:javascript\n### Note\n\nThis kata uses native arbitrary precision integer numbers ( `BigInt`, `1n` ).  \nUnfortunately, the testing framework and even native `JSON` do not fully support them yet.  \n`console.log(1n)` and `(1n).toString()` work and can be used for debugging.  \n\nWe apologise for the inconvenience.\n```\n\"\"\"", "inputs": [[4], [5], [6], [7], [8], [20]], "outputs": [[14], [42], [132], [429], [1430], [6564120420]], "starter_code": "def solve(n):", "canonical_solution": "from math import factorial as fac\n\ndef solve(n):\n    return fac(2 * n) // fac(n) // fac(n + 1)", "entry_point": "solve", "task_id": "TACO_lite/739", "input_output_examples": [[["yvvi"]], [["beer"]]]}
{"requirement": "def alternate_sq_sum(arr):\"\"\"\nWrite a method `alternate_sq_sum()` (JS: `alternateSqSum` ) that takes an array of integers as input and finds the sum of squares of the elements at even positions (*i.e.,* 2nd, 4th, *etc.*) plus the sum of the rest of the elements at odd position.\n\nNOTE:\nThe values at even *position* need to be squared. For a language with zero-based indices, this will occur at oddly-indexed locations. For instance, in Python, the values at indices 1, 3, 5, *etc.* should be squared because these are the second, fourth, and sixth positions in the list.\n\nFor empty arrays, result should be 0 (zero) (except for Haskell).\n\"\"\"", "inputs": [[[]], [[-1, 0, -3, 0, -5, 3]], [[-1, 2, -3, 4, -5]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], "outputs": [[0], [0], [11], [245]], "starter_code": "def alternate_sq_sum(arr):", "canonical_solution": "def alternate_sq_sum(arr):\n    return sum([x ** 2 if i % 2 == 1 else x for i, x in enumerate(arr)])", "entry_point": "alternate_sq_sum", "task_id": "TACO_lite/742", "input_output_examples": [[[10], [8], [24]], [["Yes"], ["No"], ["Yes"]]]}
{"requirement": "def invite_more_women(arr):\"\"\"\n### Task\n King Arthur and his knights are having a New Years party. Last year Lancelot was jealous of Arthur, because Arthur had a date and Lancelot did not, and they started a duel.\n\n To prevent this from happening again, Arthur wants to make sure that there are at least as many women as men at this year's party. He gave you a list of integers of all the party goers. \n \n Arthur needs you to return true if he needs to invite more women or false if he is all set.\n\n### Input/Output\n\n\n - `[input]` integer array `L` (`$a` in PHP)\n\n  An array (guaranteed non-associative in PHP) representing the genders of the attendees, where `-1` represents `women` and `1` represents `men`.\n  \n  `2 <= L.length <= 50`\n  \n\n- `[output]` a boolean value\n\n  `true` if Arthur need to invite more women, `false` otherwise.\n\"\"\"", "inputs": [[[1, -1, 1]], [[-1, -1, -1]], [[1, -1]], [[1, 1, 1]], [[]]], "outputs": [[true], [false], [false], [true], [false]], "starter_code": "def invite_more_women(arr):", "canonical_solution": "def invite_more_women(arr):\n    return sum(arr) > 0", "entry_point": "invite_more_women", "task_id": "TACO_lite/746", "input_output_examples": [[["a"], ["aaaa"], ["abcd"], ["babababababababa"], ["bbabbaaabbaaaabb"]], [["a"], ["a"], ["abcd"], ["ab"], ["ab"]]]}
{"requirement": "def calc_ms(n):\"\"\"\nThe Menger Sponge is a three-dimensional fractal, first described by Karl Menger in 1926.\n\n![Mengers Sponge (Level 0-3)](http://i.imgur.com/V6Rb4Za.jpg)\n###### _An illustration of the iterative construction of a Menger sponge_\n\nA method of constructing a Menger Sponge can be visualized as follows:\n1. Start from a cube (first part of image).\n2. Scale down the cube so that side length is 1/3 of its original, and make 20 copies of it.\n3. Place the copies so that they measure the same size as the original cube but without its central parts (next part of image)\n4. Repeat the process from step 2 for the new smaller cubes from the previous step.\n5. In each iteration, the effect will be that parts of the cube will be removed, they'll never be added. Menger sponge will always consist of parts will never be removed, regardless of how many iterations you do.\n\n___\n\nAn alternative explanation:\n1. Start from a cube (first part of image).\n2. Devide each cube into 27 equal sized cubes.\n3. Remove the middle-cube and the six cubes on each side of the group of 27 cubes (second part of image).\n4. Repeat the process from step 2 for the smaller cubes (third and fourth part of image).\n\n## Task\nIn this kata you will create a function that takes non negative integers (from 0 to n) and return the amount of cubes that the Menger Sponge would have in that specific iteration.\n\nHappy coding!\n\"\"\"", "inputs": [[0], [1], [2], [3], [4], [5], [6]], "outputs": [[1], [20], [400], [8000], [160000], [3200000], [64000000]], "starter_code": "def calc_ms(n):", "canonical_solution": "def calc_ms(n):\n    return 20 ** n", "entry_point": "calc_ms", "task_id": "TACO_lite/747", "input_output_examples": [[[[2, 1, 2, 1, 2], 2]], [[3]]]}
{"requirement": "def bishop_diagonal(a, b):\"\"\"\n# Task\n In the Land Of Chess, bishops don't really like each other. In fact, when two bishops happen to stand on the same diagonal, they immediately rush towards the opposite ends of that same diagonal.\n\n Given the initial positions (in chess notation) of two bishops, `bishop1` and `bishop2`, calculate their future positions. Keep in mind that bishops won't move unless they see each other along the same diagonal.\n\n# Input/Output\n\n\n - `[input]` string `bishop1`\n\n    Coordinates of the first bishop in chess notation.\n\n\n - `[input]` string `bishop2`\n\n    Coordinates of the second bishop in the same notation.\n\n\n - `[output]` a string array\n\n    Coordinates of the bishops in lexicographical order after they check the diagonals they stand on.\n\"\"\"", "inputs": [["d7", "f5"], ["d8", "b5"], ["a1", "h8"], ["g3", "e1"], ["b4", "e7"]], "outputs": [[["c8", "h3"]], [["b5", "d8"]], [["a1", "h8"]], [["e1", "h4"]], [["a3", "f8"]]], "starter_code": "def bishop_diagonal(a, b):", "canonical_solution": "def bishop_diagonal(a, b):\n    a, b = sorted([['abcdefgh'.index(f), '12345678'.index(r)] for f, r in [a, b]])\n    m = int((b[1] - a[1]) / (b[0] - a[0])) if abs(a[1] - b[1]) == abs(a[0] - b[0]) and abs(a[1] - b[1]) else 0\n    if m:\n        while all((0 < e < 7 for e in a)):\n            a = [a[0] - 1, a[1] - m]\n        while all((0 < e < 7 for e in b)):\n            b = [b[0] + 1, b[1] + m]\n    return ['abcdefgh'[c] + '12345678'[r] for c, r in [a, b]]", "entry_point": "bishop_diagonal", "task_id": "TACO_lite/748", "input_output_examples": [[[[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [2, 1, 3]], [[1, 2, 2], [2, 1, 1]]], [[true], [true], [false]]]}
{"requirement": "def palindrome(num):\"\"\"\nA palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward.\n\nFor a given number ```num```, write a function which returns an array of all the numerical palindromes contained within each number. The array should be sorted in ascending order and any duplicates should be removed.\n\nIn this kata, single digit numbers and numbers which start or end with zeros (such as `010` and `00`) are **NOT** considered valid numerical palindromes.  \n\nIf `num` contains no valid palindromes, return `\"No palindromes found\"`. \nOtherwise, return `\"Not valid\"` if the input is not an integer or is less than `0`.\n\n---\n\n### Other Kata in this Series:\n\nNumerical Palindrome #1\nNumerical Palindrome #1.5\nNumerical Palindrome #2\nNumerical Palindrome #3\nNumerical Palindrome #3.5\nNumerical Palindrome #4\nNumerical Palindrome #5\n\"\"\"", "inputs": [[2], [34322122], [10015885], [4444], [1002001], [141221001], [1551], [13598], ["ACCDDCCA"], ["1551"], [-4505]], "outputs": [["No palindromes found"], [[22, 212, 343, 22122]], [[88, 1001, 5885]], [[44, 444, 4444]], [[1002001]], [[22, 141, 1001, 1221]], [[55, 1551]], ["No palindromes found"], ["Not valid"], ["Not valid"], ["Not valid"]], "starter_code": "def palindrome(num):", "canonical_solution": "def palindrome(num):\n    if not isinstance(num, int) or num < 0:\n        return 'Not valid'\n    n = str(num)\n    l = len(n)\n    result = {int(n[i:j]) for i in range(l - 1) for j in range(i + 2, l + 1) if int(n[i]) and n[i:j] == n[i:j][::-1]}\n    return sorted(result) if result else 'No palindromes found'", "entry_point": "palindrome", "task_id": "TACO_lite/749", "input_output_examples": [[["Too Easy?"]], [[71]]]}
{"requirement": "def clonewars(k):\"\"\"*It seemed a good idea at the time...*\n\n# Why I did it?\n\nAfter a year on **Codewars** I really needed a holiday...\n\nBut not wanting to drift backwards in the honour rankings while I was away, I hatched a cunning plan!\n\n# The Cunning Plan\n\nSo I borrowed my friend's \"Clone Machine\" and cloned myself :-)\n\nNow my clone can do my Kata solutions for me and I can relax!\n\nBrilliant!!\n\n\n\nFurthermore, at the end of the day my clone can re-clone herself...\n\nDouble brilliant!!\n\n\n\nI wonder why I didn't think to do this earlier?\n\n\n\nSo as I left for the airport I gave my clone instructions to:\n\n* do my Kata solutions for me\n* feed the cat\n* try to keep the house tidy and not eat too much\n* sleep\n* clone yourself\n* repeat same next day\n\n# The Flaw\n\nWell, how was I supposed to know that cloned DNA is faulty?\n\n:-(\n\nEvery time they sleep they wake up with decreased ability - they get slower... they get dumber... they are only able to solve 1 less Kata than they could the previous day.\n\nEventually they can't do much more than sit around all day playing video games.\n\nAnd (unlike me), when the clone cannot solve any more Kata they are no longer clever enough to operate the clone machine either!\n\n# The Return Home\n\nI suspected something was wrong when I noticed my **Codewars** honour had stopped rising.\n\nI made a hasty return home...\n\n...and found 100s of clones scattered through the house. Mostly they sit harmlessly mumbling to themselves. The largest group have made a kind of nest in my loungeroom where they sit catatonic in front of the PlayStation.\n\nThe whole place needs fumigating.\n\nThe fridge and pantry are empty.\n\nAnd I can't find the cat.\n\n# Kata Task\n\nWrite a method to predict the final outcome where:\n\nInput:\n\n* `kata-per-day` is the number of Kata I can solve per day\n\nOutput:\n\n* ```[number-of-clones, number-of-kata-solved-by-clones]```\n\"\"\"", "inputs": [[0], [1], [5], [10]], "outputs": [[[1, 0]], [[1, 1]], [[16, 57]], [[512, 2036]]], "starter_code": "def clonewars(k):", "canonical_solution": "def clonewars(k):\n    return [2 ** max(k - 1, 0), 2 ** (k + 1) - k - 2]", "entry_point": "clonewars", "task_id": "TACO_lite/750", "input_output_examples": [[["where"], ["a"], ["test", "west"]], [["here"], [""], [2]]]}
{"requirement": "def survivor(n):\"\"\"# Task\n Changu and Mangu are great buddies. Once they found an infinite paper which had 1,2,3,4,5,6,7,8,......... till infinity, written on it.\n\n Both of them did not like the sequence and started deleting some numbers in the following way.\nThen kept on doing this (deleting every 5th, then every 6th ...) untill they got old and died.\n\n It is obvious that some of the numbers will never get deleted and hence are know to us as survivor numbers.\n\n Given a number `n`, check whether its a survivor number or not.\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  `0 < n <= 10^8`\n\n \n - `[output]` a boolean value\n\n  `true` if the number is a survivor else `false`.\n\"\"\"", "inputs": [[1], [5], [8], [9], [13], [15], [134], [289]], "outputs": [[true], [false], [false], [false], [true], [false], [false], [true]], "starter_code": "def survivor(n):", "canonical_solution": "def survivor(n):\n    k = 2\n    while n >= k and n % k:\n        n -= n // k\n        k += 1\n    return n % k > 0", "entry_point": "survivor", "task_id": "TACO_lite/751", "input_output_examples": [[["anna"], ["walter"], [12321], [123456]], [[true], [false], [true], [false]]]}
{"requirement": "def three_amigos(numbers):\"\"\"# Kata Task\n\nGiven a list of random integers, return the Three Amigos.\n\nThese are 3 numbers that live next to each other in the list, and who have the **most** in common with each other by these rules:\n* lowest statistical range\n* same parity\n\n# Notes\n\n* The list will contain at least 3 numbers\n* If there is more than one answer then return the first one found (reading the list left to right)\n* If there is no answer (e.g. no 3 adjacent numbers with same parity) then return an empty list.\n\"\"\"", "inputs": [[[1, 2, 34, 2, 1, 5, 3, 5, 7, 234, 2, 1]], [[2, 4, 6, 8, 10, 2, 2, 2, 1, 1, 1, 5, 3]], [[2, 4, 5, 3, 6, 3, 1, 56, 7, 6, 3, 12]], [[1, 3, 5]], [[1, 3, 2]], [[1, 3, 5, 7, 9, 11, 13, 15]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 3, 5]], [[-5, -4, -2, 0, 1, 2, 3, 4, 5]], [[-8, -25, 21, -7, -5]], [[8, 5, 20, 17, -18, -11, 19, 5]], [[6, 9, -18, -19, -14, -10, -24]], [[0, -1, -1, 1, -1, -1, -3]], [[-8, -2, 0, 2, 4, 6, 8]]], "outputs": [[[5, 3, 5]], [[2, 2, 2]], [[]], [[1, 3, 5]], [[]], [[1, 3, 5]], [[1, 3, 5]], [[-4, -2, 0]], [[21, -7, -5]], [[-11, 19, 5]], [[-14, -10, -24]], [[-1, -1, 1]], [[-2, 0, 2]]], "starter_code": "def three_amigos(numbers):", "canonical_solution": "def three_amigos(numbers):\n    return min(([a, b, c] for a, b, c in zip(numbers, numbers[1:], numbers[2:]) if a & 1 == b & 1 == c & 1), key=lambda triple: max(triple) - min(triple), default=[])", "entry_point": "three_amigos", "task_id": "TACO_lite/752", "input_output_examples": [[[[9, 7, 5, 3, 1, 2, 4, 6, 8]]], [[[7, 9, 5, 3, 1, 2, 4, 6, 8]]]]}
{"requirement": "def area_code(text):\"\"\"\nYou've got a bunch of textual data with embedded phone numbers. Write a function `area_code()` that finds and returns just the area code portion of the phone number.\n\nThe returned area code should be a string, not a number.\nEvery phone number is formatted like in the example, and the only non-alphanumeric characters in the string are apostrophes `'` or the punctuation used in the phone number.\n\"\"\"", "inputs": [["The supplier's phone number is (555) 867-5309"], ["Grae's cell number used to be (123) 456-7890"], ["The 102nd district court's fax line is (124) 816-3264"]], "outputs": [["555"], ["123"], ["124"]], "starter_code": "def area_code(text):", "canonical_solution": "def area_code(text):\n    return text[text.find('(') + 1:text.find(')')]", "entry_point": "area_code", "task_id": "TACO_lite/753", "input_output_examples": [[[714], [800]], [[21, 34, true], [34, 55, false]]]}
{"requirement": "def longest_palindrome(s, sep=' '):\"\"\"\nA palindrome is a word, phrase, or sequence that reads the same backward as forward, e.g.,\n'madam' or 'racecar'. Even the letter 'x' is considered a palindrome. \n\nFor this Kata, you are given a string ```s```. Write a function that returns the longest _contiguous_ palindromic substring in ```s``` (it could be the entire string). In the event that there are multiple longest palindromic substrings, return the first to occur.\n\nI'm not trying to trick you here:\n- You can assume that all inputs are valid strings.\n- Only the letters a-z will be used, all lowercase (your solution should, in theory, extend to more than just the letters a-z though). \n\n**NOTE:** Quadratic asymptotic complexity _(O(N^2))_ or above will __NOT__ work here.\n\n-----\n\n## Testing\n\nAlong with the example tests given:\n\n - There are **500** tests using strings of length in range [1 - 1,000]\n - There are **50** tests using strings of length in range [1,000 - 10,000]\n - There are **5** tests using strings of length in range [10,000 - 100,000]\n \nAll test cases can be passed within 10 seconds, but non-linear solutions will time out every time. _Linear performance is essential_. \n\n## Good Luck!\n\n-----\n\nThis problem was inspired by [this](https://leetcode.com/problems/longest-palindromic-substring/) challenge on LeetCode. Except this is the performance version :^)\n\"\"\"", "inputs": [["babad"], ["madam"], ["dde"], ["ababbab"], ["abababa"], ["banana"], ["abba"], ["cbbd"], ["zz"], ["dddd"], [""], ["abcdefghijklmnopqrstuvwxyz"], ["ttaaftffftfaafatf"], ["bbaaacc"], ["m"]], "outputs": [["bab"], ["madam"], ["dd"], ["babbab"], ["abababa"], ["anana"], ["abba"], ["bb"], ["zz"], ["dddd"], [""], ["a"], ["aaftffftfaa"], ["aaa"], ["m"]], "starter_code": "def longest_palindrome(s, sep=' '):", "canonical_solution": "def longest_palindrome(s, sep=' '):\n    t = sep + sep.join(s) + sep\n    r = 0\n    c = 0\n    spans = []\n    for i, _ in enumerate(t):\n        span = min(spans[2 * c - i], r - i - 1) if i < r else 0\n        while span <= i < len(t) - span and t[i - span] == t[i + span]:\n            span += 1\n        r, c = max((r, c), (i + span, i))\n        spans.append(span)\n    span = max(spans)\n    middle = spans.index(span)\n    return t[middle - span + 1:middle + span].replace(sep, '')", "entry_point": "longest_palindrome", "task_id": "TACO_lite/757", "input_output_examples": [[[3, 3], [1, 1]], [["R"], ["R"]]]}
{"requirement": "def sum_of_threes(n):\"\"\"\n# Task\nGiven a number `n`, return a string representing it as a sum of distinct powers of three, or return `\"Impossible\"` if that's not possible to achieve.\n\n\n# Input/Output\n\n\n`[input]` integer `n`\n\n\nA positive integer n. \n\n`1 ≤ n ≤ 10^16`.\n\n`[output]` a string\n\nA string representing the sum of powers of three which adds up to n, or `\"Impossible\"` if there is no solution. If the solution does exist, it should be return as `\"3^a1+3^a2+ ... +3^an\"`, where ai for `0 ≤ i ≤ n` represents the corresponding exponent of the term. The terms in the string should also be sorted in descending order, meaning that higher powers should appear before the lower ones in the string (`\"3^0+3^1\"` is incorrect, whereas `\"3^1+3^0\"` is correct).\n\"\"\"", "inputs": [[4], [2], [28], [84], [1418194818], [87754], [531441], [8312964441463288], [5559060566575209], [243]], "outputs": [["3^1+3^0"], ["Impossible"], ["3^3+3^0"], ["3^4+3^1"], ["Impossible"], ["3^10+3^9+3^8+3^7+3^5+3^3+3^1+3^0"], ["3^12"], ["Impossible"], ["3^33+3^9+3^1"], ["3^5"]], "starter_code": "def sum_of_threes(n):", "canonical_solution": "import numpy as np\n\ndef sum_of_threes(n):\n    s = np.base_repr(n, 3)\n    if '2' in s:\n        return 'Impossible'\n    return '+'.join(['3^{}'.format(i) for i, d in enumerate(s[::-1]) if d == '1'][::-1])", "entry_point": "sum_of_threes", "task_id": "TACO_lite/759", "input_output_examples": [[["5 1 2 + 4 * + 3 -"], [""]], [[14], [0]]]}
{"requirement": "def validate(message):\n\t\"\"\"\nIn Russia, there is an army-purposed station named UVB-76 or \"Buzzer\" (see also https://en.wikipedia.org/wiki/UVB-76). Most of the time specific \"buzz\" noise is being broadcasted, but on very rare occasions, the buzzer signal is interrupted and a voice transmission in Russian takes place. Transmitted messages have always the same format like this:\n\nMessage format consists of following parts:\n\n Initial keyword \"MDZHB\"; \n Two groups of digits, 2 digits in first and 3 in second ones; \n Some keyword of arbitrary length consisting only of uppercase letters; \n Final 4 groups of digits with 2 digits in each group. \n\nYour task is to write a function that can validate the correct UVB-76 message. Function should return \"True\" if message is in correct format and \"False\" otherwise.\n\"\"\"", "inputs": [["Is this a right message?"], ["MDZHB 85 596 KLASA 81 00 02 91"], ["MDZHB 12 733 EDINENIE 67 79 66 32"], ["MDZHV 60 130 VATRUKH 58 89 54 54"], ["MDZHB 85 596 BRAMIRKA 81 00 02 91"], ["MDZHB 12 733 INITIAL 67 79 66 32"], ["MDZHB 60 130 KROLI5T 58 89 54 54"], ["MDZHB 85 596 KAMASIT 81 00 02 91"], ["MDZHB 12 733 PREGRADA 67 79 66 32"], ["MD2HB 60 1S0 AKKRETSIA 58 89 54 54"], ["Is this a wrong message?"], ["MDZHBMDZHB 855 56 KLASA 81 00 02 91"], ["MDZHB 12 733 EDIN ENIE 67 79 66 32"], ["MDZHB 60 130 FRONTAL 58 89 54 54"], ["MDZHB 85 596 PALEOLIT 81 12 52 91"], ["MDZHB 12 733 6INITIAL 67 79 66 32"], ["MDZHB 60 130 KRO-LIST 58 89 54 54"], ["MDZHB 85 596 MDZHB 81 00 02 9"], ["MDZHB 12 733 VOSKHOD 67 79 66 32"], ["MD2HB 60 120 AKKRETSIA 58895454"], ["MDZHB 102 733 BZHDM 67 79 66 32"], ["MDZHB 60 13 KROLIST 58 89 54 54"], ["MDZHB 85 596 MDZHB 81 00 02 99"], ["MDZHB 12 733 VOSKHOD 677 79 66 32"], ["MDZHB 12 733 VOSKHOD 67 793 66 32"], ["MDZHB 12 733 VOSKHOD 67 79 663 32"], ["MDZHB 12 733 VOSKHOD 67 79 66 322"], ["MDZHB 12 733 VOSKHOD 67793 66 32"], ["MDZHB 12 733 VOSKHOD 67 79"], ["MDZHB 12 733 VOSKHOD 67 79 66"]], "outputs": [[false], [true], [true], [false], [true], [true], [false], [true], [true], [false], [false], [false], [false], [true], [true], [false], [false], [false], [true], [false], [false], [false], [true], [false], [false], [false], [false], [false], [false], [false]], "starter_code": "def validate(message):\n\t", "canonical_solution": "import re\nvalidate = lambda msg: bool(re.match('^MDZHB \\\\d\\\\d \\\\d\\\\d\\\\d [A-Z]+ \\\\d\\\\d \\\\d\\\\d \\\\d\\\\d \\\\d\\\\d$', msg))", "entry_point": "validate", "task_id": "TACO_lite/760", "input_output_examples": [[["BAG OF BEES"], ["DEFACE"]], [[48884], [14613198]]]}
{"requirement": "def decipher(cipher):\"\"\"# Task\n Consider the following ciphering algorithm:\n```\nFor each character replace it with its code.\nConcatenate all of the obtained numbers.\n```\nGiven a ciphered string, return the initial one if it is known that it consists only of lowercase letters.\n\n Note: here the character's code means its `decimal ASCII code`, the numerical representation of a character used by most modern programming languages.\n\n# Input/Output\n\n\n - `[input]` string `cipher`\n\n   A non-empty string which is guaranteed to be a cipher for some other string of lowercase letters.\n\n\n - `[output]` a string\n\"\"\"", "inputs": [["10197115121"], ["98"], ["122"]], "outputs": [["easy"], ["b"], ["z"]], "starter_code": "def decipher(cipher):", "canonical_solution": "def decipher(cipher):\n    out = ''\n    while cipher:\n        l = 2 if cipher[0] == '9' else 3\n        out += chr(int(cipher[:l]))\n        cipher = cipher[l:]\n    return out", "entry_point": "decipher", "task_id": "TACO_lite/768", "input_output_examples": [[["welcome to our organization"], ["amz"]], [["qibkyai ty ysv yvgmzenmteyz"], ["man"]]]}
{"requirement": "def distribute(m, n):\"\"\"\nThere are some candies that need to be distributed to some children as fairly as possible (i.e. the variance of result needs to be as small as possible), but I don't know how to distribute them, so I need your help. Your assignment is to write a function with signature `distribute(m, n)` in which `m` represents how many candies there are, while `n` represents how many children there are. The function should return a container which includes the number of candies each child gains.\n\n# Notice\n1. *The candy can't be divided into pieces.*\n2. The list's order doesn't matter.\n\n# Requirements\n1. The case `m < 0` is equivalent to `m == 0`.\n2. If `n <= 0` the function should return an empty container. \n3. If there isn't enough candy to distribute, you should fill the corresponding number with `0`.\n\n# Input\n  1. m: Integer (m <= 100000)\n  2. n: Integer (n <= 1000)\n\n# Output\n  1. [Integer]\n\"\"\"", "inputs": [[-5, 0], [10, 0], [15, 0], [-5, -5], [10, -5], [15, -5]], "outputs": [[[]], [[]], [[]], [[]], [[]], [[]]], "starter_code": "def distribute(m, n):", "canonical_solution": "def distribute(m, n):\n    if n <= 0:\n        return []\n    q, r = divmod(max(m, 0), n)\n    return [q + (i < r) for i in range(n)]", "entry_point": "distribute", "task_id": "TACO_lite/780", "input_output_examples": [[[5]], [[0.03]]]}
{"requirement": "def polynomialize(roots):\"\"\"# Task\n\nGiven an array of roots of a polynomial equation, you should reconstruct this equation.\n\n___\n\n## Output details:\n\n* If the power equals `1`, omit it: `x = 0` instead of `x^1 = 0`\n* If the power equals `0`, omit the `x`: `x - 2 = 0` instead of `x - 2x^0 = 0`\n* There should be no 2 signs in a row: `x - 1 = 0` instead of `x + -1 = 0`\n* If the coefficient equals `0`, skip it: `x^2 - 1 = 0` instead of `x^2 + 0x - 1 = 0`\n* Repeating roots should not be filtered out: `x^2 - 4x + 4 = 0` instead of `x - 2 = 0`\n* The coefficient before `q^n` is always `1`: `x^n + ... = 0` instead of `Ax^n + ... = 0`\n\n___\n\n## Tests:\n\n```python\n      Main suite:                  Edge cases:\n (Reference - 4000 ms)         (Reference - 30 ms)\n\nN of roots | N of tests      N of roots | N of tests\n-----------------------      -----------------------\n    1-10   |   100              20-40   |    125\n 700-750   |    25               2-20   |    125\n```\n\"\"\"", "inputs": [[[0]], [[0, 0]], [[-1]], [[1]], [[1, -1]], [[0, -2, -3]], [[0, 2, 3]], [[1, 2, 3, 4, 5]]], "outputs": [["x = 0"], ["x^2 = 0"], ["x + 1 = 0"], ["x - 1 = 0"], ["x^2 - 1 = 0"], ["x^3 + 5x^2 + 6x = 0"], ["x^3 - 5x^2 + 6x = 0"], ["x^5 - 15x^4 + 85x^3 - 225x^2 + 274x - 120 = 0"]], "starter_code": "def polynomialize(roots):", "canonical_solution": "import re\n\ndef polynomialize(roots):\n\n    def deploy(roots):\n        r = -roots[0]\n        if len(roots) == 1:\n            return [r, 1]\n        sub = deploy(roots[1:]) + [0]\n        return [c * r + sub[i - 1] for i, c in enumerate(sub)]\n    coefs = deploy(roots)\n    poly = ' + '.join(['{}x^{}'.format(c, i) for i, c in enumerate(coefs) if c][::-1])\n    poly = re.sub('x\\\\^0|\\\\^1\\\\b|\\\\b1(?=x)(?!x\\\\^0)', '', poly).replace('+ -', '- ') + ' = 0'\n    return poly", "entry_point": "polynomialize", "task_id": "TACO_lite/786", "input_output_examples": [[["4103432323"]], [["6957678787"]]]}
{"requirement": "def combs(a, b):\"\"\"# Task\n Miss X has only two combs in her possession, both of which are old and miss a tooth or two. She also has many purses of different length, in which she carries the combs. The only way they fit is horizontally and without overlapping. Given teeth' positions on both combs, find the minimum length of the purse she needs to take them with her.\n\n It is guaranteed that there is at least one tooth at each end of the comb. \n\n - Note, that the combs can not be rotated/reversed.\n\n# Input/Output\n\n\n - `[input]` string `comb1`\n\n   A comb is represented as a string. If there is an asterisk ('*') in the ith position, there is a tooth there. Otherwise there is a dot ('.'), which means there is a missing tooth on the comb.\n\n   Constraints: 1 ≤ comb1.length ≤ 10.\n   \n   \n\n - `[input]` string `comb2`\n\n   The second comb is represented in the same way as the first one.\n\n   Constraints: 1 ≤ comb2.length ≤ 10.\n   \n\n - `[output]` an integer\n\n   The minimum length of a purse Miss X needs.\n\"\"\"", "inputs": [["*..*", "*.*"], ["*...*", "*.*"], ["*..*.*", "*.***"], ["*.*", "*.*"], ["*.**", "*.*"]], "outputs": [[5], [5], [9], [4], [5]], "starter_code": "def combs(a, b):", "canonical_solution": "def combs(a, b):\n    return min(mesh(a, b), mesh(b, a))\n\ndef mesh(a, b):\n    for i in range(len(a)):\n        for j, k in zip(a[i:], b):\n            if j + k == '**':\n                break\n        else:\n            return max(i + len(b), len(a))\n    return len(a) + len(b)", "entry_point": "combs", "task_id": "TACO_lite/788", "input_output_examples": [[[["a", 3]], [[9, 3]]], [[["a", 3], ["a", 3], ["a", 3]], [[[9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3]]]]]}
{"requirement": "def ka_co_ka_de_ka_me(word):\"\"\"# Introduction \n\nKa ka ka cypher is a cypher used by small children in some country. When a girl wants to pass something to the other girls and there are some boys nearby, she can use Ka cypher. So only the other girls are able to understand her. \nShe speaks using KA, ie.: \n\n# Task \n\nWrite a function `KaCokadekaMe` (`ka_co_ka_de_ka_me` in Python) that accepts a string word and returns encoded message using ka cypher. \nOur rules:\n- The encoded word should start from `ka`.\n- The `ka` goes after vowel (a,e,i,o,u)\n- When there is multiple vowels together, the `ka` goes only after the last `vowel`\n- When the word is finished by a vowel, do not add the `ka` after\n\n# Input/Output\n\nThe `word` string consists of only lowercase and uppercase characters. There is only 1 word to convert - no white spaces.\n\n# Remark\n\nKa cypher's country residents, please don't hate me for simplifying the way how we divide the words into \"syllables\" in the Kata. I don't want to make it too hard for other nations ;-P\n\"\"\"", "inputs": [["ka"], ["a"], ["aa"], ["z"], ["Abbaa"], ["maintenance"], ["Woodie"], ["Incomprehensibilities"]], "outputs": [["kaka"], ["kaa"], ["kaaa"], ["kaz"], ["kaAkabbaa"], ["kamaikantekanakance"], ["kaWookadie"], ["kaIkancokamprekahekansikabikalikatiekas"]], "starter_code": "def ka_co_ka_de_ka_me(word):", "canonical_solution": "import re\nKA_PATTERN = re.compile('(?![aeiou]+$)([aeiou]+)', re.I)\n\ndef ka_co_ka_de_ka_me(word):\n    return 'ka' + KA_PATTERN.sub('\\\\1ka', word)", "entry_point": "ka_co_ka_de_ka_me", "task_id": "TACO_lite/792", "input_output_examples": [[["12 weeks", "up-to-date", "december"], ["12 months", "16 weeks", "june"], ["40 months", "12 months", "october"]], [["fiveInOne", "rotavirus"], ["fiveInOne", "hibMenC", "measlesMumpsRubella", "meningitisB", "pneumococcal"], ["hibMenC", "measlesMumpsRubella", "meningitisB", "offer fluVaccine", "preSchoolBooster"]]]}
{"requirement": "def xmastree(n):\"\"\"\nCreate a function xmastree(height) that returns a christmas tree of the correct height. The height is passed through to the function and the function should return a list containing each line of the tree. \n\nThe final idea is for the tree to look like this if you decide to print each element of the list: \n\nPad with underscores i.e _ so each line is the same length. The last line forming the tree having only hashtags, no spaces. Also remember the trunk/stem of the tree.\n\"\"\"", "inputs": [[3], [7], [2], [4], [6]], "outputs": [[["__#__", "_###_", "#####", "__#__", "__#__"]], [["______#______", "_____###_____", "____#####____", "___#######___", "__#########__", "_###########_", "#############", "______#______", "______#______"]], [["_#_", "###", "_#_", "_#_"]], [["___#___", "__###__", "_#####_", "#######", "___#___", "___#___"]], [["_____#_____", "____###____", "___#####___", "__#######__", "_#########_", "###########", "_____#_____", "_____#_____"]]], "starter_code": "def xmastree(n):", "canonical_solution": "def xmastree(n):\n    return [('#' * (x * 2 + 1)).center(n * 2 - 1, '_') for x in list(range(n)) + [0] * 2]", "entry_point": "xmastree", "task_id": "TACO_lite/795", "input_output_examples": [[[2, 5, 7], [2, 5, 5], [4, 130, 200], [6, 100, 110], [2, 4900, 4919]], [[5, 7], [], [163, 167], [101, 107], []]]}
{"requirement": "def solve(*args):\"\"\"In this Kata, two players, Alice and Bob, are playing a palindrome game. Alice starts with `string1`, Bob starts with `string2`, and the board starts out as an empty string. Alice and Bob take turns; during a turn, a player selects a letter from his or her string, removes it from the string, and appends it to the board; if the board becomes a palindrome (of length >= 2), the player wins. Alice makes the first move. Since Bob has the disadvantage of playing second, then he wins automatically if letters run out or the board is never a palindrome. Note also that each player can see the other player's letters.\n\nThe problem will be presented as `solve(string1,string2)`. Return 1 if Alice wins and 2 if Bob wins.\n\nPalindrome lengths should be at least `2` characters. More examples in the test cases. \n\nGood luck!\n\"\"\"", "inputs": [["abc", "xyz"], ["abc", "axy"], ["abc", "bax"], ["btzgd", "svjyb"], ["eyfjy", "ooigv"], ["mctimp", "eyqbnh"], ["qtkxttl", "utvohqk"]], "outputs": [[2], [2], [2], [2], [1], [1], [2]], "starter_code": "def solve(*args):", "canonical_solution": "from collections import Counter\n\ndef solve(*args):\n    c1, c2 = map(Counter, args)\n    return 2 - any((c1[k] - c2[k] >= 2 and k not in c2 for k in c1))", "entry_point": "solve", "task_id": "TACO_lite/796", "input_output_examples": [[["abc", "cde"], ["ab", "aba"], ["abab", "bababa"]], [["abCCde"], ["aBABA"], ["ABABbababa"]]]}
{"requirement": "def order_type(arr):\"\"\"\nWrite a function that takes a single array as an argument (containing multiple strings and/or positive numbers and/or arrays), and returns one of four possible string values, depending on the ordering of the lengths of the elements in the input array:\n\nYour function should return...\n\n- “Increasing” - if the lengths of the elements increase from left to right (although it is possible that some neighbouring elements may also be equal in length)\n- “Decreasing” - if the lengths of the elements decrease from left to right (although it is possible that some neighbouring elements may also be equal in length)\n- “Unsorted” - if the lengths of the elements fluctuate from left to right\n- “Constant” - if all element's lengths are the same.\n\nNumbers and Strings should be evaluated based on the number of characters or digits used to write them.\n\nArrays should be evaluated based on the number of elements counted directly in the parent array (but not the number of elements contained in any sub-arrays).\n\nHappy coding! :)\n\"\"\"", "inputs": [[[1, "b", ["p"], 2]], [[123, 1234, 12345, 123456]], [["a", "abc", "abcde", "ab"]], [[[1, 2, 3, 4], [5, 6, 7], [8, 9]]], [[1, 2, 3, 4, 56]], [[["ab", "cdef", "g"], ["hi", "jk", "lmnopq"], ["rst", "uv", "wx"], ["yz"]]], [[[1, 23, 456, 78910], ["abcdef", "ghijklmno", "pqrstuvwxy"], [[1, 23, 456, 78910, ["abcdef", "ghijklmno", "pqrstuvwxy"]], 1234]]], [[]], [["pippi", "pippi", "batuffulo", "pippi"]], [["pippi"]]], "outputs": [["Constant"], ["Increasing"], ["Unsorted"], ["Decreasing"], ["Increasing"], ["Decreasing"], ["Decreasing"], ["Constant"], ["Unsorted"], ["Constant"]], "starter_code": "def order_type(arr):", "canonical_solution": "def order_type(arr):\n    if not arr:\n        return 'Constant'\n    arr = list(map(len, [str(elt) if type(elt) == int else elt for elt in arr]))\n    cmp = sorted(arr)\n    if arr == [arr[0]] * len(arr):\n        s = 'Constant'\n    elif arr == cmp:\n        s = 'Increasing'\n    elif arr == cmp[::-1]:\n        s = 'Decreasing'\n    else:\n        s = 'Unsorted'\n    return s", "entry_point": "order_type", "task_id": "TACO_lite/797", "input_output_examples": [[[4, 0.64, "|~~2~~~22~2~~22~2~~~~2~~~|"], [2, 1.0, "|~~~~~22~2~~~~~|"]], [["|~~X~~~X2~2~~22~2~~~~2~~~|"], ["|~~~~~XX~2~~~~~|"]]]}
{"requirement": "def merge_arrays(a, b):\"\"\"# Task\n You have two sorted arrays `a` and `b`, merge them to form new array of unique items.\n\n If an item is present in both arrays, it should be part of the resulting array if and only if it appears in both arrays the same number of times.\n\n# Input/Output\n\n\n - `[input]` integer array `a`\n\n A sorted array.\n \n 1 ≤ a.length ≤ 500000\n \n \n - `[input]` integer array `b`\n\n A sorted array.\n \n `1 ≤ b.length ≤ 500000`\n \n\n- `[output]` an integer array\n\n  The resulting sorted array.\n\"\"\"", "inputs": [[[10, 10, 10, 15, 20, 20, 25, 25, 30, 7000], [10, 15, 20, 20, 27, 7200]], [[500, 550, 1000, 1000, 1400, 3500], [2, 2, 2, 2, 3, 1500]], [[5], [5, 5, 7]]], "outputs": [[[15, 20, 25, 27, 30, 7000, 7200]], [[2, 3, 500, 550, 1000, 1400, 1500, 3500]], [[7]]], "starter_code": "def merge_arrays(a, b):", "canonical_solution": "def merge_arrays(a, b):\n    out = []\n    for n in a + b:\n        if n in a and n in b:\n            if a.count(n) == b.count(n):\n                out.append(n)\n        else:\n            out.append(n)\n    return sorted(set(out))", "entry_point": "merge_arrays", "task_id": "TACO_lite/798", "input_output_examples": [[[["abc", "abbc", "ab", "xyz", "xy", "zzyx"]], [["wkskkkkkk", "fokoo", "wkskk", "uizzzz", "fokooff", "wkskkkk", "uizzzzzzz"]]], [[1, 8], [5, 7, 9]]]}
{"requirement": "def check_dna(seq1, seq2):\"\"\"\nDNA is a biomolecule that carries genetic information. It is composed of four different building blocks, called nucleotides: adenine (A), thymine (T), cytosine (C) and guanine (G). Two DNA strands join to form a double helix, whereby the nucleotides of one strand bond to the nucleotides of the other strand at the corresponding positions. The bonding is only possible if the nucleotides are complementary: A always pairs with T, and C always pairs with G.\n\nDue to the asymmetry of the DNA, every DNA strand has a direction associated with it. The two strands of the double helix run in opposite directions to each other, which we refer to as the 'up-down' and the 'down-up' directions.\n\nWrite a function `checkDNA` that takes in two DNA sequences as strings, and checks if they are fit to form a fully complementary DNA double helix. The function should return a Boolean `true` if they are complementary, and `false` if there is a sequence mismatch.\n\nNote:\n\n- All sequences will be of non-zero length, and consisting only of `A`, `T`, `C` and `G` characters.\n- All sequences **will be given in the up-down direction**.\n- The two sequences to be compared can be of different length. If this is the case and one strand is entirely bonded by the other, and there is no sequence mismatch between the two, your function should still return `true`.\n- If both strands are only partially bonded, the function should return `false`.\n\n---\n#### If you enjoyed this kata, check out also my other DNA kata: [**Longest Repeated DNA Motif**](http://www.codewars.com/kata/longest-repeated-dna-motif)\n\"\"\"", "inputs": [["GTCTTAGTGTAGCTATGCATGC", "GCATGCATAGCTACACTACGAC"], ["ATGCTACG", "CGTAGCAT"], ["AGTCTGTATGCATCGTACCC", "GGGTACGATGCATACAGACT"], ["TGCTACGTACGATCGACGATCCACGAC", "GTCGTGGATCGTCGATCGTACGTAGCA"], ["ATGCCTACGGCCATATATATTTAG", "CTAAATATGTATGGCCGTAGGCAT"], ["GTCACCGA", "TCGGCTGAC"], ["TAATACCCGACTAATTCCCC", "GGGGAATTTCGGGTATTA"], ["GCTAACTCGAAGCTATACGTTA", "TAACGTATAGCTTCGAGGTTAGC"], ["GCGCTGCTAGCTGATCGA", "ACGTACGATCGATCAGCTAGCAGCGCTAC"], ["GCTAGCACCCATTAGGAGATAC", "CTCCTAATGGGTG"], ["TAGCATCGCCAAATTATGCGTCAGTCTGCCCG", "GGGCA"], ["ACGACTACGTGCGCCGCTAATATT", "GCACGGGTCGT"], ["CGATACGAACCCATAATCG", "CTACACCGGCCGATTATGG"], ["CGACATCGAGGGGGCTCAGAAGTACTGA", "CATGGCGTCAGTACTTCTGAGCC"], ["GAGCAGTTGGTAGTTT", "GTATCGAAACTACCA"], ["TACGATCCAAGGCTACTCAGAG", "GGGATACTCTGAGTAGCCTTGGAA"], ["ATGCTACG", "CGTAGCAA"]], "outputs": [[false], [true], [true], [true], [false], [false], [false], [false], [true], [true], [true], [false], [false], [false], [false], [false], [false]], "starter_code": "def check_dna(seq1, seq2):", "canonical_solution": "def check_dna(seq1, seq2):\n    if len(seq1) < len(seq2):\n        seq1, seq2 = (seq2, seq1)\n    seq2 = seq2[::-1].replace('C', 'g').replace('G', 'c').replace('T', 'a').replace('A', 't').upper()\n    return seq1.find(seq2) >= 0", "entry_point": "check_dna", "task_id": "TACO_lite/800", "input_output_examples": [[[["white", "goodness"], ["blue", "tranquility"]]], [[{"white": "goodness"}, {"blue": "tranquility"}]]]}
{"requirement": "def select_subarray(arr):\"\"\"\nYou will be given a certain array of length ```n```, such that ```n > 4```, having positive and negative integers but there will be no zeroes and all the elements will occur once in it.\n\nWe may obtain an amount of ```n``` sub-arrays of length ```n - 1```, removing one element at a time (from left to right). \n\nFor each subarray, let's calculate the product and sum of its elements with the corresponding absolute value of the quotient, ```q = SubProduct/SubSum``` (if it is possible, SubSum cannot be 0). \nThen we select the array with the lowest value of ```|q|```(absolute value).\n\nLet's compare the given array with the selected subarray:\n\nThe difference between them is at the index for the given array, with element , so we put both things for a result ```[index, arr[index]]```.\n\nThat means that to obtain the selected subarray we have to take out the value at index.\nWe need a function that receives an array as an argument and outputs the the pair ```[index, arr[index]]``` that generates the subarray with  the lowest value of ```|q|```.\n\nIn Javascript the function will be ```selectSubarray()```.\n\nWe may have some special arrays that may have more than one solution as the one that follows below.\nIf there is more than one result the function should output a 2Darray sorted by the index of the element removed from the array.\n\nFeatures of the random tests:\n```\nNumber of tests = 200\nlength of the array, l, such that 20 <= l <= 100\n```\n\nEnjoy it!!\n\"\"\"", "inputs": [[[1, 23, 2, -8, 5]], [[1, 3, 23, 4, 2, -8, 5, 18]], [[2, -8, 5, 18]], [[10, 20, -30, 100, 200]]], "outputs": [[[3, -8]], [[2, 23]], [[1, -8]], [[[3, 100], [4, 200]]]], "starter_code": "def select_subarray(arr):", "canonical_solution": "from functools import reduce\nfrom operator import mul\n\ndef select_subarray(arr):\n    total = sum(arr)\n    m = reduce(mul, arr)\n    qs = [(abs(m // x / (total - x)) if total - x else float('inf'), i) for i, x in enumerate(arr)]\n    q = min(qs)\n    result = [[i, arr[i]] for x, i in qs if x == q[0]]\n    return result[0] if len(result) == 1 else result", "entry_point": "select_subarray", "task_id": "TACO_lite/802", "input_output_examples": [[[["1:0", "2:0", "3:0", "4:0", "2:1", "3:1", "4:1", "3:2", "4:2", "4:3"]]], [[30]]]}
{"requirement": "def describelist(lst):\"\"\"\nWrite function describelist which returns \"empty\" if the list is empty or \"singleton\" if it contains only one element or \"longer\"\" if more.\n\"\"\"", "inputs": [[[]], [[1]], [[1, 2, 5, 4]], [["one"]], [["one", "two"]], [[[1, 2]]]], "outputs": [["empty"], ["singleton"], ["longer"], ["singleton"], ["longer"], ["singleton"]], "starter_code": "def describelist(lst):", "canonical_solution": "def describelist(lst):\n    return ['empty', 'singleton', 'longer'][min(len(lst), 2)]", "entry_point": "describelist", "task_id": "TACO_lite/803", "input_output_examples": [[[2, 5, 7], [2, 5, 5], [4, 130, 200], [6, 100, 110], [11, 30000, 100000]], [[5, 7], null, [163, 167], null, null]]}
{"requirement": "def fold_cube(nums):\"\"\"\n# Task\n\nThe function `fold_cube(number_list)` should return a boolean based on a net (given as a number list), if the net can fold into a cube. \nYour code must be effecient and complete the tests within 500ms. \n\n## Input\n\nImagine a net such as the one below.\n\n```\n@\n@ @ @ @\n    @\n```\nThen, put it on the table with each `@` being one cell.\n\n```\n--------------------------\n|  1 |  2 |  3 |  4 |  5 |\n--------------------------\n|  6 |  7 |  8 |  9 | 10 |\n--------------------------\n| 11 | 12 | 13 | 14 | 15 |\n--------------------------\n| 16 | 17 | 18 | 19 | 20 |\n--------------------------\n| 21 | 22 | 23 | 24 | 25 |\n--------------------------\n```\nThe number list for a net will be the numbers the net falls on when placed on the table. Note that the numbers in the list won't always be in order. The position of the net can be anywhere on the table, it can also be rotated.\n\n## Output\n\n`fold_cube` should return `True` if the net can be folded into a cube. `False` if not.\n\n---\n\n### If you liked this kata.... check out these!             \n- [Folding a 4D Cube (Tesseract)](https://www.codewars.com/kata/5f3b561bc4a71f000f191ef7)  \n- [Wraping a net around a cube](https://www.codewars.com/kata/5f4af9c169f1cd0001ae764d)\n\"\"\"", "inputs": [[[24, 20, 14, 19, 18]], [[1, 7, 6, 17, 12]], [[12, 14, 13, 9, 10]], [[18, 16, 17, 15, 13]], [[1, 25, 24, 2, 3]], [[1, 1, 1, 1, 1]], [[2, 3, 8, 9, 10]]], "outputs": [[true], [false], [false], [true], [false], [false], [true]], "starter_code": "def fold_cube(nums):", "canonical_solution": "def fold_cube(nums):\n    return expand(nums.pop(), set(nums), 1, 2, 3) == {1, 2, 3, -1, -2, -3}\n\ndef expand(val, nums, x, y, z):\n    dirs = {z}\n    for num in nums.copy():\n        if abs(val - num) not in (1, 5) or {val % 5, num % 5} == {0, 1}:\n            continue\n        nums.discard(num)\n        diff = val - num\n        sign = diff // abs(diff)\n        nx, ny, nz = (x, z * sign, -y * sign) if abs(diff) == 1 else (-z * sign, y, x * sign)\n        dirs |= expand(num, nums, nx, ny, nz)\n    return dirs", "entry_point": "fold_cube", "task_id": "TACO_lite/805", "input_output_examples": [[["Hello World"], ["ABC"]], [["hELLO wORLD"], ["abc"]]]}
{"requirement": "def matrix_addition(a, b):\"\"\"\nWrite a function that accepts two square matrices (`N x N` two dimensional arrays), and return the sum of the two. Both matrices being passed into the function will be of size `N x N` (square), containing only integers.\n\nHow to sum two matrices:\n\nTake each cell `[n][m]` from the first matrix, and add it with the same `[n][m]` cell from the second matrix. This will be cell `[n][m]` of the solution matrix.\n\"\"\"", "inputs": [[[[3, 4, 4], [6, 4, 4], [2, 2, 4]], [[2, 2, 1], [3, 2, 3], [1, 1, 3]]], [[[3, 5], [3, 5]], [[2, 3], [2, 3]]], [[[3]], [[2]]]], "outputs": [[[[3, 4, 4], [6, 4, 4], [2, 2, 4]]], [[[3, 5], [3, 5]]], [[[3]]]], "starter_code": "def matrix_addition(a, b):", "canonical_solution": "def matrix_addition(a, b):\n    for row in range(len(a)):\n        for index in range(len(a)):\n            a[row][index] += b[row][index]\n    return a", "entry_point": "matrix_addition", "task_id": "TACO_lite/808", "input_output_examples": [[[0], [56], [60], [999], [10004], [8964631]], [[""], ["5*10+6"], ["6*10"], ["9*100+9*10+9"], ["1*10000+4"], ["8*1000000+9*100000+6*10000+4*1000+6*100+3*10+1"]]]}
{"requirement": "def switch_lights(initial_states):\"\"\"\n# Task\n `N` candles are placed in a row, some of them are initially lit. For each candle from the 1st to the Nth the following algorithm is applied: if the observed candle is lit then states of this candle and all candles before it are changed to the opposite. Which candles will remain lit after applying the algorithm to all candles in the order they are placed in the line?\n\n# Input/Output\n\n - `[input]` integer array `a`\n\n     Initial situation - array of zeros and ones of length N, 1 means that the corresponding candle is lit.\n\n    Constraints: `2 ≤ a.length ≤ 5000.`\n\n - `[output]` an integer array\n\n    Situation after applying the algorithm - array in the same format as input with the same length.\n\"\"\"", "inputs": [[[1, 1, 1, 1, 1]], [[0, 0]], [[1, 0, 0, 1, 0, 1, 0, 1]], [[1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1]]], "outputs": [[[0, 1, 0, 1, 0]], [[0, 0]], [[1, 1, 1, 0, 0, 1, 1, 0]], [[1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0]]], "starter_code": "def switch_lights(initial_states):", "canonical_solution": "def switch_lights(initial_states):\n    states = list(initial_states)\n    parity = 0\n    for i in reversed(range(len(states))):\n        parity ^= initial_states[i]\n        states[i] ^= parity\n    return states", "entry_point": "switch_lights", "task_id": "TACO_lite/812", "input_output_examples": [[[2], [4]], [[0], [1]]]}
{"requirement": "def hot_singles(arr1, arr2):\"\"\"\nWrite a function that takes two arguments, and returns a new array populated with the elements **that only appear once, in either one array or the other, taken only once**; display order should follow what appears in arr1 first, then arr2: \n\nSPECIAL THANKS: @JulianKolbe !\n\"\"\"", "inputs": [[["tartar", "blanket", "domino"], ["blanket"]], [[77, "basketweave"], [78, 42, "basketweave"]], [[100, 45, "ciao"], [100, 2, 3, 45, 5]], [[10, 200, 30], [10, 20, 3, 4, 5, 5, 5, 200]], [[1, 2, 3, 3], [3, 2, 1, 4, 5, 4]]], "outputs": [[["tartar", "domino"]], [[77, 78, 42]], [["ciao", 2, 3, 5]], [[30, 20, 3, 4, 5]], [[4, 5]]], "starter_code": "def hot_singles(arr1, arr2):", "canonical_solution": "def hot_singles(arr1, arr2):\n    a = []\n    for x in arr1 + arr2:\n        if x in set(arr1) ^ set(arr2) and x not in a:\n            a.append(x)\n    return a", "entry_point": "hot_singles", "task_id": "TACO_lite/813", "input_output_examples": [[[""], ["!"], ["!ab? ?"], ["!!"], ["!??"], ["!???"], ["!!!??"], ["!!!???"], ["!???!!"], ["!????!!!?"]], [[0], [0], [2], [0], [2], [3], [6], [9], [9], [20]]]}
{"requirement": "def summation(num):\"\"\"# Summation\n\nWrite a program that finds the summation of every number from 1 to num. The number will always be a positive integer greater than 0.\n\"\"\"", "inputs": [[1], [8], [22], [100], [213]], "outputs": [[1], [36], [253], [5050], [22791]], "starter_code": "def summation(num):", "canonical_solution": "def summation(num):\n    return sum(range(num + 1))", "entry_point": "summation", "task_id": "TACO_lite/814", "input_output_examples": [[[3], [9], [17]], [["  *\r\n ***\r\n*****\r\n ###"], ["    *\r\n   ***\r\n  *****\r\n   ***\r\n  *****\r\n *******\r\n  *****\r\n *******\r\n*********\r\n   ###"], ["      *\r\n     ***\r\n    *****\r\n     ***\r\n    *****\r\n   *******\r\n    *****\r\n   *******\r\n  *********\r\n   *******\r\n  *********\r\n ***********\r\n  *********\r\n ***********\r\n*************\r\n     ###"]]]}
{"requirement": "def pair_of_shoes(a):\"\"\"# Task\n Yesterday you found some shoes in your room. Each shoe is described by two values:\n```\ntype indicates if it's a left or a right shoe;\nsize is the size of the shoe.\n```\n Your task is to check whether it is possible to pair the shoes you found in such a way that each pair consists of a right and a left shoe of an equal size.\n\n# Input/Output\n\n - `[input]` 2D integer array `shoes`\n\n Array of shoes. Each shoe is given in the format [type, size], where type is either 0 or 1 for left and right respectively, and size is a positive integer.\n\n Constraints: `2 ≤ shoes.length ≤ 50,  1 ≤ shoes[i][1] ≤ 100.`\n\n - `[output]` a boolean value\n\n   `true` if it is possible to pair the shoes, `false` otherwise.\n\"\"\"", "inputs": [[[[0, 21], [1, 23], [1, 21], [0, 23]]], [[[0, 21], [1, 23], [1, 21], [1, 23]]], [[[0, 23], [1, 21], [1, 23], [0, 21], [1, 22], [0, 22]]], [[[0, 23], [1, 21], [1, 23], [0, 21]]], [[[0, 23], [1, 21], [1, 22], [0, 21]]], [[[0, 23]]], [[[0, 23], [1, 23]]], [[[0, 23], [1, 23], [1, 23], [0, 23]]], [[[0, 23], [1, 22]]], [[[0, 23], [1, 23], [1, 23], [0, 23], [0, 23], [0, 23]]]], "outputs": [[true], [false], [true], [true], [false], [false], [true], [true], [false], [false]], "starter_code": "def pair_of_shoes(a):", "canonical_solution": "def pair_of_shoes(a):\n    return sorted((s for lr, s in a if lr == 1)) == sorted((s for lr, s in a if lr == 0))", "entry_point": "pair_of_shoes", "task_id": "TACO_lite/815", "input_output_examples": [[[["a", "b", "c", "d"], [1, 2, 3]], [["a", "b", "c"], [1, 2, 3, 4]]], [[{"a": 1, "b": 2, "c": 3, "d": null}], [{"a": 1, "b": 2, "c": 3}]]]}
{"requirement": "def queue_time(customers, n):\"\"\"\nThere is a queue for the self-checkout tills at the supermarket. Your task is write a function to calculate the total time required for all the customers to check out!\n\n### input\n```if-not:c\n* customers: an array of positive integers representing the queue. Each integer represents a customer, and its value is the amount of time they require to check out.\n* n: a positive integer, the number of checkout tills.\n```\n```if:c\n* customers: a pointer to an array of positive integers representing the queue. Each integer represents a customer, and its value is the amount of time they require to check out.\n* customers_length: the length of the array that `customers` points to.\n* n: a positive integer, the number of checkout tills.\n```\n\n### output\nThe function should return an integer, the total time required.\n\n-------------------------------------------\n\n## Important\n**Please look at the clarifications below, to ensure you understand the task correctly :)**\n\n-------\n\n### Clarifications\n\n * There is only ONE queue serving many tills, and\n * The order of the queue NEVER changes, and\n * The front person in the queue (i.e. the first element in the array/list) proceeds to a till as soon as it becomes free.\n\nN.B. You should assume that all the test input will be valid, as specified above.\n\nP.S. The situation in this kata can be likened to the more-computer-science-related idea of a thread pool, with relation to running multiple processes at the same time: https://en.wikipedia.org/wiki/Thread_pool\n\"\"\"", "inputs": [[[], 1], [[5], 1], [[2], 5], [[1, 2, 3, 4, 5], 1], [[1, 2, 3, 4, 5], 100], [[2, 2, 3, 3, 4, 4], 2]], "outputs": [[0], [5], [2], [15], [5], [9]], "starter_code": "def queue_time(customers, n):", "canonical_solution": "def queue_time(customers, n):\n    l = [0] * n\n    for i in customers:\n        l[l.index(min(l))] += i\n    return max(l)", "entry_point": "queue_time", "task_id": "TACO_lite/819", "input_output_examples": [[[0, 3, 4, 2]], [[true]]]}
{"requirement": "def calc(gamemap):\"\"\"# Task\n\nJohn won the championship of a TV show. He can get some bonuses.\n\nHe needs to play a game to determine the amount of his bonus.\n\nHere are `n` rows and `m` columns of cards were placed on the ground. A non-negative number is written on each card.\n\nThe rules of the game are:\n\n- Player starts from the top-left corner, walk to the bottom-right corner. \n\n- Players can only walk downward or right. \n\n- The sum of the numbers collected by the players will be used as the bonus.\n\nJohn has two chances to play this game on a game map. Specifically, when John finishes the game, the card on his path will be removed, and then he can walk again.\n\nYour task is to help John calculate the maximum amount of bonuses he can get.\n\n# Input\n\n- `gameMap/gamemap`: A `n` x `m` integer array. Each element represents the number on the card.\n  - `4 <= n,m <= 40(Pyhon)/100(JS)`\n\n\n- All inputs are valid.\n\n# Output\n\nAn integer. the maximum amount of bonuses John can get.\n\"\"\"", "inputs": [[[[1, 3, 9], [2, 8, 5], [5, 7, 4]]], [[[11, 72, 38], [80, 69, 65], [68, 96, 99]]], [[[1, 5, 1, 1], [1, 5, 5, 1], [5, 5, 5, 1], [1, 1, 5, 1]]], [[[0, 0, 2, 3, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 4, 0, 0], [0, 0, 2, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0]]]], "outputs": [[39], [560], [40], [25]], "starter_code": "def calc(gamemap):", "canonical_solution": "def calc(gamemap):\n    nr, nc = (len(gamemap), len(gamemap[0]))\n\n    def _i(ra, rb):\n        return ra * nr + rb\n    vs, ws = ([0] * nr ** 2, [0] * nr ** 2)\n    for s in range(nr + nc - 1):\n        for ra in range(max(0, s - nc + 1), min(s + 1, nr)):\n            for rb in range(ra, min(s + 1, nr)):\n                ws[_i(ra, rb)] = gamemap[ra][s - ra] + (gamemap[rb][s - rb] if ra != rb else 0) + max((vs[_i(ra - da, rb - db)] for da in (0, 1) if da <= ra for db in (0, 1) if db <= rb))\n        vs, ws = (ws, vs)\n    return vs[-1]", "entry_point": "calc", "task_id": "TACO_lite/823", "input_output_examples": [[["abc"]], [["bac"]]]}
{"requirement": "def pow_root_pandigit(val, n, k):A **pandigital number** is one that has its digits from ```1``` to ```9``` occuring only once (they do not have the digit 0).\n\nThe number ```169```, is the first pandigital square, higher than ```100```, having its square root, ```13```, pandigital too.\n\nThe number ```1728``` is the first pandigital cubic, higher than ```1000```, having its cubic root, ```12```, pandigital too.\n\nMake the function ```pow_root_pandigit()```, that receives three arguments:\n\n- a minimum number, ```val```\n\n- the exponent of the n-perfect powers to search, ```n```\n\n- ```k```, maximum amount of terms that we want in the output\n\nThe function should output a 2D-array with an amount of k pairs of numbers(or an array of an only pair if we have this case). Each pair has a nth-perfect power pandigital higher than val with its respective nth-root that is pandigital, too.\n\nThe function should work in this way:\n```python\npow_root_pandigit(val, n, k) = [[root1, pow1], [root2, pow2], ...., [rootk, powk]]\n\"\"\"\nroot1 < root2 <.....< rootk\nval < pow1 < pow2 < ....< powk\nroot1 ^ n = pow1 // root2 ^ n = pow2 //........// rootk ^ n = powk\nall pairs rooti, powi are pandigitals\n\"\"\"\n```\n\nThe output in not inclusive for val.\n\nFurthermore, if the minimum value, ```val``` is high enough, the result may be an empty list.\n\nYou may suposse that the input ```val```, ```n``` will be always:  ```val > 10``` and ```n > 2```.\n\nEnjoy it!!", "inputs": [[388, 2, 3], [1750, 3, 5], [1728, 3, 4], [600000000, 2, 5], [900000000, 2, 5]], "outputs": [[[[23, 529], [24, 576], [25, 625]]], [[[13, 2197], [17, 4913], [18, 5832], [19, 6859], [21, 9261]]], [[[13, 2197], [17, 4913], [18, 5832], [19, 6859]]], [[25941, 672935481]], [[]]], "starter_code": "def pow_root_pandigit(val, n, k):", "canonical_solution": "def is_pandigital(n):\n    s = str(n)\n    return not '0' in s and len(set(s)) == len(s)\n\ndef pow_root_pandigit(val, n, k):\n    res = []\n    current = int(round(val ** (1.0 / n), 5)) + 1\n    while len(res) < k and current <= 987654321 ** (1.0 / n):\n        if is_pandigital(current):\n            p = current ** n\n            if is_pandigital(p):\n                res += [[current, p]]\n        current += 1\n    return res if len(res) != 1 else res[0]", "entry_point": "pow_root_pandigit", "task_id": "TACO_lite/824", "input_output_examples": [[[0, 200]], [[36]]]}
{"requirement": "def chess_triangle(n, m):\"\"\"# Task\n Consider a `bishop`, a `knight` and a `rook` on an `n × m` chessboard. They are said to form a `triangle` if each piece attacks exactly one other piece and is attacked by exactly one piece. \n \n Calculate the number of ways to choose positions of the pieces to form a triangle.\n\n Note that the bishop attacks pieces sharing the common diagonal with it; the rook attacks in horizontal and vertical directions; and, finally, the knight attacks squares which are two squares horizontally and one square vertically, or two squares vertically and one square horizontally away from its position.\n\n ![](https://codefightsuserpics.s3.amazonaws.com/tasks/chessTriangle/img/moves.png?_tm=1473934712872)\n\n# Input/Output\n\n\n- `[input]` integer `n`\n\n    Constraints: `1 ≤ n ≤ 40.`\n\n\n - `[input]` integer `m`\n\n    Constraints: `1 ≤ m ≤ 40, 3 ≤ n x m`.\n\n\n - `[output]` an integer\n\"\"\"", "inputs": [[2, 3], [1, 30], [3, 3], [2, 2], [5, 2], [40, 40]], "outputs": [[8], [0], [48], [0], [40], [92400]], "starter_code": "def chess_triangle(n, m):", "canonical_solution": "def chess_triangle(n, m):\n    return sum((8 * (n - x + 1) * (m - y + 1) for dims in {(3, 4), (3, 3), (2, 4), (2, 3)} for x, y in [dims, dims[::-1]] if x <= n and y <= m))", "entry_point": "chess_triangle", "task_id": "TACO_lite/826", "input_output_examples": [[[153], [1634]], [[true], [true]]]}
{"requirement": "def remove_vowels(s):\"\"\"**This Kata is intended as a small challenge for my students**\n\nCreate a function, called ``removeVowels`` (or ``remove_vowels``), that takes a string argument and returns that same string with all vowels removed (vowels are \"a\", \"e\", \"i\", \"o\", \"u\").\n\"\"\"", "inputs": [["drake"], ["scholarstem"], ["codewars"], ["high fives!"], [""], ["i"], ["b"]], "outputs": [["drk"], ["schlrstm"], ["cdwrs"], ["hgh fvs!"], [""], [""], ["b"]], "starter_code": "def remove_vowels(s):", "canonical_solution": "REMOVE_VOWS = str.maketrans('', '', 'aeiou')\n\ndef remove_vowels(s):\n    return s.translate(REMOVE_VOWS)", "entry_point": "remove_vowels", "task_id": "TACO_lite/830", "input_output_examples": [[["Beyonce", "Knowles"], ["grae", "drake"]], [["Greetings, master KnoBe"], ["Greetings, master DraGr"]]]}
{"requirement": "def is_isogram(string):\"\"\"\nAn isogram is a word that has no repeating letters, consecutive or non-consecutive. Implement a function that determines whether a string that contains only letters is an isogram. Assume the empty string is an isogram. Ignore letter case.\n\"\"\"", "inputs": [["Dermatoglyphics"], ["isogram"], ["moose"], ["isIsogram"], ["aba"], ["moOse"], ["thumbscrewjapingly"], ["abcdefghijklmnopqrstuvwxyz"], ["abcdefghijklmnopqrstuwwxyz"], [""]], "outputs": [[true], [true], [false], [false], [false], [false], [true], [true], [false], [true]], "starter_code": "def is_isogram(string):", "canonical_solution": "def is_isogram(string):\n    return len(string) == len(set(string.lower()))", "entry_point": "is_isogram", "task_id": "TACO_lite/831", "input_output_examples": [[[[15, 11, 10, 7, 12]]], [[[15, 7, 12, 10, 11]]]]}
{"requirement": "def longest_collatz(input_array):\"\"\"\n##Background - the Collatz Conjecture:\n\nImagine you are given a positive integer, `n`, then:\n\n* if `n` is even, calculate: `n / 2`\n* if `n` is odd, calculate: `3 * n + 1`\n\nRepeat until your answer is `1`. The Collatz conjecture states that performing this operation repeatedly, you will always eventually reach `1`.\n\nYou can try creating Collatz sequences with [this](http://www.codewars.com/kata/5286b2e162056fd0cb000c20) kata. For further information, see the [wiki page](https://en.wikipedia.org/wiki/Collatz_conjecture).\n\n##Now! Your task:\n\n**Given an array of positive integers, return the integer whose Collatz sequence is the longest.**\n\nExplanation: The Collatz sequence for each integer in the array should be calculated to determine which one has the longest sequence.\n\n##Note:\n\nThere may be more than one answer, i.e. two or more integers produce the longest Collatz sequence, because they happen to have sequences of the same length. **In this case, your function should return the integer that appears first in the array.**\n\"\"\"", "inputs": [[[1, 5, 27, 4]], [[64, 64, 27, 64]], [[75, 226, 113, 340]], [[340, 113, 226, 75]], [[75, 113, 226, 75]]], "outputs": [[27], [27], [75], [75], [75]], "starter_code": "def longest_collatz(input_array):", "canonical_solution": "def collatz(n, t=1):\n    return t if n == 1 else collatz(n / 2 if n % 2 == 0 else 3 * n + 1, t + 1)\n\ndef longest_collatz(input_array):\n    return sorted(list(zip(list(map(collatz, input_array)), input_array)))[-1][1]", "entry_point": "longest_collatz", "task_id": "TACO_lite/832", "input_output_examples": [[[[1, 2, 3, 4], 2]], [[3]]]}
{"requirement": "def spreadsheet(s):\"\"\"\n# Task\n John is new to spreadsheets. He is well aware of rows and columns, but he is not comfortable with spreadsheets numbering system.\n\nSince John has a lot of work to do both in row-column and spreadsheet systems, he needs a program that converts cell numbers from one system to another.\n\n\n- Input/Output\n\n\n - `[input]` string `s`\n\n  The position (in spreadsheet or row-column numbering system).\n\n  `Spreadsheet : A1 to CRXO65535`\n  \n  `Row-Column: R1C1 to R65535C65535`\n  \n  \n - `[output]` a string\n\n  The position (in the opposite format; if input was in spreadsheet system, the output should be int row-column system, and vise versa).\n\"\"\"", "inputs": [["A1"], ["R1C1"], ["R5C4"], ["AA48"], ["BK12"], ["R12C63"], ["R85C26"], ["R31C78"], ["BZ31"]], "outputs": [["R1C1"], ["A1"], ["D5"], ["R48C27"], ["R12C63"], ["BK12"], ["Z85"], ["BZ31"], ["R31C78"]], "starter_code": "def spreadsheet(s):", "canonical_solution": "import re\n\ndef spreadsheet(s):\n    nums = re.findall('(\\\\d+)', s)\n    if len(nums) == 2:\n        n, cStr = (int(nums[1]), '')\n        while n:\n            n, r = divmod(n - 1, 26)\n            cStr += chr(r + 65)\n        return '{}{}'.format(cStr[::-1], nums[0])\n    else:\n        return 'R{}C{}'.format(nums[0], sum((26 ** i * (ord(c) - 64) for i, c in enumerate(re.sub('\\\\d', '', s)[::-1]))))", "entry_point": "spreadsheet", "task_id": "TACO_lite/834", "input_output_examples": [[["Example Input"], ["Example string"]], [["iNPUT eXAMPLE"], ["STRING eXAMPLE"]]]}
{"requirement": "def rec(n):\"\"\"\n## Task\n\nFind the sum of the first `n` elements in the Recamán Sequence.\n\nInput range:\n\n```python\n1000 tests\n0 <= n <= 2,500,000\n```\n\n___\n\n## Sequence\n\nThe sequence is formed using the next formula:\n* We start with `0`\n* At each step `i`, we subtract `i` from the previous number\n* If the result is not negative, and not yet present in the sequence, it becomes the `i`th element of the sequence\n* Otherwise the `i`th element of the sequence will be previous number plus `i`\n\nThe beginning of the sequence is `[0, 1, 3, 6, 2, ...]` because:  \n0) `0` <- we start with `0`  \n1) `1` <- `0 - 1` is negative, hence we choose `0 + 1`  \n2) `3` <- `1 - 2` is negative, hence we choose `1 + 2`  \n3) `6` <-`3 - 3` is not negative, but we already have a `0` in the sequence, hence we choose `3 + 3`  \n4) `2` <- `6 - 4` is positive, and is not present in the sequence yet, so we go for it\n\"\"\"", "inputs": [[0], [1], [2], [5], [100], [200], [1000], [10000]], "outputs": [[0], [0], [1], [12], [7496], [36190], [837722], [82590002]], "starter_code": "def rec(n):", "canonical_solution": "S, SS, SUM = ([0], {0}, [0])\n\ndef rec(n):\n    while len(S) <= n:\n        v = S[-1] - len(S)\n        if v <= 0 or v in SS:\n            v += 2 * len(S)\n        S.append(v)\n        SS.add(v)\n        SUM.append(SUM[-1] + v)\n    return SUM[n - 1]", "entry_point": "rec", "task_id": "TACO_lite/838", "input_output_examples": [[[3], [2]], [["Earth"], ["Venus"]]]}
{"requirement": "def numberofsteps(steps, m):\"\"\"Vasya wants to climb up a stair of certain amount of steps (Input parameter 1). There are 2 simple rules that he has to stick to.\n\n1. Vasya can climb 1 or 2 steps at each move.\n2. Vasya wants the number of moves to be a multiple of a certain integer. (Input parameter 2).\n\n### Task:\nWhat is the `MINIMAL` number of moves making him climb to the top of the stairs that satisfies his conditions?\n\n### Input\n\n1. Number of stairs:    `0 <  N  ≤ 10000` ;\n2. Integer to be multiplied : `1 < M ≤ 10 `;\n\n### Output\n\n1. Return a single integer - the minimal number of moves being a multiple of M;\n2. If there is no way he can climb satisfying condition return - 1 instead. (`Nothing` in Haskell)\n\"\"\"", "inputs": [[10, 2], [3, 5], [29, 7], [2, 2], [1, 2], [10000, 2], [10000, 3], [10000, 10], [9999, 3], [9999, 2], [9999, 10], [9999, 9], [18, 10], [19, 10], [20, 10], [7688, 5], [4608, 5], [3979, 2], [5, 2]], "outputs": [[6], [-1], [21], [2], [-1], [5000], [5001], [5000], [5001], [5000], [5000], [5004], [10], [10], [10], [3845], [2305], [1990], [4]], "starter_code": "def numberofsteps(steps, m):", "canonical_solution": "def numberofsteps(steps, m):\n    if steps < m:\n        return -1\n    if steps % 2 == 0 and steps / 2 % m == 0:\n        return steps / 2\n    return steps / 2 + m - steps / 2 % m", "entry_point": "numberofsteps", "task_id": "TACO_lite/840", "input_output_examples": [[[3], [4]], [[7], [14]]]}
{"requirement": "def similarity(a, b):\"\"\"# Task\n Your task is to find the similarity of given sorted arrays `a` and `b`, which is defined as follows: \n \n you take the number of elements which are present in both arrays and divide it by the number of elements which are present in at least one array.\n\n It also can be written as a formula `similarity(A, B) = #(A ∩ B) / #(A ∪ B)`, where `#(C)` is the number of elements in C, `∩` is intersection of arrays, `∪` is union of arrays.\n\n This is known as `Jaccard similarity`.\n\n The result is guaranteed to fit any floating-point type without rounding.\n\n# Input/Output\n\n\n - `[input]` integer array `a`\n\n  A `sorted` array of positive integers. \n  \n  All elements are `different` and are `less than 100`.\n  \n  `1 ≤ a.length ≤ 100`\n\n\n - `[input]` integer array `b`\n\n  An array in the same format as `a`.\n\n\n - `[output]` a float number\n\n  The similarity of the arrays.\n  \n  ```Haskell\n  \n  In Haskell the two arrays are passed as a touple.\n  ```\n\"\"\"", "inputs": [[[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [4, 5, 6]], [[1, 2, 4, 6, 7], [2, 3, 4, 7]], [[1, 2, 6, 8, 9], [0, 1, 4, 5, 6, 8, 9]], [[0, 1, 3, 4, 5, 6, 9, 14, 15, 16, 17, 18, 19], [1, 4, 10, 12, 13, 14, 15, 16]]], "outputs": [[1], [0], [0.5], [0.5], [0.3125]], "starter_code": "def similarity(a, b):", "canonical_solution": "def similarity(a, b):\n    try:\n        return len(set(a) & set(b)) / len(set(a) | set(b))\n    except:\n        return 0", "entry_point": "similarity", "task_id": "TACO_lite/841", "input_output_examples": [[[[1, 2, 3, 5, 7, 9]]], [[5]]]}
{"requirement": "def max_sumdig(nMax, maxSum):\"\"\"\nWe want to find the numbers higher or equal than 1000 that the sum of every four consecutives digits cannot be higher than a certain given value.\nIf the number is ``` num = d1d2d3d4d5d6 ```, and the maximum sum of 4 contiguous digits is ```maxSum```, then:\n```python\nd1 + d2 + d3 + d4 <= maxSum\nd2 + d3 + d4 + d5 <= maxSum\nd3 + d4 + d5 + d6 <= maxSum\n```\nFor that purpose, we need to create a function, ```max_sumdig()```, that receives ```nMax```, as the max value of the interval to study (the range (1000, nMax) ), and a certain value, ```maxSum```, the maximum sum that every four consecutive digits should be less or equal to. The function should output the following list with the data detailed bellow:\n\n```[(1), (2), (3)]```\n\n(1) - the amount of numbers that satisfy the constraint presented above \n\n(2) - the closest number to the mean of the results, if there are more than one, the smallest number should be chosen.\n\n(3) - the total sum of all the found numbers\n\nHappy coding!!\n\"\"\"", "inputs": [[2000, 3], [2000, 4], [2000, 7], [3000, 7], [4000, 4], [5000, 2], [5000, 3], [5000, 4], [5000, 5], [5000, 6], [5000, 7], [5000, 8], [5000, 9]], "outputs": [[[11, 1110, 12555]], [[21, 1120, 23665]], [[85, 1200, 99986]], [[141, 1600, 220756]], [[35, 2000, 58331]], [[5, 1100, 6111]], [[15, 1200, 21666]], [[35, 2000, 58331]], [[70, 2000, 132216]], [[122, 2010, 244875]], [[196, 2110, 413306]], [[296, 2200, 649951]], [[426, 2250, 967696]]], "starter_code": "def max_sumdig(nMax, maxSum):", "canonical_solution": "def check(num, max_sum):\n    l = [int(i) for i in str(num)]\n    for i in range(0, len(l) - 3):\n        if sum(l[i:i + 4]) > max_sum:\n            return False\n    return True\n\ndef max_sumdig(nMax, maxSum):\n    found = [i for i in range(1000, nMax + 1) if check(i, maxSum)]\n    mean = sum(found) / float(len(found))\n    for i in range(len(found) - 1):\n        if abs(mean - found[i]) < abs(mean - found[i + 1]):\n            mean = found[i]\n            break\n    return [len(found), mean, sum(found)]", "entry_point": "max_sumdig", "task_id": "TACO_lite/843", "input_output_examples": [[[[1, 1, 2, 2, 3]], [[2, 2, 2, 56, 56, 56, 8, 8]], [[34, 76, 12, 99, 64, 99, 76, 12, 34]]], [[3], [8], [64]]]}
{"requirement": "def amazon_check_mate(*args):\"\"\"\n# Task\n An `amazon` (also known as a queen+knight compound) is an imaginary chess piece that can move like a `queen` or a `knight` (or, equivalently, like a `rook`, `bishop`, or `knight`). The diagram below shows all squares which the amazon attacks from e4 (circles represent knight-like moves while crosses correspond to queen-like moves).\n\n ![](https://codefightsuserpics.s3.amazonaws.com/tasks/amazonCheckmate/img/amazon.png?_tm=1473934566013)\n\n Recently you've come across a diagram with only three pieces left on the board: a `white amazon`, `white king` and `black king`. \n \n It's black's move. You don't have time to determine whether the game is over or not, but you'd like to figure it out in your head. \n \n Unfortunately, the diagram is smudged and you can't see the position of the `black king`, so it looks like you'll have to check them all.\n\n Given the positions of white pieces on a standard chessboard, determine the number of possible black king's positions such that: \n\n* It's a checkmate (i.e. black's king is under amazon's \n attack and it cannot make a valid move);\n\n* It's a check (i.e. black's king is under amazon's attack \n but it can reach a safe square in one move);\n\n* It's a stalemate (i.e. black's king is on a safe square \n but it cannot make a valid move);\n\n* Black's king is on a safe square and it can make a valid move.\n\nNote that two kings cannot be placed on two adjacent squares (including two diagonally adjacent ones).\n\n# Input\n\n\n - String `king`\n\nPosition of white's king in chess notation.\n\n\n - String `amazon`\n\nPosition of white's amazon in the same notation.\n\nConstraints: `amazon ≠ king.`\n\n# Output\n\nAn array of four integers, each equal to the number of black's king positions corresponding to a specific situation. The integers should be presented in the same order as the situations were described, `i.e. 0 for checkmates, 1 for checks, etc`.\n\"\"\"", "inputs": [["a1", "g5"], ["a3", "e4"], ["f3", "f2"], ["b7", "a8"], ["f7", "d3"], ["g2", "c3"], ["f3", "c1"], ["d4", "h8"], ["h6", "a7"], ["a6", "g3"], ["e1", "b4"], ["f4", "c4"], ["c3", "e8"], ["b5", "e5"], ["c8", "g8"], ["a6", "b5"], ["b3", "e2"], ["b7", "c3"], ["b5", "b3"], ["a4", "a6"], ["h2", "a5"], ["b7", "c1"], ["e6", "e7"], ["a2", "c6"], ["a6", "e1"], ["e8", "g7"], ["f5", "f7"], ["h3", "d8"], ["b1", "f8"], ["c7", "a2"], ["f1", "a5"], ["g6", "f3"], ["g2", "c6"], ["d1", "e1"], ["h6", "b5"], ["e4", "e8"], ["b6", "d5"], ["b4", "h8"], ["e5", "b4"], ["g1", "g6"], ["a3", "a5"], ["g4", "g3"], ["c4", "e7"], ["d3", "a3"], ["a2", "e6"], ["f2", "f3"], ["g4", "b4"], ["a5", "g2"], ["b7", "b4"], ["a4", "a7"], ["h7", "a8"], ["a7", "d7"], ["e4", "a6"], ["e2", "g1"], ["e7", "b2"], ["e5", "f6"], ["b8", "b2"], ["c7", "e8"], ["e7", "e5"], ["a5", "b4"], ["d4", "e8"], ["g7", "h3"], ["a3", "b5"], ["f5", "e7"], ["d3", "b7"], ["h1", "e8"], ["g6", "g1"], ["e6", "c8"], ["c5", "c8"], ["f4", "b1"], ["g3", "b8"], ["e2", "a3"], ["c3", "c6"], ["f1", "c7"], ["a5", "e1"], ["b7", "g8"], ["g5", "e8"], ["e4", "f2"], ["b1", "a4"], ["h3", "e4"], ["g6", "b2"], ["a7", "c2"], ["e2", "f8"], ["h5", "d1"], ["h1", "f3"], ["e5", "f2"], ["f2", "a7"], ["e4", "g5"], ["d6", "b3"], ["g4", "a4"], ["a5", "d6"], ["a8", "d6"], ["a6", "h1"], ["f4", "c8"], ["d4", "g3"], ["e7", "a8"], ["g3", "c8"], ["b2", "h2"], ["a3", "h1"], ["g6", "e8"], ["e7", "d3"], ["f4", "g6"], ["h2", "d6"], ["a8", "e5"], ["c4", "d8"], ["c4", "b6"], ["d4", "a6"], ["c6", "d8"]], "outputs": [[[0, 29, 1, 29]], [[1, 32, 1, 23]], [[6, 11, 0, 38]], [[0, 10, 0, 45]], [[4, 28, 1, 21]], [[9, 21, 0, 24]], [[4, 18, 0, 32]], [[0, 18, 0, 36]], [[0, 22, 0, 35]], [[3, 26, 1, 27]], [[0, 27, 2, 28]], [[3, 24, 0, 27]], [[0, 25, 0, 29]], [[0, 30, 0, 24]], [[1, 19, 0, 37]], [[5, 19, 1, 33]], [[0, 24, 1, 29]], [[9, 21, 0, 24]], [[3, 17, 0, 34]], [[2, 16, 0, 39]], [[0, 25, 0, 32]], [[2, 20, 0, 32]], [[3, 14, 1, 37]], [[9, 24, 0, 24]], [[0, 24, 0, 33]], [[0, 22, 0, 35]], [[3, 16, 0, 35]], [[0, 24, 0, 33]], [[2, 23, 0, 32]], [[2, 22, 0, 30]], [[0, 24, 0, 33]], [[7, 21, 0, 26]], [[7, 23, 0, 24]], [[2, 16, 0, 40]], [[0, 27, 1, 29]], [[1, 19, 0, 34]], [[0, 28, 0, 26]], [[0, 22, 0, 32]], [[0, 24, 1, 29]], [[3, 24, 1, 29]], [[0, 19, 0, 38]], [[6, 12, 0, 37]], [[0, 26, 1, 27]], [[2, 15, 0, 37]], [[3, 28, 0, 26]], [[7, 18, 0, 30]], [[0, 26, 1, 27]], [[0, 27, 0, 30]], [[0, 24, 1, 29]], [[0, 18, 0, 39]], [[0, 21, 0, 36]], [[0, 25, 0, 32]], [[3, 21, 0, 30]], [[0, 17, 0, 37]], [[0, 26, 0, 28]], [[12, 10, 0, 33]], [[0, 25, 0, 32]], [[0, 18, 0, 36]], [[0, 28, 0, 26]], [[5, 19, 1, 33]], [[1, 21, 0, 32]], [[4, 18, 0, 32]], [[0, 24, 2, 31]], [[0, 22, 1, 31]], [[1, 25, 0, 28]], [[0, 25, 0, 34]], [[0, 20, 1, 33]], [[3, 15, 0, 36]], [[2, 15, 0, 37]], [[0, 22, 0, 32]], [[0, 21, 0, 33]], [[4, 18, 0, 32]], [[7, 20, 0, 27]], [[3, 26, 1, 27]], [[0, 23, 0, 34]], [[0, 21, 0, 33]], [[0, 22, 1, 31]], [[3, 19, 0, 32]], [[0, 21, 0, 36]], [[0, 31, 0, 26]], [[0, 25, 0, 29]], [[3, 26, 0, 28]], [[2, 20, 0, 32]], [[0, 23, 0, 34]], [[4, 25, 0, 30]], [[3, 21, 0, 30]], [[0, 21, 0, 33]], [[0, 22, 1, 31]], [[3, 23, 0, 28]], [[0, 22, 0, 32]], [[3, 26, 0, 28]], [[3, 28, 0, 28]], [[0, 22, 0, 35]], [[2, 21, 0, 31]], [[3, 21, 0, 30]], [[2, 18, 0, 34]], [[2, 21, 0, 31]], [[0, 21, 0, 33]], [[1, 22, 0, 34]], [[2, 18, 0, 34]], [[4, 26, 0, 24]], [[3, 19, 0, 32]], [[3, 28, 0, 26]], [[0, 34, 0, 25]], [[1, 21, 0, 32]], [[3, 19, 0, 32]], [[2, 20, 0, 32]], [[0, 18, 0, 36]]], "starter_code": "def amazon_check_mate(*args):", "canonical_solution": "from itertools import count\nALL_MOVES = [(1, 1), (0, 1), (1, 0), (-1, 0), (0, -1), (-1, 1), (1, -1), (-1, -1)]\nAMA_MOVES = [(1, 2), (2, 1), (-1, 2), (2, -1), (1, -2), (-2, 1), (-1, -2), (-2, -1)]\n\ndef amazon_check_mate(*args):\n\n    def posInBoard(x, y):\n        return 0 <= x < 8 and 0 <= y < 8\n\n    def getCoveredPos(start, king=None):\n        covered = {start}\n        for m in AMA_MOVES if king else ALL_MOVES:\n            pos = tuple((z + dz for z, dz in zip(start, m)))\n            if posInBoard(*pos):\n                covered.add(pos)\n        if king:\n            for dx, dy in ALL_MOVES:\n                for n in count(1):\n                    pos = (start[0] + dx * n, start[1] + dy * n)\n                    if not posInBoard(*pos) or pos == king:\n                        break\n                    covered.add(pos)\n        return covered\n    K, Q = [(ord(s[0]) - 97, ord(s[1]) - 49) for s in args]\n    kCover = getCoveredPos(K)\n    fullCover = getCoveredPos(Q, K) | kCover\n    freeQueen = Q not in kCover\n    counts = [0] * 4\n    for x in range(8):\n        for y in range(8):\n            black = (x, y)\n            if black in kCover or black == Q:\n                continue\n            safePosAround = any((posInBoard(*neigh) and (neigh not in fullCover or (neigh == Q and freeQueen)) for neigh in ((x + dx, y + dy) for dx, dy in ALL_MOVES)))\n            counts[2 * (black not in fullCover) + safePosAround] += 1\n    return counts", "entry_point": "amazon_check_mate", "task_id": "TACO_lite/845", "input_output_examples": [[["003111"], ["813372"], ["17935"], ["56328116"]], [[true], [true], [true], [true]]]}
{"requirement": "def rocks(n):\"\"\"# Task\n Vanya gets bored one day and decides to enumerate a large pile of rocks. He first counts the rocks and finds out that he has `n` rocks in the pile, then he goes to the store to buy labels for enumeration. \n \n Each of the labels is a digit from 0 to 9 and each of the `n` rocks should be assigned a unique number from `1` to `n`.\n\n If each label costs `$1`, how much money will Vanya spend on this project?\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  The number of rocks in the pile.\n\n  `1  ≤  n  ≤  10^9`\n\n\n - `[output]` an integer\n\n  the cost of the enumeration.\n\"\"\"", "inputs": [[1], [10], [13], [100], [36123011]], "outputs": [[1], [11], [17], [192], [277872985]], "starter_code": "def rocks(n):", "canonical_solution": "from math import log10\n\ndef rocks(n):\n    return (n + 1) * int(log10(n) + 1) - (10 ** int(log10(n) + 1) - 1) // 9", "entry_point": "rocks", "task_id": "TACO_lite/849", "input_output_examples": [[["batman is bruce wayne"], ["peter parker is spiderman"]], [["is bceru aenwy aamntb"], ["is eeprt aekprr adeimnprs"]]]}
{"requirement": "def substring(s):\"\"\"\nFind the longest substring within a string that contains at most 2 unique characters.\n\nThis function will take alphanumeric characters as input.\n\nIn cases where there could be more than one correct answer, the first string occurrence should be used.\n\nAlthough there are O(N^2) solutions to this problem, you should try to solve this problem in O(N) time. Tests may pass for O(N^2) solutions but, this is not guaranteed.\n\nThis question is much harder than some of the other substring questions. It's easy to think that you have a solution and then get hung up on the implementation.\n\"\"\"", "inputs": [[""], ["a"], ["aa"], ["aaa"], ["ab"], ["aba"], ["abc"], ["abcba"], ["bbacc"], ["ccddeeff"], ["bbacddddcdd"], ["abcddeejabbedsajaajjaajjajajajjajjaaacedajajaj"], ["aaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbccccccccccccccccccccddddddddddddddddddddeeeeeeeeeeeeeeeeeeeeffffffffffffffffffffgggggggggggggggggggghhhhhhhhhhhhhhhhhhhhiiiiiiiiiiiiiiiiiiiijjjjjjjjjjjjjjjjjjjjkkkkkkkkkkkkkkkkkkkkllllllllllllllllllllmmmmmmmmmmmmmmmmmmmmnnnnnnnnnnnnnnnnnnnnooooooooooooooooooooppppppppppppppppppppqqqqqqqqqqqqqqqqqqqqrrrrrrrrrrrrrrrrrrrrssssssssssssssssssssttttttttttttttttttttuuuuuuuuuuuuuuuuuuuuvvvvvvvvvvvvvvvvvvvvwwwwwwwwwwwwwwwwwwwwxxxxxxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyyyyyyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"]], "outputs": [[""], ["a"], ["aa"], ["aaa"], ["ab"], ["aba"], ["ab"], ["bcb"], ["bba"], ["ccdd"], ["cddddcdd"], ["ajaajjaajjajajajjajjaaa"], ["yyyyyyyyyyyyyyyyyyyyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"]], "starter_code": "def substring(s):", "canonical_solution": "def substring(s):\n    r, rm = ([], [])\n    for i, x in enumerate(s):\n        if x in r or len(set(r)) < 2:\n            r += x\n        else:\n            if len(r) > len(rm):\n                rm = r[:]\n            r = [y for y in r[-1::-1] if y == r[-1]] + [x]\n    if len(r) > len(rm):\n        rm = r[:]\n    return ''.join(rm)", "entry_point": "substring", "task_id": "TACO_lite/855", "input_output_examples": [[["&61kujla"]], [["Business"]]]}
{"requirement": "def square_sum(numbers):\"\"\"\nComplete the square sum function so that it squares each number passed into it and then sums the results together.\n\n```if:racket\nIn Racket, use a list instead of an array.\n```\n\"\"\"", "inputs": [[[1, 2]], [[0, 3, 4, 5]], [[]], [[-1, -2]], [[-1, 0, 1]]], "outputs": [[5], [50], [0], [5], [2]], "starter_code": "def square_sum(numbers):", "canonical_solution": "def square_sum(numbers):\n    return sum((x ** 2 for x in numbers))", "entry_point": "square_sum", "task_id": "TACO_lite/863", "input_output_examples": [[[".----.----.----.----.----"]], [[11111]]]}
{"requirement": "def delete_nth(order, max_e):\"\"\"## Enough is enough!\n\nAlice and Bob were on a holiday. Both of them took many pictures of the places they've been, and now they want to show Charlie their entire collection. However, Charlie doesn't like these sessions, since the motive usually repeats. He isn't fond of seeing the Eiffel tower 40 times. He tells them that he will only sit during the session if they show the same motive at most N times. Luckily, Alice and Bob are able to encode the motive as a number. Can you help them to remove numbers such that their list contains each number only up to N times, without changing the order?\n\n## Task\n\nGiven a list lst and a number N, create a new list that contains each number of lst at most N times without reordering.\n\n~~~if:nasm\n## NASM notes\n\nWrite the output numbers into the `out` parameter, and return its length.\n\nThe input array will contain only integers between 1 and 50 inclusive. Use it to your advantage.\n~~~\n\n~~~if:c\nFor C:\n* Assign the return array length to the pointer parameter `*szout`.\n* Do not mutate the input array.\n~~~\n\"\"\"", "inputs": [[[20, 37, 20, 21], 1], [[1, 1, 3, 3, 7, 2, 2, 2, 2], 3], [[1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1], 3], [[1, 1, 1, 1, 1], 5], [[], 5]], "outputs": [[[20, 37, 21]], [[1, 1, 3, 3, 7, 2, 2, 2]], [[1, 2, 3, 1, 1, 2, 2, 3, 3, 4, 5]], [[1, 1, 1, 1, 1]], [[]]], "starter_code": "def delete_nth(order, max_e):", "canonical_solution": "def delete_nth(order, max_e):\n    ans = []\n    for o in order:\n        if ans.count(o) < max_e:\n            ans.append(o)\n    return ans", "entry_point": "delete_nth", "task_id": "TACO_lite/864", "input_output_examples": [[[], [12, 23, 45]], [[60], [51]]]}
{"requirement": "def tv_remote(words):\"\"\"# Background\n\n\nMy TV remote control has arrow buttons and an `OK` button.\n\nI can use these to move a \"cursor\" on a logical screen keyboard to type words...\n\n# Keyboard\n\nThe screen \"keyboard\" layout looks like this\n\n\n  #tvkb {\n    width : 400px;\n    border: 5px solid gray; border-collapse: collapse;\n  }\n  #tvkb td {\n    color : orange;\n    background-color : black;\n    text-align : center;\n    border: 3px solid gray; border-collapse: collapse;\n  }\n\n\nabcde123\nfghij456\nklmno789\npqrst.@0\nuvwxyz_/\naASP\n\n\n\n* `aA` is the SHIFT key. Pressing this key toggles alpha characters between UPPERCASE and lowercase\n* `SP` is the space character\n* The other blank keys in the bottom row have no function\n\n# Kata task\n\nHow many button presses on my remote are required to type the given `words`?\n\n## Hint\n\nThis Kata is an extension of the earlier ones in this series. You should complete those first.\n\n## Notes\n\n* The cursor always starts on the letter `a` (top left)\n* The alpha characters are initially lowercase (as shown above)\n* Remember to also press `OK` to \"accept\" each letter\n* Take the shortest route from one letter to the next\n* The cursor wraps, so as it moves off one edge it will reappear on the opposite edge\n* Although the blank keys have no function, you may navigate through them if you want to\n* Spaces may occur anywhere in the `words` string\n* Do not press the SHIFT key until you need to. For example, with the word `e.Z`, the SHIFT change happens **after** the `.` is pressed (not before)\n \n*Good Luck!\nDM.*\n\n\n\nSeries\n* TV Remote\n* TV Remote (shift and space)\n* TV Remote (wrap)\n* TV Remote (symbols)\n\"\"\"", "inputs": [["Code Wars"], ["does"], ["your"], ["solution"], ["work"], ["for"], ["these"], ["words"], ["DOES"], ["YOUR"], ["SOLUTION"], ["WORK"], ["FOR"], ["THESE"], ["WORDS"], ["Does"], ["Your"], ["Solution"], ["Work"], ["For"], ["These"], ["Words"], ["A"], ["AADVARKS"], ["A/A/A/A/"], ["1234567890"], ["MISSISSIPPI"], ["a"], ["aadvarks"], ["a/a/a/a/"], ["mississippi"], ["Xoo ooo ooo"], ["oXo ooo ooo"], ["ooX ooo ooo"], ["ooo Xoo ooo"], ["ooo oXo ooo"], ["ooo ooX ooo"], ["ooo ooo Xoo"], ["ooo ooo oXo"], ["ooo ooo ooX"], ["The Quick Brown Fox Jumps Over A Lazy Dog."], ["Pack My Box With Five Dozen Liquor Jugs."], [""], [" "], ["   "], ["    x   X    "]], "outputs": [[49], [16], [21], [33], [18], [12], [27], [23], [19], [22], [34], [19], [15], [28], [24], [28], [33], [45], [26], [20], [35], [31], [4], [33], [32], [26], [38], [1], [30], [29], [35], [53], [65], [53], [53], [65], [53], [53], [65], [53], [254], [242], [0], [3], [5], [30]], "starter_code": "def tv_remote(words):", "canonical_solution": "import re\nH, W = (6, 8)\nKEYBOARD = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/* '\nMAP = {c: (i // W, i % W) for i, c in enumerate(KEYBOARD)}\n\ndef manhattan(*pts):\n    dxy = [abs(z2 - z1) for z1, z2 in zip(*pts)]\n    return 1 + sum((min(dz, Z - dz) for dz, Z in zip(dxy, (H, W))))\n\ndef toggle(m):\n    ups, end = m.groups()\n    return f'*{ups.lower()}*{end}'\n\ndef tv_remote(words):\n    reWords = re.sub('([A-Z][^a-z]*)([a-z]?)', toggle, words).rstrip('*')\n    return sum((manhattan(MAP[was], MAP[curr]) for was, curr in zip('a' + reWords, reWords)))", "entry_point": "tv_remote", "task_id": "TACO_lite/867", "input_output_examples": [[["123321"]], [[true]]]}
{"requirement": "def super_sum(D, N):\"\"\"\nGiven an D-dimension array, where each axis is of length N, your goal is to find the sum of every index in the array starting from 0.\n\nA naive solution could be to loop over every index in every dimension and add to a global sum. This won't work as the number of dimension is expected to be quite large.\n\nHint: A formulaic approach would be best\nHint 2: Gauss could solve the one dimensional case in his earliest of years, This is just a generalization.\n\n~~~if:javascript\nNote for JS version: Because the results will exceed the maximum safe integer easily, for such values you're only required to have a precision of at least `1 in 1e-9` to the actual answer.\n~~~\n\"\"\"", "inputs": [[2, 2], [2, 3], [3, 2], [3, 3], [1, 101], [10, 10], [10, 11], [11, 10], [11, 11], [15, 8], [19, 84], [17, 76]], "outputs": [[4], [18], [12], [81], [5050], [450000000000], [1296871230050], [4950000000000], [15692141883605], [1847179534663680], [2871495452512585452340652014195036913664], [60022109925215517405815155929907200]], "starter_code": "def super_sum(D, N):", "canonical_solution": "def super_sum(D, N):\n    num = pow(N, D)\n    dblAvg = D * (N - 1)\n    return num * dblAvg // 2", "entry_point": "super_sum", "task_id": "TACO_lite/872", "input_output_examples": [[["LQTcQAP>pQBBTAI-PA-PPL+P<BVPAL+T+P>PL+PBLPBP<DLLLT+P"]], [["Hello World!"]]]}
{"requirement": "def parade_time(groups, location, speed, pref):\"\"\"# Let's watch a parade!\n## Brief\nYou're going to watch a parade, but you only care about one of the groups marching. The parade passes through the street where your house is. Your house is at number `location` of the street. Write a function `parade_time` that will tell you the times when you need to appear to see all appearances of that group.\n\n## Specifications\nYou'll be given:\n\n* A `list` of `string`s containing `groups` in the parade, in order of appearance. A group may appear multiple times. You want to see all the parts of your favorite group.\n* An positive `integer` with the `location` on the parade route where you'll be watching.\n* An positive `integer` with the `speed` of the parade\n* A `string` with the `pref`ferred group you'd like to see\n\nYou need to return the time(s) you need to be at the parade to see your favorite group as a `list` of `integer`s.\n\nIt's possible the group won't be at your `location` at an exact `time`. In that case, just be sure to get there right before it passes (i.e. the largest integer `time` before the float passes the `position`).\n\"\"\"", "inputs": [[["a", "b", "c", "d", "e", "f"], 3, 2, "c"], [["c", "b", "c", "d", "e", "f"], 3, 2, "c"], [["a", "b", "c", "d", "e", "f"], 3, 2, "g"], [["a", "b", "c", "c", "e", "c"], 7, 1, "c"], [["a", "b", "c", "d", "e", "f"], 1, 2, "b"], [["a", "b", "c", "d", "e", "b"], 1, 2, "b"]], "outputs": [[[3]], [[2, 3]], [[]], [[10, 11, 13]], [[1]], [[1, 3]]], "starter_code": "def parade_time(groups, location, speed, pref):", "canonical_solution": "def parade_time(groups, location, speed, pref):\n    return [c // speed for c, p in enumerate(groups, 1 + location) if p == pref]", "entry_point": "parade_time", "task_id": "TACO_lite/877", "input_output_examples": [[[5], [0], [-1]], [[true], [false], [false]]]}
{"requirement": "def is_prime(n):\"\"\"\nAs most of you might know already, a prime number is an integer `n` with the following properties:\n\n* it must be greater than 1\n* it must be divisible only by itself and 1\n\nAnd that's it: pretty easy, isn't it?\n\nWell, turns out that primes are not just a mere mathematical curiosity and are very important.\n\nBeing able to tell if a number is a prime or not is thus not such a trivial matter and doing it with some efficient algo is thus crucial.\n\nThere are already more or less efficient (or sloppy) katas asking you to find primes, but here I try to be even more zealous than other authors.\n\nYou will be given a preset array/list with the first few `primes`. And you must write a function that checks if a given number `n` is a prime looping through it and, possibly, expanding the array/list of known primes only if/when necessary (ie: as soon as you check for a **potential prime which is greater than a given threshold for each** `n`, stop).\n\n#  Memoization\n\nStoring precomputed results for later re-use is a very popular programming technique that you would better master soon and that is called [memoization](https://en.wikipedia.org/wiki/Memoization); while you have your wiki open, you might also wish to get some info about the [sieve of Eratosthenes](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes) and, to be even more efficient, you might wish to consider [an interesting reading on searching from prime from a friend of mine](https://medium.com/@lcthornhill/why-does-the-6-iteration-method-work-for-testing-prime-numbers-ba6176f58082#.dppj0il3a).\n\nYes, you will be checked even on that part. And you better be **very** efficient in your code if you hope to pass all the tests ;)\n\n**Dedicated to my trainees that worked hard to improve their skills even on a holiday: good work guys!**\n\n**Or should I say \"girls\" ;)? [Agata](https://www.codewars.com/users/aghh1504), [Ania](https://www.codewars.com/users/lisowska) [Dina](https://www.codewars.com/users/deedeeh) and (although definitely not one of my trainees) special mention to [NaN](https://www.codewars.com/users/nbeck)**\n\"\"\"", "inputs": [[1], [2], [5], [143], [-1], [29], [53], [529]], "outputs": [[false], [true], [true], [false], [false], [true], [true], [false]], "starter_code": "def is_prime(n):", "canonical_solution": "primes = [2, 3, 5, 7]\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    m = int(n ** 0.5) + 1\n    for p in primes:\n        if p >= m:\n            break\n        if not n % p:\n            return False\n    q, d = (primes[-1], 4 if (n + 1) % 6 else 2)\n    while q < m:\n        q, d = (q + d, 4 - d)\n        if is_prime(q):\n            primes.append(q)\n            if not n % q:\n                return False\n    return True", "entry_point": "is_prime", "task_id": "TACO_lite/879", "input_output_examples": [[[[5, 2, 1]]], [[2, 1, 1]]]}
{"requirement": "def array_info(x):\"\"\"\nBrief\n=====\nSometimes we need information about the list/arrays we're dealing with. You'll have to write such a function in this kata. Your function must provide the following informations:  \n\n* Length of the array\n* Number of integer items in the array\n* Number of float items in the array\n* Number of string character items in the array\n* Number of whitespace items in the array\n   \nThe informations will be supplied in arrays that are items of another array. Like below:\n\n`Output array = [[array length],[no of integer items],[no of float items],[no of string chars items],[no of whitespace items]]`\n\nAdded Difficulty\n----------------\nIf any item count in the array is zero, you'll have to replace it with a **None/nil/null** value (according to the language). And of course, if the array is empty then return **'Nothing in the array!**. For the sake of simplicity, let's just suppose that there are no nested structures.   \n\nRemarks\n-------\nThe input will always be arrays/lists. So no need to check the inputs.    \nHint\n====\nSee the tags!!!   \nNow let's get going !\n\"\"\"", "inputs": [[[1, 2, 3.33, 4, 5.01, "bass", "kick", " "]], [[0.001, 2, " "]], [[]], [[" "]], [[" ", " "]], [["jazz"]], [[4]], [[3.1416]], [[11, 22, 33.33, 44.44, "hasan", "ahmad"]], [["a", "b", "c", "d", " "]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 2.23, "string", " "]]], "outputs": [[[[8], [3], [2], [2], [1]]], [[[3], [1], [1], [null], [1]]], ["Nothing in the array!"], [[[1], [null], [null], [null], [1]]], [[[2], [null], [null], [null], [2]]], [[[1], [null], [null], [1], [null]]], [[[1], [1], [null], [null], [null]]], [[[1], [null], [1], [null], [null]]], [[[6], [2], [2], [2], [null]]], [[[5], [null], [null], [4], [1]]], [[[9], [9], [null], [null], [null]]], [[[4], [1], [1], [1], [1]]]], "starter_code": "def array_info(x):", "canonical_solution": "def array_info(x):\n    if not x:\n        return 'Nothing in the array!'\n    return [[len(x)], [sum((isinstance(i, int) for i in x)) or None], [sum((isinstance(i, float) for i in x)) or None], [sum((isinstance(i, str) and (not i.isspace()) for i in x)) or None], [sum((isinstance(i, str) and i.isspace() for i in x)) or None]]", "entry_point": "array_info", "task_id": "TACO_lite/882", "input_output_examples": [[["1234"], ["12345"], ["a234"]], [[true], [false], [false]]]}
{"requirement": "def rankings(arr):\"\"\"\nYou are given an array of unique numbers. The numbers represent points. The higher the number the higher the points.  \n\nYour task is to return an array giving each number its rank in the array.\n\"\"\"", "inputs": [[[1, 3, 2]], [[1, 2, 3, 4, 5]], [[3, 4, 1, 2, 5]], [[10, 20, 40, 50, 30]], [[1, 10]], [[22, 33, 18, 9, 110, 4, 1, 88, 6, 50]]], "outputs": [[[3, 1, 2]], [[5, 4, 3, 2, 1]], [[3, 2, 5, 4, 1]], [[5, 4, 2, 1, 3]], [[2, 1]], [[5, 4, 6, 7, 1, 9, 10, 2, 8, 3]]], "starter_code": "def rankings(arr):", "canonical_solution": "def rankings(arr):\n    dct = {v: i for i, v in enumerate(sorted(arr, reverse=True), 1)}\n    return [dct[v] for v in arr]", "entry_point": "rankings", "task_id": "TACO_lite/884", "input_output_examples": [[[100], [10], [48], [79320]], [[99], [9], [48], [78999]]]}
{"requirement": "def tv_remote(word):\"\"\"\nMy TV remote control has arrow buttons and an `OK` button.\n\nI can use these to move a \"cursor\" on a logical screen keyboard to type \"words\"...\n\nThe screen \"keyboard\" layout looks like this\n\n\n  #tvkb {\n    width : 300px;\n    border: 5px solid gray; border-collapse: collapse;\n  }\n  #tvkb td {\n    color : orange;\n    background-color : black;\n    text-align : right;\n    border: 3px solid gray; border-collapse: collapse;\n  }\n\n\nabcde123\nfghij456\nklmno789\npqrst.@0\nuvwxyz_/\n\n\n# Kata task\n\nHow many button presses on my remote are required to type a given `word`?\n\n## Notes\n\n* The cursor always starts on the letter `a` (top left)\n* Remember to also press `OK` to \"accept\" each character.\n* Take a direct route from one character to the next\n* The cursor does not wrap (e.g. you cannot leave one edge and reappear on the opposite edge)\n* A \"word\" (for the purpose of this Kata) is any sequence of characters available on my virtual \"keyboard\" \n\n*Good Luck!\nDM.*\n\n\n\nSeries\n* TV Remote\n* TV Remote (shift and space)\n* TV Remote (wrap)\n* TV Remote (symbols)\n\"\"\"", "inputs": [["codewars"], ["does"], ["your"], ["solution"], ["work"], ["for"], ["these"], ["words"], ["mississippi"]], "outputs": [[36], [16], [23], [33], [20], [12], [27], [25], [35]], "starter_code": "def tv_remote(word):", "canonical_solution": "KEYBOARD = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/'\nMAP = {c: (i // 8, i % 8) for i, c in enumerate(KEYBOARD)}\n\ndef manhattan(*pts):\n    return sum((abs(z2 - z1) for z1, z2 in zip(*pts)))\n\ndef tv_remote(word):\n    return len(word) + sum((manhattan(MAP[was], MAP[curr]) for was, curr in zip('a' + word, word)))", "entry_point": "tv_remote", "task_id": "TACO_lite/886", "input_output_examples": [[["AABAA", "BBAAA"], ["OVGHK", "RPGUC"]], [[1], [4]]]}
{"requirement": "def subsets_parity(n, k):\"\"\"# Task\n You are given integer `n` determining set S = {1, 2, ..., n}. Determine if the number of k-element subsets of S is `ODD` or `EVEN` for given integer k.\n\n `Don't bother with naive solution - numbers here are really big.`\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n    `1 <= n <= 10^9`\n\n\n - `[input]` integer `k`\n\n    `1 <= k <= n`\n\n\n - `[output]` a string\n\n    `\"EVEN\"` or `\"ODD\"` depending if the number of k-element subsets of S = {1, 2, ..., n} is ODD or EVEN.\n\"\"\"", "inputs": [[3, 2], [2, 1], [1, 1], [20, 10], [48, 12]], "outputs": [["ODD"], ["EVEN"], ["ODD"], ["EVEN"], ["EVEN"]], "starter_code": "def subsets_parity(n, k):", "canonical_solution": "def subsets_parity(n, k):\n    return 'EVEN' if ~n & k else 'ODD'", "entry_point": "subsets_parity", "task_id": "TACO_lite/887", "input_output_examples": [[[["A_R", "B_Y", "A_R"], 2, 2]], [["R"]]]}
{"requirement": "def highlight(code):\"\"\"\n# RoboScript #1 - Implement Syntax Highlighting\n\n## Disclaimer\n\nThe story presented in this Kata Series is purely fictional; any resemblance to actual programming languages, products, organisations or people should be treated as purely coincidental.\n\n## About this Kata Series\n\nThis Kata Series is based on a fictional story about a computer scientist and engineer who owns a firm that sells a toy robot called MyRobot which can interpret its own (esoteric) programming language called RoboScript.  Naturally, this Kata Series deals with the software side of things (I'm afraid Codewars cannot test your ability to build a physical robot!).\n\n## Story\n\nYou are a computer scientist and engineer who has recently founded a firm which sells a toy product called MyRobot which can move by receiving a set of instructions by reading a file containing a script.  Initially you have planned the robot to be able to interpret JavaScript files for its movement instructions but you later decided that it would make MyRobot too hard to operate for most customers out there who aren't even computer programmers in the first place.  For this reason, you have decided to invent a new (esoteric) scripting language called RoboScript which has a much simpler syntax so non-computer programmers can easily learn how to write scripts in this language which would enable them to properly operate MyRobot.  However, you are currently at the initial stage of inventing this new Esolang.  The first step to popularize this (esoteric) scripting language is naturally to invent a new editor for it which provides syntax highlighting for this language so your customers feel like they are writing a proper program when they are writing scripts for MyRobot.\n\n## Task\n\nYour MyRobot-specific (esoteric) scripting language called RoboScript only ever contains the following characters: `F`, `L`, `R`, the digits `0-9` and brackets (`(` and `)`).  Your goal is to write a function `highlight` which accepts 1 required argument `code` which is the RoboScript program passed in as a string and returns the script with syntax highlighting.  The following commands/characters should have the following colors:\n\n- `F` - Wrap this command around `` and `` tags so that it is highlighted pink in our editor\n- `L` - Wrap this command around `` and `` tags so that it is highlighted red in our editor\n- `R` - Wrap this command around `` and `` tags so that it is highlighted green in our editor\n- Digits from `0` through `9` - Wrap these around `` and `` tags so that they are highlighted orange in our editor\n- Round Brackets - Do not apply any syntax highlighting to these characters\n\nFor multiple characters with the same color, simply wrap them with a **single** `` tag of the correct color:\n\nNote that the use of `` tags must be **exactly** the same format as demonstrated above.  Even if your solution produces the same visual result as the expected answers, if you miss a space between `\"color:\"` and `\"green\"`, for example, you will fail the tests.\n\n## Kata in this Series\n\n1. **RoboScript #1 - Implement Syntax Highlighting**\n2. [RoboScript #2 - Implement the RS1 Specification](https://www.codewars.com/kata/5870fa11aa0428da750000da)\n3. [RoboScript #3 - Implement the RS2 Specification](https://www.codewars.com/kata/58738d518ec3b4bf95000192)\n4. [RoboScript #4 - RS3 Patterns to the Rescue](https://www.codewars.com/kata/594b898169c1d644f900002e)\n5. [RoboScript #5 - The Final Obstacle (Implement RSU)](https://www.codewars.com/kata/5a12755832b8b956a9000133)\n\"\"\"", "inputs": [["F3RF5LF7"], ["FFFR345F2LL"], ["RRRRRF45L3F2"], ["RRRRR(F45L3)F2"], ["FF(LF6(RF3)2)3"]], "outputs": [["<span style=\"color: pink\">F</span><span style=\"color: orange\">3</span><span style=\"color: green\">R</span><span style=\"color: pink\">F</span><span style=\"color: orange\">5</span><span style=\"color: red\">L</span><span style=\"color: pink\">F</span><span style=\"color: orange\">7</span>"], ["<span style=\"color: pink\">FFF</span><span style=\"color: green\">R</span><span style=\"color: orange\">345</span><span style=\"color: pink\">F</span><span style=\"color: orange\">2</span><span style=\"color: red\">LL</span>"], ["<span style=\"color: green\">RRRRR</span><span style=\"color: pink\">F</span><span style=\"color: orange\">45</span><span style=\"color: red\">L</span><span style=\"color: orange\">3</span><span style=\"color: pink\">F</span><span style=\"color: orange\">2</span>"], ["<span style=\"color: green\">RRRRR</span>(<span style=\"color: pink\">F</span><span style=\"color: orange\">45</span><span style=\"color: red\">L</span><span style=\"color: orange\">3</span>)<span style=\"color: pink\">F</span><span style=\"color: orange\">2</span>"], ["<span style=\"color: pink\">FF</span>(<span style=\"color: red\">L</span><span style=\"color: pink\">F</span><span style=\"color: orange\">6</span>(<span style=\"color: green\">R</span><span style=\"color: pink\">F</span><span style=\"color: orange\">3</span>)<span style=\"color: orange\">2</span>)<span style=\"color: orange\">3</span>"]], "starter_code": "def highlight(code):", "canonical_solution": "import re\n\ndef highlight(code):\n    code = re.sub('(F+)', '<span style=\"color: pink\">\\\\g<1></span>', code)\n    code = re.sub('(L+)', '<span style=\"color: red\">\\\\g<1></span>', code)\n    code = re.sub('(R+)', '<span style=\"color: green\">\\\\g<1></span>', code)\n    code = re.sub('(\\\\d+)', '<span style=\"color: orange\">\\\\g<1></span>', code)\n    return code", "entry_point": "highlight", "task_id": "TACO_lite/888", "input_output_examples": [[["1 2 3"]], [[6]]]}
{"requirement": "def minimum_steps(arr, n):\"\"\"\n# Task\n\n**_Given_** *an array of N integers, you have to find* **_how many times_** *you have to* **_add up the smallest numbers_** *in the array until* **_their Sum_**  *becomes greater or equal to* **_K_**.\n___\n \n# Notes: \n\n* **_List size_**  is *at least 3*.\n\n* **_All numbers_**  *will be*  **_positive_**.\n\n* **_Numbers_**  could  *occur more than once* ,   **_(Duplications may exist)_**.\n\n* Threshold  **_K_**  will *always be reachable*.\n___\n\n## Expected Time Complexity `O(n Log n)`\n___\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[[4, 6, 3], 7], [[10, 9, 9, 8], 17], [[8, 9, 10, 4, 2], 23], [[19, 98, 69, 28, 75, 45, 17, 98, 67], 464], [[4, 6, 3], 2]], "outputs": [[1], [1], [3], [8], [0]], "starter_code": "def minimum_steps(arr, n):", "canonical_solution": "def minimum_steps(arr, n):\n    arr = sorted(arr)\n    s = 0\n    for i, v in enumerate(arr):\n        s += v\n        if s >= n:\n            return i", "entry_point": "minimum_steps", "task_id": "TACO_lite/892", "input_output_examples": [[["caminar"], ["comer"], ["vivir"]], [[{"caminar": ["camino", "caminas", "camina", "caminamos", "camináis", "caminan"]}], [{"comer": ["como", "comes", "come", "comemos", "coméis", "comen"]}], [{"vivir": ["vivo", "vives", "vive", "vivimos", "vivís", "viven"]}]]]}
{"requirement": "def double_every_other(l):\"\"\"\nWrite a function, that doubles every second integer in a list starting from the left.\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5]], [[1, 19, 6, 2, 12, -3]], [[-1000, 1653, 210, 0, 1]]], "outputs": [[[1, 4, 3, 8, 5]], [[1, 38, 6, 4, 12, -6]], [[-1000, 3306, 210, 0, 1]]], "starter_code": "def double_every_other(l):", "canonical_solution": "def double_every_other(l):\n    return [x * 2 if i % 2 else x for i, x in enumerate(l)]", "entry_point": "double_every_other", "task_id": "TACO_lite/897", "input_output_examples": [[[""]], [["-"]]]}
{"requirement": "def happy_g(s):\"\"\"# Task\n Let's say that `\"g\" is happy` in the given string, if there is another \"g\" immediately to the right or to the left of it.\n \n Find out if all \"g\"s in the given string are happy.\n\n# Input/Output\n\n\n - `[input]` string `str`\n\n  A random string of lower case letters, numbers and spaces.\n\n\n - `[output]` a boolean value\n\n  `true` if all `\"g\"`s are happy, `false` otherwise.\n\"\"\"", "inputs": [["gg0gg3gg0gg"], ["gog"], ["ggg ggg g ggg"], ["A half of a half is a quarter."], ["good grief"], ["bigger is ggooder"], ["gggggggggg"]], "outputs": [[true], [false], [false], [true], [false], [true], [true]], "starter_code": "def happy_g(s):", "canonical_solution": "import re\n\ndef happy_g(s):\n    return not re.search('(?<!g)g(?!g)', s)", "entry_point": "happy_g", "task_id": "TACO_lite/899", "input_output_examples": [[[2, 1], [10, 7]], [[2], [6]]]}
{"requirement": "def guess_it(n, m):\"\"\"# Let's play Psychic \n\nA box contains green, red, and blue balls. The total number of balls is given by `n` (`0 < n < 50`).\n\nEach ball has a mass that depends on the ball color. Green balls weigh `5kg`, red balls weigh `4kg`, and blue balls weigh `3kg`.\n\nGiven the total number of balls in the box, `n`, and a total mass, `m`, your task is to craft a program that will determine the quantities of each colored ball. Return a list of these quantities as the answer.\n\nDon't forget that some combinations of `n` and `m` may have more than one possibility!\n\n# Assumptions\n\n1. You can assume that all inputs are of the correct type\n2. You can assume that the range of `n` will be `[1, 50]`\n3. Each element of the returned list should return the quantities in the order of `g`, `r`, `b`. \n\n## Python\n```python\n[[green, red, blue]]\n```\n\n## Elixir\n\"\"\"", "inputs": [[3, 12], [40, 180], [30, 130], [32, 148], [18, 80], [18, 74], [50, 180], [50, 172]], "outputs": [[[[0, 3, 0], [1, 1, 1]]], [[[20, 20, 0], [21, 18, 1], [22, 16, 2], [23, 14, 3], [24, 12, 4], [25, 10, 5], [26, 8, 6], [27, 6, 7], [28, 4, 8], [29, 2, 9], [30, 0, 10]]], [[[10, 20, 0], [11, 18, 1], [12, 16, 2], [13, 14, 3], [14, 12, 4], [15, 10, 5], [16, 8, 6], [17, 6, 7], [18, 4, 8], [19, 2, 9], [20, 0, 10]]], [[[20, 12, 0], [21, 10, 1], [22, 8, 2], [23, 6, 3], [24, 4, 4], [25, 2, 5], [26, 0, 6]]], [[[8, 10, 0], [9, 8, 1], [10, 6, 2], [11, 4, 3], [12, 2, 4], [13, 0, 5]]], [[[2, 16, 0], [3, 14, 1], [4, 12, 2], [5, 10, 3], [6, 8, 4], [7, 6, 5], [8, 4, 6], [9, 2, 7], [10, 0, 8]]], [[[0, 30, 20], [1, 28, 21], [2, 26, 22], [3, 24, 23], [4, 22, 24], [5, 20, 25], [6, 18, 26], [7, 16, 27], [8, 14, 28], [9, 12, 29], [10, 10, 30], [11, 8, 31], [12, 6, 32], [13, 4, 33], [14, 2, 34], [15, 0, 35]]], [[[0, 22, 28], [1, 20, 29], [2, 18, 30], [3, 16, 31], [4, 14, 32], [5, 12, 33], [6, 10, 34], [7, 8, 35], [8, 6, 36], [9, 4, 37], [10, 2, 38], [11, 0, 39]]]], "starter_code": "def guess_it(n, m):", "canonical_solution": "def guess_it(n, m):\n    result = []\n    for x in range(0, n + 1):\n        b, r, g = (4 * n + x - m, m - 3 * n - 2 * x, x)\n        if all((y >= 0 for y in (b, r, g))):\n            result.append([g, r, b])\n    return result", "entry_point": "guess_it", "task_id": "TACO_lite/900", "input_output_examples": [[[[1, 2, 5, 6, 5, 2]], [[1, 2, 2, 20, 6, 20, 2, 6, 2]]], [[2], [4]]]}
{"requirement": "def process_data(data):\"\"\"\nYou have a two-dimensional list in the following format:\n\n```python\ndata = [[2, 5], [3, 4], [8, 7]]\n```\n\nEach sub-list contains two items, and each item in the sub-lists is an integer.\n\nWrite a function `process_data()` that processes each sub-list by subtracting the second item from the first item, and then returns the product of all the processed sub-lists.\n\nFor input, you can trust that neither the main list nor the sublists will be empty.\n\"\"\"", "inputs": [[[[2, 5], [3, 4], [8, 7]]], [[[2, 9], [2, 4], [7, 5]]], [[[5, 4], [6, 4]]], [[[2, 1], [5, 3], [7, 4], [10, 6]]]], "outputs": [[3], [28], [2], [24]], "starter_code": "def process_data(data):", "canonical_solution": "def process_data(data):\n    r = 1\n    for d in data:\n        r *= d[0] - d[1]\n    return r", "entry_point": "process_data", "task_id": "TACO_lite/901", "input_output_examples": [[["1341"]], [[7]]]}
{"requirement": "def build_or_buy(hand):\"\"\"# Letterss of Natac\nIn a game I just made up that doesn’t have anything to do with any other game that you may or may not have played, you collect resources on each turn and then use those resources to build settlements, roads, and cities or buy a development. Other kata about this game can be found [here](https://www.codewars.com/collections/59e6938afc3c49005900011f).\n\n## Task\nThis kata asks you to implement the function `build_or_buy(hand)` , which takes as input a `hand`, the resources you have (a string of letters representing the resources you have), and returns a list of the unique game objects you can build or buy given your hand. \n\nThere are five different resources, `'b'`, `'w'`, `'g'`, `'s'`, and `'o'`.\n\nGame objects and the resources required to build or buy them are as follows:\n1. `'road'`: `bw`\n2. `'settlement'`: `bwsg`\n3. `'city'`: `ooogg`\n4. `'development'`: `osg`\n\n## Notes: \n1. Don't mutate the hand\n2. The order of the returned list doesn't matter\n3. You do not have to test for whether a hand is valid. \n4. The list will be interpreted to mean 'you can build any of these objects,' not 'you can build all these objects in one play'. \n5. A hand can be empty. In the event a hand is empty, you can't build or buy anything, so return an empty list.\n6. Hand are between 0 and 39 in length.\n\"\"\"", "inputs": [["bwoo"], [""], ["ogogoogogo"], ["bwbwwwbb"]], "outputs": [[["road"]], [[]], [["city"]], [["road"]]], "starter_code": "def build_or_buy(hand):", "canonical_solution": "from collections import Counter\nREQUIRE = {x: Counter(s) for x, s in [('road', 'bw'), ('settlement', 'bwsg'), ('city', 'ooogg'), ('development', 'osg')]}\n\ndef build_or_buy(hand):\n    h = Counter(hand)\n    return [item for item, c in REQUIRE.items() if not c - h]", "entry_point": "build_or_buy", "task_id": "TACO_lite/911", "input_output_examples": [[["aabb"]], [[true]]]}
{"requirement": "def modified_sum(lst, p):\"\"\"\nYou are provided with array of positive non-zero ints and int n representing n-th power (n >= 2).\n\nFor the given array, calculate the sum of each value to the n-th power. Then subtract the sum of the original array.\n\"\"\"", "inputs": [[[1, 2, 3], 3], [[1, 2], 5], [[3, 5, 7], 2], [[1, 2, 3, 4, 5], 3], [[2, 7, 13, 17], 2], [[2, 5, 8], 3], [[2, 4, 6, 8], 6], [[5, 10, 15], 4], [[3, 6, 9, 12], 3]], "outputs": [[30], [30], [68], [210], [472], [630], [312940], [61220], [2670]], "starter_code": "def modified_sum(lst, p):", "canonical_solution": "def modified_sum(lst, p):\n    return sum((n ** p - n for n in lst))", "entry_point": "modified_sum", "task_id": "TACO_lite/915", "input_output_examples": [[["aacb", "aabc"], ["aa", "bc"]], [[true], [false]]]}
{"requirement": "def bad_apples(apples):\"\"\"\nHelp a fruit packer sort out the bad apples. \n\nThere are 7 varieties of apples, all packaged as pairs and stacked in a fruit box. Some of the apples are spoiled. The fruit packer will have to make sure the spoiled apples are either removed from the fruit box or replaced. Below is the breakdown:\n\nApple varieties are represented with numbers, `1 to 7`\n\nA fruit package is represented with a 2 element array `[4,3]`\n\nA fruit package with one bad apple, or a bad package, is represented with `[2,0]` or `[0,2]`\n\nA fruit package with two bad apples, or a rotten package, is represented with `[0,0]`\n\nA fruit box is represented with a 2D array\n\nWrite a program to clear the fruit box off bad apples. \n\nThe INPUT will be a fruit box represented with a 2D array\n\nThe OUTPUT should be the fruit box void of bad apples\n\nConditions to be met:\n\n1.A bad package should have the bad apple replaced if there is another bad package with a good apple to spare. Else, the bad package should be discarded.\n\n2.The order of the packages in the fruit box should be preserved. Repackaging happens from the top of the fruit box `index = 0` to the bottom `nth index`. Also note how fruits in a package are ordered when repacking.\n\n3.Rotten packages should be discarded. \n\n4.There can be packages with the same variety of apples, e.g `[1,1]`, this is not a problem.\n\"\"\"", "inputs": [[[]], [[[0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 1], [0, 0], [0, 0]]], [[[0, 0], [3, 7], [0, 5]]], [[[1, 3], [7, 6], [7, 2], [1, 3], [2, 3], [4, 5], [7, 6]]], [[[1, 2], [6, 1], [5, 2], [6, 3], [1, 4], [2, 5], [7, 6], [0, 1]]], [[[0, 0], [1, 0], [0, 2], [3, 0], [4, 0], [0, 5], [0, 6], [7, 0]]], [[[1, 3], [7, 6], [7, 2], [1, 3], [0, 1], [4, 5], [0, 3], [7, 6]]], [[[1, 3], [7, 6], [7, 2], [0, 0], [0, 3], [1, 3], [1, 3], [4, 5], [7, 6]]], [[[7, 2]]], [[[4, 2]]], [[[3, 1], [0, 0], [4, 3], [2, 5], [1, 7], [6, 3], [7, 4], [5, 7], [7, 1], [4, 4], [1, 3], [2, 2], [6, 7], [2, 1], [3, 3]]], [[[2, 3], [1, 1]]], [[[0, 3]]], [[[0, 1]]], [[[0, 1], [7, 7], [7, 2], [5, 4], [7, 1], [4, 3], [4, 6], [7, 4], [4, 0], [4, 5], [1, 1], [0, 3], [6, 7], [5, 7], [3, 1]]], [[[0, 1], [1, 1], [0, 2]]], [[[6, 5], [2, 5], [2, 1], [1, 7], [5, 2], [2, 2], [5, 4]]], [[[0, 1], [6, 0]]], [[[7, 4], [3, 0]]], [[[0, 3], [0, 1]]], [[[0, 2], [2, 0]]], [[[6, 1]]], [[[2, 0]]], [[[5, 0], [5, 7], [7, 1], [5, 5], [7, 5], [6, 6], [4, 1], [7, 0], [0, 7], [5, 3], [3, 1]]], [[[0, 6], [2, 3], [5, 5]]], [[[4, 4]]], [[[0, 1], [7, 2], [7, 1], [3, 2]]], [[[1, 1]]], [[[3, 1], [5, 2], [7, 6], [7, 1], [5, 3], [7, 5], [0, 1], [0, 7], [5, 0]]], [[[2, 5], [1, 3], [7, 5], [1, 5], [1, 1]]], [[[6, 1], [2, 5], [5, 7], [3, 1], [1, 5], [0, 3], [7, 6], [3, 0], [6, 0], [1, 3]]], [[[5, 0], [2, 5], [7, 6], [3, 3], [1, 6], [5, 6], [1, 3], [3, 1]]], [[[5, 1], [0, 1]]], [[[1, 0], [2, 4]]], [[[2, 6], [5, 3], [5, 4], [3, 2]]], [[[1, 3], [5, 6], [3, 5]]], [[[2, 3], [5, 0], [3, 2]]], [[[2, 6], [5, 5]]], [[[0, 3], [6, 5], [3, 3], [2, 3], [1, 0], [6, 3], [1, 1], [7, 3], [4, 3], [2, 1], [5, 0], [3, 1], [5, 7], [1, 5], [5, 5]]], [[[0, 3], [6, 2], [6, 7], [7, 5]]], [[[0, 5], [4, 5], [2, 1]]], [[[3, 7], [5, 5], [6, 3]]], [[[3, 4]]], [[[5, 7], [2, 5], [1, 0], [4, 3], [2, 6], [1, 5], [7, 6], [7, 3], [1, 2], [5, 0], [0, 3], [4, 0], [2, 3], [6, 4], [2, 7]]], [[[1, 1], [6, 7], [2, 3], [6, 6], [7, 1], [0, 5], [3, 7], [4, 3], [4, 4], [4, 0], [5, 6]]], [[[1, 3]]], [[[2, 2], [1, 0], [7, 4], [7, 7], [1, 7], [3, 6]]], [[[3, 0], [0, 3]]]], "outputs": [[[]], [[]], [[]], [[[3, 7]]], [[[1, 3], [7, 6], [7, 2], [1, 3], [2, 3], [4, 5], [7, 6]]], [[[1, 2], [6, 1], [5, 2], [6, 3], [1, 4], [2, 5], [7, 6]]], [[[1, 2], [3, 4], [5, 6]]], [[[1, 3], [7, 6], [7, 2], [1, 3], [1, 3], [4, 5], [7, 6]]], [[[1, 3], [7, 6], [7, 2], [1, 3], [1, 3], [4, 5], [7, 6]]], [[[7, 2]]], [[[4, 2]]], [[[3, 1], [4, 3], [2, 5], [1, 7], [6, 3], [7, 4], [5, 7], [7, 1], [4, 4], [1, 3], [2, 2], [6, 7], [2, 1], [3, 3]]], [[[2, 3], [1, 1]]], [[]], [[]], [[[1, 4], [7, 7], [7, 2], [5, 4], [7, 1], [4, 3], [4, 6], [7, 4], [4, 5], [1, 1], [6, 7], [5, 7], [3, 1]]], [[[1, 2], [1, 1]]], [[[6, 5], [2, 5], [2, 1], [1, 7], [5, 2], [2, 2], [5, 4]]], [[[1, 6]]], [[[7, 4]]], [[[3, 1]]], [[[2, 2]]], [[[6, 1]]], [[]], [[[5, 7], [5, 7], [7, 1], [5, 5], [7, 5], [6, 6], [4, 1], [5, 3], [3, 1]]], [[[2, 3], [5, 5]]], [[[4, 4]]], [[[7, 2], [7, 1], [3, 2]]], [[[1, 1]]], [[[3, 1], [5, 2], [7, 6], [7, 1], [5, 3], [7, 5], [1, 7]]], [[[2, 5], [1, 3], [7, 5], [1, 5], [1, 1]]], [[[6, 1], [2, 5], [5, 7], [3, 1], [1, 5], [3, 3], [7, 6], [1, 3]]], [[[2, 5], [7, 6], [3, 3], [1, 6], [5, 6], [1, 3], [3, 1]]], [[[5, 1]]], [[[2, 4]]], [[[2, 6], [5, 3], [5, 4], [3, 2]]], [[[1, 3], [5, 6], [3, 5]]], [[[2, 3], [3, 2]]], [[[2, 6], [5, 5]]], [[[3, 1], [6, 5], [3, 3], [2, 3], [6, 3], [1, 1], [7, 3], [4, 3], [2, 1], [3, 1], [5, 7], [1, 5], [5, 5]]], [[[6, 2], [6, 7], [7, 5]]], [[[4, 5], [2, 1]]], [[[3, 7], [5, 5], [6, 3]]], [[[3, 4]]], [[[5, 7], [2, 5], [1, 5], [4, 3], [2, 6], [1, 5], [7, 6], [7, 3], [1, 2], [3, 4], [2, 3], [6, 4], [2, 7]]], [[[1, 1], [6, 7], [2, 3], [6, 6], [7, 1], [5, 4], [3, 7], [4, 3], [4, 4], [5, 6]]], [[[1, 3]]], [[[2, 2], [7, 4], [7, 7], [1, 7], [3, 6]]], [[[3, 3]]]], "starter_code": "def bad_apples(apples):", "canonical_solution": "def bad_apples(apples):\n    lst, notFull = ([], [])\n    for a, b in apples:\n        if bool(a) ^ bool(b) and notFull:\n            lst[notFull.pop()].append(a or b)\n        elif a and b:\n            lst.append([a, b])\n        elif a or b:\n            notFull.append(len(lst))\n            lst.append([a or b])\n    if notFull:\n        lst.pop(notFull.pop())\n    return lst", "entry_point": "bad_apples", "task_id": "TACO_lite/916", "input_output_examples": [[[4.2], [4.3], [4.6], [4.8], [4.75]], [[4], [4.5], [4.5], [5], [5]]]}
{"requirement": "def integrate(coef, exp):\"\"\"\nCreate a function that finds the [integral](https://en.wikipedia.org/wiki/Integral) of the expression passed.\n\nIn order to find the integral all you need to do is add one to the `exponent` (the second argument), and divide the `coefficient` (the first argument) by that new number.\n\nNotes:\n* The output should be a string.\n* The coefficient and exponent is always a positive integer.\n\"\"\"", "inputs": [[3, 2], [12, 5], [20, 1], [40, 3], [90, 2]], "outputs": [["1x^3"], ["2x^6"], ["10x^2"], ["10x^4"], ["30x^3"]], "starter_code": "def integrate(coef, exp):", "canonical_solution": "def integrate(coef, exp):\n    exp = exp + 1\n    coef = coef / exp if coef % exp else coef // exp\n    return f'{coef}x^{exp}'", "entry_point": "integrate", "task_id": "TACO_lite/917", "input_output_examples": [[["exampletesthere"], ["reusetestcasesbitcointakeovertheworldmaybewhoknowsperhaps"]], [[["erehtse", "example", "t"]], [["spahrepswonkohwebyamdlroweht", "reusetestcasesbitcointakeove", "r"]]]]}
{"requirement": "def odd_or_even(arr):\"\"\"# Task:\nGiven a list of numbers, determine whether the sum of its elements is odd or even.\n\nGive your answer as a string matching `\"odd\"` or `\"even\"`.\n\nIf the input array is empty consider it as: `[0]` (array with a zero).\n\nHave fun!\n\"\"\"", "inputs": [[[0, 1, 2]], [[0, 1, 3]], [[1023, 1, 2]]], "outputs": [["odd"], ["even"], ["even"]], "starter_code": "def odd_or_even(arr):", "canonical_solution": "def odd_or_even(arr):\n    return 'even' if sum(arr) % 2 == 0 else 'odd'", "entry_point": "odd_or_even", "task_id": "TACO_lite/920", "input_output_examples": [[[[[1], [2]]], [["1", "2"]], [[{"1": 1}, {"2": 2}]]], [[true], [false], [false]]]}
{"requirement": "def pattern(n):\"\"\"\n### Task:\n\nYou have to write a function `pattern` which creates the following pattern (See Examples) upto desired number of rows.\n\nIf the Argument is `0` or a Negative Integer then it should return `\"\"` i.e. empty string.\n\nNote: There are no spaces in the pattern\n\nHint: Use `\\n` in string to jump to next line\n\"\"\"", "inputs": [[7], [1], [4], [0], [-25]], "outputs": [["1234567\n2345671\n3456712\n4567123\n5671234\n6712345\n7123456"], ["1"], ["1234\n2341\n3412\n4123"], [""], [""]], "starter_code": "def pattern(n):", "canonical_solution": "def pattern(n):\n    return '\\n'.join((''.join((str((x + y) % n + 1) for y in range(n))) for x in range(n)))", "entry_point": "pattern", "task_id": "TACO_lite/921", "input_output_examples": [[["/"], ["BA"], ["BB"], ["BC"], ["WIN"]], [[63], [64], [65], [66], [90637]]]}
{"requirement": "def tickets(people):\"\"\"\nThe new \"Avengers\" movie has just been released! There are a lot of people at the cinema box office standing in a huge line. Each of them has a single `100`, `50` or `25` dollar bill. An \"Avengers\" ticket costs `25 dollars`.\n\nVasya is currently working as a clerk. He wants to sell a ticket to every single person in this line.\n\nCan Vasya sell a ticket to every person and give change if he initially has no money and sells the tickets strictly in the order people queue?\n\nReturn `YES`, if Vasya can sell a ticket to every person and give change with the bills he has at hand at that moment. Otherwise return `NO`.\n\"\"\"", "inputs": [[[25, 25, 50]], [[25, 25, 50, 100]], [[25, 100]], [[25, 25, 25, 25, 25, 25, 25, 25, 25, 25]], [[50, 50, 50, 50, 50, 50, 50, 50, 50, 50]], [[100, 100, 100, 100, 100, 100, 100, 100, 100, 100]], [[25, 25, 25, 25, 50, 100, 50]], [[50, 100, 100]], [[25, 25, 100]], [[25, 25, 25, 25, 25, 25, 25, 50, 50, 50, 100, 100, 100, 100]], [[25, 25, 50, 50, 100]], [[25, 50, 50]], [[25, 25, 25, 100]], [[25, 50, 25, 100]], [[25, 25, 25, 25, 25, 100, 100]], [[25, 50, 100, 25, 25, 25, 50]], [[25, 50, 25, 50, 100, 25, 25, 50]], [[25, 50, 25, 100, 25, 25, 50, 100, 25, 25, 25, 100, 25, 25, 50, 100, 25, 50, 25, 100, 25, 50, 50, 50]], [[25, 25, 25, 100, 25, 25, 25, 100, 25, 25, 50, 100, 25, 25, 50, 100, 50, 50]], [[25, 50, 25, 100, 25, 25, 50, 100, 25, 50, 25, 100, 50, 25]]], "outputs": [["YES"], ["YES"], ["NO"], ["YES"], ["NO"], ["NO"], ["YES"], ["NO"], ["NO"], ["NO"], ["NO"], ["NO"], ["YES"], ["YES"], ["NO"], ["NO"], ["NO"], ["NO"], ["NO"], ["NO"]], "starter_code": "def tickets(people):", "canonical_solution": "def tickets(people):\n    till = {100.0: 0, 50.0: 0, 25.0: 0}\n    for paid in people:\n        till[paid] += 1\n        change = paid - 25.0\n        for bill in (50, 25):\n            while bill <= change and till[bill] > 0:\n                till[bill] -= 1\n                change -= bill\n        if change != 0:\n            return 'NO'\n    return 'YES'", "entry_point": "tickets", "task_id": "TACO_lite/922", "input_output_examples": [[[["Hello", "World"]]], [["H W\ne o\nl r\nl l\no d"]]]}
{"requirement": "def find_primes_sextuplet(limit):\"\"\"\nWe are interested in collecting the sets of six prime numbers, that having a starting prime p, the following values are also primes forming the sextuplet ```[p, p + 4, p + 6, p + 10, p + 12, p + 16]```\n\nGiven a number ```sum_limit```, you should give the first sextuplet which sum (of its six primes) surpasses the sum_limit value.\n\nFeatures of the tests:\n```\nNumber Of Tests = 18\n10000 < sum_limit < 29700000\n```\nIf you have solved this kata perhaps you will find easy to solve this one:\nhttps://www.codewars.com/kata/primes-with-two-even-and-double-even-jumps/\nEnjoy it!!\n\"\"\"", "inputs": [[70], [600], [2000000]], "outputs": [[[7, 11, 13, 17, 19, 23]], [[97, 101, 103, 107, 109, 113]], [[1091257, 1091261, 1091263, 1091267, 1091269, 1091273]]], "starter_code": "def find_primes_sextuplet(limit):", "canonical_solution": "def find_primes_sextuplet(limit):\n    for p in [7, 97, 16057, 19417, 43777, 1091257, 1615837, 1954357, 2822707, 2839927, 3243337, 3400207, 6005887]:\n        if p * 6 + 48 > limit:\n            return [p, p + 4, p + 6, p + 10, p + 12, p + 16]", "entry_point": "find_primes_sextuplet", "task_id": "TACO_lite/925", "input_output_examples": [[["*2"], ["*2*"]], [[["12", "42", "72"]], [["024", "120", "126", "222", "228", "324", "420", "426", "522", "528", "624", "720", "726", "822", "828", "924"]]]]}
{"requirement": "def find_it(seq):\"\"\"\nGiven an array of integers, find the one that appears an odd number of times.\n\nThere will always be only one integer that appears an odd number of times.\n\"\"\"", "inputs": [[[20, 1, -1, 2, -2, 3, 3, 5, 5, 1, 2, 4, 20, 4, -1, -2, 5]], [[1, 1, 2, -2, 5, 2, 4, 4, -1, -2, 5]], [[20, 1, 1, 2, 2, 3, 3, 5, 5, 4, 20, 4, 5]], [[10]], [[1, 1, 1, 1, 1, 1, 10, 1, 1, 1, 1]]], "outputs": [[5], [-1], [5], [10], [10]], "starter_code": "def find_it(seq):", "canonical_solution": "def find_it(seq):\n    for i in seq:\n        if seq.count(i) % 2 != 0:\n            return i", "entry_point": "find_it", "task_id": "TACO_lite/931", "input_output_examples": [[[[1, 2, 8, 7]], [[4, 1, 2, 3, 12]], [[2, 3, 2, 3, 4, 2, 12, 3]]], [[4], [11], [1]]]}
{"requirement": "def pay_cheese(arr):\"\"\"Mr Leicester's cheese factory is the pride of the East Midlands, but he's feeling a little blue. It's the time of the year when **the taxman is coming round to take a slice of his cheddar** - and the final thing he has to work out is how much money he's spending on his staff. Poor Mr Leicester can barely sleep he's so stressed. Can you help? \n\n- Mr Leicester **employs 4 staff**, who together make **10 wheels of cheese every 6 minutes**.\n- Worker pay is calculated on **how many wheels of cheese they produce in a day**. \n- Mr Leicester pays his staff according to the UK living wage, which is currently **£8.75p an hour**. There are **100 pence (p) to the UK pound (£)**. \n\nThe input for function payCheese will be provided as an array of five integers, one for each amount of cheese wheels produced each day.\n\nWhen the workforce don't work a nice integer number of minutes - much to the chagrin of the company accountant - Mr Leicester very generously **rounds up to the nearest hour** at the end of the week (*not the end of each day*).\n\nThe return value should be a string (with the £ included) of the **total £ of staff wages for that week.**\n\"\"\"", "inputs": [[[750, 750, 750, 750, 600]], [[700, 750, 700, 750, 600]], [[574, 574, 574, 574, 574]], [[1, 1, 1, 1, 1]], [[0, 0, 0, 0, 0]]], "outputs": [["L1260"], ["L1225"], ["L1015"], ["L35"], ["L0"]], "starter_code": "def pay_cheese(arr):", "canonical_solution": "from math import ceil\n\ndef pay_cheese(arr):\n    return f'L{ceil(sum(arr) / 100) * 35}'", "entry_point": "pay_cheese", "task_id": "TACO_lite/937", "input_output_examples": [[["UFFFD"], ["FUFFDDFDUDFUFUF"]], [[0], [1]]]}
{"requirement": "def mod256_without_mod(number):\"\"\"\n# MOD 256 without the MOD operator\n\nThe MOD-operator % (aka mod/modulus/remainder):\n```\nReturns the remainder of a division operation.\nThe sign of the result is the same as the sign of the first operand.\n(Different behavior in Python!)\n```\n\nThe short unbelievable mad story for this kata:\nI wrote a program and needed the remainder of the division by 256. And then it happened: The \"5\"/\"%\"-Key did not react. It must be broken! So I needed a way to:\n```\nCalculate the remainder of the division by 256 without the %-operator.\n```\n\nIt is always expected the behavior of the MOD-Operator of the language!\n\nThe input number will always between -10000 and 10000.\n\nFor some languages the %-operator will be blocked. If it is not blocked and you know how to block it, tell me and I will include it.\n\nFor all, who say, this would be a duplicate: No, this is no duplicate! There are two katas, in that you have to write a general method for MOD without %. But this kata is only for MOD 256. And so you can create also other specialized solutions. ;-)\n\nOf course you can use the digit \"5\" in your solution. :-)\n\nI'm very curious for your solutions and the way you solve it. I found several interesting \"funny\" ways.\n\nHave fun coding it and please don't forget to vote and rank this kata! :-) \n\nI have also created other katas. Take a look if you enjoyed this kata!\n\"\"\"", "inputs": [[254], [256], [258], [-254], [-256], [-258]], "outputs": [[254], [0], [2], [2], [0], [254]], "starter_code": "def mod256_without_mod(number):", "canonical_solution": "def mod256_without_mod(number):\n    return number & 255", "entry_point": "mod256_without_mod", "task_id": "TACO_lite/939", "input_output_examples": [[["h(el)lo"], ["a ((d e) c b)"], ["one (two (three) four)"], ["one (ruof ((rht)ee) owt)"]], [["h(le)lo"], ["a (b c (d e))"], ["one (ruof (three) owt)"], ["one (two ((thr)ee) four)"]]]}
{"requirement": "def case_unification(s):\"\"\"# Task\nGiven an initial string `s`, switch case of the minimal possible number of letters to make the whole string written in the upper case or in the lower case.\n\n# Input/Output\n\n\n`[input]` string `s`\n\nString of odd length consisting of English letters.\n\n3 ≤ inputString.length ≤ 99.\n\n`[output]` a string\n\nThe resulting string.\n\"\"\"", "inputs": [["asdERvT"], ["oyTYbWQ"], ["bbiIRvbcW"], ["rWTmvcoRWEWQQWR"]], "outputs": [["asdervt"], ["OYTYBWQ"], ["bbiirvbcw"], ["RWTMVCORWEWQQWR"]], "starter_code": "def case_unification(s):", "canonical_solution": "def case_unification(s):\n    return s.lower() if sum((1 for i in s if i.islower())) > sum((1 for i in s if i.isupper())) else s.upper()", "entry_point": "case_unification", "task_id": "TACO_lite/944", "input_output_examples": [[[3, 1, 3], [12, 2, 6], [100, 5, 3], [12, 7, 5]], [[true], [true], [false], [false]]]}
{"requirement": "def find_next_power(val, pow_):\"\"\"\nWe need a function ```find_next_power``` ( ```findNextPower``` in JavaScript, CoffeeScript and Haskell), that receives two arguments, a value ```val```, and the exponent of the power,``` pow_```, and outputs the value that we want to find.\n\nThe value, ```val``` will be always a positive integer.\n\nThe power, ```pow_```, always higher than ```1```.\n\nHappy coding!!\n\"\"\"", "inputs": [[12385, 3], [1245678, 5], [1245678, 6]], "outputs": [[13824], [1419857], [1771561]], "starter_code": "def find_next_power(val, pow_):", "canonical_solution": "def find_next_power(val, pow_):\n    return int(val ** (1.0 / pow_) + 1) ** pow_", "entry_point": "find_next_power", "task_id": "TACO_lite/945", "input_output_examples": [[["56 65 74 100 99 68 86 180 90"], ["103 123 4444 99 2000"]], [["100 180 90 56 65 74 68 86 99"], ["2000 103 123 4444 99"]]]}
{"requirement": "def communication_module(packet):\"\"\"\nWe need you to implement a method of receiving commands over a network, processing the information and responding.\n\nOur device will send a single packet to you containing data and an instruction which you must perform before returning your reply.\n\nTo keep things simple, we will be passing a single \"packet\" as a string. \nEach \"byte\" contained in the packet is represented by 4 chars.\n\nOne packet is structured as below:\n```\nHeader  Instruction   Data1    Data2   Footer\n------   ------       ------   ------  ------\n H1H1     0F12         0012     0008    F4F4\n------   ------       ------   ------  ------\n\nThe string received in this case would be - \"H1H10F1200120008F4F4\"\n```\n\nInstruction: The calculation you should perform, always one of the below.\n            0F12 = Addition\n            B7A2 = Subtraction\n            C3D9 = Multiplication\n            FFFF = This instruction code should be used to identify your return value.\n\n- The Header and Footer are unique identifiers which you must use to form your reply.\n\n- Data1 and Data2 are the decimal representation of the data you should apply your instruction to. _i.e 0109 = 109._\n\n- Your response must include the received header/footer, a \"FFFF\" instruction code, and the result of your calculation stored in Data1.\n\n- Data2 should be zero'd out to \"0000\".\n\nIn the event that your calculation produces a negative result, the value returned should be \"0000\", similarly if the value is above 9999 you should return \"9999\".\n\nGoodluck, I look forward to reading your creative solutions!\n\"\"\"", "inputs": [["H1H10F1200120008F4F4"], ["D7D70F1200250015G8G8"], ["X7X7B7A201400058L0L0"], ["Y2Y2B7A210000902N5N5"], ["R5R5C3D900120008K4K4"], ["S2S2C3D900250005I9I9"], ["E4E40F1239128908Z3Z3"], ["A6A6C3D911150015M0M0"], ["T7T7B7A200258908P2P2"], ["S4S4B7A201153215U8U8"]], "outputs": [["H1H1FFFF00200000F4F4"], ["D7D7FFFF00400000G8G8"], ["X7X7FFFF00820000L0L0"], ["Y2Y2FFFF00980000N5N5"], ["R5R5FFFF00960000K4K4"], ["S2S2FFFF01250000I9I9"], ["E4E4FFFF99990000Z3Z3"], ["A6A6FFFF99990000M0M0"], ["T7T7FFFF00000000P2P2"], ["S4S4FFFF00000000U8U8"]], "starter_code": "def communication_module(packet):", "canonical_solution": "INSTRUCTIONS = {'0F12': int.__add__, 'B7A2': int.__sub__, 'C3D9': int.__mul__}\n\ndef communication_module(packet):\n    header, inst, d1, d2, footer = (packet[i:i + 4] for i in range(0, 20, 4))\n    res = max(0, min(9999, INSTRUCTIONS[inst](int(d1), int(d2))))\n    return f'{header}FFFF{res:0>4}0000{footer}'", "entry_point": "communication_module", "task_id": "TACO_lite/946", "input_output_examples": [[[5]], [[[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]]]]}
{"requirement": "def seven_ate9(str_):\"\"\"\nWrite a function that removes every lone 9 that is inbetween 7s.\n\nInput: String  \nOutput: String\n\"\"\"", "inputs": [["165561786121789797"], ["797"], ["7979797"], ["16797"], ["77"], ["7927"], ["1779"], ["a779"], ["17797a"], ["797 9 7"]], "outputs": [["16556178612178977"], ["77"], ["7777"], ["1677"], ["77"], ["7927"], ["1779"], ["a779"], ["1777a"], ["77 9 7"]], "starter_code": "def seven_ate9(str_):", "canonical_solution": "def seven_ate9(str_):\n    while str_.find('797') != -1:\n        str_ = str_.replace('797', '77')\n    return str_", "entry_point": "seven_ate9", "task_id": "TACO_lite/950", "input_output_examples": [[[["ab", "aaa"]], [["trances", "nectar"]], [["compadres", "DRAPES"]], [["parses", "parsecs"]]], [[true], [true], [true], [false]]]}
{"requirement": "def consecutive_ducks(n):\"\"\"Positive integers have so many gorgeous features. \nSome of them could be expressed as a sum of two or more consecutive positive numbers.\n\n# Task\n\n**_Given_** *Positive integer*, N , **_Return_** true if it could be expressed as a sum of two or more consecutive positive numbers , OtherWise return false .\n\n# Notes \n\n~~~if-not:clojure,csharp,java\n* Guaranteed constraint  :  **_2  ≤  N  ≤  (2^32) -1_** .\n~~~\n~~~if:clojure,csharp,java\n* Guaranteed constraint  :  **_2  ≤  N  ≤  (2^31) -1_** .\n~~~\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [Bizarre Sorting-katas](https://www.codewars.com/collections/bizarre-sorting-katas)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[69], [8], [57], [6], [13], [16], [91], [75], [38], [25], [32], [65], [99], [522], [974], [755], [512], [739], [1006], [838], [1092], [727], [648], [1024], [851], [541], [1011], [822], [382131], [118070], [17209], [32768], [161997], [400779], [198331], [325482], [88441], [65536], [323744], [183540], [65271], [5263987]], "outputs": [[true], [false], [true], [true], [true], [false], [true], [true], [true], [true], [false], [true], [true], [true], [true], [true], [false], [true], [true], [true], [true], [true], [true], [false], [true], [true], [true], [true], [true], [true], [true], [false], [true], [true], [true], [true], [true], [false], [true], [true], [true], [true]], "starter_code": "def consecutive_ducks(n):", "canonical_solution": "from math import log2\n\ndef consecutive_ducks(n):\n    return not log2(n).is_integer()", "entry_point": "consecutive_ducks", "task_id": "TACO_lite/958", "input_output_examples": [[["SATORAREPOTENETOPERAROTAS"], ["AAAAEEEENOOOOPPRRRRSSTTTT"], ["NOTSQUARE"]], [[true], [true], [false]]]}
{"requirement": "def find_mult10_sf(n):\"\"\"\nWe define the sequence ```SF``` in the following way in terms of four previous sequences: ```S1```, ```S2```, ```S3``` and ```ST```\n\n\nWe are interested in collecting the terms of SF that are multiple of ten.\n\nThe first term multiple of ten of this sequence is  ```60```\n\nMake the function ```find_mult10_sf()``` that you introduce the ordinal number of a term multiple of 10 of SF and gives us the value of this term.\n\nMemoization is advisable to have a more agile code for tests.\n\nYour code will be tested up to the 300-th term, multiple of 10.\n\nHappy coding!!\n\"\"\"", "inputs": [[1], [2], [3]], "outputs": [[60], [70080], [90700800]], "starter_code": "def find_mult10_sf(n):", "canonical_solution": "def find_mult10_sf(n):\n    n = 4 * n - 1\n    return (6 ** n + 3 * 2 ** n) / 4", "entry_point": "find_mult10_sf", "task_id": "TACO_lite/962", "input_output_examples": [[["madam"], ["adamm"], ["junk"]], [[true], [true], [false]]]}
{"requirement": "def permutation_average(n):\"\"\"\nA number is simply made up of digits.  \nThe number 1256 is made up of the digits 1, 2, 5, and 6.  \n\nYour goal is to write a program that takes a number, n, and returns the average value of all distinct permutations of the digits in n.  Your answer should be rounded to the nearest integer. For the example above the return value would be 3889. * \n  \n  n will never be negative\n\nNote: Your program should be able to handle numbers up to 6 digits long\n~~~if:python\n\\* Python version 3 and above uses Banker Rounding so the expected values for those tests would be 3888 and 38 respectively\n~~~\n~~~if-not:python\n\\* ignore these marks, they're for Python only\n~~~\n\"\"\"", "inputs": [[2], [25], [737]], "outputs": [[2], [38], [629]], "starter_code": "def permutation_average(n):", "canonical_solution": "from itertools import permutations\n\ndef permutation_average(n):\n    perms = [float(''.join(e)) for e in permutations(str(n))]\n    return int(round(sum(perms) / len(perms)))", "entry_point": "permutation_average", "task_id": "TACO_lite/965", "input_output_examples": [[[[3, -1, -1, -1, 2, 3, -1, 3, -1, 2, 4, 9, 3]]], [[5]]]}
{"requirement": "def even_numbers_before_fixed(s, f):\"\"\"# Task\nGiven array of integers `sequence` and some integer `fixedElement`, output the number of `even` values in sequence before the first occurrence of `fixedElement` or `-1` if and only if `fixedElement` is not contained in sequence.\n\n\n\n# Input/Output\n\n\n`[input]` integer array `sequence`\n\nA non-empty array of positive integers.\n\n`4 ≤ sequence.length ≤ 100`\n\n`1 ≤ sequence[i] ≤ 9`\n\n`[input]` integer `fixedElement`\n\nAn positive integer\n\n`1 ≤ fixedElement ≤ 9`\n\n`[output]` an integer\n\"\"\"", "inputs": [[[1, 4, 2, 6, 3, 1], 6], [[2, 2, 2, 1], 3], [[2, 3, 4, 3], 3], [[1, 3, 4, 3], 3]], "outputs": [[2], [-1], [1], [0]], "starter_code": "def even_numbers_before_fixed(s, f):", "canonical_solution": "def even_numbers_before_fixed(s, f):\n    return len([x for x in s[:s.index(f)] if x % 2 == 0]) if f in s else -1", "entry_point": "even_numbers_before_fixed", "task_id": "TACO_lite/966", "input_output_examples": [[], []]}
{"requirement": "def prime_product(n):\"\"\"\n# Task\nWe know that some numbers can be split into two primes. Given a positive integer `n`. Determine whether it can be split into two primes. If yes, return the maximum product of two primes. If not, return `0` instead.\n\n# Input/Output\n\n`[input]` integer `n`\n\nA positive integer. \n\n`0 ≤ n ≤ 100000`\n\n`[output]` an integer\n\nThe possible maximum product of two primes. or return `0` if it's impossible split into two primes.\n\"\"\"", "inputs": [[1], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [20], [100]], "outputs": [[0], [0], [4], [6], [9], [10], [15], [14], [25], [0], [35], [91], [2491]], "starter_code": "def prime_product(n):", "canonical_solution": "def isPrime(n):\n    return n == 2 or (n > 2 and n & 1 and all((n % p for p in range(3, int(n ** 0.5 + 1), 2))))\n\ndef prime_product(n):\n    return next((x * (n - x) for x in range(n >> 1, 1, -1) if isPrime(x) and isPrime(n - x)), 0)", "entry_point": "prime_product", "task_id": "TACO_lite/969", "input_output_examples": [[["apple"], ["apple of banana"], ["one   space"], ["   space WALK   "]], [["Apple"], ["Apple of Banana"], ["One   Space"], ["   Space Walk   "]]]}
{"requirement": "def pass_the_bill(total, conservative, reformist):\"\"\"\nThere are three parties in parliament. The \"Conservative Party\", the \"Reformist Party\", and a group of independants.\n\n You are a member of the “Conservative Party” and you party is trying to pass a bill. The “Reformist Party” is trying to block it.\n\n In order for a bill to pass, it must have a majority vote, meaning that more than half of all members must approve of a bill before it is passed . The \"Conservatives\" and \"Reformists\" always vote the same as other members of thier parties, meaning that all the members of each party will all vote yes, or all vote no .\n\n However, independants vote individually, and the independant vote is often the determining factor as to whether a bill gets passed or not.\n\n Your task is to find the minimum number of independents that have to vote for your party's (the Conservative Party's) bill so that it is passed .\n\n In each test case the makeup of the Parliament will be different . In some cases your party may make up the majority of parliament, and in others it may make up the minority. If your party is the majority, you may find that you do not neeed any independants to vote in favor of your bill in order for it to pass . If your party is the minority, it may be possible that there are not enough independants for your bill to be passed . If it is impossible for your bill to pass, return `-1`.\n\n# Input/Output\n\n\n - `[input]` integer `totalMembers`\n\n  The total number of members.\n\n\n - `[input]` integer `conservativePartyMembers`\n\n  The number of members in the Conservative Party.\n\n\n - `[input]` integer `reformistPartyMembers`\n\n  The number of members in the Reformist Party.\n\n \n - `[output]` an integer\n\n  The minimum number of independent members that have to vote as you wish so that the bill is passed, or `-1` if you can't pass it anyway.\n\"\"\"", "inputs": [[8, 3, 3], [13, 4, 7], [7, 4, 3], [11, 4, 1], [11, 5, 1], [11, 6, 1], [11, 4, 4], [11, 5, 4], [11, 5, 5], [11, 4, 6], [11, 4, 5], [15, 9, 3], [16, 7, 8], [16, 8, 7], [16, 1, 8]], "outputs": [[2], [-1], [0], [2], [1], [0], [2], [1], [1], [-1], [2], [0], [-1], [1], [-1]], "starter_code": "def pass_the_bill(total, conservative, reformist):", "canonical_solution": "def pass_the_bill(total, conservative, reformist):\n    ind = total - conservative - reformist\n    majority = total // 2 + 1\n    if conservative > majority:\n        return 0\n    elif conservative + ind < majority:\n        return -1\n    else:\n        return majority - conservative", "entry_point": "pass_the_bill", "task_id": "TACO_lite/970", "input_output_examples": [[[5], [92], [1], [12], [42], [100], [2017]], [["black"], ["white"], ["white"], ["black"], ["white"], ["black"], ["white"]]]}
{"requirement": "def count_correct_characters(c, g):\"\"\"\nConsider a game, wherein the player has to guess a target word. All the player knows is the length of the target word.\n\nTo help them in their goal, the game will accept guesses, and return the number of letters that are in the correct position.\n\nWrite a method that, given the correct word and the player's guess, returns this number.\n\nThe caller should ensure that the guessed word is always the same length as the correct word, but since it could cause problems if this were not the case, you need to check for this eventuality:\n\n```cs\n//Throw an InvalidOperationException if the two parameters are of different lengths.\n```\n```python\n#Raise an exception if the two parameters are of different lengths.\n```\n\nYou may assume, however, that the two parameters will always be in the same case.\n\"\"\"", "inputs": [["dog", "car"], ["dog", "god"], ["dog", "cog"], ["dog", "cod"], ["dog", "bog"], ["dog", "dog"], ["abcde", "abcde"], ["same", "same"], ["z", "z"]], "outputs": [[0], [1], [2], [1], [2], [3], [5], [4], [1]], "starter_code": "def count_correct_characters(c, g):", "canonical_solution": "def count_correct_characters(c, g):\n    if len(c) != len(g):\n        raise Exception('Error')\n    return sum((1 for i, j in zip(c, g) if i == j))", "entry_point": "count_correct_characters", "task_id": "TACO_lite/972", "input_output_examples": [[["abcdef", [1, 2, 5]], ["abcdef", [1, 2, 5, 100]]], [["aBCdeF"], ["aBCdeF"]]]}
{"requirement": "def gym_slang(phrase):\"\"\"# RegExp Fun #1 - When I miss few days of gym\n\n## Disclaimer\n\nThe background story of this Kata is 100% fiction.  Any resemblance to real people or real events is **nothing more than a coincidence** and should be regarded as such.\n\n## Background Story\n\nYou are a person who loves to go to the gym everyday with the squad of people that you've known since early childhood.  However, you recently contracted a sickness that forced you to stay at home for over a week.  As you see your body getting weaker and weaker every day and as you see your biceps and triceps disappearing, you can't help but lay in bed and cry.  You're usually an optimistic person but this time negative thoughts come to your head ... \n\n![When I miss few days of gym](https://pics.onsizzle.com/Instagram-faf8c9.png)\n\n\n## Task\n\nAs can be seen from the funny image above (or am I the only person to find the picture above hilarious?) there is lots of slang.  Your task is to define a function ```gymSlang``` which accepts a string argument and does the following:\n\n1. Replace *all* instances of ```\"probably\"``` to ```\"prolly\"```\n2. Replace *all* instances of ```\"i am\"``` to ```\"i'm\"```\n3. Replace *all* instances of ```\"instagram\"``` to ```\"insta\"```\n4. Replace *all* instances of ```\"do not\"``` to ```\"don't\"```\n5. Replace *all* instances of ```\"going to\"``` to ```\"gonna\"```\n6. Replace *all* instances of ```\"combination\"``` to ```\"combo\"```\n\nYour replacement regexes **should be case-sensitive**, only replacing the words above with slang if the detected pattern is in **lowercase**.  However, please note that apart from 100% lowercase matches, you will **also have to replace matches that are correctly capitalized**.\n\nFinally, your code will be tested to make sure that you have used **RegExp** replace in your code.\n\nEnjoy :D\n\"\"\"", "inputs": [["When I miss few days of gym"], ["Squad probably think I am fake"], ["Whole squad probably bigger than me now"], ["No selfie to post on Instagram either"], ["Gym crush probably found someone else"], ["What if I die fat"], ["What if I do not fit in my clothes now"], ["Going to feel like a new gym member"], ["wait what was my lock combination"], ["that skinny girl can probably outlift me now"], ["probably Probably"], ["i am I am"], ["instagram Instagram"], ["do not Do not"], ["going to Going to"], ["combination Combination"], ["probably Probably probably Probably probably Probably probably Probably probably Probably"], ["i am I am i am I am i am I am i am I am i am I am i am I am"], ["instagram Instagram instagram Instagram instagram Instagram instagram Instagram instagram Instagram"], ["do not Do not do not Do not do not Do not do not Do not"], ["Going to going to Going to Going to going to Going to Going to going to Going to"], ["combination combination Combination combination Combination"]], "outputs": [["When I miss few days of gym"], ["Squad prolly think I'm fake"], ["Whole squad prolly bigger than me now"], ["No selfie to post on Insta either"], ["Gym crush prolly found someone else"], ["What if I die fat"], ["What if I don't fit in my clothes now"], ["Gonna feel like a new gym member"], ["wait what was my lock combo"], ["that skinny girl can prolly outlift me now"], ["prolly Prolly"], ["i'm I'm"], ["insta Insta"], ["don't Don't"], ["gonna Gonna"], ["combo Combo"], ["prolly Prolly prolly Prolly prolly Prolly prolly Prolly prolly Prolly"], ["i'm I'm i'm I'm i'm I'm i'm I'm i'm I'm i'm I'm"], ["insta Insta insta Insta insta Insta insta Insta insta Insta"], ["don't Don't don't Don't don't Don't don't Don't"], ["Gonna gonna Gonna Gonna gonna Gonna Gonna gonna Gonna"], ["combo combo Combo combo Combo"]], "starter_code": "def gym_slang(phrase):", "canonical_solution": "import re\n\ndef gym_slang(phrase):\n    phrase = re.sub('([pP])robably', '\\\\1rolly', phrase)\n    phrase = re.sub('([iI]) am', \"\\\\1'm\", phrase)\n    phrase = re.sub('([iI])nstagram', '\\\\1nsta', phrase)\n    phrase = re.sub('([dD])o not', \"\\\\1on't\", phrase)\n    phrase = re.sub('([gG])oing to', '\\\\1onna', phrase)\n    phrase = re.sub('([cC])ombination', '\\\\1ombo', phrase)\n    return phrase", "entry_point": "gym_slang", "task_id": "TACO_lite/981", "input_output_examples": [[[7, 7, 8, 8, 9, 9], [9, 7, 8, 8, 9, 7], [8, 8, 7, 9, 9, 9, 8, 9, 7]], [[0], [1], 4]]}
{"requirement": "def riders(stations):\"\"\"# A History Lesson\n\nThe Pony Express was a mail service operating in the US in 1859-60.\n\n\n\n\nIt reduced the time for messages to travel between the Atlantic and Pacific coasts to about 10 days, before it was made obsolete by the [transcontinental telegraph](https://en.wikipedia.org/wiki/First_transcontinental_telegraph).\n\n# How it worked\n\nThere were a number of *stations*, where:\n\n* The rider switched to a fresh horse and carried on, or\n* The mail bag was handed over to the next rider\n\n\n# Kata Task\n\n`stations` is a list/array of distances (miles) from one station to the next along the Pony Express route.\n\nImplement the `riders` method/function, to return how many riders are necessary to get the mail from one end to the other.\n\n**NOTE:** Each rider travels as far as he can, but never more than 100 miles.\n\n---\n*Good Luck.\nDM.*\n\n---\n\nSee also\n\n* The Pony Express\n* The Pony Express (missing rider)\n\"\"\"", "inputs": [[[18, 15]], [[43, 23, 40, 13]], [[33, 8, 16, 47, 30, 30, 46]], [[6, 24, 6, 8, 28, 8, 23, 47, 17, 29, 37, 18, 40, 49]], [[50, 50]], [[50, 50, 25, 50, 24]], [[50, 50, 25, 50, 25]], [[50, 50, 25, 50, 26]], [[90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90]]], "outputs": [[1], [2], [3], [4], [1], [2], [2], [3], [100]], "starter_code": "def riders(stations):", "canonical_solution": "def riders(stations):\n    riders, travelled = (1, 0)\n    for dist in stations:\n        if travelled + dist > 100:\n            riders += 1\n            travelled = dist\n        else:\n            travelled += dist\n    return riders", "entry_point": "riders", "task_id": "TACO_lite/982", "input_output_examples": [[[{"person": "Abe", "dest": ["London", "Dubai"]}, {"person": "Bond", "dest": ["Melbourne", "Dubai"]}], [{"person": "Abe", "dest": ["Dubai"]}, {"person": "Brad", "dest": ["Dubai"]}], [{"person": "Abe", "dest": ["London", "Dubai"]}, {"person": "Bond", "dest": ["Melbourne", "Dubai"]}, {"person": "Carrie", "dest": ["Melbourne"]}, {"person": "Damu", "dest": ["Melbourne", "Dubai", "Paris"]}]], [[{"person": "Abe", "dest": ["London"]}, {"person": "Bond", "dest": ["Melbourne"]}], [], [{"person": "Abe", "dest": ["London"]}, {"person": "Damu", "dest": ["Paris"]}]]]}
{"requirement": "def addsup(a1, a2, a3):\"\"\"\nWhat adds up\n===========\n\nGiven three arrays of integers your task is to create an algorithm that finds the numbers in the first two arrays whose sum is equal to any number in the third. The return value should be an array containing the values from the argument arrays that add up. The sort order of the resulting array is not important. If no combination of numbers adds up return an empty array.\n\n### Testing\nA function `compare_array` is given. This function takes two arrays and compares them invariant of sort order.\n\n### Greater goal\nFor extra honor try and make it as effective as possible. Discuss what the most effective way of doing this is. The fastest way I can do this is in *O(n^2)*. Can you do it quicker?\n\"\"\"", "inputs": [[[], [1, 2, 3], [5, 2, 3]], [[1, 3, 4], [], [4, 6, 5]], [[1, 2, 3], [4, 5, 6], []]], "outputs": [[[]], [[]], [[]]], "starter_code": "def addsup(a1, a2, a3):", "canonical_solution": "def addsup(a1, a2, a3):\n    return [[x, y, x + y] for x in a1 for y in a2 if x + y in a3]", "entry_point": "addsup", "task_id": "TACO_lite/984", "input_output_examples": [[["*", "00101100"]], [["10101100"]]]}
{"requirement": "def min_dot(a, b):\"\"\"\n### Task\nThe __dot product__ is usually encountered in linear algebra or scientific computing. It's also called __scalar product__ or __inner product__ sometimes:\n\n> In mathematics, the __dot product__, or __scalar product__ (or sometimes __inner product__ in the context of Euclidean space), is an algebraic operation that takes two equal-length sequences of numbers (usually coordinate vectors) and returns a single number. [Wikipedia](https://en.wikipedia.org/w/index.php?title=Dot_product&oldid=629717691)\n\nIn our case, we define the dot product algebraically for two vectors `a = [a1, a2, …, an]`, `b = [b1, b2, …, bn]` as \n    \n    dot a b = a1 * b1 + a2 * b2 + … + an * bn.\nYour task is to find permutations of `a` and `b`, such that `dot a b` is minimal, and return that value.\n\n### Remarks\nIf the list or array is empty, `minDot` should return 0. All arrays or lists will have the same length. Also, for the dynamically typed languages, all inputs will be valid lists or arrays, you don't need to check for `undefined`, `null` etc.\n\nNote: This kata is inspired by [GCJ 2008](https://code.google.com/codejam/contest/32016/dashboard#s=p0).\n\"\"\"", "inputs": [[[], []], [[1, 2, 3, 4, 5], [0, 1, 1, 1, 0]], [[1, 2, 3, 4, 5], [0, 0, 1, 1, -4]], [[1, 3, 5], [4, -2, 1]]], "outputs": [[0], [6], [-17], [-3]], "starter_code": "def min_dot(a, b):", "canonical_solution": "def min_dot(a, b):\n    return sum((x * y for x, y in zip(sorted(a), sorted(b, reverse=True))))", "entry_point": "min_dot", "task_id": "TACO_lite/993", "input_output_examples": [[[[1, 2, 3], [2, 3, 1], [3, 1, 2]], [[3], [2], [4]], [[3], [2], [1]]], [[3, 4, 6], [9], [6]]]}
{"requirement": "def sum_fracts(lst):\"\"\"\nYou will have a list of rationals in the form\n\n```\nlst = [ [numer_1, denom_1] , ... , [numer_n, denom_n] ]\n```\nor\n```\nlst = [ (numer_1, denom_1) , ... , (numer_n, denom_n) ]\n```\n\nwhere all numbers are positive integers. You have to produce their sum `N / D` in an irreducible form: this means that `N` and `D` have only `1` as a common divisor.\n\nReturn the result in the form:\n\n- `[N, D]` in Ruby, Crystal, Python, Clojure, JS, CS, PHP, Julia\n- `Just \"N D\"` in Haskell, PureScript\n- `\"[N, D]\"` in Java, CSharp, TS, Scala, PowerShell, Kotlin\n- `\"N/D\"` in Go, Nim\n- `{N, D}` in C++, Elixir\n- `{N, D}` in C\n- `Some((N, D))` in Rust\n- `Some \"N D\"` in F#, Ocaml\n- `c(N, D)` in R\n- `(N, D)` in Swift\n- `'(N D)` in Racket\n\nIf the result is an integer (`D` evenly divides `N`) return:\n\n- an integer in Ruby, Crystal, Elixir, Clojure, Python, JS, CS, PHP, R, Julia\n- `Just \"n\"` (Haskell, PureScript)\n- `\"n\"` Java, CSharp, TS, Scala, PowerShell, Go, Nim, Kotlin\n- `{n, 1}` in C++\n- `{n, 1}` in C\n- `Some((n, 1))` in Rust\n- `Some \"n\"` in F#, Ocaml,\n- `(n, 1)` in Swift\n- `n` in Racket \n\nIf the input list is empty, return \n\n- `nil/None/null/Nothing` \n- `{0, 1}` in C++\n- `{0, 1}` in C\n- `\"0\"` in Scala, PowerShell, Go, Nim\n- `O` in Racket\n- `\"\"` in Kotlin\n\n\n### Note\nSee sample tests for more examples and the form of results.\n\"\"\"", "inputs": [[[[1, 2], [1, 3], [1, 4]]], [[[1, 3], [5, 3]]], [[[12, 3], [15, 3]]], [[[2, 7], [1, 3], [1, 12]]], [[[69, 130], [87, 1310], [3, 4]]], [[[77, 130], [84, 131], [60, 80]]], [[[6, 13], [187, 1310], [31, 41]]], [[[8, 15], [7, 111], [4, 25]]], [[]], [[[81345, 15786], [87546, 11111111], [43216, 255689]]], [[[1, 8], [1, 9]]], [[[2, 8], [1, 9]]]], "outputs": [[[13, 12]], [2], [9], [[59, 84]], [[9177, 6812]], [[67559, 34060]], [[949861, 698230]], [[2099, 2775]], [null], [[79677895891146625, 14949283383840498]], [[17, 72]], [[13, 36]]], "starter_code": "def sum_fracts(lst):", "canonical_solution": "from fractions import Fraction\n\ndef sum_fracts(lst):\n    if lst:\n        ret = sum((Fraction(a, b) for a, b in lst))\n        return ret.numerator if ret.denominator == 1 else [ret.numerator, ret.denominator]", "entry_point": "sum_fracts", "task_id": "TACO_lite/994", "input_output_examples": [[[5]], [[3]]]}
{"requirement": "def remainder(dividend, divisor):\"\"\"\n## Task\n\nWrite a method `remainder` which takes two integer arguments, `dividend` and `divisor`, and returns the remainder when dividend is divided by divisor. Do NOT use the modulus operator (%) to calculate the remainder!\n\n#### Assumption\n\nDividend will always be `greater than or equal to` divisor.\n\n#### Notes\n\nMake sure that the implemented `remainder` function works exactly the same as the `Modulus operator (%)`.\n\n```if:java\n`SimpleInteger` is a tiny and immutable implementation of an integer number. Its interface is a very small subset of the `java.math.BigInteger` API:\n\n* `#add(SimpleInteger val)`\n* `#subtract(SimpleInteger val)`\n* `#multiply(SimpleInteger val)`\n* `#divide(SimpleInteger val)`\n* `#compareTo(SimpleInteger val)`\n```\n\"\"\"", "inputs": [[3, 2], [19, 2], [10, 2], [34, 7], [27, 5]], "outputs": [[1], [1], [0], [6], [2]], "starter_code": "def remainder(dividend, divisor):", "canonical_solution": "def remainder(dividend, divisor):\n    while divisor <= dividend:\n        dividend = dividend - divisor\n    return dividend", "entry_point": "remainder", "task_id": "TACO_lite/995", "input_output_examples": [[[40, 120, 3500], [60, 120, 3500], [80, 120, 3500]], [[1021], [1750], [2478]]]}
{"requirement": "def palindrome(num):\"\"\"\nA palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward. \n\nFor this kata, single digit numbers will not be considered numerical palindromes. \n\nFor a given number ```num```, write a function to test if the number contains a numerical palindrome or not and return a boolean (true if it does and false if does not). Return \"Not valid\" if the input is not an integer or is less than 0. \n\nNote: Palindromes should be found without permutating ```num```.\n\"\"\"", "inputs": [[868], [1321], [1215], [2], [123322367], [1551], [13598], ["ACCDDCCA"], ["1551"], [-4505], [22.22]], "outputs": [[true], [false], [true], [false], [true], [true], [false], ["Not valid"], ["Not valid"], ["Not valid"], ["Not valid"]], "starter_code": "def palindrome(num):", "canonical_solution": "def palindrome(num):\n    if type(num) != int or num < 0:\n        return 'Not valid'\n    s = str(num)\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2]:\n            return True\n    return len(s) != 1 and s[-1] == s[-2]", "entry_point": "palindrome", "task_id": "TACO_lite/1001", "input_output_examples": [[["||| ||||//| |/"]], [["/// ||||//| |/"]]]}
{"requirement": "def sort_time(arr):\"\"\"\n###Instructions\n\nA time period starting from ```'hh:mm'``` lasting until ```'hh:mm'``` is stored in an array:\nA set of different time periods is then stored in a 2D Array like so, each in its own sub-array:\n\nWrite a function that will take a 2D Array like the above as argument and return a 2D Array of the argument's sub-arrays sorted in ascending order.\n\nTake note of the following:\n\n* The first time period starts at the earliest time  possible ```('00:00'+)```.\n* The next time period is the one that starts the soonest **after** the prior time period finishes. If several time periods begin at the same hour, pick the first one showing up in the original array.\n* The next time period can start the same time the last one finishes.\n\"\"\"", "inputs": [[[["08:14", "11:34"], ["08:16", "08:18"], ["13:48", "01:14"], ["09:30", "10:32"], ["04:23", "05:11"], ["11:48", "13:48"], ["01:12", "01:14"], ["01:13", "08:15"]]], [[["00:00", "00:05"], ["16:37", "18:19"], ["12:07", "12:12"], ["00:30", "02:49"], ["12:12", "12:14"], ["12:14", "15:00"], ["15:00", "19:32"]]], [[["12:00", "10:01"], ["06:31", "14:23"], ["03:02", "07:58"], ["08:13", "10:05"], ["18:37", "04:22"], ["12:58", "14:28"], ["01:51", "14:40"], ["04:27", "01:00"], ["22:56", "23:33"], ["19:23", "07:00"], ["02:13", "16:14"], ["10:40", "02:36"], ["11:49", "00:10"]]], [[["07:05", "01:22"], ["07:40", "07:39"], ["17:35", "15:16"], ["21:33", "11:22"], ["02:58", "17:50"], ["18:43", "13:14"], ["18:15", "11:02"], ["12:42", "10:06"], ["00:26", "02:12"]]], [[["17:29", "06:34"], ["00:46", "15:02"], ["04:59", "22:28"], ["22:16", "21:53"], ["08:44", "00:57"]]], [[["13:40", "00:19"], ["11:09", "13:58"], ["06:50", "14:51"], ["00:15", "00:02"], ["19:18", "08:32"], ["03:19", "12:49"], ["18:16", "05:57"], ["14:27", "02:50"], ["01:11", "12:24"]]], [[["06:10", "04:38"], ["11:23", "08:13"], ["14:15", "01:21"], ["23:15", "23:27"], ["16:01", "12:16"], ["07:24", "19:36"], ["16:16", "03:07"]]], [[["07:41", "07:02"], ["02:47", "11:37"], ["16:04", "12:52"], ["03:55", "09:03"], ["00:16", "20:48"], ["02:44", "14:11"], ["23:12", "12:22"], ["22:29", "05:37"], ["18:22", "12:27"], ["17:44", "01:02"], ["03:15", "03:42"]]], [[["11:33", "18:09"], ["02:10", "08:51"], ["01:56", "18:22"], ["06:16", "21:38"], ["12:24", "19:01"], ["23:09", "20:42"], ["20:39", "09:01"], ["13:13", "06:13"], ["04:40", "12:01"]]], [[["08:15", "19:22"], ["08:35", "00:16"], ["19:37", "08:24"], ["18:33", "08:26"], ["20:17", "05:56"], ["23:45", "18:08"], ["02:52", "13:29"]]]], "outputs": [[[["01:12", "01:14"], ["04:23", "05:11"], ["08:14", "11:34"], ["11:48", "13:48"], ["13:48", "01:14"], ["08:16", "08:18"], ["09:30", "10:32"], ["01:13", "08:15"]]], [[["00:00", "00:05"], ["00:30", "02:49"], ["12:07", "12:12"], ["12:12", "12:14"], ["12:14", "15:00"], ["15:00", "19:32"], ["16:37", "18:19"]]], [[["01:51", "14:40"], ["18:37", "04:22"], ["04:27", "01:00"], ["02:13", "16:14"], ["19:23", "07:00"], ["08:13", "10:05"], ["10:40", "02:36"], ["03:02", "07:58"], ["11:49", "00:10"], ["06:31", "14:23"], ["22:56", "23:33"], ["12:00", "10:01"], ["12:58", "14:28"]]], [[["00:26", "02:12"], ["02:58", "17:50"], ["18:15", "11:02"], ["12:42", "10:06"], ["17:35", "15:16"], ["18:43", "13:14"], ["21:33", "11:22"], ["07:05", "01:22"], ["07:40", "07:39"]]], [[["00:46", "15:02"], ["17:29", "06:34"], ["08:44", "00:57"], ["04:59", "22:28"], ["22:16", "21:53"]]], [[["00:15", "00:02"], ["01:11", "12:24"], ["13:40", "00:19"], ["03:19", "12:49"], ["14:27", "02:50"], ["06:50", "14:51"], ["18:16", "05:57"], ["11:09", "13:58"], ["19:18", "08:32"]]], [[["06:10", "04:38"], ["07:24", "19:36"], ["23:15", "23:27"], ["11:23", "08:13"], ["14:15", "01:21"], ["16:01", "12:16"], ["16:16", "03:07"]]], [[["00:16", "20:48"], ["22:29", "05:37"], ["07:41", "07:02"], ["16:04", "12:52"], ["17:44", "01:02"], ["02:44", "14:11"], ["18:22", "12:27"], ["23:12", "12:22"], ["02:47", "11:37"], ["03:15", "03:42"], ["03:55", "09:03"]]], [[["01:56", "18:22"], ["20:39", "09:01"], ["11:33", "18:09"], ["23:09", "20:42"], ["02:10", "08:51"], ["12:24", "19:01"], ["04:40", "12:01"], ["13:13", "06:13"], ["06:16", "21:38"]]], [[["02:52", "13:29"], ["18:33", "08:26"], ["08:35", "00:16"], ["08:15", "19:22"], ["19:37", "08:24"], ["20:17", "05:56"], ["23:45", "18:08"]]]], "starter_code": "def sort_time(arr):", "canonical_solution": "def sort_time(arr):\n    arr, s = (sorted(arr, key=lambda t: t[0]), [])\n    while arr:\n        nextTP = next((i for i, t in enumerate(arr) if not s or t[0] >= s[-1][1]), 0)\n        s.append(arr.pop(nextTP))\n    return s", "entry_point": "sort_time", "task_id": "TACO_lite/1003", "input_output_examples": [[[1], [12], [19], [450], [581]], [[11], [26], [-1], [2559], [-1]]]}
{"requirement": "def bucket_of(said):\"\"\"\nThere are just some things you can't do on television. In this case, you've just come back from having a \"delicious\" Barth burger and you're set to give an interview. The Barth burger has made you queezy, and you've forgotten some of the import rules of the \"You Can't Do That on Television\" set.\n\nIf you say any of the following words a large bucket of \"water\" will be dumped on you:\n\"water\", \"wet\", \"wash\"\nThis is true for any form of those words, like \"washing\", \"watered\", etc.\n\nIf you say any of the following phrases you will be doused in \"slime\":\n\"I don't know\", \"slime\"\n\nIf you say both in one sentence, a combination of water and slime, \"sludge\", will be dumped on you.\n\nWrite a function, bucketOf(str), that takes a string and determines what will be dumped on your head. If you haven't said anything you shouldn't have, the bucket should be filled with \"air\". The words should be tested regardless of case.\n\"\"\"", "inputs": [["water"], ["wet"], ["wash"], ["i don't know"], ["slime"], ["wet water"], ["slime water"], ["I don't know if this will work"], ["I don't know if this will work without watering it first."], [""], ["is there SLIME in that?!"], ["i won't say anything"], ["WaTeR?"], ["but i can say sludge?"], ["i'm just going to wash my hands of this"], ["you know what, i don't know what was in that Barth burger"], ["slimeslimeslimeslimewater"], ["air"], ["w-w-w-w-wet!"], ["wat errrr i mean.. nothing"], ["sludge"]], "outputs": [["water"], ["water"], ["water"], ["slime"], ["slime"], ["water"], ["sludge"], ["slime"], ["sludge"], ["air"], ["slime"], ["air"], ["water"], ["air"], ["water"], ["slime"], ["sludge"], ["air"], ["water"], ["air"], ["air"]], "starter_code": "def bucket_of(said):", "canonical_solution": "import re\nWATER_PATTERN = re.compile('water|wet|wash', re.I)\nSLIME_PATTERN = re.compile(\"\\\\bI don't know\\\\b|slime\", re.I)\n\ndef bucket_of(said):\n    water = WATER_PATTERN.search(said)\n    slime = SLIME_PATTERN.search(said)\n    if water:\n        return 'sludge' if slime else 'water'\n    return 'slime' if slime else 'air'", "entry_point": "bucket_of", "task_id": "TACO_lite/1013", "input_output_examples": [[[1, 2, 1, 3], [2, 3, 4, 5], [1, 2, 2, 3], [1, 1, 3, 5]], [[[[1, 7], [5, 5]]], [[[2, 23], [7, 22]]], [[[1, 8], [4, 7]]], [[[2, 8]]]]]}
{"requirement": "def boxes_packing(l, w, h):\"\"\"# Task\n You are given n rectangular boxes, the ith box has the length lengthi, the width widthi and the height heighti. \n \n Your task is to check if it is possible to pack all boxes into one so that inside each box there is no more than one another box (which, in turn, can contain at most one another box, and so on). \n \n More formally, your task is to check whether there is such sequence of n different numbers pi (1 ≤ pi ≤ n) that for each 1 ≤ i < n the box number pi can be put into the box number pi+1.\n\n A box can be put into another box if all sides of the first one are less than the respective ones of the second one. You can rotate each box as you wish, i.e. you can `swap` its length, width and height if necessary.\n\n# Input/Output\n\n\n - `[input]` integer array `length`\n\n    Array of positive integers.\n\n    Constraints:\n\n    `1 ≤ length.length ≤ 100,`\n\n    `1 ≤ length[i] ≤ 2000.`\n\n\n - `[input]` integer array `width`\n\n    Array of positive integers.\n\n    Constraints:\n\n    `width.length = length.length,`\n\n    `1 ≤ width[i] ≤ 2000.`\n\n\n - `[input]` integer array `height`\n\n    Array of positive integers.\n\n    Constraints:\n\n    `height.length = length.length,`\n\n    `1 ≤ height[i] ≤ 2000.`\n\n\n - `[output]` a boolean value\n\n    `true` if it is possible to put all boxes into one, `false` otherwise.\n\"\"\"", "inputs": [[[1, 3, 2], [1, 3, 2], [1, 3, 2]], [[1, 1], [1, 1], [1, 1]], [[3, 1, 2], [3, 1, 2], [3, 2, 1]], [[2], [3], [4]], [[5, 7, 4, 1, 2], [4, 10, 3, 1, 4], [6, 5, 5, 1, 2]], [[6, 4], [5, 3], [4, 5]], [[6, 3], [5, 4], [4, 5]], [[6, 3], [5, 5], [4, 4]], [[883, 807], [772, 887], [950, 957]], [[6, 5], [5, 3], [4, 4]], [[4, 10, 3, 1, 4], [5, 7, 4, 1, 2], [6, 5, 5, 1, 2]], [[10, 8, 6, 4, 1], [7, 7, 6, 3, 2], [9, 6, 3, 2, 1]]], "outputs": [[true], [false], [false], [true], [true], [true], [true], [true], [true], [true], [true], [true]], "starter_code": "def boxes_packing(l, w, h):", "canonical_solution": "def boxes_packing(l, w, h):\n    boxes = sorted((sorted(t) for t in zip(l, w, h)))\n    return all((s < l for b1, b2 in zip(boxes[:-1], boxes[1:]) for s, l in zip(b1, b2)))", "entry_point": "boxes_packing", "task_id": "TACO_lite/1020", "input_output_examples": [[["apples, pears # and bananas\ngrapes\nbananas !apples", ["#", "!"]]], [["apples, pears\ngrapes\nbananas"]]]}
{"requirement": "def solve(files):\"\"\"\n## Description\n\nYou've been working with a lot of different file types recently as your interests have broadened.\n\nBut what file types are you using the most? With this question in mind we look at the following problem.\n\nGiven a `List/Array` of Filenames (strings) `files` return a `List/Array of string(s)` contatining the most common extension(s). If there is a tie, return a sorted list of all extensions.\n\n### Important Info:\n\n* Don't forget, you've been working with a lot of different file types, so expect some interesting extensions/file names/lengths in the random tests.\n* Filenames and extensions will only contain letters (case sensitive), and numbers.\n* If a file has multiple extensions (ie: `mysong.mp3.als`) only count the the last extension (`.als` in this case)\n\"\"\"", "inputs": [[["direful.pr", "festive.html", "historical.wav", "holistic.mp3", "impossible.jar", "gentle.cpp", "gleaming.xml", "inconclusive.js", "erect.jar", "befitting.mp3", "brief.wp", "beautiful.jar", "energetic.pt", "careful.wp", "defective.cpp", "icky.wav", "gorgeous.txt", "good.pt", "fat.pt", "bored.als", "adaptable.cpp", "fumbling.exe", "grieving.wp", "efficient.wav", "fearful.xml", "damp.html", "erect.exe", "annoyed.xml", "elderly.ala", "far-flung.txt", "careful.mp3", "actually.pt", "cynical.ala", "complex.exe", "extra-small.pt", "enchanted.ala", "amazing.html", "bashful.h", "hallowed.html", "entertaining.html", "bad.js", "illegal.maya", "deadpan.html", "furtive.wp", "hanging.css", "drunk.py", "capricious.wav", "damaging.Ue4", "cool.Ue4", "ambitious.css", "fortunate.wp", "electric.mp3", "crowded.txt", "cooperative.html", "graceful.pt", "aboard.pt", "exclusive.als", "glossy.css", "fluffy.pt", "cluttered.txt", "halting.cpp", "glib.cpp", "aback.pr", "cynical.Ue4", "chilly.xml", "hideous.ala", "finicky.txt", "feigned.ala", "better.Ue4", "dear.py", "available.xml", "easy.pr", "fine.mp3", "cowardly.jar", "incredible.css", "adhesive.exe", "energetic.mp3", "harmonious.exe", "general.als", "condemned.als", "flawless.als", "curvy.h", "ambitious.mp3", "disillusioned.xml", "bitter.h", "hanging.wp", "certain.cpp", "flashy.html", "cuddly.pr", "cagey.Ue4", "extra-small.pr", "amuck.cpp", "direful.html", "delightful.als", "helpless.h", "foamy.mp3", "enthusiastic.maya", "good.maya", "adhesive.css", "imperfect.pr", "bent.cpp", "exultant.zbrush", "adorable.mp3", "clammy.maya", "gaudy.pt", "blushing.css", "cuddly.Ue4", "curved.py", "boring.html", "broken.txt", "daily.jar", "giddy.xml", "curved.css", "future.maya", "graceful.css", "guiltless.maya", "gentle.cpp", "few.css", "calculating.txt", "clear.pr", "grey.py", "entertaining.ala", "elfin.txt", "excited.js", "abject.zbrush", "best.js", "boundless.wav", "hurried.ala", "delirious.cpp"]], [["dramatic.txt", "incompetent.jar", "alcoholic.wp", "clumsy.py", "abject.h", "boring.exe", "aloof.pr", "familiar.py", "fanatical.py", "ill-informed.html", "fierce.pr", "accurate.html", "grotesque.pr", "brown.py", "courageous.pt", "grouchy.jar", "giant.pt", "dirty.h", "abaft.jar", "enormous.zbrush", "creepy.cpp", "beneficial.py", "absorbing.ala", "heartbreaking.html", "exclusive.js", "fluttering.html", "happy.als", "fresh.pr", "adamant.txt", "awful.maya", "frightening.maya", "bizarre.html", "efficacious.exe", "illegal.wav", "dizzy.js", "gusty.wp", "delightful.pt", "full.als", "chivalrous.xml", "filthy.js", "functional.jar", "conscious.wav", "feeble.exe", "hilarious.cpp", "earthy.py", "handy.txt", "hollow.cpp", "aggressive.js", "fat.h", "drunk.exe", "clear.h", "easy.wav", "eatable.pt", "grumpy.css", "empty.exe", "brief.jar", "aggressive.txt", "aggressive.txt", "gruesome.ala", "awake.txt", "apathetic.mp3", "holistic.pt", "embarrassed.css", "flashy.maya", "exultant.ala", "exuberant.exe", "graceful.pt", "dependent.py", "gigantic.wp", "husky.js", "immense.pr", "defiant.cpp", "cooperative.html", "frantic.maya", "abashed.css", "dysfunctional.h", "gusty.js", "dynamic.txt", "dreary.pt", "giddy.ala", "exciting.css", "best.als", "humdrum.css", "busy.jar", "frail.cpp", "cagey.wav"]], [["freezing.jar", "frail.xml", "available.txt", "excited.als", "godly.exe", "fair.zbrush", "abortive.Ue4", "ill-fated.mp3", "early.cpp", "demonic.py", "greedy.css", "high.py", "dry.xml", "fascinated.html", "humorous.zbrush", "hilarious.pr", "burly.pt", "cumbersome.wp", "elite.Ue4", "equable.py", "cold.h", "discreet.wp", "hard.mp3", "aberrant.css", "common.zbrush", "fretful.maya", "erect.js", "good.maya", "general.wav", "complete.js", "ad hoc.jar", "healthy.mp3", "bawdy.exe", "impartial.py", "hesitant.pt", "erratic.css", "agonizing.cpp", "belligerent.html", "cumbersome.Ue4", "chilly.h", "bustling.exe", "curly.jar", "gorgeous.py", "friendly.txt", "discreet.html", "abhorrent.ala", "awake.Ue4", "good.Ue4", "closed.html", "gabby.py", "imminent.js", "combative.css", "feigned.ala", "elderly.ala", "glamorous.h", "dry.xml", "illustrious.html", "first.xml", "conscious.xml", "divergent.zbrush", "doubtful.xml", "big.ala", "brief.h", "clever.als", "fierce.ala", "adventurous.html", "ashamed.jar", "fast.cpp", "fanatical.py", "ambiguous.pr", "efficient.txt", "gullible.jar", "ill-informed.cpp", "capable.py", "aboard.mp3", "complete.als", "helpful.maya", "bizarre.css", "filthy.js", "hateful.Ue4", "aback.wp", "fertile.html", "cloudy.als", "comfortable.css", "bustling.js", "ad hoc.py", "adorable.ala", "frequent.als", "flimsy.mp3", "aboriginal.pt", "blushing.h", "feigned.py", "bloody.py", "hospitable.ala", "extra-large.cpp", "alike.exe", "fine.js", "confused.wav", "bloody.wp", "cumbersome.wav", "harsh.mp3", "crooked.css", "equal.wav", "drunk.als", "general.cpp", "grieving.css", "certain.cpp", "cumbersome.pt", "different.txt", "flat.h", "cagey.h", "enormous.wp", "difficult.xml", "furry.pt", "enormous.exe", "dramatic.h", "brief.zbrush", "elfin.zbrush", "cumbersome.pt"]], [["fresh.exe", "groovy.pr", "debonair.pr", "hesitant.Ue4", "curious.py", "black.als", "elderly.zbrush", "harmonious.wav", "different.cpp", "ablaze.xml", "abstracted.html", "hollow.zbrush", "familiar.xml", "defiant.mp3", "huge.exe", "efficacious.html", "aberrant.ala", "better.js", "glamorous.wp", "glossy.cpp", "gentle.jar", "incandescent.exe", "bashful.js", "aware.pr", "hellish.js", "icky.cpp", "chivalrous.pr", "exotic.xml", "grandiose.js", "abrupt.html", "bitter.mp3", "chemical.xml", "disagreeable.exe", "far-flung.exe", "acrid.wp", "infamous.Ue4", "hungry.xml", "deadpan.h", "equable.wp", "hanging.txt", "fanatical.Ue4", "excellent.Ue4", "grieving.js", "brash.css", "gullible.pr", "acid.py", "fragile.html", "bewildered.jar", "bored.zbrush", "illustrious.zbrush", "equal.cpp", "female.wp", "coordinated.cpp", "elderly.txt"]], [["hanging.h", "fixed.ala", "first.pr", "cooperative.cpp", "elfin.zbrush", "fair.pr", "cool.css", "highfalutin.py", "alcoholic.maya", "heady.cpp", "befitting.wav", "certain.jar", "glistening.exe", "attractive.wav", "gruesome.wp", "happy.txt", "finicky.jar", "clumsy.js", "assorted.js", "highfalutin.cpp", "damaging.h", "ethereal.xml", "great.jar", "dead.wp", "acoustic.xml", "devilish.css", "curly.pt", "exuberant.ala", "flippant.wp", "holistic.html", "cut.txt", "adamant.py", "dashing.zbrush", "conscious.wp", "black-and-white.cpp", "elated.pt", "high-pitched.exe", "flowery.xml", "glib.wp", "industrious.html", "arrogant.zbrush", "accessible.html", "classy.jar", "acceptable.maya", "cynical.pt", "erratic.pt", "earthy.als", "dramatic.als", "bite-sized.py", "ahead.xml", "giddy.js", "fortunate.txt", "early.txt", "imaginary.wav", "cute.zbrush", "graceful.html", "far-flung.Ue4", "goofy.exe", "abundant.mp3", "ambitious.txt", "gigantic.jar", "abashed.xml", "guiltless.Ue4", "adventurous.py", "guarded.jar", "extra-large.zbrush", "filthy.h", "easy.zbrush", "glorious.als", "detailed.pr", "flashy.zbrush", "breezy.als", "faithful.py", "curly.js", "chief.js", "concerned.js", "cumbersome.zbrush", "ahead.maya", "berserk.cpp", "deserted.pt", "cool.zbrush", "broken.cpp", "glossy.pt", "deep.xml", "average.wav", "dangerous.cpp", "acrid.wav", "dear.zbrush", "deeply.pr", "detailed.cpp", "friendly.h", "first.css", "heady.exe", "far-flung.als", "erratic.mp3", "exciting.pr"]], [["crazy.pr", "black-and-white.als", "illegal.wav", "exultant.mp3", "exotic.jar", "capricious.pt", "abundant.ala", "eatable.zbrush", "careful.py", "godly.css", "clever.txt", "dusty.maya", "awesome.zbrush", "discreet.jar", "creepy.h", "fair.pt", "descriptive.mp3", "boundless.ala", "berserk.xml", "hungry.exe", "awful.exe"]], [["cLgvr.P.als", "sgeFl.FL.als", "j9Yei.Kyu.py", "RljRS.v.ala", "1CJaz.EJF.pr", "Zxc1b.tOw.maya", "s0lXz.P7z.txt", "QvISi.b8l.Ue4", "3XtjW.rSSH.zbrush", "6TsCH.dJy.zbrush", "ZbL5a.zeqk.ala", "1RReC.Pk3.zbrush", "0EfHO.Ic.pr", "VGBzm.o.h", "BJZtt.6.xml", "xU84j.0MC.pt", "l3JMW.RMg.py", "kAbbu.8Il.ala", "G0ecb.BnPc.jar", "dwll1.tpL.wav", "CQMue.p55.js", "98tu7.Zcp.ala", "gutGx.Hel.cpp", "utRUl.B5c.ala", "qjOwJ.Z7K5.h", "ltygD.Q8b.jar", "8eH8W.5J1.py", "cu6hY.Ux.zbrush", "vrFaN.jLZ.pr", "7dZyA.NOKB.mp3", "h5i96.Xa3u.maya", "q7zW3.Am0o.pr", "1i0rP.qhl.pr", "Lnb3P.vW8B.html", "dEa97.zU.maya", "nYfS1.eLB.ala", "B48eD.m8i.html", "UiF8F.lME.maya", "y65gi.Hy.xml", "dstKJ.Jw2.Ue4", "WPPqa.TG6.als", "kespD.XwYz.ala", "MGdVy.jOH.py", "4kIBi.UES.py", "gWeqd.KY.pt", "KmFlM.XbG.h", "V6cPb.WnX.mp3", "Dh0Qi.75t.maya", "VIIGI.yI.jar", "5xXJB.1b.cpp", "H0eqG.9w.h", "lqf3u.AC.txt", "6p9Wy.p.html", "vpocy.2SJ.wp", "Buf8Y.zIL.wp", "MqT4y.4Ht.css", "PdB3m.KF.ala", "fExGF.gOU.ala", "VrCoD.JK.cpp", "QJFt9.ODPT.wav", "NGWzW.l.py", "IepDH.tjU.txt", "ldVGH.qehX.wav", "F6trP.yqC.mp3", "J5O28.XeHt.zbrush", "91FXj.uA.ala", "mf7Ah.8mG.maya", "hv11B.a1e.jar", "voQGw.NPPT.h", "hUtNN.0Dpu.txt", "44Yzo.2v6T.txt", "zVkzf.W2.exe", "ea1Fh.uCL.mp3", "gnla7.s.cpp", "7H1YL.SNp.maya", "xoh3J.N.js", "iEyAi.pC.pr", "aMpTM.uN.xml", "8KxWi.CQ1U.css", "YOKmK.69dJ.ala", "U3TcE.eiR.h", "tkmLt.Jn.js", "Ng2Ic.L.wav", "GZlgM.LuYi.html", "sM7GE.9X.mp3", "rL9Ur.kQg2.zbrush", "YiOIM.G9.ala", "IjEXf.Rj85.css", "0nca8.m.cpp", "8Ambc.zG.py", "6nCtl.OM.mp3", "RLXVB.BLhg.wav", "Ztlrq.JBV.als", "FirM2.oDM.zbrush", "Z1uS4.Z.txt", "KufUz.r.py", "Mzdhf.OZ.css", "2KsrA.hjMq.maya", "9DEID.fk.h", "8ku9r.4p.py", "mzHZW.BeZ.wav", "Slw1y.xZ.mp3", "c1Sob.15O.cpp", "xiFyf.cam.xml", "CY8qX.k5Jp.wp", "DlMxO.0s.txt", "KSR1k.wQg.maya", "LhF9F.C.cpp", "j4R8i.dp.zbrush", "D5JjS.2N.xml", "5IWDt.bo.als", "ZI34s.rp7d.als", "v6pnV.hp.ala", "VUBCS.gRxo.cpp", "XEe6m.xf.wp", "3N2IG.Wp.mp3", "H0BdK.IsO.pt", "0TwmC.v.wav", "5j8d6.Wkl.mp3", "C2xtb.vPN.wp", "i76rK.UHrR.pr", "hG2IO.V9j.als", "2Jb8Y.q5.zbrush", "ipMqx.SXS.js", "j9J0r.gcu.h", "P7WZD.whS.js", "lSnjU.9Pe.jar", "hsyLy.EYJl.h", "cti8l.PBT.exe", "JMXX7.EYxt.css", "yn7rx.ol.mp3", "Y764e.ZaC.zbrush", "GLURG.iCw.jar", "XHRAo.tW2.pr", "BElbv.6P.ala", "fYE0U.fP.js", "gz7rb.aI.wav"]], [[]]], "outputs": [[[".cpp", ".html"]], [[".pt", ".py", ".txt"]], [[".py"]], [[".cpp", ".exe", ".js", ".pr", ".xml"]], [[".zbrush"]], [[".ala", ".exe", ".jar", ".mp3", ".pt", ".zbrush"]], [[".ala"]], [[]]], "starter_code": "def solve(files):", "canonical_solution": "from collections import Counter\nimport re\n\ndef solve(files):\n    c = Counter((re.match('.*(\\\\.[^.]+)$', fn).group(1) for fn in files))\n    m = max(c.values(), default=0)\n    return sorted((k for k in c if c[k] == m))", "entry_point": "solve", "task_id": "TACO_lite/1023", "input_output_examples": [[[[0, 0], [5, -7]], [[0, 0], [1, 1]], [[0, 0], [0, 0]]], [["8.60"], ["1.41"], ["0.00"]]]}
{"requirement": "def unflatten(flat_array):\"\"\"\n#Unflatten a list (Easy)\n\nThere are several katas like \"Flatten a list\".\nThese katas are done by so many warriors, that the count of available list to flattin goes down!\n\nSo you have to build a method, that creates new arrays, that can be flattened!\n\n#Shorter: You have to unflatten a list/an array.\n\nYou get an array of integers and have to unflatten it by these rules:\n```\n- You start at the first number.\n- If this number x is smaller than 3, take this number x direct \n  for the new array and continue with the next number.\n- If this number x is greater than 2, take the next x numbers (inclusive this number) as a \n  sub-array in the new array. Continue with the next number AFTER this taken numbers.\n- If there are too few numbers to take by number, take the last available numbers.\n```\n\nThe given array will always contain numbers. There will only be numbers > 0.\n\nThere is a harder version of this kata!\nUnflatten a list (Harder than easy)\n\nHave fun coding it and please don't forget to vote and rank this kata! :-) \n\nI have created other katas. Have a look if you like coding and challenges.\n\"\"\"", "inputs": [[[3, 5, 2, 1]], [[1, 4, 5, 2, 1, 2, 4, 5, 2, 6, 2, 3, 3]], [[1, 1, 1, 1]], [[1]], [[99, 1, 1, 1]], [[3, 1, 1, 3, 1, 1]]], "outputs": [[[[3, 5, 2], 1]], [[1, [4, 5, 2, 1], 2, [4, 5, 2, 6], 2, [3, 3]]], [[1, 1, 1, 1]], [[1]], [[[99, 1, 1, 1]]], [[[3, 1, 1], [3, 1, 1]]]], "starter_code": "def unflatten(flat_array):", "canonical_solution": "def unflatten(flat_array):\n    arr = flat_array[:]\n    for i, v in enumerate(arr):\n        if v > 2:\n            arr[i], arr[i + 1:i + v] = (arr[i:i + v], [])\n    return arr", "entry_point": "unflatten", "task_id": "TACO_lite/1024", "input_output_examples": [[[12], [25], [13], [15]], [[2, 3, 4, 6], [5], ["13 is prime"], [3, 5]]]}
{"requirement": "def to_seconds(time):\"\"\"\nImplement a class/function, which should parse time expressed as `HH:MM:SS`, or `null/nil/None` otherwise.\n\nAny extra characters, or minutes/seconds higher than 59 make the input invalid, and so should return `null/nil/None`.\n\"\"\"", "inputs": [["00:00:00"], ["01:02:03"], ["01:02:60"], ["01:60:03"], ["99:59:59"], ["0:00:00"], ["00:0:00"], ["00:00:0"], ["00:00:00\n"], ["\n00:00:00"], ["100:59:59"], ["09:059:59"], ["09:159:59"], ["09:59:059"], ["09:59:159"]], "outputs": [[0], [3723], [null], [null], [359999], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null]], "starter_code": "def to_seconds(time):", "canonical_solution": "def to_seconds(time):\n    try:\n        s, m, h = (int(time[-2:]), int(time[3:5]), int(time[:2]))\n        return s + m * 60 + h * 3600 if m < 60 and s < 60 and (len(time) == 8) else None\n    except:\n        return None", "entry_point": "to_seconds", "task_id": "TACO_lite/1025", "input_output_examples": [[["10.0.0.0", "10.0.0.50"], ["10.0.0.0", "10.0.1.0"], ["20.0.0.10", "20.0.1.0"], ["150.0.0.0", "150.0.0.1"]], [[50], [256], [246], [1]]]}
{"requirement": "def variance(words):\n\t\"\"\"\nConsider X as the aleatory variable that count the number of letters in a word. Write a function that, give in input an array of words (strings), calculate the variance of X.\nMax decimal of the variance : 4.\n\nSome wiki: Variance,\n Aleatory variable\n\"\"\"", "inputs": [[["Hello", "world"]], [["Hi", "world"]], [["Variance", "is", "not", "a", "good", "stimator"]]], "outputs": [[0], [2.25], [7.5556]], "starter_code": "def variance(words):\n\t", "canonical_solution": "variance = lambda w: round(__import__('statistics').pvariance(map(len, w)), 4)", "entry_point": "variance", "task_id": "TACO_lite/1026", "input_output_examples": [[[""]], [[false]]]}
{"requirement": "def archers_ready(archers):\"\"\"#It's show time!\nArchers have gathered from all around the world to participate in the Arrow Function Faire. But the faire will only start if there are archers signed and if they all have enough arrows in their quivers - at least 5 is the requirement! Are all the archers ready?\n\n#Reference\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\n\n#Argument\n`archers` is an array of integers, in which each element corresponds to the number of arrows each archer has.\n\n#Return\nYour function must return `true` if the requirements are met or `false` otherwise.\n\"\"\"", "inputs": [[[]], [[1, 2, 3, 4]], [[5, 6, 7, 8]], [[5, 6, 7, 4]], [[1, 2, 3, 4, 5, 6, 7, 8]]], "outputs": [[false], [false], [true], [false], [false]], "starter_code": "def archers_ready(archers):", "canonical_solution": "def archers_ready(archers):\n    return all((i >= 5 for i in archers)) if archers else False", "entry_point": "archers_ready", "task_id": "TACO_lite/1027", "input_output_examples": [[[[1, 3, 4, 5, 6, 8]]], [[8]]]}
{"requirement": "def psion_power_points(level,score):\n\t\"\"\"\nFollowing from the previous kata and taking into account how cool psionic powers are compare to the Vance spell system (really, the idea of slots to dumb down the game sucks, not to mention that D&D became a smash hit among geeks, so...), your task in this kata is to create a function that returns how many power points you get as a psion [because psions are the coolest, they allow for a lot of indepth tactic playing and adjusting for psychic warriors or wilders or other non-core classes would be just an obnoxious core].\n\nConsider both [the psion power points/days table](http://www.dandwiki.com/wiki/SRD:Psion#Making_a_Psion) and [bonus power points](http://www.d20pfsrd.com/psionics-unleashed/classes/#Table_Ability_Modifiers_and_Bonus_Power_Points) to figure out the correct reply, returned as an integer; the usual interpretation is that bonus power points stop increasing after level 20, but for the scope of this kata, we will pretend they keep increasing as they did before.\n\nTo compute the total, you will be provided, both as non-negative integers:\n\n* class level (assume they are all psion levels and remember the base power points/day halts after level 20)\n* manifesting attribute score (Intelligence, to be more precise) to determine the total, provided the score is high enough for the character to manifest at least one power.\n\n*Note: I didn't explain things in detail and just pointed out to the table on purpose, as my goal is also to train the pattern recognition skills of whoever is going to take this challenges, so do not complain about a summary description. Thanks :)*\n\nIn the same series:\n\n* [D&D Character generator #1: attribute modifiers and spells](https://www.codewars.com/kata/d-and-d-character-generator-number-1-attribute-modifiers-and-spells/)\n* [D&D Character generator #2: psion power points](https://www.codewars.com/kata/d-and-d-character-generator-number-2-psion-power-points/)\n* [D&D Character generator #3: carrying capacity](https://www.codewars.com/kata/d-and-d-character-generator-number-3-carrying-capacity/)\n\"\"\"", "inputs": [[1, 0], [1, 10], [1, 11], [0, 11], [1, 20], [21, 30]], "outputs": [[0], [0], [2], [0], [4], [448]], "starter_code": "def psion_power_points(level,score):\n\t", "canonical_solution": "psion_power_points = lambda l, s: [0, 2, 6, 11, 17, 25, 35, 46, 58, 72, 88, 106, 126, 147, 170, 195, 221, 250, 280, 311, 343][min(l, 20)] + (s - 10) // 2 * l // 2 if l and s > 10 else 0", "entry_point": "psion_power_points", "task_id": "TACO_lite/1028", "input_output_examples": [[["7970521.5544"], ["7496314"], ["0"]], [[["7000000", "900000", "70000", "500", "20", "1", ".5", ".05", ".004", ".0004"]], [["7000000", "400000", "90000", "6000", "300", "10", "4"]], [[]]]]}
{"requirement": "def last_fib_digit(n):\"\"\"\nJust like in the [\"father\" kata](http://www.codewars.com/kata/find-fibonacci-last-digit/), you will have to return the last digit of the nth element in the Fibonacci sequence (starting with 1,1, to be extra clear, not with 0,1 or other numbers).\n\nYou will just get much bigger numbers, so good luck bruteforcing your way through it ;)\n\"\"\"", "inputs": [[1], [21], [302], [4003], [50004], [600005], [7000006], [80000007], [900000008], [1000000009]], "outputs": [[1], [6], [1], [7], [8], [5], [3], [8], [1], [9]], "starter_code": "def last_fib_digit(n):", "canonical_solution": "def last_fib_digit(n):\n    return [0, 1, 1, 2, 3, 5, 8, 3, 1, 4, 5, 9, 4, 3, 7, 0, 7, 7, 4, 1, 5, 6, 1, 7, 8, 5, 3, 8, 1, 9, 0, 9, 9, 8, 7, 5, 2, 7, 9, 6, 5, 1, 6, 7, 3, 0, 3, 3, 6, 9, 5, 4, 9, 3, 2, 5, 7, 2, 9, 1][n % 60]", "entry_point": "last_fib_digit", "task_id": "TACO_lite/1029", "input_output_examples": [[[13], [3], [12], [9], [4]], [[36], [1], [4], [16], [-1]]]}
{"requirement": "def three_details(n):\"\"\"\n# Task\n Dudka has `n` details. He must keep exactly 3 of them.\n\n To do this, he performs the following operations until he has only 3 details left:\n```\nHe numbers them.\nHe keeps those with either odd or even numbers and throws the others away.```\n\n Dudka wants to know how many ways there are to get exactly 3 details. Your task is  to help him calculate it.\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  `3 ≤ n ≤ 10^9`\n\n\n - `[output]` an integer\n\n  The number of ways to get exactly 3 details.\n\"\"\"", "inputs": [[3], [6], [4], [10], [15]], "outputs": [[1], [2], [0], [2], [1]], "starter_code": "def three_details(n):", "canonical_solution": "from functools import lru_cache\n\ndef three_details(n):\n    if n <= 3:\n        return n == 3\n    q, r = divmod(n, 2)\n    return three_details(q) + three_details(q + r)", "entry_point": "three_details", "task_id": "TACO_lite/1032", "input_output_examples": [[[[8, 3, 4, 5, 2, 8]], [[1, 3, 2, 1]]], [[[4, 5]], [[1, 2, 1]]]]}
{"requirement": "def odd_one(arr):\"\"\"\n```if-not:swift\nCreate a method that takes an array/list as an input, and outputs the index at which the sole odd number is located.\n\nThis method should work with arrays with negative numbers. If there are no odd numbers in the array, then the method should output `-1`.\n```\n```if:swift\nreate a function `oddOne` that takes an `[Int]` as input and outputs the index at which the sole odd number is located.\n\nThis method should work with arrays with negative numbers. If there are no odd numbers in the array, then the method should output `nil`.\n```\n\"\"\"", "inputs": [[[2, 4, 6, 7, 10]], [[2, 16, 98, 10, 13, 78]], [[4, -8, 98, -12, -7, 90, 100]], [[2, 4, 6, 8]]], "outputs": [[3], [4], [4], [-1]], "starter_code": "def odd_one(arr):", "canonical_solution": "def odd_one(arr):\n    for i in range(len(arr)):\n        if arr[i] % 2 != 0:\n            return i\n    return -1", "entry_point": "odd_one", "task_id": "TACO_lite/1033", "input_output_examples": [[["4003301018398"], ["4003301018392"]], [[true], [false]]]}
{"requirement": "def are_coprime(n, m):\"\"\"\nWrite a program to determine if two numbers are coprime. A pair of numbers are coprime if their greatest shared factor is 1.\n\nIf the two inputs are coprime, your program should return true. If they are not coprime, your program should return false.\n\nThe inputs will always be two positive integers between 2 and 99.\n\"\"\"", "inputs": [[20, 27], [12, 39], [17, 34], [34, 17], [35, 10], [64, 27]], "outputs": [[true], [false], [false], [false], [false], [true]], "starter_code": "def are_coprime(n, m):", "canonical_solution": "def are_coprime(n, m):\n    while m > 0:\n        n, m = (m, n % m)\n    return n == 1", "entry_point": "are_coprime", "task_id": "TACO_lite/1034", "input_output_examples": [[["Joe had a bad day"]], [["Good work Joe!"]]]}
{"requirement": "def slogan_maker(arr):\"\"\"**This Kata is intended as a small challenge for my students**\n\nAll Star Code Challenge #19\n\nYou work for an ad agency and your boss, Bob, loves a catchy slogan. He's always jumbling together \"buzz\" words until he gets one he likes. You're looking to impress Boss Bob with a function that can do his job for him.\n\nCreate a function called sloganMaker() that accepts an array of string \"buzz\" words. The function returns an array of all possible UNIQUE string permutations of the buzz words (concatonated and separated by spaces).\n\nYour boss is not very bright, so anticipate him using the same \"buzz\" word more than once, by accident. The function should ignore these duplicate string inputs.\n\nNote:  \nThere should be NO duplicate strings in the output array\n\nThe input array MAY contain duplicate strings, which should STILL result in an output array with all unique strings\n\nAn empty string is valid input\n\n```if-not:python,crystal\nThe order of the permutations in the output array does not matter\n```\n```if:python,crystal\nThe order of the output array must match those rules:\n1. Generate the permutations in lexicographic order of the original array.\n2. keep only the first occurence of a permutation, when duplicates are found.\n```\n\"\"\"", "inputs": [[["super"]], [["super", "hot"]], [["super", "hot", "guacamole"]], [["super", "guacamole", "super", "super", "hot", "guacamole"]], [["testing", "testing", "testing"]]], "outputs": [[["super"]], [["super hot", "hot super"]], [["super hot guacamole", "super guacamole hot", "hot super guacamole", "hot guacamole super", "guacamole super hot", "guacamole hot super"]], [["super guacamole hot", "super hot guacamole", "guacamole super hot", "guacamole hot super", "hot super guacamole", "hot guacamole super"]], [["testing"]]], "starter_code": "def slogan_maker(arr):", "canonical_solution": "from itertools import permutations\n\ndef slogan_maker(arr):\n    return list(map(' '.join, permutations(dict(list(zip(arr, list(range(len(arr)))))))))", "entry_point": "slogan_maker", "task_id": "TACO_lite/1035", "input_output_examples": [[[[1, 1, 1, 2, 1, 1]], [[0, 0, 0.55, 0, 0]]], [[2], [0.55]]]}
{"requirement": "def unique_digit_products(nums):\"\"\"# Task\n Let's call `product(x)` the product of x's digits. Given an array of integers a, calculate `product(x)` for each x in a, and return the number of distinct results you get.\n\n# Input/Output\n\n\n - `[input]` integer array `a`\n\n    Constraints:\n\n    `1 ≤ a.length ≤ 10000,`\n\n    `1 ≤ a[i] ≤ 1000000000.`\n\n\n - `[output]` an integer\n\n    The number of different digit products in `a`.\n\"\"\"", "inputs": [[[2, 8, 121, 42, 222, 23]], [[239]], [[100, 101, 111]], [[100, 23, 42, 239, 22339, 9999999, 456, 78, 228, 1488]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]], "outputs": [[3], [1], [2], [10], [10]], "starter_code": "def unique_digit_products(nums):", "canonical_solution": "from operator import mul\nfrom functools import reduce\n\ndef unique_digit_products(nums):\n    return len({reduce(mul, (int(a) for a in str(num))) for num in nums})", "entry_point": "unique_digit_products", "task_id": "TACO_lite/1036", "input_output_examples": [[["our code"], ["your code rocks"], ["codewars"]], [["edo cruo"], ["skco redo cruoy"], ["srawedoc"]]]}
{"requirement": "def validate_time(time):\n\t\"\"\"\nWrite a regex to validate a 24 hours time string.\n\nYou should check for correct length and no spaces.\n\"\"\"", "inputs": [["1:00"], ["13:1"], ["12:60"], ["12: 60"], ["24:00"], ["00:00"], ["24o:00"], ["24:000"], [""], ["09:00"], ["2400"], ["foo12:00bar"], ["010:00"], ["1;00"]], "outputs": [[true], [false], [false], [false], [false], [true], [false], [false], [false], [true], [false], [false], [false], [false]], "starter_code": "def validate_time(time):\n\t", "canonical_solution": "import re\n_24H = re.compile('^([01]?\\\\d|2[0-3]):[0-5]\\\\d$')\nvalidate_time = lambda time: bool(_24H.match(time))", "entry_point": "validate_time", "task_id": "TACO_lite/1038", "input_output_examples": [[[[[1, 5, 4], ["a", 3, 5], ["b"], [], ["1", 2, 3]]]], [[[[1, 5, 4], ["b"]]]]]}
{"requirement": "def find_missing_number(a):\"\"\"# Background:\n\nYou're working in a number zoo, and it seems that one of the numbers has gone missing!\n\nZoo workers have no idea what number is missing, and are too incompetent to figure it out, so they're hiring you to do it for them.\n\nIn case the zoo loses another number, they want your program to work regardless of how many numbers there are in total.\n\n___\n\n## Task:\n\nWrite a function that takes a shuffled list of unique numbers from `1` to `n` with one element missing (which can be any number including `n`). Return this missing number.\n\n**Note**: huge lists will be tested.\n\"\"\"", "inputs": [[[2, 3, 4]], [[1, 3, 4]], [[1, 2, 4]], [[1, 2, 3]], [[]], [[1]], [[2]]], "outputs": [[1], [2], [3], [4], [1], [2], [1]], "starter_code": "def find_missing_number(a):", "canonical_solution": "def find_missing_number(a):\n    n = len(a) + 1\n    return n * (n + 1) // 2 - sum(a)", "entry_point": "find_missing_number", "task_id": "TACO_lite/1042", "input_output_examples": [[[[1, 3, 2, 4], 2, 3], [[1, 3, 2, 4], 1, 2], [[1, 3, 2, 4], 2, 8]], [[2.5], [-1], [-1]]]}
{"requirement": "def sort_by_name(arr):\"\"\"\n# Hey You !\n\nSort these integers for me ...\n\nBy name ...\n\nDo it now !\n\n\n---\n\n## Input\n\n* Range is ```0```-```999```\n\n* There may be duplicates\n\n* The array may be empty\n\n## Notes\n* Don't pack words together:\n * e.g. 99 may be \"ninety nine\" or \"ninety-nine\"; but not \"ninetynine\"\n * e.g 101 may be \"one hundred one\" or \"one hundred and one\"; but not \"onehundredone\"\n* Don't fret about formatting rules, because if rules are consistently applied it has no effect anyway:\n * e.g. \"one hundred one\", \"one hundred two\"; is same order as \"one hundred **and** one\", \"one hundred **and** two\"\n * e.g. \"ninety eight\", \"ninety nine\"; is same order as \"ninety-eight\", \"ninety-nine\"\n \n```if:c\n* For `C` code the input array may be NULL. The return value is freed if non-NULL.\n```\n\"\"\"", "inputs": [[[0, 1, 2, 3]], [[]], [[8, 8, 9, 9, 10, 10]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]], [[99, 100, 200, 300, 999]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999]]], "outputs": [[[1, 3, 2, 0]], [[]], [[8, 8, 9, 9, 10, 10]], [[8, 18, 11, 15, 5, 4, 14, 9, 19, 1, 7, 17, 6, 16, 10, 13, 3, 12, 20, 2, 0]], [[999, 99, 100, 300, 200]], [[8, 800, 808, 818, 880, 888, 885, 884, 889, 881, 887, 886, 883, 882, 811, 815, 850, 858, 855, 854, 859, 851, 857, 856, 853, 852, 805, 840, 848, 845, 844, 849, 841, 847, 846, 843, 842, 804, 814, 809, 819, 890, 898, 895, 894, 899, 891, 897, 896, 893, 892, 801, 807, 817, 870, 878, 875, 874, 879, 871, 877, 876, 873, 872, 806, 816, 860, 868, 865, 864, 869, 861, 867, 866, 863, 862, 810, 813, 830, 838, 835, 834, 839, 831, 837, 836, 833, 832, 803, 812, 820, 828, 825, 824, 829, 821, 827, 826, 823, 822, 802, 18, 80, 88, 85, 84, 89, 81, 87, 86, 83, 82, 11, 15, 50, 58, 55, 54, 59, 51, 57, 56, 53, 52, 5, 500, 508, 518, 580, 588, 585, 584, 589, 581, 587, 586, 583, 582, 511, 515, 550, 558, 555, 554, 559, 551, 557, 556, 553, 552, 505, 540, 548, 545, 544, 549, 541, 547, 546, 543, 542, 504, 514, 509, 519, 590, 598, 595, 594, 599, 591, 597, 596, 593, 592, 501, 507, 517, 570, 578, 575, 574, 579, 571, 577, 576, 573, 572, 506, 516, 560, 568, 565, 564, 569, 561, 567, 566, 563, 562, 510, 513, 530, 538, 535, 534, 539, 531, 537, 536, 533, 532, 503, 512, 520, 528, 525, 524, 529, 521, 527, 526, 523, 522, 502, 40, 48, 45, 44, 49, 41, 47, 46, 43, 42, 4, 400, 408, 418, 480, 488, 485, 484, 489, 481, 487, 486, 483, 482, 411, 415, 450, 458, 455, 454, 459, 451, 457, 456, 453, 452, 405, 440, 448, 445, 444, 449, 441, 447, 446, 443, 442, 404, 414, 409, 419, 490, 498, 495, 494, 499, 491, 497, 496, 493, 492, 401, 407, 417, 470, 478, 475, 474, 479, 471, 477, 476, 473, 472, 406, 416, 460, 468, 465, 464, 469, 461, 467, 466, 463, 462, 410, 413, 430, 438, 435, 434, 439, 431, 437, 436, 433, 432, 403, 412, 420, 428, 425, 424, 429, 421, 427, 426, 423, 422, 402, 14, 9, 900, 908, 918, 980, 988, 985, 984, 989, 981, 987, 986, 983, 982, 911, 915, 950, 958, 955, 954, 959, 951, 957, 956, 953, 952, 905, 940, 948, 945, 944, 949, 941, 947, 946, 943, 942, 904, 914, 909, 919, 990, 998, 995, 994, 999, 991, 997, 996, 993, 992, 901, 907, 917, 970, 978, 975, 974, 979, 971, 977, 976, 973, 972, 906, 916, 960, 968, 965, 964, 969, 961, 967, 966, 963, 962, 910, 913, 930, 938, 935, 934, 939, 931, 937, 936, 933, 932, 903, 912, 920, 928, 925, 924, 929, 921, 927, 926, 923, 922, 902, 19, 90, 98, 95, 94, 99, 91, 97, 96, 93, 92, 1, 100, 108, 118, 180, 188, 185, 184, 189, 181, 187, 186, 183, 182, 111, 115, 150, 158, 155, 154, 159, 151, 157, 156, 153, 152, 105, 140, 148, 145, 144, 149, 141, 147, 146, 143, 142, 104, 114, 109, 119, 190, 198, 195, 194, 199, 191, 197, 196, 193, 192, 101, 107, 117, 170, 178, 175, 174, 179, 171, 177, 176, 173, 172, 106, 116, 160, 168, 165, 164, 169, 161, 167, 166, 163, 162, 110, 113, 130, 138, 135, 134, 139, 131, 137, 136, 133, 132, 103, 112, 120, 128, 125, 124, 129, 121, 127, 126, 123, 122, 102, 7, 700, 708, 718, 780, 788, 785, 784, 789, 781, 787, 786, 783, 782, 711, 715, 750, 758, 755, 754, 759, 751, 757, 756, 753, 752, 705, 740, 748, 745, 744, 749, 741, 747, 746, 743, 742, 704, 714, 709, 719, 790, 798, 795, 794, 799, 791, 797, 796, 793, 792, 701, 707, 717, 770, 778, 775, 774, 779, 771, 777, 776, 773, 772, 706, 716, 760, 768, 765, 764, 769, 761, 767, 766, 763, 762, 710, 713, 730, 738, 735, 734, 739, 731, 737, 736, 733, 732, 703, 712, 720, 728, 725, 724, 729, 721, 727, 726, 723, 722, 702, 17, 70, 78, 75, 74, 79, 71, 77, 76, 73, 72, 6, 600, 608, 618, 680, 688, 685, 684, 689, 681, 687, 686, 683, 682, 611, 615, 650, 658, 655, 654, 659, 651, 657, 656, 653, 652, 605, 640, 648, 645, 644, 649, 641, 647, 646, 643, 642, 604, 614, 609, 619, 690, 698, 695, 694, 699, 691, 697, 696, 693, 692, 601, 607, 617, 670, 678, 675, 674, 679, 671, 677, 676, 673, 672, 606, 616, 660, 668, 665, 664, 669, 661, 667, 666, 663, 662, 610, 613, 630, 638, 635, 634, 639, 631, 637, 636, 633, 632, 603, 612, 620, 628, 625, 624, 629, 621, 627, 626, 623, 622, 602, 16, 60, 68, 65, 64, 69, 61, 67, 66, 63, 62, 10, 13, 30, 38, 35, 34, 39, 31, 37, 36, 33, 32, 3, 300, 308, 318, 380, 388, 385, 384, 389, 381, 387, 386, 383, 382, 311, 315, 350, 358, 355, 354, 359, 351, 357, 356, 353, 352, 305, 340, 348, 345, 344, 349, 341, 347, 346, 343, 342, 304, 314, 309, 319, 390, 398, 395, 394, 399, 391, 397, 396, 393, 392, 301, 307, 317, 370, 378, 375, 374, 379, 371, 377, 376, 373, 372, 306, 316, 360, 368, 365, 364, 369, 361, 367, 366, 363, 362, 310, 313, 330, 338, 335, 334, 339, 331, 337, 336, 333, 332, 303, 312, 320, 328, 325, 324, 329, 321, 327, 326, 323, 322, 302, 12, 20, 28, 25, 24, 29, 21, 27, 26, 23, 22, 2, 200, 208, 218, 280, 288, 285, 284, 289, 281, 287, 286, 283, 282, 211, 215, 250, 258, 255, 254, 259, 251, 257, 256, 253, 252, 205, 240, 248, 245, 244, 249, 241, 247, 246, 243, 242, 204, 214, 209, 219, 290, 298, 295, 294, 299, 291, 297, 296, 293, 292, 201, 207, 217, 270, 278, 275, 274, 279, 271, 277, 276, 273, 272, 206, 216, 260, 268, 265, 264, 269, 261, 267, 266, 263, 262, 210, 213, 230, 238, 235, 234, 239, 231, 237, 236, 233, 232, 203, 212, 220, 228, 225, 224, 229, 221, 227, 226, 223, 222, 202, 0]]], "starter_code": "def sort_by_name(arr):", "canonical_solution": "def int_to_word(num):\n    d = {0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', 10: 'ten', 11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen', 15: 'fifteen', 16: 'sixteen', 17: 'seventeen', 18: 'eighteen', 19: 'nineteen', 20: 'twenty', 30: 'thirty', 40: 'forty', 50: 'fifty', 60: 'sixty', 70: 'seventy', 80: 'eighty', 90: 'ninety'}\n    assert 0 <= num\n    if num < 20:\n        return d[num]\n    if num < 100:\n        if num % 10 == 0:\n            return d[num]\n        else:\n            return d[num // 10 * 10] + '-' + d[num % 10]\n    if num < 1000:\n        if num % 100 == 0:\n            return d[num // 100] + ' hundred'\n        else:\n            return d[num // 100] + ' hundred and ' + int_to_word(num % 100)\n\ndef sort_by_name(arr):\n    return sorted(arr, key=int_to_word)", "entry_point": "sort_by_name", "task_id": "TACO_lite/1043", "input_output_examples": [[[["apple", "rottenBanana", "apple"]], [[]], [null]], [["apple", "banana", "apple"], [], []]]}
{"requirement": "def check_availability(schedule, current_time):\"\"\"# The Problem\n\nDan, president of a Large company could use your help. He wants to implement a system that will switch all his devices into offline mode depending on his meeting schedule. When he's at a meeting and somebody texts him, he wants to send an automatic message informing that he's currently unavailable and the time when he's going to be back.\n\n# What To Do\n\nYour task is to write a helper function `checkAvailability` that will take 2 arguments:\n\n* schedule, which is going to be a nested array with Dan's schedule for a given day. Inside arrays will consist of 2 elements - start and finish time of a given appointment,\n\n* *currentTime* - is a string with specific time in hh:mm 24-h format for which the function will check availability based on the schedule.\n  * If no appointments are scheduled for `currentTime`, the function should return `true`. If there are no appointments for the day, the output should also be `true`\n  *  If Dan is in the middle of an appointment at `currentTime`, the function should return a string with the time he's going to be available.\n\n*You can expect valid input for this kata*\n\"\"\"", "inputs": [[[["09:30", "10:15"], ["12:20", "15:50"]], "10:00"], [[["09:30", "10:15"], ["12:20", "15:50"]], "11:00"], [[["09:30", "10:15"], ["12:20", "15:50"]], "10:15"], [[], "10:15"], [[["12:13", "23:50"]], "10:15"], [[["12:13", "23:50"]], "23:55"], [[["12:13", "23:50"]], "17:43"]], "outputs": [["10:15"], [true], [true], [true], [true], [true], ["23:50"]], "starter_code": "def check_availability(schedule, current_time):", "canonical_solution": "def check_availability(schedule, current_time):\n    for tb, te in schedule:\n        if tb <= current_time < te:\n            return te\n    return True", "entry_point": "check_availability", "task_id": "TACO_lite/1044", "input_output_examples": [[[[1, 12, "a", 3.4, 87, 99.9, -42, 50, 5.6]]], [[-1, -21, -87, 42, -50]]]}
{"requirement": "def cooking_time(needed_power, minutes, seconds, power):\"\"\"\nYou've purchased a ready-meal from the supermarket.\n\nThe packaging says that you should microwave it for 4 minutes and 20 seconds, based on a 600W microwave.\n\nOh no, your microwave is 800W! How long should you cook this for?!\n\n___\n\n# Input\n\nYou'll be given 4 arguments:\n\n## 1. needed power\nThe power of the needed microwave.  \n\n## 2. minutes\nThe number of minutes shown on the package.  \n\n## 3. seconds\nThe number of seconds shown on the package.  \n\n## 4. power\nThe power of your microwave.  \n\n___\n\n# Output\nThe amount of time you should cook the meal for formatted as a string.  \n\nNote: the result should be rounded up.\n\n___\n\n\n## All comments/feedback/translations appreciated.\n\"\"\"", "inputs": [["600W", 4, 20, "800W"], ["800W", 3, 0, "1200W"], ["100W", 8, 45, "50W"], ["7500W", 0, 5, "600W"], ["450W", 3, 25, "950W"], ["21W", 64, 88, "25W"], ["83W", 61, 80, "26W"], ["38W", 95, 22, "12W"]], "outputs": [["3 minutes 15 seconds"], ["2 minutes 0 seconds"], ["17 minutes 30 seconds"], ["1 minutes 3 seconds"], ["1 minutes 38 seconds"], ["55 minutes 0 seconds"], ["199 minutes 0 seconds"], ["302 minutes 0 seconds"]], "starter_code": "def cooking_time(needed_power, minutes, seconds, power):", "canonical_solution": "import math\n\ndef cooking_time(needed_power, minutes, seconds, power):\n    t = math.ceil((60 * minutes + seconds) * int(needed_power[:-1]) / int(power[:-1]))\n    return '%d minutes %d seconds' % (t // 60, t - t // 60 * 60)", "entry_point": "cooking_time", "task_id": "TACO_lite/1047", "input_output_examples": [[[12], [42], [70304]], [["10 + 2"], ["40 + 2"], ["70000 + 300 + 4"]]]}
{"requirement": "def parse(data):\"\"\"\nWrite a simple parser that will parse and run Deadfish.  \n\nDeadfish has 4 commands, each 1 character long:\n* `i` increments the value (initially `0`)\n* `d` decrements the value\n* `s` squares the value\n* `o` outputs the value into the return array\n\nInvalid characters should be ignored.\n\"\"\"", "inputs": [["ooo"], ["ioioio"], ["idoiido"], ["isoisoiso"], ["codewars"]], "outputs": [[[0, 0, 0]], [[1, 2, 3]], [[0, 1]], [[1, 4, 25]], [[0]]], "starter_code": "def parse(data):", "canonical_solution": "def parse(data):\n    value = 0\n    res = []\n    for c in data:\n        if c == 'i':\n            value += 1\n        elif c == 'd':\n            value -= 1\n        elif c == 's':\n            value *= value\n        elif c == 'o':\n            res.append(value)\n    return res", "entry_point": "parse", "task_id": "TACO_lite/1053", "input_output_examples": [[[[9, 3, 6, 10]], [[3, 3, 3, 3, 3, 5, 1]]], [[2, 4, 3, 1], [2, 2, 2, 2, 2, 1, 7]]]}
{"requirement": "def fix_progression(arr):\"\"\"# Task\n You are given an array of integers. Your task is to determine the minimum number of its elements that need to be changed so that elements of the array will form an arithmetic progression. Note that if you swap two elements, you're changing both of them, for the purpose of this kata.\n\n Here an arithmetic progression is defined as a sequence of integers such that the difference between consecutive terms is constant. \n\n# Input/Output\n\n\n - `[input]` integer array `arr`\n\n  An array of N integers.\n  \n  `2 ≤ arr.length ≤ 100`\n  \n  `-1000 ≤ arr[i] ≤ 1000`\n\n  Note for Java users: you'll have a batch of 100 bigger random arrays, with lengths as `150 ≤ arr.length ≤ 300`.\n  \n\n - `[output]` an integer\n\n  The minimum number of elements to change.\n\"\"\"", "inputs": [[[1, 2, 3]], [[1, 3, 0, 7, 9]], [[1, 10, 2, 12, 3, 14, 4, 16, 5]], [[7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 7, 7, 7, 7, 7, 7]], [[2, -1, -4, 12, 1, -13, -16, -19, -6, -25]], [[-1, 2, 5, 8, 11, 14, 17, -6, 23, 26, -25, 32]], [[-10, -21, -20, -25, -13, 14, 2, 6, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100, -105, -110, -115, -120, -125, -130, 12, -24, -15, -150, 7, -160, -165, -170, -175, -180, -185, -190, -195, -200, -3, -6, -215, -220, -225, -230, -235, -240, -20, -250, -255, -260, 23, -270, -275, -280, -7, -290, -295, -300, 12, -310, -315, -320, -325, -330, -335, -17, -345, -350, -355, -360, -365, -370, -375, -2, -385, -390, -395, 2, -405, -11, -415, -420, -425, -430, -435, -440, 20, -450, -455, -460, -465, -470, -475, -480, -485, 15, -22, -500, -21]], [[-4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -17, -4, -4, -4, -4, -4, -4, -4, 21, -4, -4, -4, 20, -4, -4, -4, -4, -4, 9, -4, -25, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, 14, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4]]], "outputs": [[0], [1], [5], [2], [3], [2], [23], [6]], "starter_code": "def fix_progression(arr):", "canonical_solution": "from collections import defaultdict\n\ndef fix_progression(arr):\n    res = 0\n    for i in range(len(arr)):\n        D = defaultdict(int)\n        for j in range(i):\n            q, r = divmod(arr[i] - arr[j], i - j)\n            if not r:\n                D[q] += 1\n                res = max(res, D[q])\n    return len(arr) - res - 1", "entry_point": "fix_progression", "task_id": "TACO_lite/1054", "input_output_examples": [[[[1, 1, 5, 6, 9, 16, 27], 4], [[1, 1, 3, 3], 2]], [[3], [4]]]}
{"requirement": "def case_id(c_str):\"\"\"\nWe’ve all seen katas that ask for conversion from snake-case to camel-case, from camel-case to snake-case, or from camel-case to kebab-case — the possibilities are endless.\n\nBut if we don’t know the case our inputs are in, these are not very helpful.\n\n### Task:\n\nSo the task here is to implement a function (called `id` in Ruby/Crystal/JavaScript/CoffeeScript and `case_id` in Python/C) that takes a string, `c_str`, and returns a string with the case the input is in. The possible case types are “kebab”, “camel”, and ”snake”. If none of the cases match with the input, or if there are no 'spaces' in the input (for example in snake case, spaces would be '_'s), return “none”. Inputs will only have letters (no numbers or special characters).\n\n### Some definitions\n\nKebab case: `lowercase-words-separated-by-hyphens`\n\nCamel case: `lowercaseFirstWordFollowedByCapitalizedWords`\n\nSnake case: `lowercase_words_separated_by_underscores`\n\"\"\"", "inputs": [["hello-world"], ["hello-to-the-world"], ["hello_world"], ["hello_to_the_world"], ["helloWorld"], ["helloToTheWorld"], ["hello-World"], ["hello-To-The-World"], ["good-Night"], ["he--llo"], ["good-night"], ["good_night"], ["goodNight"], ["hello_World"], ["hello_To_The_World"], ["he_lloWorld"], ["he_lo-lo"], ["he-llo--world"], ["he-llo--World"], ["hello_-World"]], "outputs": [["kebab"], ["kebab"], ["snake"], ["snake"], ["camel"], ["camel"], ["none"], ["none"], ["none"], ["none"], ["kebab"], ["snake"], ["camel"], ["none"], ["none"], ["none"], ["none"], ["none"], ["none"], ["none"]], "starter_code": "def case_id(c_str):", "canonical_solution": "import re\nCASES = [('snake', re.compile('\\\\A[a-z]+(_[a-z]+)+\\\\Z')), ('kebab', re.compile('\\\\A[a-z]+(-[a-z]+)+\\\\Z')), ('camel', re.compile('\\\\A[a-z]+([A-Z][a-z]*)+\\\\Z')), ('none', re.compile(''))]\n\ndef case_id(c_str):\n    for case, pattern in CASES:\n        if pattern.match(c_str):\n            return case", "entry_point": "case_id", "task_id": "TACO_lite/1055", "input_output_examples": [[[[1, 2, 3, 4, 6, 9, 10, 15, 69], 11]], [[11]]]}
{"requirement": "def my_first_kata(a, b):\"\"\"# Fix the Bugs (Syntax) - My First Kata\n\n## Overview\n\nHello, this is my first Kata so forgive me if it is of poor quality.\n\nIn this Kata you should fix/create a program that ```return```s the following values:\n\n - ```false/False``` if either a or b (or both) are not numbers\n - ```a % b``` plus ```b % a``` if both arguments are numbers\n\nYou may assume the following:\n\n1. If ```a``` and ```b``` are both numbers, neither of ```a``` or ```b``` will be ```0```.\n\n## Language-Specific Instructions\n\n### Javascript and PHP\n\nIn this Kata you should try to fix all the syntax errors found in the code.\n\nOnce you think all the bugs are fixed run the code to see if it works.  A correct solution should return the values specified in the overview.\n\n**Extension: Once you have fixed all the syntax errors present in the code (basic requirement), you may attempt to optimise the code or try a different approach by coding it from scratch.**\n\"\"\"", "inputs": [[3, 5], ["hello", 3], [67, "bye"], [true, true], [314, 107], [1, 32], [-1, -1], [19483, 9], ["hello", {}], [[], "pippi"]], "outputs": [[5], [false], [false], [false], [207], [1], [0], [16], [false], [false]], "starter_code": "def my_first_kata(a, b):", "canonical_solution": "def my_first_kata(a, b):\n    if type(a) == int and type(b) == int:\n        return a % b + b % a\n    else:\n        return False", "entry_point": "my_first_kata", "task_id": "TACO_lite/1057", "input_output_examples": [[[1]], [[0.1]]]}
{"requirement": "def avg_array(arrs):\"\"\"# ASC Week 1 Challenge 5 (Medium #2)\n\nCreate a function that takes a 2D array as an input, and outputs another array that contains the average values for the numbers in the nested arrays at the corresponding indexes. \n\nNote: the function should also work with negative numbers and floats.\n\"\"\"", "inputs": [[[[1, 2, 3, 4], [5, 6, 7, 8]]], [[[2, 3, 9, 10, 7], [12, 6, 89, 45, 3], [9, 12, 56, 10, 34], [67, 23, 1, 88, 34]]], [[[2, 5, 4, 3, 19], [2, 5, 6, 7, 10]]], [[[1.2, 8.521, 0.4, 3.14, 1.9], [2, 4.5, 3.75, 0.987, 1.0]]], [[[2, 5, -4, 3, -19], [-2, -5, 6, 7, 10]]], [[[-2, -18, -45, -10], [0, -45, -20, -34]]]], "outputs": [[[3, 4, 5, 6]], [[22.5, 11, 38.75, 38.25, 19.5]], [[2, 5, 5, 5, 14.5]], [[1.6, 6.5105, 2.075, 2.0635, 1.45]], [[0, 0, 1, 5, -4.5]], [[-1, -31.5, -32.5, -22]]], "starter_code": "def avg_array(arrs):", "canonical_solution": "def avg_array(arrs):\n    return [sum(a) / len(a) for a in zip(*arrs)]", "entry_point": "avg_array", "task_id": "TACO_lite/1058", "input_output_examples": [[[720, 850, 70], [80, 91, 37]], [[[0, 32, 18]], [[3, 21, 49]]]]}
{"requirement": "def sq_cub_rev_prime(n):\n\t\"\"\"\nThe number ```89``` is the first positive integer that has a particular, curious property:\n\nThe square of this number is a four-digit number.\n\nThe reverse of this square is a prime number.\n\nThe cube of this number is a six-digit number.\n\nThe reverse of this cube is a prime number.\n\nCreate a function ```sq_cub_rev_prime()```, that receives the ordinal number of the sequence and outputs its corresponding value.\n\nYour code will be tested up to the 250th term\n\nThis is not a registered sequence of OESIS, so if you are one of the first ten people that solve this kata, you may have the privilege to register the sequence at https://oeis.org, with your name. If you do so, please, mention in your biography that you are a Codewarrior.\n\nMemoize your results to pass the tests.\n\nEnjoy it!\n\"\"\"", "inputs": [[1], [2], [3], [4]], "outputs": [[89], [271], [325], [328]], "starter_code": "def sq_cub_rev_prime(n):\n\t", "canonical_solution": "sq_cub_rev_prime = (None, 89, 271, 325, 328, 890, 1025, 1055, 1081, 1129, 1169, 1241, 2657, 2710, 3112, 3121, 3149, 3244, 3250, 3263, 3280, 3335, 3346, 3403, 4193, 4222, 4231, 4289, 4291, 5531, 5584, 5653, 5678, 5716, 5791, 5795, 5836, 5837, 8882, 8900, 8926, 8942, 9664, 9794, 9875, 9962, 10178, 10250, 10393, 10429, 10499, 10550, 10577, 10651, 10679, 10717, 10718, 10739, 10756, 10762, 10810, 10844, 10895, 10898, 10943, 10996, 11035, 11039, 11084, 11137, 11159, 11164, 11182, 11191, 11290, 11351, 11371, 11575, 11690, 11695, 11707, 11722, 11732, 11795, 11827, 11861, 11885, 12109, 12124, 12242, 12268, 12304, 12361, 12362, 12410, 12433, 12436, 12535, 19144, 19267, 19271, 19273, 19385, 19433, 19442, 19451, 19501, 19564, 19597, 19603, 19631, 19637, 19766, 19846, 19865, 19871, 19909, 19927, 26464, 26491, 26570, 26579, 26621, 26704, 26944, 26965, 27001, 27029, 27052, 27100, 27101, 31120, 31210, 31223, 31237, 31261, 31327, 31331, 31351, 31463, 31469, 31490, 31534, 31561, 31657, 31726, 31739, 31784, 31807, 31883, 31928, 31978, 32066, 32072, 32213, 32255, 32308, 32431, 32440, 32446, 32500, 32539, 32564, 32573, 32630, 32656, 32708, 32749, 32759, 32800, 32888, 32969, 33059, 33254, 33325, 33338, 33350, 33404, 33460, 33475, 33509, 33568, 33575, 33701, 33833, 34030, 34112, 34159, 34163, 41351, 41429, 41473, 41501, 41608, 41639, 41839, 41879, 41930, 41933, 41992, 42029, 42089, 42103, 42121, 42179, 42220, 42235, 42310, 42326, 42385, 42463, 42466, 42524, 42575, 42607, 42682, 42782, 42839, 42890, 42910, 42982, 43045, 43049, 54986, 54991, 55073, 55310, 55492, 55589, 55598, 55603, 55651).__getitem__", "entry_point": "sq_cub_rev_prime", "task_id": "TACO_lite/1059", "input_output_examples": [[[100, 5]], [[95]]]}
{"requirement": "def to_pretty(s):\"\"\"\n##Overview\n\nWrite a helper function that takes in a Time object and converts it to a more human-readable format. You need only go up to '_ weeks ago'.\n\n##Specifics\n - The output will be an amount of time, t, included in one of the following phrases: \"just now\", \"[t] seconds ago\", \"[t] minutes ago\", \"[t] hours ago\", \"[t] days ago\", \"[t] weeks ago\".\n - You will have to handle the singular cases. That is, when t = 1, the phrasing will be one of \"a second ago\", \"a minute ago\", \"an hour ago\", \"a day ago\", \"a week ago\".\n - The amount of time is always rounded down to the nearest integer.\n - Only times in the past will be given, with the range \"just now\" to \"52 weeks ago\"\n\"\"\"", "inputs": [[0], [1], [30], [90], [180], [4000], [40000], [140000], [400000], [1000000], [10000000]], "outputs": [["just now"], ["a second ago"], ["30 seconds ago"], ["a minute ago"], ["3 minutes ago"], ["an hour ago"], ["11 hours ago"], ["a day ago"], ["4 days ago"], ["a week ago"], ["16 weeks ago"]], "starter_code": "def to_pretty(s):", "canonical_solution": "def to_pretty(s):\n    if not s:\n        return 'just now'\n    for t, w in ((60, 'seconds'), (60, 'minutes'), (24, 'hours'), (7, 'days'), (53, 'weeks')):\n        s, r = divmod(s, t)\n        if not s:\n            return (r > 1 and str(r) + ' ' + w or ('a ', 'an ')[t == 24] + w[:-1]) + ' ago'", "entry_point": "to_pretty", "task_id": "TACO_lite/1069", "input_output_examples": [[[1.52], [1.83]], [[9.45], [10.67]]]}
{"requirement": "def triple_double(num1, num2):\"\"\"\nWrite a function \n```javascript \ntripledouble(num1,num2)\n```\n```python\ntriple_double(num1, num2)\n```\nwhich takes numbers `num1` and `num2` and returns `1` if there is a straight triple of a number at any place in `num1` and also a straight double of the **same** number in `num2`.\n\nIf this isn't the case, return `0`\n\"\"\"", "inputs": [[451999277, 41177722899], [1222345, 12345], [12345, 12345], [666789, 12345667], [10560002, 100], [1112, 122]], "outputs": [[1], [0], [0], [1], [1], [0]], "starter_code": "def triple_double(num1, num2):", "canonical_solution": "def triple_double(num1, num2):\n    return any([i * 3 in str(num1) and i * 2 in str(num2) for i in '0123456789'])", "entry_point": "triple_double", "task_id": "TACO_lite/1071", "input_output_examples": [[[0], [1], [43], [91]], [[{}], [{"P": 1}], [{"Q": 1, "D": 1, "N": 1, "P": 3}], [{"H": 1, "Q": 1, "D": 1, "N": 1, "P": 1}]]]}
{"requirement": "def lamps(a):\"\"\"# Task\nN lamps are placed in a line, some are switched on and some are off. What is the smallest number of lamps that need to be switched so that on and off lamps will alternate with each other? \n\nYou are given an array `a` of zeros and ones - `1` mean switched-on lamp and `0` means switched-off.\n\nYour task is to find the smallest number of lamps that need to be switched.\n\n# Input/Output\n\n\n- `[input]` integer array `a`\n\narray of zeros and ones - initial lamp setup, 1 mean switched-on lamp and 0 means switched-off.\n\n`2 < a.length <= 1000`\n\n\n- `[output]` an integer\n\nminimum number of switches.\n\"\"\"", "inputs": [[[1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1]], [[1, 0, 1]], [[1, 0, 1, 0]], [[0, 1, 0, 1, 0]], [[1, 0, 1, 0, 0, 1, 0, 1]], [[1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0]]], "outputs": [[5], [0], [0], [0], [4], [5]], "starter_code": "def lamps(a):", "canonical_solution": "def lamps(a):\n    n = sum((1 for i, x in enumerate(a) if x != i % 2))\n    return min(n, len(a) - n)", "entry_point": "lamps", "task_id": "TACO_lite/1072", "input_output_examples": [[[0]], [[0]]]}
{"requirement": "def solve(arr, reach):\"\"\"\nConsider an array containing cats and dogs. Each dog can catch only one cat, but cannot catch a cat that is more than `n` elements away. Your task will be to return the maximum number of cats that can be caught.\n\nDo not modify the input array. \n\nMore examples in the test cases. Good luck!\n\"\"\"", "inputs": [[["D", "C", "C", "D", "C"], 1], [["C", "C", "D", "D", "C", "D"], 2], [["C", "C", "D", "D", "C", "D"], 1], [["D", "C", "D", "C", "C", "D"], 3], [["C", "C", "C", "D", "D"], 3], [["C", "C", "C", "D", "D"], 2], [["C", "C", "C", "D", "D"], 1], [["C", "C", "C", "D", "D", "D", "C", "D", "D", "D", "C", "D", "C", "C"], 2]], "outputs": [[2], [3], [2], [3], [2], [2], [1], [5]], "starter_code": "def solve(arr, reach):", "canonical_solution": "def solve(arr, reach):\n    dogs, nCats = ({i for i, x in enumerate(arr) if x == 'D'}, 0)\n    for i, c in enumerate(arr):\n        if c == 'C':\n            catchingDog = next((i + id for id in range(-reach, reach + 1) if i + id in dogs), None)\n            if catchingDog is not None:\n                nCats += 1\n                dogs.remove(catchingDog)\n    return nCats", "entry_point": "solve", "task_id": "TACO_lite/1074", "input_output_examples": [[[2], [9], [23], [39], [59], [513], [709]], [["Special!!"], ["NOT!!"], ["Special!!"], ["NOT!!"], ["NOT!!"], ["Special!!"], ["NOT!!"]]]}
{"requirement": "def bin_to_hex(s, res=''):\"\"\"\nDefine two functions: `hex_to_bin` and `bin_to_hex` (or `hexToBin` and `binToHex`)\n\n\n# hex_to_bin\n\nTakes a hexadecimal string as an argument .\n\n**Note:** This string can contain upper or lower case characters and start with any amount of zeros.\n\nReturns the binary representation (without leading zeros) of the numerical value of the hexadecimal string.\n\n# bin_to_hex\n\nTakes a binary string (with or without leading zeros) as an argument .\n\nReturns the hexadecimal representation of the numerical value of the binary string.\n\n**Note:** Any non-numerical characters should be lower case\n\n\n**Note:** You can assume all arguments are valid so there is no need for error checking.\n\nOh, and I've disabled a few things.\n\n\nAny feedback would be much appreciated\n\"\"\"", "inputs": [["000101"], ["001111"], ["000"], ["10011010010"]], "outputs": [["5"], ["f"], ["0"], ["4d2"]], "starter_code": "def bin_to_hex(s, res=''):", "canonical_solution": "bin2hex = {'0000': '0', '0001': '1', '0010': '2', '0011': '3', '0100': '4', '0101': '5', '0110': '6', '0111': '7', '1000': '8', '1001': '9', '1010': 'a', '1011': 'b', '1100': 'c', '1101': 'd', '1110': 'e', '1111': 'f'}\nhex2bin = {v: k for k, v in bin2hex.items()}\n\ndef bin_to_hex(s, res=''):\n    s = '0' * (4 - len(s) % 4) + s\n    while s:\n        res += bin2hex[s[:4]]\n        s = s[4:]\n    return res.lstrip('0') or '0'\n\ndef hex_to_bin(s, res=''):\n    while s:\n        res += hex2bin[s[0].lower()]\n        s = s[1:]\n    return res.lstrip('0') or '0'", "entry_point": "bin_to_hex", "task_id": "TACO_lite/1076", "input_output_examples": [[["Gug hgs g cgt", "gaderypoluki"]], [["Ala has a cat"]]]}
{"requirement": "def same_col_seq(val, k, col):\"\"\"\nWe have the numbers with different colours with the sequence: ['red', 'yellow', 'blue'].\n\nThat sequence colours the numbers in the following way:\n\n 1   2   3    4    5   6  7   8   9   10   11  12   13 .....\n\nWe have got the following recursive function:\n\n  ```\nf(1) = 1\nf(n) = f(n - 1) + n\n```\n\nSome terms of this sequence with their corresponding colour are:\n\n```\nterm   value   colour\n1        1     \"red\"\n2        3     \"blue\"\n3        6     \"blue\"\n4       10     \"red\"\n5       15     \"blue\"\n6       21     \"blue\"\n7       28     \"red\"\n```\n\nThe three terms of the same colour \"blue\", higher than 3, are: \n\nWe need a function `same_col_seq(), that may receive three arguments:\n\n- `val`, an integer number\n- `k`, an integer number\n- `colour`, the name of one of the three colours(red, yellow or blue), as a string.\n\nThe function will output a sorted array with the smallest `k` terms, having the same marked colour, but higher than `val`.\n\nThe function may output an empty list if it does not find terms of the sequence with the wanted colour in the range [val, 2* k * val]\n\nTests will be with the following features:\n\n* Nmber of tests: `100`\n* `100 < val < 1000000`\n* `3 < k < 20`\n\"\"\"", "inputs": [[3, 3, "blue"], [100, 4, "red"], [250, 6, "yellow"], [1000, 7, "red"]], "outputs": [[[6, 15, 21]], [[136, 190, 253, 325]], [[]], [[1081, 1225, 1378, 1540, 1711, 1891, 2080]]], "starter_code": "def same_col_seq(val, k, col):", "canonical_solution": "D, R = ({}, [[], [], []])\nfor i in range(10000):\n    D[i] = D.get(i - 1, 0) + i\n    R[D[i] % 3].append(D[i])\n\ndef same_col_seq(val, k, col):\n    r = ['blue', 'red', 'yellow'].index(col)\n    return [e for e in R[r] if e > val][:k]", "entry_point": "same_col_seq", "task_id": "TACO_lite/1081", "input_output_examples": [[["abcdefg", "abcqetg"], ["abcdefg", "abcdefg"]], [[3, 5], []]]}
{"requirement": "def cake(candles,debris):\n\t\"\"\"\nIt's your Birthday. Your colleagues buy you a cake. The numbers of candles on the cake is provided (x). Please note this is not reality, and your age can be anywhere up to 1,000. Yes, you would look a mess.\n\nAs a surprise, your colleagues have arranged for your friend to hide inside the cake and burst out. They pretend this is for your benefit, but likely it is just because they want to see you fall over covered in cake. Sounds fun!\n\nWhen your friend jumps out of the cake, he/she will knock some of the candles to the floor. If the number of candles that fall is higher than 70% of total candles (x), the carpet will catch fire. \n\nYou will work out the number of candles that will fall from the provided string (y). You must add up the character ASCII code of each even indexed (assume a 0 based indexing) character in y, with the alphabetical position of each odd indexed character in y to give the string a total.\n\nIf the carpet catches fire, return 'Fire!', if not, return 'That was close!'.\n\"\"\"", "inputs": [[900, "abcdef"], [56, "ifkhchlhfd"], [256, "aaaaaddddr"], [333, "jfmgklfhglbe"], [12, "jaam"], [808, "alfbpmmpz"], [660, "zyxsqwh"], [651, "hmgoltyy"], [349, "nxls"], [958, "hovzfsxbmwu"], [301, "doda"], [383, "zwwl"], [871, "gnlyvknjga"], [583, "slhacx"], [0, "jpipe"]], "outputs": [["That was close!"], ["Fire!"], ["Fire!"], ["Fire!"], ["Fire!"], ["Fire!"], ["Fire!"], ["Fire!"], ["Fire!"], ["Fire!"], ["Fire!"], ["Fire!"], ["That was close!"], ["That was close!"], ["That was close!"]], "starter_code": "def cake(candles,debris):\n\t", "canonical_solution": "cake = lambda c, d: ['That was close!', 'Fire!'][c != 0 and c * 0.7 < sum((ord(e) - 96 * (i % 2 != 0) for i, e in enumerate(d)))]", "entry_point": "cake", "task_id": "TACO_lite/1084", "input_output_examples": [[[10], [5]], [[17], [10]]]}
{"requirement": "def get_function(sequence):\"\"\"\nThis is a follow-up from my previous Kata which can be found here: http://www.codewars.com/kata/5476f4ca03810c0fc0000098\n\nThis time, for any given linear sequence, calculate the function [f(x)] and return it as a function in Javascript or Lambda/Block in Ruby.\n\nAssumptions for this kata are:\n```\nThe sequence argument will always contain 5 values equal to f(0) - f(4).\nThe function will always be in the format \"nx +/- m\", 'x +/- m', 'nx', 'x' or 'm'\nIf a non-linear sequence simply return 'Non-linear sequence' for javascript, ruby, and python. For C#, throw an ArgumentException.\n```\n\"\"\"", "inputs": [[[1, 2, 4, 7, 11]], [[0, 1, 2, 3, 100000]], [[0, 1, 2, 100000, 4]], [[0, 1, 100000, 3, 4]], [[0, 100000, 2, 3, 4]]], "outputs": [["Non-linear sequence"], ["Non-linear sequence"], ["Non-linear sequence"], ["Non-linear sequence"], ["Non-linear sequence"]], "starter_code": "def get_function(sequence):", "canonical_solution": "def get_function(sequence):\n    slope = sequence[1] - sequence[0]\n    for x in range(1, 5):\n        if sequence[x] - sequence[x - 1] != slope:\n            return 'Non-linear sequence'\n    return lambda a: slope * a + sequence[0]", "entry_point": "get_function", "task_id": "TACO_lite/1087", "input_output_examples": [[[[1, 2, 3, 4, 5, 6, 7, 8, 9], 3], [[-22, 5, 3, 11, 26, -6, -7, -8, -9, -8, 26], 2], [[6, -25, 3, 7, 5, 5, 7, -3, 23], 1]], [[4, 6, 8], [-8, 26], [6]]]}
{"requirement": "def find(r):\"\"\"\n## The Riddle\n\nThe King of a small country invites 1000 senators to his annual party. As a tradition, each senator brings the King a bottle of wine. Soon after, the Queen discovers that one of the senators is trying to assassinate the King by giving him a bottle of poisoned wine. Unfortunately, they do not know which senator, nor which bottle of wine is poisoned, and the poison is completely indiscernible.\n\nHowever, the King has 10 lab rats. He decides to use them as taste testers to determine which bottle of wine contains the poison. The poison when taken has no effect on the rats, until exactly 24 hours later when the infected rats suddenly die. The King needs to determine which bottle of wine is poisoned by tomorrow, so that the festivities can continue as planned.\n\nHence he only has time for one round of testing, he decides that each rat tastes multiple bottles, according to a certain scheme.\n\n\n## Your Task\n\nYou receive an array of integers (`0 to 9`), each of them is the number of a rat which died after tasting the wine bottles. Return the number of the bottle (`1..1000`) which is poisoned.\n\n\n**Good Luck!**\n\n\n*Hint: think of rats as a certain representation of the number of the bottle...*\n\"\"\"", "inputs": [[[0]], [[1]], [[2]], [[3]], [[4]], [[5]], [[6]], [[7]], [[8]], [[9]], [[3, 5, 6, 7, 8, 9]], [[0, 3, 5, 4, 9, 8]], [[0, 1, 9, 3, 5]], [[0, 1, 2, 3, 4, 6]], [[0, 1, 3, 4]]], "outputs": [[1], [2], [4], [8], [16], [32], [64], [128], [256], [512], [1000], [825], [555], [95], [27]], "starter_code": "def find(r):", "canonical_solution": "def find(r):\n    return sum((2 ** i for i in r))", "entry_point": "find", "task_id": "TACO_lite/1092", "input_output_examples": [[[6, 2, 2, 3], [6, 2, 2, 5], [6, 2, 2, 7], [8, 4, 2, 3]], [[1, 0, 1], [2, 1, 1], [-1, -1, -1], [1, 2, 1]]]}
{"requirement": "def pairwise(arr, n):\"\"\"# Task\n Given an array `arr` and a number `n`. Call a pair of numbers from the array a `Perfect Pair` if their sum is equal to `n`.\n\n Find all of the perfect pairs and return the sum of their **indices**. \n \n Note that any element of the array can only be counted in one Perfect Pair. Also if there are multiple correct answers, return the smallest one.\n\n# Input/Output\n\n\n - `[input]` integer array `arr`\n\n  array of non-negative integers.\n\n\n - `[input]` integer `n`\n\n  positive integer\n\n\n - `[output]` integer\n\n  sum of indices and 0 if no Perfect Pair exists.\n\"\"\"", "inputs": [[[1, 4, 2, 3, 0, 5], 7], [[1, 3, 2, 4], 4], [[1, 1, 1], 2], [[0, 0, 0, 0, 1, 1], 1], [[15, 1, 1], 5]], "outputs": [[11], [1], [1], [10], [0]], "starter_code": "def pairwise(arr, n):", "canonical_solution": "def pairwise(arr, n):\n    s = []\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if j in s or i in s:\n                continue\n            if arr[i] + arr[j] == n:\n                s.append(i)\n                s.append(j)\n    return sum(s)", "entry_point": "pairwise", "task_id": "TACO_lite/1093", "input_output_examples": [[[""]], [[false]]]}
{"requirement": "def solution(number):\"\"\"\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 **below** the number passed in. \n\n> Note: If the number is a multiple of **both** 3 and 5, only count it *once*.\n> Also, if a number is negative, return 0(for languages that do have them)\n  \n###### *Courtesy of projecteuler.net*\n\"\"\"", "inputs": [[10], [20], [0], [1], [200]], "outputs": [[23], [78], [0], [0], [9168]], "starter_code": "def solution(number):", "canonical_solution": "def solution(number):\n    return sum((x for x in range(number) if x % 3 == 0 or x % 5 == 0))", "entry_point": "solution", "task_id": "TACO_lite/1094", "input_output_examples": [[["eloquent"]], [["loquen"]]]}
{"requirement": "def final_grade(exam, projects):\"\"\"\nCreate a function finalGrade, which calculates the final grade of a student depending on two parameters: a grade for the exam and a number of completed projects.\n\nThis function should take two arguments:\nexam - grade for exam (from 0 to 100);\nprojects - number of completed projects (from 0 and above);\n\nThis function should return a number (final grade).\nThere are four types of final grades:\n- 100, if a grade for the exam is more than 90 or if a number of completed projects more than 10.\n- 90, if a grade for the exam is more than 75 and if a number of completed projects is minimum 5.\n- 75, if a grade for the exam is more than 50 and if a number of completed projects is minimum 2.\n- 0, in other cases\n\n*Use Comparison and Logical Operators.\n\"\"\"", "inputs": [[100, 12], [99, 0], [10, 15], [85, 5], [55, 3], [55, 0], [20, 2]], "outputs": [[100], [100], [100], [90], [75], [0], [0]], "starter_code": "def final_grade(exam, projects):", "canonical_solution": "def final_grade(exam, projects):\n    if exam > 90 or projects > 10:\n        return 100\n    if exam > 75 and projects >= 5:\n        return 90\n    if exam > 50 and projects >= 2:\n        return 75\n    return 0", "entry_point": "final_grade", "task_id": "TACO_lite/1096", "input_output_examples": [[[["bad", "bad", "bad"]]], [["Fail!"]]]}
{"requirement": "def shortest_time(n, m, speeds):\"\"\"# Task\n\nJohn is a programmer. He treasures his time very much. He lives on the `n` floor of a building. Every morning he will go downstairs as quickly as possible to begin his great work today.\n\nThere are two ways he goes downstairs: walking or taking the elevator.\n\nWhen John uses the elevator, he will go through the following steps:\n```\n1. Waiting the elevator from m floor to n floor;\n2. Waiting the elevator open the door and go in;\n3. Waiting the elevator close the door;\n4. Waiting the elevator down to 1 floor;\n5. Waiting the elevator open the door and go out;\n(the time of go in/go out the elevator will be ignored)\n```\n\nGiven the following arguments:\n```\nn: An integer. The floor of John(1-based).\nm: An integer. The floor of the elevator(1-based).\nspeeds: An array of integer. It contains four integer [a,b,c,d]\n        a: The seconds required when the elevator rises or falls 1 floor\n        b: The seconds required when the elevator open the door\n        c: The seconds required when the elevator close the door\n        d: The seconds required when John walks to n-1 floor\n```\n\nPlease help John to calculate the shortest time to go downstairs.\n\"\"\"", "inputs": [[5, 6, [1, 2, 3, 10]], [1, 6, [1, 2, 3, 10]], [5, 5, [1, 2, 3, 10]], [2, 2, [1, 2, 3, 10]], [2, 2, [2, 3, 4, 10]], [5, 4, [1, 2, 3, 10]], [5, 4, [2, 3, 4, 5]], [1, 6, [0, 0, 0, 0]], [1, 6, [0, 2, 0, 0]], [1, 6, [20, 0, 10, 0]]], "outputs": [[12], [0], [11], [8], [10], [12], [20], [0], [0], [0]], "starter_code": "def shortest_time(n, m, speeds):", "canonical_solution": "def shortest_time(n, m, speeds):\n    lift, open, close, walk = speeds\n    return min(abs(m - n) * lift + open + close + (n - 1) * lift + open, (n - 1) * walk)", "entry_point": "shortest_time", "task_id": "TACO_lite/1101", "input_output_examples": [[[[5, 4, 3, 2, 1], [6, 5, 7, 8, 9]], [[2, 1, 3, 4, 5], [5, 6, 7, 8, 9]], [[5, 6, 9, 2, 6, 5], [3, 6, 7, 4, 8, 1]]], [[[[4, 5, 3, 2, 1], [9, 8, 7, 5, 6]]], [[[2, 1, 3, 4, 5], [6, 5, 7, 8, 9]]], [[[5, 5, 2, 6, 9, 6], [4, 3, 1, 6, 8, 7]]]]]}
{"requirement": "def pattern(n):\"\"\"\n##Task:\n\nYou have to write a function **pattern** which creates the following pattern upto n number of rows. \n\n* If the Argument is 0 or a Negative Integer then it should return \"\" i.e. empty string.\n\n* If any odd number is passed as argument then the pattern should last upto the largest even number which is smaller than the passed odd number.\n\n* If the argument is 1 then also it should return \"\".\n\n```Note: There are no spaces in the pattern```\n\n```Hint: Use \\n in string to jump to next line```\n\"\"\"", "inputs": [[2], [1], [5], [6], [0], [-25]], "outputs": [["22"], [""], ["22\n4444"], ["22\n4444\n666666"], [""], [""]], "starter_code": "def pattern(n):", "canonical_solution": "def pattern(n):\n    return '\\n'.join([str(i) * i for i in range(2, n + 1, 2)])", "entry_point": "pattern", "task_id": "TACO_lite/1103", "input_output_examples": [[["HELLO", "WORLD"], ["AaBbCcXxYyZz0189", "KkLlMmNnOoPp4567"]], [["WORLD"], ["KkLlMmNnOoPp4567"]]]}
{"requirement": "def half_life(N0, N, t):\"\"\"\nThe [half-life](https://en.wikipedia.org/wiki/Half-life) of a radioactive substance is the time it takes (on average) for one-half of its atoms to undergo radioactive decay.\n\n# Task Overview\nGiven the initial quantity of a radioactive substance, the quantity remaining after a given period of time, and the period of time, return the half life of that substance.\n\"\"\"", "inputs": [[10, 5, 1], [8, 4, 2], [12, 3, 2]], "outputs": [[1], [2], [1]], "starter_code": "def half_life(N0, N, t):", "canonical_solution": "from math import log\n\ndef half_life(N0, N, t):\n    return t / log(N0 / N, 2)", "entry_point": "half_life", "task_id": "TACO_lite/1105", "input_output_examples": [[[[43, 23, 40, 13], 4]], [[3]]]}
{"requirement": "def convergence(n):\"\"\"\nConsider the following series:\n\n`1, 2, 4, 8, 16, 22, 26, 38, 62, 74, 102, 104, 108, 116, 122`\n\nIt is generated as follows:\n\n* For single digit integers, add the number to itself to get the next element.\n* For other integers, multiply all the non-zero digits and add the result to the original number to get the next element.\n\nLet's begin the same series with a seed value of `3` instead of `1`:\n\nNotice that the two sequences converge and are identical thereafter. We will call the series seeded by a value of `1` the \"base series\" and the other series the \"test series\". \n\nYou will be given a seed value for the test series and your task will be to return the number of integers that have to be generated in the test series before it converges to the base series.\n\nGood luck!\n\nIf you like this Kata, please try:\n\n[Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e995880000e3)\n\n[Unique digit sequence](https://www.codewars.com/kata/599688d0e2800dda4e0001b0)\n\n[Divisor harmony](https://www.codewars.com/kata/59bf97cd4f98a8b1cd00007e)\n\"\"\"", "inputs": [[3], [5], [10], [15], [500], [5000]], "outputs": [[5], [6], [5], [2], [29], [283]], "starter_code": "def convergence(n):", "canonical_solution": "from operator import mul\nfrom functools import reduce\n\ndef genSequence(n):\n    yield n\n    while True:\n        n += reduce(mul, [int(d) for d in str(n) if d != '0']) if n > 9 else n\n        yield n\n\ndef extract(seq, v):\n    return sorted(seq).index(v)\n\ndef convergence(n):\n    gen1, genN = (genSequence(1), genSequence(n))\n    seq1, seqN = ({next(gen1)}, {next(genN)})\n    while True:\n        a, b = (next(gen1), next(genN))\n        seq1.add(a)\n        seqN.add(b)\n        if a in seqN:\n            return extract(seqN, a)\n        if b in seq1:\n            return extract(seqN, b)", "entry_point": "convergence", "task_id": "TACO_lite/1106", "input_output_examples": [[[1, 2, 3], [1, 2, 3, 2], ["1", "2", "3", "2"]], [[false], [true], [true]]]}
{"requirement": "def pattern(n):\"\"\"\n## Task:\nYou have to write a function `pattern` which returns the following Pattern(See Pattern & Examples) upto `n` number of rows. \n\n* Note:`Returning` the pattern is not the same as `Printing` the pattern.\n\n#### Rules/Note:\n* If `n < 1` then it should return \"\" i.e. empty string.\n* There are `no whitespaces` in the pattern.\n\n### Pattern: \n\n    1\n    22\n    333\n    ....\n    ......\n\n```if-not:cfml\n* Hint: Use \\n in string to jump to next line\n```\n```if:cfml\n* Hint: Use Chr(10) in string to jump to next line\n```\n[List of all my katas]('http://www.codewars.com/users/curious_db97/authored')\n\"\"\"", "inputs": [[1], [2], [5], [0], [-25]], "outputs": [["1"], ["1\n22"], ["1\n22\n333\n4444\n55555"], [""], [""]], "starter_code": "def pattern(n):", "canonical_solution": "def pattern(n):\n    return '\\n'.join([x * str(x) for x in range(1, n + 1)])", "entry_point": "pattern", "task_id": "TACO_lite/1111", "input_output_examples": [[[[6, 9, 21]]], [[9]]]}
{"requirement": "def langtons_ant(n):\"\"\"*This kata is based on [Project Euler Problem #349](https://projecteuler.net/problem=349). You may want to start with solving [this kata](https://www.codewars.com/kata/langtons-ant) first.*\n\n---\n\n[Langton's ant](https://en.wikipedia.org/wiki/Langton%27s_ant) moves on a regular grid of squares that are coloured either black or white.\nThe ant is always oriented in one of the cardinal directions (left, right, up or down) and moves  according to the following rules:\n- if it is on a black square, it flips the colour of the square to white, rotates 90 degrees counterclockwise and moves forward one square.\n- if it is on a white square, it flips the colour of the square to black, rotates 90 degrees clockwise and moves forward one square.\n\nStarting with a grid that is **entirely white**, how many squares are black after `n` moves of the ant?\n\n**Note:** `n` will go as high as 10^(20)\n\n---\n\n## My other katas\n\nIf you enjoyed this kata then please try [my other katas](https://www.codewars.com/collections/katas-created-by-anter69)! :-)\n\n#### *Translations are welcome!*\n\"\"\"", "inputs": [[0], [1], [2], [10], [100], [1000], [10000], [100000], [1000000], [10000000]], "outputs": [[0], [1], [2], [6], [20], [118], [720], [11108], [114952], [1153412]], "starter_code": "def langtons_ant(n):", "canonical_solution": "move = [lambda p: (p[0] + 1, p[1]), lambda p: (p[0], p[1] + 1), lambda p: (p[0] - 1, p[1]), lambda p: (p[0], p[1] - 1)]\nstart, loop, size = (9977, 104, 12)\n\ndef langtons_ant(n):\n    pos, d, black, res = ((0, 0), 0, set(), 0)\n    if n > start:\n        x = (n - start) % loop\n        res = size * (n - start - x) // loop\n        n = start + x\n    for i in range(n):\n        if pos in black:\n            black.remove(pos)\n            d = (d + 1) % 4\n        else:\n            black.add(pos)\n            d = (d - 1) % 4\n        pos = move[d](pos)\n    return res + len(black)", "entry_point": "langtons_ant", "task_id": "TACO_lite/1114", "input_output_examples": [[["Mmmm"], ["Super"], ["Apple"], ["YoMama"]], [[[]], [[2, 4]], [[1, 5]], [[1, 2, 4, 6]]]]}
{"requirement": "def next_perfect_square(n):\"\"\"\nWrite a function name `nextPerfectSquare` that returns the first perfect square that is greater than its integer argument. A `perfect square` is a integer that is equal to some integer squared. For example 16 is a perfect square because `16=4*4`. \n\n```if-not:csharp\ncaution! the largest number tested is closer to `Number.MAX_SAFE_INTEGER`\n```\n```if:csharp\nCaution! The largest number test is close to `Int64.MaxValue`\n```\n\"\"\"", "inputs": [[6], [36], [0], [-5]], "outputs": [[9], [49], [1], [0]], "starter_code": "def next_perfect_square(n):", "canonical_solution": "def next_perfect_square(n):\n    return n >= 0 and (int(n ** 0.5) + 1) ** 2", "entry_point": "next_perfect_square", "task_id": "TACO_lite/1124", "input_output_examples": [[[36, 3], [48, 5], [37, 2]], [[8, 3, [[2, 2, 9], [2, 3, 6], [3, 3, 4]]], [11, 1, [2, 2, 2, 2, 3]], [0, 0, []]]]}
{"requirement": "def robot_walk(a):\"\"\"\nA robot is standing at the `(0, 0)` point of the Cartesian plane and is oriented towards the vertical (y) axis in the direction of increasing y values (in other words, he's facing up, or north). The robot executes several commands each of which is a single positive integer. When the robot is given a positive integer K it moves K squares forward and then turns 90 degrees clockwise.\n\n The commands are such that both of the robot's coordinates stay non-negative.\n\n Your task is to determine if there is a square that the robot visits at least twice after executing all the commands.\n\n\n - `[input]` integer array a\n\n  An array of positive integers, each number representing a command.\n\n  Constraints:\n  \n  `3 ≤ a.length ≤ 100`\n  \n  `1 ≤ a[i] ≤ 10000`\n\n\n - `[output]` a boolean value\n\n  `true` if there is a square that the robot visits at least twice, `false` otherwise.\n\"\"\"", "inputs": [[[4, 4, 3, 2, 2, 3]], [[7, 5, 4, 5, 2, 3]], [[10, 3, 10, 2, 5, 1, 2]], [[11, 8, 6, 6, 4, 3, 7, 2, 1]], [[5, 5, 5, 5]], [[34241, 23434, 2341]], [[9348, 2188, 9348]]], "outputs": [[true], [true], [false], [true], [true], [false], [false]], "starter_code": "def robot_walk(a):", "canonical_solution": "def robot_walk(a):\n    i = 3\n    while i < len(a) and a[i] < a[i - 2]:\n        i += 1\n    return i < len(a)", "entry_point": "robot_walk", "task_id": "TACO_lite/1125", "input_output_examples": [[["Hello there, little user5453 374 ())$."], ["I’d been using my sphere as a stool. I traced counterclockwise circles on it with my fingertips and it shrank until I could palm it. My bolt had shifted while I’d been sitting. I pulled it up and yanked the pleats straight as I careered around tables, chairs, globes, and slow-moving fraas. I passed under a stone arch into the Scriptorium. The place smelled richly of ink. Maybe it was because an ancient fraa and his two fids were copying out books there. But I wondered how long it would take to stop smelling that way if no one ever used it at all; a lot of ink had been spent there, and the wet smell of it must be deep into everything."]], [[4], [112]]]}
{"requirement": "def delete_digit(n):\"\"\"# Task\n Given an integer `n`, find the maximal number you can obtain by deleting exactly one digit of the given number.\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n    Constraints: `10 ≤ n ≤ 1000000.`\n\n\n - `[output]` an integer\n\"\"\"", "inputs": [[152], [1001], [10]], "outputs": [[52], [101], [1]], "starter_code": "def delete_digit(n):", "canonical_solution": "def delete_digit(n):\n    s = str(n)\n    return int(max((s[:i] + s[i + 1:] for i in range(len(s)))))", "entry_point": "delete_digit", "task_id": "TACO_lite/1128", "input_output_examples": [[[[5, 4, 2, 3]], [[12, 6, 10, 26, 3, 24]], [[9, 2, 8, 7, 5, 4, 0, 6]]], [[22], [342], [74]]]}
{"requirement": "def blocks(s):\"\"\"\n## Task\n\nYou will receive a string consisting of lowercase letters, uppercase letters and digits as input. Your task is to return this string as blocks separated by dashes (`\"-\"`). The elements of a block should be sorted with respect to the hierarchy listed below, and each block cannot contain multiple instances of the same character. Elements should be put into the first suitable block.\n\nThe hierarchy is:\n1. lowercase letters (`a - z`), in alphabetical order\n2. uppercase letters (`A - Z`), in alphabetical order\n3. digits (`0 - 9`), in ascending order\n\nGood luck!\n\"\"\"", "inputs": [["heyitssampletestkk"], ["dasf6ds65f45df65gdf651vdf5s1d6g5f65vqweAQWIDKsdds"], ["SDF45648374RHF8BFVYg378rg3784rf87g3278bdqG"], [""], ["aaaaaaaaaa"]], "outputs": [["aehiklmpsty-ekst-est"], ["adefgqsvwADIKQW1456-dfgsv156-dfs56-dfs56-dfs56-df56-d5-d"], ["bdfgqrBDFGHRSVY2345678-grF3478-gF3478-3478-78-8"], [""], ["a-a-a-a-a-a-a-a-a-a"]], "starter_code": "def blocks(s):", "canonical_solution": "from collections import Counter\n\ndef blocks(s):\n    sort = lambda c: (c.isdigit(), c.isupper(), c)\n    answer, counter = ([], Counter(s))\n    while counter:\n        block = ''.join(sorted(counter, key=sort))\n        answer.append(block)\n        counter = counter - Counter(block)\n    return '-'.join(answer)", "entry_point": "blocks", "task_id": "TACO_lite/1131", "input_output_examples": [[[15], [193150]], [[0], [5]]]}
{"requirement": "def pattern(n):\"\"\"\n### Task:\n\nYou have to write a function `pattern` which returns the following Pattern upto (2n-1) rows, where n is parameter.\n\n* Note:`Returning` the pattern is not the same as `Printing` the pattern.\n\n#### Parameters:\n    \n    pattern(        n        );\n                    ^                     \n                    |                     \n             Term upto which   \n           Basic Pattern(this)     \n                should be         \n                 created            \n\n#### Rules/Note:\n* If `n < 1` then it should return \"\" i.e. empty string.\n* `The length of each line is same`, and is equal to the length of longest line in the pattern i.e (2n-1).\n* Range of Parameters (for the sake of CW Compiler) :\n  + `n ∈ (-∞,100]`\n\n[List of all my katas](\"http://www.codewars.com/users/curious_db97/authored\")\n\"\"\"", "inputs": [[3], [15], [-3], [-25], [0]], "outputs": [["1   1\n 2 2 \n  3  \n 2 2 \n1   1"], ["1                           1\n 2                         2 \n  3                       3  \n   4                     4   \n    5                   5    \n     6                 6     \n      7               7      \n       8             8       \n        9           9        \n         0         0         \n          1       1          \n           2     2           \n            3   3            \n             4 4             \n              5              \n             4 4             \n            3   3            \n           2     2           \n          1       1          \n         0         0         \n        9           9        \n       8             8       \n      7               7      \n     6                 6     \n    5                   5    \n   4                     4   \n  3                       3  \n 2                         2 \n1                           1"], [""], [""], [""]], "starter_code": "def pattern(n):", "canonical_solution": "def pattern(n):\n    res = []\n    for i in range(1, n + 1):\n        line = ' ' * (i - 1) + str(i % 10) + ' ' * (n - i)\n        res.append(line + line[::-1][1:])\n    return '\\n'.join(res + res[::-1][1:])", "entry_point": "pattern", "task_id": "TACO_lite/1133", "input_output_examples": [[["09:10:01"], ["11:70:10"], ["19:99:99"], ["24:01:01"], [null]], [["09:10:01"], ["12:10:10"], ["20:40:39"], ["00:01:01"], [null]]]}
{"requirement": "def fish(shoal):\"\"\"# Introduction\n\n\nFish are an integral part of any ecosystem. Unfortunately, fish are often seen as high maintenance. Contrary to popular belief, fish actually reduce pond maintenance as they graze on string algae and bottom feed from the pond floor. They also make very enjoyable pets, providing hours of natural entertainment.\n\n\n\n# Task\n\n\nIn this Kata you are fish in a pond that needs to survive by eating other fish. You can only eat fish that are the same size or smaller than yourself. \nYou must create a function called fish that takes a shoal of fish as an input string. From this you must work out how many fish you can eat and ultimately the size you will grow to.\n\n\n# Rules\n\n1.  Your size starts at 1\n\n2.  The shoal string will contain fish integers between 0-9\n\n3.  0 = algae and wont help you feed.\n\n4.  The fish integer represents the size of the fish (1-9).\n\n5.  You can only eat fish the same size or less than yourself.\n\n6.  You can eat the fish in any order you choose to maximize your size.\n\n7.  You can and only eat each fish once.\n\n8.  The bigger fish you eat, the faster you grow. A size 2 fish equals two size 1 fish, size 3 fish equals three size 1 fish, and so on.\n\n9.  Your size increments by one each time you reach the amounts below.\n\n\n# Increase your size\nYour size will increase depending how many fish you eat and on the size of the fish.\nThis chart shows the amount of size 1 fish you have to eat in order to increase your size.\n\n\n\n\nCurrent size\nAmount extra needed for next size\nTotal size 1 fish\nIncrease to size\n\n\n1\n4\n4\n2\n\n\n2\n8\n12\n3\n\n\n3\n12\n24\n4\n\n\n4\n16\n40\n5\n\n\n5\n20\n60\n6\n\n\n6\n24\n84\n7\n\n\nPlease note: The chart represents fish of size 1\n\n# Returns\n\nReturn an integer of the maximum size you could be.\n\n\nGood luck and enjoy!\n\n# Kata Series\nIf you enjoyed this, then please try one of my other Katas. Any feedback, translations and grading of beta Katas are greatly appreciated. Thank you.\n\n Maze Runner\n Scooby Doo Puzzle\n Driving License\n Connect 4\n Vending Machine\n Snakes and Ladders\n Mastermind\n Guess Who?\n Am I safe to drive?\n Mexican Wave\n Pigs in a Pen\n Hungry Hippos\n Plenty of Fish in the Pond\n Fruit Machine\n Car Park Escape\n\"\"\"", "inputs": [[""], ["0"], ["6"], ["1111"], ["11112222"], ["111122223333"], ["111111111111"], ["111111111111111111112222222222"], ["151128241212192113722321331"]], "outputs": [[1], [1], [1], [2], [3], [4], [3], [5], [5]], "starter_code": "def fish(shoal):", "canonical_solution": "def fish(shoal):\n    eaten, size, target = (0, 1, 4)\n    for f in sorted(map(int, shoal)):\n        if f > size:\n            break\n        eaten += f\n        if eaten >= target:\n            size += 1\n            target += 4 * size\n    return size", "entry_point": "fish", "task_id": "TACO_lite/1134", "input_output_examples": [[[1]], [[[1]]]]}
{"requirement": "def chinese_zodiac(year):\"\"\"\nThe [Chinese zodiac](https://en.wikipedia.org/wiki/Chinese_zodiac) is a repeating cycle of 12 years, with each year being represented by an animal and its reputed attributes. The lunar calendar is divided into cycles of 60 years each, and each year has a combination of an animal and an element. There are 12 animals and 5 elements; the animals change each year, and the elements change every 2 years. The current cycle was initiated in the year of 1984 which was the year of the Wood Rat.\n\nSince the current calendar is Gregorian, I will only be using years from the epoch 1924.\n*For simplicity I am counting the year as a whole year and not from January/February to the end of the year.*\n\n##Task\n\nGiven a year, return the element and animal that year represents (\"Element Animal\").\n\n\n```animals``` (or ```$animals``` in Ruby) is a preloaded array containing the animals in order:\n\n```['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig']```\n\n\n```elements``` (or ```$elements``` in Ruby) is a preloaded array containing the elements in order:\n\n\n```['Wood', 'Fire', 'Earth', 'Metal', 'Water']```\n\nTell me your zodiac sign and element in the comments. Happy coding :)\n\"\"\"", "inputs": [[1965], [1938], [1998], [2016], [1924], [1968], [2162], [6479], [3050], [6673], [6594], [9911], [2323], [3448], [1972]], "outputs": [["Wood Snake"], ["Earth Tiger"], ["Earth Tiger"], ["Fire Monkey"], ["Wood Rat"], ["Earth Monkey"], ["Water Dog"], ["Earth Goat"], ["Metal Dog"], ["Water Rooster"], ["Wood Tiger"], ["Metal Goat"], ["Water Rabbit"], ["Earth Rat"], ["Water Rat"]], "starter_code": "def chinese_zodiac(year):", "canonical_solution": "animals = ['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig']\nelements = ['Wood', 'Fire', 'Earth', 'Metal', 'Water']\n\ndef chinese_zodiac(year):\n    year -= 1984\n    return elements[year // 2 % 5] + ' ' + animals[year % 12]", "entry_point": "chinese_zodiac", "task_id": "TACO_lite/1137", "input_output_examples": [[["Chicago"], ["Bangkok"], ["Las Vegas"]], [["c:**,h:*,i:*,a:*,g:*,o:*"], ["b:*,a:*,n:*,g:*,k:**,o:*"], ["l:*,a:**,s:**,v:*,e:*,g:*"]]]}
{"requirement": "def make_readable(s):\"\"\"\nWrite a function, which takes a non-negative integer (seconds) as input and returns the time in a human-readable format (`HH:MM:SS`)\n\n* `HH` = hours, padded to 2 digits, range: 00 - 99\n* `MM` = minutes, padded to 2 digits, range: 00 - 59\n* `SS` = seconds, padded to 2 digits, range: 00 - 59\n\nThe maximum time never exceeds 359999 (`99:59:59`)\n\"\"\"", "inputs": [[0], [59], [60], [3599], [3600], [86399], [86400], [359999]], "outputs": [["00:00:00"], ["00:00:59"], ["00:01:00"], ["00:59:59"], ["01:00:00"], ["23:59:59"], ["24:00:00"], ["99:59:59"]], "starter_code": "def make_readable(s):", "canonical_solution": "def make_readable(s):\n    return '{:02}:{:02}:{:02}'.format(s // 3600, s // 60 % 60, s % 60)", "entry_point": "make_readable", "task_id": "TACO_lite/1141", "input_output_examples": [[[18], [60], [54], [37], [61]], [[3, [2, 3, 3]], [10, [2, 2, 3, 5]], [6, [2, 3, 3, 3]], [0, []], [0, []]]]}
{"requirement": "def compare(a, b):\"\"\"\nCascading Style Sheets (CSS) is a style sheet language used for describing the look and formatting of a document written in a markup language. A style sheet consists of a list of rules. Each rule or rule-set consists of one or more selectors, and a declaration block. Selector describes which element it matches.\n\nSometimes element is matched to multiple selectors. In this case, element inherits multiple styles, from each rule it matches. Rules can override each other. To solve this problem, each selector has it's own 'specificity' - e.g. weight. The selector with greater specificity overrides the other selector.\n\nYour task is to calculate the weights of two selectors and determine which of them will beat the other one.\n\nFor simplicity, all selectors in test cases are CSS1-compatible, test cases don't include pseudoclasses, pseudoelements, attribute selectors, etc. Below is an explanation on how to weight two selectors. You can read more about specificity here.\n\nThe simplest selector type is ``tagname`` selector. It writes as a simple alphanumeric identifier: eg ``body``, ``div``, ``h1``, etc. It has the least weight. If selectors have multiple elements - the selector with more elements win.\n\nAnother simple selector is ``.class`` selector. It begins with dot and refer to element with specific ``class`` attribute. Class selectors can also be applied to tagname selectors, so ``div.red`` refer to ```` element. They can be grouped. Class selector beats tagname selector.\n\nThe most weighted selector type in stylesheet is ``#id`` selector. It begins with hash sign and refer to element with specific ``id`` attribute. It can also be standalone, or applied to an element. Id selector beats both selector types.\n\nAnd the least weighted selector is ``*``, which has no specificity and can be beat by any other selector.\n\nSelectors can be combined, for example, ``body #menu ul li.active`` refers to ``li`` element with ``class=\"active\"``, placed inside ``ul`` element, placed inside element width ``id=\"menu\"``, placed inside ``body``.\n\nSpecificity calculation is simple. \n\nSelector with more #id selectors wins\nIf both are same, the winner is selector with more .class selectors\nIf both are same, selector with more elements wins\nIf all of above values are same, the winner is selector that appear last\n\"\"\"", "inputs": [["body p", "div"], ["body", "html"], ["p a", "span"], ["div p span a", "div p span a b"], ["strong", "p b"], [".first", ".last"], [".foo.bar", ".x .y"], [".x .y", ".foo.bar"], [".red.apple", ".red"], [".test1 .test2.test3", ".test1 .test4 .test5 .test6"], [".box.box-first", ".box"], ["#header", "#footer"], ["#header #menu", "#menu"], [".red", "div"], ["apple", "#SteveJobs"], [".item", "div ul li a"], ["div.article", "div b.blue"], [".item", "#menu div ul li a"], ["p", "*"]], "outputs": [["body p"], ["html"], ["p a"], ["div p span a b"], ["p b"], [".last"], [".x .y"], [".foo.bar"], [".red.apple"], [".test1 .test4 .test5 .test6"], [".box.box-first"], ["#footer"], ["#header #menu"], [".red"], ["#SteveJobs"], [".item"], ["div b.blue"], ["#menu div ul li a"], ["p"]], "starter_code": "def compare(a, b):", "canonical_solution": "import re\n\ndef compare(a, b):\n    return a if specificity(a) > specificity(b) else b\n\ndef specificity(s):\n    return [len(re.findall(r, s)) for r in ('#\\\\w+', '\\\\.\\\\w+', '(^| )\\\\w+')]", "entry_point": "compare", "task_id": "TACO_lite/1142", "input_output_examples": [[[2, 3], [3, 2]], [[5], [2]]]}
{"requirement": "def convert_temp(temp, from_scale, to_scale):\"\"\"\nWrite a function ```convert_temp(temp, from_scale, to_scale)``` converting temperature from one scale to another. \nReturn converted temp value. \n\nRound converted temp value to an integer(!).\n\nReading: http://en.wikipedia.org/wiki/Conversion_of_units_of_temperature\n\n```\npossible scale inputs:\n    \"C\"  for Celsius\n    \"F\"  for Fahrenheit\n    \"K\"  for Kelvin\n    \"R\"  for Rankine\n    \"De\" for Delisle\n    \"N\"  for Newton\n    \"Re\" for Réaumur\n    \"Ro\" for Rømer\n```\n\n```temp``` is a number, ```from_scale``` and ```to_scale``` are strings.\n\"\"\"", "inputs": [[100, "C", "F"], [-30, "De", "K"], [40, "Re", "C"], [60, "De", "F"], [373.15, "K", "N"], [666, "K", "K"], [60, "C", "F"], [60, "De", "C"], [128.25, "Ro", "C"], [-273.15, "C", "R"], [0, "K", "R"]], "outputs": [[212], [393], [50], [140], [33], [666], [140], [60], [230], [0], [0]], "starter_code": "def convert_temp(temp, from_scale, to_scale):", "canonical_solution": "TO_KELVIN = {'C': (1, 273.15), 'F': (5.0 / 9, 459.67 * 5.0 / 9), 'R': (5.0 / 9, 0), 'De': (-2.0 / 3, 373.15), 'N': (100.0 / 33, 273.15), 'Re': (5.0 / 4, 273.15), 'Ro': (40.0 / 21, -7.5 * 40 / 21 + 273.15)}\n\ndef convert_temp(temp, from_scale, to_scale):\n    if from_scale == to_scale:\n        return temp\n    if from_scale != 'K':\n        a, b = TO_KELVIN[from_scale]\n        temp = a * temp + b\n        if to_scale == 'K':\n            return int(round(temp))\n    a, b = TO_KELVIN[to_scale]\n    return int(round((temp - b) / a))", "entry_point": "convert_temp", "task_id": "TACO_lite/1144", "input_output_examples": [[["F4LF4RF4RF4LF4LF4RF4RF4LF4LF4RF4RF4"], ["LF5(RF3)(RF3R)F7"], ["F4L((F4R)2(F4L)2)2(F4R)2F4"]], [["F4L(F4RF4RF4LF4L)2F4RF4RF4"], ["    ****\r\n    *  *\r\n    *  *\r\n********\r\n    *   \r\n    *   "], ["F4L(F4RF4RF4LF4L)2F4RF4RF4"]]]}
{"requirement": "def reflections(n, m):\"\"\"\n## **Task**\n\nFour mirrors are placed in a way that they form a rectangle with corners at coordinates `(0, 0)`, `(max_x, 0)`, `(0, max_y)`, and `(max_x, max_y)`. A light ray enters this rectangle through a hole at the position `(0, 0)` and moves at an angle of 45 degrees relative to the axes. Each time it hits one of the mirrors, it gets reflected. In the end, the light ray hits one of the rectangle's corners, and flies out. Your function must determine whether the exit point is either `(0, 0)` or `(max_x, max_y)`. If it is either `(0, 0)` or `(max_x, max_y)`, return `True` and `False` otherwise.\n\nAlso, once completing this kata, please do not rate it based off of the difficulty level(kyu) and instead on whether you think it is a good kata.\n\"\"\"", "inputs": [[10, 10], [10, 20], [12, 23], [5, 25]], "outputs": [[true], [false], [false], [true]], "starter_code": "def reflections(n, m):", "canonical_solution": "def reflections(n, m):\n    x = y = 0\n    dx = dy = 1\n    while 1:\n        x += dx\n        y += dy\n        if x == y == 0 or (x == n and y == m):\n            return 1\n        if 0 in (x, y) and (x == n or y == m):\n            return 0\n        if x in (0, n):\n            dx *= -1\n        if y in (0, m):\n            dy *= -1", "entry_point": "reflections", "task_id": "TACO_lite/1147", "input_output_examples": [[[[[3, 7], [2, 2], [14, 1]], [{"id": 1, "x": 3, "y": 4}, {"id": 2, "x": 8, "y": 2}]]], [["The best location is number 1 with the coordinates x = 3 and y = 4"]]]}
{"requirement": "def keep_order(ary, val):\n\t\"\"\"\nYour job here is to write a function (`keepOrder` in JS/CoffeeScript, `keep_order` in Ruby/Crystal/Python, `keeporder` in Julia), which takes a sorted array `ary` and a value `val`, and returns the lowest index where you could insert `val` to maintain the sorted-ness of the array. The input array will always be sorted in ascending order. It may contain duplicates.\n\n_Do not modify the input._\n\"\"\"", "inputs": [[[1, 2, 3, 4, 7], 5], [[1, 2, 3, 4, 7], 0], [[1, 1, 2, 2, 2], 2], [[1, 2, 3, 4], 5], [[1, 2, 3, 4], -1], [[1, 2, 3, 4], 2], [[1, 2, 3, 4], 0], [[1, 2, 3, 4], 1], [[1, 2, 3, 4], 3], [[], 1], [[], 0], [[1, 1, 1, 1], 2], [[1, 1, 1, 1], 1], [[1, 1, 1, 1], 0], [[1, 3, 5, 6], 0], [[1, 3, 5, 6], 2], [[1, 2, 3, 4], -2], [[1, 2, 3, 4], -3]], "outputs": [[4], [0], [2], [4], [0], [1], [0], [0], [2], [0], [0], [4], [0], [0], [0], [1], [0], [0]], "starter_code": "def keep_order(ary, val):\n\t", "canonical_solution": "from bisect import bisect_left as keep_order", "entry_point": "keep_order", "task_id": "TACO_lite/1148", "input_output_examples": [[["1plus2plus3plus4"], ["1plus2plus3minus4"]], [["10"], ["2"]]]}
{"requirement": "def sort_emotions(arr, order):\"\"\"\n## Emotional Sort ( 📐＾▽＾ bied )\n\nYou'll have a function called \"**sortEmotions**\" that will return an array of **emotions** sorted. It has two parameters, the first parameter called \"**arr**\" will expect an array of **emotions** where an **emotion** will be one of the following:\n\n- **:D** -> Super Happy\n- **:)** -> Happy\n- **:|** -> Normal\n- **:(** -> Sad\n- **T\\_T** -> Super Sad\n\nAnd the second parameter is called \"**order**\", if this parameter is **true** then the order of the emotions will be descending (from **Super Happy** to **Super Sad**) if it's **false** then it will be ascending (from **Super Sad** to **Super Happy**)\n\n- Super Happy -> Happy -> Normal -> Sad -> Super Sad\n\n- Super Sad -> Sad -> Normal -> Happy -> Super Happy\n\nNotes:\n- The array could be empty, in that case return the same empty array ¯\\\\\\_( ツ )\\_/¯\n- All **emotions** will be valid\n\n## Enjoy! (づ｡◕‿‿📐｡)づ\n\"\"\"", "inputs": [[[":D", "T_T", ":D", ":("], true], [["T_T", ":D", ":(", ":("], true], [[":)", "T_T", ":)", ":D", ":D"], true], [[":D", "T_T", ":D", ":("], false], [["T_T", ":D", ":(", ":("], false], [[":)", "T_T", ":)", ":D", ":D"], false], [[], false], [[], true]], "outputs": [[[":D", ":D", ":(", "T_T"]], [[":D", ":(", ":(", "T_T"]], [[":D", ":D", ":)", ":)", "T_T"]], [["T_T", ":(", ":D", ":D"]], [["T_T", ":(", ":(", ":D"]], [["T_T", ":)", ":)", ":D", ":D"]], [[]], [[]]], "starter_code": "def sort_emotions(arr, order):", "canonical_solution": "def sort_emotions(arr, order):\n    return sorted(arr, key=[':D', ':)', ':|', ':(', 'T_T'].index, reverse=not order)", "entry_point": "sort_emotions", "task_id": "TACO_lite/1150", "input_output_examples": [[[100, 3], [36, 2], [72, 4]], [[10], [1], [18]]]}
{"requirement": "def get_column_title(n):\"\"\"\nHi there! \nYou have to implement the \n\n`String get_column_title(int num) // syntax depends on programming language`\n\nfunction that takes an integer number (index of the Excel column) and returns the string represents the title of this column.\n\n#Intro\nIn the MS Excel lines are numbered by decimals, columns - by sets of letters.\n\n\nExcel? Columns? More details [here](https://en.wikipedia.org/wiki/Microsoft_Excel)\n\n#Input\nIt takes only one argument - column decimal index number.\nArgument `num` is a natural number.\n\n#Output\nOutput is the upper-case string represents the title of column. It contains the English letters: A..Z\n\n#Errors\nFor cases `num < 1` your function should throw/raise `IndexError`. In case of non-integer argument you should throw/raise `TypeError`.\n\nIn Java, you should throw `Exceptions`.\n\nNothing should be returned in Haskell.\n\n#Hint\nThe difference between the 26-digits notation and Excel columns numeration that in the first system, after \"Z\" there are \"BA\", \"BB\", ..., while in the Excel columns scale there is a range of 26 elements: AA, AB, ... , AZ between Z and BA. \n\nIt is as if in the decimal notation was the following order: 0, 1, 2, .., 9, 00, 01, 02, .., 09, 10, 11, .., 19, 20..29..99, 000, 001 and so on.\n\n#Also\nThe task is really sapid and hard. If you're stuck - write to the discussion board, there are many smart people willing to help.\n\"\"\"", "inputs": [[1], [26], [52], [53], [702]], "outputs": [["A"], ["Z"], ["AZ"], ["BA"], ["ZZ"]], "starter_code": "def get_column_title(n):", "canonical_solution": "from string import ascii_uppercase as u\n\ndef get_column_title(n):\n    assert isinstance(n, int) and n > 0\n    col = []\n    while n:\n        n, r = divmod(n - 1, 26)\n        col.append(u[r])\n    return ''.join(reversed(col))", "entry_point": "get_column_title", "task_id": "TACO_lite/1152", "input_output_examples": [[["Albert Einstein, !Sarah Connor, Marilyn Monroe, Abraham Lincoln, Sarah Connor, Sean Connery, Marilyn Monroe, Bjarne Stroustrup, Manson Marilyn, Monroe Mary"]], [["Albert Einstein, Abraham Lincoln, Sean Connery, Bjarne Stroustrup, Manson Marilyn, Monroe Mary"]]]}
{"requirement": "def total_primes(a, b):\"\"\"*This is the advanced version of the [Total Primes](https://www.codewars.com/kata/total-primes/) kata.*\n\n---\n\nThe number `23` is the smallest prime that can be \"cut\" into **multiple** primes: `2, 3`. Another such prime is `6173`, which can be cut into `61, 73` or `617, 3` or `61, 7, 3` (all primes). A third one is `557` which can be sliced into `5, 5, 7`. Let's call these numbers **total primes**.\n\nNotes:\n* one-digit primes are excluded by definition;\n* leading zeros are also excluded: e.g. splitting `307` into `3, 07` is **not** valid\n\n\n## Task\n\nComplete the function that takes a range `[a..b]` (both limits included) and returns the total primes within that range (`a ≤ total primes ≤ b`).\n\nThe tests go up to 10^(6).\n~~~if:python\nFor your convenience, a list of primes up to 10^(6) is preloaded, called `PRIMES`.\n~~~\n\nHappy coding!\n\n---\n\n## My other katas\n\nIf you enjoyed this kata then please try [my other katas](https://www.codewars.com/collections/katas-created-by-anter69)! :-)\n\n#### *Translations are welcome!*\n\"\"\"", "inputs": [[10, 100], [500, 600], [23, 37], [0, 20], [113, 197], [199, 299], [1, 2273], [11703, 13330], [312232, 312311], [967335, 967871]], "outputs": [[[23, 37, 53, 73]], [[523, 541, 547, 557, 571, 577, 593]], [[23, 37]], [[]], [[113, 137, 173, 193, 197]], [[211, 223, 227, 229, 233, 241, 257, 271, 277, 283, 293]], [[23, 37, 53, 73, 113, 137, 173, 193, 197, 211, 223, 227, 229, 233, 241, 257, 271, 277, 283, 293, 311, 313, 317, 331, 337, 347, 353, 359, 367, 373, 379, 383, 389, 397, 433, 523, 541, 547, 557, 571, 577, 593, 613, 617, 673, 677, 719, 727, 733, 743, 757, 761, 773, 797, 977, 1013, 1033, 1093, 1097, 1117, 1123, 1129, 1153, 1171, 1277, 1319, 1327, 1361, 1367, 1373, 1493, 1637, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1789, 1913, 1931, 1933, 1973, 1979, 1993, 1997, 2113, 2131, 2137, 2179, 2213, 2237, 2239, 2243, 2251, 2267, 2269, 2273]], [[11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11813, 11821, 11827, 11833, 11839, 11863, 11887, 11897, 11933, 11941, 11953, 11971, 12373, 12377, 12497, 12713, 12743, 12757, 12893, 12917, 12973, 13033, 13037, 13103, 13109, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13217, 13219, 13229, 13241, 13259, 13267, 13297, 13313, 13327]], [[312233, 312241, 312251, 312253, 312269, 312281, 312283, 312289, 312311]], [[967349, 967361, 967397, 967493, 967511, 967529, 967567, 967583, 967607, 967693, 967709, 967739, 967751, 967753, 967787, 967823, 967859]]], "starter_code": "def total_primes(a, b):", "canonical_solution": "import numpy as np\nfrom itertools import accumulate\n\ndef sieve_primes(n):\n    sieve = np.ones(n // 2, dtype=np.bool)\n    limit = 1 + int(n ** 0.5)\n    for a in range(3, limit, 2):\n        if sieve[a // 2]:\n            sieve[a * a // 2::a] = False\n    prime_indexes = 2 * np.nonzero(sieve)[0].astype(int) + 1\n    prime_indexes[0] = 2\n    return set(map(str, prime_indexes))\nprimes = sieve_primes(10 ** 6)\n\ndef all_primes(s):\n    if int(s) < 10:\n        return s in primes\n    for n in accumulate(s[:-1]):\n        if n in primes:\n            m = s[len(n):]\n            if m in primes or all_primes(m):\n                return True\n\ndef total_primes(a, b):\n    return [int(a) for a in map(str, range(max(10, a), b + 1)) if a in primes and all_primes(a)]", "entry_point": "total_primes", "task_id": "TACO_lite/1156", "input_output_examples": [[[[], ["Philadelphia", "Osaka", "Tokyo", "Melbourne"]]], [["Philadelphia"]]]}
{"requirement": "def fouriest(i):\"\"\"# Fourier transformations are hard. Fouriest transformations are harder.\n\nThis Kata is based on the SMBC Comic on fourier transformations.\n\nA fourier transformation on a number is one that converts the number to a base in which it has more `4`s ( `10` in base `6` is `14`, which has `1` four as opposed to none, hence, fourier in base `6` ).\n\nA number's fouriest transformation converts it to the base in which it has the most `4`s.  \n\nThis kata requires you to create a method `fouriest` that takes a number and makes it the fouriest, telling us in which base this happened, as follows:\n\n```python\nfouriest(number) -> \"{number} is the fouriest ({fouriest_representation}) in base {base}\"\n```\n\n## Important notes\n\n* For this kata we don't care about digits greater than `9` ( only `0` to `9` ), so we will represent all digits greater than `9` as `'x'`: `10` in base `11` is `'x'`, `119` in base `20` is `'5x'`, `118` in base `20` is also `'5x'`\n\n* When a number has several fouriest representations, we want the one with the LOWEST base\n\n```if:haskell,javascript\n* Numbers below `9` will not be tested\n```\n\n```if:javascript\n* A `BigNumber` library has been provided; documentation is [here](https://mikemcl.github.io/bignumber.js/)\n```\n\"\"\"", "inputs": [[30], [15], [9999], [35353], [100], [1000000243], [142042158218941532125212890], [2679388715912901287113185885289513476], [640614569414659959863091616350016384446719891887887380], [2579111107964987025047536361483312385374008248282655401675211033926782006920415224913494809688581314878892733564]], "outputs": [["30 is the fouriest (42) in base 7"], ["15 is the fouriest (14) in base 11"], ["9999 is the fouriest (304444) in base 5"], ["35353 is the fouriest (431401) in base 6"], ["100 is the fouriest (244) in base 6"], ["1000000243 is the fouriest (24x44) in base 149"], ["142042158218941532125212890 is the fouriest (14340031300334233041101030243023303030) in base 5"], ["2679388715912901287113185885289513476 is the fouriest (444444444444444444) in base 128"], ["640614569414659959863091616350016384446719891887887380 is the fouriest (44444444444444444444444444444444) in base 52"], ["2579111107964987025047536361483312385374008248282655401675211033926782006920415224913494809688581314878892733564 is the fouriest (4444444444444444444444444444444444444444444444) in base 290"]], "starter_code": "def fouriest(i):", "canonical_solution": "def transform(num, base):\n    digits = []\n    while num > 0:\n        num, remainder = divmod(num, base)\n        digits.append(remainder if remainder < 10 else 'x')\n    return digits\n\ndef fouriest(i):\n    max_fours, base, best = (0, 5, [None, None])\n    while i >= base ** max_fours:\n        digits = transform(i, base)\n        if digits.count(4) > max_fours:\n            max_fours = digits.count(4)\n            best = (base, ''.join(map(str, digits[::-1])))\n        base += 1\n    base, transformed = best\n    return '%s is the fouriest (%s) in base %s' % (i, transformed, base)", "entry_point": "fouriest", "task_id": "TACO_lite/1159", "input_output_examples": [[[1]], [[{"total": 9, "gold": 9, "diamond": 0, "emerald": 0, "iron": 0}]]]}
{"requirement": "def present(x,y):\n\t\"\"\"\nYour colleagues have been good enough(?) to buy you a birthday gift. Even though it is your birthday and not theirs, they have decided to play pass the parcel with it so that everyone has an even chance of winning. There are multiple presents, and you will receive one, but not all are nice... One even explodes and covers you in soil... strange office. To make up for this one present is a dog! Happy days! (do not buy dogs as presents, and if you do, never wrap them).\n\nDepending on the number of passes in the game (y), and the present you unwrap (x), return as follows:\n\nx == goodpresent --> return x with num of passes added to each charCode (turn to charCode, add y to each, turn back)\nx == crap || x == empty --> return string sorted alphabetically\nx == bang --> return string turned to char codes, each code reduced by number of passes and summed to a single figure\nx == badpresent --> return 'Take this back!'\nx == dog, return 'pass out from excitement y times' (where y is the value given for y).\n\"\"\"", "inputs": [["badpresent", 3], ["goodpresent", 9], ["crap", 10], ["bang", 27], ["dog", 23]], "outputs": [["Take this back!"], ["pxxmy{n|nw}"], ["acpr"], ["300"], ["pass out from excitement 23 times"]], "starter_code": "def present(x,y):\n\t", "canonical_solution": "_RESULTS = {'goodpresent': lambda y: ''.join((chr(ord(c) + y) for c in 'goodpresent')), 'crap': lambda y: 'acpr', 'empty': lambda y: 'empty', 'bang': lambda y: str(sum((ord(c) - y for c in 'bang'))), 'badpresent': lambda y: 'Take this back!', 'dog': lambda y: 'pass out from excitement {} times'.format(y)}\npresent = lambda x, y: _RESULTS[x](y)", "entry_point": "present", "task_id": "TACO_lite/1161", "input_output_examples": [[["Hello World"], ["Hi There."], ["I am an expert at this"]], [["World Hello"], ["There. Hi"], ["this at expert an am I"]]]}
{"requirement": "def to_lover_case(string):\"\"\"\n### Task\n\nYes, your eyes are no problem, this is toLoverCase (), not toLowerCase (), we want to make the world full of love.\n    \n### What do we need to do?\n    \nYou need to add a prototype function to the String, the name is toLoverCase. Function can convert the letters in the string, converted to \"L\", \"O\", \"V\", \"E\", if not the letter, don't change it.\n\n### Series:\n - [Bug in Apple](http://www.codewars.com/kata/56fe97b3cc08ca00e4000dc9)\n - [Father and Son](http://www.codewars.com/kata/56fe9a0c11086cd842000008)\n - [Jumping Dutch act](http://www.codewars.com/kata/5700443187a36a9cee0005a1)\n - [Planting Trees](http://www.codewars.com/kata/5710443187a36a9cee0005a1)\n - [Give me the equation](http://www.codewars.com/kata/56fe9b65cc08cafbc5000de3)\n - [Find the murderer](http://www.codewars.com/kata/570f3fc5b29c702c5500043e)\n - [Reading a Book](http://www.codewars.com/kata/570ca6a520c69f39dd000742)\n - [Eat watermelon](http://www.codewars.com/kata/570df12ce6e9282a7d000947)\n - [Special factor](http://www.codewars.com/kata/570e5d0b93214b1a950015b1)\n - [Guess the Hat](http://www.codewars.com/kata/5705cc3161944b10fd00035b)\n - [Symmetric Sort](http://www.codewars.com/kata/5705aeb041e5befba20010ba)\n - [Are they symmetrical?](http://www.codewars.com/kata/5705cc3161944b10fd00035b)\n - [Max Value](http://www.codewars.com/kata/570e5d0b93214b1a950015b1)\n - [Trypophobia](http://www.codewars.com/kata/56fe9ffbc25bf33fff000f7c)\n - [Virus in Apple](http://www.codewars.com/kata/5700af83d1acef8281000048)\n - [Balance Attraction](http://www.codewars.com/kata/57033601e55d30d3e0000633)\n - [Remove screws I](http://www.codewars.com/kata/5710a50d336aed828100055a)\n - [Remove screws II](http://www.codewars.com/kata/5710a8fd336aed00d9000594)\n - [Regular expression compression](http://www.codewars.com/kata/5703ace6e55d30d3e0000633)\n - [Collatz Array(Split or merge)](http://www.codewars.com/kata/56fe9d579b7bb6b027000001)\n - [Tidy up the room](http://www.codewars.com/kata/5703ace6e55d30d3e0000633)\n - [Waiting for a Bus](http://www.codewars.com/kata/57070eff924f343280000015)\n\"\"\"", "inputs": [["LOVE"], ["love"], ["abcd"], ["ebcd"], ["Hello World!"], ["jrvz,"]], "outputs": [["EVOL"], ["EVOL"], ["LOVE"], ["LOVE"], ["ELEEV VVOEE!"], ["OOOO,"]], "starter_code": "def to_lover_case(string):", "canonical_solution": "def to_lover_case(string):\n    return ''.join(('LOVE'[(ord(c) - 97) % 4] if c.isalpha() else c for c in string))", "entry_point": "to_lover_case", "task_id": "TACO_lite/1162", "input_output_examples": [[[-12, 2, -6], [-12, 2, -5], [45, 1, 6], [45, 5, 15], [4, 1, 4], [15, -5, 3]], [[true], [false], [false], [true], [true], [true]]]}
{"requirement": "def no_ifs_no_buts(a, b):\"\"\"\nWrite a function that accepts two parameters (a and b) and says whether a is smaller than, bigger than, or equal to b.\n\nThere's only one problem...\n\nYou can't use if statements, and you can't use shorthands like (a < b)?true:false;\n\nin fact the word \"if\" and the character \"?\" are not allowed in the code. \n\n\nInputs are guarenteed to be numbers\n\nYou are always welcome to check out some of my other katas:\n\nVery Easy (Kyu 8)\nAdd Numbers\nEasy (Kyu 7-6)\nConvert Color image to greyscale\nArray Transformations\nBasic Compression\nFind Primes in Range\nNo Ifs No Buts\nMedium (Kyu 5-4)\nIdentify Frames In An Image\nPhotoshop Like - Magic Wand\nScientific Notation\nVending Machine - FSA\nFind Matching Parenthesis\nHard (Kyu 3-2)\nAscii Art Generator\n\"\"\"", "inputs": [[45, 51], [1, 2], [-3, 2], [1, 1], [100, 100], [100, 80], [20, 19]], "outputs": [["45 is smaller than 51"], ["1 is smaller than 2"], ["-3 is smaller than 2"], ["1 is equal to 1"], ["100 is equal to 100"], ["100 is greater than 80"], ["20 is greater than 19"]], "starter_code": "def no_ifs_no_buts(a, b):", "canonical_solution": "def no_ifs_no_buts(a, b):\n    return {a == b: str(a) + ' is equal to ' + str(b), a < b: str(a) + ' is smaller than ' + str(b), a > b: str(a) + ' is greater than ' + str(b)}[True]", "entry_point": "no_ifs_no_buts", "task_id": "TACO_lite/1165", "input_output_examples": [[[[1, 2, 3], [4, 5, 6]]], [[1.444]]]}
{"requirement": "def jumping(arr, n):\"\"\"\n# Task\n\nYou are a lonely frog. \n\nYou live on an integer array.\n\nThe meaning of your life is to jump and jump..\n\nNow, here comes your new task. \n\nYou are given an integer array `arr` and a positive integer `n`.\n\nYou will jump following the rules below:\n\n- Your initial position at `arr[0]`. arr[0] will always be `0`.\n\n- You will jump according to the number of current position(arr[i])\n  - That is, if the number is a positive integer, let say 3, you will jump forward 3 steps; If the number is a negative integer, let say -3, you will jump backward 3 steps; If the number is 0, you will stay here for a little rest.\n\n- The number of current position(arr[i]) will increase decrease by 1 after each turn (jump or stay).\n  - That is, if the number of current position(arr[i]) is greater than or equal to `n`, the number will decrease 1; if the number at current position(arr[i]) is less than `n`, the number will increase 1.\n\nYou will stop jumping when you reach the exit (your position greater than or equal to arr.length). Please tell me, at the moment, how many elements in `arr` are equal to `n`?\n\n# Note\n\n- `3 <= arr.length <= 1000`, `1 <= n <= 9`\n\n- Frog will never jump backward out of `arr`.\n\"\"\"", "inputs": [[[2, 3, 2, 3, -1], 3], [[4, 4, 3, 3, 0], 4], [[2, 2, 2, 2, -1], 3], [[2, 2, 2, 1, -1], 2], [[0, 0, 0, 0, 0], 1]], "outputs": [[2], [2], [0], [3], [0]], "starter_code": "def jumping(arr, n):", "canonical_solution": "def jumping(arr, n):\n    i = 0\n    while i < len(arr):\n        x = arr[i]\n        arr[i] += 1 if x < n else -1\n        i += x\n    return arr.count(n)", "entry_point": "jumping", "task_id": "TACO_lite/1166", "input_output_examples": [[[80], [5], [65], [95], [45]], [[40], [30], [30], [40], [30]]]}
{"requirement": "def pattern(n):\"\"\"\n###Task:\n\nYou have to write a function **pattern** which returns the following Pattern(See Examples) upto n rows, where n is parameter.\n\n####Rules/Note:\n* If the Argument is 0 or a Negative Integer then it should return \"\" i.e. empty string.\n* The length of each line = (2n-1).\n* Range of n is (-∞,100]\n\"\"\"", "inputs": [[3], [5], [8], [-3], [-11], [-25], [0]], "outputs": [["  123\n 123 \n123  "], ["    12345\n   12345 \n  12345  \n 12345   \n12345    "], ["       12345678\n      12345678 \n     12345678  \n    12345678   \n   12345678    \n  12345678     \n 12345678      \n12345678       "], [""], [""], [""], [""]], "starter_code": "def pattern(n):", "canonical_solution": "def pattern(n):\n    nums = '1234567890'\n    str_nums = nums * (n // 10) + nums[:n % 10]\n    return '\\n'.join((' ' * (n - i - 1) + str_nums + ' ' * i for i in range(n)))", "entry_point": "pattern", "task_id": "TACO_lite/1168", "input_output_examples": [[[25, 1], [125348, 300], [125348981764, 356243]], [[4], [3], [3]]]}
{"requirement": "def mutually_exclusive(dice, call1, call2):\"\"\"\nThe purpose of this series is developing understanding of stastical problems in AS and A level maths. Let's get started with a simple concept in statistics: Mutually exclusive events.\n\nThe probability of an OR event is calculated by the following rule:\n\n`P(A || B) = P(A) + P(B) - P(A && B)`\n\nThe probability of event A or event B happening is equal to the probability of event A plus the probability of event B minus the probability of event A and event B happening simultaneously.\n\nMutually exclusive events are events that cannot happen at the same time. Note that the probability of mutually exclusive events occurring simultaneously is 0.\n\nYour task:\n\nYou are going to have to work out the probability of one roll of a die returning two given outcomes, or rolls. Given that dice rolls are mutually exclusive, you will have to implement the above formula. To make this interesting (this is a coding challenge after all), these dice are not fair and thus the probabilities of receiving each roll is different.\n\nYou will be given a two-dimensional array containing the number each of the results (1-6) of the die and the probability of that roll as well as the two rolls. \n\nGiven the two roll probabilities to calculate, return the probability of a single roll of the die returning either. If the total probability of the six rolls doesn't add up to one, there is a problem with the die; in this case, return null. \nReturn your result as a string to two decimal places.\n\"\"\"", "inputs": [[[[3, 0.4], [4, 0.1], [1, 0.01], [2, 0.09], [5, 0.2], [6, 0.1]], 1, 6], [[[1, 0.1], [2, 0.14], [3, 0.16], [4, 0.2], [5, 0.15], [6, 0.25]], 1, 4], [[[1, 0.6], [2, 0.1001], [3, 0.0999], [4, 0.1], [5, 0.05], [6, 0.05]], 3, 4], [[[6, 0.25], [1, 0.1], [3, 0.16], [2, 0.14], [5, 0.15], [4, 0.2]], 1, 6], [[[3, 0.4], [4, 0.1], [1, 0.01], [2, 0.09], [5, 0.2], [6, 0.2]], 1, 6]], "outputs": [[null], ["0.30"], ["0.20"], ["0.35"], ["0.21"]], "starter_code": "def mutually_exclusive(dice, call1, call2):", "canonical_solution": "def mutually_exclusive(dice, call1, call2):\n    dice = dict(dice)\n    if abs(sum(dice.values()) - 1) < 1e-12:\n        return '%0.2f' % (dice[call1] + dice[call2])", "entry_point": "mutually_exclusive", "task_id": "TACO_lite/1180", "input_output_examples": [[["hello"]], [["HELLO"]]]}
{"requirement": "def fuel_price(litres, price_per_liter):\"\"\"\nIn this kata you will have to write a function that takes `litres` and `price_per_litre` as arguments. Purchases of 2 or more litres get a discount of 5 cents per litre, purchases of 4 or more litres get a discount of 10 cents per litre, and so on every two litres, up to a maximum discount of 25 cents per litre. But total discount per litre cannot be more than 25 cents. Return the toal cost rounded to 2 decimal places. Also you can guess that there will not be negative or non-numeric inputs.\n\nGood Luck!\n\"\"\"", "inputs": [[10, 21.5], [40, 10], [15, 5.83]], "outputs": [[212.5], [390], [83.7]], "starter_code": "def fuel_price(litres, price_per_liter):", "canonical_solution": "def fuel_price(litres, price_per_liter):\n    discount = int(min(litres, 10) / 2) * 5 / 100\n    return round((price_per_liter - discount) * litres, 2)", "entry_point": "fuel_price", "task_id": "TACO_lite/1183", "input_output_examples": [[[5, 5], [12, 4], [1, 1], [6, 15]], [["    o\noo\n  o\n   o"], ["     o     o\noo  o oo  o\n  o     o\n   o     o"], ["o"], ["oo\n  o\n   o\n\n    o\n\n     o"]]]}
{"requirement": "def find_num(n):\"\"\"\nConsider the following series:\n\nThere is nothing special between numbers `0` and `10`. \n\nLet's start with the number `10` and derive the sequence. Once a number appears in the series, it cannot appear again. \n\nYou will be given an index number and your task will be return the element at that position.\n\nNote that the test range is `n <= 500`. \n\nGood luck!\n\nIf you like this Kata, please try:\n\n[Sequence convergence](https://www.codewars.com/kata/59971e64bfccc70748000068)\n\n[https://www.codewars.com/kata/unique-digit-sequence-ii-optimization-problem](https://www.codewars.com/kata/unique-digit-sequence-ii-optimization-problem)\n\"\"\"", "inputs": [[1], [5], [11], [100], [500]], "outputs": [[1], [5], [22], [103], [476]], "starter_code": "def find_num(n):", "canonical_solution": "masks = [0] * 10\nfor i in range(10 ** 4):\n    for c in str(i):\n        masks[int(c)] |= 1 << i\n\ndef find_num(n):\n    seq, x = (1, 0)\n    for j in range(n):\n        M = seq\n        for m in masks:\n            if x & m:\n                M |= m\n        x = ~M & M + 1\n        seq |= x\n    return x.bit_length() - 1", "entry_point": "find_num", "task_id": "TACO_lite/1185", "input_output_examples": [[[11]], [[false]]]}
{"requirement": "def adfly_decoder(sc):\"\"\"\nEveryone Knows AdFly and their Sister Sites.\n\nIf we see the Page Source of an ad.fly site we can see this perticular line:\nBelieve it or not This is actually the Encoded url which you would skip to.\n\nThe Algorithm is as Follows:\n```\n1) The ysmm value is broken like this\n\nysmm   = 0 1 2 3 4 5 6 7 8 9  = \"0123456789\"\ncode1  = 0   2   4   6   8    = \"02468\"\ncode2  =   9   7   5   3   1  = \"97531\"\n\n2) code1+code2 is base64 Decoded\n\n3) The result will be of this form :\nhttps://adf.ly/go.php?u=\n\n4)  has to be further decoded and the result is to be returned\n```\n\nYour Task:\n\n```\nMake a function to Encode text to ysmm value.\n\nand a function to Decode ysmm value.\n```\n\nNote: Take random values for The first 2 int values.\nI personally hate trivial error checking like giving integer input in place of string. \n\n```\nInput For Decoder & Encoder: Strings\nReturn \"Invalid\" for invalid Strings\n```\n\"\"\"", "inputs": [["O=T0ZToPdRHJRmwdcOz1oGvTL22lFzkRZhih5GsbezSw9kndbvyR50wYawHIAF/SdhT1"], ["N=z0dDoMdyHIRmwac1zMolvWLz2RFmkMZiiZ5HsZeySw9kndbvyR50wYawHIAF/SdhT1"], ["lololol"]], "outputs": [["http://yahoo.com"], ["http://google.com"], ["Invalid"]], "starter_code": "def adfly_decoder(sc):", "canonical_solution": "import base64\nimport binascii\nimport math\nfrom itertools import zip_longest\n\ndef adfly_decoder(sc):\n    code1 = ''\n    code2 = ''\n    flip = False\n    for c in sc:\n        if flip:\n            code2 += c\n        else:\n            code1 += c\n        flip = not flip\n    try:\n        url = base64.b64decode(code1 + code2[len(code2)::-1])\n    except binascii.Error:\n        return 'Invalid'\n    try:\n        dec = base64.b64decode(url[26:])\n    except binascii.Error:\n        return 'Invalid'\n    return str(dec, 'utf-8')\n\ndef adFly_encoder(url):\n    prefix = '96https://adf.ly/go.php?u='\n    full = str.encode(prefix) + base64.b64encode(str.encode(url))\n    enc = base64.b64encode(full)\n    cut = math.ceil(len(enc) / 2)\n    code1 = str(enc[:cut + 1], 'utf-8')\n    code2 = str(enc[len(enc):cut:-1], 'utf-8')\n    swp = ''.join((i + (j or '') for i, j in zip_longest(code1, code2)))\n    return swp", "entry_point": "adfly_decoder", "task_id": "TACO_lite/1186", "input_output_examples": [[["..........\n..........\n..........\n.......X..\n..........\n.........."], [".........\n.........\n.........\n.........\n.........\n........."]], [[[3, 7]], ["Spaceship lost forever."]]]}
{"requirement": "def get_electron_configuration(element):\"\"\"\n## Introduction\n\n\nEach chemical element in its neutral state has a specific number of electrons associated with it. This is represented by the **atomic number** which is noted by an integer number next to or above each element of the periodic table (as highlighted in the image above).\n\nAs we move from left to right, starting from the top row of the periodic table, each element differs from its predecessor by 1 unit (electron). Electrons fill in different orbitals sets according to a specific order. Each set of orbitals, when full, contains an even number of electrons.\n\nThe orbital sets are:\n* The _**s** orbital_ - a single orbital that can hold a maximum of 2 electrons.\n* The _**p** orbital set_ - can hold 6 electrons.\n* The _**d** orbital set_ - can hold 10 electrons.\n* The _**f** orbital set_ - can hold 14 electrons.\n\n\nThe order in which electrons are filling the different set of orbitals is shown in the picture above. First electrons will occupy the **1s** orbital, then the **2s**, then the **2p** set, **3s** and so on.\n\nElectron configurations show how the number of electrons of an element is distributed across each orbital set. Each orbital is written as a sequence that follows the order in the picture, joined by the number of electrons contained in that orbital set. The final electron configuration is a single string of orbital names and number of electrons per orbital set where the first 2 digits of each substring represent the orbital name followed by a number that states the number of electrons that the orbital set contains.\n\n___\n\n# Task\n\nYour task is to write a function that displays the electron configuration built according to the Madelung rule of all chemical elements of the periodic table. The argument will be the symbol of a chemical element, as displayed in the periodic table.\n\n**Note**: There will be a preloaded array called `ELEMENTS` with chemical elements sorted by their atomic number.\n\n**Note**: for `Ni` the electron configuration should be `3d8 4s2` instead of `3d9 4s1`.\n\"\"\"", "inputs": [["H"], ["Cr"], ["C"], ["Br"], ["V"]], "outputs": [["H -> 1s1"], ["Cr -> 1s2 2s2 2p6 3s2 3p6 3d5 4s1"], ["C -> 1s2 2s2 2p2"], ["Br -> 1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p5"], ["V -> 1s2 2s2 2p6 3s2 3p6 3d3 4s2"]], "starter_code": "def get_electron_configuration(element):", "canonical_solution": "ELEMENTS = ['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og']\nEXCEPTIONS = {'Cr': ['Ar', '4s1 3d5'], 'Cu': ['Ar', '4s1 3d10'], 'Nb': ['Kr', '5s1 4d4'], 'Mo': ['Kr', '5s1 4d5'], 'Ru': ['Kr', '5s1 4d7'], 'Rh': ['Kr', '5s1 4d8'], 'Pd': ['Kr', '5s0 4d10'], 'Ag': ['Kr', '5s1 4d10'], 'La': ['Xe', '6s2 4f0 5d1'], 'Ce': ['Xe', '6s2 4f1 5d1'], 'Gd': ['Xe', '6s2 4f7 5d1'], 'Pt': ['Xe', '6s1 4f14 5d9'], 'Au': ['Xe', '6s1 4f14 5d10'], 'Ac': ['Rn', '7s2 5f0 6d1'], 'Th': ['Rn', '7s2 5f0 6d2'], 'Pa': ['Rn', '7s2 5f2 6d1'], 'U': ['Rn', '7s2 5f3 6d1'], 'Np': ['Rn', '7s2 5f4 6d1'], 'Cm': ['Rn', '7s2 5f7 6d1']}\nORBITALS = 'spdfg'\nELT_TO_Z = {elt: i for i, elt in enumerate(ELEMENTS, 1)}\nfor arr in list(EXCEPTIONS.values()):\n    arr[1] = [(int(s[0]), ORBITALS.find(s[1]), s[2:]) for s in arr[1].split(' ')]\n\ndef get_electron_configuration(element):\n    elt, repl = EXCEPTIONS.get(element, (element, []))\n    z, nl, config = (ELT_TO_Z[elt], 0, {})\n    while z:\n        nl += 1\n        for l in range(nl - 1 >> 1, -1, -1):\n            nE = min(z, 2 + l * 4)\n            config[nl - l, l] = nE\n            z -= nE\n            if not z:\n                break\n    for a, b, n in repl:\n        config[a, b] = n\n    s = ' '.join((f'{k[0]}{ORBITALS[k[1]]}{n}' for k, n in sorted(config.items())))\n    return f'{element} -> {s}'", "entry_point": "get_electron_configuration", "task_id": "TACO_lite/1187", "input_output_examples": [[["abc"], ["abab"], ["abcde"], ["aaaaaaaaaaaaaa"], ["abaabaaab"]], [["aba"], ["a"], ["aecea"], ["a"], ["aba"]]]}
{"requirement": "def obtain_max_number(arr):\"\"\"# Task\n CodeBots decided to make a gift for CodeMaster's birthday. They got a pack of candies of various sizes from the store, but instead of giving the whole pack they are trying to make the biggest possible candy from them. On each turn it is possible:\n \n ```\n to pick any two candies of the same size and merge\n them into a candy which will be two times bigger;\n\n to pick a single candy of an even size and split it \n into two equal candies half of this size each.```\nWhat is the size of the biggest candy they can make as a gift?\n\n# Input/Output\n\n\n - [input] integer array `arr`\n\n    Array of positive integers.\n\n    Constraints:\n    \n    `5 ≤ inputArray.length ≤ 50,`\n    \n    `1 ≤ inputArray[i] ≤ 100.`\n\n\n - `[output]` an integer\n\"\"\"", "inputs": [[[2, 4, 8, 1, 1, 15]], [[2, 2, 4, 8, 1, 1, 15]], [[2, 4, 8, 1, 1, 15, 15, 7, 7, 7, 7, 7, 7, 7]], [[2, 4, 8, 1, 1, 30, 30, 15, 15, 7, 7]], [[2, 4, 8, 1, 1, 119, 30, 30, 15, 15, 7, 7]], [[2, 4, 8, 1, 1, 32, 8, 8, 64, 30, 30, 15, 15, 7, 7]]], "outputs": [[16], [16], [30], [60], [119], [128]], "starter_code": "def obtain_max_number(arr):", "canonical_solution": "from collections import Counter\n\ndef obtain_max_number(arr):\n    c = Counter(arr)\n    while 1:\n        find = next((k for k in c if c[k] > 1), None)\n        if not find:\n            return max(c)\n        c[find] -= 2\n        c[find * 2] = c.get(find * 2, 0) + 1", "entry_point": "obtain_max_number", "task_id": "TACO_lite/1188", "input_output_examples": [[[1]], [[0]]]}
{"requirement": "def count_inversions(array):\"\"\"\nArray inversion indicates how far the array is from being sorted.\n\nInversions are pairs of elements in array that are out of order.\n\n## Goal\n\nThe goal is to come up with a function that can calculate inversions for any arbitrary array\n\"\"\"", "inputs": [[[]], [[1, 2, 3]], [[2, 1, 3]], [[6, 5, 4, 3, 2, 1]], [[6, 5, 4, 3, 3, 3, 3, 2, 1]]], "outputs": [[0], [0], [1], [15], [30]], "starter_code": "def count_inversions(array):", "canonical_solution": "def count_inversions(array):\n    inv_count = 0\n    for i in range(len(array)):\n        for j in range(i, len(array)):\n            if array[i] > array[j]:\n                inv_count += 1\n    return inv_count", "entry_point": "count_inversions", "task_id": "TACO_lite/1189", "input_output_examples": [[[0]], [[true]]]}
{"requirement": "def solve(st):\"\"\"\nConsider the string and the following rules: \n```Pearl\na) each character MUST be changed either to the one before or the one after in alphabet. \nb) \"a\" can only be changed to \"b\" and \"z\" to \"y\". \n```\n\nYou will be given a lowercase string and your task is to return `True` if at least one of the possiblities is a palindrome or `False` otherwise. You can use your own code or fix mine. \n\nMore examples in test cases. Good luck!\n\"\"\"", "inputs": [["abba"], ["abaazaba"], ["abccba"], ["adfa"], ["ae"], ["abzy"], ["ababbaba"], ["sq"], ["kxbkwgyydkcbtjcosgikfdyhuuprubpwthgflucpyylbofvqxkkvqthmdnywpaunfihvupbwpruwfybdmgeuocltdaidyyewmbzm"]], "outputs": [[true], [false], [true], [true], [false], [false], [true], [true], [true]], "starter_code": "def solve(st):", "canonical_solution": "def solve(st):\n    return all((True if ord(x) - ord(y) in [-2, 0, 2] else False for x, y in zip(st, st[::-1])))", "entry_point": "solve", "task_id": "TACO_lite/1190", "input_output_examples": [[[[4, 5, 7, 5, 4, 8]]], [[15]]]}
{"requirement": "def remember(str_):\"\"\"\nWrite a function that takes a string and returns an array of the repeated characters (letters, numbers, whitespace) in the string.\n\nIf a charater is repeated more than once, only show it once in the result array.\n\nCharacters should be shown **by the order of their first repetition**. Note that this may be different from the order of first appearance of the character.\n\nCharacters are case sensitive.\n\nFor F# return a \"char list\"\n\"\"\"", "inputs": [["apple"], ["limbojackassin the garden"], ["11pinguin"], ["Claustrophobic"], ["apPle"], ["11 pinguin"], ["pippi"], ["Pippi"], ["kamehameha"], [""]], "outputs": [[["p"]], [["a", "s", "i", " ", "e", "n"]], [["1", "i", "n"]], [["o"]], [[]], [["1", "i", "n"]], [["p", "i"]], [["p", "i"]], [["a", "m", "e", "h"]], [[]]], "starter_code": "def remember(str_):", "canonical_solution": "def remember(str_):\n    seen = set()\n    res = []\n    for i in str_:\n        res.append(i) if i in seen and i not in res else seen.add(i)\n    return res", "entry_point": "remember", "task_id": "TACO_lite/1191", "input_output_examples": [[["abc"], ["abd"], ["dabc"], ["abbc"], ["v"]], [[true], [false], [true], [false], [true]]]}
{"requirement": "def score(n):\n\t\"\"\"\nGiven a number `n` we will define its scORe to be `0 | 1 | 2 | 3 | ... | n`, where `|` is the [bitwise OR operator](https://en.wikipedia.org/wiki/Bitwise_operation#OR).\n\nWrite a function that takes `n` and finds its scORe.\n\"\"\"", "inputs": [[0], [1], [49], [1000000], [10000000], [1000000000000000000]], "outputs": [[0], [1], [63], [1048575], [16777215], [1152921504606846975]], "starter_code": "def score(n):\n\t", "canonical_solution": "score = lambda n: 2 ** n.bit_length() - 1", "entry_point": "score", "task_id": "TACO_lite/1198", "input_output_examples": [[[105], [9], [25], [30]], [["BangBoom"], ["Bang"], ["Boom"], ["BangBoom"]]]}
{"requirement": "def istrimorphic(N):\"\"\"\nGiven a number N, the task is to check whether the number is Trimorphic number or not. A number is called Trimorphic number if and only if its cube ends in the same digits as the number itself. In other words, number appears at the end of its cube i.e let's say if the number of digits of N is k then the last k digit of the cube should be equal to N only.\n\nYour Task:\nYou do not need to read input or print anything, Your task is to complete the function istrimorphic() which takes N as input parameter and returns 1 if the number is trimorphic, otherwise, returns 0.\nExpected Time Complexity: O(LogN)\nExpected Auxiliary Space: O(1)\nConstraints:\n1 < N < 10000\n\"\"\"", "inputs": [[1], [2], [24]], "outputs": [[1], [0], [1]], "starter_code": "def istrimorphic(N):", "canonical_solution": "def istrimorphic(N):\n    c = N ** 3\n    t = str(N)\n    s = str(c)\n    if s[-len(t):] == t:\n        return 1\n    else:\n        return 0", "entry_point": "istrimorphic", "task_id": "TACO_lite/1200", "input_output_examples": [[[1]], [[1]]]}
{"requirement": "def leaderboard_climb(arr, kara):\"\"\"\nArtlessly stolen and adapted from Hackerrank.\n\nKara Danvers is new to CodeWars, and eager to climb up in the ranks. We want to determine Kara's rank as she progresses up the leaderboard. \n\nThis kata uses Dense Ranking, so any identical scores count as the same rank (e.g, a scoreboard of `[100, 97, 97, 90, 82, 80, 72, 72, 60]` corresponds with rankings of `[1, 2, 2, 3, 4, 5, 6, 6, 7]`\n\nYou are given an array, `scores`, of leaderboard scores, descending, and another array, `kara`, representing Kara's Codewars score over time, ascending. Your function should return an array with each item corresponding to the rank of Kara's current score on the leaderboard.\n\n**Note:** This kata's performance requirements are significantly steeper than the Hackerrank version. Some arrays will contain millions of elements; optimize your code so you don't time out. If you're timing out before 200 tests are completed, you've likely got the wrong code complexity. If you're timing out around 274 tests (there are 278), you likely need to make some tweaks to how you're handling the arrays.\n\nGood luck! Please upvote if you enjoyed it :)\n\"\"\"", "inputs": [[[100, 90, 90, 80], [70, 80, 105]], [[982, 490, 339, 180], [180, 250, 721, 2500]], [[1982, 490, 339, 180], [180, 250, 721, 880]], [[1079, 490, 339, 180], [180, 250, 1200, 1980]]], "outputs": [[[4, 3, 1]], [[4, 4, 2, 1]], [[4, 4, 2, 2]], [[4, 4, 1, 1]]], "starter_code": "def leaderboard_climb(arr, kara):", "canonical_solution": "def leaderboard_climb(arr, kara):\n    scores = sorted(set(arr), reverse=True)\n    position = len(scores)\n    ranks = []\n    for checkpoint in kara:\n        while position >= 1 and checkpoint >= scores[position - 1]:\n            position -= 1\n        ranks.append(position + 1)\n    return ranks", "entry_point": "leaderboard_climb", "task_id": "TACO_lite/1204", "input_output_examples": [[[5], [10]], [[1], [2]]]}
{"requirement": "def prime_string(s):\"\"\"# Task\n The string is called `prime` if it cannot be constructed by concatenating some (more than one) equal strings together.\n\n Given a string determine if it is prime or not.\n\n# Input/Output\n\n\n - `[input]` string `s`\n\n  string containing only lowercase English letters\n\n - `[output]` a boolean value\n\n  `true` if the string is prime, `false` otherwise\n\"\"\"", "inputs": [["abac"], ["abab"], ["aaaa"], ["x"], ["abc"], ["fdsyffdsyffdsyffdsyffdsyf"], ["utdutdtdutd"], ["abba"]], "outputs": [[true], [false], [false], [true], [true], [false], [true], [true]], "starter_code": "def prime_string(s):", "canonical_solution": "def prime_string(s):\n    return (s + s).find(s, 1) == len(s)", "entry_point": "prime_string", "task_id": "TACO_lite/1206", "input_output_examples": [[["This is an example!"], ["double  spaces"]], [["sihT si na !elpmaxe"], ["elbuod  secaps"]]]}
{"requirement": "def convert_my_dollars(usd, currency):\"\"\"\nYou are currently in the United States of America. The main currency here is known as the United States Dollar (USD). You are planning to travel to another country for vacation, so you make it today's goal to convert your USD (all bills, no cents) into the appropriate currency. This will help you be more prepared for when you arrive in the country you will be vacationing in.\n\nGiven an integer (`usd`) representing the amount of dollars you have and a string (`currency`) representing the name of the currency used in another country, it is your task to determine the amount of foreign currency you will receive when you exchange your United States Dollars.\n\nHowever, there is one minor issue to deal with first. The screens and monitors at the Exchange are messed up. Some conversion rates are correctly presented, but other conversion rates are incorrectly presented. For some countries, they are temporarily displaying the standard conversion rate in the form of a number's binary representation! \n\nYou make some observations. If a country's currency begins with a vowel, then the conversion rate is unaffected by the technical difficulties. If a country's currency begins with a consonant, then the conversion rate has been tampered with.\n\nUsing your understanding of converting currencies in conjunction with the preloaded conversion-rates table, properly convert your dollars into the correct amount of foreign currency.\n\n```if:javascript,ruby\nNote: `CONVERSION_RATES` is frozen.\n```\n\"\"\"", "inputs": [[7, "Armenian Dram"], [322, "Armenian Dram"], [25, "Bangladeshi Taka"], [730, "Bangladeshi Taka"], [37, "Croatian Kuna"], [40, "Croatian Kuna"], [197, "Czech Koruna"], [333, "Czech Koruna"], [768, "Dominican Peso"], [983, "Dominican Peso"]], "outputs": [["You now have 3346 of Armenian Dram."], ["You now have 153916 of Armenian Dram."], ["You now have 2050 of Bangladeshi Taka."], ["You now have 59860 of Bangladeshi Taka."], ["You now have 222 of Croatian Kuna."], ["You now have 240 of Croatian Kuna."], ["You now have 4137 of Czech Koruna."], ["You now have 6993 of Czech Koruna."], ["You now have 36864 of Dominican Peso."], ["You now have 47184 of Dominican Peso."]], "starter_code": "def convert_my_dollars(usd, currency):", "canonical_solution": "def convert_my_dollars(usd, currency):\n    curs = {'Ar': 478, 'Ba': 82, 'Cr': 6, 'Cz': 21, 'Do': 48, 'Ph': 50, 'Uz': 10000, 'Ha': 64, 'Gu': 7, 'Ta': 32, 'Ro': 4, 'Eg': 18, 'Vi': 22573, 'In': 63, 'Ni': 31, 'Ve': 10, 'No': 8, 'Ja': 111, 'Sa': 3, 'Th': 32, 'Ke': 102, 'So': 1059}\n    return f'You now have {usd * curs.get(currency[:2], 0)} of {currency}.'", "entry_point": "convert_my_dollars", "task_id": "TACO_lite/1208", "input_output_examples": [[[["Computer", "Cell Phones", "Vacuum Cleaner"], [3, 24, 8], [199, 299, 399]]], [[["Cell Phones", "Vacuum Cleaner", "Computer"]]]]}
{"requirement": "def sum_two_smallest_numbers(numbers):\"\"\"\nCreate a function that returns the sum of the two lowest positive numbers given an array of minimum 4 positive integers. No floats or non-positive integers will be passed.\n\"\"\"", "inputs": [[[5, 8, 12, 18, 22]], [[7, 15, 12, 18, 22]], [[25, 42, 12, 18, 22]], [[1, 8, 12, 18, 5]], [[13, 12, 5, 61, 22]]], "outputs": [[13], [19], [30], [6], [17]], "starter_code": "def sum_two_smallest_numbers(numbers):", "canonical_solution": "def sum_two_smallest_numbers(numbers):\n    return sum(sorted(numbers)[:2])", "entry_point": "sum_two_smallest_numbers", "task_id": "TACO_lite/1210", "input_output_examples": [[[0, 15]], [[5]]]}
{"requirement": "def solve(a, b):\"\"\"\nConsider the range `0` to `10`. The primes in this range are: `2, 3, 5, 7`, and thus the prime pairs are generated from these primes.\n\nYou will be given a range and your task is to return the number of pairs that revert to prime as shown above. \n\nNote that the upperbound of the range will not exceed `10000`. A range of `(0,10)` means that: `0 <= n < 10`.\n\nGood luck!\n\nIf you like this Kata, please try \n\n[Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e995880000e3)\n\n[Prime reduction](https://www.codewars.com/kata/59aa6567485a4d03ff0000ca)\n\n[Dominant primes](https://www.codewars.com/kata/59ce11ea9f0cbc8a390000ed)\n\"\"\"", "inputs": [[0, 20], [2, 200], [2, 2000], [1000, 3000], [2000, 5000]], "outputs": [[14], [457], [17705], [12801], [25005]], "starter_code": "def solve(a, b):", "canonical_solution": "import itertools\n\ndef solve(a, b):\n    primes = set([2] + [n for n in range(3, b, 2) if all((n % r for r in range(3, int(n ** 0.5) + 1, 2)))])\n    return sum((sum(map(int, str(x * y))) in primes for x, y in itertools.combinations_with_replacement([p for p in primes if a <= p < b], 2)))", "entry_point": "solve", "task_id": "TACO_lite/1211", "input_output_examples": [[[[1, 2, 3], [1, 1]], [[1, 2], [1, 2, 3]]], [[1], [2]]]}
{"requirement": "def sum_groups(arr):\"\"\"\n# Task\n\nGiven an array of integers, sum consecutive even numbers and consecutive odd numbers. Repeat the process while it can be done and return the length of the final array.\n\n# Input/Output\n\n- `[input]` integer array `arr`\n\n  A non-empty array, \n\n  `1 ≤ arr.length ≤ 1000`\n\n  `0 ≤ arr[i] ≤ 1000`\n\n\n- `[output]` an integer\n\n  The length of the final array\n\"\"\"", "inputs": [[[2, 1, 2, 2, 6, 5, 0, 2, 0, 5, 5, 7, 7, 4, 3, 3, 9]], [[2, 1, 2, 2, 6, 5, 0, 2, 0, 3, 3, 3, 9, 2]], [[2]], [[1, 2]], [[1, 1, 2, 2]]], "outputs": [[6], [5], [1], [2], [1]], "starter_code": "def sum_groups(arr):", "canonical_solution": "from itertools import groupby\n\ndef sum_groups(arr):\n    newarr = [sum(j) for i, j in groupby(arr, key=lambda x: x % 2 == 0)]\n    return len(newarr) if newarr == arr else sum_groups(newarr)", "entry_point": "sum_groups", "task_id": "TACO_lite/1213", "input_output_examples": [[["nickel penny dime dollar"], ["dollar dollar quarter dime dime"], ["penny"], ["dime"]], [["$1.16"], ["$2.45"], ["$0.01"], ["$0.10"]]]}
{"requirement": "def remove(text, what):\"\"\"\nWrite\n```python\nremove(text, what)\n```\nthat takes in a string ```str```(```text``` in Python) and an object/hash/dict/Dictionary ```what``` and returns a string with the chars removed in ```what```.\n\"\"\"", "inputs": [["this is a string", {"t": 1, "i": 2}], ["hello world", {"x": 5, "i": 2}], ["apples and bananas", {"a": 50, "n": 1}], ["a", {"a": 1, "n": 1}], ["codewars", {"c": 5, "o": 1, "d": 1, "e": 1, "w": 1, "z": 1, "a": 1, "r": 1, "s": 1}]], "outputs": [["hs s a string"], ["hello world"], ["pples d bnns"], [""], [""]], "starter_code": "def remove(text, what):", "canonical_solution": "def remove(text, what):\n    for char in what:\n        text = text.replace(char, '', what[char])\n    return text", "entry_point": "remove", "task_id": "TACO_lite/1215", "input_output_examples": [[["love"], ["friendship"], ["attitude"]], [[54], [108], [100]]]}
{"requirement": "def number_of_routes(m, n):\n\t\"\"\"\nYou have a grid with `$m$` rows and `$n$` columns. Return the number of unique ways that start from the top-left corner and go to the bottom-right corner. You are only allowed to move right and down.\n\n**Note:** there are random tests for grids up to 1000 x 1000 in most languages, so a naive solution will not work.\n\n---\n*Hint: use mathematical permutation and combination*\n\"\"\"", "inputs": [[1, 1], [5, 1], [3, 4], [5, 6], [10, 10], [100, 3], [123, 456]], "outputs": [[2], [6], [35], [462], [184756], [176851], [448843261729071620474858205566477025894357385375655014634306680560209909590802545266425906052279365647506075241055256064119806400]], "starter_code": "def number_of_routes(m, n):\n\t", "canonical_solution": "from math import factorial as f\nnumber_of_routes = lambda m, n: f(m + n) // (f(m) * f(n))", "entry_point": "number_of_routes", "task_id": "TACO_lite/1216", "input_output_examples": [[[[1, 2, 3, 4]], [[1, 2, 3, 3, 2, 1]], [[1, 2, 3, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7]], [[5, 3, 1, 2, 4, 6, 5, 4, 2, 3, 5, 2, 1]], [[1, 0, 1, 0, 1, 0, 1, 0]]], [["□□□■\n□□■■\n□■■■\n■■■■"], ["□□■■□□\n□■■■■□\n■■■■■■"], ["□□□□□□□□□□□□■\n□□□□□□□□□□□■■\n□□□□□□□□□□■■■\n□□□□□□□□□■■■■\n□□■■□□□□■■■■■\n□■■■■□□■■■■■■\n■■■■■■■■■■■■■"], ["□□□□□■□□□□□□□\n■□□□□■■□□□■□□\n■□□□■■■■□□■□□\n■■□□■■■■□■■□□\n■■□■■■■■■■■■□\n■■■■■■■■■■■■■"], ["■□■□■□■□"]]]}
{"requirement": "def solve(arr):\"\"\"\nConsider the word `\"abode\"`. We can see that the letter `a` is in position `1` and `b` is in position `2`. In the alphabet, `a` and `b` are also in positions `1` and `2`. Notice also that `d` and `e` in `abode` occupy the positions they would occupy in the alphabet, which are positions `4` and `5`. \n\nGiven an array of words, return an array of the number of letters that occupy their positions in the alphabet for each word.\n\nInput will consist of alphabet characters, both uppercase and lowercase. No spaces.\n\nGood luck!\n\nIf you like this Kata, please try: \n\n[Last digit symmetry](https://www.codewars.com/kata/59a9466f589d2af4c50001d8)\n\n[Alternate capitalization](https://www.codewars.com/kata/59cfc000aeb2844d16000075)\n\n~~~if:fortran\n## Fortran-Specific Notes\n\nDue to how strings and arrays work in Fortran, some of the strings in the input array will inevitably contain trailing whitespace.  **For this reason, please [trim](https://gcc.gnu.org/onlinedocs/gcc-4.3.4/gfortran/TRIM.html) your input strings before processing them.**\n~~~\n\"\"\"", "inputs": [[["abode", "ABc", "xyzD"]], [["abide", "ABc", "xyz"]], [["IAMDEFANDJKL", "thedefgh", "xyzDEFghijabc"]], [["encode", "abc", "xyzD", "ABmD"]]], "outputs": [[[4, 3, 1]], [[4, 3, 0]], [[6, 5, 7]], [[1, 3, 1, 3]]], "starter_code": "def solve(arr):", "canonical_solution": "def solve(arr):\n    return [sum((c == chr(97 + i) for i, c in enumerate(w[:26].lower()))) for w in arr]", "entry_point": "solve", "task_id": "TACO_lite/1218", "input_output_examples": [[["111", "10"], ["1101", "101"], ["1101", "10111"]], [["1001"], ["10010"], ["100100"]]]}
{"requirement": "def ant(grid, column, row, n, direction=0):\"\"\"[Langton's ant](https://en.wikipedia.org/wiki/Langton%27s_ant) is a two-dimensional Turing machine invented in the late 1980s. The ant starts out on a grid of black and white cells and follows a simple set of rules that has complex emergent behavior.\n\n## Task\n\nComplete the function and return the `n`th iteration of Langton's ant with the given input.\n\n### Parameters:\n\n* `grid` - a two dimensional array of `1`s and `0`s (representing white and black cells respectively)\n* `column` - horizontal position of ant\n* `row` - ant's vertical position\n* `n` - number of iterations\n* `dir` - ant's current direction (0 - north, 1 - east, 2 - south, 3 - west), **should default to 0**\n\n**Note:** parameters `column` and `row` will always be inside the `grid`, and number of generations `n` will never be negative.\n\n## Output\n\nThe state of the `grid` after `n` iterations.\n\n## Rules\n\nThe ant can travel in any of the four cardinal directions at each step it takes. The ant moves according to the rules below:\n\n* At a white square (represented with `1`), turn 90° right, flip the color of the square, and move forward one unit.\n* At a black square (`0`), turn 90° left, flip the color of the square, and move forward one unit.\n\nThe grid has no limits and therefore if the ant moves outside the borders, the grid should be expanded with `0`s, respectively maintaining the rectangle shape.\n\"\"\"", "inputs": [[[[0]], 0, 0, 1, 0], [[[1]], 0, 0, 1, 0], [[[0]], 0, 0, 3, 0], [[[0]], 0, 0, 1]], "outputs": [[[[0, 0]]], [[[0, 1]]], [[[0, 1], [0, 1]]], [[[0, 0]]]], "starter_code": "def ant(grid, column, row, n, direction=0):", "canonical_solution": "BLACK = 0\nWHITE = 1\nCARDINALS = [(-1, 0), (0, 1), (1, 0), (0, -1)]\n\ndef ant(grid, column, row, n, direction=0):\n    r, c, d = (row, column, direction)\n    for _ in range(n):\n        if grid[r][c] == BLACK:\n            grid[r][c] = WHITE\n            d = (d + 3) % 4\n        else:\n            grid[r][c] = BLACK\n            d = (d + 1) % 4\n        r, c = (r + CARDINALS[d][0], c + CARDINALS[d][1])\n        if r < 0:\n            grid.insert(0, [0] * len(grid[0]))\n            r += 1\n        elif r == len(grid):\n            grid.append([0] * len(grid[0]))\n        elif c < 0:\n            grid = [[0] + row for row in grid]\n            c += 1\n        elif c == len(grid[0]):\n            grid = [row + [0] for row in grid]\n    return grid", "entry_point": "ant", "task_id": "TACO_lite/1220", "input_output_examples": [[[[1, 2, 3, 4]], ["xyz"], [1, 2, 3, 4]], [[4], ["z"], [4]]]}
{"requirement": "def dominator(arr):\"\"\"\nA zero-indexed array ```arr``` consisting of n integers is given. The dominator of array ```arr``` is the value that occurs in more than half of the elements of ```arr```.\n\nWrite a function ```dominator(arr)``` that, given a zero-indexed array ```arr``` consisting of n integers, returns the dominator of ```arr```. The function should return −1 if array does not have a dominator. All values in ```arr``` will be >=0.\n\"\"\"", "inputs": [[[3, 4, 3, 2, 3, 1, 3, 3]], [[1, 2, 3, 4, 5]], [[1, 1, 1, 2, 2, 2]], [[1, 1, 1, 2, 2, 2, 2]], [[]]], "outputs": [[3], [-1], [-1], [2], [-1]], "starter_code": "def dominator(arr):", "canonical_solution": "def dominator(arr):\n    for x in set(arr):\n        if arr.count(x) > len(arr) / 2.0:\n            return x\n    return -1", "entry_point": "dominator", "task_id": "TACO_lite/1221", "input_output_examples": [[["a"], ["ca"]], [[64], [-820]]]}
{"requirement": "def whose_turn(positions):\"\"\"# Task\n Imagine a standard chess board with only two white and two black knights placed in their standard starting positions: the white knights on b1 and g1; the black knights on b8 and g8.\n\n There are two players: one plays for `white`, the other for `black`. During each move, the player picks one of his knights and moves it to an unoccupied square according to standard chess rules. Thus, a knight on d5 can move to any of the following squares: b6, c7, e7, f6, f4, e3, c3, and b4, as long as it is not occupied by either a friendly or an enemy knight.\n\n The players take turns in making moves, starting with the white player. Given the configuration `positions` of the knights after an unspecified number of moves, determine whose turn it is.\n\n# Input/Output\n\n\n - `[input]` string `positions`\n\n    The positions of the four knights, starting with white knights, separated by a semicolon, in the chess notation.\n\n\n - `[output]` a boolean value\n\n    `true` if white is to move, `false` otherwise.\n\"\"\"", "inputs": [["b1;g1;b8;g8"], ["c3;g1;b8;g8"], ["g1;g2;g3;g4"], ["f8;h1;f3;c2"]], "outputs": [[true], [false], [true], [false]], "starter_code": "def whose_turn(positions):", "canonical_solution": "def whose_turn(positions):\n    return sum((ord(c) for c in positions.replace(';', ''))) % 2 == 0", "entry_point": "whose_turn", "task_id": "TACO_lite/1225", "input_output_examples": [[[100, 0.1, 1], [100, 0.1, 2], [100, 0.1, 10]], [[110, 110], [120, 121], [200, 259]]]}
{"requirement": "def pattern(n):\"\"\"\n## Task:\nYou have to write a function `pattern` which returns the following Pattern (See Pattern) upto `n` number of rows. \n\n* Note: `Returning` the pattern is not the same as `Printing` the pattern.\n\n### Rules/Note:\n* If `n < 1` then it should return \"\" i.e. empty string.\n* There are `no whitespaces` in the pattern.\n\n### Pattern:\n\n    (n)(n-1)(n-2)...4321\n    (n)(n-1)(n-2)...432\n    (n)(n-1)(n-2)...43\n    (n)(n-1)(n-2)...4\n    ...............\n    ..............\n    (n)(n-1)(n-2)\n    (n)(n-1)\n    (n)\n\n~~~if-not:cfml\n* Hint: Use \\n in string to jump to next line\n~~~\n~~~if:cfml\n* Hint: Use chr(10) in string to jump to next line\n~~~\n\n[List of all my katas](\"http://www.codewars.com/users/curious_db97/authored\")\n\"\"\"", "inputs": [[1], [2], [5], [0], [-25]], "outputs": [["1"], ["21\n2"], ["54321\n5432\n543\n54\n5"], [""], [""]], "starter_code": "def pattern(n):", "canonical_solution": "def pattern(n):\n    return '\\n'.join([''.join([str(y) for y in range(n, x, -1)]) for x in range(n)])", "entry_point": "pattern", "task_id": "TACO_lite/1228", "input_output_examples": [[[1], [10], [69], [277777788888899]], [[], [0], [54, 20, 0], [4996238671872, 438939648, 4478976, 338688, 27648, 2688, 768, 336, 54, 20, 0]]]}
{"requirement": "def sequence(n):\n\t\"\"\"\nConsider a sequence, which is formed by the following rule: next term is taken as the smallest possible non-negative integer, which is not yet in the sequence, so that `no 3` terms of sequence form an arithmetic progression.\n\n## The task\n\nWrite a function `f(n)`, which returns the `n-th` member of sequence.\n\n## Limitations\n\nThere are `1000` random tests with `0 <= n <= 10^9`, so you should consider algorithmic complexity of your solution.\n\"\"\"", "inputs": [[0], [1], [2], [3], [4], [5], [334], [123], [546], [1634], [14514]], "outputs": [[0], [1], [3], [4], [9], [10], [7329], [1084], [19929], [79707], [2305425]], "starter_code": "def sequence(n):\n\t", "canonical_solution": "sequence = lambda n: int(format(n, 'b'), 3)", "entry_point": "sequence", "task_id": "TACO_lite/1232", "input_output_examples": [[["WAtErSlIde"], ["GolDeNSanDyWateRyBeaChSuNN"], ["gOfIshsunesunFiSh"], ["cItYTowNcARShoW"]], [[1], [3], [4], [0]]]}
{"requirement": "def sum_of_squares(n):\"\"\"\nThe task is simply stated. Given an integer n (3 < n < 10^(9)), find the length of the smallest list of [*perfect squares*](https://en.wikipedia.org/wiki/Square_number) which add up to n. Come up with the best algorithm you can; you'll need it!\n\nTime constraints:\n\n5 easy (sample) test cases: n < 20\n\n5 harder test cases: 1000 < n < 15000\n\n5 maximally hard test cases: 5 * 1e8 < n < 1e9\n\n```if:java\n300 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:c#\n350 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:python\n15 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:ruby\n25  random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:javascript\n100 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:crystal\n250 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:cpp\nRandom maximally hard test cases: 1e8 < n < 1e9\n```\n\"\"\"", "inputs": [[15], [16], [17], [18], [19], [2017], [1008], [3456], [4000], [12321], [661915703], [999887641], [999950886], [999951173], [999998999]], "outputs": [[4], [1], [2], [2], [3], [2], [4], [3], [2], [1], [4], [1], [3], [2], [4]], "starter_code": "def sum_of_squares(n):", "canonical_solution": "def one_square(n):\n    return round(n ** 0.5) ** 2 == n\n\ndef two_squares(n):\n    while n % 2 == 0:\n        n //= 2\n    p = 3\n    while p * p <= n:\n        while n % (p * p) == 0:\n            n //= p * p\n        while n % p == 0:\n            if p % 4 == 3:\n                return False\n            n //= p\n        p += 2\n    return n % 4 == 1\n\ndef three_squares(n):\n    while n % 4 == 0:\n        n //= 4\n    return n % 8 != 7\n\ndef sum_of_squares(n):\n    if one_square(n):\n        return 1\n    if two_squares(n):\n        return 2\n    if three_squares(n):\n        return 3\n    return 4", "entry_point": "sum_of_squares", "task_id": "TACO_lite/1235", "input_output_examples": [[[1], [2], [3]], [["H", "T"], ["HH", "HT", "TH", "TT"], ["HHH", "HHT", "HTH", "HTT", "THH", "THT", "TTH", "TTT"]]]}
{"requirement": "def consecutive(arr):\"\"\"\nCreate the function ```consecutive(arr)``` that takes an array of integers and return the minimum number of integers needed to make the contents of ```arr``` consecutive from the lowest number to the highest number. Numbers in ```arr``` will be unique.\n\"\"\"", "inputs": [[[4, 8, 6]], [[1, 2, 3, 4]], [[]], [[1]], [[-10]], [[1, -1]], [[-10, -9]], [[0]], [[10, -10]], [[-10, 10]]], "outputs": [[2], [0], [0], [0], [0], [1], [0], [0], [19], [19]], "starter_code": "def consecutive(arr):", "canonical_solution": "def consecutive(arr):\n    return max(arr) - min(arr) + 1 - len(arr) if arr else 0", "entry_point": "consecutive", "task_id": "TACO_lite/1236", "input_output_examples": [[[[1, 5, 12]], [[7, -3, 20]], [[7, -3, -2, 6]]], [["odds win"], ["evens win"], ["tie"]]]}
{"requirement": "def para_to_rect(eqn1, eqn2):\"\"\"\n### Task:\n\nYour job is to take a pair of parametric equations, passed in as strings, and convert them into a single rectangular equation by eliminating the parameter. Both parametric halves will represent linear equations of x as a function of time and y as a function of time respectively. \n\nThe format of the final equation must be `Ax + By = C` or `Ax - By = C` where A and B must be positive and A, B, and C are integers. The final equation also needs to have the lowest possible whole coefficients. Omit coefficients equal to one.\n\nThe method is called `para_to_rect` or `EquationsManager.paraToRect` and takes in two strings in the form `x = at +(or -) b` and `y = ct +(or -) d` respectively, where `a` and `c` must be integers, and `b` and `d` must be positive integers. If `a` or `c` is omitted, the coefficient of _t_ is obviously assumed to be 1 (see final case in the example tests). There will NEVER be double signs in the equations inputted (For example: `\"x = -12t + -18\"` and `\"y = -12t - -18\"` won't show up.)\n\n### Notes:\n\nAs you can see above, sometimes you'll need to add the two parametric equations after multiplying by the necessary values; sometimes you'll need to subtract them – just get rid of the _t_!\n\"\"\"", "inputs": [["x = 12t + 18", "y = 8t + 7"], ["x = -12t + 18", "y = 8t + 7"], ["x = 12t + 18", "y = -8t + 7"], ["x = -12t + 18", "y = -8t + 7"], ["x = -t + 12", "y = 12t - 1"], ["x = -12t - 18", "y = 8t - 7"], ["x = -12t + 18", "y = 8t - 7"], ["x = -18t + 12", "y = 7t - 8"], ["x = 18t + 12", "y = 7t - 8"], ["x = 18t + 12", "y = 7t + 8"], ["x = 2t + 5", "y = 3t + 4"], ["x = -2t + 5", "y = 3t - 4"], ["x = 15t + 2", "y = 20t - 11"], ["x = 15t - 2", "y = -20t - 11"], ["x = 2t - 1", "y = 2t - 1"], ["x = -2t + 1", "y = 2t + 1"], ["x = 16t + 16", "y = 8t - 12"], ["x = 16t - 16", "y = -8t - 12"], ["x = -t + 12", "y = 2t - 3"], ["x = t + 12", "y = 2t - 3"], ["x = 6t - 99", "y = 10t - 79"], ["x = -139t + 119", "y = -89t + 12"], ["x = -93t + 104", "y = t - 77"], ["x = 148t + 3", "y = -11t + 63"], ["x = -t + 96", "y = 29t - 143"], ["x = -144t - 118", "y = -142t + 65"], ["x = -71t + 37", "y = -131t - 124"], ["x = -t + 109", "y = -54t - 118"], ["x = -73t - 59", "y = t + 132"], ["x = -90t - 42", "y = -37t + 149"], ["x = -69t - 7", "y = 117t - 59"], ["x = 14t - 145", "y = 3t + 19"], ["x = 84t + 84", "y = -36t - 41"], ["x = 138t - 139", "y = -47t - 134"], ["x = -113t - 116", "y = -72t - 124"], ["x = 103t - 106", "y = -81t - 24"], ["x = -14t + 124", "y = t - 44"], ["x = 144t - 119", "y = -29t + 69"], ["x = 125t - 4", "y = -t + 50"], ["x = -132t + 142", "y = 75t - 58"]], "outputs": [["2x - 3y = 15"], ["2x + 3y = 57"], ["2x + 3y = 57"], ["2x - 3y = 15"], ["12x + y = 143"], ["2x + 3y = -57"], ["2x + 3y = 15"], ["7x + 18y = -60"], ["7x - 18y = 228"], ["7x - 18y = -60"], ["3x - 2y = 7"], ["3x + 2y = 7"], ["4x - 3y = 41"], ["4x + 3y = -41"], ["x - y = 0"], ["x + y = 2"], ["x - 2y = 40"], ["x + 2y = -40"], ["2x + y = 21"], ["2x - y = 27"], ["5x - 3y = -258"], ["89x - 139y = 8923"], ["x + 93y = -7057"], ["11x + 148y = 9357"], ["29x + y = 2641"], ["71x - 72y = -13058"], ["131x - 71y = 13651"], ["54x - y = 6004"], ["x + 73y = 9577"], ["37x - 90y = -14964"], ["39x + 23y = -1630"], ["3x - 14y = -701"], ["3x + 7y = -35"], ["47x + 138y = -25025"], ["72x - 113y = 5660"], ["81x + 103y = -11058"], ["x + 14y = -492"], ["29x + 144y = 6485"], ["x + 125y = 6246"], ["25x + 44y = 998"]], "starter_code": "def para_to_rect(eqn1, eqn2):", "canonical_solution": "from math import gcd\n\ndef para_to_rect(eqn1, eqn2):\n    a, b = eqn1.split('= ')[1].split('t ')\n    c, d = eqn2.split('= ')[1].split('t ')\n    if a in ('', '-'):\n        a += '1'\n    if c in ('', '-'):\n        c += '1'\n    a, b, c, d = map(eval, (a, b, c, d))\n    x = gcd(a, c)\n    e, f = (c // x, -a // x)\n    if e < 0:\n        e, f = (-e, -f)\n    return f'{(e if e > 1 else '')}x {'+-'[f < 0]} {(abs(f) if abs(f) > 1 else '')}y = {e * b + f * d}'", "entry_point": "para_to_rect", "task_id": "TACO_lite/1238", "input_output_examples": [[[1, 5, 1], [1, 5, 2], [1, 5, 3], [1, 5, 4], [1, 5, 5]], [[[1.0]], [[1.0, 5.0]], [[1.0, 3.0, 5.0]], [[1.0, 2.333333333333333, 3.6666666666666665, 5.0]], [[1.0, 2.0, 3.0, 4.0, 5.0]]]]}
{"requirement": "def zfunc(str_):\"\"\"The goal of this Kata is to remind/show you, how Z-algorithm works and test your implementation.\n\nFor a string str[0..n-1], Z array is of same length as string. An element Z[i] of Z array stores length of the longest substring starting from str[i] which is also a prefix of str[0..n-1]. The first entry of Z array is meaning less as complete string is always prefix of itself.\n\nYour task will be to implement Z algorithm in your code and return Z-array.\n\nFor empty string algorithm should return [].\n\nInput: string str \n\nOutput: Z array\n\nNote, that an important part of this kata is that you have to use\nefficient way to get Z-array (O(n))\n\"\"\"", "inputs": [["ababcaba"], [""], ["aaaaaaaa"], ["ababababab"], ["aaaa$aaaa"], ["abracadabra"]], "outputs": [[[8, 0, 2, 0, 0, 3, 0, 1]], [[]], [[8, 7, 6, 5, 4, 3, 2, 1]], [[10, 0, 8, 0, 6, 0, 4, 0, 2, 0]], [[9, 3, 2, 1, 0, 4, 3, 2, 1]], [[11, 0, 0, 1, 0, 1, 0, 4, 0, 0, 1]]], "starter_code": "def zfunc(str_):", "canonical_solution": "def prefix1(a, b):\n    cnt = 0\n    for i, j in zip(a, b):\n        if i == j:\n            cnt += 1\n        else:\n            return cnt\n    return cnt\n\ndef prefix2(a, b, num):\n    for i in range(num, -1, -1):\n        if b.startswith(a[:i]):\n            return i\n\ndef zfunc(str_):\n    z = []\n    k = len(str_)\n    for i in range(len(str_)):\n        z.append(prefix2(str_[i:], str_[:k - i], k - i))\n    return z", "entry_point": "zfunc", "task_id": "TACO_lite/1243", "input_output_examples": [[["  nAa"]], [[false]]]}
{"requirement": "def controller(events):\"\"\"# Situation\nYou have been hired by a company making electric garage doors. Accidents with the present product line have resulted in numerous damaged cars, broken limbs and several killed pets. Your mission is to write a safer version of their controller software.\n\n# Specification\nWe always start with a closed door. The remote control has exactly one button, with the following behaviour.\n\n+ If the door is closed, a push starts opening the door, and vice-versa\n+ It takes 5 seconds for the door to open or close completely\n+ While the door is moving, one push pauses movement, another push resumes movement in the same direction\n\nIn order to make the door safer, it has been equiped with resistance-based obstacle detection. When the door detects an obstacle, it must immediately reverse the direction of movement.\n\n# Input\nA string where each character represents one second, with the following possible values.\n\n* ```'.'``` No event\n* ```'P'``` Button has been pressed\n* ```'O'``` Obstacle has been detected (supersedes P)\n\n# Output\nA string where each character represents one second and indicates the position of the door (0 if fully closed and 5 fully open). The door starts moving immediately, hence its position changes at the same second as the event.\n\"\"\"", "inputs": [[""], [".........."], ["P.."], ["P...."], ["P......P......"], ["P.P.."], ["P.P.P...."], [".....P.P........P...."], [".....P......P.P..P...."], ["P.O...."], ["P......P.O...."], ["P..OP..P.."], ["P......P..OP..P..."], ["..P...O....."]], "outputs": [[""], ["0000000000"], ["123"], ["12345"], ["12345554321000"], ["12222"], ["122234555"], ["000001222222222234555"], ["0000012345554333321000"], ["1210000"], ["12345554345555"], ["1232222100"], ["123455543233334555"], ["001234321000"]], "starter_code": "def controller(events):", "canonical_solution": "def controller(events):\n    out, state, dir, moving = ([], 0, 1, False)\n    for c in events:\n        if c == 'O':\n            dir *= -1\n        elif c == 'P':\n            moving = not moving\n        if moving:\n            state += dir\n        if state in [0, 5]:\n            moving, dir = (False, 1 if state == 0 else -1)\n        out.append(str(state))\n    return ''.join(out)", "entry_point": "controller", "task_id": "TACO_lite/1244", "input_output_examples": [[[2]], [[true]]]}
{"requirement": "def next_day_of_week(current_day, available_week_days):\"\"\"# Task\n You have set an alarm for some of the week days.\n \n Days of the week are encoded in binary representation like this:\n```\n0000001 - Sunday\n0000010 - Monday\n0000100 - Tuesday\n0001000 - Wednesday\n0010000 - Thursday\n0100000 - Friday \n1000000 - Saturday```\n\n Given the current day of the week, your task is to find the day of the week when alarm will ring next time.\n\n# Input/Output\n\n\n - `[input]` integer `currentDay`\n \n The weekdays range from 1 to 7, 1 is Sunday and 7 is Saturday\n\n\n - `[input]` integer `availableWeekDays`\n \n An integer. Days of the week are encoded in its binary representation.\n\n\n - `[output]` an integer\n\n The next day available.\n\"\"\"", "inputs": [[4, 42], [6, 42], [7, 42]], "outputs": [[6], [2], [2]], "starter_code": "def next_day_of_week(current_day, available_week_days):", "canonical_solution": "def next_day_of_week(current_day, available_week_days):\n    x = 2 ** current_day\n    while not x & available_week_days:\n        x = max(1, x * 2 % 2 ** 7)\n    return x.bit_length()", "entry_point": "next_day_of_week", "task_id": "TACO_lite/1250", "input_output_examples": [[["In 2015, I want to know how much does iPhone 6+ cost?"]], [[2021]]]}
{"requirement": "def funnel_out(funnel):\"\"\"\nImagine a funnel filled with letters. The bottom letter drops out of the funnel and onto a conveyor belt:\n\nIf there are two letters above a gap, the smaller letter falls into the gap.\n\nOf course, this can create a new gap, which must also be filled in the same way:\n\nOnce all the gaps above it have been filled, the bottom letter drops out of the funnel and onto the conveyorbelt. The process continues until all letters have fallen onto the conveyor. (New letters fall onto the end of the existing string)\n\n**KATA GOAL: Return the string on the conveyorbelt after all letters have fallen**.\n\nAll letters in the funnel will be unique i.e. in every comparison one letter will be strictly smaller than the other. The funnel will be presented as a nested list, e.g.:\n\nThe value of a letter is defined by its codepoint. Note: this means all capital letters are defined as smaller than all lower-case letters, but your language's comparison operator will probably treat it that way automatically.\n\nThe funnels will always be \"nice\" -- every layer will have 1 item more than the layer below, and every layer will be full, and generally there's no funny business or surprises to consider. The only characters used are standard uppercase and lowercase letters A-Z and a-z. The tests go up to 9 layer funnel.\n\n**For a bigger funneling challenge, check out [this kata](https://www.codewars.com/kata/create-a-funnel) by @myjinxin2015.**\n\"\"\"", "inputs": [[[[null]]], [[[null, null], [null]]], [[[null, null, null], [null, null], [null]]], [[[null, null, null, null], [null, null, null], [null, null], [null]]]], "outputs": [["q"], ["abc"], ["fbadec"], ["bghcfiejda"]], "starter_code": "def funnel_out(funnel):", "canonical_solution": "def funnel_out(funnel):\n    if not funnel:\n        return ''\n    ret = []\n    while funnel[-1][-1]:\n        j = 0\n        ret.append(funnel[-1][j])\n        funnel[-1][j] = None\n        for i in range(-2, -len(funnel) - 1, -1):\n            _, k = min(((funnel[i][x] or 'ÿ', x) for x in (j, j + 1)))\n            funnel[i + 1][j], funnel[i][k], j = (funnel[i][k], funnel[i + 1][j], k)\n    return ''.join(ret)", "entry_point": "funnel_out", "task_id": "TACO_lite/1253", "input_output_examples": [[[122, "bin"]], [["0b1111010"]]]}
{"requirement": "def caffeinebuzz(n):\"\"\"\nComplete the function ```caffeinebuzz```, which takes a non-zero integer as it's one argument.\n\nIf the integer is divisible by 3, return the string ```\"Java\"```.\n\nIf the integer is divisible by 3 and divisible by 4, return the string ```\"Coffee\"```\n\nIf the integer is one of the above and is even, add ```\"Script\"``` to the end of the string.\n\nOtherwise, return the string ```\"mocha_missing!\"```\n\"\"\"", "inputs": [[1], [3], [6], [12]], "outputs": [["mocha_missing!"], ["Java"], ["JavaScript"], ["CoffeeScript"]], "starter_code": "def caffeinebuzz(n):", "canonical_solution": "def caffeinebuzz(n):\n    if n % 12 == 0:\n        return 'CoffeeScript'\n    elif n % 6 == 0:\n        return 'JavaScript'\n    elif n % 3 == 0:\n        return 'Java'\n    else:\n        return 'mocha_missing!'", "entry_point": "caffeinebuzz", "task_id": "TACO_lite/1255", "input_output_examples": [[["hello", "world", "l"], ["coding", "anywhere", "n"], ["jason", "samson", "s"], ["wonderful", "people", "e"]], [["held"], ["codinywhere"], ["jasamson"], ["wondeople"]]]}
{"requirement": "def same_structure_as(original, other):\"\"\"\nComplete the function/method (depending on the language) to return `true`/`True` when its argument is an array that has the same nesting structures and same corresponding length of nested arrays as the first array.\n\n~~~if:javascript\nFor your convenience, there is already a function 'isArray(o)' declared and defined that returns true if its argument is an array, false otherwise.\n~~~\n\n~~~if:php\nYou may assume that all arrays passed in will be non-associative.\n~~~\n\"\"\"", "inputs": [[[1, [1, 1]], [[2, 2], 2]], [[1, [1, 1]], [2, [2]]], [[[[], []]], [[[], []]]], [[[[], []]], [[1, 1]]], [[1, [[[1]]]], [2, [[[2]]]]], [[], 1], [[], {}], [[1, "[", "]"], ["[", "]", 1]]], "outputs": [[false], [false], [true], [false], [true], [false], [false], [true]], "starter_code": "def same_structure_as(original, other):", "canonical_solution": "def same_structure_as(original, other):\n    if isinstance(original, list) and isinstance(other, list) and (len(original) == len(other)):\n        for o1, o2 in zip(original, other):\n            if not same_structure_as(o1, o2):\n                return False\n        else:\n            return True\n    else:\n        return not isinstance(original, list) and (not isinstance(other, list))", "entry_point": "same_structure_as", "task_id": "TACO_lite/1258", "input_output_examples": [[[[[48, 36, 124], [201, 23, 247], [150, 162, 177]]]], [[[[69, 69, 69], [157, 157, 157], [163, 163, 163]]]]]}
{"requirement": "def scanner(qrc):\"\"\"*Translations appreciated*\n\n# Overview\n\nYour task is to decode a qr code.\nYou get the qr code as 2 dimensional array, filled with numbers. 1 is for a black field and 0 for a white field.\nIt is always a qr code of version 1 (21*21), it is always using mask 0 ((x+y)%2), it is always using byte mode and it always has error correction level H (up to 30%). The qr code won't be positioned wrong and there won't be any squares for positioning except the three big ones in the corners.\n\nYou should return the message inside the qr code as string.  \nThe QR Code will always be valid and be of `version 1`, meaning the decoded message will never be more than 8 characters long. The way to decode a complete QR-code is explained below, but keep in mind that in this kata, you'll only have to decode the parts in green in the picture below:\n\n\n\n\n# Input/ouput\n\n* Input: 2D array of `0` (white) and `1` (black) values\n* Output: the decoded message, according to the process described below.\n\n\n# Decoding a QR-code\n\nHere comes the explaination on how to decode a qr code. You can skip it, if you already know how it works:\n\n### Postionning information\n\nFirst of all we have to take a look at the big three positioning fields in the corners.\n\n\n\nYou can see on the image that these fields are connected.  \nThe fields are just there for the positioning and I told before that the qr code will be always positioned correctly so you can ignore them.\n\n### Mask information\n\nThe bits next to the positioning fields give us information about the mask and the error correction level the qr code uses. I wrote above that it is always mask 0 and always error correction level H, so we can also ignore that stuff.\n\n\n\n### Reading information\n\nNow we start with the important stuff. Go through the qr code like the red arrow shows on this picture (btw I made it with paint so don't judge me)\n- We start in the lower right corner\n- Then we go one to the left\n- Then we go one up and one to the right\n- And so on just look the red arrow\n\n___Important:___ Remember that everything inside the blue boxes has another purpose than encoding information, so don't forget to skip those parts.\n\n\n\nIn the image below, you may find the complete pattern to read information in a QR-code. But keep in mind you'll be handling only \"QR-code version 1\", so you don't need to read the full set of data (see picture at the top if needed).\n\n\n\n### Decoding information\n\nWe have to build a bit sequence now. In order to do that we will use mask 0 definition which is `((x+y)%2)==0`, where:\n- x and y are the indexes of our 2 dimensional array (0-based)\n- if the condition of our mask is true, we have to convert the pixel: black -> 0 and white -> 1\n- A mask is used to prevent long sequences of identical bits so that a scanner can better recognize the code\n\nFor each black field add 1 to our bit sequence and for each white field add 0 to our bit sequence, don't forget that many bits get converted because of mask 0.\n\nImportant (!): Since we're limiting ourselves to version 1, we have to continue that process only until our bit sequence is 76 long, because the input will never be longer than eight characters.\n\nAt the end you get a bit sequence:\n```\nbits:      0100000000100100100001101001000011101100000100011110110000010001111011001111\nlegend:    MMMMssssssss...\n\n- \"M\": mode bits (4 bits)\n- \"s\": size message bits (8 bits)\n- ...: message bits and error correction information\n```\n\nThis bit sequence is representing the following information\n* First 4 bits show mode: `0100`. This isn't important for us, because I told you before that we will use always byte mode in this kata.\n* The following 8 bits show the length of the encoded word: `00000010`. This is the binary representation of number 2, so we know our word is 2 characters long.\n* The following bits are data bits followed by error correction bits (but you can ignore error correction bits, because there won't be any errors). We know our word is 2 chars long, so we take the next 16 bits (because 1 char=8 bits):\n\nSince we don't handle in this kata error correction, we got our word/output.\n\nGood luck :)\n\"\"\"", "inputs": [[[[1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1]]], [[[1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1], [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0], [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1]]], [[[1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1]]], [[[1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1]]]], "outputs": [["Hi"], ["Warrior"], ["T3st"], ["T!st"]], "starter_code": "def scanner(qrc):", "canonical_solution": "def scanner(qrc):\n    bits = ''.join((str(qrc[x][y] ^ ((x + y) % 2 == 0)) for x, y in ticTocGen()))\n    size = int(bits[4:12], 2)\n    return ''.join((chr(int(bits[i:i + 8], 2)) for i in range(12, 12 + 8 * size, 8)))\n\ndef ticTocGen():\n    x, y, dx = (20, 20, -1)\n    while y > 13:\n        yield from ((x, y - dy) for dy in range(2))\n        x += dx\n        if x == 8 or x > 20:\n            dx *= -1\n            y -= 2\n            x = x == 8 and 9 or 20", "entry_point": "scanner", "task_id": "TACO_lite/1260", "input_output_examples": [[[100, []]], [["100.00"]]]}
{"requirement": "def disarium_number(n):\"\"\"# Definition\n\n**_Disarium number_** is the number that *The sum of its digits powered with their respective positions is equal to the number itself*.\n\n____\n\n# Task\n\n**_Given_** a number, **_Find if it is Disarium or not_** . \n____\n\n# Warm-up (Highly recommended)\n\n# [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n___\n\n# Notes \n\n* **_Number_** *passed is always*  **_Positive_** .\n* **_Return_** *the result as* **_String_**\n\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[1024], [1306], [1999], [2427], [1048576], [2646798]], "outputs": [["Not !!"], ["Disarium !!"], ["Not !!"], ["Disarium !!"], ["Not !!"], ["Disarium !!"]], "starter_code": "def disarium_number(n):", "canonical_solution": "def disarium_number(n):\n    return 'Disarium !!' if n == sum((int(d) ** i for i, d in enumerate(str(n), 1))) else 'Not !!'", "entry_point": "disarium_number", "task_id": "TACO_lite/1261", "input_output_examples": [[["Did it work?"]], [["Did ti work?"]]]}
{"requirement": "def winner(deck_Steve, deck_Josh):\"\"\"\nSteve and Josh are bored and want to play something. They don't want to think too much, so they come up with a really simple game. Write a function called winner and figure out who is going to win.\n\nThey are dealt the same number of cards. They both flip the card on the top of their deck. Whoever has a card with higher value wins the round and gets one point (if the cards are of the same value, neither of them gets a point). After this, the two cards are discarded and they flip another card from the top of their deck. They do this until they have no cards left.\n\n`deckSteve` and `deckJosh` are arrays representing their decks. They are filled with *cards*, represented by a single character. The card rank is as follows (from lowest to highest):\n```\n'2','3','4','5','6','7','8','9','T','J','Q','K','A'\n```\n\nEvery card may appear in the deck more than once. Figure out who is going to win and return who wins and with what score:\n* `\"Steve wins x to y\"` if Steve wins; where `x` is Steve's score, `y` is Josh's score;\n* `\"Josh wins x to y\"` if Josh wins; where `x` is Josh's score, `y` is Steve's score;\n* `\"Tie\"` if the score is tied at the end of the game.\n\"\"\"", "inputs": [[["A", "7", "8"], ["K", "5", "9"]], [["T"], ["T"]], [["T", "9"], ["T", "8"]], [[], []]], "outputs": [["Steve wins 2 to 1"], ["Tie"], ["Steve wins 1 to 0"], ["Tie"]], "starter_code": "def winner(deck_Steve, deck_Josh):", "canonical_solution": "def winner(deck_Steve, deck_Josh):\n    deck = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']\n    Steve = 0\n    Josh = 0\n    for i in range(len(deck_Steve)):\n        if deck.index(deck_Steve[i]) > deck.index(deck_Josh[i]):\n            Steve += 1\n        elif deck.index(deck_Steve[i]) < deck.index(deck_Josh[i]):\n            Josh += 1\n        else:\n            continue\n    if Steve > Josh:\n        return 'Steve wins ' + str(Steve) + ' to ' + str(Josh)\n    elif Josh > Steve:\n        return 'Josh wins ' + str(Josh) + ' to ' + str(Steve)\n    else:\n        return 'Tie'", "entry_point": "winner", "task_id": "TACO_lite/1264", "input_output_examples": [[["1123"], ["211213"], [""]], [["211213"], ["1221121113"], [""]]]}
{"requirement": "def change_case(label, target):\"\"\"\nIn this kata, you will make a function that converts between `camelCase`, `snake_case`, and `kebab-case`.\n\nYou must write a function that changes to a given case. It must be able to handle all three case types:\n\nYour function must deal with invalid input as shown, though it will only be passed strings. Furthermore, all valid identifiers will be lowercase except when necessary, in other words on word boundaries in `camelCase`.\n\n_**(Any translations would be greatly appreciated!)**_\n\"\"\"", "inputs": [["snakeCase", "snake"], ["some-lisp-name", "camel"], ["map_to_all", "kebab"], ["doHTMLRequest", "kebab"], ["invalid-inPut_bad", "kebab"], ["valid-input", "huh???"], ["", "camel"], ["snake-kebab_case", "kebab"], ["snakeCamel_case", "snake"], ["kebabCamel-case", "snake"], ["case-Camel", "kebab"]], "outputs": [["snake_case"], ["someLispName"], ["map-to-all"], ["do-h-t-m-l-request"], [null], [null], [""], [null], [null], [null], [null]], "starter_code": "def change_case(label, target):", "canonical_solution": "import re\n\ndef change_case(label, target):\n    if ('_' in label) + ('-' in label) + (label != label.lower()) > 1:\n        return\n    if target == 'snake':\n        return re.sub('([A-Z])', '_\\\\1', label.replace('-', '_')).lower()\n    if target == 'kebab':\n        return re.sub('([A-Z])', '-\\\\1', label.replace('_', '-')).lower()\n    if target == 'camel':\n        return re.sub('([_-])([a-z])', lambda m: m.group(2).upper(), label)", "entry_point": "change_case", "task_id": "TACO_lite/1268", "input_output_examples": [[[[3, 2, 10, 4, 1, 6, 9], 15], [[0, 0, 0], 0]], [[true], [true]]]}
{"requirement": "def candies(s):\"\"\"\n# Description\n\"It's the end of trick-or-treating and we have a list/array representing how much candy each child in our group has made out with. We don't want the kids to start arguing, and using our parental intuition we know trouble is brewing as many of the children in the group have received different amounts of candy from each home. \n\nSo we want each child to have the same amount of candies, only we can't exactly take any candy away from the kids, that would be even worse. Instead we decide to give each child extra candy until they all have the same amount.\n# Task\nYour job is to find out how much candy each child has, and give them each additional candy until they too have as much as the child(ren) with the most candy. You also want to keep a total of how much candy you've handed out because reasons.\"\n\nYour job is to give all the kids the same amount of candies as the kid with the most candies and then return the total number candies that have been given out. If there are no kids, or only one, return -1.\n\"\"\"", "inputs": [[[5, 8, 6, 4]], [[1, 2, 4, 6]], [[1, 2]], [[4, 2]], [[1, 3, 3, 7]], [[7, 7, 7, 7]], [[17, 20, 50, 61, 42, 44]], [[0]], [[]], [[4]], [[null]]], "outputs": [[9], [11], [1], [2], [14], [0], [132], [-1], [-1], [-1], [-1]], "starter_code": "def candies(s):", "canonical_solution": "def candies(s):\n    if not s or len(s) == 1:\n        return -1\n    return len(s) * max(s) - sum(s)", "entry_point": "candies", "task_id": "TACO_lite/1273", "input_output_examples": [[["Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated."]], [["Beautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated."]]]}
{"requirement": "def solve(a, b):\"\"\"Given two arrays of strings, return the number of times each string of the second array appears in the first array.\n\nGood luck!\n\nIf you like this Kata, please try:\n\n[Word values](https://www.codewars.com/kata/598d91785d4ce3ec4f000018)\n\n[Non-even substrings](https://www.codewars.com/kata/59da47fa27ee00a8b90000b4)\n\"\"\"", "inputs": [[["abc", "abc", "xyz", "abcd", "cde"], ["abc", "cde", "uap"]], [["abc", "xyz", "abc", "xyz", "cde"], ["abc", "cde", "xyz"]], [["quick", "brown", "fox", "is", "quick"], ["quick", "abc", "fox"]]], "outputs": [[[2, 1, 0]], [[2, 1, 2]], [[2, 0, 1]]], "starter_code": "def solve(a, b):", "canonical_solution": "def solve(a, b):\n    return [a.count(e) for e in b]", "entry_point": "solve", "task_id": "TACO_lite/1274", "input_output_examples": [[["", "azyb"], ["Hi", "cats"], ["This is a good day", "bbaa"]], [[""], ["OR"], ["AAAAAAGACAGAYA"]]]}
{"requirement": "def dating_range(age):\"\"\"Everybody knows the classic [\"half your age plus seven\"](https://en.wikipedia.org/wiki/Age_disparity_in_sexual_relationships#The_.22half-your-age-plus-seven.22_rule) dating rule that a lot of people follow (including myself). It's the 'recommended' age range in which to date someone. \n\n\n\n\n```minimum age <= your age <= maximum age```\n#Task\n\nGiven an integer (1 <= n <= 100) representing a person's age, return their minimum and maximum age range.\n\nThis equation doesn't work when the age <= 14, so use this equation instead:\n```\nmin = age - 0.10 * age\nmax = age + 0.10 * age\n```\nYou should floor all your answers so that an integer is given instead of a float (which doesn't represent age). ```Return your answer in the form [min]-[max]```\n\"\"\"", "inputs": [[17], [40], [15], [35], [10], [53], [19], [12], [7], [33]], "outputs": [["15-20"], ["27-66"], ["14-16"], ["24-56"], ["9-11"], ["33-92"], ["16-24"], ["10-13"], ["6-7"], ["23-52"]], "starter_code": "def dating_range(age):", "canonical_solution": "def dating_range(age):\n    if age <= 14:\n        min = age - 0.1 * age\n        max = age + 0.1 * age\n    else:\n        min = age / 2 + 7\n        max = (age - 7) * 2\n    return str(int(min)) + '-' + str(int(max))", "entry_point": "dating_range", "task_id": "TACO_lite/1275", "input_output_examples": [[["Bill"], ["Frank"], [""]], [[[["B", "i"], ["l", "l"]]], [[["F", "r", "a"], ["n", "k", "."], [".", ".", "."]]], ["name must be at least one letter"]]]}
{"requirement": "def basereduct(x):\"\"\"# Base reduction\n\n## Input\n\nA positive integer:\n```\n0 < n < 1000000000\n```\n\n## Output\n\nThe end result of the base reduction.\n\nIf it cannot be fully reduced (reduced down to a single-digit number), return -1.\n\nAssume that if 150 conversions from base 11 take place in a row, the number cannot be fully reduced.\n\n## Description\n\nBase reduction is a process where a number is inputted, repeatedly converted into another base, and then outputted if it cannot be reduced anymore. If it cannot be fully reduced, return -1.\n\nDuring the base conversions, the number is converted from the lowest base it can be converted from into base 10. For the lowest possible base the number can be converted into is 10, convert the number from base 11 to base 10.\n\nIn the end, you should get a number that cannot be reduced by this process (a single digit number).\n\"\"\"", "inputs": [[10], [5], [7], [7], [15]], "outputs": [[2], [5], [7], [7], [3]], "starter_code": "def basereduct(x):", "canonical_solution": "def basereduct(x):\n    for _ in range(150):\n        x = int(str(x), int(max(str(x))) + 1 + ('9' in str(x)))\n        if x < 10:\n            return x\n    return -1", "entry_point": "basereduct", "task_id": "TACO_lite/1278", "input_output_examples": [[["all this,,,, used to be trees,,,,,,"]], [["all this, used to be trees"]]]}
{"requirement": "def p_num(n):\"\"\"\n## Task\n\nYou have to write three functions namely - `PNum, GPNum and SPNum` (JS, Coffee), `p_num, g_p_num and s_p_num` (Python and Ruby), `pNum, gpNum and spNum` (Java, C#), `p-num, gp-num and sp-num` (Clojure) - to check whether a given argument `n` is a Pentagonal, Generalized Pentagonal, or Square Pentagonal Number, and return `true` if it is and `false` otherwise.\n\n### Description\n\n\n\n\n`Pentagonal Numbers` - The nth pentagonal number Pn is the number of distinct dots in a pattern of dots consisting of the outlines of regular pentagons with sides up to n dots (means the side contains n number of dots), when the pentagons are overlaid so that they share one corner vertex.\n\n\n`Generalized Pentagonal Numbers` - All the Pentagonal Numbers along with the number of dots inside the outlines of all the pentagons of a pattern forming a pentagonal number pentagon are called Generalized Pentagonal Numbers.\n\n`Square Pentagonal Numbers` - The numbers which are Pentagonal Numbers and are also a perfect square are called Square Pentagonal Numbers. \n\n#### Note: \n* Pn = Nth Pentagonal Number\n* Gpn = Nth Generalized Pentagonal Number\n\"\"\"", "inputs": [[0], [1], [2], [3], [4], [5], [100]], "outputs": [[false], [true], [false], [false], [false], [true], [false]], "starter_code": "def p_num(n):", "canonical_solution": "def p_num(n):\n    r = (1 + (24 * n + 1) ** 0.5) / 6\n    return r.is_integer() and (3 * r ** 2 - r) / 2 == n\n\ndef g_p_num(n):\n    r = (1 + 24 * n) ** 0.5 % 6\n    return r != 0 and r.is_integer()\ns_p_num = lambda n: (n ** 0.5).is_integer() and p_num(n) and g_p_num(n)", "entry_point": "p_num", "task_id": "TACO_lite/1283", "input_output_examples": [[[87]], [[4]]]}
{"requirement": "def over_the_road(address, n):\"\"\"\n### Task\nYou've just moved into a perfectly straight street with exactly ```n``` identical houses on either side of the road. Naturally, you would like to find out the house number of the people on the other side of the street. The street looks something like this:\n\n--------------------\n### Street\n```\n1|   |6\n3|   |4\n5|   |2\n```\n\nEvens increase on the right; odds decrease on the left. House numbers start at ```1``` and increase without gaps.\nWhen ```n = 3```, ```1``` is opposite ```6```, ```3``` opposite ```4```, and ```5``` opposite ```2```. \n\n-----------------\n### Example\nGiven your house number ```address``` and length of street ```n```, give the house number on the opposite side of the street.\n\n\nBoth n and address could get upto 500 billion with over 200 random tests.\n\"\"\"", "inputs": [[1, 3], [3, 3], [2, 3], [3, 5], [7, 11], [10, 22], [20, 3400], [9, 26], [20, 10]], "outputs": [[6], [4], [5], [8], [16], [35], [6781], [44], [1]], "starter_code": "def over_the_road(address, n):", "canonical_solution": "def over_the_road(address, n):\n    return 2 * n + 1 - address", "entry_point": "over_the_road", "task_id": "TACO_lite/1284", "input_output_examples": [[[[["bad", "bAd", "bad"], ["bad", "bAd", "bad"], ["bad", "bAd", "bad"]]]], [["Fail!"]]]}
{"requirement": "def repeat_adjacent(string):\n\t\"\"\"\nYou are given a string `s`. Let's call its substring a group, if all letters in it are adjacent and the same(such as `\"aa\",\"bbb\",\"cccc\"`..). Let's call the substiring with 2 or more adjacent group a big group(such as `\"aabb\",\"bbccc\"`...).\n\nYour task is to count the number of `big groups` in the given string.\n\n# Input/Output\n\n\n - `[input]` string `s`\n\n  A string of lowercase Latin letters.\n\n\n - `[output]` an integer\n\n  The number of big groups.\n\"\"\"", "inputs": [["ccccoodeffffiiighhhhhhhhhhttttttts"], ["soooooldieeeeeer"], ["ccccoooooooooooooooooooooooddee"], ["wwwwaaaarrioooorrrrr"], ["gztxxxxxggggggggggggsssssssbbbbbeeeeeeehhhmmmmmmmitttttttlllllhkppppp"]], "outputs": [[3], [0], [1], [2], [2]], "starter_code": "def repeat_adjacent(string):\n\t", "canonical_solution": "from re import findall\nrepeat_adjacent = lambda s: len(findall('((.)\\\\2+(?!\\\\2)){2,}', s))", "entry_point": "repeat_adjacent", "task_id": "TACO_lite/1285", "input_output_examples": [[["Hello, World!"], ["aaaaaaaaaaaa"]], [["1112111121311"], ["123456789101112"]]]}
{"requirement": "def solve(a, b):\"\"\"\nConsider the number `1176` and its square (`1176 * 1176) = 1382976`. Notice that:\n\n* the first two digits of `1176` form a prime.\n* the first two digits of the square `1382976` also form a prime.\n* the last two digits of `1176` and `1382976` are the same. \n\nGiven two numbers representing a range (`a, b`), how many numbers satisfy this property within that range? (`a <= n < b`)\n\nThe upper bound for the range will not exceed `1,000,000`.\n\nGood luck!\n\nIf you like this Kata, please try:\n\n[Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e995880000e3)\n\n[Alphabet symmetry](https://www.codewars.com/kata/59d9ff9f7905dfeed50000b0)\n\n[Upside down numbers](https://www.codewars.com/kata/59f7597716049833200001eb)\n\"\"\"", "inputs": [[2, 1200], [1176, 1200], [2, 100000], [2, 1000000], [100000, 1000000]], "outputs": [[1], [1], [247], [2549], [2302]], "starter_code": "def solve(a, b):", "canonical_solution": "ls = ['11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83', '89', '97']\n\ndef solve(a, b):\n    i = a\n    s = 0\n    while i < b:\n        if (i * i - i) % 100 == 0 and str(i)[:2] in ls and (str(i * i)[:2] in ls):\n            s += 1\n        i += 1\n    return s", "entry_point": "solve", "task_id": "TACO_lite/1290", "input_output_examples": [[["din"], ["recede"], ["Success"], ["(( @"]], [["((("], ["()()()"], ["())())"], ["))(("]]]}
{"requirement": "def pick_peaks(arr):\"\"\"\nIn this kata, you will write a function that returns the positions and the values of the \"peaks\" (or local maxima) of a numeric array.\n\nThe output will be returned as an object with two properties: pos and peaks. Both of these properties should be arrays. If there is no peak in the given array, then the output should be `{pos: [], peaks: []}`.\n\n~~~if:php\nThe output will be returned as an associative array with two key-value pairs: `'pos'` and `'peaks'`.  Both of them should be (non-associative) arrays.  If there is no peak in the given array, simply return `['pos' => [], 'peaks' => []]`.\n~~~\n~~~if:cpp\nThe output will be returned as an object of type `PeakData` which has two members: `pos` and `peaks`.  Both of these members should be `vector`s.  If there is no peak in the given array then the output should be a `PeakData` with an empty vector for both the `pos` and `peaks` members.\n\n`PeakData` is defined in Preloaded as follows:\n\n~~~\n~~~if:java\nThe output will be returned as a ``Map>` with two key-value pairs: `\"pos\"` and `\"peaks\"`. If there is no peak in the given array, simply return `{\"pos\" => [], \"peaks\" => []}`.\n~~~\n~~~if:csharp\nThe output will be returned as a `Dictionary>` with two key-value pairs: `\"pos\"` and `\"peaks\"`. \nIf there is no peak in the given array, simply return `{\"pos\" => new List(), \"peaks\" => new List()}`.\n~~~\n\nAll input arrays will be valid integer arrays (although it could still be empty), so you won't need to validate the input.\n\nThe first and last elements of the array will not be considered as peaks (in the context of a mathematical function, we don't know what is after and before and therefore, we don't know if it is a peak or not).\n\nAlso, beware of plateaus !!! In case of a plateau-peak, please only return the position and value of the beginning of the plateau.\n\nHave fun!\n\"\"\"", "inputs": [[[1, 2, 3, 6, 4, 1, 2, 3, 2, 1]], [[3, 2, 3, 6, 4, 1, 2, 3, 2, 1, 2, 3]], [[3, 2, 3, 6, 4, 1, 2, 3, 2, 1, 2, 2, 2, 1]], [[2, 1, 3, 1, 2, 2, 2, 2, 1]], [[2, 1, 3, 1, 2, 2, 2, 2]], [[2, 1, 3, 2, 2, 2, 2, 5, 6]], [[2, 1, 3, 2, 2, 2, 2, 1]], [[1, 2, 5, 4, 3, 2, 3, 6, 4, 1, 2, 3, 3, 4, 5, 3, 2, 1, 2, 3, 5, 5, 4, 3]], [[]], [[1, 1, 1, 1]]], "outputs": [[{"pos": [3, 7], "peaks": [6, 3]}], [{"pos": [3, 7], "peaks": [6, 3]}], [{"pos": [3, 7, 10], "peaks": [6, 3, 2]}], [{"pos": [2, 4], "peaks": [3, 2]}], [{"pos": [2], "peaks": [3]}], [{"pos": [2], "peaks": [3]}], [{"pos": [2], "peaks": [3]}], [{"pos": [2, 7, 14, 20], "peaks": [5, 6, 5, 5]}], [{"pos": [], "peaks": []}], [{"pos": [], "peaks": []}]], "starter_code": "def pick_peaks(arr):", "canonical_solution": "def pick_peaks(arr):\n    pos = []\n    prob_peak = False\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            prob_peak = i\n        elif arr[i] < arr[i - 1] and prob_peak:\n            pos.append(prob_peak)\n            prob_peak = False\n    return {'pos': pos, 'peaks': [arr[i] for i in pos]}", "entry_point": "pick_peaks", "task_id": "TACO_lite/1293", "input_output_examples": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[2, 2, 2], [4, 2, 6], [8, 8, 2]]], [["Principal Diagonal win!"], ["Secondary Diagonal win!"]]]}
{"requirement": "def flatten(dictionary):\"\"\"\n###Story\nSometimes we are faced with problems when we have a big nested dictionary with which it's hard to work. Now, we need to solve this problem by writing a function that will flatten a given dictionary.\n\n###Info\nPython dictionaries are a convenient data type to store and process configurations. They allow you to store data by keys to create nested structures. You are given a dictionary where the keys are strings and the values are strings or dictionaries. The goal is flatten the dictionary, but save the structures in the keys. The result should be a dictionary without the nested dictionaries. The keys should contain paths that contain the parent keys from the original dictionary. The keys in the path are separated by a `/`. If a value is an empty dictionary, then it should be replaced by an empty string `\"\"`.\n\n***`Input: An original dictionary as a dict.`***\n***`Output: The flattened dictionary as a dict.`***\n***`Precondition:\nKeys in a dictionary are non-empty strings.\nValues in a dictionary are strings or dicts.\nroot_dictionary != {}`***\n\"\"\"", "inputs": [[{"key": "value"}], [{"key": {"deeper": {"more": {"enough": "value"}}}}], [{"empty": {}}], [{"additional": {"place": {"cell": "2", "zone": "1"}}, "job": "scout", "name": {"last": "Drone", "first": "One"}, "recent": {}}], [{"job": {"1": "scout", "2": "worker", "3": "writer", "4": "reader", "5": "learner"}, "name": {"nick": {}, "last": "Drone", "first": "Second"}, "recent": {"places": {"earth": {"NP": "", "NY": "2017", "Louvre": "2015"}}, "times": {"XX": {"1964": "Yes"}, "XXI": {"2064": "Nope"}}}}], [{"Hm": {"What": {"is": {"here": {"?": {}}}}}}], [{"glossary": {"GlossDiv": {"GlossList": {"GlossEntry": {"GlossDef": {"GlossSeeAlso": {"1": "GML", "2": "XML"}, "para": "A meta-markup language, used to create markup languages such as DocBook."}, "GlossSee": "markup", "Acronym": "SGML", "GlossTerm": "Standard Generalized Markup Language", "Abbrev": "ISO 8879:1986", "SortAs": "SGML", "ID": "SGML"}}, "title": "S"}, "title": "example glossary"}, "source": "http://json.org/example"}]], "outputs": [[{"key": "value"}], [{"key/deeper/more/enough": "value"}], [{"empty": ""}], [{"additional/place/zone": "1", "job": "scout", "additional/place/cell": "2", "name/first": "One", "name/last": "Drone", "recent": ""}], [{"job/1": "scout", "recent/places/earth/NY": "2017", "job/3": "writer", "job/2": "worker", "job/5": "learner", "job/4": "reader", "recent/places/earth/NP": "", "recent/places/earth/Louvre": "2015", "recent/times/XX/1964": "Yes", "recent/times/XXI/2064": "Nope", "name/first": "Second", "name/last": "Drone", "name/nick": ""}], [{"Hm/What/is/here/?": ""}], [{"glossary/GlossDiv/GlossList/GlossEntry/GlossDef/para": "A meta-markup language, used to create markup languages such as DocBook.", "glossary/title": "example glossary", "glossary/GlossDiv/GlossList/GlossEntry/Abbrev": "ISO 8879:1986", "glossary/GlossDiv/GlossList/GlossEntry/SortAs": "SGML", "glossary/GlossDiv/GlossList/GlossEntry/Acronym": "SGML", "glossary/GlossDiv/GlossList/GlossEntry/GlossTerm": "Standard Generalized Markup Language", "glossary/GlossDiv/title": "S", "source": "http://json.org/example", "glossary/GlossDiv/GlossList/GlossEntry/GlossDef/GlossSeeAlso/2": "XML", "glossary/GlossDiv/GlossList/GlossEntry/ID": "SGML", "glossary/GlossDiv/GlossList/GlossEntry/GlossDef/GlossSeeAlso/1": "GML", "glossary/GlossDiv/GlossList/GlossEntry/GlossSee": "markup"}]], "starter_code": "def flatten(dictionary):", "canonical_solution": "def flatten(dictionary):\n    stack = [((), dictionary)]\n    result = {}\n    while stack:\n        path, current = stack.pop()\n        for k, v in current.items():\n            if v == {}:\n                result['/'.join(path + (k,))] = ''\n            if isinstance(v, dict):\n                stack.append((path + (k,), v))\n            else:\n                result['/'.join(path + (k,))] = v\n    return result", "entry_point": "flatten", "task_id": "TACO_lite/1294", "input_output_examples": [[[120], [24], [150]], [["5!"], ["4!"], ["None"]]]}
{"requirement": "def encode_resistor_colors(ohms_string):\"\"\"\n## Overview\nResistors are electrical components marked with colorful stripes/bands to indicate both their resistance value in ohms and how tight a tolerance that value has. If you did my Resistor Color Codes kata, you wrote a function which took a string containing a resistor's band colors, and returned a string identifying the resistor's ohms and tolerance values.\n\nWell, now you need that in reverse: The previous owner of your \"Beyond-Ultimate Raspberry Pi Starter Kit\" (as featured in my Fizz Buzz Cuckoo Clock kata) had emptied all the tiny labeled zip-lock bags of components into the box, so that for each resistor you need for a project, instead of looking for text on a label, you need to find one with the sequence of band colors that matches the ohms value you need.\n\n## The resistor color codes\nYou can see this Wikipedia page for a colorful chart, but the basic resistor color codes are:\n\n0: black, 1: brown, 2: red, 3: orange, 4: yellow, 5: green, 6: blue, 7: violet, 8: gray, 9: white\n\nAll resistors have at least three bands, with the first and second bands indicating the first two digits of the ohms value, and the third indicating the power of ten to multiply them by.\n\nMost resistors also have a fourth band indicating tolerance -- in an electronics kit like yours, the tolerance will always be 5%, which is indicated by a gold band.\n\n## Your mission\nYour function will receive a string containing the ohms value you need, followed by a space and the word \"ohms\" (to avoid Codewars unicode headaches I'm just using the word instead of the ohms unicode symbol). The way an ohms value is formatted depends on the magnitude of the value:\n\n* For resistors less than 1000 ohms, the ohms value is just formatted as the plain number.\n* For resistors greater than or equal to 1000 ohms, but less than 1000000 ohms, the ohms value is divided by 1000, and has a lower-case \"k\" after it.\n* For resistors of 1000000 ohms or greater, the ohms value is divided by 1000000, and has an upper-case \"M\" after it.\n\nTest case resistor values will all be between 10 ohms and 990M ohms.\n\nHave fun!\n\"\"\"", "inputs": [["10 ohms"], ["47 ohms"], ["100 ohms"], ["220 ohms"], ["330 ohms"], ["470 ohms"], ["680 ohms"], ["1k ohms"], ["4.7k ohms"], ["10k ohms"], ["22k ohms"], ["47k ohms"], ["100k ohms"], ["330k ohms"], ["1M ohms"], ["2M ohms"]], "outputs": [["brown black black gold"], ["yellow violet black gold"], ["brown black brown gold"], ["red red brown gold"], ["orange orange brown gold"], ["yellow violet brown gold"], ["blue gray brown gold"], ["brown black red gold"], ["yellow violet red gold"], ["brown black orange gold"], ["red red orange gold"], ["yellow violet orange gold"], ["brown black yellow gold"], ["orange orange yellow gold"], ["brown black green gold"], ["red black green gold"]], "starter_code": "def encode_resistor_colors(ohms_string):", "canonical_solution": "c = 'black brown red orange yellow green blue violet gray white'.split()\n\ndef encode_resistor_colors(ohms_string):\n    ohms = str(int(eval(ohms_string.replace('k', '*1000').replace('M', '*1000000').split()[0])))\n    return '%s %s %s gold' % (c[int(ohms[0])], c[int(ohms[1])], c[len(ohms[2:])])", "entry_point": "encode_resistor_colors", "task_id": "TACO_lite/1298", "input_output_examples": [[[5], [10]], [[60], [2520]]]}
{"requirement": "def sum_of_n(n):\"\"\"A [sequence or a series](http://world.mathigon.org/Sequences), in mathematics, is a string of objects, like numbers, that follow a particular pattern. The individual elements in a sequence are called terms. \n\nIn this kata, we will be using a more complicated sequence: `0, 1, 3, 6, 10, 15, 21, 28, ...`\nThis sequence is generated with the pattern: _\"the nth term is the sum of numbers from 0 to n, inclusive\"_.\n\n## Your Task\n\nComplete the function that takes an integer `n` and returns a list/array of length `abs(n) + 1` of the arithmetic series explained above. When`n < 0` return the sequence with negative terms.\n\"\"\"", "inputs": [[3], [-4], [1], [0], [10]], "outputs": [[[0, 1, 3, 6]], [[0, -1, -3, -6, -10]], [[0, 1]], [[0]], [[0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55]]], "starter_code": "def sum_of_n(n):", "canonical_solution": "def sum_of_n(n):\n    return [(-1 if n < 0 else 1) * sum(range(i + 1)) for i in range(abs(n) + 1)]", "entry_point": "sum_of_n", "task_id": "TACO_lite/1302", "input_output_examples": [[[[1, 2, 3, 5, 3, 2, 1]], [[1, 12, 3, 3, 6, 3, 1]], [[10, 20, 30, 40]]], [[3], [2], [-1]]]}
{"requirement": "def not_so_random(b, w):\"\"\"# Task\n You are a magician. You're going to perform a trick.\n\n You have `b` black marbles and `w` white marbles in your magic hat, and an infinite supply of black and white marbles that you can pull out of nowhere. \n \n You ask your audience to repeatedly remove a pair of marbles from your hat and, for each pair removed, you add one marble to the hat according to the following rule until there is only 1 marble left. \n\n If the marbles of the pair that is removed are of the same color, you add a white marble to the hat. Otherwise, if one is black and one is white, you add a black marble.\n \n Given the initial number of black and white marbles in your hat, your trick is to predict the color of the last marble.\n \n Note: A magician may confuse your eyes, but not your mind ;-)\n\n# Input/Output\n\n\n - `[input]` integer `b`\n\n  Initial number of black marbles in the hat. \n  \n  `1 <= b <= 10^9`\n\n\n - `[input]` integer `w`\n\n  Initial number of white marbles in the hat. \n  \n  `1 <= w <= 10^9`\n\n\n - `[output]` a string\n\n  `\"Black\"` or `\"White\"` if you can safely predict the color of the last marble. If not, return `\"Unsure\"`.\n\"\"\"", "inputs": [[1, 1], [2, 1], [1, 2], [2, 2], [6, 9], [10000, 10000], [11111, 22222]], "outputs": [["Black"], ["White"], ["Black"], ["White"], ["White"], ["White"], ["Black"]], "starter_code": "def not_so_random(b, w):", "canonical_solution": "def not_so_random(b, w):\n    return ['White', 'Black'][b % 2]", "entry_point": "not_so_random", "task_id": "TACO_lite/1304", "input_output_examples": [[[24, 2], [100, 1], [20, 3]], [[8], [1], [18]]]}
{"requirement": "def big_primefac_div(n):\"\"\"\nGiven a certain integer ```n```, we need a function ```big_primefac_div()```, that give an array with the highest prime factor and the highest divisor (not equal to n).\n\nIf n is a prime number the function will output an empty list.\n\nIf ```n``` is an negative integer number, it should be considered the division with tha absolute number of the value.\n\nIf ```n``` is a float type, will be rejected if it has a decimal part with some digits different than 0. The output \"The number has a decimal part. No Results\". But  ```n ``` will be converted automatically to an integer if all the digits of the decimal part are 0.\n\nOptimization and fast algorithms are a key factor to solve this kata.\nHappy coding and enjoy it!\n\"\"\"", "inputs": [[100], [1969], [997], [-1800], [-1800.1]], "outputs": [[[5, 50]], [[179, 179]], [[]], [[5, 900]], ["The number has a decimal part. No Results"]], "starter_code": "def big_primefac_div(n):", "canonical_solution": "def big_primefac_div(n):\n    bpf, bd = (0, 1)\n    frac = []\n    if n % 1 != 0:\n        return 'The number has a decimal part. No Results'\n    else:\n        n = abs(int(n))\n        n_copy = n\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n            frac.append(i)\n        else:\n            i += 1\n    if n > 1:\n        frac.append(n)\n    bpf = max(frac)\n    bd = n_copy / frac[0]\n    if bpf == 0 or bd == 1:\n        return []\n    else:\n        return [bpf, bd]", "entry_point": "big_primefac_div", "task_id": "TACO_lite/1305", "input_output_examples": [[[9], [79], [23], [556847], [4343456], [89098], [32]], [["Jumping!!"], ["Not!!"], ["Jumping!!"], ["Not!!"], ["Jumping!!"], ["Not!!"], ["Jumping!!"]]]}
{"requirement": "def optimal_number_of_coins(n, coins):\"\"\"Coffee Vending Machine Problems [Part 1]\n\nYou have a vending machine, but it can not give the change back. You decide to implement this functionality. First of all, you need to know the minimum number of coins for this operation (i'm sure you don't want to return 100 pennys instead of 1$ coin).\nSo, find an optimal number of coins required, if you have unlimited set of coins with given denominations.\n\nAssume all inputs are valid positive integers, and every set of coin denominations has len 4 for simplicity;\n\nHave fun =)\n\"\"\"", "inputs": [[1, [1, 2, 5, 10]], [5, [1, 2, 5, 10]], [6, [1, 3, 5, 10]], [10, [1, 2, 5, 10]], [12, [1, 3, 5, 10]], [53, [1, 2, 5, 25]], [7, [1, 1, 1, 25]], [76, [1, 3, 4, 10]], [33, [1, 6, 9, 10]], [63, [1, 2, 9, 10]], [239, [1, 2, 3, 10]], [333, [1, 1, 5, 25]], [543, [1, 3, 5, 25]], [777, [1, 2, 3, 10]], [18, [1, 3, 9, 10]], [16, [1, 8, 9, 10]], [14, [1, 3, 7, 9]]], "outputs": [[1], [1], [2], [1], [3], [4], [7], [9], [4], [7], [26], [17], [25], [80], [2], [2], [2]], "starter_code": "def optimal_number_of_coins(n, coins):", "canonical_solution": "from functools import lru_cache\n\ndef optimal_number_of_coins(n, coins):\n\n    def f(amount: int, idx: int) -> float:\n        q, r = divmod(amount, coins[idx])\n        if r == 0:\n            return q\n        elif amount < 0 or idx <= 0:\n            return float('inf')\n        else:\n            return min(1 + f(amount - coins[idx], idx), f(amount, idx - 1))\n    coins = sorted(set(coins))\n    return f(n, len(coins) - 1)", "entry_point": "optimal_number_of_coins", "task_id": "TACO_lite/1307", "input_output_examples": [[[10, [2, 1, 3], 6], [10, [1, 2, 3], 15]], [[10], [10]]]}
{"requirement": "def adjacent_element_product(array):\"\"\"\n## Task\n\n**_Given_** *an array of integers* , **_Find_** **_the maximum product_** *obtained from multiplying 2 adjacent numbers in the array*.\n____\n\n# Notes\n\n* **_Array/list_** size is *at least 2*.\n\n* **_Array/list_** numbers could be a *mixture of positives, negatives also zeroes* .\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[[5, 8]], [[5, 1, 1, 8]], [[1, 2, 3]], [[1, 5, 10, 9]], [[4, 12, 3, 1, 5]], [[5, 1, 2, 3, 1, 4]], [[3, 6, -2, -5, 7, 3]], [[9, 5, 10, 2, 24, -1, -48]], [[5, 6, -4, 2, 3, 2, -23]], [[-23, 4, -5, 99, -27, 329, -2, 7, -921]], [[1, 0, 1, 0, 1000]], [[1, 2, 3, 0]]], "outputs": [[40], [8], [6], [90], [48], [6], [21], [50], [30], [-14], [0], [6]], "starter_code": "def adjacent_element_product(array):", "canonical_solution": "def adjacent_element_product(array):\n    return max((a * b for a, b in zip(array, array[1:])))", "entry_point": "adjacent_element_product", "task_id": "TACO_lite/1308", "input_output_examples": [[["myCamelCasedString"]], [["my-camel-cased-string"]]]}
{"requirement": "def almost_increasing_sequence(sequence):\"\"\"\n# Task\n Given a `sequence` of integers, check whether it is possible to obtain a strictly increasing sequence by erasing no more than one element from it.\n\n# Input/Output\n\n\n - `[input]` integer array `sequence`\n\n    Constraints: `2 ≤ sequence.length ≤ 1000, -10000 ≤ sequence[i] ≤ 10000.`\n\n\n - `[output]` a boolean value\n\n    `true` if it is possible, `false` otherwise.\n\"\"\"", "inputs": [[[1, 3, 2, 1]], [[1, 3, 2]], [[1, 2, 3]], [[1, 2, 3, 1]], [[1, 4, 10, 4, 2]], [[10, 1, 2, 3, 4, 5]], [[1, 1, 1, 2, 3]], [[0, -2, 5, 6]], [[1, 1]], [[4, 5, 6, 1, 2, 3]], [[149, 15, 23, 32, 41, 48, 58, 66, 69, 75, 81, 91, 178, 100, 109, 118, 128, 134, 143]]], "outputs": [[false], [true], [true], [true], [false], [true], [false], [true], [true], [false], [false]], "starter_code": "def almost_increasing_sequence(sequence):", "canonical_solution": "def almost_increasing_sequence(sequence):\n    save, first = (-float('inf'), True)\n    for i, x in enumerate(sequence):\n        if x > save:\n            save = x\n        elif first:\n            if i == 1 or x > sequence[i - 2]:\n                save = x\n            first = False\n        else:\n            return False\n    return True", "entry_point": "almost_increasing_sequence", "task_id": "TACO_lite/1312", "input_output_examples": [[[[2, 5], 1, 3]], [[24]]]}
{"requirement": "def solve(n):\"\"\"\nConsider an array that has no prime numbers, and none of its elements has any prime digit. It would start with: `[1,4,6,8,9,10,14,16,18,..]`. \n\n`12` and `15` are not in the list because `2` and `5` are primes.\n\nYou will be given an integer `n` and your task will be return the number at that index in the array.\n\nGood luck!\n\nIf you like Prime Katas, you will enjoy this Kata: [Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e995880000e3)\n\"\"\"", "inputs": [[10], [50], [100], [150], [200], [300], [400], [500], [1000], [2000], [3000]], "outputs": [[44], [169], [644], [896], [1060], [1668], [4084], [4681], [9110], [18118], [46166]], "starter_code": "def solve(n):", "canonical_solution": "n, forbid = (100000, set('2357'))\nsieve, notPrimes = ([0] * (n + 1), [1])\nfor i in range(2, n + 1):\n    if sieve[i]:\n        if not forbid & set(str(i)):\n            notPrimes.append(i)\n    else:\n        for j in range(i ** 2, n + 1, i):\n            sieve[j] = 1\n\ndef solve(n):\n    return notPrimes[n]", "entry_point": "solve", "task_id": "TACO_lite/1317", "input_output_examples": [[["Your girlscout cookies are ready to ship. Your total comes to tree fiddy"]], [[true]]]}
{"requirement": "def sumevenfibonacci(limit):\"\"\"\n## Sum Even Fibonacci Numbers\n\n* Write a func named sumevenfibonacci that takes a parameter of type int and returns a value of type int\n\n* Generate all of the Fibonacci numbers starting with 1 and 2 and ending on the highest number before exceeding the parameter's value \n\n\n#### Each new number in the Fibonacci sequence is generated by adding the previous two numbers - by starting with 1 and 2(the input could be smaller), the first 10 numbers will be:\n\n* Sum all of the even numbers you generate and return that int\n\"\"\"", "inputs": [[1], [2], [8], [111111], [8675309], [144100000], [65140000], [7347000000], [10000000000000], [123456789000000]], "outputs": [[0], [2], [10], [60696], [4613732], [82790070], [82790070], [6293134512], [8583840088782], [154030760585064]], "starter_code": "def sumevenfibonacci(limit):", "canonical_solution": "def sumevenfibonacci(limit):\n    a, b, s = (1, 1, 0)\n    while a <= limit:\n        if not a % 2:\n            s += a\n        a, b = (b, a + b)\n    return s", "entry_point": "sumevenfibonacci", "task_id": "TACO_lite/1318", "input_output_examples": [[["5457 6238 9823 4311"], ["5457 6238 9323 4311"]], [[true], [false]]]}
{"requirement": "def divisible_by_three(s):\"\"\"A trick I learned in elementary school to determine whether or not a number was divisible by three is to add all of the integers in the number together and to divide the resulting sum by three. If there is no remainder from dividing the sum by three, then the original number is divisible by three as well.\n\nGiven a series of numbers as a string, determine if the number represented by the string is divisible by three.\n\nYou can expect all test case arguments to be strings representing values greater than 0. \n\"\"\"", "inputs": [["123"], ["19254"], ["88"], ["1"], ["963210456"], ["10110101011"], ["9"], ["6363"], ["10987654321"], ["9876543211234567890009"], ["9876543211234567890002"]], "outputs": [[true], [true], [false], [false], [true], [false], [true], [true], [false], [true], [false]], "starter_code": "def divisible_by_three(s):", "canonical_solution": "def divisible_by_three(s):\n    return int(s) % 3 == 0", "entry_point": "divisible_by_three", "task_id": "TACO_lite/1323", "input_output_examples": [[[20, 3], [19, 3], [50, 100]], [[21], [18], [50]]]}
{"requirement": "def rectangles(n, m):\"\"\"# Task\nImagine `n` horizontal lines and `m` vertical lines.\n\nSome of these lines intersect, creating rectangles.\n\nHow many rectangles are there?\n\n# Input & Output\n\n\n- `[input]` integer `n`\n\nNumber of horizontal lines.\n\nConstraints: `0 <= n <= 100`\n\n\n- `[input]` integer `m`\n\nNumber of vertical lines.\n\nConstraints: `0 <= m <= 100`\n\n\n- `[output]` an integer\n\nNumber of rectangles.\n\"\"\"", "inputs": [[2, 3], [2, 2], [1, 1], [0, 1], [3, 3], [100, 100]], "outputs": [[3], [1], [0], [0], [9], [24502500]], "starter_code": "def rectangles(n, m):", "canonical_solution": "def rectangles(n, m):\n    return m * n * (m - 1) * (n - 1) / 4", "entry_point": "rectangles", "task_id": "TACO_lite/1325", "input_output_examples": [[[3], [7]], [[1, 3], [1, 3, 5, 7]]]}
{"requirement": "def new_numeral_system(n):\"\"\"# Task\n Your Informatics teacher at school likes coming up with new ways to help you understand the material. When you started studying numeral systems, he introduced his own numeral system, which he's convinced will help clarify things. His numeral system has base 26, and its digits are represented by English capital letters - `A for 0, B for 1, and so on`.\n\n The teacher assigned you the following numeral system exercise: given a one-digit `number`, you should find all unordered pairs of one-digit numbers whose values add up to the `number`.\n\n# Input/Output\n\n - `[input]` string(char in C#) `number`\n\n   A character representing a correct one-digit number in the new numeral system.\n\n   Constraints: `'A' ≤ number ≤ 'Z'.`\n\n - `[output]` a string array\n\n   An array of strings in the format \"letter1 + letter2\", where \"letter1\" and \"letter2\" are correct one-digit numbers in the new numeral system. The strings should be sorted by \"letter1\".\n\n   Note that \"letter1 + letter2\" and \"letter2 + letter1\" are equal pairs and we don't consider them to be different.\n\"\"\"", "inputs": [["G"], ["A"], ["D"], ["E"], ["O"]], "outputs": [[["A + G", "B + F", "C + E", "D + D"]], [["A + A"]], [["A + D", "B + C"]], [["A + E", "B + D", "C + C"]], [["A + O", "B + N", "C + M", "D + L", "E + K", "F + J", "G + I", "H + H"]]], "starter_code": "def new_numeral_system(n):", "canonical_solution": "def new_numeral_system(n):\n    a = [c for c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' if c <= n]\n    return ['{} + {}'.format(a[i], a[-1 - i]) for i in range((len(a) + 1) // 2)]", "entry_point": "new_numeral_system", "task_id": "TACO_lite/1327", "input_output_examples": [[["5 * 4 + 6"]], [["2.60000e+01"]]]}
{"requirement": "def remove(s):\"\"\"\n### Description:\n\n Remove all exclamation marks from sentence except at the end.\n\"\"\"", "inputs": [["Hi!"], ["Hi!!!"], ["!Hi"], ["!Hi!"], ["Hi! Hi!"], ["Hi"]], "outputs": [["Hi!"], ["Hi!!!"], ["Hi"], ["Hi!"], ["Hi Hi!"], ["Hi"]], "starter_code": "def remove(s):", "canonical_solution": "def remove(s):\n    return s.replace('!', '') + '!' * (len(s) - len(s.rstrip('!')))", "entry_point": "remove", "task_id": "TACO_lite/1328", "input_output_examples": [[[9], [1], [36], [15]], [[6], [1], [12], [8]]]}
{"requirement": "def withdraw(n):\"\"\"\n## Task\n An `ATM` ran out of 10 dollar bills and only has `100, 50 and 20` dollar bills.\n \n Given an amount between `40 and 10000 dollars (inclusive)` and assuming that the ATM wants to use as few bills as possible, determinate the minimal number of 100, 50 and 20 dollar bills the ATM needs to dispense (in that order).\n\n## Input/Output\n\n - `[input]` integer `n`\n  Amount of money to withdraw. Assume that `n` is always exchangeable with `[100, 50, 20]` bills.\n - `[output]` integer array\n  An array of number of `100, 50 and 20` dollar bills needed to complete the withdraw (in that order).\n\"\"\"", "inputs": [[40], [250], [260], [230], [60]], "outputs": [[[0, 0, 2]], [[2, 1, 0]], [[2, 0, 3]], [[1, 1, 4]], [[0, 0, 3]]], "starter_code": "def withdraw(n):", "canonical_solution": "def withdraw(n):\n    n50 = 0\n    n20, r = divmod(n, 20)\n    if r == 10:\n        n20 -= 2\n        n50 += 1\n    n100, n20 = divmod(n20, 5)\n    return [n100, n50, n20]", "entry_point": "withdraw", "task_id": "TACO_lite/1330", "input_output_examples": [[[[1, 1, 1], [2, 5, 7]], [[1, 0, 0, 1], [0, 1, 1, 0]]], [[false], [true]]]}
{"requirement": "def find(arr, n):\"\"\"\nGiven an array of positive integers and a number `n`, count all combinations with repetition of integers that sum to `n`. The length of the sub-arrays should be less than or equal to the length of the initial array.  \n\nGood luck!\n\nIf you like this Kata, please try:\n\n[Array combinations](https://www.codewars.com/kata/59e66e48fc3c499ec5000103)\n\n[Sum of prime-indexed elements](https://www.codewars.com/kata/59f38b033640ce9fc700015b)\n\"\"\"", "inputs": [[[1, 2, 3], 10], [[1, 2, 3], 7], [[1, 2, 3], 5], [[3, 6, 9, 12], 12], [[1, 4, 5, 8], 8], [[3, 6, 9, 12], 15], [[3, 6, 9, 12, 14, 18], 30]], "outputs": [[0], [2], [3], [5], [3], [5], [21]], "starter_code": "def find(arr, n):", "canonical_solution": "from itertools import combinations_with_replacement\n\ndef find(arr, n):\n    return sum((sum(c) == n for x in range(1, len(arr) + 1) for c in combinations_with_replacement(arr, x)))", "entry_point": "find", "task_id": "TACO_lite/1331", "input_output_examples": [[[[4, 3, 1, 2, 5, 10, 6, 7, 9, 8]]], [[30]]]}
{"requirement": "def sort_number(a):\"\"\"**Introduction**\n Little Petya very much likes sequences. However, recently he received a sequence as a gift from his mother.\n Petya didn't like it at all! He decided to make a single replacement. After this replacement, Petya would like to the sequence in increasing order.\n He asks himself: What is the lowest possible value I could have got after making the replacement and sorting the sequence?\n\n**About the replacement**\n Choose exactly one element from the sequence and replace it with another integer > 0. You are **not allowed** to replace a number with itself, or to change no number at all.\n\n**Task**\n Find the lowest possible sequence after performing a valid replacement, and sorting the sequence.\n\n**Input:**\n Input contains sequence with `N` integers. All elements of the sequence > 0. The sequence will never be empty.\n\n**Output:**\n Return sequence with `N` integers — which includes the lowest possible values of each sequence element, after the single replacement and sorting has been performed.\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5]], [[4, 2, 1, 3, 5]], [[2, 3, 4, 5, 6]], [[2, 2, 2]], [[42]], [[5, 6, 1, 2, 3, 1, 3, 45, 7, 1000000000]], [[1, 1, 1]], [[1]], [[134]]], "outputs": [[[1, 1, 2, 3, 4]], [[1, 1, 2, 3, 4]], [[1, 2, 3, 4, 5]], [[1, 2, 2]], [[1]], [[1, 1, 1, 2, 3, 3, 5, 6, 7, 45]], [[1, 1, 2]], [[2]], [[1]]], "starter_code": "def sort_number(a):", "canonical_solution": "def sort_number(a):\n    a = sorted(a)\n    return [1] + a if a.pop() != 1 else a + [2]", "entry_point": "sort_number", "task_id": "TACO_lite/1332", "input_output_examples": [[[4]], [[3, 8]]]}
{"requirement": "def lemming_battle(battlefield, green, blue):\"\"\"# Your task\nOh no... more lemmings!! And in Lemmings Planet a huge battle\nis being fought between the two great rival races: the green\nlemmings and the blue lemmings. Everybody was now assigned\nto battle and they will fight until one of the races completely\ndissapears: the Deadly War has begun!\n\nEvery single lemming has a power measure that describes its\nability to fight. When two single lemmings fight with each one,\nthe lemming with more power survives and the other one dies.\nHowever, the power of the living lemming gets smaller after the\nfight, exactly in the value of the power of the lemming that died.\nIf two lemmings have the same power when they fight, both of\nthem die.\n\nIn the fight between the two races, there are a certain number of battlefields. Each race assigns one\nlemming for each battlefield, starting with the most powerful. So if a race has 5 lemmings\nwith power `{50, 50, 40, 40, 30}` and we have `3` battlefields, then a lemming with power `50` will be assigned\nto battlefield 1, another with `50` power will be assigned to battlefield 2 and last a lemming with power `40` will go to battlefield 3. The other race will do the same.\n\nThe Deadly War is processed by having each race send its best soldiers as described to the battle-\nfields, making a battle round. Then, all battles process at the same time, and some of the lemmings\nwill emerge victorious (but with less power) and some of them will die. The surviving ones will return to their race’s army and then a new round will begin, with each race sending again its best remaining soldiers to the battlefields. If at some point a race does not have enough soldiers to fill all battlefields, then only the ones with soldiers from both races will have a fight.\n\nThe Deadly War ends when one of the races has no more lemmings or when both of them disappear\nat the same time.\n\nGiven the number of battefields and the armies of both races, your task is to discover which race\nwill win the Deadly War and show the power of the surviving soldiers.\n\n## Input\n\nYou are given B, SG and SB, representing respectively the number of battlefields available, a vector of integers size `n` of lemmings in the green army \nand a vector of integers size `n` of lemmings in the blue army  (1 ≤ B, SG, SB ≤ 100000).\n\nThe lemmings in each army do not need to come in any particular order.\n\n## Output\nFor each test case you should return :\n\n• \"Green and Blue died\" if both races died in the same round\n\n• \"Green wins : Each surviving soldier in descending order\" if the green army won the Deadly War\n\n• \"Blue wins : Each surviving soldier in descending order\" if the blue army won the Deadly War\n\"\"\"", "inputs": [[5, [10], [10]], [2, [20, 10], [10, 10, 15]], [3, [50, 40, 30, 40, 50], [50, 30, 30, 20, 60]], [1, [20, 30], [15]]], "outputs": [["Green and Blue died"], ["Blue wins: 5"], ["Green wins: 10 10"], ["Green wins: 20 15"]], "starter_code": "def lemming_battle(battlefield, green, blue):", "canonical_solution": "from heapq import *\n\ndef lemming_battle(battlefield, green, blue):\n    hg, hb = ([-v for v in lst] for lst in (green, blue))\n    heapify(hg)\n    heapify(hb)\n    while hb and hg:\n        tmp_b, tmp_g = ([], [])\n        for _ in range(min(battlefield, len(hg), len(hb))):\n            cmp = heappop(hg) - heappop(hb)\n            if cmp < 0:\n                tmp_g.append(cmp)\n            elif cmp > 0:\n                tmp_b.append(-cmp)\n        for lem in tmp_b:\n            heappush(hb, lem)\n        for lem in tmp_g:\n            heappush(hg, lem)\n    winner, lst = ('Green', hg) if hg else ('Blue', hb)\n    survivors = ' '.join((str(-v) for v in sorted(lst)))\n    return 'Green and Blue died' if not hg and (not hb) else f'{winner} wins: {survivors}'", "entry_point": "lemming_battle", "task_id": "TACO_lite/1334", "input_output_examples": [[[129], [127], [1], [323423]], [[130], [191], [2], [323439]]]}
{"requirement": "def combine_names(first, last):\"\"\"\n### Combine strings function\n```if:coffeescript,haskell,javascript\nCreate a function named `combineNames` that accepts two parameters (first and last name). The function should return the full name.\n```\n```if:python,ruby\nCreate a function named (`combine_names`) that accepts two parameters (first and last name). The function should return the full name.\n```\n```if:csharp\nCreate a function named (`Combine_names`) that accepts two parameters (first and last name). The function should return the full name.\n```\n\"\"\"", "inputs": [["James", "Stevens"], ["Davy", "Back"], ["Arthur", "Dent"]], "outputs": [["James Stevens"], ["Davy Back"], ["Arthur Dent"]], "starter_code": "def combine_names(first, last):", "canonical_solution": "def combine_names(first, last):\n    return first + ' ' + last", "entry_point": "combine_names", "task_id": "TACO_lite/1335", "input_output_examples": [[[4111111111111111], [4111111111111], [4012888888881881], [378282246310005], [6011111111111117], [5105105105105100], [5105105105105106], [9111111111111111]], [["VISA"], ["VISA"], ["VISA"], ["AMEX"], ["Discover"], ["Mastercard"], ["Mastercard"], ["Unknown"]]]}
{"requirement": "def find_array(arr1, arr2):\"\"\"\nYou are given two arrays `arr1` and `arr2`, where `arr2` always contains integers.\n\nWrite the function `find_array(arr1, arr2)` such that:\n\nIf either `arr1` or `arr2` is empty, you should return an empty arr (empty list in python, empty vector in c++). Note for c++ use std::vector arr1, arr2.\n\"\"\"", "inputs": [[["a", "a", "a", "a", "a"], [2, 4]], [[0, 1, 5, 2, 1, 8, 9, 1, 5], [1, 4, 7]], [[1, 2, 3, 4, 5], [0]], [["this", "is", "test"], [0, 1, 2]], [[0, 3, 4], [2, 6]], [[1], []], [[], [2]], [[], []]], "outputs": [[["a", "a"]], [[1, 1, 1]], [[1]], [["this", "is", "test"]], [[4]], [[]], [[]], [[]]], "starter_code": "def find_array(arr1, arr2):", "canonical_solution": "def find_array(arr1, arr2):\n    return [arr1[i] for i in arr2 if i < len(arr1)]", "entry_point": "find_array", "task_id": "TACO_lite/1336", "input_output_examples": [[[197]], [[true]]]}
{"requirement": "def x(n):\"\"\"\nWrite a function ```x(n)``` that takes in a number ```n``` and returns an ```nxn``` array with an ```X``` in the middle. The ```X``` will be represented by ```1's``` and the rest will be ```0's```.\n\"\"\"", "inputs": [[1], [2], [3], [4], [5], [6]], "outputs": [[[[1]]], [[[1, 1], [1, 1]]], [[[1, 0, 1], [0, 1, 0], [1, 0, 1]]], [[[1, 0, 0, 1], [0, 1, 1, 0], [0, 1, 1, 0], [1, 0, 0, 1]]], [[[1, 0, 0, 0, 1], [0, 1, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 1, 0], [1, 0, 0, 0, 1]]], [[[1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0, 1]]]], "starter_code": "def x(n):", "canonical_solution": "def x(n):\n    d = [[0] * n for i in range(n)]\n    for i in range(n):\n        d[i][i] = 1\n        d[i][-i - 1] = 1\n    return d", "entry_point": "x", "task_id": "TACO_lite/1338", "input_output_examples": [[[0], [-3], [45], [759], [1236], [1447], [7832], [18876], [259180], [-349000]], [["Sunday 00:00"], ["Saturday 23:57"], ["Sunday 00:45"], ["Sunday 12:39"], ["Sunday 20:36"], ["Monday 00:07"], ["Friday 10:32"], ["Saturday 02:36"], ["Thursday 23:40"], ["Tuesday 15:20"]]]}
{"requirement": "def unite_unique(*arg):\"\"\"\nWrite a function that takes one or more arrays and returns a new array of unique values in the order of the original provided arrays.\n\nIn other words, all values present from all arrays should be included in their original order, but with no duplicates in the final array.\n\nThe unique numbers should be sorted by their original order, but the final array should not be sorted in numerical order.\n\n*Courtesy of [FreeCodeCamp](https://www.freecodecamp.com/challenges/sorted-union), a great place to learn web-dev; plus, its founder Quincy Larson is pretty cool and amicable. I made the original one slightly more tricky ;)*\n\"\"\"", "inputs": [[[1, 2], [3, 4]], [[1, 3, 2], [5, 2, 1, 4], [2, 1]], [[4, 3, 2, 2]], [[4, "a", 2], []], [[], [4, "a", 2]], [[], [4, "a", 2], []], [[]], [[], []], [[], [1, 2]], [[], [1, 2, 1, 2], [2, 1, 1, 2, 1]]], "outputs": [[[1, 2, 3, 4]], [[1, 3, 2, 5, 4]], [[4, 3, 2]], [[4, "a", 2]], [[4, "a", 2]], [[4, "a", 2]], [[]], [[]], [[1, 2]], [[1, 2]]], "starter_code": "def unite_unique(*arg):", "canonical_solution": "def unite_unique(*arg):\n    res = []\n    for arr in arg:\n        for val in arr:\n            if not val in res:\n                res.append(val)\n    return res", "entry_point": "unite_unique", "task_id": "TACO_lite/1340", "input_output_examples": [[["man i need a taxi up to ubud"]], [["taxi"]]]}
{"requirement": "def next_higher(n, k):\"\"\"\nGiven an integer `start_value` and an integer `k`, output the smallest integer `n`, but higher than `start_value`, that fulfills the above explained properties.\n\nIf by chance, `start_value`, fulfills the property, do not return `start_value` as a result, only the next integer. Perhaps you may find this assertion redundant if you understood well the requirement of the kata: \"output the smallest integer `n`, but higher than `start_value`\"\n\nThe values for `k` in the input may be one of these: `3, 4, 5, 7`\n\n### Features of the random tests\n\nIf you want to understand the style and features of the random tests, see the *Notes* at the end of these instructions.\n\nThe random tests are classified in three parts.\n\n- Random tests each with one of the possible values of `k` and a random `start_value` in the interval `[100, 1300]`\n- Random tests each with a `start_value` in a larger interval for each value of `k`, as follows:\n - for `k = 3`, a random `start value` in the range `[30000, 40000]`\n - for `k = 4`, a random `start value` in the range `[2000, 10000]`\n - for `k = 5`, a random `start value` in the range `[10000, 20000]`\n - for `k = 7`, a random `start value` in the range `[100000, 130000]`\n- More challenging tests, each with a random `start_value` in the interval `[100000, 110000]`.\n\nEnjoy it.\n\n# Notes:\n\n- As these sequences are finite, in other words, they have a maximum term for each value of k, the tests are prepared in such way that the `start_value`  will always be less than this maximum term. So you may be confident that your code will always find an integer.\n\n- The values of `k` that generate sequences of integers, for the constrains of this kata are: 2, 3, 4, 5, and 7. The case `k = 2` was not included because it generates only two integers.\n\n- The sequences have like \"mountains\" of abundance of integers but also have very wide ranges like \"valleys\" of scarceness. Potential solutions, even the fastest ones, may time out searching the next integer due to an input in one of these valleys. So it was intended to avoid these ranges.\n\nJavascript and Ruby versions will be released soon.\n\"\"\"", "inputs": [[100, 3], [200, 4], [300, 5], [500, 7], [717, 7], [1611, 3]], "outputs": [[162], [260], [846], [717], [861], [1989]], "starter_code": "def next_higher(n, k):", "canonical_solution": "def sum_part(n):\n    m, p, q, r, s = (1, 1, 1, 0, n)\n    while n > 9:\n        n, d = divmod(n, 10)\n        r += d * p\n        p *= 10\n        if d:\n            m = 1\n        else:\n            m *= 2\n        s += q * n + m * memo[r]\n        q *= 2\n    return s\nfrom collections import defaultdict\nqualified = defaultdict(list)\nmemo = {n: n for n in range(10)}\nfor n in range(10, 10 ** 6):\n    memo[n] = sum_part(n)\n    if memo[n] > n:\n        k, r = divmod(n, memo[n] - n)\n        if not r:\n            qualified[k].append(memo[n] - n)\nfrom bisect import bisect\n\ndef next_higher(n, k):\n    return qualified[k][bisect(qualified[k], n + 1)]", "entry_point": "next_higher", "task_id": "TACO_lite/1343", "input_output_examples": [[[7712], [8989], [1001]], [[7801], [9012], [1023]]]}
{"requirement": "def make_sequences(n):\"\"\"\nYou are given a positive integer `n`. We intend to make some ascending sequences according to the following rules:\n\n 1. Make a sequence of length 1: [ n ]\n\n 2. Or, insert a number to the left side of the sequence. But this number can not exceed half of the first number of the sequence. \n\n 3. Follow rule 2, continue insert number to the left side of the sequence.\n\nYour task is to count the number of all possible sequences, and return it.\n\nIf you do not understand the task, please read the rewritten version below:\n\nYou are given a positive integer `n`. Your task is to count the number of such sequences: \n\n- It should be an ascending sequence;\n\n- It should end with number `n`.\n\n- Each number in the sequence should smaller or equals to the half of its right, except for the last number `n`.\n\n- We define that a sequence containing only a number `n` is a valid ascending sequence.\n\n# Note\n\n- `1 <= n <= 1000`\n\n- `3` fixed testcases\n\n- `100` random testcases, testing for correctness of solution\n\n- All inputs are valid.\n\n- If my reference solution gives the wrong result in the random tests, please let me know(post an issue).\n\"\"\"", "inputs": [[6], [10], [1000]], "outputs": [[6], [14], [1981471878]], "starter_code": "def make_sequences(n):", "canonical_solution": "RESULTS = [1, 1, 2, 2, 4, 4, 6, 6, 10, 10, 14, 14, 20, 20, 26, 26, 36, 36, 46, 46, 60, 60, 74, 74, 94, 94, 114, 114, 140, 140, 166, 166, 202, 202, 238, 238, 284, 284, 330, 330, 390, 390, 450, 450, 524, 524, 598, 598, 692, 692, 786, 786, 900, 900, 1014, 1014, 1154, 1154, 1294, 1294, 1460, 1460, 1626, 1626, 1828, 1828, 2030, 2030, 2268, 2268, 2506, 2506, 2790, 2790, 3074, 3074, 3404, 3404, 3734, 3734, 4124, 4124, 4514, 4514, 4964, 4964, 5414, 5414, 5938, 5938, 6462, 6462, 7060, 7060, 7658, 7658, 8350, 8350, 9042, 9042, 9828, 9828, 10614, 10614, 11514, 11514, 12414, 12414, 13428, 13428, 14442, 14442, 15596, 15596, 16750, 16750, 18044, 18044, 19338, 19338, 20798, 20798, 22258, 22258, 23884, 23884, 25510, 25510, 27338, 27338, 29166, 29166, 31196, 31196, 33226, 33226, 35494, 35494, 37762, 37762, 40268, 40268, 42774, 42774, 45564, 45564, 48354, 48354, 51428, 51428, 54502, 54502, 57906, 57906, 61310, 61310, 65044, 65044, 68778, 68778, 72902, 72902, 77026, 77026, 81540, 81540, 86054, 86054, 91018, 91018, 95982, 95982, 101396, 101396, 106810, 106810, 112748, 112748, 118686, 118686, 125148, 125148, 131610, 131610, 138670, 138670, 145730, 145730, 153388, 153388, 161046, 161046, 169396, 169396, 177746, 177746, 186788, 186788, 195830, 195830, 205658, 205658, 215486, 215486, 226100, 226100, 236714, 236714, 248228, 248228, 259742, 259742, 272156, 272156, 284570, 284570, 297998, 297998, 311426, 311426, 325868, 325868, 340310, 340310, 355906, 355906, 371502, 371502, 388252, 388252, 405002, 405002, 423046, 423046, 441090, 441090, 460428, 460428, 479766, 479766, 500564, 500564, 521362, 521362, 543620, 543620, 565878, 565878, 589762, 589762, 613646, 613646, 639156, 639156, 664666, 664666, 692004, 692004, 719342, 719342, 748508, 748508, 777674, 777674, 808870, 808870, 840066, 840066, 873292, 873292, 906518, 906518, 942012, 942012, 977506, 977506, 1015268, 1015268, 1053030, 1053030, 1093298, 1093298, 1133566, 1133566, 1176340, 1176340, 1219114, 1219114, 1264678, 1264678, 1310242, 1310242, 1358596, 1358596, 1406950, 1406950, 1458378, 1458378, 1509806, 1509806, 1564308, 1564308, 1618810, 1618810, 1676716, 1676716, 1734622, 1734622, 1795932, 1795932, 1857242, 1857242, 1922286, 1922286, 1987330, 1987330, 2056108, 2056108, 2124886, 2124886, 2197788, 2197788, 2270690, 2270690, 2347716, 2347716, 2424742, 2424742, 2506282, 2506282, 2587822, 2587822, 2673876, 2673876, 2759930, 2759930, 2850948, 2850948, 2941966, 2941966, 3037948, 3037948, 3133930, 3133930, 3235326, 3235326, 3336722, 3336722, 3443532, 3443532, 3550342, 3550342, 3663090, 3663090, 3775838, 3775838, 3894524, 3894524, 4013210, 4013210, 4138358, 4138358, 4263506, 4263506, 4395116, 4395116, 4526726, 4526726, 4665396, 4665396, 4804066, 4804066, 4949796, 4949796, 5095526, 5095526, 5248914, 5248914, 5402302, 5402302, 5563348, 5563348, 5724394, 5724394, 5893790, 5893790, 6063186, 6063186, 6240932, 6240932, 6418678, 6418678, 6605466, 6605466, 6792254, 6792254, 6988084, 6988084, 7183914, 7183914, 7389572, 7389572, 7595230, 7595230, 7810716, 7810716, 8026202, 8026202, 8252302, 8252302, 8478402, 8478402, 8715116, 8715116, 8951830, 8951830, 9200058, 9200058, 9448286, 9448286, 9708028, 9708028, 9967770, 9967770, 10239926, 10239926, 10512082, 10512082, 10796652, 10796652, 11081222, 11081222, 11379220, 11379220, 11677218, 11677218, 11988644, 11988644, 12300070, 12300070, 12625938, 12625938, 12951806, 12951806, 13292116, 13292116, 13632426, 13632426, 13988332, 13988332, 14344238, 14344238, 14715740, 14715740, 15087242, 15087242, 15475494, 15475494, 15863746, 15863746, 16268748, 16268748, 16673750, 16673750, 17096796, 17096796, 17519842, 17519842, 17960932, 17960932, 18402022, 18402022, 18862450, 18862450, 19322878, 19322878, 19802644, 19802644, 20282410, 20282410, 20782974, 20782974, 21283538, 21283538, 21804900, 21804900, 22326262, 22326262, 22869882, 22869882, 23413502, 23413502, 23979380, 23979380, 24545258, 24545258, 25135020, 25135020, 25724782, 25724782, 26338428, 26338428, 26952074, 26952074, 27591230, 27591230, 28230386, 28230386, 28895052, 28895052, 29559718, 29559718, 30251722, 30251722, 30943726, 30943726, 31663068, 31663068, 32382410, 32382410, 33130918, 33130918, 33879426, 33879426, 34657100, 34657100, 35434774, 35434774, 36243644, 36243644, 37052514, 37052514, 37892580, 37892580, 38732646, 38732646, 39605938, 39605938, 40479230, 40479230, 41385748, 41385748, 42292266, 42292266, 43234278, 43234278, 44176290, 44176290, 45153796, 45153796, 46131302, 46131302, 47146570, 47146570, 48161838, 48161838, 49214868, 49214868, 50267898, 50267898, 51361196, 51361196, 52454494, 52454494, 53588060, 53588060, 54721626, 54721626, 55897966, 55897966, 57074306, 57074306, 58293420, 58293420, 59512534, 59512534, 60777212, 60777212, 62041890, 62041890, 63352132, 63352132, 64662374, 64662374, 66020970, 66020970, 67379566, 67379566, 68786516, 68786516, 70193466, 70193466, 71651844, 71651844, 73110222, 73110222, 74620028, 74620028, 76129834, 76129834, 77694142, 77694142, 79258450, 79258450, 80877260, 80877260, 82496070, 82496070, 84172786, 84172786, 85849502, 85849502, 87584124, 87584124, 89318746, 89318746, 91114678, 91114678, 92910610, 92910610, 94767852, 94767852, 96625094, 96625094, 98547380, 98547380, 100469666, 100469666, 102456996, 102456996, 104444326, 104444326, 106500434, 106500434, 108556542, 108556542, 110681428, 110681428, 112806314, 112806314, 115004102, 115004102, 117201890, 117201890, 119472580, 119472580, 121743270, 121743270, 124090986, 124090986, 126438702, 126438702, 128863444, 128863444, 131288186, 131288186, 133794468, 133794468, 136300750, 136300750, 138888572, 138888572, 141476394, 141476394, 144150270, 144150270, 146824146, 146824146, 149584076, 149584076, 152344006, 152344006, 155194954, 155194954, 158045902, 158045902, 160987868, 160987868, 163929834, 163929834, 166967782, 166967782, 170005730, 170005730, 173139660, 173139660, 176273590, 176273590, 179508916, 179508916, 182744242, 182744242, 186080964, 186080964, 189417686, 189417686, 192861218, 192861218, 196304750, 196304750, 199855092, 199855092, 203405434, 203405434, 207068524, 207068524, 210731614, 210731614, 214507452, 214507452, 218283290, 218283290, 222177814, 222177814, 226072338, 226072338, 230085548, 230085548, 234098758, 234098758, 238237116, 238237116, 242375474, 242375474, 246638980, 246638980, 250902486, 250902486, 255297602, 255297602, 259692718, 259692718, 264219444, 264219444, 268746170, 268746170, 273411566, 273411566, 278076962, 278076962, 282881028, 282881028, 287685094, 287685094, 292634890, 292634890, 297584686, 297584686, 302680212, 302680212, 307775738, 307775738, 313024652, 313024652, 318273566, 318273566, 323675868, 323675868, 329078170, 329078170, 334641518, 334641518, 340204866, 340204866, 345929260, 345929260, 351653654, 351653654, 357547444, 357547444, 363441234, 363441234, 369504420, 369504420, 375567606, 375567606, 381808538, 381808538, 388049470, 388049470, 394468148, 394468148, 400886826, 400886826, 407492292, 407492292, 414097758, 414097758, 420890012, 420890012, 427682266, 427682266, 434670350, 434670350, 441658434, 441658434, 448842348, 448842348, 456026262, 456026262, 463415834, 463415834, 470805406, 470805406, 478400636, 478400636, 485995866, 485995866, 493806582, 493806582, 501617298, 501617298, 509643500, 509643500, 517669702, 517669702, 525922004, 525922004, 534174306, 534174306, 542652708, 542652708, 551131110, 551131110, 559846226, 559846226, 568561342, 568561342, 577513172, 577513172, 586465002, 586465002, 595665060, 595665060, 604865118, 604865118, 614313404, 614313404, 623761690, 623761690, 633469718, 633469718, 643177746, 643177746, 653145516, 653145516, 663113286, 663113286, 673353212, 673353212, 683593138, 683593138, 694105220, 694105220, 704617302, 704617302, 715413954, 715413954, 726210606, 726210606, 737291828, 737291828, 748373050, 748373050, 759752270, 759752270, 771131490, 771131490, 782808708, 782808708, 794485926, 794485926, 806474570, 806474570, 818463214, 818463214, 830763284, 830763284, 843063354, 843063354, 855689292, 855689292, 868315230, 868315230, 881267036, 881267036, 894218842, 894218842, 907510958, 907510958, 920803074, 920803074, 934435500, 934435500, 948067926, 948067926, 962056258, 962056258, 976044590, 976044590, 990388828, 990388828, 1004733066, 1004733066, 1019448806, 1019448806, 1034164546, 1034164546, 1049251788, 1049251788, 1064339030, 1064339030, 1079814524, 1079814524, 1095290018, 1095290018, 1111153764, 1111153764, 1127017510, 1127017510, 1143286258, 1143286258, 1159555006, 1159555006, 1176228756, 1176228756, 1192902506, 1192902506, 1209999302, 1209999302, 1227096098, 1227096098, 1244615940, 1244615940, 1262135782, 1262135782, 1280096714, 1280096714, 1298057646, 1298057646, 1316459668, 1316459668, 1334861690, 1334861690, 1353724140, 1353724140, 1372586590, 1372586590, 1391909468, 1391909468, 1411232346, 1411232346, 1431034990, 1431034990, 1450837634, 1450837634, 1471120044, 1471120044, 1491402454, 1491402454, 1512185428, 1512185428, 1532968402, 1532968402, 1554251940, 1554251940, 1575535478, 1575535478, 1597340378, 1597340378, 1619145278, 1619145278, 1641471540, 1641471540, 1663797802, 1663797802, 1686667684, 1686667684, 1709537566, 1709537566, 1732951068, 1732951068, 1756364570, 1756364570, 1780343950, 1780343950, 1804323330, 1804323330, 1828868588, 1828868588, 1853413846, 1853413846, 1878548866, 1878548866, 1903683886, 1903683886, 1929408668, 1929408668, 1955133450, 1955133450, 1981471878]\n\ndef make_sequences(n):\n    return RESULTS[n]", "entry_point": "make_sequences", "task_id": "TACO_lite/1344", "input_output_examples": [[[10]], [[1]]]}
{"requirement": "def make_sentences(parts):\"\"\"\nImplement a function, so it will produce a sentence out of the given parts.\n\nArray of parts could contain:\n- words;\n- commas in the middle;\n- multiple periods at the end.\n\nSentence making rules:\n- there must always be a space between words;\n- there must not be a space between a comma and word on the left;\n- there must always be one and only one period at the end of a sentence.\n\"\"\"", "inputs": [[["hello", "world"]], [["Quick", "brown", "fox", "jumped", "over", "the", "lazy", "dog"]], [["hello", ",", "my", "dear"]], [["one", ",", "two", ",", "three"]], [["One", ",", "two", "two", ",", "three", "three", "three", ",", "4", "4", "4", "4"]], [["hello", "world", "."]], [["Bye", "."]], [["hello", "world", ".", ".", "."]], [["The", "Earth", "rotates", "around", "The", "Sun", "in", "365", "days", ",", "I", "know", "that", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."]]], "outputs": [["hello world."], ["Quick brown fox jumped over the lazy dog."], ["hello, my dear."], ["one, two, three."], ["One, two two, three three three, 4 4 4 4."], ["hello world."], ["Bye."], ["hello world."], ["The Earth rotates around The Sun in 365 days, I know that."]], "starter_code": "def make_sentences(parts):", "canonical_solution": "def make_sentences(parts):\n    return ' '.join(parts).replace(' ,', ',').strip(' .') + '.'", "entry_point": "make_sentences", "task_id": "TACO_lite/1348", "input_output_examples": [[[[6, 4], [1, 2]], [[1, 2, 3, 4, 5], [0, 1, 2, 3, 4]]], [[1], [4]]]}
{"requirement": "def gimme(inputArray):\"\"\"\nAs a part of this Kata, you need to create a function that when provided with a triplet, returns the index of the numerical element that lies between the other two elements.\n\nThe input to the function will be an array of three distinct numbers (Haskell: a tuple).\n\"\"\"", "inputs": [[[2, 3, 1]], [[5, 10, 14]], [[1, 3, 4]], [[15, 10, 14]], [[-0.41, -23, 4]], [[-15, -10, 14]]], "outputs": [[0], [1], [1], [2], [0], [1]], "starter_code": "def gimme(inputArray):", "canonical_solution": "def gimme(inputArray):\n    return inputArray.index(sorted(inputArray)[1])", "entry_point": "gimme", "task_id": "TACO_lite/1355", "input_output_examples": [[[[2, 2, 2, 2]]], [[2]]]}
{"requirement": "def duplicate_count(s):\"\"\"\n### Count the number of Duplicates\n\nWrite a function that will return the count of **distinct case-insensitive** alphabetic characters and numeric digits that occur more than \nonce in the input string. \nThe input string can be assumed to contain only alphabets (both uppercase and lowercase) and numeric digits.\n\"\"\"", "inputs": [[""], ["abcde"], ["abcdeaa"], ["abcdeaB"], ["Indivisibilities"]], "outputs": [[0], [0], [1], [2], [2]], "starter_code": "def duplicate_count(s):", "canonical_solution": "def duplicate_count(s):\n    return len([c for c in set(s.lower()) if s.lower().count(c) > 1])", "entry_point": "duplicate_count", "task_id": "TACO_lite/1356", "input_output_examples": [[[[[1, 2], [3, 2]], [[3, 2], [1, 1]]]], [[[[5, 4], [11, 8]]]]]}
{"requirement": "def sum_average(arr):\"\"\"\nProgram a function `sumAverage(arr)` where `arr` is an array containing arrays full of numbers.\n\nFirst, determine the average of each array. Then, return the sum of all the averages.\n\n- All numbers will be less than 100 and greater than -100.\n- `arr` will contain a maximum of 50 arrays.\n- After calculating all the averages, add them **all** together, **then** round down.\n\n~~~if:julia\nIn Julia, the `Statistics` package is preloaded.\n~~~\n```python\nimport math\nmath.floor(result)\n```\n\"\"\"", "inputs": [[[[1, 2, 2, 1], [2, 2, 2, 1]]], [[[52, 64, 84, 21, 54], [44, 87, 46, 90, 43]]], [[[44, 76, 12], [96, 12, 34, 53, 76, 34, 56, 86, 21], [34, 65, 34, 76, 34, 87, 34]]], [[[41, 16, 99, 93, 59, 18, 35, 23, 55, 45, 38, 39, 74, 60, 95, 44, 59, 70, 44, 89, 90, 19, 23, 67, 65, 66, 41, 89, 49, 22, 23, 47, 60, 12, 59, 58, 25, 69, 66, 82, 53, 41, 51, 69, 78, 18, 17, 44, 74, 96, 46, 73, 22, 37, 95, 32, 62, 49, 8, 88, 59, 66, 23, 10, 61, 28, 11, 99, 27, 98, 8, 18, 73, 18, 61, 25, 60, 38, 81, 13, 36, 63, 12, 83, 57, 11, 19, 51, 41, 20, 37, 63, 79, 94, 25, 45, 24, 73, 67, 42]]], [[[3, 4, 1, 3, 5, 1, 4], [21, 54, 33, 21, 76]]], [[[-4, 3, -8, -2], [2, 9, 1, -5], [-7, -2, -6, -4]]]], "outputs": [[3], [117], [148], [50], [44], [-6]], "starter_code": "def sum_average(arr):", "canonical_solution": "from statistics import mean\nfrom math import floor\n\ndef sum_average(arr):\n    return floor(sum(map(mean, arr)))", "entry_point": "sum_average", "task_id": "TACO_lite/1358", "input_output_examples": [[["LEET"]], [["1337"]]]}
{"requirement": "def automorphic(n):\"\"\"# Definition\n\nA **number** is called **_Automorphic number_** if and only if *its square ends in the same digits as the number itself*.\n___\n\n# Task\n\n**_Given_** a **number** *determine if it Automorphic or not* .\n___\n\n# Warm-up (Highly recommended)\n\n# [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n___\n\n# Notes \n\n* The **_number_** passed to the function is **_positive_** \n\n* **_Single-digit_** numbers are considered **_Automorphic number_**.\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[1], [3], [6], [9], [25], [53], [76], [95], [625], [225]], "outputs": [["Automorphic"], ["Not!!"], ["Automorphic"], ["Not!!"], ["Automorphic"], ["Not!!"], ["Automorphic"], ["Not!!"], ["Automorphic"], ["Not!!"]], "starter_code": "def automorphic(n):", "canonical_solution": "def automorphic(n):\n    return 'Automorphic' if str(n * n).endswith(str(n)) else 'Not!!'", "entry_point": "automorphic", "task_id": "TACO_lite/1359", "input_output_examples": [[[4], [1]], [[2], [0]]]}
{"requirement": "def cyclic_string(s):\"\"\"# Task\n You're given a substring s of some cyclic string. What's the length of the smallest possible string that can be concatenated to itself many times to obtain this cyclic string?\n\n# Input/Output\n\n\n - `[input]` string `s`\n\n  Constraints: `3 ≤ s.length ≤ 15.`\n  \n\n - `[output]` an integer\n\"\"\"", "inputs": [["cabca"], ["aba"], ["ccccccccccc"], ["abaca"]], "outputs": [[3], [2], [1], [4]], "starter_code": "def cyclic_string(s):", "canonical_solution": "def cyclic_string(s):\n    return next((i for i, _ in enumerate(s[1:], 1) if s.startswith(s[i:])), len(s))", "entry_point": "cyclic_string", "task_id": "TACO_lite/1367", "input_output_examples": [[[2, [1, 2]], [10, [10, 10]]], [[3], [2]]]}
{"requirement": "def slogans(p, r):\"\"\"# Task\n You know the slogan `p`, which the agitators have been chanting for quite a while now. Roka has heard this slogan a few times, but he missed almost all of them and grasped only their endings. You know the string `r` that Roka has heard. \n \n You need to determine what is the `minimal number` of times agitators repeated the slogan `p`, such that Roka could hear `r`.\n\n It is guaranteed the Roka heard nothing but the endings of the slogan P repeated several times.\n\n# Input/Output\n\n\n - `[input]` string `p`\n\n  The slogan the agitators chanted, a string of lowecase Latin letters.\n\n\n - `[input]` string `r`\n\n  The string of lowercase Latin letters Roka has heard.\n\n\n - `[output]` an integer\n\n  The `minimum number` of times the agitators chanted.\n\"\"\"", "inputs": [["glorytoukraine", "ukraineaineaine"], ["glorytoukraine", "ukraineaineainee"], ["glorytoukraine", "einene"], ["programming", "ingmingmming"], ["mcoecqwmjdudc", "dcoecqwmjdudcdcudc"], ["erjernhxvbqfjsj", "ernhxvbqfjsjjrnhxvbqfjsjjernhxvbqfjsj"], ["dhgusdlifons", "lifonsssdlifonsgusdlifonssnsdlifonsslifonsifonsdlifonsfonsifons"]], "outputs": [[3], [4], [3], [3], [4], [4], [13]], "starter_code": "def slogans(p, r):", "canonical_solution": "import re\n\ndef slogans(p, r):\n    reg = re.compile('|'.join([p[i:] for i in range(len(p))]))\n    return len(re.findall(reg, r))", "entry_point": "slogans", "task_id": "TACO_lite/1368", "input_output_examples": [[[7], [7], [7], [7], [7], [7], [7], [7], [7]], [[[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]]]]}
{"requirement": "def average(array):\"\"\"\nCreate a function that returns the average of an array of numbers (\"scores\"), rounded to the nearest whole number. You are not allowed to use any loops (including for, for/in, while, and do/while loops).\n\"\"\"", "inputs": [[[5, 78, 52, 900, 1]], [[5, 25, 50, 75]], [[2]], [[1, 1, 1, 1, 9999]], [[0]]], "outputs": [[207], [39], [2], [2001], [0]], "starter_code": "def average(array):", "canonical_solution": "def average(array):\n    return round(sum(array) / len(array))", "entry_point": "average", "task_id": "TACO_lite/1374", "input_output_examples": [[[5, 2]], [["Area: 31.4, perimeter: 23.1"]]]}
{"requirement": "def josephus(xs, k):\"\"\"\nThis problem takes its name by arguably the most important event in the life of the ancient historian Josephus: according to his tale, he and his 40 soldiers were trapped in a cave by the Romans during a siege.\n\nRefusing to surrender to the enemy, they instead opted for mass suicide, with a twist: **they formed a circle and proceeded to kill one man every three, until one last man was left (and that it was supposed to kill himself to end the act)**.\n\nWell, Josephus and another man were the last two and, as we now know every detail of the story, you may have correctly guessed that they didn't exactly follow through the original idea.\n\nYou are now to create a function that returns a Josephus permutation, taking as parameters the initial *array/list of items* to be permuted as if they were in a circle and counted out every *k* places until none remained.\n\n**Tips and notes:** it helps to start counting from 1 up to n, instead of the usual range 0..n-1; k will always be >=1.\n\nFor more info, browse the Josephus Permutation page on wikipedia; related kata: Josephus Survivor.\n\nAlso, [live game demo](https://iguacel.github.io/josephus/) by [OmniZoetrope](https://www.codewars.com/users/OmniZoetrope).\n\"\"\"", "inputs": [[[], 1], [[], 2], [[], 4], [[], 4], [[], 3], [[], 3], [[], 11], [[], 40], [[], 3], [[], 9]], "outputs": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[2, 4, 6, 8, 10, 3, 7, 1, 9, 5]], [["e", "s", "W", "o", "C", "d", "r", "a"]], [[3, 5, "W", 0, "C", "d", "r", 4]], [[3, 6, 2, 7, 5, 1, 4]], [[]], [[11, 22, 33, 44, 5, 17, 29, 41, 3, 16, 30, 43, 7, 21, 36, 50, 15, 32, 48, 14, 34, 1, 20, 39, 9, 28, 2, 25, 47, 24, 49, 27, 8, 38, 19, 6, 42, 35, 26, 23, 31, 40, 4, 18, 12, 13, 46, 37, 45, 10]], [[10, 7, 8, 13, 5, 4, 12, 11, 3, 15, 14, 9, 1, 6, 2]], [[1]], [[true, true, true, false, false, true, false, true, false]]], "starter_code": "def josephus(xs, k):", "canonical_solution": "def josephus(xs, k):\n    i, ys = (0, [])\n    while len(xs) > 0:\n        i = (i + k - 1) % len(xs)\n        ys.append(xs.pop(i))\n    return ys", "entry_point": "josephus", "task_id": "TACO_lite/1375", "input_output_examples": [[[0, [[0, 1], [2, 1], [0, 1]]]], [[2]]]}
{"requirement": "def sum_of_regular_numbers(arr):\"\"\"# Task\n You are given a regular array `arr`. Let's call a `step` the difference between two adjacent elements. \n \n Your task is to sum the elements which belong to the sequence of consecutive elements of length `at least 3 (but as long as possible)`, such that the steps between the elements in this sequence are the same.\n\n Note that some elements belong to two sequences and have to be counted twice.\n\n# Input/Output\n\n\n - `[input]` array.integer `arr`\n\n `3 ≤ arr.length ≤ 100`\n\n\n - `[output]` an integer\n \n The sum of sequences.\n\"\"\"", "inputs": [[[54, 70, 86, 1, -2, -5, 0, 5, 78, 145, 212, 15]], [[59, 58, 57, 55, 53, 51]], [[7, 2, -3, 3, 9, 15]], [[-17, -9, 1, 9, 17, 4, -9]], [[7, 2, 3, 2, -2, 400, 802]], [[-1, 7000, 1, -6998, -13997]]], "outputs": [[639], [390], [30], [39], [1200], [-13994]], "starter_code": "def sum_of_regular_numbers(arr):", "canonical_solution": "def sum_of_regular_numbers(arr):\n    res, value, save = (0, arr[1] - arr[0], arr[:2])\n    for x, y in zip(arr[1:], arr[2:]):\n        if y - x == value:\n            save.append(y)\n        else:\n            if len(save) >= 3:\n                res += sum(save)\n            value, save = (y - x, [x, y])\n    if len(save) >= 3:\n        res += sum(save)\n    return res", "entry_point": "sum_of_regular_numbers", "task_id": "TACO_lite/1377", "input_output_examples": [[[["f7", "b1", "h1", "c7", "h7"]]], [[0]]]}
{"requirement": "def decode(number):\"\"\"\n## Welcome to my (amazing) kata!\n\nYou are given a gigantic number to decode.  Each number is a code that alternates in a pattern between encoded text and a smaller, encoded number.  The pattern's length varies with every test, but the alternation between encoded text and an encoded number will always be there.  Following this rule, each number tested begins with encoded text and ends with an encoded number.\n\n## How the encoding works\n\nNow, we should probably review how the string of numbers is formed - considering you have to unform it. So, first, some text is taken, and encoded.  The system of encoding is taking each letter's position in the alphabet and adding 100 to it.\n\nAfter the text, there is a binary number.  You should convert this number to a normal, base 10 decimal (all of them can be converted into whole, non-negative numbers).\n\nSeparating encoded text and encoded numbers, there is a `98`.  Because the numbers are in binary, the only digits they use are '0' and '1', and each letter of the alphabet, encoded, is between 101-127, all instances of `98` are to indicate a separation between encoded text and encoded numbers.  There may also be a `98` at the very end of the number.\n\nWhen you return your final answer, the text and numbers should always be separated by a comma (`,`)\n\nGood luck!\n\"\"\"", "inputs": [[103115104105123101118119981001098], [103115104105123101118119981001098103115104105123101118119981001098103115104105123101118119981001098], [1091011161151121151071091261051061151181081151231191201211161091041201081091191111011201011091199810010981051221051141201081151211071081091201191021181091121121091011141209810001], [119112105105116981000981091199810019810612111498100000110001], [109106125115121108101122105101114125103115113116112101109114120119109120119114115120113125106101121112120981100019810911210911110511911210510511698111000100100981191131091121051251061011031059810001], [12310810511498100010981091231011191011251151211141071021151259810001109811312510610112010810511812011511511111310510911412011512010810510310912012598100100098113103118109119101123105119115113105981000198], [120108105118105109119101112109107108120981001010101098102105108109114104125115121118105125105119981000], [1251151211191081151211121041061051051121191251131161011201081251061151181131059810001009812010810911911611811510711810111310711210912010310810510410111410410410511210512010510411312510610911811912012210511811910911511411510612010810911911110112010198100001098109120119114115120115111101125981000109811110911410411510611210911110510911311411512011511110112510911611811511310911910598100010], [1091011131021151181051041191151091011131071151091141071201151201251161051181011141041151131121051201201051181199810000001001010100101010101010198102112101108101112119104110111106101112104119111106110101119104108107101119112104108107101119121112109104107108981000101001011981011191041111081071121041121011111101081079810001010010198119112105105116101104112106110112104101119104106104106104119115113105120108109114107109119114115120118101114104115113104101106104101106108104101112111110106108109114108105118105981000001010010101001010100101010101098117105118120125121109115116101119104106107108110111112126124103122102114113123123123123123117105118120125121109115116101119104106107108110111112126124103122102114113123123123123123117105118120125121109115116101119104106107108110111112126124103122102114113123123123123123117105118120125121109115116101119104106107108110111112126124103122102114113123123123123123117105118120125121109115116101119104106107108110111112126124103122102114113123123123123123117105118120125121109115116101119104106107108110111112126124103122102114113123123123123123117105118120125121109115116101119104106107108110111112126124103122102114113123123123123123981000101010], [1091061251151211231051181051211191091141071201081051161181091141201031151131131011141041151181191151131051201081091141071011141041181051011041091141071201081091191021181091121121011091141201031151141221051181191011201091151141091081151161051251151211051141101151251051041091201011141041201081011201091201131011041051211161061151181201081051201051181181091021121051111011201011201081011201091131011041051151201081051181231091191051091071211051191191091011131201011121111091141071201151131251191051121061011121191151091031011141201211191051191161011031051191151181161211141031201211011201091151141151061011141251191151181201011141041091201091191041181091221091141071131051011021191151121211201051121251091141191011141051231051121121251151211071051201201081051161151091141201191151211131081011221051011141091031051041011251011141041021251051011141041121091191201051141201151131251031081051131091031011121181151131011141031051201081051251011181051011131011261091141071201081011201091191011121121061151181201151041011251201081051231051011201081051181091191141091031051071151161121011251151211201191091041059810010010100101010010101010100101010001001001]], "outputs": [["codewars, 18"], ["codewars, 18, codewars, 18, codewars, 18"], ["iapologizeforhowstupidthiskatais, 18, eventhoughitsbrilliant, 17"], ["sleep, 8, is, 9, fun, 2097"], ["ifyouhaveanycomplaintsitsnotmyfault, 49, ilikesleep, 3620, smileyface, 17"], ["when, 34, iwasayoungboy, 70, myfathertookmeintothecity, 72, mcrisawesome, 17"], ["thereisalight, 1194, behindyoureyes, 8"], ["youshouldfeelsympathyforme, 68, thisprogramglitchedanddeletedmyfirstversionofthiskata, 66, itsnotokay, 34, kindoflikeimnotokayipromise, 34"], ["iamboredsoiamgoingtotyperandomletters, 541758805, blahalsdjkfaldskfjasdhgasldhgasulidgh, 4427, asdkhgldlakjhg, 2213, sleepadlfjldasdfdfdsomethingisnotrandomdafdafhdalkjfhinhere, 17526510250, qertyuiopasdfghjklzxcvbnmwwwwwqertyuiopasdfghjklzxcvbnmwwwwwqertyuiopasdfghjklzxcvbnmwwwwwqertyuiopasdfghjklzxcvbnmwwwwwqertyuiopasdfghjklzxcvbnmwwwwwqertyuiopasdfghjklzxcvbnmwwwwwqertyuiopasdfghjklzxcvbnmwwwww, 554"], ["ifyouwereusingtheprintcommandorsomethingandreadingthisbrillaintconversationihopeyouenjoyeditandthatitmadeupfortheterriblekatathatimadeotherwiseiguessiamtalkingtomyselfalsoicantusespacesorpunctuationofanysortanditisdrivingmeabsolutelyinsanewellyougetthepointsoumhaveanicedayandbyeandlistentomychemicalromancetheyareamazingthatisallfortodaytheweatherisnicegoplayoutside, 10073085203529"]], "starter_code": "def decode(number):", "canonical_solution": "def decode(number):\n    return ', '.join((str(int(w, 2)) if i % 2 else ''.join((chr(int(w[x:x + 3]) - 4) for x in range(0, len(w), 3))) for i, w in enumerate(str(number).strip('98').split('98'))))", "entry_point": "decode", "task_id": "TACO_lite/1378", "input_output_examples": [[[12], [4]], [["even"], ["odd"]]]}
{"requirement": "def next_perfectsq_perm(limit_below, k):\"\"\"\nThere are some perfect squares with a particular property. Your task is to find the first perfect square above the given lower_limit, that can generate the given k number of perfect squares, and it doesn't contain the digit 0. Then return the maximum perfect square that can be obtained from its digits.\n\nFeatures of the random tests:\n```\n100 <= lower_limit <= 1e6\n2 <= k <= 5\nnumber of tests = 45\n```\nHave a good time!\n\"\"\"", "inputs": [[100, 2], [100, 3], [100, 4], [500, 2], [1000, 3], [100000, 4], [144, 2], [145, 2], [440, 2], [441, 2], [257, 2]], "outputs": [[441], [961], [81796], [625], [9216], [298116], [625], [625], [441], [625], [441]], "starter_code": "def next_perfectsq_perm(limit_below, k):", "canonical_solution": "from itertools import count, permutations\n\ndef next_perfectsq_perm(limit_below, k):\n    for n in count(int(limit_below ** 0.5) + 1):\n        s = str(n ** 2)\n        if '0' not in s:\n            sq_set = {x for x in (int(''.join(p)) for p in permutations(s)) if (x ** 0.5).is_integer()}\n            if len(sq_set) == k:\n                return max(sq_set)", "entry_point": "next_perfectsq_perm", "task_id": "TACO_lite/1380", "input_output_examples": [[[101, 1000], [0, 1000], [1000, 1000], [1200, 1000], [500]], [["10%"], ["No e-mails sent"], ["Daily limit is reached"], ["Daily limit is reached"], ["50%"]]]}
{"requirement": "def could_be(original, another):\"\"\"\nThe objective is to disambiguate two given names: the original with another\n\nLet's start simple, and just work with plain ascii strings. \n\nThe function ```could_be``` is given the original name and another one to test\nagainst. \n\nLet's say your name is *Carlos Ray Norris*, your objective is to return True if\nthe other given name matches any combinaison of the original fullname:\n\nFor the sake of simplicity:\n\n * the function is case sensitive and accent sensitive for now\n * it is also punctuation sensitive\n * an empty other name should not match any original\n * an empty orginal name should not be matchable\n * the function is not symmetrical\n\nToo easy ? Try the next steps: \n\n* [Author Disambiguation: a name is a Name!](https://www.codewars.com/kata/author-disambiguation-a-name-is-a-name)\n* or even harder: [Author Disambiguation: Signatures worth it](https://www.codewars.com/kata/author-disambiguation-signatures-worth-it)\n\"\"\"", "inputs": [["Carlos Ray Norris", "Carlos Ray Norris"], ["Carlos Ray Norris", "Carlos Ray"], ["Carlos Ray Norris", "Ray Norris"], ["Carlos Ray Norris", "Carlos Norris"], ["Carlos Ray Norris", "Norris"], ["Carlos Ray Norris", "Carlos"], ["Carlos Ray Norris", "Norris Carlos"], ["Carlos Ray Norris", "Carlos Ray Norr"], ["Carlos Ray Norris", "Ra Norris"], ["", "C"], ["", ""], ["Carlos Ray Norris", " "], ["Carlos Ray Norris", "carlos Ray Norris"], ["Carlos", "carlos"], ["Carlos Ray Norris", "Norris!"], ["Carlos Ray Norris", "Carlos-Ray Norris"], ["Carlos Ray", "Carlos Ray Norris"], ["Carlos", "Carlos Ray Norris"]], "outputs": [[true], [true], [true], [true], [true], [true], [true], [false], [false], [false], [false], [false], [false], [false], [false], [false], [false], [false]], "starter_code": "def could_be(original, another):", "canonical_solution": "def could_be(original, another):\n    if not another.strip():\n        return False\n    return all((name in original.split() for name in another.split()))", "entry_point": "could_be", "task_id": "TACO_lite/1386", "input_output_examples": [[[1, 4]], [["1111010"]]]}
{"requirement": "def binary_simulation(s, q):\"\"\"# Task\n\nGiven a binary number, we are about to do some operations on the number. Two types of operations can be here:\n\n* ['I', i, j] : Which means invert the bit from i to j (inclusive).\n\n* ['Q', i] : Answer whether the i'th bit is 0 or 1.\n\nThe MSB (most significant bit) is the first bit (i.e. i = `1`). The binary number can contain leading zeroes.\n\n## Note\n* All inputs are valid.\n* Please optimize your algorithm to avoid time out.\n\"\"\"", "inputs": [["0011001100", [["I", 1, 10], ["I", 2, 7], ["Q", 2], ["Q", 1], ["Q", 7], ["Q", 5]]], ["1011110111", [["I", 1, 10], ["I", 2, 7], ["Q", 2], ["Q", 1], ["Q", 7], ["Q", 5]]], ["1011110111", [["I", 1, 10], ["I", 2, 7]]], ["0000000000", [["I", 1, 10], ["Q", 2]]]], "outputs": [[["0", "1", "1", "0"]], [["0", "0", "0", "1"]], [[]], [["1"]]], "starter_code": "def binary_simulation(s, q):", "canonical_solution": "def binary_simulation(s, q):\n    out, n, s = ([], int(s, 2), len(s))\n    for cmd, *i in q:\n        if cmd == 'I':\n            a, b = i\n            n ^= (1 << b - a + 1) - 1 << s - b\n        else:\n            out.append(str(int(0 < 1 << s - i[0] & n)))\n    return out", "entry_point": "binary_simulation", "task_id": "TACO_lite/1387", "input_output_examples": [[[["abc", "aaa", "aba", "bab"], "bbb"]], [[2]]]}
{"requirement": "def thue_morse(n):\n\t\"\"\"\nGiven a positive integer `n`, return first n digits of Thue-Morse sequence, as a string (see examples).\n\nThue-Morse sequence is a binary sequence with 0 as the first element. The rest of the sequence is obtained by adding the Boolean (binary) complement of a group obtained so far.\n\n![alt](https://upload.wikimedia.org/wikipedia/commons/f/f1/Morse-Thue_sequence.gif)\n\n- You don't need to test if n is valid - it will always be a positive integer.\n- `n` will be between 1 and 10000\n\n[Thue-Morse on Wikipedia](https://en.wikipedia.org/wiki/Thue%E2%80%93Morse_sequence)\n\n[Another kata on Thue-Morse](https://www.codewars.com/kata/simple-fun-number-106-is-thue-morse) by @myjinxin2015\n\"\"\"", "inputs": [[1], [2], [5], [10], [100]], "outputs": [["0"], ["01"], ["01101"], ["0110100110"], ["0110100110010110100101100110100110010110011010010110100110010110100101100110100101101001100101100110"]], "starter_code": "def thue_morse(n):\n\t", "canonical_solution": "thue_morse = lambda nn]", "entry_point": "thue_morse", "task_id": "TACO_lite/1391", "input_output_examples": [[["abc#d##c"], ["abc##d######"], ["#######"], [[""]], ["abjd####jfk#"]], [["ac"], [""], [""], [""], ["jf"]]]}
{"requirement": "def max_gap(numbers):\"\"\"# Introduction and Warm-up (Highly recommended)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n___\n\n# Task\n\n**_Given_** an *array/list [] of integers* , **_Find_** **_The maximum difference_** *between the successive elements in its sorted form*. \n___\n\n# Notes \n\n* **_Array/list_** size is *at least 3*  .\n\n* **_Array/list's numbers_**  Will be **mixture of positives and negatives also zeros_**  \n\n* **_Repetition_** of numbers in *the array/list could occur*.\n\n* **_The Maximum Gap_** is *computed Regardless the sign*.\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[[13, 10, 2, 9, 5]], [[13, 3, 5]], [[24, 299, 131, 14, 26, 25]], [[-3, -27, -4, -2]], [[-7, -42, -809, -14, -12]], [[12, -5, -7, 0, 290]], [[-54, 37, 0, 64, -15, 640, 0]], [[130, 30, 50]], [[1, 1, 1]], [[-1, -1, -1]]], "outputs": [[4], [8], [168], [23], [767], [278], [576], [80], [0], [0]], "starter_code": "def max_gap(numbers):", "canonical_solution": "def max_gap(numbers):\n    lst = sorted(numbers)\n    return max((b - a for a, b in zip(lst, lst[1:])))", "entry_point": "max_gap", "task_id": "TACO_lite/1393", "input_output_examples": [[[1]], [["It's Odious!"]]]}
{"requirement": "def solve(a):\"\"\"\nGiven an array, return the difference between the count of even numbers and the count of odd numbers. `0` will be considered an even number.\n\nThe input will be an array of lowercase letters and numbers only.\n\nIn some languages (Haskell, C++, and others), input will be an array of strings.\n\nGood luck!\n\nIf you like this Kata, please try: \n\n[Longest vowel chain](https://www.codewars.com/kata/59c5f4e9d751df43cf000018)\n\n[Word values](https://www.codewars.com/kata/598d91785d4ce3ec4f000018)\n\"\"\"", "inputs": [[[0, 1, 2, 3]], [[0, 1, 2, 3, "a", "b"]], [[0, 15, "z", 16, "m", 13, 14, "c", 9, 10, 13, "u", 4, 3]], [[13, 6, 8, 15, 4, 8, 13]], [[1, "a", 17, 8, "e", 3, "i", 12, 1]], [[5, 15, 16, 10, 6, 4, 16, "t", 13, "n", 14, "k", "n", 0, "q", "d", 7, 9]]], "outputs": [[0], [0], [0], [1], [-2], [2]], "starter_code": "def solve(a):", "canonical_solution": "def solve(a):\n    return sum((1 if v % 2 == 0 else -1 for v in a if type(v) == int))", "entry_point": "solve", "task_id": "TACO_lite/1397", "input_output_examples": [[[40, 15]], [[3]]]}
{"requirement": "def majority(arr):\"\"\"Goal\nGiven a list of elements [a1, a2, ..., an], with each ai being a string, write a function **majority** that returns the value that appears the most in the list. \n\nIf there's no winner, the function should return None, NULL, nil, etc, based on the programming language.\n\"\"\"", "inputs": [[["A", "B", "A"]], [["A", "B", "C"]], [["A", "B", "B", "A"]], [["A", "A", "A", "A"]], [["A"]], [["A", "A", "A", "BBBBBBBB"]], [["A", "B", "C", "C"]], [[]], [["B", "C", "", ""]]], "outputs": [["A"], [null], [null], ["A"], ["A"], ["A"], ["C"], [null], [""]], "starter_code": "def majority(arr):", "canonical_solution": "from collections import Counter\n\ndef majority(arr):\n    mc = Counter(arr).most_common(2)\n    if arr and (len(mc) == 1 or mc[0][1] != mc[1][1]):\n        return mc[0][0]", "entry_point": "majority", "task_id": "TACO_lite/1400", "input_output_examples": [[[[1, 3, 1]], [[5, 7, 5, 9, 7]], [[1, 9, 3, 1, 7, 4, 6, 6, 7]]], [[13], [579], [134679]]]}
{"requirement": "def get_calendar_week(date_string):\"\"\"\nAccording to ISO 8601, the first calendar week (1) starts with the week containing the first thursday in january. Every year contains of 52 (53 for leap years) calendar weeks.\n\n**Your task is** to calculate the calendar week (1-53) from a given date.\n\nGood luck 👍\n\nSee also [ISO week date](https://en.wikipedia.org/wiki/ISO_week_date) and [Week Number](https://en.wikipedia.org/wiki/Week#Week_numbering) on Wikipedia for further information about calendar weeks.\n\nOn [whatweekisit.org](http://whatweekisit.org/) you may click through the calender and study calendar weeks in more depth.\n\n*heads-up:* `require(xxx)` has been disabled\n\n\nThanks to @ZED.CWT, @Unnamed and @proxya for their feedback.\n\"\"\"", "inputs": [["2017-01-01"], ["2018-12-24"], ["2018-12-31"], ["2019-01-01"], ["2016-02-29"], ["2015-12-29"], ["2024-12-31"], ["2025-01-05"], ["2025-01-06"], ["1995-12-31"], ["1996-01-01"], ["1999-12-31"], ["2000-01-02"], ["2000-01-03"], ["2016-12-25"], ["2016-12-26"], ["2017-01-02"], ["2017-01-09"], ["2017-12-31"], ["2018-01-01"]], "outputs": [[52], [52], [1], [1], [9], [53], [1], [1], [2], [52], [1], [52], [52], [1], [51], [52], [1], [2], [52], [1]], "starter_code": "def get_calendar_week(date_string):", "canonical_solution": "from datetime import datetime\n\ndef get_calendar_week(date_string):\n    return datetime.strptime(date_string, '%Y-%m-%d').isocalendar()[1]", "entry_point": "get_calendar_week", "task_id": "TACO_lite/1401", "input_output_examples": [[[[6, 6]], [[5, 6, 4]], [[3, 3]]], [[3], [5], [0]]]}
{"requirement": "def repeating_fractions(n, d):\"\"\"\nWrite\n```python\nfunction repeating_fractions(numerator, denominator)\n```\nthat given two numbers representing the numerator and denominator of a fraction, return the fraction in string format. If the fractional part has repeated digits, replace those digits with a single digit in parentheses.\n\"\"\"", "inputs": [[0, 1], [18018018, 80000000000], [1, 1], [1, 2], [1, 3], [1554, 70]], "outputs": [["0.0"], ["0.(0)(2)5(2)5(2)5"], ["1.0"], ["0.5"], ["0.(3)"], ["22.2"]], "starter_code": "def repeating_fractions(n, d):", "canonical_solution": "import re\n\ndef repeating_fractions(n, d):\n    i, d = str(n * 1.0 / d).split('.')\n    return i + '.' + re.sub('([0-9])\\\\1+', '(\\\\1)', d)", "entry_point": "repeating_fractions", "task_id": "TACO_lite/1403", "input_output_examples": [[[1], [2], [20], [0]], [[0], [1], [4], ["NaN"]]]}
{"requirement": "def autocorrect(input):\"\"\"Your friend won't stop texting his girlfriend.  It's all he does. All day. Seriously.  The texts are so mushy too! The whole situation just makes you feel ill.\nBeing the wonderful friend that you are, you hatch an evil plot.  While he's sleeping, you take his phone and change the autocorrect options so that every time he types \"you\" or \"u\" it gets changed to \"your sister.\"\n\nWrite a function called autocorrect that takes a string and replaces all instances of \"you\" or \"u\" (not case sensitive) with \"your sister\" (always lower case).\n\nReturn the resulting string.\n\nHere's the slightly tricky part: These are text messages, so there are different forms of \"you\" and \"u\".\n\nFor the purposes of this kata, here's what you need to support:\n\n\"youuuuu\" with any number of u characters tacked onto the end\n\"u\" at the beginning, middle, or end of a string, but NOT part of a word\n\"you\" but NOT as part of another word like youtube or bayou\n\"\"\"", "inputs": [["I miss you!"], ["u want to go to the movies?"], ["Can't wait to see youuuuu"], ["I want to film the bayou with you and put it on youtube"], ["You should come over Friday night"], ["You u youville utube you youyouyou uuu raiyou united youuuu u you"]], "outputs": [["I miss your sister!"], ["your sister want to go to the movies?"], ["Can't wait to see your sister"], ["I want to film the bayou with your sister and put it on youtube"], ["your sister should come over Friday night"], ["your sister your sister youville utube your sister youyouyou uuu raiyou united your sister your sister your sister"]], "starter_code": "def autocorrect(input):", "canonical_solution": "import re\n\ndef autocorrect(input):\n    return re.sub('(?i)\\\\b(u|you+)\\\\b', 'your sister', input)", "entry_point": "autocorrect", "task_id": "TACO_lite/1405", "input_output_examples": [[[["sheep", "sheep", "sheep", "wolf", "sheep"]], [["sheep", "sheep", "wolf"]]], [["Oi! Sheep number 1! You are about to be eaten by a wolf!"], ["Pls go away and stop eating my sheep"]]]}
{"requirement": "def max_tri_sum(numbers):\"\"\"\n# Task\n\n**_Given_** an *array/list [] of n integers* , *find maximum triplet sum in the array* **_Without duplications_**   .\n___\n\n# Notes :\n\n* **_Array/list_** size is *at least 3* .\n\n* **_Array/list_** numbers could be a *mixture of positives , negatives and zeros* .\n\n* **_Repetition_** of numbers in *the array/list could occur* , So **_(duplications are not included when summing)_**.\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n___\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[[3, 2, 6, 8, 2, 3]], [[2, 9, 13, 10, 5, 2, 9, 5]], [[2, 1, 8, 0, 6, 4, 8, 6, 2, 4]], [[-3, -27, -4, -2, -27, -2]], [[-14, -12, -7, -42, -809, -14, -12]], [[-13, -50, 57, 13, 67, -13, 57, 108, 67]], [[-7, 12, -7, 29, -5, 0, -7, 0, 0, 29]], [[-2, 0, 2]], [[-2, -4, 0, -9, 2]], [[-5, -1, -9, 0, 2]]], "outputs": [[17], [32], [18], [-9], [-33], [232], [41], [0], [0], [1]], "starter_code": "def max_tri_sum(numbers):", "canonical_solution": "def max_tri_sum(numbers):\n    return sum(sorted(set(numbers))[-3:])", "entry_point": "max_tri_sum", "task_id": "TACO_lite/1406", "input_output_examples": [[["13:00"], ["13:09"], ["13:15"], ["13:29"], ["13:30"], ["13:31"], ["13:45"], ["00:48"], ["00:08"], ["12:00"], ["00:00"]], [["one o'clock"], ["nine minutes past one"], ["quarter past one"], ["twenty nine minutes past one"], ["half past one"], ["twenty nine minutes to two"], ["quarter to two"], ["twelve minutes to one"], ["eight minutes past midnight"], ["twelve o'clock"], ["midnight"]]]}
{"requirement": "def loose_change(coins_list, amount_of_change):\"\"\"\nA country has coins with denominations\n```python\ncoins_list = d1 < d2 < · · · < dn.\n```\nYou want to make change for n cents, using the smallest number of coins.\n\nWrite a function that will take a list of coin denominations and a desired amount and provide the least amount of coins needed.\n\"\"\"", "inputs": [[[1, 5, 10, 25], 37], [[1, 3, 4], 6], [[25, 5, 10, 1, 21], 63], [[1, 4, 5, 10], 8], [[1, 2, 5, 10, 20, 50, 100, 200], 93]], "outputs": [[4], [2], [3], [2], [5]], "starter_code": "def loose_change(coins_list, amount_of_change):", "canonical_solution": "from collections import deque\n\ndef loose_change(coins_list, amount_of_change):\n    q = deque([(0, amount_of_change)])\n    while q:\n        l, a = q.popleft()\n        if a == 0:\n            return l\n        q.extend(((l + 1, a - i) for i in coins_list if a >= i))", "entry_point": "loose_change", "task_id": "TACO_lite/1407", "input_output_examples": [[["ArNran u rstm5twob  e ePb"]], [["Answer to Number 5 Part b"]]]}
{"requirement": "def approx_root(n):\"\"\"\n#### Task:\n\nYour job here is to implement a method, `approx_root` in Ruby/Python/Crystal and `approxRoot` in JavaScript/CoffeeScript, that takes one argument, `n`, and returns the approximate square root of that number, rounded to the nearest hundredth and computed in the following manner.\n\n1.      Start with `n`.\n2.      To approximate the square root of n, we will first find the greatest perfect square that is below or equal to `n`. We will call the square root of this number `base`.\n3.      Then, we will take the lowest perfect square that is greater than or equal to `n`.\n4.      Next, subtract the greatest perfect square less than or equal to `n` from `n`. We will call this value `diff_gn`.\n5.      Find the difference between the lowest perfect square greater than or equal to `n` and the greatest perfect square less than or equal to `n`. We will call this value `diff_lg`.\n6.      Your final answer is `base` + (`diff_gn` / `diff_lg`).\n\nJust to clarify, if the input is a perfect square itself, you should return the exact square of the input.\n\nInputs will always be positive whole numbers. If you are having trouble understanding it, let me know with a comment.\n\nAlso check out my other creations — [Square Roots: Simplifying/Desimplifying](https://www.codewars.com/kata/square-roots-simplify-slash-desimplify/), [Square and Cubic Factors](https://www.codewars.com/kata/square-and-cubic-factors), [Keep the Order](https://www.codewars.com/kata/keep-the-order), [Naming Files](https://www.codewars.com/kata/naming-files), [Elections: Weighted Average](https://www.codewars.com/kata/elections-weighted-average), [Identify Case](https://www.codewars.com/kata/identify-case), [Split Without Loss](https://www.codewars.com/kata/split-without-loss), [Adding Fractions](https://www.codewars.com/kata/adding-fractions),\n[Random Integers](https://www.codewars.com/kata/random-integers), [Implement String#transpose](https://www.codewars.com/kata/implement-string-number-transpose), [Implement Array#transpose!](https://www.codewars.com/kata/implement-array-number-transpose), [Arrays and Procs #1](https://www.codewars.com/kata/arrays-and-procs-number-1), and [Arrays and Procs #2](https://www.codewars.com/kata/arrays-and-procs-number-2).\n\nIf you notice any issues or have any suggestions/comments whatsoever, please don't hesitate to mark an issue or just comment. Thanks!\n\"\"\"", "inputs": [[400], [401], [2], [4], [5], [6], [7], [8], [9], [100], [120], [106], [111], [121], [168]], "outputs": [[20], [20.02], [1.33], [2], [2.2], [2.4], [2.6], [2.8], [3], [10], [10.95], [10.29], [10.52], [11], [12.96]], "starter_code": "def approx_root(n):", "canonical_solution": "def approx_root(n):\n    base = int(n ** 0.5)\n    return round(base + (n - base ** 2) / ((base + 1) ** 2 - base ** 2), 2)", "entry_point": "approx_root", "task_id": "TACO_lite/1412", "input_output_examples": [[[0, 1000]], [[14]]]}
{"requirement": "def hidden(num):\n\t\"\"\"\nMaya writes weekly articles to a well known magazine, but she is missing one word each time she is about to send the article to the editor. The article is not complete without this word. Maya has a friend, Dan, and he is very good with words, but he doesn't like to just give them away. He texts Maya a number and she needs to find out the hidden word. \n\nThe words can contain only the letter: \"a\", \"b\", \"d\", \"e\", \"i\", \"l\", \"m\", \"n\", \"o\", and \"t\".\n\nLuckily, Maya has the key:\n\n\"a\" - 6\n\"b\" - 1 \n\"d\" - 7\n\"e\" - 4\n\"i\" - 3\n\"l\" - 2\n\"m\" - 9\n\"n\" - 8\n\"o\" - 0\n\"t\" - 5\n\nYou can help Maya by writing a function that will take a number between 100 and 999999 and return a string with the word. \n\nThe input is always a number, contains only the numbers in the key. \nThe output should be always a string with one word, all lowercase.\n\nMaya won't forget to thank you at the end of her article :)\n\"\"\"", "inputs": [[637], [7468], [49632], [1425], [6250], [12674], [4735], [7345], [3850], [2394], [2068], [137], [1065], [6509], [3549], [5394], [56124], [968], [103247], [67935], [7415], [2687], [261], [8054], [942547]], "outputs": [["aid"], ["dean"], ["email"], ["belt"], ["alto"], ["blade"], ["edit"], ["diet"], ["into"], ["lime"], ["loan"], ["bid"], ["boat"], ["atom"], ["item"], ["time"], ["table"], ["man"], ["boiled"], ["admit"], ["debt"], ["land"], ["lab"], ["note"], ["melted"]], "starter_code": "def hidden(num):\n\t", "canonical_solution": "hidden = lambda n: ''.join(('oblietadnm'[int(d)] for d in str(n)))", "entry_point": "hidden", "task_id": "TACO_lite/1413", "input_output_examples": [[["hello world!", "hello"], ["hello world!", "HELLO"], ["nowai", "nowaisir"], ["hello", "HE"], ["hello", "he"], ["any string", ""]], [[1], [0], [0], [0], [1], [1]]]}
{"requirement": "def layers(n):\"\"\"\nYour task is to create a function that given a number `n` simply returns the number of layers required to store up to `n` (included).\n\n**Fair warning:** you will always and only get positive integers, but be ready for bigger numbers in the tests!\n\nIf you had fun with this, also try some follow up kata: [progressive spiral number branch](https://www.codewars.com/kata/progressive-spiral-number-branch/) and [progressive spiral number distance](https://www.codewars.com/kata/progressive-spiral-number-distance/).\n\n*[Base idea taken from [here](http://adventofcode.com/2017/day/3)]*\n\"\"\"", "inputs": [[1], [5], [25], [30], [50]], "outputs": [[1], [2], [3], [4], [5]], "starter_code": "def layers(n):", "canonical_solution": "from math import ceil, sqrt\n\ndef layers(n):\n    return ceil(sqrt(n)) // 2 + 1", "entry_point": "layers", "task_id": "TACO_lite/1417", "input_output_examples": [[[2, 4, 6], [8, 5, 7], [3, 4, 5], [7, 12, 8]], [[0], [1], [2], [3]]]}
{"requirement": "def char_attribute(score):\"\"\"\nTaking into consideration the [3.5 edition rules](http://www.dandwiki.com/wiki/SRD:Ability_Scores#Table:_Ability_Modifiers_and_Bonus_Spells), your goal is to build a function that takes an ability score (worry not about validation: it is always going to be a non negative integer), will return:\n\n* attribute modifier, as indicated on the table of the above link;\n* maximum spell level for the spells you can cast (-1 for no spells at all) with that score;\n* the eventual extra spells you might get (as an array/list, with elements representing extra spells for 1st, 2nd,... spell level in order; empty array for no extra spells).\n\nThe result needs to be an object (associative array in PHP).\n\n*Note: I didn't explain things in detail and just pointed out to the table on purpose, as my goal is also to train the pattern recognition skills of whoever is going to take this challenges, so do not complain about a summary description. Thanks :)*\n\nIn the same series:\n\n* [D&D Character generator #1: attribute modifiers and spells](https://www.codewars.com/kata/d-and-d-character-generator-number-1-attribute-modifiers-and-spells/)\n* [D&D Character generator #2: psion power points](https://www.codewars.com/kata/d-and-d-character-generator-number-2-psion-power-points/)\n* [D&D Character generator #3: carrying capacity](https://www.codewars.com/kata/d-and-d-character-generator-number-3-carrying-capacity/)\n\"\"\"", "inputs": [[0], [1], [5], [10], [20]], "outputs": [[{"modifier": 0, "maximum_spell_level": -1, "extra_spells": []}], [{"modifier": -5, "maximum_spell_level": -1, "extra_spells": []}], [{"modifier": -3, "maximum_spell_level": -1, "extra_spells": []}], [{"modifier": 0, "maximum_spell_level": 0, "extra_spells": []}], [{"modifier": 5, "maximum_spell_level": 9, "extra_spells": [2, 1, 1, 1, 1]}]], "starter_code": "def char_attribute(score):", "canonical_solution": "def char_attribute(score):\n    return {'modifier': 0, 'maximum_spell_level': -1, 'extra_spells': []} if not score else {'modifier': score // 2 - 5, 'maximum_spell_level': -1 if score // 2 - 5 < 0 else min(9, score - 10), 'extra_spells': [1 + n // 4 for n in range(score // 2 - 5)][::-1][:9]}", "entry_point": "char_attribute", "task_id": "TACO_lite/1418", "input_output_examples": [[["74/3"]], [["24 2/3"]]]}
{"requirement": "def first_non_repeating_letter(string):\"\"\"\nWrite a function named `first_non_repeating_letter` that takes a string input, and returns the first character that is not repeated anywhere in the string.\n\nAs an added challenge, upper- and lowercase letters are considered the **same character**, but the function should return the correct case for the initial letter.\n\nIf a string contains *all repeating characters*, it should return an empty string (`\"\"`) or `None`.\n\"\"\"", "inputs": [["a"], ["stress"], ["moonmen"], [""], ["abba"], ["aa"], ["~><#~><"], ["hello world, eh?"], ["sTreSS"], ["Go hang a salami, I'm a lasagna hog!"]], "outputs": [["a"], ["t"], ["e"], [""], [""], [""], ["#"], ["w"], ["T"], [","]], "starter_code": "def first_non_repeating_letter(string):", "canonical_solution": "def first_non_repeating_letter(string):\n    string_lower = string.lower()\n    for i, letter in enumerate(string_lower):\n        if string_lower.count(letter) == 1:\n            return string[i]\n    return ''", "entry_point": "first_non_repeating_letter", "task_id": "TACO_lite/1419", "input_output_examples": [[[0], [1], [2], [3]], [[1], [2], [4], [7]]]}
{"requirement": "def four_piles(n, y):\"\"\"\n## Problem\n\nThere are `n` apples that need to be divided into four piles. We need two mysterious number `x` and `y`. Let The number of first pile equals to `x+y`, the number of second pile equals to `x-y`, the number of third pile equals to `x*y`, the number of fourth pile equals to `x/y`. We need to calculate how many apples are there in each pile.\n\nOf course, there won't be so many unknowns. We know the total number of apples(`n`) and the second mysterious number(`y`). \n\n## Task\n\nComplete function `fourPiles()`/`four_piles()` that accepts two arguments `n` and `y`, return an array contains the number of for piles. Each element in the result array should be a positive integer. If can not divide, please return `[]`.\n\"\"\"", "inputs": [[48, 3], [100, 4], [25, 4], [24, 4]], "outputs": [[[12, 6, 27, 3]], [[20, 12, 64, 4]], [[]], [[]]], "starter_code": "def four_piles(n, y):", "canonical_solution": "def four_piles(n, y):\n    x, r = divmod(n * y, (y + 1) ** 2)\n    return [] if r or x == y else [x + y, x - y, x * y, x // y]", "entry_point": "four_piles", "task_id": "TACO_lite/1420", "input_output_examples": [[[["1R4", "2L3", "3L2", "4L1", "1L0", "2R1", "3R2", "4R3", "1L4"]], [["1L2", "4R2", "3L3", "3L1", "1L4", "1R4"]]], [[1], [0]]]}
{"requirement": "def is_happy(n):\"\"\"\nA happy number is a number defined by the following process: starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.\n\nThose numbers for which this process ends in 1 are **happy numbers**, while those that do not end in 1 are unhappy numbers (or sad numbers) (Wikipedia).\n\nWrite a function that takes `n` as parameter and return `true` if and only if `n` is an happy number, `false` otherwise.\n\n\nHappy coding!\n\"\"\"", "inputs": [[1], [7], [16]], "outputs": [[true], [true], [false]], "starter_code": "def is_happy(n):", "canonical_solution": "def is_happy(n):\n    seen = set()\n    while n != 1:\n        n = sum((int(d) ** 2 for d in str(n)))\n        if n not in seen:\n            seen.add(n)\n        else:\n            return False\n    return True", "entry_point": "is_happy", "task_id": "TACO_lite/1425", "input_output_examples": [[[7206089, 32], [3388239104, 32], [153, 8]], [[3388239104], [7206089], [153]]]}
{"requirement": "def longest_word(letters):\"\"\"#Detail\n\n[Countdown](https://en.wikipedia.org/wiki/Countdown_(game_show) is a British game show with number and word puzzles. The letters round consists of the contestant picking 9 shuffled letters - either picking from the vowel pile or the consonant pile. The contestants are given 30 seconds to try to come up with the longest English word they can think of with the available letters - letters can not be used more than once unless there is another of the same character.\n\n#Task\n\nGiven an uppercase 9 letter string, ```letters```, find the longest word that can be made with some or all of the letters. The preloaded array ```words``` (or ```$words``` in Ruby) contains a bunch of uppercase words that you will have to loop through. Only return the longest word; if there is more than one, return the words of the same lengths in alphabetical order. If there are no words that can be made from the letters given, return ```None/nil/null```.\n\"\"\"", "inputs": [[""], ["MKMKMKMKM"], ["IIIWUGEZI"]], "outputs": [[null], [null], [null]], "starter_code": "def longest_word(letters):", "canonical_solution": "def longest_word(letters):\n    try:\n        word_list = [w for w in words if all((w.count(c) <= letters.count(c) for c in w))]\n        largest = sorted([w for w in word_list if len(w) == len(max(word_list, key=len))])\n        return largest if largest else None\n    except:\n        return None", "entry_point": "longest_word", "task_id": "TACO_lite/1426", "input_output_examples": [[], []]}
{"requirement": "def next_smaller(n):\"\"\"\nWrite a function that takes a positive integer and returns the next smaller positive integer containing the same digits.\n\nReturn -1 (for `Haskell`: return `Nothing`, for `Rust`: return `None`), when there is no smaller number that contains the same digits. Also return -1 when the next smaller number with the same digits would require the leading digit to be zero.\n\n* some tests will include very large numbers.\n* test data only employs positive integers.\n\n*The function you write for this challenge is the inverse of this kata: \"[Next bigger number with the same digits](http://www.codewars.com/kata/next-bigger-number-with-the-same-digits).\"*\n\"\"\"", "inputs": [[21], [907], [531], [1027], [441], [123456798], [513], [351], [315], [153], [135], [100], [2071], [1207], [414], [123456789], [29009], [1234567908], [9999999999], [59884848483559], [1023456789], [51226262651257], [202233445566], [506789]], "outputs": [[12], [790], [513], [-1], [414], [123456789], [351], [315], [153], [135], [-1], [-1], [2017], [1072], [144], [-1], [20990], [1234567890], [-1], [59884848459853], [-1], [51226262627551], [-1], [-1]], "starter_code": "def next_smaller(n):", "canonical_solution": "def next_smaller(n):\n    s = list(str(n))\n    i = j = len(s) - 1\n    while i > 0 and s[i - 1] <= s[i]:\n        i -= 1\n    if i <= 0:\n        return -1\n    while s[j] >= s[i - 1]:\n        j -= 1\n    s[i - 1], s[j] = (s[j], s[i - 1])\n    s[i:] = reversed(s[i:])\n    if s[0] == '0':\n        return -1\n    return int(''.join(s))", "entry_point": "next_smaller", "task_id": "TACO_lite/1427", "input_output_examples": [[["xyab", "xzca"]], [["ybzc"]]]}
{"requirement": "def score_pole_vault(vaulter_list):\"\"\"Your task is to determine the top 3 place finishes in a pole vault competition involving several different competitors. This is isn't always so simple, and it is often a source of confusion for people who don't know the actual rules.\n\nHere's what you need to know:\n\nAs input, you will receive an array of objects. Each object contains the respective competitor's name (as a string) and his/her results at the various bar heights (as an array of strings):\n\nIn the array of strings described above, each string represents the vaulter's performance at a given height. The possible values are based on commonly used written notations on a pole vault scoresheet:\nAn empty string indicates that the vaulter did not jump at this height for a variety of possible reasons (\"passed\" at this height, was temporarily called away to a different track and field event, was already eliminated from competition, or withdrew due to injury, for example).An upper-case X in the string represents an unsuccessful attempt at the height. (As you may know, the vaulter is eliminated from the competition after three consecutive failed attempts.)An upper-case O represents a successful attempt. If present at all, this will be the final character in the string, because it indicates that the vaulter has now successfully completed this height and is ready to move on.\n\nAll vaulters will have a result string (though possibly empty) for every height involved in the competition, making it possible to match up the results of different vaulters with less confusion.\n\nObviously, your first task is to determine who cleared the greatest height successfully. In other words, who has a \"O\" mark at a higher array element than any other competitor? You might want to work through the arrays from right to left to determine this. In the most straightforward case, you would first determine the winner, then second place, and finally third place by this simple logic.\n\nBut what if there's a tie for one of these finishing places? Proceed as follows (according to American high school rules, at least):\nFirst trace backwards to find the greatest height that both vaulters cleared successfully. Then determine who had the fewest unsuccessful attempts at this height (i.e., the fewest X's in the string for this height). This person wins the tie-break.But what if they're still tied with one another?  Do NOT continue to trace backwards through the heights! Instead, compare their total numbers of unsuccessful attempts at all heights in the competition. The vaulter with the fewest total misses wins the tie-break.But what if they're still tied? It depends on the finishing place:If it's for second or third place, the tie stands (i.e., is not broken).But if it's for first place, there must be a jump-off (like overtime or penalty kicks in other sports) to break the tie and determine the winner. (This jump-off occurs - hypothetically - after your code runs and is thus not a part of this kata.)\n\nReturn a single object as your result. Each place-finish that is included in the results (including at least first place as property \"1st\" and possibly second and third places as properties \"2nd\" and \"3rd\") should have as its value the respective vaulter's name. In the event of a tie, the value of the property is the names of all tied vaulters, in alphabetical order, separated by commas, and followed by the notation \"(jump-off)\" if the tie is for first place or \"(tie)\" if it's for second or third place.\n\nIf you are familiar with the awarding of place finishes in sporting events or team standings in a league, then you know that there won't necessarily be a 2nd or 3rd place, because ties in higher places \"bump\"  all lower places downward accordingly.\n\nOne more thing: You really shouldn't change the array of objects that you receive as input. This represents the physical scoresheet. We need this \"original document\" to be intact, so that we can refer back to it to resolve a disputed result!\n\nHave fun with this!\n\n- - - - -\n\nNotes for the Python version:\n\nThe rules for the Python version are the same as the original JavaScript version. \n\nThe input and output will look the same as the JavaScript version. But, the JavaScript objects will be replaced by Python dictionaries. The JavaScript arrays will be replaced by Python lists. The Python function name was changed to include underscores as is customary with Python names.\n\nThe input for the Python version will be a list containing dictionaries with the competitors' names and results. The names in the dictionaries are strings. The results are lists with a list of strings.\n\nThe returned results should be in a dictionary with one to three elements. \n\nI have tried to create test cases that have every conceivable tie situation.\n\nHave fun with this version, as well!\n\"\"\"", "inputs": [[[{"name": "Linda", "results": ["XXO", "O", "XXO", "O"]}, {"name": "Vickie", "results": ["O", "X", "", ""]}, {"name": "Debbie", "results": ["XXO", "O", "XO", "XXX"]}, {"name": "Michelle", "results": ["XO", "XO", "XXX", ""]}, {"name": "Carol", "results": ["XXX", "", "", ""]}]], [[{"name": "Linda", "results": ["XXO", "O", "XXO", "XXX"]}, {"name": "Vickie", "results": ["O", "X", "", ""]}, {"name": "Debbie", "results": ["XXO", "O", "XO", "XXX"]}, {"name": "Michelle", "results": ["XO", "XO", "XXX", ""]}, {"name": "Carol", "results": ["XXX", "", "", ""]}]], [[{"name": "Kimberly", "results": ["O", "O", "XO", "XXX"]}, {"name": "Constance", "results": ["O", "X", "", ""]}, {"name": "Phoebe", "results": ["XXO", "O", "XO", "XXX"]}, {"name": "Carol", "results": ["XXX", "", "", ""]}]], [[{"name": "Lana", "results": ["XO", "O", "O", "XXO", "XXX"]}, {"name": "Onyx", "results": ["XXO", "XXO", "XO", "O", "XXX"]}, {"name": "Molly", "results": ["XO", "XO", "O", "XXX", ""]}, {"name": "Alexandria", "results": ["XO", "XO", "O", "XXX", ""]}, {"name": "Rebecca", "results": ["XXO", "O", "O", "XXX", ""]}]], [[{"name": "Lana", "results": ["XO", "O", "O", "XXO", "XXX"]}, {"name": "Onyx", "results": ["XXO", "XXO", "XO", "O", "XXX"]}, {"name": "Molly", "results": ["XO", "XO", "O", "XXX", ""]}, {"name": "Rebecca", "results": ["XXO", "O", "O", "XXX", ""]}]], [[{"name": "Sarah", "results": ["O", "X", "", ""]}, {"name": "Brett", "results": ["XO", "O", "XO", "XXO"]}, {"name": "Sharon", "results": ["O", "X", "", ""]}, {"name": "Kelli", "results": ["XXX", "", "", ""]}, {"name": "Laura", "results": ["O", "XO", "XO", "XXO"]}]], [[{"name": "Elle", "results": ["O", "O", "XXO", "XXO"]}, {"name": "Sarah", "results": ["O", "X", "", ""]}, {"name": "Brett", "results": ["XO", "O", "XO", "XXO"]}, {"name": "Kelli", "results": ["XXX", "", "", ""]}, {"name": "Laura", "results": ["O", "XO", "XO", "XXO"]}]], [[{"name": "Allison", "results": ["XO", "O", "XXO", "XXX"]}, {"name": "Olivia", "results": ["O", "XO", "XXO", "XXX"]}, {"name": "Rhyana", "results": ["XO", "O", "XO", "XO"]}, {"name": "Zola", "results": ["XO", "O", "XXX", ""]}, {"name": "Megan", "results": ["XO", "O", "XXX", ""]}]], [[{"name": "Allison", "results": ["XO", "O", "XXO", "XXX"]}, {"name": "Olivia", "results": ["O", "XO", "XXO", "XXX"]}, {"name": "Rhyana", "results": ["XO", "O", "XO", "XO"]}, {"name": "Zola", "results": ["XO", "O", "XXX", ""]}, {"name": "Megan", "results": ["XO", "O", "XXO", "XXX"]}]], [[{"name": "Anna", "results": ["XO", "O", "XO", "XO"]}, {"name": "Allison", "results": ["XO", "O", "XXO", "XXX"]}, {"name": "Olivia", "results": ["O", "XO", "XXO", "XXX"]}, {"name": "Rhiana", "results": ["XO", "O", "XO", "XO"]}, {"name": "Zola", "results": ["XO", "O", "XXX", ""]}, {"name": "Megan", "results": ["XO", "O", "XXO", "XXX"]}]]], "outputs": [[{"1st": "Linda", "2nd": "Debbie", "3rd": "Michelle"}], [{"1st": "Debbie", "2nd": "Linda", "3rd": "Michelle"}], [{"1st": "Kimberly", "2nd": "Phoebe", "3rd": "Constance"}], [{"1st": "Onyx", "2nd": "Lana", "3rd": "Alexandria, Molly, Rebecca (tie)"}], [{"1st": "Onyx", "2nd": "Lana", "3rd": "Molly, Rebecca (tie)"}], [{"1st": "Brett, Laura (jump-off)", "3rd": "Sarah, Sharon (tie)"}], [{"1st": "Brett, Elle, Laura (jump-off)"}], [{"1st": "Rhyana", "2nd": "Allison, Olivia (tie)"}], [{"1st": "Rhyana", "2nd": "Allison, Megan, Olivia (tie)"}], [{"1st": "Anna, Rhiana (jump-off)", "3rd": "Allison, Megan, Olivia (tie)"}]], "starter_code": "def score_pole_vault(vaulter_list):", "canonical_solution": "def score_pole_vault(vaulter_list):\n    popytki = len(vaulter_list[0]['results'])\n    temp = {}\n    res = {}\n    for mas in vaulter_list:\n        i = popytki - 1\n        while i >= 0 and mas['results'][i].find('O') == -1:\n            i -= 1\n        if i < 0:\n            n = 0\n            m = ''.join(mas['results']).count('X')\n        else:\n            n = mas['results'][i].count('X')\n            m = ''.join(mas['results'][:i]).count('X')\n        new_key = (popytki - i, n, m)\n        temp[new_key] = temp.get(new_key, []) + [mas['name']]\n    k = iter(sorted(temp))\n    i = 0\n    while i < 3:\n        key = next(k)\n        if i == 0 and len(temp[key]) == 1:\n            res['1st'] = temp[key][0]\n            i += 1\n        elif i == 0 and len(temp[key]) > 1:\n            res['1st'] = ', '.join(sorted(temp[key])) + ' (jump-off)'\n            i += len(temp[key])\n        elif i == 1 and len(temp[key]) == 1:\n            res['2nd'] = temp[key][0]\n            i += 1\n        elif i == 1 and len(temp[key]) > 1:\n            res['2nd'] = ', '.join(sorted(temp[key])) + ' (tie)'\n            i += len(temp[key])\n        elif i == 2 and len(temp[key]) == 1:\n            res['3rd'] = temp[key][0]\n            i += 1\n        elif i == 2 and len(temp[key]) > 1:\n            res['3rd'] = ', '.join(sorted(temp[key])) + ' (tie)'\n            i += len(temp[key])\n    return res", "entry_point": "score_pole_vault", "task_id": "TACO_lite/1434", "input_output_examples": [[[[1, 2, 2], [1, 0, 0]]], [[true]]]}
{"requirement": "def get_score(dice):\"\"\"Zonk is addictive dice game. In each round player rolls 6 dice. Then (s)he composes combinations from them. Each combination gives certain points. \n\nThen player can take one or more dice combinations to his hand and re-roll remaining dice or save his score. Dice in player's hand won't be taken into account in subsequent rolls.\n\nIf no combinations can be composed - situation is called \"zonk\". Player thrown zonk loses all points in this round and next player moves. So it's player decision when to reroll and when to stop and save his score.\n\nYour task is simple - just evaluate current roll and return maximum number of points can be scored from it. If no combinations can be made - function must return string ``\"Zonk\"`` (without quotes).\n\nThere are different variations of Zonk. In this kata, we will use most common table of combinations:\n\nCombinationPoints\nStraight (1,2,3,4,5 and 6)1000 points\nThree pairs of any dice750 points\nThree of 11000 points\nThree of 2200 points\nThree of 3300 points\nThree of 4400 points\nThree of 5500 points\nThree of 6600 points\nFour of a kind2 × Three-of-a-kind score\nFive of a kind3 × Three-of-a-kind score\nSix of a kind4 × Three-of-a-kind score\nEvery 1100 points\nEvery 550 points\n\nEach die cannot be used in multiple combinations the same time, so three pairs of 2, 3 and 5 will worth you only ``750`` points (for three pairs), not 850 (for three pairs and two fives). But you can select multiple combinations, ``2 2 2 1 6`` will worth you ``300`` points (200 for three-of-kind '2' plus 100 for single '1' die)\n\nOf course, in real Zonk game it's sometimes not worth to collect all combination from roll. Taking less dice and rerolling more remaining may be better, but task is just to calculate maximum possible score from current single roll.\n\nP.S. Inspired by this kata: http://www.codewars.com/kata/5270d0d18625160ada0000e4\n\"\"\"", "inputs": [[[1]], [[5]], [[1, 1]], [[5, 5]], [[5, 1]], [[5, 6]], [[1, 1, 1]], [[2, 2, 2]], [[3, 3, 3]], [[4, 4, 4]], [[5, 5, 5]], [[6, 6, 6]], [[1, 2, 1]], [[1, 1, 5]], [[5, 5, 6]], [[1, 5, 5]], [[1, 1, 1, 1]], [[2, 2, 2, 2]], [[3, 3, 3, 3]], [[4, 4, 4, 4]], [[5, 5, 5, 5]], [[6, 6, 6, 6]], [[1, 5, 5, 1]], [[2, 3, 4, 5]], [[3, 3, 5, 3]], [[1, 1, 1, 1, 1]], [[2, 2, 2, 2, 2]], [[3, 3, 3, 3, 3]], [[4, 4, 4, 4, 4]], [[5, 5, 5, 5, 5]], [[6, 6, 6, 6, 6]], [[1, 5, 1, 5, 1]], [[1, 2, 3, 4, 5]], [[2, 3, 4, 5, 6]], [[1, 3, 4, 5, 2]], [[1, 1, 1, 1, 1, 1]], [[2, 2, 2, 2, 2, 2]], [[3, 3, 3, 3, 3, 3]], [[4, 4, 4, 4, 4, 4]], [[5, 5, 5, 5, 5, 5]], [[6, 6, 6, 6, 6, 6]], [[2, 1, 3, 4, 6, 5]], [[4, 4, 2, 2, 6, 6]], [[1, 2, 3, 4, 5, 5]], [[2, 2, 4, 2, 2, 4]], [[1, 3, 4, 5, 2, 2]], [[1, 5, 2, 1, 2, 5]], [[4, 1, 1, 1, 1, 5]], [[3, 5, 2, 4, 2, 6]], [[1, 6, 6, 1, 1, 6]]], "outputs": [[100], [50], [200], [100], [150], [50], [1000], [200], [300], [400], [500], [600], [200], [250], [100], [200], [2000], [400], [600], [800], [1000], [1200], [300], [50], [350], [3000], [600], [900], [1200], [1500], [1800], [1100], [150], [50], [150], [4000], [800], [1200], [1600], [2000], [2400], [1000], [750], [200], [400], [150], [750], [2050], [50], [1600]], "starter_code": "def get_score(dice):", "canonical_solution": "def get_score(dice):\n    if all((i in dice for i in range(1, 7))):\n        return 1000\n    if len(dice) == 6 and all((dice.count(d) == 2 for d in set(dice))):\n        return 750\n    score = 0\n    score += sum(((dice.count(d) == n) * d * (n - 2) * (1000 if d == 1 else 100) for d in set(dice) for n in range(3, 7)))\n    score += 100 * dice.count(1) if dice.count(1) < 3 else 0\n    score += 50 * dice.count(5) if dice.count(5) < 3 else 0\n    return score if score else 'Zonk'", "entry_point": "get_score", "task_id": "TACO_lite/1435", "input_output_examples": [[[3], [12], [16]], [[2], [4], [4]]]}
{"requirement": "def alternate_sort(l):\"\"\"\nWrite a function\n```python\nalternate_sort(l)\n```\nthat combines the elements of an array by sorting the elements ascending by their **absolute value** and outputs negative and non-negative integers alternatingly (starting with the negative value, if any).\n\"\"\"", "inputs": [[[5, 2, -3, -9, -4, 8]], [[5, -42, 2, -3, -4, 8, 9]], [[5, -42, 8, 2, -3, -4, 9]], [[5, -42, -8, 2, -3, -4, -9]], [[5, 2, 3, 4, 8, 9]], [[-5, -2, -3, -4, -8, -9]], [[-5, -2, 3, 4, -8, 0, -9]], [[-5, -2, 3, 9, 4, -2, -8, 0, 9, -9]]], "outputs": [[[-3, 2, -4, 5, -9, 8]], [[-3, 2, -4, 5, -42, 8, 9]], [[-3, 2, -4, 5, -42, 8, 9]], [[-3, 2, -4, 5, -8, -9, -42]], [[2, 3, 4, 5, 8, 9]], [[-2, -3, -4, -5, -8, -9]], [[-2, 0, -5, 3, -8, 4, -9]], [[-2, 0, -2, 3, -5, 4, -8, 9, -9, 9]]], "starter_code": "def alternate_sort(l):", "canonical_solution": "from itertools import chain, zip_longest\n\ndef alternate_sort(l):\n    l = sorted(l, key=abs)\n    p, n = ([n for n in l if n >= 0], [n for n in l if n < 0])\n    return [n for n in chain(*zip_longest(n, p)) if n is not None]", "entry_point": "alternate_sort", "task_id": "TACO_lite/1438", "input_output_examples": [[[2000], [0], [-64], [2016], [1974], [-10], [666]], [["2000 has 366 days"], ["0 has 366 days"], ["-64 has 366 days"], ["2016 has 366 days"], ["1974 has 365 days"], ["-10 has 365 days"], ["666 has 365 days"]]]}
{"requirement": "def inverse_slice(items, a, b):\"\"\"\nwrite a function `inverse_slice()` that takes three arguments: a list `items`, an integer `a` and an integer `b`. The function should return a new list with the slice specified by `items[a:b]` _excluded_. \n\nThe input will always be a valid list, `a` and `b` will always be different integers equal to or greater than zero, but they _may_ be zero or be larger than the length of the list.\n\"\"\"", "inputs": [[[12, 14, 63, 72, 55, 24], 2, 4], [[12, 14, 63, 72, 55, 24], 0, 3], [["Intuition", "is", "a", "poor", "guide", "when", "facing", "probabilistic", "evidence"], 5, 13]], "outputs": [[[12, 14, 55, 24]], [[72, 55, 24]], [["Intuition", "is", "a", "poor", "guide"]]], "starter_code": "def inverse_slice(items, a, b):", "canonical_solution": "def inverse_slice(items, a, b):\n    return items[:a] + items[b:]", "entry_point": "inverse_slice", "task_id": "TACO_lite/1440", "input_output_examples": [[[1, 2, 3, 2], [1, 2, 2, 1], [3, 2, 3, 2], [1, 2, 1, 2]], [[true], [false], [false], [false]]]}
{"requirement": "def collatz(n):\"\"\"\nThe Collatz Conjecture states that for any natural number n, if n is even, divide it by 2. If n is odd, multiply it by 3 and add 1. If you repeat the process continuously for n, n will eventually reach 1.\n\nWrite a program that will output the length of the Collatz Conjecture for any given n.\n\nFor more reading see: http://en.wikipedia.org/wiki/Collatz_conjecture\n\"\"\"", "inputs": [[100], [10], [500], [73567465519280238573], [1000000000], [1000000000000000]], "outputs": [[26], [7], [111], [362], [101], [276]], "starter_code": "def collatz(n):", "canonical_solution": "def collatz(n):\n    step = 1\n    while n != 1:\n        n = [n // 2, n * 3 + 1][n % 2]\n        step += 1\n    return step", "entry_point": "collatz", "task_id": "TACO_lite/1442", "input_output_examples": [[[454793]], [["4547-9-3"]]]}
{"requirement": "def sierpinski(n):\"\"\"\nCreate a function `sierpinski` to generate an ASCII representation of a Sierpinski triangle of order **N**. \n\nSeperate each line with `\\n`. You don't have to check the input value.\n\"\"\"", "inputs": [[1], [2], [3]], "outputs": [[" * \n* *"], ["   *   \n  * *  \n *   * \n* * * *"], ["       *       \n      * *      \n     *   *     \n    * * * *    \n   *       *   \n  * *     * *  \n *   *   *   * \n* * * * * * * *"]], "starter_code": "def sierpinski(n):", "canonical_solution": "def sierpinski(n):\n    t = ['*']\n    for _ in range(n):\n        t = [r.center(2 * len(t[-1]) + 1) for r in t] + [r + ' ' + r for r in t]\n    return '\\n'.join(t)", "entry_point": "sierpinski", "task_id": "TACO_lite/1445", "input_output_examples": [[[-1]], [[[]]]]}
{"requirement": "def median(arr):\n\t\"\"\"\nThe mean (or average) is the most popular measure of central tendency; however it does not behave very well when the data is skewed (i.e. wages distribution). In such cases, it's better to use the median.\n\nYour task for this kata is to find the median of an array consisting of n elements.\n\nYou can assume that all inputs are arrays of numbers in integer format. For the empty array your code should return `NaN` (false in JavaScript/`NULL` in PHP/`nil` in Ruby).\n\"\"\"", "inputs": [[[1, 2, 3, 4]], [[3, 4, 1, 2, 5]], [[10, 29, 23, 94, 76, 96, 5, 85, 4, 33, 47, 41, 87]], [[1]], [[1, -1]]], "outputs": [[2.5], [3], [41], [1], [0]], "starter_code": "def median(arr):\n\t", "canonical_solution": "from statistics import median", "entry_point": "median", "task_id": "TACO_lite/1446", "input_output_examples": [[["This is a test!", 1], ["This is a test!", 3], ["", 0]], [["Thes is i tast!"], ["This as e tist!"], [""]]]}
{"requirement": "def timed_reading(max_length, text):\"\"\"# Task\n Timed Reading is an educational tool used in many schools to improve and advance reading skills. A young elementary student has just finished his very first timed reading exercise. Unfortunately he's not a very good reader yet, so whenever he encountered a word longer than maxLength, he simply skipped it and read on.\n\n Help the teacher figure out how many words the boy has read by calculating the number of words in the text he has read, no longer than maxLength.\n\n Formally, a word is a substring consisting of English letters, such that characters to the left of the leftmost letter and to the right of the rightmost letter are not letters.\n\n# Input/Output\n\n\n - `[input]` integer `maxLength`\n\n    A positive integer, the maximum length of the word the boy can read.\n\n    Constraints: `1 ≤ maxLength ≤ 10.`\n\n\n - `[input]` string `text`\n\n    A non-empty string of English letters and punctuation marks.\n\n\n - `[output]` an integer\n\n    The number of words the boy has read.\n\"\"\"", "inputs": [[4, "The Fox asked the stork, 'How is the soup?'"], [1, "..."], [3, "This play was good for us."], [3, "Suddenly he stopped, and glanced up at the houses"], [6, "Zebras evolved among the Old World horses within the last four million years."], [5, "Although zebra species may have overlapping ranges, they do not interbreed."], [1, "Oh!"], [5, "Now and then, however, he is horribly thoughtless, and seems to take a real delight in giving me pain."]], "outputs": [[7], [0], [3], [5], [11], [6], [0], [14]], "starter_code": "def timed_reading(max_length, text):", "canonical_solution": "import re\n\ndef timed_reading(max_length, text):\n    return sum((len(i) <= max_length for i in re.findall('\\\\w+', text)))", "entry_point": "timed_reading", "task_id": "TACO_lite/1447", "input_output_examples": [[[24]], [[5]]]}
{"requirement": "def is_tune(notes):\"\"\"Theory\n This section does not need to be read and can be skipped, but it does provide some clarity into the inspiration behind the problem.\nIn music theory, a major scale consists of seven notes, or scale degrees, in order (with tonic listed twice for demonstrative purposes):\n\nTonic, the base of the scale and the note the scale is named after\nSupertonic, 2 semitones (or one tone) above the tonic\nMediant, 2 semitones above the supertonic and 4 above the tonic\nSubdominant, 1 semitone above the median and 5 above the tonic\nDominant, 2 semitones above the subdominant and 7 above the tonic\nSubmediant, 2 semitones above the dominant and 9 above the tonic\nLeading tone, 2 semitones above the mediant and 11 above the tonic\nTonic (again!), 1 semitone above the leading tone and 12 semitones (or one octave) above the tonic\n\nAn octave is an interval of 12 semitones, and the pitch class of a note consists of any note that is some integer\nnumber of octaves apart from that note. Notes in the same pitch class sound different but share similar properties. If a note is in a major scale, then any note in that note's pitch class is also in that major scale.\n\n Problem  \nUsing integers to represent notes, the major scale of an integer note will be an array (or list) of integers that follows the major scale pattern note, note + 2, note + 4, note + 5, note + 7, note + 9, note + 11.\n\nSecondly, the pitch class of a note will be the set of all integers some multiple of 12 above or below the note.\n\nThirdly, an integer note1 is considered to be in the key of an integer note2 if note1, or some integer in note1's pitch class, is in the major scale of note2.  More mathematically, an integer note1 is in the key of an integer note2 if there exists an integer i such that note1 + i × 12 is in the major scale of note2.\n\nAn array is in the key of an integer if all its elements are in the key of the integer.\n\nYour job is to create a function is_tune that will return whether or not an array (or list) of integers is a tune. An array will be considered a tune if there exists a single integer note all the integers in the array are in the key of. The function will accept an array of integers as its parameter and return True if the array is a tune or False otherwise. Empty and null arrays are not considered to be tunes. Additionally, the function should not change the input array.\n\"\"\"", "inputs": [[[1, 3, 6, 8, 10, 12]], [[1, 3, 6, 8, 10, 12, 13, 15]], [[1, 6, 3]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]], [[1, 3, 5, 6, 8, 10, 12]], [[3, 5, 6, 8, 10, 12]], [[]], [[1]], [[-11, -9, -7, -6, -4, -2, 0, 1, 3, 6, 8, 10, 12, 13, 15]], [[-4, -2, 0, 1, 3, 6, 8, 10, 12, 13, 15]]], "outputs": [[true], [true], [true], [false], [true], [true], [false], [true], [true], [true]], "starter_code": "def is_tune(notes):", "canonical_solution": "def is_tune(notes):\n    return bool(notes) and any((all(((n + i) % 12 in {0, 2, 4, 5, 7, 9, 11} for n in notes)) for i in range(12)))", "entry_point": "is_tune", "task_id": "TACO_lite/1448", "input_output_examples": [[[4, 2], [2, 2]], [[1111], [22]]]}
{"requirement": "def array_leaders(numbers):\"\"\"# Definition\n\nAn **_element is leader_** *if it is greater than The Sum all the elements to its right side*.\n____\n\n# Task\n\n**_Given_** an *array/list [] of integers* , **_Find_** *all the **_LEADERS_** in the array*.\n___\n\n# Notes \n\n* **_Array/list_** size is *at least 3* .\n\n* **_Array/list's numbers_**  Will be **_mixture of positives , negatives and  zeros_** \n\n* **_Repetition_** of numbers in *the array/list could occur*.\n\n* **_Returned Array/list_** *should store the leading numbers **_in the same order_** in the original array/list* .\n\"\"\"", "inputs": [[[1, 2, 3, 4, 0]], [[16, 17, 4, 3, 5, 2]], [[-1, -29, -26, -2]], [[-36, -12, -27]], [[5, 2]], [[0, -1, -29, 3, 2]]], "outputs": [[[4]], [[17, 5, 2]], [[-1]], [[-36, -12]], [[5, 2]], [[0, -1, 3, 2]]], "starter_code": "def array_leaders(numbers):", "canonical_solution": "def array_leaders(numbers):\n    return [n for i, n in enumerate(numbers) if n > sum(numbers[i + 1:])]", "entry_point": "array_leaders", "task_id": "TACO_lite/1455", "input_output_examples": [[["hello world!", " |"], ["hello world!", "o|rl"], ["hello world!", "h|ello world!"], ["hello world! hello world!", " |"], ["hello world! hello world!", "o|rl"], ["hello  hello  hello", " | "], [" hello world", " |"], ["  hello hello hello", " |"], ["  hello hello hello  ", " |"], ["  hello hello hello", "| "]], [[["hello ", "world!"]], [["hello wo", "rld!"]], [["h", "ello world!"]], [["hello ", "world! ", "hello ", "world!"]], [["hello wo", "rld! hello wo", "rld!"]], [["hello ", " hello ", " hello"]], [[" ", "hello ", "world"]], [[" ", " ", "hello ", "hello ", "hello"]], [[" ", " ", "hello ", "hello ", "hello ", " "]], [[" ", " hello", " hello", " hello"]]]]}
{"requirement": "def alphabet_war(fight):\"\"\"# Introduction\n\nThere is a war and nobody knows - the alphabet war!  \nThere are two groups of hostile letters. The tension between left side letters and right side letters was too high and the war began. The letters called airstrike to help them in war - dashes and dots are spreaded everywhere on the battlefield.\n\n# Task\n\nWrite a function that accepts `fight` string consists of only small letters and `*` which means a bomb drop place. Return who wins the fight after bombs are exploded. When the left side wins return `Left side wins!`, when the right side wins return `Right side wins!`, in other case return `Let's fight again!`.\n\nThe left side letters and their power:\n```\n w - 4\n p - 3 \n b - 2\n s - 1\n```\nThe right side letters and their power:\n```\n m - 4\n q - 3 \n d - 2\n z - 1\n```\nThe other letters don't have power and are only victims.  \nThe `*` bombs kills the adjacent letters ( i.e. `aa*aa` => `a___a`, `**aa**` => `______` );\n\"\"\"", "inputs": [["z"], ["z*dq*mw*pb*s"], ["zdqmwpbs"], ["zz*zzs"], ["sz**z**zs"], ["z*z*z*zs"], ["*wwwwww*z*"]], "outputs": [["Right side wins!"], ["Let's fight again!"], ["Let's fight again!"], ["Right side wins!"], ["Left side wins!"], ["Left side wins!"], ["Left side wins!"]], "starter_code": "def alphabet_war(fight):", "canonical_solution": "import re\npowers = {'w': -4, 'p': -3, 'b': -2, 's': -1, 'm': +4, 'q': +3, 'd': +2, 'z': +1}\n\ndef alphabet_war(fight):\n    fight = re.sub('.(?=\\\\*)|(?<=\\\\*).', '', fight)\n    result = sum((powers.get(c, 0) for c in fight))\n    if result < 0:\n        return 'Left side wins!'\n    elif result > 0:\n        return 'Right side wins!'\n    else:\n        return \"Let's fight again!\"", "entry_point": "alphabet_war", "task_id": "TACO_lite/1457", "input_output_examples": [[[[2, 10, 9, 3]], [[]]], [[true], [false]]]}
{"requirement": "def hq9(code):\"\"\"\nYou task is to implement an simple interpreter for the notorious esoteric language [hq9+](https://esolangs.org/wiki/hq9+) that will work for a single character input:\n\n- If the input is `'H'`, return `'Hello World!'`\n- If the input is `'Q'`, return the input\n- If the input is `'9'`, return the full lyrics of [99 Bottles of Beer](http://www.99-bottles-of-beer.net/lyrics.html). It should be formatted like this:\n\n```if:rust\n__Note__: In Rust, return `Some` containing the appropriate value.\n```\n\n- For everything else, don't return anything (return `null` in C#, `None` in Rust).\n\n(`+` has no visible effects so we can safely ignore it.)\n\"\"\"", "inputs": [["X"], ["H"], ["Q"]], "outputs": [[null], ["Hello World!"], ["Q"]], "starter_code": "def hq9(code):", "canonical_solution": "LINES = '{0} of beer on the wall, {0} of beer.\\nTake one down and pass it around, {1} of beer on the wall.'\nSONG = '\\n'.join((LINES.format('{} bottles'.format(n), '{} bottle'.format(n - 1) + 's' * (n != 2)) for n in range(99, 1, -1)))\nSONG += '\\n1 bottle of beer on the wall, 1 bottle of beer.\\nTake one down and pass it around, no more bottles of beer on the wall.\\nNo more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.'\n\ndef hq9(code):\n    return {'H': 'Hello World!', 'Q': 'Q', '9': SONG}.get(code, None)", "entry_point": "hq9", "task_id": "TACO_lite/1460", "input_output_examples": [[[1, [0, 0]], [2, [1, 0]], [2, [1, 1]], [3, [1, 0]]], [[0], [2], [1], [3]]]}
{"requirement": "def number_format(n):\"\"\"\nFormat any integer provided into a string with \",\" (commas) in the correct places.\n\"\"\"", "inputs": [[100000], [5678545], [-420902], [-3], [-1003]], "outputs": [["100,000"], ["5,678,545"], ["-420,902"], ["-3"], ["-1,003"]], "starter_code": "def number_format(n):", "canonical_solution": "def number_format(n):\n    return f'{n:,}'", "entry_point": "number_format", "task_id": "TACO_lite/1461", "input_output_examples": [[[10, 100], [20, 120]], [[[12, 15, 35, 42, 60, 63, 66, 68, 84, 90, 95]], [[35, 42, 60, 63, 66, 68, 84, 90, 95, 110, 114, 119]]]]}
{"requirement": "def cut_fruits(fruits):\"\"\"\n## Description\nYou are a *Fruit Ninja*, your skill is cutting fruit. All the fruit will be cut in half by your knife. As you see, all fruits are cut in half. You should pay attention to `\"apple\"`: if you cannot cut a fruit into equal parts, then the first part will has a extra character.\n\nYou should only cut the fruit, other things **should not be cut**, such as the `\"bomb\"`:\n\nThe valid fruit names are preloded for you as:\n```python\nFRUIT_NAMES\n```\n\n## Task\n\n```if:javascript\nComplete function `cutFruits` that accepts argument `fruits`.\nReturns the result in accordance with the rules above.\n```\n```if:ruby,python\nComplete function `cut_fruits` that accepts argument `fruits`.\nReturns the result in accordance with the rules above.\n```\n```if:haskell\nComplete function cutFruits that accepts a String array/list.\nReturns the result in accordance with the rules above.\n```\n\nOK, that's all. I guess this is a 7kyu kata. If you agree, please rank it as 7kyu and vote `very`;-) If you think this kata is too easy or too hard, please shame me by rank it as you want and vote `somewhat` or `none` :[\n\n---\n\n##### *[Click here](https://www.codewars.com/kata/search/?q=i+guess+this+is+a+kyu+kata)  for more more \"I guess this is ...kyu\" katas!*\n\"\"\"", "inputs": [[["apple", "pear", "banana"]], [["apple", "pear", "banana", "bomb"]], [[]]], "outputs": [[["app", "le", "pe", "ar", "ban", "ana"]], [["app", "le", "pe", "ar", "ban", "ana", "bomb"]], [[]]], "starter_code": "def cut_fruits(fruits):", "canonical_solution": "FRUIT_NAMES = {'blueberry', 'pear', 'durian', 'ginkgo', 'peach', 'apple', 'cantaloupe', 'fig', 'mangosteen', 'watermelon', 'pineapple', 'cherry', 'pomegranate', 'carambola', 'hawthorn', 'persimmon', 'apricot', 'plum', 'litchi', 'mango', 'jujube', 'lemon', 'orange', 'tomato', 'banana', 'coconut', 'grape', 'pitaya'}\n\ndef cut(x):\n    if x in FRUIT_NAMES:\n        m = (len(x) + 1) // 2\n        return [x[:m], x[m:]]\n    return [x]\n\ndef cut_fruits(fruits):\n    return [x for xs in map(cut, fruits) for x in xs]", "entry_point": "cut_fruits", "task_id": "TACO_lite/1462", "input_output_examples": [[["UGCGAUGAAUGGGCUCGCUCC"], ["AUGUGA"]], [["CDEWARS"], ["M"]]]}
{"requirement": "def is_polydivisible(s, b):\n\t\"\"\"\n### Background\n\nI was reading a [book](http://www.amazon.co.uk/Things-Make-Do-Fourth-Dimension/dp/1846147646/) recently, \"Things to Make and Do in the Fourth Dimension\" by comedian and mathematician Matt Parker, and in the first chapter of the book Matt talks about problems he likes to solve in his head to take his mind off the fact that he is in his dentist's chair, we've all been there!\n\nThe problem he talks about relates to polydivisible numbers, and I thought a kata should be written on the subject as it's quite interesting. (Well it's interesting to me, so there!)\n\n### Polydivisib... huh what?\n\nSo what are they?\n\nA polydivisible number is divisible in an unusual way. The first digit is cleanly divisible by `1`, the first two digits are cleanly divisible by `2`, the first three by `3` and so on.\n\nThe interesting thing about polydivisiblity is that it relates to the underlying number, but not the base it is written in, so if aliens came to Earth and used base `23` (`11` fingers on one hand and `12` on the other), no matter what squiggles they use to write numbers, they would find the same numbers polydivisible!\n\n### Kata\n\nIn this kata you must implement two methods: `is_polydivisible(n, b)` and `get_polydivisible(n, b)`.\n\nThe first `is_polydivisible(n, b)` will return `True` if `n` is polydivisible in base `b` or `False` if not.\n\nThe second `get_polydivisible(n, b)` will return the `n`th polydivisible number using base `b`, the first polydivisible number is of course always `0`.\n\nYou can assume that all inputs are valid.\n\n```if:haskell\nAll necessary arithmetic can be done in `Int` range.\n```\n\n#### A Note on Bases\n\nThe maximum base used is base `62`, and uses characters in the following order `[0-9][A-Z][a-z]` to denote its digits, base `n` will use the first `n` characters of this sequence.\n```if-not:haskell\nA constant CHARS has been declared with this sequence for you.\n```\n\"\"\"", "inputs": [["123", 10], ["1234", 10], ["12345", 10], ["12365", 10], ["123220", 10], ["50041", 6], ["140410", 6], ["203230", 6], ["30043052", 6]], "outputs": [[true], [false], [false], [true], [false], [true], [true], [true], [true]], "starter_code": "def is_polydivisible(s, b):\n\t", "canonical_solution": "l = {j: i for i, j in enumerate('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz')}\nl_ = dict(enumerate('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'))\nis_polydivisible = lambda n, base: next((0 for i in range(1, len(n) + 1) if get_base(n[:i], base) % i), 1)\nget_base = lambda n, base: sum((int(l[j]) * base ** i for i, j in enumerate(n[::-1])))\n\ndef get_polydivisible(n, base):\n    c = i = 0\n    r = ''\n    while c < n:\n        t = to_base(i, base)\n        if is_polydivisible(t, base):\n            c += 1\n            r = t\n        i += 1\n    return ''.join(r) or '0'\n\ndef to_base(n, base):\n    li = []\n    while n:\n        n, b = divmod(n, base)\n        li.append(l_[b])\n    return li[::-1]", "entry_point": "is_polydivisible", "task_id": "TACO_lite/1463", "input_output_examples": [[[1, 0], [1, 2], [0, 1], [1, 1], [-1, 0], [-1, 2]], [[1], [3], [1], [1], [-1], [2]]]}
{"requirement": "def who_is_paying(name):\n\t\"\"\"\nDon Drumphet lives in a nice neighborhood, but one of his neighbors has started to let his house go. Don Drumphet wants to build a wall between his house and his neighbor’s, and is trying to get the neighborhood association to pay for it. He begins to solicit his neighbors to petition to get the association to build the wall. Unfortunately for Don Drumphet, he cannot read very well, has a very limited attention span, and can only remember two letters from each of his neighbors’ names. As he collects signatures, he insists that his neighbors keep truncating their names until two letters remain, and he can finally read them.\n\nYour code will show Full name of the neighbor and the truncated version of the name as an array. If the number of the characters in name is less than or equal to two, it will return an array containing only the name as is.\n\"\"\"", "inputs": [["Mexico"], ["Melania"], ["Melissa"], ["Me"], [""], ["I"]], "outputs": [[["Mexico", "Me"]], [["Melania", "Me"]], [["Melissa", "Me"]], [["Me"]], [[""]], [["I"]]], "starter_code": "def who_is_paying(name):\n\t", "canonical_solution": "who_is_paying = lambda n: [n, n[:2]] if len(n) > 2 else [n]", "entry_point": "who_is_paying", "task_id": "TACO_lite/1464", "input_output_examples": [[[123], [-456], [1000]], [[321], [-654], [1]]]}
{"requirement": "def sort_by_height(a):\"\"\"# Task\n Some people are standing in a row in a park. There are trees between them which cannot be moved. \n \n Your task is to rearrange the people by their heights in a non-descending order without moving the trees.\n\n# Input/Output\n\n\n - `[input]` integer array `a`\n\n    If a[i] = -1, then the ith position is occupied by a tree. Otherwise a[i] is the height of a person standing in the ith position.\n\n    Constraints:\n\n    `5 ≤ a.length ≤ 30,`\n\n    `-1 ≤ a[i] ≤ 200.`\n\n\n - `[output]` an integer array\n\n    `Sorted` array a with all the trees untouched.\n\"\"\"", "inputs": [[[-1, 150, 190, 170, -1, -1, 160, 180]], [[-1, -1, -1, -1, -1]], [[4, 2, 9, 11, 2, 16]]], "outputs": [[[-1, 150, 160, 170, -1, -1, 180, 190]], [[-1, -1, -1, -1, -1]], [[2, 2, 4, 9, 11, 16]]], "starter_code": "def sort_by_height(a):", "canonical_solution": "def sort_by_height(a):\n    s = iter(sorted((x for x in a if x != -1)))\n    return [x if x == -1 else next(s) for x in a]", "entry_point": "sort_by_height", "task_id": "TACO_lite/1466", "input_output_examples": [[[[0, 0], [1, 1]]], [[[2, 2]]]]}
{"requirement": "def sxore(n):\"\"\"\n## Objective\n\nGiven a number `n` we will define it's sXORe to be `0 XOR 1 XOR 2 ... XOR n` where `XOR` is the [bitwise XOR operator](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nWrite a function that takes `n` and returns it's sXORe.\n\"\"\"", "inputs": [[0], [1], [2], [50], [1000000], [1000001], [9999999999999999999999999]], "outputs": [[0], [1], [3], [51], [1000000], [1], [0]], "starter_code": "def sxore(n):", "canonical_solution": "def sxore(n):\n    return [n, 1, n + 1, 0][n % 4]", "entry_point": "sxore", "task_id": "TACO_lite/1468", "input_output_examples": [[[["Jason", "Jackson", "Jordan", "Johnny"], ["Jason", "Jordan", "Jennifer"]]], [[["Jason", "Jordan"]]]]}
{"requirement": "def is_divisible_by_6(s):\"\"\"# Task\nA masked number is a string that consists of digits and one asterisk (`*`) that should be replaced by exactly one digit. Given a masked number `s`, find all the possible options to replace the asterisk with a digit to produce an integer divisible by 6.\n\n\n# Input/Output\n\n`[input]` string `s`\n\nA masked number.\n\n`1 ≤ inputString.length ≤ 10000.`\n\n`[output]` a string array\n\nSorted array of strings representing all non-negative integers that correspond to the given mask and are divisible by 6.\n\"\"\"", "inputs": [["1*0"], ["*"], ["*1"], ["*2"], ["81234567890*"], ["41*"], ["*6"], ["2345*345729"], ["34234*2"], ["1234567890123456789012345678*0"]], "outputs": [[["120", "150", "180"]], [["0", "6"]], [[]], [["12", "42", "72"]], [["812345678904"]], [["414"]], [["6", "36", "66", "96"]], [[]], [["3423402", "3423432", "3423462", "3423492"]], [["123456789012345678901234567800", "123456789012345678901234567830", "123456789012345678901234567860", "123456789012345678901234567890"]]], "starter_code": "def is_divisible_by_6(s):", "canonical_solution": "def is_divisible_by_6(s):\n    all_numbers = [int(s.replace('*', str(n))) for n in range(10)]\n    return [str(n) for n in all_numbers if n % 6 == 0]", "entry_point": "is_divisible_by_6", "task_id": "TACO_lite/1475", "input_output_examples": [[[[12, -18, -15, -18]]], [["0"]]]}
{"requirement": "def ulam_sequence(u, v, n):\"\"\"\nThis is the performance edition of [this kata](https://www.codewars.com/kata/ulam-sequences). If you didn't do it yet, you should begin there.\n\n---\n\nThe Ulam sequence U is defined by `u0=u`, `u1=v`, with the general term `u_n` for `n>2` given by the least integer expressible uniquely as the sum of two distinct earlier terms.  \nIn other words, the next number is always the smallest, unique sum of any two previous terms.\n\nYou'll have to write a code that creates an Ulam Sequence starting with `u0`, `u1` and containing `n` terms.\n\n---\n\n# ___The pitfall...___\n\nWhile the passing solutions of the first version could have a time complexity of O(N^(3)) (or even O(N^(4))!!), with 20 tests up to 100 terms only, here you'll have to manage generation of sequences up to 1500 terms before time out.\n\n___Inputs:___\n\n* `u0` and `u1`: integers, greater than or equal to 1\n* `n`: integer greater than 1, length of the returned list\n\n___Configuration of the tests:___\n\n```if:python\n* 6 small fixed tests\n* 20 random tests on small sequences (10 to 30 terms)\n* 13 large random tests (1500 terms)\n```\n```if:ruby\n* 6 small fixed tests\n* 20 random tests on small sequences (10 to 30 terms)\n* 16 large random tests (1500 terms)\n```\n```if:javascript,go\n* 6 small fixed tests\n* 40 random tests on small sequences (10 to 30 terms)\n* 30 large random tests (2450 terms)\n```\n\n---\n\nDescription Reference: http://mathworld.wolfram.com/UlamSequence.html\n\"\"\"", "inputs": [[1, 2, 5], [3, 4, 5], [5, 6, 8]], "outputs": [[[1, 2, 3, 4, 6]], [[3, 4, 7, 10, 11]], [[5, 6, 11, 16, 17, 21, 23, 26]]], "starter_code": "def ulam_sequence(u, v, n):", "canonical_solution": "def ulam_sequence(u, v, n):\n    lst, seq, ex, q = ([], 1, 1, 1 << v | 1 << u)\n    for _ in range(n):\n        w = q & -q\n        l = w.bit_length() - 1\n        s = seq << l\n        seq |= w\n        lst.append(l)\n        ex |= s & q\n        q |= s\n        q &= ~ex\n    return lst", "entry_point": "ulam_sequence", "task_id": "TACO_lite/1478", "input_output_examples": [[[348], [340], [333], [6], [0]], [[3675], [1631], [369], [6], [0]]]}
{"requirement": "def what_time_is_it(angle):\"\"\"\n# Story\n\nDue to lack of maintenance the minute-hand has fallen off Town Hall clock face.\n\nAnd because the local council has lost most of our tax money to a Nigerian email scam there are no funds to fix the clock properly. \n\nInstead, they are asking for volunteer programmers to write some code that tell the time by only looking at the remaining hour-hand!\n\nWhat a bunch of cheapskates!\n\nCan you do it?\n\n# Kata\n\nGiven the ```angle``` (in degrees) of the hour-hand, return the time in HH:MM format. Round _down_ to the nearest minute.\n\n# Notes\n\n* 0 <= ```angle``` <= 360\n\"\"\"", "inputs": [[0], [360], [90], [180], [270], [30], [40], [45], [50], [60]], "outputs": [["12:00"], ["12:00"], ["03:00"], ["06:00"], ["09:00"], ["01:00"], ["01:20"], ["01:30"], ["01:40"], ["02:00"]], "starter_code": "def what_time_is_it(angle):", "canonical_solution": "def what_time_is_it(angle):\n    hr = int(angle // 30)\n    mn = int(angle % 30 * 2)\n    if hr == 0:\n        hr = 12\n    return '{:02d}:{:02d}'.format(hr, mn)", "entry_point": "what_time_is_it", "task_id": "TACO_lite/1480", "input_output_examples": [[["aa_bb_cc_dd_bb_e", "bb"], ["aaabbbcccc", "bbb"], ["aaa", "aa"], ["aaa", ""], ["aaa", "aa", false]], [[2], [1], [2], [0], [1]]]}
{"requirement": "def super_size(n):\"\"\"\nWrite a function that rearranges an integer into its largest possible value. \n\nIf the argument passed through is single digit or is already the maximum possible integer, your function should simply return it.\n\"\"\"", "inputs": [[69], [513], [2017], [414], [608719], [123456789], [700000000001], [666666], [2], [0]], "outputs": [[96], [531], [7210], [441], [987610], [987654321], [710000000000], [666666], [2], [0]], "starter_code": "def super_size(n):", "canonical_solution": "def super_size(n):\n    return int(''.join(sorted(str(n), reverse=True)))", "entry_point": "super_size", "task_id": "TACO_lite/1481", "input_output_examples": [[["x-(y+z)"], ["x-(y-z)"], ["u-(v-w-(x+y))-z"], ["x-(-y-z)"]], [["x-y-z"], ["x-y+z"], ["u-v+w+x+y-z"], ["x+y+z"]]]}
{"requirement": "def t9(words, seq):\"\"\"The t9 typing predictor helps with suggestions for possible word combinations on an old-style numeric keypad phone. Each digit in the keypad (2-9) represents a group of 3-4 letters. To type a letter, press once the key which corresponds to the letter group that contains the required letter. Typing words is done by typing letters of the word in sequence.\n\nThe letter groups and corresponding digits are as follows:\n```\n -----------------\n|  1  |  2  |  3  |\n|     | ABC | DEF |\n|-----|-----|-----|\n|  4  |  5  |  6  |\n| GHI | JKL | MNO |\n|-----|-----|-----|\n|  7  |  8  |  9  |\n| PQRS| TUV | WXYZ|\n -----------------\n```\n\nThe prediction algorithm tries to match the input sequence against a predefined dictionary of words. The combinations which appear in the dictionary are considered valid words and are shown as suggestions.\n\nGiven a list of words as a reference dictionary, and a non-empty string (of digits 2-9) as input, complete the function which returns suggestions based on the string of digits, which are found in the reference dictionary.\n\nNote that the dictionary must be case-insensitive (`'hello'` and `'Hello'` are same entries). The list returned must contain the word as it appears in the dictionary (along with the case).\n\nIf there is no prediction available from the given dictionary, then return the string containing first letters of the letter groups, which correspond to the input digits.\n\"\"\"", "inputs": [[["hello", "world"], "43556"], [["good", "home", "new"], "4663"], [["gone", "hood", "good", "old"], "4663"], [["Hello", "world"], "43556"], [["gOOD", "hOmE", "NeW"], "4663"], [["goNe", "hood", "GOOD", "old"], "4663"], [[], "43556"], [["gold"], "4663"], [["gone", "hood", "good", "old"], "729"]], "outputs": [[["hello"]], [["good", "home"]], [["gone", "hood", "good"]], [["Hello"]], [["gOOD", "hOmE"]], [["goNe", "hood", "GOOD"]], [["gdjjm"]], [["gmmd"]], [["paw"]]], "starter_code": "def t9(words, seq):", "canonical_solution": "FROM = 'abc def ghi jkl mno pqrs tuv wxyz'.split()\nTO_NUM = '222 333 444 555 666 7777 888 9999'.split()\nTABLE_TO_NUM = str.maketrans(*map(''.join, (FROM, TO_NUM)))\nTABLE_TO_CHAR = str.maketrans(*map(lambda lst: ''.join((x[0] for x in lst)), (TO_NUM, FROM)))\n\ndef t9(words, seq):\n    return [w for w in words if seq == w.lower().translate(TABLE_TO_NUM)] or [seq.translate(TABLE_TO_CHAR)]", "entry_point": "t9", "task_id": "TACO_lite/1484", "input_output_examples": [[[50.0, 130.0, [[-1.0, 120.0], [-1.5, 120.0]]]], [[2]]]}
{"requirement": "def chameleon(chameleons, color):\"\"\"**Story**  \nOn some island lives a chameleon population. Chameleons here can be of only one of three colors - red, green and blue. Whenever two chameleons of different colors meet, they can change their colors to a third one (i.e. when red and blue chameleons meet, they can both become green). There is no other way for chameleons to change their color (in particular, when red and blue chameleons meet, they can't become both red, only third color can be assumed).  \nChameleons want to become of one certain color. They may plan they meetings to reach that goal. Chameleons want to know, how fast their goal can be achieved (if it can be achieved at all).\n\n**Formal problem**  \n*Input:*  \nColor is coded as integer, 0 - red, 1 - green, 2 - blue.\nChameleon starting population is given as an array of three integers, with index corresponding to color (i.e. [2, 5, 3] means 2 red, 5 green and 3 blue chameleons). All numbers are non-negative, their sum is between `1` and `int.MaxValue` (maximal possible value for `int` type, in other languages). Desired color is given as an integer from 0 to 2.  \n*Output:*  \n`Kata.Chameleon` should return *minimal* number of meetings required to change all chameleons to a given color, or -1 if it is impossible.\n\n**Notes and hints**  \n-- Some tests use rather big input values. Be effective.  \n-- There is a strict proof that answer is either -1 or no greater than total number of chameleons (thus, return type `int` is justified). Don't worry about overflow.  \n  \n**Credits**  \nKata based on \"Chameleons\" puzzle from braingames.ru: http://www.braingames.ru/?path=comments&puzzle=226 (russian, not translated).\n\"\"\"", "inputs": [[[0, 0, 17], 1], [[1, 1, 15], 2], [[34, 32, 35], 0], [[34, 32, 35], 1], [[33, 0, 35], 2], [[673905669, 673905681, 174867657], 2], [[74356, 0, 0], 0], [[1, 2147483646, 1], 1], [[0, 1, 0], 2], [[0, 1, 0], 1], [[0, 333, 0], 0]], "outputs": [[-1], [1], [35], [-1], [33], [673905681], [0], [1], [-1], [0], [-1]], "starter_code": "def chameleon(chameleons, color):", "canonical_solution": "def chameleon(chameleons, color):\n    (_, a), (_, b), (_, c) = sorted(((i == color, v) for i, v in enumerate(chameleons)))\n    return -1 if not a and (not c) or (b - a) % 3 else b", "entry_point": "chameleon", "task_id": "TACO_lite/1486", "input_output_examples": [[[0.01, 3], [0.04, 6], [0.0001, 0], [0.012, 0]], [["Needs review"], ["Fine"], ["Needs review"], ["Pants on fire"]]]}
{"requirement": "def performant_smallest(arr, n):\"\"\"\nThis challenge is based on [the kata](https://www.codewars.com/kata/n-smallest-elements-in-original-order) by GiacomoSorbi. Before doing this one it is advisable to complete the non-performance version first.\n\n___\n\n# Task\n\nYou will be given an array of random integers and a number `n`. You have to extract `n` smallest integers out of it **preserving the original order**.\n\n# Notes\n\n* There will be duplicates in the array, and they have to be returned in the order of their each separate appearence.\n* This kata is an example of the \"know your data\" principle. Remember this while searching for the correct approach.\n\n# Performance tests\n\n```python\nTests: 15\nArray size: 800,000\nValues range: [1; 50]\nNumber of elements to return: 25-50% of the array\n```\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5], 3], [[5, 4, 3, 2, 1], 3], [[1, 2, 3, 4, 1], 3], [[2, 1, 3, 2, 3], 3]], "outputs": [[[1, 2, 3]], [[3, 2, 1]], [[1, 2, 1]], [[2, 1, 2]]], "starter_code": "def performant_smallest(arr, n):", "canonical_solution": "from collections import Counter\nfrom itertools import count, islice\n\ndef performant_smallest(arr, n):\n    cnts = Counter(arr)\n    total = 0\n    for i, c in sorted(cnts.items()):\n        total += c\n        if total >= n:\n            break\n    available = count(c + n - total, -1)\n    it = (x for x in arr if x < i or (x == i and next(available) > 0))\n    return list(islice(it, n))", "entry_point": "performant_smallest", "task_id": "TACO_lite/1487", "input_output_examples": [[["abc"], ["codewars"], ["abc-#@5"]], [["123"], ["315452311819"], ["123-#@5"]]]}
{"requirement": "def factors(n):\"\"\"\n#### Task:\n\nYour job here is to implement a function `factors`, which takes a number `n`, and outputs an array of arrays comprised of two\nparts, `sq` and `cb`. The part `sq` will contain all the numbers that, when squared, yield a number which is a factor of `n`,\nwhile the `cb` part will contain all the numbers that, when cubed, yield a number which is a factor of `n`.  Discard all `1`s\nfrom both arrays.\n\nBoth `sq` and `cb` should be sorted in ascending order.\n\n#### What it looks like:\n\n```python\nfactors(int) #=> [\n  sq (all the numbers that can be squared to give a factor of n) : list,\n  cb (all the numbers that can be cubed   to give a factor of n) : list\n]\n```\n\nIf you notice any issues or have any suggestions/comments whatsoever, please don't hesitate to mark an issue or just comment. Thanks!\n\"\"\"", "inputs": [[1], [4], [16], [81], [80], [100], [5], [120], [18], [8]], "outputs": [[[[], []]], [[[2], []]], [[[2, 4], [2]]], [[[3, 9], [3]]], [[[2, 4], [2]]], [[[2, 5, 10], []]], [[[], []]], [[[2], [2]]], [[[3], []]], [[[2], [2]]]], "starter_code": "def factors(n):", "canonical_solution": "def factors(n):\n    sq = [a for a in range(2, n + 1) if not n % a ** 2]\n    cb = [b for b in range(2, n + 1) if not n % b ** 3]\n    return [sq, cb]", "entry_point": "factors", "task_id": "TACO_lite/1491", "input_output_examples": [[[1, 2, 3, 4, 4, 5, 5, 5], [2, 2, 4, 4, 6, 6, 9, 9, 9, 9], [3, 3, 3, 3, 2], [5, 5, 5, 5, 5], [77, 3, 40, 40, 40], [16, 7, 5, 3, 6, 23]], [[null, [1, 2, 3], [4], [5], null, null, null, null, null], [null, null, [2, 4, 6], null, [9], null, null, null, null, null, null], [null, [2], null, null, [3], null], [null, null, null, null, null, [5]], [null, [3, 77], null, [40], null, null], [null, [3, 5, 6, 7, 16, 23], null, null, null, null, null]]]}
{"requirement": "def vowel_recognition(input):\"\"\"`{a, e, i, o, u, A, E, I, O, U}`\n\nNatural Language Understanding is the subdomain of Natural Language Processing where people used to design AI based applications have ability to understand the human languages. HashInclude Speech Processing team has a project named Virtual Assistant. For this project they appointed you as a data engineer (who has good knowledge of creating clean datasets by writing efficient code). As a data engineer your first task is to make vowel recognition dataset. In this task you have to find the presence of vowels in all possible substrings of the given string. For each given string you have to return the total number of vowels.\n\n**Note**: your solution should have linear time complexity.\n\"\"\"", "inputs": [["bbbb"], ["baceb"], ["aeiou"], ["aeiouAEIOU"]], "outputs": [[0], [16], [35], [220]], "starter_code": "def vowel_recognition(input):", "canonical_solution": "def vowel_recognition(input):\n    vowels = set('aeiouAEIOU')\n    s = t = 0\n    for c, e in enumerate(input, 1):\n        if e in vowels:\n            t += c\n        s += t\n    return s", "entry_point": "vowel_recognition", "task_id": "TACO_lite/1493", "input_output_examples": [[[3], [-3], [2]], [["11"], ["11111111111111111111111111111101"], ["10"]]]}
{"requirement": "def is_magical(sq):\"\"\"In recreational mathematics, a magic square is an arrangement of distinct numbers (i.e., each number is used once), usually integers, in a square grid, where the numbers in each row, and in each column, and the numbers in the main and secondary diagonals, all add up to the same number, called the \"magic constant.\"\n\nA 3x3 magic square will have its sums always resulting to 15, this number is called the \"magic constant\" and changes according to the square size.\n\nIn this problem you will have to create a function that receives a 3x3 'square' and returns True if it is magic and False otherwise.\nThe sum of rows, columns or diagonals should **always** equal **15**.\n\n### Note:\nThis kata is very easy. If you want to try some more \"difficult\" ones you may try these :\n* [Magic Square - Verify 3x3](https://www.codewars.com/kata/magic-square-verify-3x3)\n* [Double Even Magic Square](https://www.codewars.com/kata/double-even-magic-square)\n* [Odd Magic Square](https://www.codewars.com/kata/odd-magic-square)\n\"\"\"", "inputs": [[[4, 9, 2, 3, 5, 7, 8, 1, 6]], [[4, 9, 2, 3, 5, 7, 8, 6, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[9, 4, 7, 3, 5, 2, 8, 6, 1]], [[8, 1, 6, 3, 5, 7, 4, 9, 2]]], "outputs": [[true], [false], [false], [false], [true]], "starter_code": "def is_magical(sq):", "canonical_solution": "def is_magical(sq):\n    return sum(sq[2:7:2]) == sum(sq[::4]) == sum(sq[::3]) == sum(sq[1::3]) == sum(sq[2::3]) == sum(sq[:3]) == sum(sq[3:6]) == sum(sq[6:])", "entry_point": "is_magical", "task_id": "TACO_lite/1494", "input_output_examples": [[[1], [2], [3], [4], [5], [10], [50], [80], [100]], [[1], [2], [3], [5], [7], [42], [204226], [15796476], [190569292]]]}
{"requirement": "def strongest_even(n, m):\"\"\"\nA strongness of an even number is the number of times we can successively divide by 2 until we reach an odd number starting with an even number n.\n\n# Task\n\nGiven a closed interval `[n, m]`, return the even number that is the strongest in the interval. If multiple solutions exist return the smallest strongest even number.\n\nNote that programs must run within the allotted server time; a naive solution will probably time out.\n\n\n# Constraints\n```if-not:ruby\n1 <= n < m <= INT_MAX\n```\n```if:ruby\n1 <= n < m <= 2^64\n```\n\"\"\"", "inputs": [[1, 2], [5, 10], [48, 56], [129, 193], [2, 3], [4, 6], [3, 310], [33, 40], [456445, 678860], [324243, 897653214], [1151592177, 2129680158], [2085422641, 2128923730], [1082012216, 1876572332], [1806570867, 2067832928], [206346325, 1289058842]], "outputs": [[2], [8], [48], [192], [2], [4], [256], [40], [524288], [536870912], [1610612736], [2113929216], [1610612736], [1879048192], [1073741824]], "starter_code": "def strongest_even(n, m):", "canonical_solution": "from math import log2\n\ndef strongest_even(n, m):\n    if int(log2(m)) > int(log2(n)):\n        return 2 ** int(log2(m))\n    n += n % 2\n    m -= m % 2\n    if n == m:\n        return n\n    return 2 * strongest_even(n // 2, m // 2)", "entry_point": "strongest_even", "task_id": "TACO_lite/1501", "input_output_examples": [[["Niks"], [null], [""]], [["hello Niks!"], [null], [null]]]}
{"requirement": "def lcs(x, y):\"\"\"\nWrite a function called `LCS` that accepts two sequences and returns the longest subsequence common to the passed in sequences.\n\n### Subsequence\nA subsequence is different from a substring. The terms of a subsequence need not be consecutive terms of the original sequence.\n\n### Notes\n* Both arguments will be strings\n* Return value must be a string\n* Return an empty string if there exists no common subsequence\n* Both arguments will have one or more characters (in JavaScript)\n* All tests will only have a single longest common subsequence. Don't worry about cases such as `LCS( \"1234\", \"3412\" )`, which would have two possible longest common subsequences: `\"12\"` and `\"34\"`.\n\nNote that the Haskell variant will use randomized testing, but any longest common subsequence will be valid.\n\nNote that the OCaml variant is using generic lists instead of strings, and will also have randomized tests (any longest common subsequence will be valid).\n\n### Tips\n\nWikipedia has an explanation of the two properties that can be used to solve the problem:\n\n- [First property](http://en.wikipedia.org/wiki/Longest_common_subsequence_problem#First_property)\n- [Second property](http://en.wikipedia.org/wiki/Longest_common_subsequence_problem#Second_property)\n\"\"\"", "inputs": [["a", "b"], ["a", "a"], ["abc", "ac"], ["abcdef", "abc"], ["abcdef", "acf"], ["anothertest", "notatest"], ["132535365", "123456789"], ["finaltest", "zzzfinallyzzz"]], "outputs": [[""], ["a"], ["ac"], ["abc"], ["acf"], ["nottest"], ["12356"], ["final"]], "starter_code": "def lcs(x, y):", "canonical_solution": "def lcs(x, y):\n    if len(x) == 0 or len(y) == 0:\n        return ''\n    if x[-1] == y[-1]:\n        return lcs(x[:-1], y[:-1]) + x[-1]\n    else:\n        lcs1 = lcs(x, y[:-1])\n        lcs2 = lcs(x[:-1], y)\n        if len(lcs1) > len(lcs2):\n            return lcs1\n        else:\n            return lcs2", "entry_point": "lcs", "task_id": "TACO_lite/1509", "input_output_examples": [[[[1, -2, 3, 4, -5, -4, 3, 2, 1], [[1, 3], [0, 4], [6, 8]]]], [[6]]]}
{"requirement": "def palindrome(num):\"\"\"\nA palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward. \n\nFor a given number ```num```, write a function which returns the number of numerical palindromes within each number. For this kata, single digit numbers will NOT be considered numerical palindromes. \n\nReturn \"Not valid\" if the input is not an integer or is less than 0.\n\n```Haskell\nIn Haskell, return a Maybe Int with Nothing for negative numbers.\n```\n\nOther Kata in this Series:\nNumerical Palindrome #1\nNumerical Palindrome #1.5\nNumerical Palindrome #2\nNumerical Palindrome #3\nNumerical Palindrome #3.5\nNumerical Palindrome #4\nNumerical Palindrome #5\n\"\"\"", "inputs": [[2], [141221001], [1551], [13598], ["ACCDDCCA"], ["1551"], [-4505]], "outputs": [[0], [5], [2], [0], ["Not valid"], ["Not valid"], ["Not valid"]], "starter_code": "def palindrome(num):", "canonical_solution": "def palindrome(num):\n    if not isinstance(num, int) or num < 0:\n        return 'Not valid'\n    s = str(num)\n    return sum((sum((s[i:i + n] == s[i:i + n][::-1] for i in range(len(s) - n + 1))) for n in range(2, len(s) + 1)))", "entry_point": "palindrome", "task_id": "TACO_lite/1512", "input_output_examples": [[["({})"], ["[[]()]"], ["[{()}]"], ["{(})"], ["(["], ["]"]], [[true], [true], [true], [false], [false], [false]]]}
{"requirement": "def battle(player1, player2):\"\"\"Magic The Gathering is a collectible card game that features wizards battling against each other with spells and creature summons. The game itself can be quite complicated to learn. In this series of katas, we'll be solving some of the situations that arise during gameplay. You won't need any prior knowledge of the game to solve these contrived problems, as I will provide you with enough information.\n\n## Creatures\n\nEach creature has a power and toughness. We will represent this in an array. [2, 3] means this creature has a power of 2 and a toughness of 3.\n\nWhen two creatures square off, they each deal damage equal to their power to each other at the same time. If a creature takes on damage greater than or equal to their toughness, they die.\n\nWrite a function `battle(player1, player2)` that takes in 2 arrays of creatures. Each players' creatures battle each other in order (player1[0] battles the creature in player2[0]) and so on. If one list of creatures is longer than the other, those creatures are considered unblocked, and do not battle.\n\nYour function should return an object (a hash in Ruby) with the keys player1 and player2 that contain the power and toughness of the surviving creatures.\n\nGood luck with your battles!\n\n\nCheck out my other Magic The Gathering katas:\n\n\nMagic The Gathering #1: Creatures\nMagic The Gathering #2: Mana\n\"\"\"", "inputs": [[[[2, 3], [1, 4]], [[3, 3], [4, 1]]], [[], []], [[[1, 1]], [[1, 1]]], [[[2, 1]], [[2, 1]]], [[[1, 2]], [[1, 2]]], [[[2, 3]], [[3, 2]]], [[[2, 7]], [[3, 5]]], [[[2, 5]], [[6, 6]]], [[[6, 6]], [[2, 5]]], [[], [[1, 1], [2, 2]]], [[[1, 1], [2, 2]], []], [[[1, 3], [3, 5], [4, 6], [5, 2]], [[2, 4], [6, 1], [4, 4], [3, 7], [3, 1]]]], "outputs": [[{"player1": [], "player2": [[3, 3]]}], [{"player1": [], "player2": []}], [{"player1": [], "player2": []}], [{"player1": [], "player2": []}], [{"player1": [[1, 2]], "player2": [[1, 2]]}], [{"player1": [], "player2": []}], [{"player1": [[2, 7]], "player2": [[3, 5]]}], [{"player1": [], "player2": [[6, 6]]}], [{"player1": [[6, 6]], "player2": []}], [{"player1": [], "player2": [[1, 1], [2, 2]]}], [{"player1": [[1, 1], [2, 2]], "player2": []}], [{"player1": [[1, 3], [4, 6]], "player2": [[2, 4], [3, 7], [3, 1]]}]], "starter_code": "def battle(player1, player2):", "canonical_solution": "from itertools import zip_longest\n\ndef battle(player1, player2):\n    result = {'player1': [], 'player2': []}\n    for (p1, t1), (p2, t2) in zip_longest(player1, player2, fillvalue=[0, 0]):\n        if t1 > p2:\n            result['player1'].append([p1, t1])\n        if t2 > p1:\n            result['player2'].append([p2, t2])\n    return result", "entry_point": "battle", "task_id": "TACO_lite/1517", "input_output_examples": [[["TestController"], ["MoviesAndBooks"], ["App7Test"], [1]], [["test_controller"], ["movies_and_books"], ["app7_test"], ["1"]]]}
{"requirement": "def solve(n):\"\"\"Many years ago, Roman numbers were defined by only `4` digits: `I, V, X, L`, which represented `1, 5, 10, 50`. These were the only digits used. The value of a sequence was simply the sum of digits in it. \n\nIt is easy to see that this system is ambiguous, and some numbers could be written in many different ways. Your goal is to determine how many distinct integers could be represented by exactly `n` Roman digits grouped together.\n\n`n <= 10E7`\n\nMore examples in test cases. Good luck!\n\"\"\"", "inputs": [[1], [2], [3], [4], [5], [6], [10], [10000000]], "outputs": [[4], [10], [20], [35], [56], [83], [244], [489999753]], "starter_code": "def solve(n):", "canonical_solution": "INITIAL = [0, 4, 10, 20, 35, 56, 83, 116, 155, 198, 244, 292]\n\ndef solve(n):\n    return INITIAL[n] if n < 12 else 292 + 49 * (n - 11)", "entry_point": "solve", "task_id": "TACO_lite/1519", "input_output_examples": [[["ooudddbd"], ["oudddbo"]], [[2], [1]]]}
{"requirement": "def parameter(n):\"\"\"\n# Task\nLet's define a `parameter` of number `n` as the least common multiple (LCM) of the sum of its digits and their product.\n\nCalculate the parameter of the given number `n`.\n\n# Input/Output\n\n`[input]` integer `n`\n\n A positive integer. It is guaranteed that no zero appears in `n`.\n\n`[output]` an integer\n\n The parameter of the given number.\n\"\"\"", "inputs": [[1234], [1], [2], [22], [11], [239], [999999999], [91], [344], [123456789]], "outputs": [[120], [1], [2], [4], [2], [378], [387420489], [90], [528], [362880]], "starter_code": "def parameter(n):", "canonical_solution": "from math import gcd\n\ndef parameter(n):\n    s, p = (0, 1)\n    for m in str(n):\n        s += int(m)\n        p *= int(m)\n    return s * p / gcd(s, p)", "entry_point": "parameter", "task_id": "TACO_lite/1521", "input_output_examples": [[[4, 3], [10, 2], [25]], [["1     1     1     1", " 2   2 2   2 2   2 ", "  3 3   3 3   3 3  ", "   4     4     4   ", "  3 3   3 3   3 3  ", " 2   2 2   2 2   2 ", "1     1     1     1"], ["1                 1                 1", " 2               2 2               2 ", "  3             3   3             3  ", "   4           4     4           4   ", "    5         5       5         5    ", "     6       6         6       6     ", "      7     7           7     7      ", "       8   8             8   8       ", "        9 9               9 9        ", "         0                 0         ", "        9 9               9 9        ", "       8   8             8   8       ", "      7     7           7     7      ", "     6       6         6       6     ", "    5         5       5         5    ", "   4           4     4           4   ", "  3             3   3             3  ", " 2               2 2               2 ", "1                 1                 1"], ["1                                               1", " 2                                             2 ", "  3                                           3  ", "   4                                         4   ", "    5                                       5    ", "     6                                     6     ", "      7                                   7      ", "       8                                 8       ", "        9                               9        ", "         0                             0         ", "          1                           1          ", "           2                         2           ", "            3                       3            ", "             4                     4             ", "              5                   5              ", "               6                 6               ", "                7               7                ", "                 8             8                 ", "                  9           9                  ", "                   0         0                   ", "                    1       1                    ", "                     2     2                     ", "                      3   3                      ", "                       4 4                       ", "                        5                        ", "                       4 4                       ", "                      3   3                      ", "                     2     2                     ", "                    1       1                    ", "                   0         0                   ", "                  9           9                  ", "                 8             8                 ", "                7               7                ", "               6                 6               ", "              5                   5              ", "             4                     4             ", "            3                       3            ", "           2                         2           ", "          1                           1          ", "         0                             0         ", "        9                               9        ", "       8                                 8       ", "      7                                   7      ", "     6                                     6     ", "    5                                       5    ", "   4                                         4   ", "  3                                           3  ", " 2                                             2 ", "1                                               1"]]]}
{"requirement": "def decrypt(s):\"\"\"# Task\n Smartphones software security has become a growing concern related to mobile telephony. It is particularly important as it relates to the security of available personal information.\n \n For this reason, Ahmed decided to encrypt phone numbers of contacts in such a way that nobody can decrypt them. At first he tried encryption algorithms very complex, but the decryption process is tedious, especially when he needed to dial a speed dial.\n\n He eventually found the algorithm following: instead of writing the number itself, Ahmed multiplied by 10, then adds the result to the original number.\n \n Ahmed truncates the result (from the left), so it has as many digits as the original phone number. Ahmed needs a program to recover the original phone number from number stored on his phone. The program return \"impossible\" if the initial number can not be calculated.\n \n Note: There is no left leading zero in either the input or the output; Input `s` is given by string format, because it may be very huge ;-)\n\n# Input/Output\n\n\n - `[input]` string `s`\n\n  string presentation of n with `1 <= n <= 10^100`\n\n\n - `[output]` a string\n\n  The original phone number before encryption, or `\"impossible\"` if the initial number can not be calculated.\n\"\"\"", "inputs": [["353"], ["444"], ["123456"], ["147"], ["4334"]], "outputs": [["123"], ["404"], ["738496"], ["377"], ["impossible"]], "starter_code": "def decrypt(s):", "canonical_solution": "def decrypt(s):\n    return next((str(b // 11) for b in (int(str(a) + s) for a in range(1, 11)) if b % 11 == 0), 'impossible')", "entry_point": "decrypt", "task_id": "TACO_lite/1523", "input_output_examples": [[["a"], ["aaaa"], ["abcd"], ["babababababababa"], ["bbabbaaabbaaaabb"]], [[false], [true], [false], [true], [true]]]}
{"requirement": "def abacaba(k):\"\"\"# Task\n Consider the following algorithm for constructing 26 strings S(1) .. S(26):\n```\nS(1) = \"a\";\nFor i in [2, 3, ..., 26]:\nS(i) = S(i - 1) + character(i) + S(i - 1).\n```\n\nFinally, we got a long string S(26). Your task is to find the `k`th symbol (indexing from 1) in the string S(26). All strings consist of lowercase letters only.\n\n# Input / Output\n\n\n - `[input]` integer `k`\n\n  1 ≤ k < 2^(26)\n\n\n - `[output]` a string(char in C#)\n\n  the `k`th symbol of S(26)\n\"\"\"", "inputs": [[1], [2], [3], [4], [5], [6], [7], [8], [12], [16]], "outputs": [["a"], ["b"], ["a"], ["c"], ["a"], ["b"], ["a"], ["d"], ["c"], ["e"]], "starter_code": "def abacaba(k):", "canonical_solution": "def abacaba(k):\n    return next((chr(97 + i) for i, d in enumerate(f'{k:b}'[::-1]) if d == '1'))", "entry_point": "abacaba", "task_id": "TACO_lite/1524", "input_output_examples": [[[4050, 27], [4066, 27]], [[true], [false]]]}
{"requirement": "def smallest_integer(matrix):\"\"\"# Task\n You're given a two-dimensional array of integers `matrix`. Your task is to determine the smallest non-negative integer that is not present in this array.\n\n# Input/Output\n\n\n - `[input]` 2D integer array `matrix`\n\n  A non-empty rectangular matrix. \n\n `1 ≤ matrix.length ≤ 10`\n\n `1 ≤ matrix[0].length ≤ 10`\n\n\n - `[output]` an integer\n\n  The smallest non-negative integer that is not present in matrix.\n\"\"\"", "inputs": [[[[0, 2], [5, 1]]], [[[4, 5, 3, 21, 3, 8], [2, 2, 6, 5, 10, 9], [7, 5, 6, 8, 2, 6], [1, 4, 7, 8, 9, 0], [1, 3, 6, 5, 5, 1], [2, 7, 3, 4, 4, 3]]], [[[4, 5, 3, -4, 3, 8], [2, 0, 6, 5, 4, 9], [7, 5, 6, 8, 2, 6], [1, 4, 7, 8, 9, 11], [1, 3, 10, 5, 5, 1], [12, 7, 3, 4, 4, 3]]], [[[1, 2], [3, 4]]], [[[0, 1], [2, 3]]], [[[4, 5, 13, 0, 3], [2, 6, 5, 10, 9], [7, 5, -6, 8, 6], [1, 4, 7, 8, 9], [2, 3, 4, 44, 3]]], [[[-1, 100, -1, 100], [100, -1, 100, -1], [-1, 100, -1, 100], [100, -1, 100, -1]]], [[[-1, -1], [-1, -1]]]], "outputs": [[3], [11], [13], [0], [4], [11], [0], [0]], "starter_code": "def smallest_integer(matrix):", "canonical_solution": "def smallest_integer(matrix):\n    nums = set(sum(matrix, []))\n    n = 0\n    while n in nums:\n        n += 1\n    return n", "entry_point": "smallest_integer", "task_id": "TACO_lite/1534", "input_output_examples": [[["brown black black"], ["brown black brown gold"], ["red red brown"], ["orange orange brown gold"], ["yellow violet brown silver"], ["blue gray brown"], ["brown black red silver"], ["brown black orange"], ["red red orange silver"], ["yellow violet orange gold"], ["brown black yellow gold"], ["orange orange yellow gold"], ["red black green gold"]], [["10 ohms, 20%"], ["100 ohms, 5%"], ["220 ohms, 20%"], ["330 ohms, 5%"], ["470 ohms, 10%"], ["680 ohms, 20%"], ["1k ohms, 10%"], ["10k ohms, 20%"], ["22k ohms, 10%"], ["47k ohms, 5%"], ["100k ohms, 5%"], ["330k ohms, 5%"], ["2M ohms, 5%"]]]}
{"requirement": "def cut_the_ropes(arr):\"\"\"# Task\n  You are given `N` ropes, where the length of each rope is a positive integer. At each step, you have to reduce all the ropes by the length of the smallest rope.\n\n The step will be repeated until no ropes are left. Given the length of N ropes, print the number of ropes that are left before each step.\n\n# Input/Output\n  \n - `[input]` integer array `a`\n\n  length of each rope.\n  \n  `3 <= a.length <= 2000`\n  \n  `1 <= a[i] <= 100`\n\n\n - `[output]` an integer array\n\n  number of ropes before each step.\n\"\"\"", "inputs": [[[3, 3, 2, 9, 7]], [[1, 2, 3, 4, 3, 3, 2, 1]], [[13035, 6618, 13056, 20912, 1119, 13035, 6618, 6618, 8482, 13056]], [[9, 9, 9, 9, 7]]], "outputs": [[[5, 4, 2, 1]], [[8, 6, 4, 1]], [[10, 9, 6, 5, 3, 1]], [[5, 4]]], "starter_code": "def cut_the_ropes(arr):", "canonical_solution": "def cut_the_ropes(arr):\n    results = [len(arr)]\n    while arr:\n        m = min(arr)\n        arr = [elem - m for elem in arr if elem != m]\n        results.append(len(arr))\n    return results[:-1]", "entry_point": "cut_the_ropes", "task_id": "TACO_lite/1536", "input_output_examples": [[[123], [1234]], [[321], [4321]]]}
{"requirement": "def hammingweight(n: int) -> int:\"\"\"\nWrite a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).\n\nNote:\n\nNote that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\nIn Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer -3.\n\nConstraints:\n\nThe input must be a binary string of length 32.\n \nFollow up: If this function is called many times, how would you optimize it?\n\"\"\"", "inputs": [[11], [128], [4294967293]], "outputs": [[3], [1], [31]], "starter_code": "def hammingweight(n: int) -> int:", "canonical_solution": "def hammingweight(n: int) -> int:\n    count = 0\n    while n != 0:\n        n &= n - 1\n        count += 1\n    return count", "entry_point": "hammingweight", "task_id": "TACO_lite/1538", "input_output_examples": [[[[1, 2, 3, 4, 5]], [[5, 3, 2, 1, 4]], [[2, 2, 1, 2, 1]]], [[[2, 3, 4, 5]], [[5, 3, 2, 4]], [[2, 2, 2, 1]]]]}
{"requirement": "def sort_reindeer(reindeer_names):\"\"\"### Happy Holidays fellow Code Warriors!\n\nNow, Dasher! Now, Dancer! Now, Prancer, and Vixen! On, Comet! On, Cupid! On, Donder and Blitzen! That's the order Santa wanted his reindeer...right? What do you mean he wants them in order by their last names!? Looks like we need your help Code Warrior!\n\n### Sort Santa's Reindeer\n\nWrite a function that accepts a sequence of Reindeer names, and returns a sequence with the Reindeer names sorted by their last names.\n\n### Notes:\n\n* It's guaranteed that each string is composed of two words\n* In case of two identical last names, keep the original order\n\"\"\"", "inputs": [[["Kenjiro Mori", "Susumu Tokugawa", "Juzo Okita", "Akira Sanada"]], [[]], [["Yasuo Kodai", "Kenjiro Sado", "Daisuke Aihara", "Susumu Shima", "Akira Sanada", "Yoshikazu Okita", "Shiro Yabu", "Sukeharu Nanbu", "Sakezo Yamamoto", "Hikozaemon Ohta", "Juzo Mori", "Saburo Tokugawa"]], [["Daisuke Mori", "Shiro Sanada", "Saburo Shima", "Juzo Yabu", "Sukeharu Yamamoto"]], [["Sukeharu Yamamoto", "Juzo Yabu", "Saburo Shima", "Shiro Sanada", "Daisuke Mori"]], [["Kenjiro Mori", "Susumu Mori", "Akira Mori"]]], "outputs": [[["Kenjiro Mori", "Juzo Okita", "Akira Sanada", "Susumu Tokugawa"]], [[]], [["Daisuke Aihara", "Yasuo Kodai", "Juzo Mori", "Sukeharu Nanbu", "Hikozaemon Ohta", "Yoshikazu Okita", "Kenjiro Sado", "Akira Sanada", "Susumu Shima", "Saburo Tokugawa", "Shiro Yabu", "Sakezo Yamamoto"]], [["Daisuke Mori", "Shiro Sanada", "Saburo Shima", "Juzo Yabu", "Sukeharu Yamamoto"]], [["Daisuke Mori", "Shiro Sanada", "Saburo Shima", "Juzo Yabu", "Sukeharu Yamamoto"]], [["Kenjiro Mori", "Susumu Mori", "Akira Mori"]]], "starter_code": "def sort_reindeer(reindeer_names):", "canonical_solution": "def sort_reindeer(reindeer_names):\n    return sorted(reindeer_names, key=lambda s: s.split()[1])", "entry_point": "sort_reindeer", "task_id": "TACO_lite/1541", "input_output_examples": [[[["yoda", "best", "has"]]], [["yes"]]]}
{"requirement": "def is_balanced(s, caps):\"\"\"\n### Background\n\nWe **all** know about \"balancing parentheses\" (plus brackets, braces and chevrons) and even balancing characters that are identical.  \n\nRead that last sentence again, I balanced different characters and identical characters twice and you didn't even notice... :)\n\n### Kata\nYour challenge in this kata is to write a piece of code to validate that a supplied string is balanced.\n\nYou must determine if all that is open is then closed, and nothing is closed which is not already open!\n\nYou will be given a string to validate, and a second string, where each pair of characters defines an opening and closing sequence that needs balancing.\n\nYou may assume that the second string always has an even number of characters.\n\"\"\"", "inputs": [["(Sensei says yes!)", "()"], ["(Sensei says no!", "()"], ["(Sensei [says] yes!)", "()[]"], ["(Sensei [says) no!]", "()[]"], ["Sensei says -yes-!", "--"], ["Sensei -says no!", "--"], ["Hello Mother can you hear me?", "()"], ["(Hello Mother can you hear me?)", "()"], ["(Hello Mother can you hear me?", ""], ["(Hello Mother can you hear me?", "()"], ["(Hello Mother can you hear me?))", "()"], [")Hello Mother can you hear me?", "()"], ["(Hello Mother can you hear me?)[Monkeys, in my pockets!!]", "()[]"], ["(Hello Mother can you hear me?)[Monkeys, in my pockets!!](Gosh!!)", "()[]"], ["Hello Mother can you hear me?)[Monkeys, in my pockets!!]", "()[]"], ["(Hello Mother can you hear me?[Monkeys, in my pockets!!]", "()[]"], ["(Hello Mother can you hear me?)Monkeys, in my pockets!!]", "()[]"], ["(Hello Mother can you hear me?)[Monkeys, in my pockets!!", "()[]"], ["((Hello))", "()"], ["(((Hello)))", "()"], ["((()Hello()))", "()"], ["((()Hello())", "()"], ["(()Hello()))", "()"], ["([{-Hello!-}])", "()[]{}"], ["([{([{Hello}])}])", "()[]{}"], ["([{-Hello!-})]", "()[]{}"], ["-Hello Mother can you hear me?-", "--"], ["-Hello Mother can you hear me?", "--"], ["Hello Mother can you hear me?-", "--"], ["-abcd-e@fghi@", "--@@"], ["abcd-e@fghi@", "--@@"], ["-abcde@fghi@", "--@@"], ["-abcd-efghi@", "--@@"], ["-abcd-e@fghi", "--@@"], ["-a@b@cd@e@fghi-", "--@@"], ["-ab@cd@e@fghi-", "--@@"], ["-a@bcd@e@fghi-", "--@@"], ["-a@b@cde@fghi-", "--@@"], ["-a@b@cd@efghi-", "--@@"], ["a@b@cd@e@fghi-", "--@@"], ["-a@b@cd@e@fghi", "--@@"]], "outputs": [[true], [false], [true], [false], [true], [false], [true], [true], [true], [false], [false], [false], [true], [true], [false], [false], [false], [false], [true], [true], [true], [false], [false], [true], [true], [false], [true], [false], [false], [true], [false], [false], [false], [false], [true], [false], [false], [false], [false], [false], [false]], "starter_code": "def is_balanced(s, caps):", "canonical_solution": "def is_balanced(s, caps):\n    stack = []\n    openers, closers = (caps[::2], caps[1::2])\n    for char in s:\n        if char in openers:\n            if char in closers and stack and (stack[-1] == char):\n                stack.pop()\n            else:\n                stack.append(char)\n        elif char in closers:\n            if not stack or openers[closers.index(char)] != stack[-1]:\n                return False\n            else:\n                stack.pop()\n    return not stack", "entry_point": "is_balanced", "task_id": "TACO_lite/1542", "input_output_examples": [[["John Doe, 8167238327, Jane Doe, 8163723827"], [null], [""]], [[{"player": "John Doe", "contact": 8167238327}, {"player": "Jane Doe", "contact": 8163723827}], [], []]]}
{"requirement": "def my_languages(results):\"\"\"\n## Your task\n\nYou are given a dictionary/hash/object containing some languages and your test results in the given languages. Return the list of languages where your test score is at least `60`, in descending order of the results.\n\nNote: the scores will always be unique (so no duplicate values)\n\n---\n\n## My other katas\n\nIf you enjoyed this kata then please try [my other katas](https://www.codewars.com/collections/katas-created-by-anter69)! :-)\n\n### _Translations are welcome!_\n\"\"\"", "inputs": [[{"Java": 10, "Ruby": 80, "Python": 65}], [{"Hindi": 60, "Greek": 71, "Dutch": 93}], [{"C++": 50, "ASM": 10, "Haskell": 20}]], "outputs": [[["Ruby", "Python"]], [["Dutch", "Greek", "Hindi"]], [[]]], "starter_code": "def my_languages(results):", "canonical_solution": "def my_languages(results):\n    return sorted((l for l, r in results.items() if r >= 60), reverse=True, key=results.get)", "entry_point": "my_languages", "task_id": "TACO_lite/1544", "input_output_examples": [[[3], [10]], [["1\n1*2\n1**3"], ["1\n1*2\n1**3\n1***4\n1****5\n1*****6\n1******7\n1*******8\n1********9\n1*********10"]]]}
{"requirement": "def bob(what):\"\"\"*`This kata is a tribute/fanwork to the TV-show: Supernatural`*\n\n\nBalls!\n\nThose wayward Winchester boys are in trouble again, hunting something down in New Orleans.\nYou are Bobby Singer, you know how \"idjits\" they can be, so you have to prepare.\nThey will call you any minute with the race of the thing, and you want to answer as soon as possible. By answer, I mean: tell them how to kill, or fight it.\n\nYou have something like a database (more like drunken doodling) to help them:\n\n- werewolf           : Silver knife or bullet to the heart\n- vampire            : Behead it with a machete\n- wendigo            : Burn it to death\n- shapeshifter       : Silver knife or bullet to the heart\n- angel              : Use the angelic blade\n- demon              : Use Ruby's knife, or some Jesus-juice\n- ghost              : Salt and iron, and don't forget to burn the corpse\n- dragon             : You have to find the excalibur for that\n- djinn              : Stab it with silver knife dipped in a lamb's blood \n- pagan god          : It depends on which one it is\n- leviathan          : Use some Borax, then kill Dick\n- ghoul              : Behead it\n- jefferson starship : Behead it with a silver blade\n- reaper             : If it's nasty, you should gank who controls it\n- rugaru             : Burn it alive\n- skinwalker         : A silver bullet will do it\n- phoenix            : Use the colt\n- witch              : They are humans\n- else               : I have friggin no idea yet\n\nYou can access the database as `drunkenDoodling`/`drunken_doodling`/`DrunkenDoodling` depending on your language.\n\"\"\"", "inputs": [["vampire"], ["pagan god"], ["werepuppy"]], "outputs": [["Behead it with a machete, idjits!"], ["It depends on which one it is, idjits!"], ["I have friggin no idea yet, idjits!"]], "starter_code": "def bob(what):", "canonical_solution": "database = \"werewolf : Silver knife or bullet to the heart\\nvampire : Behead it with a machete\\nwendigo : Burn it to death\\nshapeshifter : Silver knife or bullet to the heart\\nangel : Use the angelic blade\\ndemon : Use Ruby's knife, or some Jesus-juice\\nghost : Salt and iron, and don't forget to burn the corpse\\ndragon : You have to find the excalibur for that\\ndjinn : Stab it with silver knife dipped in a lamb's blood\\npagan god : It depends on which one it is\\nleviathan : Use some Borax, then kill Dick\\nghoul : Behead it\\njefferson starship : Behead it with a silver blade\\nreaper : If it's nasty, you should gank who controls it\\nrugaru : Burn it alive\\nskinwalker : A silver bullet will do it\\nphoenix : Use the colt\\nwitch : They are humans\\nelse : I have friggin no idea yet\"\nanswers = {line.split(' : ')[0]: line.split(' : ')[1] for line in database.splitlines()}\n\ndef bob(what):\n    return answers.get(what, answers['else']) + ', idjits!'", "entry_point": "bob", "task_id": "TACO_lite/1547", "input_output_examples": [[[[1, 2, 3]], [[-1, 2, -3]], [[-1, -2, -3]], [[-1, -2, -3, -4]]], [[1], [2], [-1], [-4]]]}
{"requirement": "def list_depth(l):\"\"\"\nA nested list (or *array* in JavaScript) is a list that appears as a value inside another list, \n\nin the above list, [item, item] is a nested list.  \n  \nYour goal is to write a function that determines the depth of the deepest nested list within a given list.  \nreturn 1 if there are no nested lists.\nThe list passed to your function can contain any data types.\n\"\"\"", "inputs": [[[1, [2, [3, [4, [5, [6], 5], 4], 3], 2], 1]], [[true]], [[]], [[2, "yes", [true, false]]], [[2.0, [2, 0], 3.7, [3, 7], 6.7, [6, 7]]], [[[[[]]], [[[]]]]], [[true, false, true, [false], true]], [[[], [], [[], []]]], [[77]], [[2, "yes", [true, [false]]]], [[77, [77]]], [[[77], 77, [[77]]]]], "outputs": [[6], [1], [1], [2], [2], [4], [2], [3], [1], [3], [2], [3]], "starter_code": "def list_depth(l):", "canonical_solution": "def list_depth(l):\n    depths = [1]\n    for x in l:\n        if isinstance(x, list):\n            depths.append(list_depth(x) + 1)\n    return max(depths)", "entry_point": "list_depth", "task_id": "TACO_lite/1548", "input_output_examples": [[[[1, 2, 3, 4, 5], 1], [[1, 2, 3, 4, 5], 2], [[1, 2, 3, 4, 5], 3], [[1, 2, 3, 4, 5], 4], [[1, 2, 3, 4, 5], 5], [[1, 2, 3, 4, 5], 0], [[1, 2, 3, 4, 5], -1], [[1, 2, 3, 4, 5], -2], [[1, 2, 3, 4, 5], -3], [[1, 2, 3, 4, 5], -4], [[1, 2, 3, 4, 5], -5], [["a", "b", "c"], 1], [[1.0, 2.0, 3.0], 1], [[true, true, false], 1], [[1, 2, 3, 4, 5], 7], [[1, 2, 3, 4, 5], 11], [[1, 2, 3, 4, 5], 12478]], [[5, 1, 2, 3, 4], [4, 5, 1, 2, 3], [3, 4, 5, 1, 2], [2, 3, 4, 5, 1], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [2, 3, 4, 5, 1], [3, 4, 5, 1, 2], [4, 5, 1, 2, 3], [5, 1, 2, 3, 4], [1, 2, 3, 4, 5], ["c", "a", "b"], [3.0, 1.0, 2.0], [false, true, true], [4, 5, 1, 2, 3], [5, 1, 2, 3, 4], [3, 4, 5, 1, 2]]]}
{"requirement": "def getslope(p1, p2):\"\"\"\n## Task\n\nYour challenge is to write a function named `getslope`/`get_slope`/`GetSlope` that calculates the slope of the line through two points.\n\n## Input\n\n```if:javascript,python\nEach point that the function takes in is an array 2 elements long. The first number is the x coordinate and the second number is the y coordinate.\nIf the line through the two points is vertical or if the same point is given twice, the function should return `null`/`None`.\n```\n\n```if:csharp\n`GetSlope` will take in two Point objects. If the line through the two points is vertical, or the two points are the same, return `null`.\n\nThe Point object:\n\n~~~\npublic class Point : System.Object\n{\n  public double X;\n  public double Y;\n  \n  public Point(double x, double y)\n  {\n    this.X = x;\n    this.Y = y;\n  }\n  \n  public override string ToString()\n  {\n    return $\"({this.X}, {this.Y})\";\n  }\n  \n  public override bool Equals(object point)\n  {\n    // Typechecking\n    if (point == null || point.GetType() != this.GetType())\n    {\n      return false;\n    }\n    \n    return this.ToString() == point.ToString();\n  }\n}\n~~~\n\n```\n\"\"\"", "inputs": [[[1, 1], [2, 2]], [[-5, -5], [9, 9]], [[1, 8], [2, 9]], [[8, 3], [-4, 5]], [[5, 3], [8, 9]], [[1, 3], [0, 3]], [[11, 1], [1, 11]], [[1, 1], [1, 2]], [[-5, 9], [-5, 12]], [[1, 1], [1, 1]], [[-5, 9], [-5, 9]]], "outputs": [[1], [1], [1], [-0.16666666666666666], [2], [0], [-1], [null], [null], [null], [null]], "starter_code": "def getslope(p1, p2):", "canonical_solution": "def getslope(p1, p2):\n    return None if p1[0] == p2[0] else (p2[1] - p1[1]) / (p2[0] - p1[0])", "entry_point": "getslope", "task_id": "TACO_lite/1560", "input_output_examples": [[[60], [780], [2040]], [[[3, 4, 5]], [[5, 12, 13]], [[8, 15, 17]]]]}
{"requirement": "def profitloss(records):\"\"\"\n## Story\n\nJohn runs a shop, bought some goods, and then sells them. He used a special accounting method, like this:\n```\n[[60,20],[60,-20]]\n```\nEach sub array records the commodity price and profit/loss to sell (percentage). Positive mean profit and negative means loss.\n\nIn the text above, John's first commodity sold at a price of $60, he made a profit of 20%; Second commodities are sold at a price of $60 too, but he lost 20%.\n\nPlease calculate, whether his account is profit or loss in the end?\n    \n## Rules\n\nWrite a function ```profitloss```, argument ```records``` is the list of sales.\n\nreturn a number(positive or negative), round to two decimal places.\n\"\"\"", "inputs": [[[[60, 20], [60, -20]]], [[[60, 100], [60, -50]]], [[[60, 0], [60, 0]]]], "outputs": [[-5], [-30], [0]], "starter_code": "def profitloss(records):", "canonical_solution": "def profitloss(records):\n    return round(sum((price - price / (1 + profit / 100) for price, profit in records)), 2)", "entry_point": "profitloss", "task_id": "TACO_lite/1563", "input_output_examples": [[[1, 2], [2, 3], [3, 2], [1, 10]], [[2], [6], [6], [2520]]]}
{"requirement": "def dont_give_me_five(start, end):\"\"\"# Don't give me five!\n\nIn this kata you get the start number and the end number of a region and should return the count of all numbers except numbers with a 5 in it. The start and the end number are both inclusive!\n\nThe result may contain fives. ;-)\nThe start number will always be smaller than the end number. Both numbers can be also negative!\n\nI'm very curious for your solutions and the way you solve it. Maybe someone of you will find an easy pure mathematics solution.\n\nHave fun coding it and please don't forget to vote and rank this kata! :-) \n\nI have also created other katas. Take a look if you enjoyed this kata!\n\"\"\"", "inputs": [[1, 9], [4, 17], [1, 90], [-4, 17], [-4, 37], [-14, -1], [-14, -6]], "outputs": [[8], [12], [72], [20], [38], [13], [9]], "starter_code": "def dont_give_me_five(start, end):", "canonical_solution": "def dont_give_me_five(start, end):\n    return sum(('5' not in str(i) for i in range(start, end + 1)))", "entry_point": "dont_give_me_five", "task_id": "TACO_lite/1564", "input_output_examples": [[["052", "123-451-2345"], ["142", "123-451-2345"]], [["#2#-#5#-2##5"], ["12#-4#1-2#4#"]]]}
{"requirement": "def find(stg):\"\"\"# Description:\n\n Find the longest successive exclamation marks and question marks combination in the string. A successive exclamation marks and question marks combination must contains two part: a substring of \"!\" and a substring \"?\", they are adjacent. \n \n If more than one result are found, return the one which at left side; If no such a combination found, return `\"\"`.\n\n# Note\nPlease don't post issue about difficulty or duplicate. Because:\n>[That's unfair on the kata creator. This is a valid kata and introduces new people to javascript some regex or loops, depending on how they tackle this problem.  --matt c](https://www.codewars.com/kata/remove-exclamation-marks/discuss#57fabb625c9910c73000024e)\n\"\"\"", "inputs": [["!!"], ["!??"], ["!?!!"], ["!!???!????"], ["!!???!?????"], ["!????!!!?"], ["!?!!??!!!?"]], "outputs": [[""], ["!??"], ["?!!"], ["!!???"], ["!?????"], ["????!!!"], ["??!!!"]], "starter_code": "def find(stg):", "canonical_solution": "import re\n\ndef find(stg):\n    matches = re.findall('(!+|\\\\?+)', stg)\n    return max((f'{a}{b}' for a, b in zip(matches, matches[1:])), key=len, default='')", "entry_point": "find", "task_id": "TACO_lite/1576", "input_output_examples": [[["fire", "water", 100, 100]], [[25]]]}
{"requirement": "def hamming_distance(a, b):\"\"\"\nThe hamming distance of two equal-length strings is the number of positions, in which the two string differ. In other words, the number of character substitutions required to transform one string into the other. \n\nFor this first Kata, you will write a function ```hamming_distance(a, b)``` with two equal-length strings containing only 0s and 1s as parameters. There is no need to test the parameters for validity (but you can, if you want). The function's output should be the hamming distance of the two strings as an integer.\n\"\"\"", "inputs": [["100101", "101001"], ["1010", "0101"], ["100101011011010010010", "101100010110010110101"]], "outputs": [[2], [4], [9]], "starter_code": "def hamming_distance(a, b):", "canonical_solution": "def hamming_distance(a, b):\n    return sum((c != d for c, d in zip(a, b)))", "entry_point": "hamming_distance", "task_id": "TACO_lite/1577", "input_output_examples": [[[12, 3, 9, 4, 6, 8]], [[9, 3, 6, 12, 4, 8]]]}
{"requirement": "def differentwaystospell(N):\"\"\"\nGiven a  number N such that it may contain many continuous digits. Find the number of ways to spell the number.\n\nYour Task:\nYou don't need to read input or print anything. Your task is to complete the function differentwaystospell() which takes a String N as input and returns the number of possible ways.\n\nExpected Time Complexity: O(|N|)\nExpected Auxiliary Space: O(1)\n\nConstraints:\n1 <= |N| <= 10^{50}\n\"\"\"", "inputs": [["100"], ["11112"], ["12345"]], "outputs": [[2], [8], [1]], "starter_code": "def differentwaystospell(N):", "canonical_solution": "def differentwaystospell(N):\n    result = 1\n    count = 1\n    for i in range(1, len(N)):\n        if N[i - 1] == N[i]:\n            count += 1\n        else:\n            result *= 2 ** (count - 1)\n            count = 1\n    return result * 2 ** (count - 1)", "entry_point": "differentwaystospell", "task_id": "TACO_lite/1579", "input_output_examples": [[["abca"], ["aabc"], ["a 11 c d"], ["AabBcC"], ["a b  c"], ["a b c d e f g h i h k"], ["2020"], ["a!@€£#$%^&*()_-+=}]{[|\"':;?/>.<,~"]], [[false], [true], [true], [true], [true], [false], [false], [false]]]}
{"requirement": "def solve(arr):\"\"\"\nIn this Kata, we define an arithmetic progression as a series of integers in which the differences between adjacent numbers are the same. You will be given an array of ints of `length > 2` and your task will be to convert it into an arithmetic progression by the following rule:\n```Haskell\nFor each element there are exactly three options: an element can be decreased by 1, an element can be increased by 1 \nor it can be left unchanged.\n```\nReturn the minimum number of changes needed to convert the array to an arithmetic progression. If not possible, return `-1`.\n\"\"\"", "inputs": [[[1, 1, 3, 5, 6, 5]], [[2, 1, 2]], [[1, 2, 3]], [[1, 1, 10]], [[24, 21, 14, 10]], [[3, 2, 1, 1, 1]], [[1, 3, 6, 9, 12]], [[0, 0, 0, 0, 0]], [[5, 4, 3, 2, 1, 1]], [[1, 2, 1]], [[1, 2, 3, 1, 1]], [[1, 3, 6, 8, 10]], [[5, 6, 5, 3, 1, 1]]], "outputs": [[4], [1], [0], [-1], [3], [4], [1], [0], [1], [1], [4], [2], [4]], "starter_code": "def solve(arr):", "canonical_solution": "def solve(arr):\n    res = []\n    for first in (arr[0] - 1, arr[0], arr[0] + 1):\n        for second in (arr[1] - 1, arr[1], arr[1] + 1):\n            val, step, count = (second, second - first, abs(arr[0] - first) + abs(arr[1] - second))\n            for current in arr[2:]:\n                val += step\n                if abs(val - current) > 1:\n                    break\n                count += abs(val - current)\n            else:\n                res.append(count)\n    return min(res, default=-1)", "entry_point": "solve", "task_id": "TACO_lite/1580", "input_output_examples": [[[], [""], ["", ""], ["radix", "tree"], ["ape", "apple"], ["apple", "applet", "apple", "ape"], ["romane", "romanus", "romulus", "rubens", "rubicon", "rubicundus"], ["appleabcd", "apple"]], [[{}], [{}], [{}], [{"radix": {}, "tree": {}}], [{"ap": {"e": {}, "ple": {}}}], [{"ap": {"ple": {"t": {}}, "e": {}}}], [{"r": {"om": {"an": {"e": {}, "us": {}}, "ulus": {}}, "ub": {"ens": {}, "ic": {"on": {}, "undus": {}}}}}], [{"apple": {"abcd": {}}}]]]}
{"requirement": "def peaceful_yard(yard, d):\"\"\"\n## The story you are about to hear is true\nOur cat, Balor, sadly died of cancer in 2015.\n\nWhile he was alive, the three neighborhood cats Lou, Mustache Cat, and Raoul all recognized our house and yard as Balor's territory, and would behave respectfully towards him and each other when they would visit. \n\nBut after Balor died, gradually each of these three neighborhood cats began trying to claim his territory as their own, trying to drive the others away by growling, yowling, snarling, chasing, and even fighting, when one came too close to another, and no human was right there to distract or extract one of them before the situation could escalate. \n\nIt is sad that these otherwise-affectionate animals, who had spent many afternoons peacefully sitting and/or lying near Balor and each other on our deck or around our yard, would turn on each other like that. However, sometimes, if they are far enough away from each other, especially on a warm day when all they really want to do is pick a spot in the sun and lie in it, they will ignore each other, and once again there will be a Peaceable Kingdom.\n\n## Your Mission\nIn this, the first and simplest of a planned trilogy of cat katas :-), all you have to do is determine whether the distances between any visiting cats are large enough to make for a peaceful afternoon, or whether there is about to be an altercation someone will need to deal with by carrying one of them into the house or squirting them with water or what have you.\n\nAs input your function will receive a list of strings representing the yard as a grid, and an integer representing the minimum distance needed to prevent problems (considering the cats' current states of sleepiness). A point with no cat in it will be represented by a \"-\" dash. Lou, Mustache Cat, and Raoul will be represented by an upper case L, M, and R respectively. At any particular time all three cats may be in the yard, or maybe two, one, or even none. \n\nIf the number of cats in the yard is one or none, or if the distances between all cats are at least the minimum distance, your function should return True/true/TRUE (depending on what language you're using), but if there are two or three cats, and the distance between at least two of them is smaller than the minimum distance, your function should return False/false/FALSE.\n\nHave fun!\n\"\"\"", "inputsoutputs": [[true], [false], [true], [false], [true], [false], [false], [true]], "starter_code": "def peaceful_yard(yard, d):", "canonical_solution": "from itertools import combinations\nfrom math import hypot\n\ndef peaceful_yard(yard, d):\n    cats = ((i, j) for i, r in enumerate(yard) for j, c in enumerate(r) if c in 'LMR')\n    return all((hypot(q[0] - p[0], q[1] - p[1]) >= d for p, q in combinations(cats, 2)))", "entry_point": "peaceful_yard", "task_id": "TACO_lite/1584", "input_output_examples": [[[[1, [2, [3, [4]]]]]], [[10]]]}
{"requirement": "def parse_fen(string):\"\"\"\nA chess position can be expressed as a string using the Forsyth–Edwards Notation (FEN). Your task is to write a parser that reads in a FEN-encoded string and returns a depiction of the board using the Unicode chess symbols (📐,♕,♘,etc.). The board should be drawn from the perspective of the active color (i.e., the side making the next move).\n\nUsing the CodeWars dark theme is strongly recommended for this kata. Otherwise, the colors will appear to be inverted.\n\nThe complete FEN format contains 6 fields separated by spaces, but we will only consider the first two fields: Piece placement and active color (side-to-move). The rules for these fields are as follows:\n\nThe first field of the FEN describes piece placement.\nEach row ('rank') of the board is described one-by-one, starting with rank 8 (the far side of the board from White's perspective) and ending with rank 1 (White's home rank). Rows are separated by a forward slash ('/').\nWithin each row, the contents of the squares are listed starting with the \"a-file\" (White's left) and ending with the \"h-file\" (White's right).\nEach piece is identified by a single letter: pawn = P, knight = N, bishop = B, rook = R, queen = Q and king = K. White pieces are upper-case (PNBRQK), while black pieces are lowercase (pnbrqk).\nEmpty squares are represented using the digits 1 through 8 to denote the number of consecutive empty squares.\nThe piece placement field is followed by a single space, then a single character representing the color who has the next move ('w' for White and 'b' for Black).\nFour additional fields follow the active color, separated by spaces. These fields can be ignored.\n\nSymbols\n\n*Again, note that these colors are inverted from the Unicode character names because most people seem to use the dark theme for CodeWars.\n\nEmpty white square: ▇ (2587)\nEmpty black square: ＿ (FF3F)\nWhite king (K): ♚ (265A)\nWhite queen (Q): ♛ (265B)\nWhite rook (R): ♜ (265C)\nWhite bishop (B): ♝ (265D)\nWhite knight (N): ♞ (265E)\nWhite pawn (P): ♟ (265F)\nBlack king (k): ♔ (2654)\nBlack queen (q): ♕ (2655)\nBlack rook (r): ♖ (2656)\nBlack bishop (b): ♗ (2657)\nBlack knight (n): ♘ (2658)\nBlack pawn (p): ♙ (2659)\n\nNB: Empty squares must have the proper colors. The bottom-right and top-left squares on a chess board are white.\n\"\"\"", "inputs": [["8/8/8/8/8/8/8/8 w - -"], ["8/8/8/8/8/8/8/8 b - -"], ["k7/8/8/8/8/8/8/7K w - -"], ["k7/8/8/8/8/8/8/7K b - -"], ["rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"], ["7k/1p4rp/p2B4/3P1r2/1P6/8/P6P/R6K b - - 0 31"], ["r3kr2/1qp2ppp/p3p3/3nP3/1pB5/1P2P3/P4PPP/2RQ1RK1 b q - 2 19"], ["2r2rk1/pp1qbppp/3p1n2/4p1B1/4P3/2NQ1P2/PPP3PP/2KR3R w - - 1 13"], ["Q3N3/N7/8/P2P2P1/2P2P1B/3R1B2/1P2PK1P/1R6 w - -"], ["3k4/8/3PK3/8/8/8/8/8 w - -"], ["3k4/3q4/8/8/8/8/3K4/3Q4 w - -"]], "outputs": [["▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿▇\n▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿▇\n▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿▇\n▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿▇\n"], ["▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿▇\n▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿▇\n▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿▇\n▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿▇\n"], ["♔＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿▇\n▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿▇\n▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿▇\n▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿♚\n"], ["♚＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿▇\n▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿▇\n▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿▇\n▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿♔\n"], ["♖♘♗♕♔♗♘♖\n♙♙♙♙♙♙♙♙\n▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿▇\n▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿▇\n♟♟♟♟♟♟♟♟\n♜♞♝♛♚♝♞♜\n"], ["♚＿▇＿▇＿▇♜\n♟▇＿▇＿▇＿♟\n▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇♟▇\n▇＿♖＿♟＿▇＿\n＿▇＿▇♝▇＿♙\n♙♖▇＿▇＿♙＿\n♔▇＿▇＿▇＿▇\n"], ["▇♚♜＿♛♜▇＿\n♟♟♟▇＿▇＿♟\n▇＿▇♟▇＿♟＿\n＿▇＿▇＿♝♙▇\n▇＿▇♟♘＿▇＿\n＿▇＿♙＿▇＿♙\n♙♙♙＿▇♙♕＿\n＿▇♖♔＿▇＿♖\n"], ["▇＿♖＿▇♖♔＿\n♙♙＿♕♗♙♙♙\n▇＿▇♙▇♘▇＿\n＿▇＿▇♙▇♝▇\n▇＿▇＿♟＿▇＿\n＿▇♞♛＿♟＿▇\n♟♟♟＿▇＿♟♟\n＿▇♚♜＿▇＿♜\n"], ["♛＿▇＿♞＿▇＿\n♞▇＿▇＿▇＿▇\n▇＿▇＿▇＿▇＿\n♟▇＿♟＿▇♟▇\n▇＿♟＿▇♟▇♝\n＿▇＿♜＿♝＿▇\n▇♟▇＿♟♚▇♟\n＿♜＿▇＿▇＿▇\n"], ["▇＿▇♔▇＿▇＿\n＿▇＿▇＿▇＿▇\n▇＿▇♟♚＿▇＿\n＿▇＿▇＿▇＿▇\n▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿▇\n▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿▇\n"], ["▇＿▇♔▇＿▇＿\n＿▇＿♕＿▇＿▇\n▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿▇\n▇＿▇＿▇＿▇＿\n＿▇＿▇＿▇＿▇\n▇＿▇♚▇＿▇＿\n＿▇＿♛＿▇＿▇\n"]], "starter_code": "def parse_fen(string):", "canonical_solution": "from pprint import *\nuni = {'q': '♕', 'B': '♝', 'p': '♙', 'K': '♚', 'N': '♞', 'Q': '♛', 'P': '♟', 'R': '♜', 'n': '♘', 'r': '♖', 'b': '♗', 'k': '♔', 1: '▇', 0: '＿'}\n\ndef parse_fen(string):\n    board = [[1, 0, 1, 0, 1, 0, 1, 0] if not i % 2 else [0, 1, 0, 1, 0, 1, 0, 1] for i in range(8)]\n    col, row = (0, 0)\n    pos = 0\n    placement, turn = string.split(' ')[:2]\n    while pos < len(placement):\n        if placement[pos] == '/':\n            row += 1\n            col = 0\n        elif placement[pos].isdigit():\n            col += int(placement[pos])\n        else:\n            board[row][col] = uni[placement[pos]]\n            col += 1\n        pos += 1\n    board = [[uni[i] if type(i) is int else i for i in x] for x in board]\n    if turn == 'b':\n        board = [list(v)[::-1] for v in zip(*[i[::-1] for i in zip(*board)])]\n    return '\\n'.join([''.join(i) for i in board]) + '\\n'", "entry_point": "parse_fen", "task_id": "TACO_lite/1587", "input_output_examples": [[[0, 10]], [[3]]]}
{"requirement": "def sort_me(arr):\"\"\"\nSort array by last character\n\nComplete the function to sort a given array or list by last character of elements.\n\n```if-not:haskell\nElement can be an integer or a string.\n```\n\nIf two elements don't differ in the last character, then they should be sorted by the order they come in the array.\n\n```if:haskell\nElements will not be empty (but the list may be).\n```\n\"\"\"", "inputs": [[["acvd", "bcc"]], [["14", "13"]], [["asdf", "asdf", "14", "13"]], [["bsde", "asdf", 14, "13"]], [["asdf", 14, "13", "asdf"]]], "outputs": [[["bcc", "acvd"]], [["13", "14"]], [["13", "14", "asdf", "asdf"]], [["13", 14, "bsde", "asdf"]], [["13", 14, "asdf", "asdf"]]], "starter_code": "def sort_me(arr):", "canonical_solution": "def sort_me(arr):\n    return sorted(arr, key=lambda elem: str(elem)[-1])", "entry_point": "sort_me", "task_id": "TACO_lite/1589", "input_output_examples": [[[["APP_PASSIVE_OPEN", "APP_SEND", "RCV_SYN_ACK"]], [["APP_ACTIVE_OPEN"]], [["APP_ACTIVE_OPEN", "RCV_SYN_ACK", "APP_CLOSE", "RCV_FIN_ACK", "RCV_ACK"]]], [["ESTABLISHED"], ["SYN_SENT"], ["ERROR"]]]}
{"requirement": "def find_missing_number(sequence):\"\"\"You receive some random elements as a space-delimited string. Check if the elements are part of an ascending sequence of integers starting with 1, with an increment of 1 (e.g. 1, 2, 3, 4).\n\nReturn:\n\n* `0` if the elements can form such a sequence, and no number is missing (\"not broken\")\n* `1` if there are any non-numeric elements in the input (\"invalid\")\n* `n` if the elements are part of such a sequence, but some numbers are missing, and `n` is the lowest of them (\"broken\")\n\"\"\"", "inputs": [["1 2 3 5"], ["1 5"], [""], ["1 2 3 4 5"], ["2 3 4 5"], ["2 6 4 5 3"], ["_______"], ["2 1 4 3 a"], ["1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 91 92 93 94 95 96 97 98 99 100 101 102"]], "outputs": [[4], [2], [0], [0], [1], [1], [1], [1], [90]], "starter_code": "def find_missing_number(sequence):", "canonical_solution": "def find_missing_number(sequence):\n    if not sequence:\n        return 0\n    try:\n        sequence = set((int(a) for a in sequence.split()))\n    except ValueError:\n        return 1\n    for b in range(1, max(sequence) + 1):\n        if b not in sequence:\n            return b\n    return 0", "entry_point": "find_missing_number", "task_id": "TACO_lite/1591", "input_output_examples": [[[[1, 2, 3], [4, 5, 6]]], [[21]]]}
{"requirement": "def pac_man(size, pacman, enemies):\"\"\"# Task\n Pac-Man got lucky today! Due to minor performance issue all his enemies have frozen. Too bad Pac-Man is not brave enough to face them right now, so he doesn't want any enemy to see him. \n \n Given a gamefield of size `N` x `N`, Pac-Man's position(`PM`) and his enemies' positions(`enemies`), your task is to count the number of coins he can collect without being seen.\n\n An enemy can see a Pac-Man if they are standing on the same row or column. \n \n It is guaranteed that no enemy can see Pac-Man on the starting position. There is a coin on each empty square (i.e. where there is no Pac-Man or enemy).\n\n# Input/Output\n\n\n - `[input]` integer `N`\n\n  The field size.\n\n\n - `[input]` integer array `PM`\n\n  Pac-Man's position (pair of integers)\n\n\n - `[input]` 2D integer array `enemies`\n\n  Enemies' positions (array of pairs)\n\n\n - `[output]` an integer\n\n  Number of coins Pac-Man can collect.\n  \n  \n# More PacMan Katas\n\n - [Play PacMan: Devour all](https://www.codewars.com/kata/575c29d5fcee86cb8b000136)\n\n - [Play PacMan 2: The way home](https://www.codewars.com/kata/575ed46e23891f67d90000d8)\n\"\"\"", "inputs": [[1, [0, 0], []], [2, [0, 0], []], [3, [0, 0], []], [3, [1, 1], []], [2, [0, 0], [[1, 1]]], [3, [2, 0], [[1, 1]]], [3, [2, 0], [[0, 2]]], [10, [4, 6], [[0, 2], [5, 2], [5, 5]]], [8, [1, 1], [[5, 4]]], [8, [1, 5], [[5, 4]]], [8, [6, 1], [[5, 4]]]], "outputs": [[0], [3], [8], [8], [0], [0], [3], [15], [19], [14], [7]], "starter_code": "def pac_man(size, pacman, enemies):", "canonical_solution": "def pac_man(size, pacman, enemies):\n    px, py = pacman\n    mx, my, Mx, My = (-1, -1, size, size)\n    for x, y in enemies:\n        if x < px and x > mx:\n            mx = x\n        if y < py and y > my:\n            my = y\n        if x > px and x < Mx:\n            Mx = x\n        if y > py and y < My:\n            My = y\n    return (Mx - mx - 1) * (My - my - 1) - 1", "entry_point": "pac_man", "task_id": "TACO_lite/1593", "input_output_examples": [[[0], [1], [2], [3]], [[1, 1], [1, 2, 3], [1, 2, 4, 7], [1, 2, 4, 8, 15]]]}
{"requirement": "def score_hand(a):\"\"\"Complete the function that determines the score of a hand in the card game [Blackjack](https://en.wikipedia.org/wiki/Blackjack) (aka 21).\n\nThe function receives an array of strings that represent each card in the hand (`\"2\"`, `\"3\",` ..., `\"10\"`, `\"J\"`, `\"Q\"`, `\"K\"` or `\"A\"`) and should return the score of the hand (integer).\n\n~~~if:c\nNote: in C the function receives a character array with the card `10` represented by the character `T`.\n~~~\n\n\n### Scoring rules:\n\nNumber cards count as their face value (2 through 10). Jack, Queen and King count as 10. An Ace can be counted as either 1 or 11.\n\nReturn the highest score of the cards that is less than or equal to 21. If there is no score less than or equal to 21 return the smallest score more than 21.\n\"\"\"", "inputs": [[["2", "3"]], [["4", "5", "6"]], [["7", "7", "8"]], [["9", "2", "10"]], [["4", "7", "8"]], [["J", "3"]], [["J", "Q"]], [["K", "J", "Q"]], [["A", "3"]], [["A", "J"]], [["A", "A", "A", "J"]], [["A", "2", "A", "9", "9"]], [["A", "A"]], [["8", "A", "A"]], [["5", "4", "A", "A"]], [["A", "2", "A", "3", "A"]], [["A", "A", "A", "A"]]], "outputs": [[5], [15], [22], [21], [19], [13], [20], [30], [14], [21], [13], [22], [12], [20], [21], [18], [14]], "starter_code": "def score_hand(a):", "canonical_solution": "def score_hand(a):\n    n = sum((11 if x == 'A' else 10 if x in 'JQK' else int(x) for x in a))\n    for _ in range(a.count('A')):\n        if n > 21:\n            n -= 10\n    return n", "entry_point": "score_hand", "task_id": "TACO_lite/1595", "input_output_examples": [[[["+--+  +----+", "|  |  |    |    +-+", "|  |  +----+    | |", "+--+            +-+"]], [["+------+", "|      |", "+------+"]], [["+---+", "|   |", "| +-+-+", "| | | |", "+-+-+ |", "  |   |", "  +---+"]], [["+-+-+", "| | |", "+-+-+", "| | |", "+-+-+"]]], [[2], [0], [3], [5]]]}
{"requirement": "def gc_content(seq):\"\"\"\nThe four bases found in DNA are adenine (A), cytosine (C), guanine (G) and thymine (T).\n\nIn genetics, GC-content is the percentage of Guanine (G) and Cytosine (C) bases on a DNA molecule that are either guanine or cytosine. \n\nGiven a DNA sequence (a string) return the GC-content in percent, rounded up to 2 decimal digits for Python, not rounded in all other languages.\n\nFor more information about GC-content you can take a look to [wikipedia GC-content](https://en.wikipedia.org/wiki/GC-content).\n\n**Note**: You can take a look to my others bio-info kata [here](http://www.codewars.com/users/nbeck/authored)\n\"\"\"", "inputs": [[""], ["A"], ["C"], ["CA"]], "outputs": [[0.0], [0.0], [100.0], [50.0]], "starter_code": "def gc_content(seq):", "canonical_solution": "def gc_content(seq):\n    if not seq:\n        return 0.0\n    else:\n        res = seq.count('C') + seq.count('G')\n        return round(res * 100 / len(seq), 2)", "entry_point": "gc_content", "task_id": "TACO_lite/1597", "input_output_examples": [[["It is beautiful weather today!"], ["Coding is great"], ["my number is 0208-533-2325"]], [["it isb e a ut if ulw e ath ert od ay"], ["c od ing isgr e at"], ["myn umb er is02085332325"]]]}
{"requirement": "def f(n):\"\"\"\nFind the closest prime number under a certain integer ```n``` that has the maximum possible amount of even digits.\n\nNaming ```f()```, the function that gives that prime.\n\nFeatures of the random tests:\n```\nNumber of tests = 28\n1000 <= n <= 5000000\n```\n\nEnjoy it!!\n\"\"\"", "inputs": [[1000], [10000], [500], [487]], "outputs": [[887], [8887], [487], [467]], "starter_code": "def f(n):", "canonical_solution": "from bisect import bisect_left as bisect\nn = 5000000\nsieve, PED, PED_DATA = ([0] * ((n >> 1) + 1), [], [])\nfor i in range(3, n + 1, 2):\n    if not sieve[i >> 1]:\n        for j in range(i ** 2 >> 1, n + 1 >> 1, i):\n            sieve[j] = 1\n        s = str(i)\n        nEveD = sum((s.count(d) for d in '02468'))\n        if nEveD:\n            PED.append(i)\n            PED_DATA.append((nEveD, len(s) - 1))\n\ndef f(n):\n    idx = bisect(PED, n) - 1\n    m, (nEveD, l) = (PED[idx], PED_DATA[idx])\n    for c in range(idx):\n        mc, (nEveDc, lc) = (PED[idx - c], PED_DATA[idx - c])\n        if nEveDc > nEveD:\n            m, nEveD = (mc, nEveDc)\n        if lc < nEveD:\n            break\n    return m", "entry_point": "f", "task_id": "TACO_lite/1601", "input_output_examples": [[[[5, 3, 14]]], [["odds win"]]]}
{"requirement": "def ordering_beers(beers):\"\"\"\n## Witamy!\n\nYou are in Poland and want to order a drink. You need to ask \"One beer please\": \"Jedno piwo poprosze\"\n\nBut let's say you are really thirsty and want several beers. Then you need to count in Polish. And more difficult, you need to understand the Polish grammar and cases (nominative, genitive, accusative and more).\n\n## The grammar\n\nIn English, the plural of \"beer\" is simply \"beers\", with an \"s\". \n\nIn Polish, the plural of \"piwo\" (nominative singular) is \"piw\" (genitive plural) or \"piwa\" (nominative plural). It depends!\n\n\nThe rules:\n\n* usually the plural is genitive: \"piw\"\n* but after the numerals 2, 3, 4, and compound numbers ending with them (e.g. 22, 23, 24), the noun is plural and takes the same case as the numeral, so nominative: \"piwa\"\n* and exception to the exception: for 12, 13 and 14, it's the genitive plural again: \"piw\" (yes, I know, it's crazy!)\n\n\n## The numbers\n\nFrom 0 to 9:\n    \n    \"zero\", \"jeden\", \"dwa\", \"trzy\", \"cztery\", \"pięć\", \"sześć\" , \"siedem\", \"osiem\", \"dziewięć\"\n\nFrom 10 to 19 it's nearly the same, with \"-ascie\" at the end:\n\n    \"dziesięć\", \"jedenaście\", \"dwanaście\", \"trzynaście\", \"czternaście\", \"piętnaście\", \"szesnaście\", \"siedemnaście\", \"osiemnaście\", \"dziewiętnaście\"\n\nTens from 10 to 90 are nearly the same, with \"-ziesci\" or \"ziesiąt\" at the end:\n\n    \"dziesięć\", \"dwadzieścia\", \"trzydzieści\", \"czterdzieści\", \"pięćdziesiąt\", \"sześćdziesiąt\", \"siedemdziesiąt\", \"osiemdziesiąt\", \"dziewięćdziesiąt\"\n\nCompound numbers are constructed similarly to English: tens + units.\n\n\"One\" could be male (\"Jeden\"), female (\"Jedna\") or neuter (\"Jedno\"), which is the case for \"beer\" (piwo). But all other numbers are invariant, even if ending with \"jeden\".\n\nAh, and by the way, if you don't want to drink alcohol (so no beers are ordered), ask for mineral water instead: \"Woda mineralna\".\n\nNote: if the number of beers is outside your (limited) Polish knowledge (0-99), raise an error!\n\n---\nMore about the crazy polish grammar: https://en.wikipedia.org/wiki/Polish_grammar\n\"\"\"", "inputs": [[0], [1], [2], [3], [4], [5], [8], [10], [11], [12], [13], [14], [15], [16], [20], [21], [22], [28], [33], [44], [55], [98], [99]], "outputs": [["Woda mineralna poprosze"], ["Jedno piwo poprosze"], ["Dwa piwa poprosze"], ["Trzy piwa poprosze"], ["Cztery piwa poprosze"], ["Piec piw poprosze"], ["Osiem piw poprosze"], ["Dziesiec piw poprosze"], ["Jedenascie piw poprosze"], ["Dwanascie piw poprosze"], ["Trzynascie piw poprosze"], ["Czternascie piw poprosze"], ["Pietnascie piw poprosze"], ["Szesnascie piw poprosze"], ["Dwadziescia piw poprosze"], ["Dwadziescia jeden piw poprosze"], ["Dwadziescia dwa piwa poprosze"], ["Dwadziescia osiem piw poprosze"], ["Trzydziesci trzy piwa poprosze"], ["Czterdziesci cztery piwa poprosze"], ["Piecdziesiat piec piw poprosze"], ["Dziewiecdziesiat osiem piw poprosze"], ["Dziewiecdziesiat dziewiec piw poprosze"]], "starter_code": "def ordering_beers(beers):", "canonical_solution": "def ordering_beers(beers):\n    assert 0 <= beers < 100\n    units = ['', 'jeden', 'dwa', 'trzy', 'cztery', 'piec', 'szesc', 'siedem', 'osiem', 'dziewiec', 'dziesiec', 'jedenascie', 'dwanascie', 'trzynascie', 'czternascie', 'pietnascie', 'szesnascie', 'siedemnascie', 'osiemnascie', 'dziewietnascie']\n    tens = ['', '', 'dwadziescia', 'trzydziesci', 'czterdziesci', 'piecdziesiat', 'szescdziesiat', 'siedemdziesiat', 'osiemdziesiat', 'dziewiecdziesiat']\n    if beers == 0:\n        order = 'Woda mineralna'\n    elif beers == 1:\n        order = 'Jedno piwo'\n    elif beers < 20:\n        order = units[beers] + ' piw'\n    else:\n        order = tens[beers // 10] + ' ' * bool(beers % 10) + units[beers % 10] + ' piw'\n    if beers % 10 in [2, 3, 4] and beers not in [12, 13, 14]:\n        order += 'a'\n    return order.capitalize() + ' poprosze'", "entry_point": "ordering_beers", "task_id": "TACO_lite/1607", "input_output_examples": [[[99, "$"], [12345, "*"], [67890, "@"]], [["$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n$                                      $\n$   $$$$   $$$$   $$$$   $$$$   $$$$   $\n$  $$  $$ $$  $$ $$  $$ $$  $$ $$  $$  $\n$  $$  $$ $$  $$ $$  $$ $$  $$ $$  $$  $\n$  $$  $$ $$  $$ $$  $$  $$$$   $$$$   $\n$  $$  $$ $$  $$ $$  $$   $$     $$    $\n$   $$$$   $$$$   $$$$   $$     $$     $\n$                                      $\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"], ["****************************************\n*                                      *\n*    **    ****   ****  **  ** ******  *\n*   ***   **  ** **  ** **  ** **      *\n*  * **      **     **  **  ** *****   *\n*    **     **      **   *****     **  *\n*    **    **    **  **     **     **  *\n*  ****** ******  ****      ** *****   *\n*                                      *\n****************************************"], ["@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@                                      @\n@     @@  @@@@@@  @@@@   @@@@   @@@@   @\n@    @@   @@  @@ @@  @@ @@  @@ @@  @@  @\n@   @@@@     @@   @@@@  @@  @@ @@  @@  @\n@  @@  @@   @@    @@@@   @@@@  @@  @@  @\n@  @@  @@  @@    @@  @@   @@   @@  @@  @\n@   @@@@   @@     @@@@   @@     @@@@   @\n@                                      @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"]]]}
{"requirement": "def encrypt(text, encryptKey):\"\"\"\nYou have to write two methods to *encrypt* and *decrypt* strings. Both methods have two parameters:\n```\n1. The string to encrypt/decrypt\n2. The Qwerty-Encryption-Key (000-999) \n```\n\nThe rules are very easy:\n```\nThe crypting-regions are these 3 lines from your keyboard:\n1. \"qwertyuiop\"\n2. \"asdfghjkl\"\n3. \"zxcvbnm,.\"\n\nIf a char of the string is not in any of these regions, take the char direct in the output.\nIf a char of the string is in one of these regions: Move it by the part of the key in the \nregion and take this char at the position from the region. \nIf the movement is over the length of the region, continue at the beginning.\nThe encrypted char must have the same case like the decrypted char! \nSo for upperCase-chars the regions are the same, but with pressed \"SHIFT\"!\n\nThe Encryption-Key is an integer number from 000 to 999.\n\nThe first digit of the key is the movement for the first line.\nThe second digit of the key is the movement for the second line.\nThe third digit of the key is the movement for the third line.\n\n(Consider that the key is an integer! When you got a 0 this would mean 000. A 1 would mean 001. And so on.)\n```\n\nYou do not need to do any prechecks. The strings will always be not null \nand will always have a length > 0. You do not have to throw any exceptions.\n\n*Hint: Don't forget: The regions are from an US-Keyboard!*\n*In doubt google for \"US Keyboard.\"*\n\n\n\nThis kata is part of the Simple Encryption Series:\nSimple Encryption #1 - Alternating Split\nSimple Encryption #2 - Index-Difference\nSimple Encryption #3 - Turn The Bits Around\nSimple Encryption #4 - Qwerty\n\nHave fun coding it and please don't forget to vote and rank this kata! :-)\n\"\"\"", "inputs": [["A", 111], ["Abc", 212], ["Ball", 134], ["Ball", 444], ["This is a test.", 348], ["Do the kata Kobayashi Maru Test. Endless fun and excitement when finding a solution.", 583]], "outputs": [["S"], ["Smb"], [">fdd"], [">gff"], ["Iaqh qh g iyhi,"], ["Sr pgi jlpl Jr,lqlage Zlow Piapc I.skiaa dw. l.s ibnepizi.p ugi. de.se.f l arkwper.c"]], "starter_code": "def encrypt(text, encryptKey):", "canonical_solution": "from collections import deque\nKEYBOARD = ['zxcvbnm,.', 'ZXCVBNM<>', 'asdfghjkl', 'ASDFGHJKL', 'qwertyuiop', 'QWERTYUIOP']\n\ndef encrypt(text, encryptKey):\n    return converter(text, encryptKey, 1)\n\ndef decrypt(text, encryptKey):\n    return converter(text, encryptKey, -1)\n\ndef converter(text, encryptKey, sens):\n    deques = list(map(deque, KEYBOARD))\n    for i, deq in enumerate(deques):\n        deq.rotate(-sens * (encryptKey // 10 ** (i // 2) % 10))\n    return text.translate(str.maketrans(''.join(KEYBOARD), ''.join((''.join(deq) for deq in deques))))", "entry_point": "encrypt", "task_id": "TACO_lite/1608", "input_output_examples": [[[2, 5]], [[3]]]}
{"requirement": "def game(n):\"\"\"\nWith a friend we used to play the following game on a chessboard (8, rows, 8 columns).\nOn the first row at the *bottom* we put numbers:\n\nOn row 2 (2nd row from the bottom) we have:\n\nOn row 3:\n\nuntil last row:\n\n\nWhen all numbers are on the chessboard each in turn we toss a coin. The one who get \"head\" wins and\nthe other gives him, in dollars, the **sum of the numbers on the chessboard**.\nWe play for fun, the dollars come from a monopoly game! \n\n### Task\nHow much can I (or my friend) win or loses for each game if the chessboard has n rows and n columns? Add all of the fractional values on an n by n sized board and give the answer as a simplified fraction.\n  \n- Ruby, Python, JS, Coffee, Clojure, PHP, Elixir, Crystal, Typescript, Go:\n\nThe function called 'game' with parameter n (integer >= 0) returns as result an irreducible fraction written as an array of integers: [numerator, denominator].\nIf the denominator is 1 return [numerator].\n\n- Haskell:\n\n'game' returns either a \"Left Integer\" if denominator is 1 otherwise \n\"Right (Integer, Integer)\" \n\n- Prolog:\n'game' returns an irreducible fraction written as an array of integers: [numerator, denominator].\nIf the denominator is 1 return [numerator, 1].\n\n- Java, C#, C++, F#, Swift, Reason, Kotlin:\n\n'game' returns a string that mimicks the array returned in Ruby, Python, JS, etc...\n\n- Fortran, Bash: 'game' returns a string\n\n\n- Forth: return on the stack the numerator and the denominator (even if the denominator is 1)\n\n\n- In Fortran - as in any other language - the returned string is not permitted\nto contain any redundant trailing whitespace: you can use dynamically allocated character strings.\n\"\"\"", "inputs": [[0], [1], [8], [40], [101], [204], [807], [1808], [5014], [120000], [750000], [750001], [3000000], [3000001]], "outputs": [[[0]], [[1, 2]], [[32]], [[800]], [[10201, 2]], [[20808]], [[651249, 2]], [[1634432]], [[12570098]], [[7200000000]], [[281250000000]], [[562501500001, 2]], [[4500000000000]], [[9000006000001, 2]]], "starter_code": "def game(n):", "canonical_solution": "def game(n):\n    return [n * n // 2] if n % 2 == 0 else [n * n, 2]", "entry_point": "game", "task_id": "TACO_lite/1615", "input_output_examples": [[[12, 20], [10, 10], [5, 17], [0, 0]], [[28.8], [48.0], [14.1], [0]]]}
{"requirement": "def spacify(string):\n\t\"\"\"\nModify the spacify function so that it returns the given string with spaces inserted between each character.\n\"\"\"", "inputs": [[""], ["a"], ["Pippi"]], "outputs": [[""], ["a"], ["P i p p i"]], "starter_code": "def spacify(string):\n\t", "canonical_solution": "spacify = ' '.join", "entry_point": "spacify", "task_id": "TACO_lite/1616", "input_output_examples": [[[0, 5], [12345, 17], [-31428.7, "47"], [83749, 0], [2017, 4], [0, 1]], [[1808], [29535], ["Input is invalid."], ["Input is invalid."], ["You have already reached level 4."], ["You have already reached level 1."]]]}
{"requirement": "def count_sel(nums):\"\"\"\nWe need a function ```count_sel()``` that receives an array or list of integers (positive and negative) and may give us the following information in the order and  structure presented bellow:\n\n```[(1), (2), (3), [[(4)], 5]]```\n\n(1) - Total amount of received integers.\n\n(2) - Total amount of different values the array has.\n\n(3) - Total amount of values that occur only once.\n\n(4) and (5) both in a list\n\n(4) - It is (or they are) the element(s) that has (or have) the maximum occurrence. If there are more than one, the elements should be sorted (by their value obviously)\n\n(5) - Maximum occurrence of the integer(s)\n\nEnjoy it and happy coding!!\n\"\"\"", "inputs": [[[-3, -2, -1, 3, 4, -5, -5, 5, -1, -5]], [[5, -1, 1, -1, -2, 5, 0, -2, -5, 3]], [[-2, 4, 4, -2, -2, -1, 3, 5, -5, 5]], [[4, -5, 1, -5, 2, 4, -1, 4, -1, 1]], [[4, 4, 2, -3, 1, 4, 3, 2, 0, -5, 2, -2, -2, -5]]], "outputs": [[[10, 7, 5, [[-5], 3]]], [[10, 7, 4, [[-2, -1, 5], 2]]], [[10, 6, 3, [[-2], 3]]], [[10, 5, 1, [[4], 3]]], [[14, 8, 4, [[2, 4], 3]]]], "starter_code": "def count_sel(nums):", "canonical_solution": "from collections import defaultdict, Counter\n\ndef count_sel(nums):\n    cnt = Counter(nums)\n    d = defaultdict(list)\n    total = 0\n    unique = 0\n    for k, v in cnt.items():\n        d[v].append(k)\n        total += v\n        unique += 1\n    maximum = max(d)\n    return [total, unique, len(d[1]), [sorted(d[maximum]), maximum]]", "entry_point": "count_sel", "task_id": "TACO_lite/1617", "input_output_examples": [[[25]], [[47]]]}
{"requirement": "def chess_knight(cell):\"\"\"\n# Task\n Given a position of a knight on the standard chessboard, find the number of different moves the knight can perform.\n\n The knight can move to a square that is two squares horizontally and one square vertically, or two squares vertically and one square horizontally away from it. The complete move therefore looks like the letter L. Check out the image below to see all valid moves for a knight piece that is placed on one of the central squares.\n\n ![](https://codefightsuserpics.s3.amazonaws.com/tasks/chessKnight/img/knight.jpg?_tm=1473533979951)\n\n# Input/Output\n\n\n - `[input]` string `cell`\n\n    String consisting of letter+number - coordinates of the knight on an 8 × 8 chessboard in chess notation.\n\n\n - `[output]` an integer\n\"\"\"", "inputs": [["a1"], ["c2"], ["d4"], ["g6"]], "outputs": [[2], [6], [8], [6]], "starter_code": "def chess_knight(cell):", "canonical_solution": "def chess_knight(cell):\n    x, y = (ord(c) - ord(origin) for c, origin in zip(cell, 'a1'))\n    return sum((0 <= x + dx < 8 and 0 <= y + dy < 8 for dx, dy in ((-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1))))", "entry_point": "chess_knight", "task_id": "TACO_lite/1619", "input_output_examples": [[["acb"], ["aabacbaa"], ["abc"]], [["bca"], ["bbabcabb"], ["bac"]]]}
{"requirement": "def score_test(tests, right, omit, wrong):\"\"\"\nA new school year is approaching, which also means students will be taking tests. \n\nThe tests in this kata are to be graded in different ways. A certain number of points will be given for each correct answer and a certain number of points will be deducted for each incorrect answer. For ommitted answers, points will either be awarded, deducted, or no points will be given at all.\n\nReturn the number of points someone has scored on varying tests of different lengths.\n\nThe given parameters will be:\n\n* An array containing a series of `0`s, `1`s, and `2`s, where `0` is a correct answer, `1` is an omitted answer, and `2` is an incorrect answer.\n* The points awarded for correct answers\n* The points awarded for omitted answers (note that this may be negative)\n* The points **deducted** for incorrect answers (hint: this value has to be subtracted)\n\n\n**Note:**\nThe input will always be valid (an array and three numbers)\n\"\"\"", "inputs": [[[0, 0, 0, 0, 2, 1, 0], 2, 0, 1], [[0, 1, 0, 0, 2, 1, 0, 2, 2, 1], 3, -1, 2], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 5, -1, 2], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 2, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 0], 6, 0, 1.5], [[0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 0, 2, 1, 2, 0, 2, 1], 10, -5, 10], [[0, 2, 0, 2, 0, 2, 0, 2], 10, 0, 5], [[0, 1, 2, 0, 0, 2, 0, 1, 2, 1, 0, 0, 1, 0, 2, 1, 0, 2, 2, 0], 9, 3, 2]], "outputs": [[9], [3], [70], [87], [-60], [20], [84]], "starter_code": "def score_test(tests, right, omit, wrong):", "canonical_solution": "def score_test(tests, right, omit, wrong):\n    points = (right, omit, -wrong)\n    return sum((points[test] for test in tests))", "entry_point": "score_test", "task_id": "TACO_lite/1623", "input_output_examples": [[[[2, 4, 7]]], [[4]]]}
{"requirement": "def min_unfairness(arr, k):\"\"\"\nWe define the \"unfairness\" of a list/array as the *minimal* difference between max(x1,x2,...xk) and min(x1,x2,...xk), for all possible combinations of k elements you can take from the list/array; both minimum and maximum of an empty list/array are considered to be 0.\n\n**More info and constraints:**\n\n* lists/arrays can contain values repeated more than once, plus there are usually more combinations that generate the required minimum;\n* the list/array's length can be any value from 0 to 10^(6);\n* the value of k will range from 0 to the length of the list/array,\n* the minimum unfairness of an array/list with less than 2 elements is 0.\n\n**Note:** shamelessly taken from [here](https://www.hackerrank.com/challenges/angry-children), where it was created and debatably categorized and ranked.\n\"\"\"", "inputs": [[[30, 100, 1000, 150, 60, 250, 10, 120, 20], 3], [[30, 100, 1000, 150, 60, 250, 10, 120, 20], 5], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], 10], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], 9], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 10], [[1, 1, -1], 2], [[1, 1], 2], [[30, 100, 1000, 150, 60, 250, 10, 120, 20], 1], [[30, 100, 1000, 150, 60, 250, 10, 120, 20], 0], [[], 0]], "outputs": [[20], [90], [1], [0], [0], [0], [0], [0], [0], [0]], "starter_code": "def min_unfairness(arr, k):", "canonical_solution": "def min_unfairness(arr, k):\n    arr = sorted(arr)\n    return min((b - a for a, b in zip(arr, arr[k - 1:]))) if arr and k else 0", "entry_point": "min_unfairness", "task_id": "TACO_lite/1626", "input_output_examples": [[["is2 Thi1s T4est 3a"], ["4of Fo1r pe6ople g3ood th5e the2"], [""]], [["Thi1s is2 3a T4est"], ["Fo1r the2 g3ood 4of th5e pe6ople"], [""]]]}
{"requirement": "def find_average(nums):\"\"\"\n## Find Mean\n\nFind the mean (average) of a list of numbers in an array.\n\n## Information\n\nTo find the mean (average) of a set of numbers add all of the numbers together and divide by the number of values in the list.\n\"\"\"", "inputs": [[[1]], [[1, 3, 5, 7]], [[-1, 3, 5, -7]], [[5, 7, 3, 7]], [[]]], "outputs": [[1], [4], [0], [5.5], [0]], "starter_code": "def find_average(nums):", "canonical_solution": "def find_average(nums):\n    return float(sum(nums)) / len(nums) if len(nums) != 0 else 0", "entry_point": "find_average", "task_id": "TACO_lite/1627", "input_output_examples": [[[21200]], [[true]]]}
{"requirement": "def friend(x):\"\"\"\nMake a program that filters a list of strings and returns a list with only your friends name in it.\n\nIf a name has exactly 4 letters in it, you can be sure that it has to be a friend of yours! Otherwise, you can be sure he's not...\n\nNote: keep the original order of the names in the output.\n\"\"\"", "inputs": [[["Ryan", "Kieran", "Mark"]], [["Ryan", "Jimmy", "123", "4", "Cool Man"]], [["Jimm", "Cari", "aret", "truehdnviegkwgvke", "sixtyiscooooool"]], [["Love", "Your", "Face", "1"]], [["Hell", "Is", "a", "badd", "word"]], [["Issa", "Issac", "Issacs", "ISISS"]], [["Robot", "Your", "MOMOMOMO"]], [["Your", "BUTT"]], [["Hello", "I", "AM", "Sanjay", "Gupt"]], [["This", "IS", "enough", "TEst", "CaSe"]], [[]]], "outputs": [[["Ryan", "Mark"]], [["Ryan"]], [["Jimm", "Cari", "aret"]], [["Love", "Your", "Face"]], [["Hell", "badd", "word"]], [["Issa"]], [["Your"]], [["Your", "BUTT"]], [["Gupt"]], [["This", "TEst", "CaSe"]], [[]]], "starter_code": "def friend(x):", "canonical_solution": "def friend(x):\n    return [f for f in x if len(f) == 4]", "entry_point": "friend", "task_id": "TACO_lite/1628", "input_output_examples": [[["GFEDCBA", "------------...-----------"]], [["EDCBAGF"]]]}
{"requirement": "def look_and_say_and_sum(N):\"\"\"\n# Task\nGet the digits sum of `n`th number from the [Look-and-Say sequence](http://en.wikipedia.org/wiki/Look-and-say_sequence)(1-based).\n\n`1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, ...`\n\n# Input/Output\n\n`[input]` integer `n`\n\n`n`th number in the sequence to get where `1 <= n <= 55`  and `n=1 is \"1\"`.\n\n[output] an integer\n\nThe sum of digits in `n`th number from the `Look-and-Say` sequence.\n\"\"\"", "inputs": [[1], [2], [3], [4], [5]], "outputs": [[1], [2], [3], [5], [8]], "starter_code": "def look_and_say_and_sum(N):", "canonical_solution": "def look_and_say_and_sum(N):\n    l = [1]\n    for n in range(N - 1):\n        result = [1, l[0]]\n        for i in range(1, len(l)):\n            if l[i] == result[-1]:\n                result[-2] += 1\n            else:\n                result += [1, l[i]]\n        l = result\n    return sum(l)", "entry_point": "look_and_say_and_sum", "task_id": "TACO_lite/1630", "input_output_examples": [[[0], [1], [9], [10], [17], [20], [21], [45], [80], [99], [100], [301], [799], [800], [950], [1000], [1002], [3051], [7200], [7219], [8330], [99999], [888888]], [["zero"], ["one"], ["nine"], ["ten"], ["seventeen"], ["twenty"], ["twenty-one"], ["forty-five"], ["eighty"], ["ninety-nine"], ["one hundred"], ["three hundred one"], ["seven hundred ninety-nine"], ["eight hundred"], ["nine hundred fifty"], ["one thousand"], ["one thousand two"], ["three thousand fifty-one"], ["seven thousand two hundred"], ["seven thousand two hundred nineteen"], ["eight thousand three hundred thirty"], ["ninety-nine thousand nine hundred ninety-nine"], ["eight hundred eighty-eight thousand eight hundred eighty-eight"]]]}
{"requirement": "def polybius(text):\"\"\"\nImplement the [Polybius square cipher](http://en.wikipedia.org/wiki/Polybius_square).\n\nReplace every letter with a two digit number. The first digit is the row number, and the second digit is the column number of following square. Letters `'I'` and `'J'` are both 24 in this cipher:\n\n\ntable#polybius-square {width: 100px;}\ntable#polybius-square td {background-color: #2f2f2f;}\ntable#polybius-square th {background-color: #3f3f3f;}\n\n\n12345\n1ABCDE\n2FGHI/JK\n3LMNOP\n4QRSTU\n5VWXYZ\n\n\nInput will be valid (only spaces and uppercase letters from A to Z), so no need to validate them.\n\"\"\"", "inputs": [["POLYBIUS"], ["CODEWARS"], ["POLYBIUS SQUARE CIPHER"]], "outputs": [["3534315412244543"], ["1334141552114243"], ["3534315412244543 434145114215 132435231542"]], "starter_code": "def polybius(text):", "canonical_solution": "def polybius(text):\n    letmap = {'A': '11', 'B': '12', 'C': '13', 'D': '14', 'E': '15', 'F': '21', 'G': '22', 'H': '23', 'I': '24', 'J': '24', 'K': '25', 'L': '31', 'M': '32', 'N': '33', 'O': '34', 'P': '35', 'Q': '41', 'R': '42', 'S': '43', 'T': '44', 'U': '45', 'V': '51', 'W': '52', 'X': '53', 'Y': '54', 'Z': '55', ' ': ' '}\n    enc = ''\n    for i in range(0, len(text)):\n        enc = enc + letmap[text[i].upper()]\n    return enc", "entry_point": "polybius", "task_id": "TACO_lite/1631", "input_output_examples": [[[4], [6], [-1]], [[20], [56], [0]]]}
{"requirement": "def expression_out(e):\"\"\"Math hasn't always been your best subject, and these programming symbols always trip you up!\n\nI mean, does `**` mean *\"Times, Times\"* or *\"To the power of\"*?\n\nLuckily, you can create the function `expression_out()` to write out the expressions for you!\n\nThe operators you'll need to use are:\n\n```python\n{ '+':   'Plus ',\n  '-':   'Minus ',\n  '*':   'Times ',\n  '/':   'Divided By ',  \n  '**':  'To The Power Of ',\n  '=':   'Equals ',\n  '!=':  'Does Not Equal ' }\n```\n\nThese values will be stored in the preloaded dictionary `OPERATORS` just as shown above.\n\nBut keep in mind: INVALID operators will also be tested, to which you should return `\"That's not an operator!\"`\n\nAnd all of the numbers will be `1` to`10`!\nIsn't that nice!\n\nGood luck!\n\"\"\"", "inputs": [["1 + 3"], ["2 - 10"], ["6 ** 9"], ["5 = 5"], ["7 * 4"], ["2 / 2"], ["8 != 5"]], "outputs": [["One Plus Three"], ["Two Minus Ten"], ["Six To The Power Of Nine"], ["Five Equals Five"], ["Seven Times Four"], ["Two Divided By Two"], ["Eight Does Not Equal Five"]], "starter_code": "def expression_out(e):", "canonical_solution": "op = {'+': 'Plus ', '-': 'Minus ', '*': 'Times ', '/': 'Divided By ', '**': 'To The Power Of ', '=': 'Equals ', '!=': 'Does Not Equal '}\nnum = {'1': 'One', '2': 'Two', '3': 'Three', '4': 'Four', '5': 'Five', '6': 'Six', '7': 'Seven', '8': 'Eight', '9': 'Nine', '10': 'Ten'}\n\ndef expression_out(e):\n    a, b, c = e.split()\n    try:\n        return num[a] + ' ' + op[b] + num[c]\n    except:\n        return \"That's not an operator!\"", "entry_point": "expression_out", "task_id": "TACO_lite/1634", "input_output_examples": [[["Francis"]], [[true]]]}
{"requirement": "def sum_array(arr):\"\"\"\nSum all the numbers of the array (in F# and Haskell you get a list) except the highest and the lowest element (the value, not the index!).\n(The highest/lowest element is respectively only one element at each edge, even if there are more than one with the same value!)\n\nIf array is empty, null or None, or if only 1 Element exists, return 0.\nNote:In C++ instead null an empty vector is used. In C there is no null. ;-)\n\n\n\n\nHave fun coding it and please don't forget to vote and rank this kata! :-) \n\nI have created other katas. Have a look if you like coding and challenges.\n\"\"\"", "inputs": [[null], [[]], [[3]], [[-3]], [[3, 5]], [[-3, -5]], [[6, 2, 1, 8, 10]], [[6, 0, 1, 10, 10]], [[-6, -20, -1, -10, -12]], [[-6, 20, -1, 10, -12]]], "outputs": [[0], [0], [0], [0], [0], [0], [16], [17], [-28], [3]], "starter_code": "def sum_array(arr):", "canonical_solution": "def sum_array(arr):\n    if arr == None or len(arr) < 3:\n        return 0\n    return sum(arr) - max(arr) - min(arr)", "entry_point": "sum_array", "task_id": "TACO_lite/1636", "input_output_examples": [[["dolphin"], ["alaska"], ["knife"]], [["The Dolphin"], ["Alaskalaska"], ["The Knife"]]]}
{"requirement": "def trace(matrix):\"\"\"Calculate the trace of a square matrix. A square matrix has `n` rows and `n` columns, where `n` is any integer > 0. The entries of the matrix can contain any number of integers. The function should return the calculated trace of the matrix, or `nil/None` if the array is empty or not square; you can otherwise assume the input will be valid (of the form described below).\n\nThe trace of an n-by-n square matrix **A** is defined to be the sum of the elements on the main diagonal (the diagonal from the upper left to the lower right) of **A**.\n\nA matrix will be defined as an array of arrays, where the 1st entry represents the 1st row, the 2nd entry the 2nd row, and so on.\n\nYou can read more about the trace of a matrix at these sources:\n\n * http://en.wikipedia.org/wiki/Trace_(linear_algebra)\n * http://mathworld.wolfram.com/MatrixTrace.html\n\n~~~if:ruby\nNote: The `Matrix` class is disabled.\n~~~\n~~~if:python\nNote: `Numpy` is disabled.\n~~~\n\"\"\"", "inputs": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[0, 0], [0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[1, 0, 0], [0, 1, 0], [0, 0, -2]]], [[[0]]], [[[1]]], [[[-300]]], [[]], [[[]]], [[[1, 2], [1, 2], [1, 2]]], [[[1, 2, 3], [1, 2, 3]]]], "outputs": [[15], [0], [0], [0], [0], [1], [-300], [null], [null], [null], [null]], "starter_code": "def trace(matrix):", "canonical_solution": "def trace(matrix):\n    if not matrix or len(matrix) != len(matrix[0]):\n        return None\n    return sum((matrix[i][i] for i in range(len(matrix))))", "entry_point": "trace", "task_id": "TACO_lite/1638", "input_output_examples": [[[11, 10, 300]], [[1]]]}
{"requirement": "def luxhouse(houses):\"\"\"# Story&Task\n The capital of Berland has n multifloor buildings. The architect who built up the capital was very creative, so all houses in the city were built in one row.\n\n Let's enumerate all the houses from left to right, starting with 0. A house is considered to be luxurious if the number of floors in it is strictly greater than in each house with a larger number. In other words, a house is luxurious if the number of floors in it is strictly greater than in all houses located to the right from it.\n\n The new architect is interested in n questions, the ith of them is the following: \"how many floors should be added to the ith house to make it luxurious?\" (For each i from 1 to n, inclusive). You need to help him cope with this task.\n\n Note that all these questions are independent from each other — the answer to the question for house i does not affect other answers (i.e., the floors to the houses are not actually added).\n\n# Input/Output\n\n\n - `[input]` integer array `houses`\n\n  Array of positive integers, representing the number of floors in each house.\n\n  The ith element is the number of houses in the ith house.\n\n  `1 ≤ houses.length ≤ 1000`\n\n\n - `[output]` an integer array\n\n  An array has the same length as input array, the ith element represents the number of floors that should be added to the ith house to make it luxurious.\n\"\"\"", "inputs": [[[1, 2, 3, 1, 2]], [[3, 2, 1, 4]], [[1, 2, 3]], [[3, 2, 1]], [[1, 1, 1]]], "outputs": [[[3, 2, 0, 2, 0]], [[2, 3, 4, 0]], [[3, 2, 0]], [[0, 0, 0]], [[1, 1, 0]]], "starter_code": "def luxhouse(houses):", "canonical_solution": "def luxhouse(houses):\n    return [max(0, max(houses[i:]) - h + 1) for i, h in enumerate(houses[:-1], 1)] + [0]", "entry_point": "luxhouse", "task_id": "TACO_lite/1639", "input_output_examples": [[[[5, 0, 3], "I Love You"]], [["ivy"]]]}
{"requirement": "def longest_possible(playback):\"\"\"\n## The Problem\n\nJames is a DJ at a local radio station. As it's getting to the top of the hour, he needs to find a song to play that will be short enough to fit in before the news block. He's got a database of songs that he'd like you to help him filter in order to do that.\n\n## What To Do\n\nCreate `longestPossible`(`longest_possible` in python and ruby) helper function that takes 1 integer argument which is a maximum length of a song in seconds.\n\n`songs` is an array of objects which are formatted as follows:\n\n```python\n{'artist': 'Artist', 'title': 'Title String', 'playback': '04:30'}\n```\n\nYou can expect playback value to be formatted exactly like above.\n\nOutput should be a title of the longest song from the database that matches the criteria of not being longer than specified time. If there's no songs matching criteria in the database, return `false`.\n\"\"\"", "inputs": [[215], [270], [13], [300]], "outputs": [["For Reasons Unknown"], ["YYZ"], [false], ["Surfing With The Alien"]], "starter_code": "def longest_possible(playback):", "canonical_solution": "songs = [{'artist': 'Marillion', 'title': 'Keyleigh', 'playback': '03:36'}, {'artist': 'Pink Floyd', 'title': 'Time', 'playback': '06:48'}, {'artist': 'Rush', 'title': 'YYZ', 'playback': '04:27'}, {'artist': 'Bonobo', 'title': 'Days To Come', 'playback': '03:50'}, {'artist': 'Coldplay', 'title': 'Yellow', 'playback': '04:32'}, {'artist': 'Bloc Party', 'title': 'Like Eating Glass', 'playback': '04:22'}, {'artist': 'The Killers', 'title': 'For Reasons Unknown', 'playback': '03:30'}, {'artist': 'Arctic Monkeys', 'title': 'Teddy Picker', 'playback': '03:25'}, {'artist': 'Joe Satriani', 'title': 'Surfing With The Alien', 'playback': '04:34'}]\n\ndef calculate_seconds(s):\n    minutes, seconds = [int(x) for x in s.split(':')]\n    return minutes * 60 + seconds\n\ndef longest_possible(playback):\n    candidates = [song for song in songs if calculate_seconds(song['playback']) <= playback]\n    return sorted(candidates, key=lambda x: calculate_seconds(x['playback']), reverse=True)[0]['title'] if len(candidates) > 0 else False", "entry_point": "longest_possible", "task_id": "TACO_lite/1640", "input_output_examples": [[["a   **&  cZ"], ["a **&  bZ"]], [["10100000000000000000000001"], ["11000000000000000000000001"]]]}
{"requirement": "def count_ones(n):\"\"\"\nConsider the sequence `a(1) = 7, a(n) = a(n-1) + gcd(n, a(n-1)) for n >= 2`: \n\nLet us take the differences between successive elements of the sequence and\nget a second sequence `g`.\n\nFor the sake of uniformity of the lengths of sequences **we add** a `1` at the head of g:\n\nRemoving the 1s gives a third sequence:\n`p`\nwhere you can see prime numbers.\n\n#Task:\nWrite functions:\n```\n1: an(n) with parameter n: returns the first n terms of the series a(n) (not tested)\n\n2: gn(n) with parameter n: returns the first n terms of the series g(n) (not tested)\n\n3: countOnes(n) with parameter n: returns the number of 1 in g(n) \n    (don't forget to add a `1` at the head) # (tested)\n    \n4: p(n) with parameter n: returns an array of n unique prime numbers (not tested)\n\n5: maxp(n) with parameter n: returns the biggest prime number of the sequence pn(n) # (tested)\n\n6: anOver(n) with parameter n: returns an array (n terms) of the a(i)/i for every i such g(i) != 1 (not tested but interesting result)\n\n7: anOverAverage(n) with parameter n: returns as an *integer* the average of anOver(n)  (tested)\n```\n\n#Note:\nYou can write directly functions `3:`, `5:` and `7:`. There is no need to write functions `1:`, `2:`, `4:` `6:`\nexcept out of pure curiosity.\n\"\"\"", "inputs": [[1], [10], [100], [200], [1000], [10000], [100000]], "outputs": [[1], [8], [90], [184], [975], [9968], [99955]], "starter_code": "def count_ones(n):", "canonical_solution": "def count_ones(n):\n    a, ones = (7, 1)\n    for i in range(2, n + 1):\n        b = a + gcd(i, a)\n        if b == a + 1:\n            ones += 1\n        a = b\n    return ones\n\ndef max_pn(n):\n    a, p, i = (7, {1}, 1)\n    while len(p) < n + 1:\n        i += 1\n        b = a + gcd(i, a)\n        p.add(b - a)\n        a = b\n    return max(p)\n\ndef an_over_average(n):\n    return 3\n\ndef gcd(a, b):\n    while b:\n        a, b = (b, a % b)\n    return a", "entry_point": "count_ones", "task_id": "TACO_lite/1641", "input_output_examples": [[["RRGBRGBB"], ["GB"]], [["G"], ["R"]]]}
{"requirement": "def longest_palindrome (s):\n\t\"\"\"\n### Longest Palindrome\n\nFind the length of the longest substring in the given string `s` that is the same in reverse.        \n\nIf the length of the input string is `0`, the return value must be `0`.\n\"\"\"", "inputs": [["a"], ["aa"], ["baa"], ["aab"], ["baabcd"], ["baablkj12345432133d"], ["I like racecars that go fast"], ["abcdefghba"], [""], ["FourscoreandsevenyearsagoourfaathersbroughtforthonthiscontainentanewnationconceivedinzLibertyanddedicatedtothepropositionthatallmenarecreatedequalNowweareengagedinagreahtcivilwartestingwhetherthatnaptionoranynartionsoconceivedandsodedicatedcanlongendureWeareqmetonagreatbattlefiemldoftzhatwarWehavecometodedicpateaportionofthatfieldasafinalrestingplaceforthosewhoheregavetheirlivesthatthatnationmightliveItisaltogetherfangandproperthatweshoulddothisButinalargersensewecannotdedicatewecannotconsecratewecannothallowthisgroundThebravelmenlivinganddeadwhostruggledherehaveconsecrateditfaraboveourpoorponwertoaddordetractTgheworldadswfilllittlenotlenorlongrememberwhatwesayherebutitcanneverforgetwhattheydidhereItisforusthelivingrathertobededicatedheretotheulnfinishedworkwhichtheywhofoughtherehavethusfarsonoblyadvancedItisratherforustobeherededicatedtothegreattdafskremainingbeforeusthatfromthesehonoreddeadwetakeincreaseddevotiontothatcauseforwhichtheygavethelastpfullmeasureofdevotionthatweherehighlyresolvethatthesedeadshallnothavediedinvainthatthisnationunsderGodshallhaveanewbirthoffreedomandthatgovernmentofthepeoplebythepeopleforthepeopleshallnotperishfromtheearth"]], "outputs": [[1], [2], [2], [2], [4], [9], [7], [1], [0], [7]], "starter_code": "def longest_palindrome (s):\n\t", "canonical_solution": "def longest_palindrome(s):\n    maxPal, tmpPal = (0, 1)\n    count_dct = {}\n    inPal = False\n    for i, l in enumerate(s):\n        count_dct[l] = count_dct.get(l, 0) + 1\n        if not inPal and count_dct[l] >= 2:\n            if l == s[i - 1]:\n                inPal = True\n                tmpPal = 2\n            elif l == s[i - 2]:\n                inPal = True\n                tmpPal = 3\n        elif inPal and l == s[max(0, i - tmpPal - 1)]:\n            tmpPal += 2\n        else:\n            inPal = False\n            tmpPal = 1\n        maxPal = max(maxPal, tmpPal)\n    return maxPal", "entry_point": "longest_palindrome ", "task_id": "TACO_lite/1643", "input_output_examples": [[[true], [false]], [["Knight!"], ["Knave! Do not trust."]]]}
{"requirement": "def first_non_consecutive(arr):\"\"\"\nYour task is to find the first element of an array that is not consecutive.\n\nBy not consecutive we mean not exactly 1 larger than the previous element of the array.\n\n```if:c\nIf a non consecutive number is found then return `true` and set the passed in pointer to the number found.\n\nIf the whole array is consecutive then return `false`.\n```\n```if-not:c\nIf the whole array is consecutive then return `null`^(2).\n```\n\nThe array will always have at least `2` elements^(1) and all elements will be numbers. The numbers will also all be unique and in ascending order. The numbers could be positive or negative and the first non-consecutive could be either too!\n\nIf you like this Kata, maybe try this one next: https://www.codewars.com/kata/represent-array-of-numbers-as-ranges\n\n```if:c\n^(1) Can you write a solution that will return `false` for both `[]` and `[ x ]` though? (This is an empty array and one with a single number and is not tested for, but you can write your own example test. )\n```\n```if-not:c\n^(1) Can you write a solution that will return `null`^(2) for both `[]` and `[ x ]` though?  (This is an empty array and one with a single number and is not tested for, but you can write your own example test. )\n\n^(2)  \nSwift, Ruby and Crystal: `nil`  \nHaskell: `Nothing`  \nPython, Rust: `None`  \nJulia: `nothing`  \nNim: `none(int)` (See [options](https://nim-lang.org/docs/options.html))\n```\n\"\"\"", "inputs": [[[1, 2, 3, 4, 6, 7, 8]], [[1, 2, 3, 4, 5, 6, 7, 8]], [[4, 6, 7, 8, 9, 11]], [[4, 5, 6, 7, 8, 9, 11]], [[31, 32]], [[-3, -2, 0, 1]], [[-5, -4, -3, -1]]], "outputs": [[6], [null], [6], [11], [null], [0], [-1]], "starter_code": "def first_non_consecutive(arr):", "canonical_solution": "def first_non_consecutive(arr):\n    if not arr:\n        return 0\n    for i, x in enumerate(arr[:-1]):\n        if x + 1 != arr[i + 1]:\n            return arr[i + 1]", "entry_point": "first_non_consecutive", "task_id": "TACO_lite/1647", "input_output_examples": [[[50]], [[0]]]}
{"requirement": "def bestnumbers(n: int, a: int, b: int, c: int, d: int) -> int:\"\"\"\nYou are given 5 integers - N,A,B,C,D.\nLet us say all the integers of length N, having only A or B in their decimal representation are good integers. Also, among all the good integers, all those integers whose sum of digits should contains either C or D or both on it, are best integers.\nFind the number of best integers of length N. Since the number of best integers can be huge, print it modulo 10^{9}+7.\n\nYour Task:\nThe task is to complete the function solve() which takes five integers N,A,B,C and D as input parameters and returns the number of best integers modulo 10^{9}+7.\nExpected Time Complexity: O(NlogN)\nExpected Space Complexity: O(N)\nConstraints:\n1 ≤ A, B, C, D ≤ 9\n1 ≤ N ≤ 10^{5}\n\"\"\"", "inputs": [[2, 1, 2, 3, 5], [1, 1, 1, 2, 3], [4, 6, 7, 5, 3]], "outputs": [[2], [0], [4]], "starter_code": "def bestnumbers(n: int, a: int, b: int, c: int, d: int) -> int:", "canonical_solution": "flag = 0\nN = 10 ** 5 + 5\nM = 10 ** 9 + 7\nfact = [0] * N\ninvfact = [0] * N\n\ndef init():\n    N = 10 ** 5 + 5\n    fact[0] = 1\n    for i in range(1, N):\n        fact[i] = i * fact[i - 1] % M\n    invfact[N - 1] = pow(fact[N - 1], M - 2, M)\n    for i in range(N - 2, -1, -1):\n        invfact[i] = (i + 1) * invfact[i + 1] % M\n\ndef ncr(n, r, p):\n    ans = fact[n] * invfact[n - r] % p * invfact[r] % p\n    return ans\n\ndef bestnumbers(n: int, a: int, b: int, c: int, d: int) -> int:\n    global flag\n    if flag == 0:\n        flag = 1\n        init()\n    ans = 0\n    if a == b:\n        Sum = n * a\n        while Sum > 0:\n            if Sum % 10 == c or Sum % 10 == d:\n                return 1\n            Sum = Sum // 10\n        return 0\n    for i in range(0, n + 1):\n        Sum = i * a + (n - i) * b\n        good = False\n        while Sum > 0:\n            if Sum % 10 == c or Sum % 10 == d:\n                good = True\n                break\n            Sum = Sum // 10\n        if good:\n            ans += ncr(n, i, M)\n            ans %= M\n    return ans", "entry_point": "bestnumbers", "task_id": "TACO_lite/1649", "input_output_examples": [[["hPrBKWDH8yc6Lt5NQZWQ"], ["ynMAisVpHEqpqHBqTrwH"], ["555"], ["wQ8Hy0y5m5oshQPeRCkG"]], [["865"], ["One more run!"], ["5"], ["805"]]]}
{"requirement": "def part_const(t, k, n):\"\"\"\nWe need a function (for commercial purposes) that may perform integer partitions with some constraints. The function should select how many elements each partition should have. The function should discard some \"forbidden\" values in each partition. So, create ```part_const()```, that receives three arguments.\n```part_const((1), (2), (3))```\n```\n(1) - The integer to be partitioned\n\n(2) - The number of elements that each partition should have\n\n(3) - The \"forbidden\" element that cannot appear in any partition\n```\n```part_const()``` should output the amount of different integer partitions with the constraints required.\n\n```part_const()``` should have a particular feature:\n\n if we introduce ```0``` as the forbidden element, we will obtain the total amount of partitions with the constrained number of elements.\n\nEnjoy it and happy coding!!\n\"\"\"", "inputs": [[10, 3, 2], [10, 3, 0], [10, 4, 1], [10, 5, 3], [15, 5, 3], [15, 5, 4], [15, 3, 3]], "outputs": [[4], [8], [2], [4], [15], [19], [13]], "starter_code": "def part_const(t, k, n):", "canonical_solution": "def p(t, k, n, l=1):\n    if t < l:\n        pass\n    elif k == 1 and t != n:\n        yield [t]\n    else:\n        yield from ([m] + s for m in range(l, t - l + 1) for s in p(t - m, k - 1, n, m) if m != n)\n\ndef part_const(t, k, n):\n    return sum((1 for _ in p(t, k, n)))", "entry_point": "part_const", "task_id": "TACO_lite/1651", "input_output_examples": [[[[1, 0, 0, 1, 0, 0]], [[1, 0, 0, 1]]], [[5], [4]]]}
{"requirement": "def getallprimefactors(n):\"\"\"\nYou have to code a function **getallprimefactors** which take an integer as parameter and return an array containing its prime decomposition by ascending factors, if a factors appears multiple time in the decomposition it should appear as many time in the array. \n\nThis decomposition may not be the most practical. \n\nYou should also write **getUniquePrimeFactorsWithCount**, a function which will return an array containing two arrays: one with prime numbers appearing in the decomposition and the other containing their respective power. \n\nYou should also write **getUniquePrimeFactorsWithProducts** an array containing the prime factors to their respective powers. \n\nErrors, if:\n\n* `n` is not a number\n* `n` not an integer \n* `n` is negative or 0 \n\nThe three functions should respectively return `[]`,  `[[],[]]` and `[]`. \n\nEdge cases: \n\n* if `n=0`, the function should respectively return `[]`, `[[],[]]` and  `[]`.\n* if `n=1`, the function should respectively return `[1]`, `[[1],[1]]`, `[1]`.\n* if `n=2`, the function should respectively return `[2]`, `[[2],[1]]`, `[2]`.\n\nThe result for `n=2` is normal. The result for `n=1` is arbitrary and has been chosen to return a useful result. The result for `n=0` is also arbitrary but can not be chosen to be both useful and intuitive.\n\"\"\"", "inputs": [[10], [100], [1000], [1000001], [0], [1], [2], ["a"], [1.1], [-1]], "outputs": [[[2, 5]], [[2, 2, 5, 5]], [[2, 2, 2, 5, 5, 5]], [[101, 9901]], [[]], [[1]], [[2]], [[]], [[]], [[]]], "starter_code": "def getallprimefactors(n):", "canonical_solution": "def getallprimefactors(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif type(n) != int:\n        return errora\n    elif n < 0:\n        return errora\n    allfacts = []\n    current = 2\n    n_copy = n\n    while current <= n:\n        if n_copy % current == 0:\n            allfacts.append(current)\n            n_copy /= current\n        else:\n            current += 1\n    return allfacts\n\ndef getUniquePrimeFactorsWithCount(n):\n    if type(n) != int:\n        return errorb\n    elif n < 0:\n        return errorb\n    primes = []\n    power = []\n    listA = getallprimefactors(n)\n    for i in range(len(listA)):\n        if listA[i] not in primes:\n            primes.append(listA[i])\n            power.append(1)\n        else:\n            power[-1] += 1\n    return [primes, power]\n\ndef getUniquePrimeFactorsWithProducts(n):\n    if type(n) != int:\n        return errorc\n    elif n < 0:\n        return errorc\n    listlist = getUniquePrimeFactorsWithCount(n)\n    listc = []\n    for i in range(len(listlist[0])):\n        listc.append(listlist[0][i] ** listlist[1][i])\n    return listc\nerrora = []\nerrorb = [[], []]\nerrorc = []", "entry_point": "getallprimefactors", "task_id": "TACO_lite/1653", "input_output_examples": [[], []]}
{"requirement": "def rthn_between(a, b):\"\"\"*This kata is inspired by [Project Euler Problem #387](https://projecteuler.net/problem=387)*\n\n---\n\nA [Harshad number](https://en.wikipedia.org/wiki/Harshad_number) (or Niven number) is a number that is divisible by the sum of its digits. A *right truncatable Harshad number* is any Harshad number that, when recursively right-truncated, results in a Harshad number at each truncation. By definition, 1-digit numbers are **not** right truncatable Harshad numbers.\n\n## Your task\n\nGiven a range of numbers (`(a, b)`, both included), return the list of right truncatable Harshad numbers in this range.\n\n```if-not:javascript\nNote: there are `500` random tests, with 0 <= `a` <= `b` <= 10^(16)\n```\n```if:javascript\nNote: there are `500` random tests, with `0 <= a <= b <= Number.MAX_SAFE_INTEGER`\n```\n\n---\n\n## My other katas\n\nIf you enjoyed this kata then please try [my other katas](https://www.codewars.com/collections/katas-created-by-anter69)! :-)\n\n#### *Translations are welcome!*\n\"\"\"", "inputs": [[0, 20], [30, 100], [90, 200], [200, 210], [1000, 2000], [2200, 2300], [9000002182976, 9000195371842]], "outputs": [[[10, 12, 18, 20]], [[30, 36, 40, 42, 45, 48, 50, 54, 60, 63, 70, 72, 80, 81, 84, 90, 100]], [[90, 100, 102, 108, 120, 126, 180, 200]], [[200, 201, 204, 207, 209, 210]], [[1000, 1002, 1008, 1020, 1026, 1080, 1088, 1200, 1204, 1206, 1260, 1800, 2000]], [[]], [[9000004000000, 9000004000008]]], "starter_code": "def rthn_between(a, b):", "canonical_solution": "def gen(n):\n    if n >= 10 ** 16:\n        return\n    for i in range(10):\n        x = 10 * n + i\n        if x % sum(map(int, str(x))):\n            continue\n        yield x\n        for y in gen(x):\n            yield y\nL = sorted((x for n in range(1, 10) for x in gen(n)))\nfrom bisect import bisect_left as bl, bisect_right as br\n\ndef rthn_between(a, b):\n    return L[bl(L, a):br(L, b)]", "entry_point": "rthn_between", "task_id": "TACO_lite/1655", "input_output_examples": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [8, 9, 4], [7, 6, 5]], [[]]], [[1, 2, 3, 6, 9, 8, 7, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9], []]]}
{"requirement": "def remove(s):\"\"\"\n## Description:\n\n Remove all exclamation marks from the end of words. Words are separated by spaces in the sentence.\n\"\"\"", "inputs": [["Hi!"], ["Hi!!!"], ["!Hi"], ["!Hi!"], ["Hi! Hi!"]], "outputs": [["Hi"], ["Hi"], ["!Hi"], ["!Hi"], ["Hi Hi"]], "starter_code": "def remove(s):", "canonical_solution": "def remove(s):\n    return ' '.join((w.rstrip('!') or w for w in s.split()))", "entry_point": "remove", "task_id": "TACO_lite/1659", "input_output_examples": [[["the-stealth-warrior"], ["The_Stealth_Warrior"]], [["theStealthWarrior"], ["TheStealthWarrior"]]]}
{"requirement": "def calculator(x, y, op):\"\"\"\nYou are required to create a simple calculator that returns the result of addition, subtraction, multiplication or division of two numbers.\n\nYour function will accept three arguments:\nThe first and second argument should be numbers.\nThe third argument should represent a sign indicating the operation to perform on these two numbers.\n```if-not:csharp\nif the variables are not numbers or the sign does not belong to the list above a message \"unknown value\" must be returned.\n```\n```if:csharp\nIf the sign is not a valid sign, throw an ArgumentException.\n```\n\nGood luck!\n\"\"\"", "inputs": [[6, 2, "+"], [4, 3, "-"], [5, 5, "*"], [5, 4, "/"], [6, "$", "+"], [6, 2, "&"], [4, 3, "\\"], ["a", 3, "+"], [6, 2, "="], [6, 2, "\t"], [":", ",", "+"]], "outputs": [[8], [1], [25], [1.25], ["unknown value"], ["unknown value"], ["unknown value"], ["unknown value"], ["unknown value"], ["unknown value"], ["unknown value"]], "starter_code": "def calculator(x, y, op):", "canonical_solution": "def calculator(x, y, op):\n    return eval(f'{x}{op}{y}') if type(x) == type(y) == int and str(op) in '+-*/' else 'unknown value'", "entry_point": "calculator", "task_id": "TACO_lite/1660", "input_output_examples": [[[[2, 3, 2], [0, 1, 0]], [[5, 1, 1], [0, 1, 0]], [[3, 3, 4], [0, 1, 0]], [[7, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0]], [[5, 3, 2, 8, 6], [0, 0, 0, 1, 1]]], [[true], [false], [false], [true], [false]]]}
{"requirement": "def uncollapse(digits):\"\"\"\n## Task\nIn this kata you'll be given a string of English digits \"collapsed\" together, like this:\n\n`zeronineoneoneeighttwoseventhreesixfourtwofive`\n\nYour task is to split the string back to digits:\n\n`zero nine one one eight two seven three six four two five`\n\"\"\"", "inputs": [["three"], ["eightsix"], ["fivefourseven"], ["ninethreesixthree"], ["foursixeighttwofive"], ["fivethreefivesixthreenineonesevenoneeight"], ["threesevensevensixninenineninefiveeighttwofiveeightsixthreeeight"], ["zeroonetwothreefourfivesixseveneightnine"]], "outputs": [["three"], ["eight six"], ["five four seven"], ["nine three six three"], ["four six eight two five"], ["five three five six three nine one seven one eight"], ["three seven seven six nine nine nine five eight two five eight six three eight"], ["zero one two three four five six seven eight nine"]], "starter_code": "def uncollapse(digits):", "canonical_solution": "import re\n\ndef uncollapse(digits):\n    return ' '.join(re.findall('zero|one|two|three|four|five|six|seven|eight|nine', digits))", "entry_point": "uncollapse", "task_id": "TACO_lite/1662", "input_output_examples": [[[[1, 12, 3, 6, 2]], [[1, -3, -5, 7, 2]]], [[1, 2, 3, 6], [-5, -3, 2, 7]]]}
{"requirement": "def micro_world(bacteria, k):\"\"\"\n# Your Task\nYou have a Petri dish with bacteria, and you are preparing to dive into the harsh micro-world. But, unfortunately, you don't have any microscope nearby, so you can't watch them.\n\nYou know that you have `n` bacteria in the Petri dish and size of the i-th bacteria is bacteriai. Also you know intergalactic positive integer constant `K`.\n\nThe i-th bacteria can swallow the j-th bacteria if and only if bacteriai > bacteriaj and bacteriai ≤ bacteriaj + K. The j-th bacteria disappear, but the i-th bacteria doesn't change its size.\n\nSince you don't have a microscope, you can only guess the minimal possible number of bacteria that will remain in your Petri dish when you finally find a microscope.\n\n___\n\n# Explanation\n\"\"\"", "inputs": [[[101, 53, 42, 102, 101, 55, 54], 1], [[20, 15, 10, 15, 20, 25], 5], [[5, 3, 1, 5], 1]], "outputs": [[3], [1], [4]], "starter_code": "def micro_world(bacteria, k):", "canonical_solution": "def micro_world(bacteria, k):\n    return sum((1 for e in bacteria if not [j for j in bacteria if e < j <= e + k]))", "entry_point": "micro_world", "task_id": "TACO_lite/1664", "input_output_examples": [[[10, 5], [2, 2]], [["19232"], ["57"]]]}
{"requirement": "def power_sumDigTerm(n):\n\t\"\"\"\nThe number 81 has a special property, a certain power of the sum of its digits is equal to 81 (nine squared). Eighty one (81), is the first number in having this property (not considering numbers of one digit). The next one, is 512.\n\nWe need to make a function, ```power_sumdigterm()```, that receives a number ```n``` and may output the ```n-th term``` of this sequence of numbers.\n\nHappy coding!\n\"\"\"", "inputs": [[1], [2], [3], [4], [5], [6], [7]], "outputs": [[81], [512], [2401], [4913], [5832], [17576], [19683]], "starter_code": "def power_sumDigTerm(n):\n\t", "canonical_solution": "series = [0]\nfor a in range(2, 99):\n    for b in range(2, 42):\n        c = a ** b\n        if a == sum(map(int, str(c))):\n            series.append(c)\npower_sumdigterm = sorted(series).__getitem__", "entry_point": "power_sumdigterm", "task_id": "TACO_lite/1666", "input_output_examples": [[[4], [5], [12], [30]], [[3], [2], [6], [8]]]}
{"requirement": "def round_it(n):\"\"\"\nFrom this lesson, we learn about JS static object: ```Math```. It mainly helps us to carry out mathematical calculations. It has a lot of properties and methods. Some of the properties and methods we rarely used. So we only learn some common methods.\n\nThe properties of the Math object are some constants, such as PI, on behalf of the approximate value of pi. The usage is ```Math.PI```. I will no longer introduce one by one, please refer to the manual:\n      \n  - [Math Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math)\n\nIn this lesson we learn three methods to turn a number into an integer: ```round()```, ```ceil()``` and ```floor()```. \n\nTheir definitions and detailed information:\n\n- [Math.round()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round)\n- [Math.ceil()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil)\n- [Math.floor()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor)\n\nFirst of all, we have to understand the first thing, all the methods of the Math object are static methods. It means that you need to use the Math method like this: ```Math.round(1.23)```. Not like this: ```(1.23).round()```.\n\nOk, lesson is over. let's us do some task.\n\n## Task\n\nCoding in function ```roundIt```. function accept 1 parameter ```n```. It's a number with a decimal point. Please use different methods based on the location of the decimal point, turn the number into an integer.\n\nIf the decimal point is on the left side of the number (that is, the count of digits on the left of the decimal point is less than that on the right), Using ```ceil()``` method.\n\nIf the decimal point is on the right side of the number (that is, the count of digits on the left of the decimal point is more than that on the right), Using ```floor()``` method.\n\nIf the decimal point is on the middle of the number (that is, the count of digits  on the left of the decimal point is equals that on the right), Using ```round()``` method.\n\n## [Series](http://github.com/myjinxin2015/Katas-list-of-Training-JS-series)\n\n( ↑↑↑ Click the link above can get my newest kata list, Please add it to your favorites)\n\n - [#1: create your first JS function helloWorld](http://www.codewars.com/kata/571ec274b1c8d4a61c0000c8)\n - [#2: Basic data types--Number](http://www.codewars.com/kata/571edd157e8954bab500032d)\n - [#3:  Basic data types--String](http://www.codewars.com/kata/571edea4b625edcb51000837)\n - [#4:  Basic data types--Array](http://www.codewars.com/kata/571effabb625ed9b06001ba8)\n - [#5:  Basic data types--Object](http://www.codewars.com/kata/571f1eb77e8954a812000837)\n - [#6:  Basic data types--Boolean and conditional statements if..else](http://www.codewars.com/kata/571f832f07363d295d00107a)\n - [#7:  if..else and ternary operator](http://www.codewars.com/kata/57202aefe8d6c514300001fd)\n - [#8: Conditional statement--switch](http://www.codewars.com/kata/572059afc2f4612825000d8a)\n - [#9: loop statement --while and do..while](http://www.codewars.com/kata/57216d4bcdd71175d6000999)\n - [#10: loop statement --for](http://www.codewars.com/kata/5721a78c283129cb51000d8e)\n - [#11: loop statement --break,continue](http://www.codewars.com/kata/5721c189cdd71194c100099b)\n - [#12: loop statement --for..in and for..of](http://www.codewars.com/kata/5722fd3ab7162a3a45000600)\n - [#13: Number object and  its properties](http://www.codewars.com/kata/5722fceaef9008adc7000603)\n - [#14: Methods of Number object--toString() and toLocaleString()](http://www.codewars.com/kata/57238ceaef90083cf4400056)\n - [#15: Methods of Number object--toFixed(), toExponential() and toPrecision()](http://www.codewars.com/kata/57256064856584bc47000611)\n - [#16: Methods of String object--slice(), substring() and substr()](http://www.codewars.com/kata/57274562c8dcebe77e001012)\n - [#17: Methods of String object--indexOf(), lastIndexOf() and search()](http://www.codewars.com/kata/57277a31e5e51450a4000010)\n - [#18: Methods of String object--concat() split() and its good friend join()](http://www.codewars.com/kata/57280481e81183cf44000ff8)\n - [#19: Methods of String object--toUpperCase() toLowerCase() and replace()](http://www.codewars.com/kata/57284d23a3af384df7000603)\n - [#20: Methods of String object--charAt() charCodeAt() and fromCharCode()](http://www.codewars.com/kata/572840e9c8dcebe77e00100c)\n - [#21: Methods of String object--trim() and the string template](http://www.codewars.com/kata/5729b103dd8bac11a9000ff8)\n - [#22: Unlock new skills--Arrow function,spread operator and deconstruction](http://www.codewars.com/kata/572ab0cfa3af383666000ff8)\n - [#23: methods of arrayObject---push(), pop(), shift() and unshift()](http://www.codewars.com/kata/572af273a3af383666000ff8)\n - [#24: methods of arrayObject---splice() and slice()](http://www.codewars.com/kata/572fdeb4380bb703fc00002c)\n - [#25: methods of arrayObject---reverse() and sort()](http://www.codewars.com/kata/572df796914b5ba27c000029)\n - [#26: methods of arrayObject---map()](http://www.codewars.com/kata/572fdeb4380bb703fc00002c)\n - [#27: methods of arrayObject---filter()](http://www.codewars.com/kata/572cb264362806af46000793)\n - [#28: methods of arrayObject---every() and some()](http://www.codewars.com/kata/57308546bd9f0987c2000d07)\n - [#29: methods of arrayObject---concat() and join()](http://www.codewars.com/kata/57308546bd9f0987c2000d07)\n - [#30: methods of arrayObject---reduce() and reduceRight()](http://www.codewars.com/kata/573156709a231dcec9000ee8)\n - [#31: methods of arrayObject---isArray() indexOf() and toString()](http://www.codewars.com/kata/5731861d05d14d6f5000101d)\n - [#32: methods of Math---round() ceil() and floor()](http://www.codewars.com/kata/5732d3c9791aafb0e4000baa)\n - [#33: methods of Math---max() min() and abs()](http://www.codewars.com/kata/5733d6c9791aafb9f8000baa)\n - [#34: methods of Math---pow() sqrt() and cbrt()](http://www.codewars.com/kata/5733f948d780e27df6000e33)\n - [#35: methods of Math---log() and its family](http://www.codewars.com/kata/5735396413c2054a68000564)\n - [#36: methods of Math---kata author's lover:random()](http://www.codewars.com/kata/5735956413c205fe390009ec)\n - [#37: Unlock new weapon---RegExp Object](http://www.codewars.com/kata/5735e3931eb83aa693000139)\n - [#38: Regular Expression--\"^\",\"$\", \".\" and test()](http://www.codewars.com/kata/573975d3ac3eec695b000971)\n - [#39: Regular Expression--\"?\", \"*\", \"+\" and \"{}\"](http://www.codewars.com/kata/573bca07dffc1aa693000139)\n - [#40: Regular Expression--\"|\", \"[]\" and \"()\"](http://www.codewars.com/kata/573d11c48b97c0ad970002d4)\n - [#41: Regular Expression--\"\\\"](http://www.codewars.com/kata/573e6831e3201f6a9b000971)\n - [#42: Regular Expression--(?:), (?=) and (?!)](http://www.codewars.com/kata/573fb9223f9793e485000453)\n\"\"\"", "inputs": [[3.45], [34.5], [34.56]], "outputs": [[4], [34], [35]], "starter_code": "def round_it(n):", "canonical_solution": "from math import ceil\n\ndef round_it(n):\n    left, right = (len(part) for part in str(n).split('.'))\n    return ceil(n) if left < right else int(n) if left > right else round(n)", "entry_point": "round_it", "task_id": "TACO_lite/1668", "input_output_examples": [[["lemonchiffon"], ["GOLD"], ["pAlEgOlDeNrOd"], ["BlueViolet"], ["#000000"], ["#b8860b"], ["#8FBC8F"], ["#C71585"]], [["PaleGreen"], ["ForestGreen"], ["LightGreen"], ["BlueViolet"], ["#000000"], ["#0bb886"], ["#8FBC8F"], ["#C71585"]]]}
{"requirement": "def coprimes(n):\"\"\"\nTwo integers are coprimes if the their only greatest common divisor is 1.\n\n## Task\nIn this kata you'll be given a number ```n >= 2``` and output a list with all positive integers less than ```gcd(n, k) == 1```, with ```k``` being any of the output numbers.\n\nThe list cannot include duplicated entries and has to be sorted.\n\"\"\"", "inputs": [[2], [3], [6], [10], [20], [25], [30]], "outputs": [[[1]], [[1, 2]], [[1, 5]], [[1, 3, 7, 9]], [[1, 3, 7, 9, 11, 13, 17, 19]], [[1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24]], [[1, 7, 11, 13, 17, 19, 23, 29]]], "starter_code": "def coprimes(n):", "canonical_solution": "def coprimes(n):\n    p, s = (n, list(range(n)))\n    for d in range(2, int(n ** 0.5) + 1):\n        if not p % d:\n            while not p % d:\n                p //= d\n            s[d::d] = ((n - d - 1) // d + 1) * [0]\n    if p > 1:\n        s[p::p] = ((n - p - 1) // p + 1) * [0]\n    return [i for i, n in enumerate(s) if n]", "entry_point": "coprimes", "task_id": "TACO_lite/1673", "input_output_examples": [[["this is my string"], ["Codewars is the best site in the world"], [""]], [["th3s 6s my str15ng"], ["C2d4w6rs 10s th15 b18st s23t25 27n th32 w35rld"], [""]]]}
{"requirement": "def goose_filter(birds):\"\"\"\nWrite a function, `gooseFilter` / `goose-filter` / `goose_filter` /` GooseFilter`, that takes an array of strings as an argument and returns a filtered array containing the same elements but with the 'geese' removed.\n\nThe geese are any strings in the following array, which is pre-populated in your solution:\n\n```python\ngeese = [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"]\n```\n\nThe elements in the returned array should be in the same order as in the initial array passed to your function, albeit with the 'geese' removed. Note that all of the strings will be in the same case as those provided, and some elements may be repeated.\n\"\"\"", "inputs": [[["Mallard", "Hook Bill", "African", "Crested", "Pilgrim", "Toulouse", "Blue Swedish"]], [["Mallard", "Barbary", "Hook Bill", "Blue Swedish", "Crested"]], [["African", "Roman Tufted", "Toulouse", "Pilgrim", "Steinbacher"]]], "outputs": [[["Mallard", "Hook Bill", "Crested", "Blue Swedish"]], [["Mallard", "Barbary", "Hook Bill", "Blue Swedish", "Crested"]], [[]]], "starter_code": "def goose_filter(birds):", "canonical_solution": "geese = {'African', 'Roman Tufted', 'Toulouse', 'Pilgrim', 'Steinbacher'}\n\ndef goose_filter(birds):\n    return [bird for bird in birds if bird not in geese]", "entry_point": "goose_filter", "task_id": "TACO_lite/1676", "input_output_examples": [[[10]], [[3.54]]]}
{"requirement": "def reversi_row(moves):\"\"\"# Introduction:\n\nReversi is a game usually played by 2 people on a 8x8 board.\nHere we're only going to consider a single 8x1 row.\n\nPlayers take turns placing pieces, which are black on one side and white on the\nother, onto the board with their colour facing up.  If one or more of the\nopponents pieces are sandwiched by the piece just played and another piece of\nthe current player's colour, the opponents pieces are flipped to the\ncurrent players colour.\n\nNote that the flipping stops when the first piece of the player's colour is reached.\n\n# Task:\n\nYour task is to take an array of moves and convert this into a string\nrepresenting the state of the board after all those moves have been played.\n\n# Input:\n\nThe input to your function will be an array of moves.\nMoves are represented by integers from 0 to 7 corresponding to the 8 squares on the board.\nBlack plays first, and black and white alternate turns.\nInput is guaranteed to be valid. (No duplicates, all moves in range, but array may be empty)\n\n# Output:\n\n8 character long string representing the final state of the board.\nUse '*' for black and 'O' for white and '.' for empty.\n\"\"\"", "inputs": [[[]], [[0]], [[0, 1]], [[0, 7, 4]], [[3]], [[3, 4]], [[3, 4, 5]], [[2, 1, 0]], [[0, 1, 4, 3, 2]], [[0, 1, 7, 2, 3]], [[3, 2, 7, 1, 0]], [[3, 4, 5, 6, 0, 2]], [[0, 1, 2, 3, 4, 5, 6, 7]], [[7, 0, 1]], [[0, 7, 6]], [[1, 0, 2, 3, 4, 5, 6, 7]], [[5, 1, 3, 4, 6]], [[1, 7, 0, 5, 6, 4]]], "outputs": [["........"], ["*......."], ["*O......"], ["*...*..O"], ["...*...."], ["...*O..."], ["...***.."], ["***....."], ["*****..."], ["****...*"], ["****...*"], ["*.OOOOO."], ["*******O"], ["O*.....*"], ["*.....*O"], ["OOOOOOOO"], [".O.*O**."], ["**..OO*O"]], "starter_code": "def reversi_row(moves):", "canonical_solution": "import re\n\ndef reversi_row(moves):\n    row = '........'\n    stones = '*O'\n    for i, m in enumerate(moves):\n        L, M, R = (row[:m], stones[i % 2], row[m + 1:])\n        if R != '' and R[0] == stones[(i + 1) % 2] and (R.find(stones[i % 2]) > 0) and ('.' not in R[:R.find(stones[i % 2])]):\n            R = R.replace(stones[(i + 1) % 2], stones[i % 2], R.find(stones[i % 2]))\n        if L != '' and L[-1] == stones[(i + 1) % 2] and (L[::-1].find(stones[i % 2]) > 0) and ('.' not in L[-1 - L[::-1].find(stones[i % 2]):]):\n            L = L[::-1].replace(stones[(i + 1) % 2], stones[i % 2], L[::-1].find(stones[i % 2]))[::-1]\n        row = L + M + R\n    return row", "entry_point": "reversi_row", "task_id": "TACO_lite/1679", "input_output_examples": [[[[1, 2, 3]], [[1, 2, 3], ["a", "b", "c"], [1, 2, 3]], [[[1, 2, 3]]]], [[1, 2, 3], [1, 2, 3, "a", "b", "c", 1, 2, 3], [[1, 2, 3]]]]}
{"requirement": "def is_mac_48_address(address):\"\"\"\n# Task\n A media access control address (MAC address) is a unique identifier assigned to network interfaces for communications on the physical network segment.\n\n The standard (IEEE 802) format for printing MAC-48 addresses in human-friendly form is six groups of two hexadecimal digits (0 to 9 or A to F), separated by hyphens (e.g. 01-23-45-67-89-AB).\n\n# Input/Output\n\n - `[input]` string `inputString`\n \n - `[output]` a boolean value\n\n    `true` if inputString corresponds to MAC-48 address naming rules, `false` otherwise.\n\"\"\"", "inputs": [["00-1B-63-84-45-E6"], ["Z1-1B-63-84-45-E6"], ["not a MAC-48 address"], ["FF-FF-FF-FF-FF-FF"], ["00-00-00-00-00-00"], ["G0-00-00-00-00-00"], ["12-34-56-78-9A-BC"], ["02-03-04-05-06-07-"], ["02-03-04-05"], ["02-03-04-FF-00-F0"]], "outputs": [[true], [false], [false], [true], [true], [false], [true], [false], [false], [true]], "starter_code": "def is_mac_48_address(address):", "canonical_solution": "import re\n\ndef is_mac_48_address(address):\n    return bool(re.match('^([0-9A-F]{2}[-]){5}([0-9A-F]{2})$', address.upper()))", "entry_point": "is_mac_48_address", "task_id": "TACO_lite/1680", "input_output_examples": [[[4], [8], [12]], [["   A   \n  A A  \n A A A \nA     A"], ["       A       \n      A A      \n     A   A     \n    A     A    \n   A A A A A   \n  A         A  \n A           A \nA             A"], ["           A           \n          A A          \n         A   A         \n        A     A        \n       A       A       \n      A         A      \n     A A A A A A A     \n    A             A    \n   A               A   \n  A                 A  \n A                   A \nA                     A"]]]}
{"requirement": "def proc_seq(*args):\"\"\"\nYou will receive an uncertain amount of integers in a certain order ```k1, k2, ..., kn```.\n\nYou form a new number of n digits in the following way:\nyou take one of the possible digits of the first given number, ```k1```, then the same with the given number ```k2```, repeating the same process up to ```kn``` and you concatenate these obtained digits(in the order that were taken) obtaining the new number. As you can see, we have many possibilities.\n\nWe need the function that may work in this way:\n\nSee this special case and deduce how the function should handle the cases which have many repetitions.\n\nThe sequence of numbers will have numbers of n digits only. Numbers formed by leading zeroes will be discarded.\n\nEnjoy it!!\n\nYou will never receive the number 0 and all the numbers will be in valid format.\n\"\"\"", "inputs": [[23, 17, 89], [22, 22, 22, 22], [230, 15, 8]], "outputs": [[[8, 218, 379, 2388]], [[1, 2222]], [[4, 218, 358, 1152]]], "starter_code": "def proc_seq(*args):", "canonical_solution": "from itertools import product\n\ndef proc_seq(*args):\n    nums = set((int(''.join(l)) for l in product(*(str(a) for a in args)) if l[0] != '0'))\n    if len(nums) == 1:\n        return [1, nums.pop()]\n    return [len(nums), min(nums), max(nums), sum(nums)]", "entry_point": "proc_seq", "task_id": "TACO_lite/1684", "input_output_examples": [[[5], [1]], [["■ □ ■ □ ■\n□ ■ □ ■ □\n■ □ ■ □ ■\n□ ■ □ ■ □\n■ □ ■ □ ■"], [false]]]}
{"requirement": "def array_change(arr):\n\t\"\"\"\n## Task\n You are given an array of integers. On each move you are allowed to increase exactly one of its element by one. Find the minimal number of moves required to obtain a strictly increasing sequence from the input.\n\n## Input/Output\n\n\n - `[input]` integer array `arr`\n\n    Constraints:\n\n    `3 ≤ inputArray.length ≤ 100,`\n\n    `-10000 ≤ inputArray[i] ≤ 10000.`\n    \n\n - `[output]` an integer\n\n    The minimal number of moves needed to obtain a strictly increasing sequence from inputArray.\n\n    It's guaranteed that for the given test cases the answer always fits signed 32-bit integer type.\n\"\"\"", "inputs": [[[1, 1, 1]], [[-1000, 0, -2, 0]], [[2, 1, 10, 1]], [[2, 3, 3, 5, 5, 5, 4, 12, 12, 10, 15]]], "outputs": [[3], [5], [12], [13]], "starter_code": "def array_change(arr):\n\t", "canonical_solution": "from functools import reduce\narray_change = lambda arr: reduce(lambda a, u: (max(a[0] + 1, u), a[1] + max(0, a[0] - u + 1)), arr, (-10001, 0))[1]", "entry_point": "array_change", "task_id": "TACO_lite/1686", "input_output_examples": [[[0], [10], [11], [18], [21], [110], [123], [24681], [20], [104], [1004], [10004], [10000], [0.1], [123.45]], [["零"], ["十"], ["十一"], ["十八"], ["二十一"], ["一百一十"], ["一百二十三"], ["二万四千六百八十一"], ["二十"], ["一百零四"], ["一千零四"], ["一万零四"], ["一万"], ["零点一"], ["一百二十三点四五"]]]}
{"requirement": "def bernoulli_number(n):\"\"\"\n## Story\n\nBefore we dive into the exercise, I would like to show you why these numbers are so important in computer programming today.\n\nIt all goes back to the time of 19th century. Where computers we know today were non-existing. The first ever **computer program** was for the Analytical Engine to compute **Bernoulli numbers**. A woman named Ada Lovelace wrote the very first program. The sad part is the engine was never fully build so her code was never tested. She also predicted the start of **AI** (artificial intelligence).\n\nComputers will be able to compose music by themselves, solve problems (not only numbers) ... So in her honor reproduce what was done back in 1842. The Bernoulli numbers are a sequence of rational numbers with deep connections to number theory. The Swiss mathematician Jakob Bernoulli and the Japanese mathematician Seki Kowa discovered the numbers around the same time at the start of the 18th Century. If you want to read more about her or Bernoulli numbers follow these links:\n\nhttps://en.wikipedia.org/wiki/Ada_Lovelace\n\nhttps://en.wikipedia.org/wiki/Bernoulli_number\n\nhttp://mathworld.wolfram.com/BernoulliNumber.html\n\n## Exercise\n\nYour job is to write a function `bernoulli_number(n)` which outputs the n-th Bernoulli number. The input will always be a non-negative integer so you do not need to worry about exceptions. How you will solve the problem is none of my business but here are some guidelines.  \nYou can make pascal triangle and then with the basic formula generate all Bernoulli numbers. Look example below.\n\nFor the sake of floating numbers, just use `Fractions` so there will be no problems with rounding.\n\n\n## Note\n\nSee \"Sample Tests\" to see the return type for each language.\n\nGood luck and happy coding! \n\nPS: be careful some numbers might exceed `1000`.\nIf this kata is too hard for you try to solve pascal triangle and something similar to this and then come back :).\n\"\"\"", "inputs": [[0], [3], [1337]], "outputs": [[1], [0], [0]], "starter_code": "def bernoulli_number(n):", "canonical_solution": "from fractions import Fraction as frac\n\ndef ber():\n    res, m = ([], 0)\n    while True:\n        res.append(frac(1, m + 1))\n        for j in range(m, 0, -1):\n            res[j - 1] = j * (res[j - 1] - res[j])\n        yield res[0]\n        m += 1\n\ndef bernoulli_number(n):\n    if n == 1:\n        return Fraction(-1, 2)\n    if n % 2 == 1:\n        return 0\n    bn2 = [ix for ix in zip(range(n + 2), ber())]\n    bn2 = [b for _, b in bn2]\n    return bn2[n]", "entry_point": "bernoulli_number", "task_id": "TACO_lite/1691", "input_output_examples": [[["red 1 yellow 2 black 3 white 4"]], [["[{name : 'red', id : '1'}, {name : 'yellow', id : '2'}, {name : 'black', id : '3'}, {name : 'white', id : '4'}]"]]]}
{"requirement": "def ghostbusters(building):\n\t\"\"\"\nOh no! Ghosts have reportedly swarmed the city. It's your job to get rid of them and save the day!\n\nIn this kata, strings represent buildings while whitespaces within those strings represent ghosts.\n\nSo what are you waiting for? Return the building(string) without any ghosts(whitespaces)!\n\nIf the building contains no ghosts, return the string:\n\"\"\"", "inputs": [["Factor y"], ["O  f fi ce"], ["BusStation"], ["Suite "], ["YourHouse"], ["H o t e l "]], "outputs": [["Factory"], ["Office"], ["You just wanted my autograph didn't you?"], ["Suite"], ["You just wanted my autograph didn't you?"], ["Hotel"]], "starter_code": "def ghostbusters(building):\n\t", "canonical_solution": "ghostbusters = lambda s: s.replace(' ', '') if ' ' in s else \"You just wanted my autograph didn't you?\"", "entry_point": "ghostbusters", "task_id": "TACO_lite/1692", "input_output_examples": [[[2, 3, 5]], [[40]]]}
{"requirement": "def combine_strings(*args):\"\"\"\nWrite a function that takes an arbitrary number of strings and interlaces them (combines them by alternating characters from each string).\n\nIf the strings are different lengths the function should interlace them until each string runs out, continuing to add characters from the remaining strings.\n\nThe function should take any number of arguments and combine them.\n\n**Note: if only one argument is passed return only that string. If no arguments are passed return an empty string.**\n\"\"\"", "inputs": [["abc"], ["abc", "123"], ["abcd", "123"], ["abc", "1234"], ["abc", "123", "$%"], ["abcd", "123", "$%"], ["abcd", "123", "$%^&"], ["abcd", "123", "$%^&", "qwertyuiop"], ["abcd", "123", "$%^&", "qwertyuiop", "X"]], "outputs": [["abc"], ["a1b2c3"], ["a1b2c3d"], ["a1b2c34"], ["a1$b2%c3"], ["a1$b2%c3d"], ["a1$b2%c3^d&"], ["a1$qb2%wc3^ed&rtyuiop"], ["a1$qXb2%wc3^ed&rtyuiop"]], "starter_code": "def combine_strings(*args):", "canonical_solution": "from itertools import zip_longest\n\ndef combine_strings(*args):\n    return ''.join((''.join(x) for x in zip_longest(*args, fillvalue='')))", "entry_point": "combine_strings", "task_id": "TACO_lite/1693", "input_output_examples": [[["21/23"], ["66", "100"], [0.6], ["0"]], [["1/2", "1/3", "1/13", "1/359", "1/644046"], ["1/2", "1/3", "1/13", "1/598", "1/897"], ["3/5"], []]]}
{"requirement": "def prime_maxlength_chain(val_max):\"\"\"\nThis kata is inspired on the problem #50 of the Project Euler. \n\nThe prime is the result of the sum of many consecutive primes.\n\nFurthermore, the prime is the prime below that has the longest chain of consecutive prime addens.\n\nThe prime with the longest chain of addens for should be found.\n\nFind the function ```prime_maxlength_chain()```(primeMaxlengthChain() javascript), that receives an argument ```val_max```, the upper limit, all the found primes should be less than ```val_max``` and outputs this found prime.\n\nIf we have more than one prime with these features, the function should output an array with the found primes sorted.\n\nRandom Tests for `val_max` (`valMax`)\n```\n100 ≤ val_max ≤ 500.000\n```\nEnjoy it!\n\"\"\"", "inputs": [[100], [200], [500], [1000]], "outputs": [[[41]], [[197]], [[499]], [[953]]], "starter_code": "def prime_maxlength_chain(val_max):", "canonical_solution": "LIMIT = 500000\nsieve = [True] * (LIMIT // 2)\nfor n in range(3, int(LIMIT ** 0.5) + 1, 2):\n    if sieve[n // 2]:\n        sieve[n * n // 2::n] = [False] * ((LIMIT - n * n - 1) // 2 // n + 1)\nPRIMES = [2] + [2 * i + 1 for i in range(1, LIMIT // 2) if sieve[i]]\n\ndef prime_maxlength_chain(val_max):\n    if val_max < 5:\n        return []\n    found = []\n    for n in range(2, 400):\n        if sum(PRIMES[:n]) >= val_max:\n            max_size = n\n            break\n    for size in range(max_size, 1, -1):\n        if size % 2 == 0:\n            n = sum(PRIMES[:size])\n            if n < val_max and n in PRIMES:\n                return [n]\n        else:\n            for start in range(1, max_size - size + 1):\n                n = sum(PRIMES[start:start + size])\n                if n < val_max and n in PRIMES:\n                    found.append(n)\n            if found:\n                return found", "entry_point": "prime_maxlength_chain", "task_id": "TACO_lite/1698", "input_output_examples": [[[0, 10], [6, 20]], [[8], [28]]]}
{"requirement": "def calc_fuel(n):\"\"\"\nJust another day in the world of Minecraft, Steve is getting ready to start his next exciting project -- building a railway system!\n\nEach iron ingot takes 11 seconds* to produce. Steve needs a lot of them, and he has the following fuel options to add into the furnace: \n\n* Buckets of lava, each lasts 800 seconds*\n* Blaze rod, each lasts 120 seconds\n* Coals, each lasts 80 seconds\n* Blocks of Wood, each lasts 15 seconds\n* Sticks, each lasts 1 second*\n\nIn Ruby: \nWrite a function `calc_fuel` that calculates the **minimum** amount of fuel needed to produce a certain number of iron ingots. This function should return a hash of the form `{:lava => Integer, :blaze_rod => Integer, :coal => Integer, :wood => Integer, :stick => Integer}`\n\nIn JavaScript:\nWrite a function `calcFuel` that calculates the **minimum** amount of fuel needed to produce a certain number of iron ingots. This function should return an object of the form `{lava: Integer, blazeRod: Integer, coal: Integer, wood: Integer, stick: Integer}`\n\nIn Python:\nWrite a function `calc_fuel` that calculates the **minimum** amount of fuel needed to produce a certain number of iron ingots. This function should return a dictionary of the form `{\"lava\": Integer, \"blaze rod\": Integer, \"coal\": Integer, \"wood\": Integer, \"stick\": Integer}`\n\n---\n*fictional values\n\nTo all the Minecraft players out there: \nfeel free to expand this series or let me know if you have any ideas related to Minecraft that can be turned into codewars puzzles. Some ideas I have that might potentially be turned into katas:\n\n* distance traveled in real world vs. in Nether\n* shortest path problems related to mining diamonds/gold/goodies that appears in different levels under ground\n* growth of animal population from breeding\n* redstone stuff?!\n\nIf you do end up expanding this series, please send me a link of your kata so I can check it out and include a link to your kata here :-)\n\n* [Minecraft Series #1: Steve wants to build a beacon pyramid](https://www.codewars.com/kata/minecraft-series-number-1-steve-wants-to-build-a-beacon-pyramid/ruby)\n* [Minecraft Series #3: Lava is amazing! ](https://www.codewars.com/kata/583a23d40cf946ec380002c2)\n* [Minecraft Series #4: Lava is amazing, however...](https://www.codewars.com/kata/583a6b0b171f3a3c3f0003e3)\n\"\"\"", "inputs": [[37], [21], [123]], "outputs": [[{"lava": 0, "blaze rod": 3, "coal": 0, "wood": 3, "stick": 2}], [{"lava": 0, "blaze rod": 1, "coal": 1, "wood": 2, "stick": 1}], [{"lava": 1, "blaze rod": 4, "coal": 0, "wood": 4, "stick": 13}]], "starter_code": "def calc_fuel(n):", "canonical_solution": "t = ((800, 'lava'), (120, 'blaze rod'), (80, 'coal'), (15, 'wood'), (1, 'stick'))\n\ndef calc_fuel(n):\n    s, r = (n * 11, {})\n    for d, e in t:\n        r[e], s = divmod(s, d)\n    return r", "entry_point": "calc_fuel", "task_id": "TACO_lite/1699", "input_output_examples": [[["*'&ABCDabcde12345"], ["Codewars@codewars123.com"]], [[4, 5, 5, 3], [[1, 18, 3, 2]]]]}
{"requirement": "def bin_str(s):\"\"\"# Task\n You are given a binary string (a string consisting of only '1' and '0'). The only operation that can be performed on it is a Flip operation. \n \n It flips any binary character ( '0' to '1' and vice versa) and all characters to the `right` of it.\n\n Your task is to find the minimum number of flips required to convert the binary string to string consisting of all '0'.\n\n# Input/Output\n\n\n - `[input]` string `s`\n\n  A binary string.\n\n \n - `[output]` an integer\n\n  The minimum number of flips required.\n\"\"\"", "inputs": [["0101"], ["10000"], ["0000000000"], ["1111111111"], ["10101010101010"], ["11111000011111"], ["000001111100000"], ["111000000000"], ["00000000111111111"], ["1010101011111111111111000000000"]], "outputs": [[3], [2], [0], [1], [14], [3], [2], [2], [1], [10]], "starter_code": "def bin_str(s):", "canonical_solution": "def bin_str(s):\n    return s.count('10') * 2 + (s[-1] == '1')", "entry_point": "bin_str", "task_id": "TACO_lite/1701", "input_output_examples": [[[" Hello there thanks for trying my Kata"], ["    Hello     World   "], [""]], [["#HelloThereThanksForTryingMyKata"], ["#HelloWorld"], [false]]]}
{"requirement": "def ex_euler(n):\"\"\"\n## Euler's Method\n\nWe want to calculate the shape of an unknown curve which starts at a given point \nwith a given slope. This curve satisfies an ordinary differential equation (ODE):\n\n```math\n\\frac{dy}{dx} = f(x, y);\\\\\ny(x_0) = y_0\n```\n\nThe starting point `$ A_0 (x_0, y_0) $` is known as well as the slope to the curve \nat `$ A_0 $` and then the tangent line at `$ A_0 $` .\n\nTake a small step along that tangent line up to a point `$ A_1 $`. Along this small step, \nthe slope does not change too much, so `$ A_1 $` will be close to the curve. \nIf we suppose that `$ A_1 $` is close enough to the curve, the same reasoning \nas for the point `$ A_1 $` above can be used for other points. \nAfter several steps, a polygonal curve `$ A_0, A_1, ..., A_n $` is computed. \nThe error between the two curves will be small if the step is small.\n\nWe define points `$ A_0, A_1, A_2, ..., A_n $`\nwhose x-coordinates are `$ x_0, x_1, ..., x_n $`\nand y-coordinates are such that `$ y_{k+1} = y_k + f(x_k, y_k) \\times h $` \nwhere `$ h $` is the common step. If `$ T $` is the length `$ x_n - x_0 $` we have `$ h = T/n $`.\n\n## Task\n\nFor this kata we will focus on the following differential equation:\n\n```math\n\\frac{dy}{dx} = 2 - e^{-4x} - 2y; \\\\\nA_0 = (0,1)\n```\nwith `$ x ∈ [0, 1] $`. We will then take a uniform partition of the region of `$ x $` between `$ 0 $` and `$ 1 $` and split it into `$ n $` + 1 sections. `$ n $` will be the input to the function `ex_euler(n)` and since `$ T $` is always 1, `$ h = 1/n $`.\n\nWe know that an exact solution is\n```math\ny = 1 + 0.5e^{-4x} - 0.5e^{-2x}.\n```\nFor each `$ x_k $` we are able to calculate the `$ y_k $` as well as the values `$ z_k $` of the exact solution.\n\nOur task is, for a given number `$ n $` of steps, to return the mean (*truncated* to 6 decimal places)\nof the relative errors between the `$ y_k $` (our aproximation) and the `$ z_k $` (the exact solution). \nFor that we can use:\n\nerror in `$ A_k = abs(y_k - z_k) / z_k $` and then the mean is sum(errors in `$ A_k $`)/ (`$ n $` + 1)\n\n### Links and graphs\n\nWiki article\n\n![alternative text](http://i.imgur.com/vjK7edl.png)\n\nBelow comparison between approximation (red curve) and exact solution(blue curve) for n=100:\n![alternative text](http://i.imgur.com/KufSkYEm.png)\n\"\"\"", "inputs": [[1], [10], [17], [50], [100], [200], [400], [800], [1000], [1200], [1500], [2000]], "outputs": [[0.5], [0.026314], [0.015193], [0.005073], [0.002524], [0.001259], [0.000628], [0.000314], [0.000251], [0.000209], [0.000167], [0.000125]], "starter_code": "def ex_euler(n):", "canonical_solution": "from math import floor, exp\n\ndef ex_euler(n):\n    F = lambda t, y: 2 - exp(-4 * t) - 2 * y\n    t0 = 0\n    y0 = 1\n    T = 1\n    h = T / float(n)\n    X = [t0]\n    Y = [y0]\n    Z = []\n    R = []\n    for k in range(0, n):\n        X.append((k + 1) * h)\n        Y.append(Y[k] + h * F(X[k], Y[k]))\n    for k in range(0, n + 1):\n        Z.append(1 + 0.5 * exp(-4 * X[k]) - 0.5 * exp(-2 * X[k]))\n        R.append(abs(Y[k] - Z[k]) / float(Z[k]))\n    return floor(sum(R) / float(n + 1) * 1000000.0) / 1000000.0", "entry_point": "ex_euler", "task_id": "TACO_lite/1702", "input_output_examples": [[["xxx xxxxx xx", "5465253289"], ["xxx xxxxx xx"], ["+555 aaaa bbbb", "18031978"], ["+555 aaaa bbbb"], ["xxxx yyyy zzzz"]], [["546 52532 89"], ["123 45678 90"], ["+555 1803 1978"], ["+555 1234 5678"], ["1234 5678 9012"]]]}
{"requirement": "def palindrome(num):\"\"\"\nA palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward. Complete the function to test if the given number (`num`) **can be rearranged** to form a numerical palindrome or not. Return a boolean (`true` if it can be rearranged to a palindrome, and `false` if it cannot). Return `\"Not valid\"` if the input is not an integer or is less than 0.\n\nFor this kata, single digit numbers are **NOT** considered numerical palindromes.\n\"\"\"", "inputs": [[5], [1212], ["ololo"], [1331], [194], [111222], ["Hello world!"], [3357665], ["357665"], [-42]], "outputs": [[false], [true], ["Not valid"], [true], [false], [false], ["Not valid"], [true], ["Not valid"], ["Not valid"]], "starter_code": "def palindrome(num):", "canonical_solution": "from collections import Counter\n\ndef palindrome(num):\n    if not isinstance(num, int) or num < 0:\n        return 'Not valid'\n    return num > 10 and sum((1 for v in Counter(map(int, str(num))).values() if v % 2)) <= 1", "entry_point": "palindrome", "task_id": "TACO_lite/1703", "input_output_examples": [[[5], [3]], [[12], [4]]]}
{"requirement": "def shape_area(n):\"\"\"\n# Task\n Below we will define what and n-interesting polygon is and your task is to find its area for a given n.\n\n A 1-interesting polygon is just a square with a side of length 1. An n-interesting polygon is obtained by taking the n - 1-interesting polygon and appending 1-interesting polygons to its rim side by side. You can see the 1-, 2- and 3-interesting polygons in the picture below.\n\n ![](https://files.gitter.im/myjinxin2015/Gwsw/blob)\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n    Constraints: `1 ≤ n < 10000.`\n    \n\n - `[output]` an integer\n\n   The area of the n-interesting polygon.\n\"\"\"", "inputs": [[2], [3], [1], [5]], "outputs": [[5], [13], [1], [41]], "starter_code": "def shape_area(n):", "canonical_solution": "def shape_area(n):\n    return n ** 2 + (n - 1) ** 2", "entry_point": "shape_area", "task_id": "TACO_lite/1708", "input_output_examples": [[[[4, 50, 8, 145]], [[4, 40, 7]], [[4, 46, 7]], [[5, 60, 299, 56]], [[5, 2, 1, 9, 50, 56]]], [[8504145], [7440], [7464], [60565299], [95655021]]]}
{"requirement": "def get_users_ids(string):\"\"\"Hey CodeWarrior,\n\nwe've got a lot to code today!\n\nI hope you know the basic string manipulation methods, because this kata will be all about them.\n\nHere we go...\n\n## Background\n\nWe've got a very long string, containing a bunch of User IDs. This string is a listing, which seperates each user ID with a comma and a whitespace (\"' \"). Sometimes there are more than only one whitespace. Keep this in mind! Futhermore, some user Ids are written only in lowercase, others are mixed lowercase and uppercase characters. Each user ID starts with the same 3 letter \"uid\". But that's not all! Some stupid student edited the string and added some hashtags (#). User IDs containing hashtags are invalid, so these hashtags should be removed!\n\n## Task\n\n1.  Remove all hashtags\n2.  Remove the leading \"uid\" from each user ID\n3.  Return an array of strings --> split the string\n4.  Each user ID should be written in only lowercase characters\n5.  Remove leading and trailing whitespaces\n\n---\n\n## Note\n\nEven if this kata can be solved by using Regex or Linq, please try to find a solution by using only C#'s string class.\n\nSome references for C#:\n\n- [Microsoft MDSN: Trim](https://msdn.microsoft.com/de-de/library/t97s7bs3%28v=vs.110%29.aspx)\n- [Microsoft MSDN: Split](https://msdn.microsoft.com/de-de/library/tabh47cf%28v=vs.110%29.aspx)\n- [Microsoft MSDN: ToLower](https://msdn.microsoft.com/en-us/library/system.string.tolower%28v=vs.110%29.aspx)\n- [Microsoft MSDN: Replace](https://msdn.microsoft.com/de-de/library/fk49wtc1%28v=vs.110%29.aspx)\n- [Microsoft MSDN: Substring](https://msdn.microsoft.com/de-de/library/aka44szs%28v=vs.110%29.aspx)\n\"\"\"", "inputs": [["uid12345"], ["   uidabc  "], ["#uidswagger"], ["uidone, uidtwo"], ["uidCAPSLOCK"], ["uid##doublehashtag"], ["  uidin name whitespace"], ["uidMultipleuid"], ["uid12 ab, uid#, uidMiXeDcHaRs"], [" uidT#e#S#t# "]], "outputs": [[["12345"]], [["abc"]], [["swagger"]], [["one", "two"]], [["capslock"]], [["doublehashtag"]], [["in name whitespace"]], [["multipleuid"]], [["12 ab", "", "mixedchars"]], [["test"]]], "starter_code": "def get_users_ids(string):", "canonical_solution": "def get_users_ids(string):\n    return [w.replace('uid', '', 1).strip() for w in string.lower().replace('#', '').split(',')]", "entry_point": "get_users_ids", "task_id": "TACO_lite/1711", "input_output_examples": [[[[2, 0, 3, 5, 0, 0, 3, 0, 0, 3, 1, 0]], [[6, 1, 1]], [[6]], [[1, 1, 3]], [[5]], [[2, 5]], [[3, 0, 2, 3]], [[4, 1, 2, 0, 1]], [[5, 0, 0, 0]], [[1, 1]]], [[true], [true], [false], [false], [false], [true], [true], [false], [true], [false]]]}
{"requirement": "def locker_run(lockers):\n\t\"\"\"\nJohnny is a boy who likes to open and close lockers. He loves it so much that one day, when school was out, he snuck in just to play with the lockers.\n\nEach locker can either be open or closed. If a locker is closed when Johnny gets to it, he opens it, and vice versa.\n\nThe lockers are numbered sequentially, starting at 1.\n\nStarting at the first locker, Johnny runs down the row, opening each locker.\n\nThen he runs all the way back to the beginning and runs down the row again, this time skipping to every other locker.\n\nThen he runs all the way back and runs through again, this time skipping two lockers for every locker he opens or closes.\n\nHe continues this until he has finished running past the last locker (i.e. when the number of lockers he skips is greater than the number of lockers he has).\n\n------\n\nThe equation could be stated as follows: \n\n> Johnny runs down the row of lockers `n` times, starting at the first locker each run and skipping `i` lockers as he runs, where `n` is the number of lockers there are in total and `i` is the current run.\n    \nThe goal of this kata is to determine which lockers are open at the end of Johnny's running. \n\nThe program accepts an integer giving the total number of lockers, and should output an array filled with the locker numbers of those which are open at the end of his run.\n\"\"\"", "inputs": [[1], [5], [10], [20]], "outputs": [[[1]], [[1, 4]], [[1, 4, 9]], [[1, 4, 9, 16]]], "starter_code": "def locker_run(lockers):\n\t", "canonical_solution": "from math import floor\nlocker_run = lambda l: [i * i for i in range(1, int(floor(l ** 0.5)) + 1)]", "entry_point": "locker_run", "task_id": "TACO_lite/1713", "input_output_examples": [[["  l   f l k djmi k", "___\\_____//_____/_"]], [[false]]]}
{"requirement": "def max_product(lst, n_largest_elements):\"\"\"\n### Introduction and Warm-up (Highly recommended)\n\n### [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n___\n\n## Task\n\n**_Given_** an *array/list [] of integers* , **_Find the product of the k maximal_** numbers.\n___\n\n### Notes \n\n* **_Array/list_** size is *at least 3* .\n\n* **_Array/list's numbers_**  *Will be* **_mixture of positives , negatives and zeros_** \n\n* **_Repetition_** of numbers in *the array/list could occur*.\n___\n\n#### [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n#### [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n#### [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n##### ALL translations are welcomed\n\n##### Enjoy Learning !!\n##### Zizou\n\"\"\"", "inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 5], [[4, 3, 5], 2], [[10, 8, 7, 9], 3], [[8, 6, 4, 6], 3], [[10, 2, 3, 8, 1, 10, 4], 5], [[13, 12, -27, -302, 25, 37, 133, 155, -1], 5], [[-4, -27, -15, -6, -1], 2], [[-17, -8, -102, -309], 2], [[10, 3, -27, -1], 3], [[14, 29, -28, 39, -16, -48], 4]], "outputs": [[0], [20], [720], [288], [9600], [247895375], [4], [136], [-30], [-253344]], "starter_code": "def max_product(lst, n_largest_elements):", "canonical_solution": "def max_product(lst, n_largest_elements):\n    lst_largest = sorted(lst)[-n_largest_elements:]\n    prod = 1\n    for number in lst_largest:\n        prod *= number\n    return prod", "entry_point": "max_product", "task_id": "TACO_lite/1714", "input_output_examples": [[["coDe"], ["CODe"], ["coDE"]], [["code"], ["CODE"], ["code"]]]}
{"requirement": "def count_odd_pentafib(n):\"\"\"\nWe have the following sequence:\n```python\nf(0) = 0\nf(1) = 1\nf(2) = 1\nf(3) = 2\nf(4) = 4;\nf(n) = f(n-1) + f(n-2) + f(n-3) + f(n-4) + f(n-5);\n```\n\nYour task is to give the number of total values for the odd terms of the sequence up to the n-th term (included). (The number n (of n-th term) will be given as a positive integer)\n\nThe values 1 (one) is the only that is duplicated in the sequence and should be counted only once.\n\nGood luck !!\n\n(Your code should be fast. Many moderate high values will be waiting to test it.)\n\"\"\"", "inputs": [[0], [1], [2]], "outputs": [[0], [1], [1]], "starter_code": "def count_odd_pentafib(n):", "canonical_solution": "def count_odd_pentafib(n):\n    return 2 * (n // 6) + [0, 1, 2, 2, 2, 2][n % 6] - (n >= 2)", "entry_point": "count_odd_pentafib", "task_id": "TACO_lite/1715", "input_output_examples": [[[[15, 10, 9, 5], [1, 5, 3, 4], 8]], [[29]]]}
{"requirement": "def chess_bishop_dream(b, p, d, k):\"\"\"\nIn ChessLand there is a small but proud chess bishop with a recurring dream. \n \n In the dream the bishop finds itself on an `n × m` chessboard with mirrors along each edge, and it is not a bishop but a ray of light. This ray of light moves only along diagonals (the bishop can't imagine any other types of moves even in its dreams), it never stops, and once it reaches an edge or a corner of the chessboard it reflects from it and moves on.\n\n Given the initial position and the direction of the ray, find its position after `k` steps where a step means either moving from one cell to the neighboring one or reflecting from a corner of the board.\n\n# Input/Output\n\n\n - `[input]` integer array `boardSize`\n\n    An array of two integers, the number of `rows` and `columns`, respectively. Rows are numbered by integers from `0 to boardSize[0] - 1`, columns are numbered by integers from `0 to boardSize[1] - 1` (both inclusive).\n\n    Constraints: `1 ≤ boardSize[i] ≤ 20.`\n\n\n - `[input]` integer array `initPosition`\n\n    An array of two integers, indices of the `row` and the `column` where the bishop initially stands, respectively.\n\n    Constraints:  `0 ≤ initPosition[i] < boardSize[i]`.\n\n\n - `[input]` integer array `initDirection`\n\n    An array of two integers representing the initial direction of the bishop. \n    \n    If it stands in `(a, b)`, the next cell he'll move to is `(a + initDirection[0], b + initDirection[1])` or whichever it'll reflect to in case it runs into a mirror immediately.\n\n    Constraints: `initDirection[i] ∈ {-1, 1}`.\n\n\n - `[input]` integer `k`\n\n    Constraints: `1 ≤ k ≤ 1000000000`.\n\n\n - `[output]` an integer array\n\n    The position of the bishop after `k` steps.\n\"\"\"", "inputs": [[[3, 7], [1, 2], [-1, 1], 13], [[1, 2], [0, 0], [1, 1], 6], [[2, 2], [1, 0], [1, 1], 12], [[1, 1], [0, 0], [1, -1], 1000000000], [[2, 3], [1, 2], [-1, -1], 41], [[17, 19], [14, 8], [1, -1], 239239], [[17, 19], [16, 18], [1, 1], 239239239]], "outputs": [[[0, 1]], [[0, 1]], [[1, 0]], [[0, 0]], [[0, 2]], [[4, 17]], [[10, 2]]], "starter_code": "def chess_bishop_dream(b, p, d, k):", "canonical_solution": "def chess_bishop_dream(b, p, d, k):\n    yq, yr = divmod(p[0] + k * d[0], 2 * b[0])\n    xq, xr = divmod(p[1] + k * d[1], 2 * b[1])\n    return [min(yr, 2 * b[0] - yr - 1), min(xr, 2 * b[1] - xr - 1)]", "entry_point": "chess_bishop_dream", "task_id": "TACO_lite/1716", "input_output_examples": [[[25, 87]], [[4]]]}
{"requirement": "def reverse_on_diagonals(matrix):\"\"\"\n# Task\n\nGiven a square `matrix`, your task is to reverse the order of elements on both of its longest diagonals.\n\nThe longest diagonals of a square matrix are defined as follows:\n* the first longest diagonal goes from the top left corner to the bottom right one;\n* the second longest diagonal goes from the top right corner to the bottom left one.\n\n\n# Input/Output\n\n\n- `[input]` 2D integer array `matrix`\n\n   Constraints: `1 ≤ matrix.length ≤ 10, matrix.length = matrix[i].length, 1 ≤ matrix[i][j] ≤ 1000`\n\n\n- `[output]` 2D integer array\n\n   Matrix with the order of elements on its longest diagonals reversed.\n\"\"\"", "inputs": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[239]]], [[[1, 10], [100, 1000]]], [[[43, 455, 32, 103], [102, 988, 298, 981], [309, 21, 53, 64], [2, 22, 35, 291]]]], "outputs": [[[[9, 2, 7], [4, 5, 6], [3, 8, 1]]], [[[239]]], [[[1000, 100], [10, 1]]], [[[291, 455, 32, 2], [102, 53, 21, 981], [309, 298, 988, 64], [103, 22, 35, 43]]]], "starter_code": "def reverse_on_diagonals(matrix):", "canonical_solution": "def reverse_on_diagonals(matrix):\n    copy = [line[:] for line in matrix]\n    for i in range(len(matrix)):\n        copy[i][i] = matrix[-1 - i][-1 - i]\n        copy[i][-1 - i] = matrix[-1 - i][i]\n    return copy", "entry_point": "reverse_on_diagonals", "task_id": "TACO_lite/1719", "input_output_examples": [[["01:00 pm"], ["12:02 pm"], ["12:30 pm"]], [[true, false, false], [false, true, false], [false, false, true]]]}
{"requirement": "def array_equalization(a, k):\"\"\"# Task\n\nYou are given an array `a` of positive integers a. You may choose some integer `X` and update `a` several times, where to update means to perform the following operations:\n```\npick a contiguous subarray of length not greater than the given k;\nreplace all elements in the picked subarray with the chosen X.\n```\nWhat is the minimum number of updates required to make all the elements of the array the same?\n\n# Input/Output\n\n\n - `[input]` integer array `a`\n\n  An array of positive integers.\n\n  Constraints:\n  \n  `10 ≤ a.length ≤ 50,`\n  \n  `1 ≤ a[i] ≤ 10.`\n  \n\n - `[input]` integer `k`\n\n  A positive integer, the maximum length of a subarray.\n\n  Constraints: `2 ≤ k ≤ 9.`\n\n\n - `[output]` an integer\n\n  The minimum number of updates.\n\"\"\"", "inputs": [[[1, 2, 2, 1, 2, 1, 2, 2, 2, 1, 1, 1], 2], [[5, 2, 3, 5, 2, 2, 3, 5, 1, 2, 5, 1, 2, 5, 3], 7], [[1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1], 9]], "outputs": [[4], [2], [1]], "starter_code": "def array_equalization(a, k):", "canonical_solution": "def array_equalization(a, k):\n    totals, ends = ({}, {})\n    for i, n in enumerate(a):\n        if n not in ends:\n            totals[n], ends[n] = (0, -1)\n        if i < ends[n]:\n            continue\n        count = (i - ends[n] - 1 + k - 1) // k\n        totals[n] += count\n        ends[n] = max(i, ends[n] + count * k)\n    return min((t + (len(a) - ends[n] - 1 + k - 1) // k for n, t in totals.items() if ends[n] < len(a)))", "entry_point": "array_equalization", "task_id": "TACO_lite/1724", "input_output_examples": [[[[1, 1, 2, 3]]], [[1]]]}
{"requirement": "def squares_needed(grains):\n\t\"\"\"\nI assume most of you are familiar with the ancient legend of the rice (but I see wikipedia suggests [wheat](https://en.wikipedia.org/wiki/Wheat_and_chessboard_problem), for some reason) problem, but a quick recap for you: a young man asks as a compensation only `1` grain of rice for the first square, `2` grains for the second, `4` for the third, `8` for the fourth and so on, always doubling the previous.\n\nYour task is pretty straightforward (but not necessarily easy): given an amount of grains, you need to return up to which square of the chessboard one should count in order to get at least as many.\n\nInput is always going to be valid/reasonable: ie: a non negative number; extra cookie for *not* using a loop to compute square-by-square (at least not directly) and instead trying a smarter approach [hint: some peculiar operator]; a trick converting the number might also work: impress me!\n\"\"\"", "inputs": [[0], [1], [2], [3], [4]], "outputs": [[0], [1], [2], [2], [3]], "starter_code": "def squares_needed(grains):\n\t", "canonical_solution": "squares_needed = int.bit_length", "entry_point": "squares_needed", "task_id": "TACO_lite/1725", "input_output_examples": [[["Ita dotf ni dyca nsaw ecc."]], [["One ring to rule them all."]]]}
{"requirement": "def elections_winners(votes, k):\"\"\"\n# Task\n\nElections are in progress!\n\nGiven an array of numbers representing votes given to each of the candidates, and an integer which is equal to the number of voters who haven't cast their vote yet, find the number of candidates who still have a chance to win the election.\n\nThe winner of the election must secure strictly more votes than any other candidate. If two or more candidates receive the same (maximum) number of votes, assume there is no winner at all.\n\n**Note**: big arrays will be tested.\n\"\"\"", "inputs": [[[2, 3, 5, 2], 3], [[1, 3, 3, 1, 1], 0], [[5, 1, 3, 4, 1], 0], [[1, 1, 1, 1], 1], [[1, 1, 1, 1], 0], [[3, 1, 1, 3, 1], 2]], "outputs": [[2], [0], [1], [4], [0], [2]], "starter_code": "def elections_winners(votes, k):", "canonical_solution": "def elections_winners(votes, k):\n    m = max(votes)\n    return sum((x + k > m for x in votes)) or votes.count(m) == 1", "entry_point": "elections_winners", "task_id": "TACO_lite/1726", "input_output_examples": [[["the sky is blue"], ["  hello world  "], ["a good   example"], ["  Bob    Loves  Alice   "], ["Alice does not even like bob"]], [["blue is sky the"], ["world hello"], ["example good a"], ["Alice Loves Bob"], ["bob like even not does Alice"]]]}
{"requirement": "def wheat_from_chaff(values):\"\"\"\n# Scenario \n\nWith **_Cereal crops_** like wheat or rice, before we can eat the grain kernel, we need to remove that inedible hull, or *to separate the wheat from the chaff*.\n___\n\n# Task\n\n**_Given_** a *sequence of n integers* , **_separate_** *the negative numbers (chaff) from positive ones (wheat).* \n___\n\n# Notes\n\n* **_Sequence size_** is _at least_ **_3_**\n* **_Return_** *a new sequence*, such that  **_negative numbers (chaff) come first, then positive ones (wheat)_**.\n* In Java , *you're not allowed to modify the input Array/list/Vector*\n* **_Have no fear_** , *it is guaranteed that there will be no zeroes* . \n* **_Repetition_** of numbers in *the input sequence could occur* , so **_duplications are included when separating_**.\n* If a misplaced *positive* number is found in the front part of the sequence, replace it with the last misplaced negative number (the one found near the end of the input). The second misplaced positive number should be swapped with the second last misplaced negative number. *Negative numbers found at the head (begining) of the sequence* , **_should be kept in place_** .\n\n____\n\n# Tune Your Code , There are 250 Assertions , 100.000 element For Each .\n\n# Only O(N) Complexity Solutions Will pass . \n____\n\"\"\"", "inputs": [[[-6, -4, 6, 2]], [[-10, -3, 7]], [[-2, -8, 1, 7]], [[-7, -6, 10, 8, 9]], [[-3, -6, -10, 2, 4]], [[-2, -6, -4, -8, 1, 2]], [[-2, -37, -48, -47, 25, 41, 16]], [[-30, -11, -50, -5, 34, 38, 36]], [[-31, -5, -28, -42, -22, -46, -4, 11]], [[-32, -17, -45, -2, -5, -6, 39, 46, 17]], [[-9, -8, -6, -46, -19, 1, 44]], [[-37, -10, -42, -45, -31, -40, 19, 33]], [[-25, -48, -29, -25, -46, -19, -32, 49, 1, 1]], [[-7, -35, -46, -22, -26, -5, -44, -14, 34, 43, 46]], [[-46, -50, -28, -45, -27, -40, -24, -46, 34, 47, 35, 10]], [[-33, -14, -19, -45, -12, -21, -10, -3, 41, 4, 31, 41, 16]], [[-17, -45, -12, -29, -24, -8, -19, 4, 40, 31, 10, 21, 7, 1]], [[-16, -27, -7, -31, -34, -43, -44, -18, -24, -46, 39, 50, 3, 9, 44]]], "outputs": [[[-6, -4, 6, 2]], [[-10, -3, 7]], [[-2, -8, 1, 7]], [[-7, -6, 10, 8, 9]], [[-3, -6, -10, 2, 4]], [[-2, -6, -4, -8, 1, 2]], [[-2, -37, -48, -47, 25, 41, 16]], [[-30, -11, -50, -5, 34, 38, 36]], [[-31, -5, -28, -42, -22, -46, -4, 11]], [[-32, -17, -45, -2, -5, -6, 39, 46, 17]], [[-9, -8, -6, -46, -19, 1, 44]], [[-37, -10, -42, -45, -31, -40, 19, 33]], [[-25, -48, -29, -25, -46, -19, -32, 49, 1, 1]], [[-7, -35, -46, -22, -26, -5, -44, -14, 34, 43, 46]], [[-46, -50, -28, -45, -27, -40, -24, -46, 34, 47, 35, 10]], [[-33, -14, -19, -45, -12, -21, -10, -3, 41, 4, 31, 41, 16]], [[-17, -45, -12, -29, -24, -8, -19, 4, 40, 31, 10, 21, 7, 1]], [[-16, -27, -7, -31, -34, -43, -44, -18, -24, -46, 39, 50, 3, 9, 44]]], "starter_code": "def wheat_from_chaff(values):", "canonical_solution": "def wheat_from_chaff(values):\n    i, j = (0, len(values) - 1)\n    while True:\n        while i < j and values[i] < 0:\n            i += 1\n        while i < j and values[j] > 0:\n            j -= 1\n        if i >= j:\n            return values\n        values[i], values[j] = (values[j], values[i])", "entry_point": "wheat_from_chaff", "task_id": "TACO_lite/1735", "input_output_examples": [[[3.2, "+", 8]], [[11.2]]]}
{"requirement": "def solve(n):\"\"\"\nConsider a sequence generation that follows the following steps. We will store removed values in variable `res`. \n\nNote that when we remove every n-indexed number, we must remember that indices start at 0. So for every 3-indexed number above:\n[3,5,7,9,11,13,15,17,19,21,23], we remove index0=3, index3= 9, index6=15,index9=21, etc.\n\nNote also that if the length of sequence is greater than x, where x is the first element of the sequence, you should continue the remove step: remove x, and every x-indexed number until the length of sequence is shorter than x. In our example above, we stopped at 7 because the the length of the remaining sequence [7,11,13,17,23,25] is shorter than 7.\n```\nYou will be given a number `n` and your task will be to return the sum of the elements in res, where the maximum element in res is `<= n`. \n```\n\nGood luck!\n\"\"\"", "inputs": [[7], [25], [50], [100], [1000], [10000]], "outputs": [[18], [107], [304], [993], [63589], [4721110]], "starter_code": "def solve(n):", "canonical_solution": "def solve(n):\n    zoznam = [int(i) for i in range(2, n + 1)]\n    res = [1]\n    while zoznam != []:\n        res.append(zoznam[0])\n        del zoznam[0::zoznam[0]]\n    return sum(res)", "entry_point": "solve", "task_id": "TACO_lite/1738", "input_output_examples": [[["hello"]], [[true]]]}
{"requirement": "def distance(n):\"\"\"\nGiven a number, return the Manhattan distance considering the core of the spiral (the `1` cell) as 0 and counting each step up, right, down or left to reach a given cell.\n\nJust be ready for larger numbers, as usual always positive.\n\n*[Dedicated to [swiftest learner I met in a long while](https://www.codewars.com/users/irbekrm/)]*\n\"\"\"", "inputs": [[1], [5], [25], [30], [96], [50], [66], [306], [307], [308]], "outputs": [[0], [2], [4], [5], [5], [7], [7], [17], [18], [17]], "starter_code": "def distance(n):", "canonical_solution": "def distance(n):\n    if n == 1:\n        return 0\n    r = 0 - (1 - n ** 0.5) // 2\n    d, m = divmod(n - (2 * r - 1) ** 2 - 1, 2 * r)\n    z = (r * (1 + 1j) - m - 1) * 1j ** d\n    return abs(z.real) + abs(z.imag)", "entry_point": "distance", "task_id": "TACO_lite/1744", "input_output_examples": [[["Hello World"], ["I am your father"], ["I do not know what else I can test. Be cool. Good luck"]], [["H3110 W0r1d"], ["1 4m y0ur f47h3r"], ["1 d0 n07 kn0w wh47 3153 1 c4n 7357. 83 c001. 600d 1uck"]]]}
{"requirement": "def crossing_sum(matrix, row, col):\"\"\"# Task\n Given a rectangular `matrix` and integers `a` and `b`, consider the union of the ath row and the bth (both 0-based) column of the `matrix`. Return sum of all elements of that union.\n\n# Input/Output\n\n\n - `[input]` 2D integer array `matrix`\n\n    2-dimensional array of integers representing a rectangular matrix.\n\n    Constraints: `1 ≤ matrix.length ≤ 5, 1 ≤ matrix[0].length ≤ 5, 1 ≤ matrix[i][j] ≤ 100.`\n    \n\n - `[input]` integer `a`\n\n  A non-negative integer less than the number of matrix rows.\n\n   Constraints: `0 ≤ a < matrix.length.`\n   \n   \n - `[input]` integer `b`\n\n   A non-negative integer less than the number of matrix columns.\n\n   Constraints: `0 ≤ b < matrix[i].length. `\n\n\n - `[output]` an integer\n\"\"\"", "inputs": [[[[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]], 1, 3], [[[1, 1], [3, 3], [1, 1], [2, 2]], 3, 0], [[[100]], 0, 0], [[[1, 2, 3, 4, 5]], 0, 0], [[[1], [2], [3], [4], [5]], 0, 0]], "outputs": [[12], [9], [100], [15], [15]], "starter_code": "def crossing_sum(matrix, row, col):", "canonical_solution": "def crossing_sum(matrix, row, col):\n    return sum(matrix[row]) + sum((line[col] for line in matrix)) - matrix[row][col]", "entry_point": "crossing_sum", "task_id": "TACO_lite/1748", "input_output_examples": [[["Hello World!"]], [["HEllO WOrld!"]]]}
{"requirement": "def prime_bef_aft(num):\"\"\"\nWe need a function ```prime_bef_aft()``` that gives the largest prime below a certain given value ```n```, \n\n```befPrime or bef_prime``` (depending on the language), \n\nand the smallest prime larger than this value, \n\n```aftPrime/aft_prime``` (depending on the language).\n\nThe result should be output in a list like the following:\n\n```python\nprime_bef_aft(n) == [befPrime, aftPrime]\n```\n\nIf n is a prime number it will give two primes, n will not be included in the result.\n\nRange for the random tests: \n```1000 <= n <= 200000```\n\n(The extreme and special case n = 2 will not be considered for the tests. Thanks Blind4Basics)\n\nHappy coding!!\n\"\"\"", "inputs": [[3], [4], [100], [97], [101], [120], [130]], "outputs": [[[2, 5]], [[3, 5]], [[97, 101]], [[89, 101]], [[97, 103]], [[113, 127]], [[127, 131]]], "starter_code": "def prime_bef_aft(num):", "canonical_solution": "def prime(a):\n    if a < 2:\n        return False\n    if a == 2 or a == 3:\n        return True\n    if a % 2 == 0 or a % 3 == 0:\n        return False\n    maxDivisor = a ** 0.5\n    d, i = (5, 2)\n    while d <= maxDivisor:\n        if a % d == 0:\n            return False\n        d += i\n        i = 6 - i\n    return True\n\ndef prime_bef_aft(num):\n    res = []\n    for n in range(num - 1, 1, -1):\n        if prime(n):\n            res.append(n)\n            break\n    for n in range(num + 1, 3 * num, 1):\n        if prime(n):\n            res.append(n)\n            break\n    return res", "entry_point": "prime_bef_aft", "task_id": "TACO_lite/1751", "input_output_examples": [[[[0, 0, 0, 0]], [[0, 0, 0, 1]], [[0, 0, 1, 1]], [[0, 0, 1, 0]], [[0, 1, 1, 0]], [[0, 1, 1, 1]], [[0, 1, 0, 1]], [[0, 1, 0, 0]], [[1, 1, 0, 0]], [[1, 0, 1]]], [[[0, 0, 0, 0]], [[0, 0, 0, 1]], [[0, 0, 1, 0]], [[0, 0, 1, 1]], [[0, 1, 0, 1]], [[0, 1, 0, 0]], [[0, 1, 1, 1]], [[0, 1, 1, 0]], [[1, 0, 1, 0]], [[1, 1, 1]]]]}
{"requirement": "def move(position, roll):\"\"\"\n## Terminal game move function\n\nIn this game, the hero moves from left to right. The player rolls the dice and moves the number of spaces indicated by the dice **two times**.\n\n~~~if-not:sql\nCreate a function for the terminal game that takes the current position of the hero and the roll (1-6) and return the new position.\n~~~\n~~~if:sql\nIn SQL, you will be given a table `moves` with columns `position` and `roll`. Return a table which uses the current position of the hero and the roll (1-6) and returns the new position in a column `res`.\n~~~\n\n```if:bf\n### BF:\n\nSince this is an 8kyu kata, you are provided a modified runBF function, numericRunBF, that automatically parses input and output for your ease.\n\nSee the sample test cases to see what I mean: You can simply input two numbers and get a number as output (unless you're doing something wrong), so it should be convenient for you to modify the tests as you wish.\n\nOh, and you won't have to worry about overflow, the correct answer will never be higher than 255. :)\n```\n\"\"\"", "inputs": [[0, 4], [3, 6], [2, 5]], "outputs": [[8], [15], [12]], "starter_code": "def move(position, roll):", "canonical_solution": "def move(position, roll):\n    return position + 2 * roll", "entry_point": "move", "task_id": "TACO_lite/1753", "input_output_examples": [[[0]], [[1]]]}
{"requirement": "def add_check_digit(number):\"\"\"\n## Check Digits\n\nSome numbers are more important to get right during data entry than others: a common example is product codes.\n\nTo reduce the possibility of mistakes, product codes can be crafted in such a way that simple errors are detected. This is done by calculating a single-digit value based on the product number, and then appending that digit to the product number to arrive at the product code.\n\nWhen the product code is checked, the check digit value is stripped off and recalculated. If the supplied value does not match the recalculated value, the product code is rejected.\n\nA simple scheme for generating self-check digits, described here, is called Modulus 11 Self-Check.\n\n## Calculation method\n\nEach digit in the product number is assigned a multiplication factor. The factors are assigned ***from right to left***, starting at `2` and counting up. For numbers longer than six digits, the factors restart at `2` after `7` is reached. The product of each digit and its factor is calculated, and the products summed.\n\nThen the sum of the products is divided by the prime number `11`. The remainder is inspected, and:\n\n* if the remainder is `0`, the check digit is also `0`\n* if the remainder is `1`, the check digit is replaced by an uppercase `X`\n* for all others, the remainder is subtracted from `11`\n\nThe result is the **check digit**.\n\n## Your task\n\nYour task is to implement this algorithm and return the input number with the correct check digit appended.\n\"\"\"", "inputs": [["036532"], ["12388878"], ["111111111"], ["9735597355"], ["2356"], ["6789"]], "outputs": [["0365327"], ["123888782"], ["1111111118"], ["97355973550"], ["23566"], ["6789X"]], "starter_code": "def add_check_digit(number):", "canonical_solution": "from itertools import cycle\n\ndef add_check_digit(number):\n    fact = cycle([2, 3, 4, 5, 6, 7])\n    r = sum((int(c) * next(fact) for c in number[::-1])) % 11\n    return number + ('0' if not r else 'X' if r == 1 else str(11 - r))", "entry_point": "add_check_digit", "task_id": "TACO_lite/1756", "input_output_examples": [[[["John", "Smith"], "Phoenix", "Arizona"]], [["Hello, John Smith! Welcome to Phoenix, Arizona!"]]]}
{"requirement": "def scrabble_score(st):\"\"\"\nWrite a program that, given a word, computes the scrabble score for that word.\n\n## Letter Values\n\nYou'll need these:\n\n```\nLetter                           Value\nA, E, I, O, U, L, N, R, S, T       1\nD, G                               2\nB, C, M, P                         3\nF, H, V, W, Y                      4\nK                                  5\nJ, X                               8\nQ, Z                               10\n```\n\n```if:ruby,javascript,cfml\nThere will be a preloaded hashtable `$dict` with all these values: `$dict[\"E\"] == 1`. \n```\n```if:haskell\nThere will be a preloaded list of `(Char, Int)` tuples called `dict` with all these values.\n```\n```if:python\nThere will be a preloaded dictionary `dict_scores` with all these values: `dict_scores[\"E\"] == 1`\n```\n\nEmpty string should return `0`. The string can contain spaces and letters (upper and lower case), you should calculate the scrabble score only of the letters in that string.\n\"\"\"", "inputs": [[""], ["a"], ["street"], ["STREET"], [" a"], ["st re et"], ["f"], ["quirky"], ["MULTIBILLIONAIRE"], ["alacrity"]], "outputs": [[0], [1], [6], [6], [1], [6], [4], [22], [20], [13]], "starter_code": "def scrabble_score(st):", "canonical_solution": "def scrabble_score(st):\n    x = 0\n    for y in st:\n        if 'a' in y.lower():\n            x += 1\n        if 'e' in y.lower():\n            x += 1\n        if 'i' in y.lower():\n            x += 1\n        if 'o' in y.lower():\n            x += 1\n        if 'u' in y.lower():\n            x += 1\n        if 'l' in y.lower():\n            x += 1\n        if 'n' in y.lower():\n            x += 1\n        if 'r' in y.lower():\n            x += 1\n        if 's' in y.lower():\n            x += 1\n        if 't' in y.lower():\n            x += 1\n        if 'd' in y.lower():\n            x += 2\n        if 'g' in y.lower():\n            x += 2\n        if 'b' in y.lower():\n            x += 3\n        if 'c' in y.lower():\n            x += 3\n        if 'm' in y.lower():\n            x += 3\n        if 'p' in y.lower():\n            x += 3\n        if 'f' in y.lower():\n            x += 4\n        if 'h' in y.lower():\n            x += 4\n        if 'v' in y.lower():\n            x += 4\n        if 'w' in y.lower():\n            x += 4\n        if 'y' in y.lower():\n            x += 4\n        if 'k' in y.lower():\n            x += 5\n        if 'j' in y.lower():\n            x += 8\n        if 'x' in y.lower():\n            x += 8\n        if 'q' in y.lower():\n            x += 10\n        if 'z' in y.lower():\n            x += 10\n    return x", "entry_point": "scrabble_score", "task_id": "TACO_lite/1761", "input_output_examples": [[[[1, 2, 7], 3]], [[16]]]}
{"requirement": "def even_digit_squares(a, b):\"\"\"\nThe integer is the first integer that has all of its digits even and furthermore, is a perfect square.\n\nGive the numbers of this sequence that are in the range ```[a,b] ```(both values inclusive)\n\nFeatures of the random tests for ```even_digit_squares(a, b)```\n```\nnumber of Tests = 167\nmaximum value for a = 1e10\nmaximum value for b = 1e12\n```\nYou do not have to check the entries, ```a``` and ```b``` always positive integers and ```a < b``` \n\nHappy coding!!\n\"\"\"", "inputs": [[100, 1000], [1000, 4000], [10000, 40000]], "outputs": [[[400, 484]], [[]], [[26244, 28224, 40000]]], "starter_code": "def even_digit_squares(a, b):", "canonical_solution": "def is_even(x):\n    return all((int(i) % 2 == 0 for i in str(x)))\n\ndef even_digit_squares(a, b):\n    first = int(a ** (1 / 2)) + 1\n    last = int(b ** (1 / 2)) + 1\n    return sorted([x * x for x in range(first, last) if is_even(x * x)])", "entry_point": "even_digit_squares", "task_id": "TACO_lite/1763", "input_output_examples": [[[2, 10, 20], [3, 9, 18]], [[7.1429], [6.75]]]}
{"requirement": "def find_the_key(message, code):\"\"\"# Introduction \n\nDigital Cypher assigns a unique number to each letter of the alphabet:\n\n```\n a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y  z\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n```\n\nIn the encrypted word we write the corresponding numbers instead of the letters. Then we add to each number a digit from the key (repeated if necessary).\n\n# Task\n\nWrite a function that accepts a `message` string  and an array of integers `code`. As the result, return the `key` that was used to encrypt the `message`. The `key` has to be shortest of all possible keys that can be used to code the `message`: i.e. when the possible keys are `12` , `1212`, `121212`, your solution should return `12`.\n\n#### Input / Output:\n\n* The `message` is a string containing only lowercase letters.\n* The `code` is an array of positive integers.\n* The `key` output is a positive integer.\n\n# Digital cypher series\n- [Digital cypher vol 1](https://www.codewars.com/kata/592e830e043b99888600002d)\n- [Digital cypher vol 2](https://www.codewars.com/kata/592edfda5be407b9640000b2)\n- [Digital cypher vol 3 - missing key](https://www.codewars.com/kata/5930d8a4b8c2d9e11500002a)\n\"\"\"", "inputs": [["scout", [20, 12, 18, 30, 21]], ["masterpiece", [14, 10, 22, 29, 6, 27, 19, 18, 6, 12, 8]], ["nomoretears", [15, 17, 14, 17, 19, 7, 21, 7, 2, 20, 20]], ["notencrypted", [14, 15, 20, 5, 14, 3, 18, 25, 16, 20, 5, 4]], ["tenthousand", [21, 5, 14, 20, 8, 16, 21, 19, 1, 14, 5]], ["oneohone", [16, 14, 6, 16, 8, 16, 15, 5]]], "outputs": [[1939], [1939], [12], [0], [10000], [101]], "starter_code": "def find_the_key(message, code):", "canonical_solution": "def find_the_key(message, code):\n    diffs = ''.join((str(c - ord(m) + 96) for c, m in zip(code, message)))\n    for size in range(1, len(code) + 1):\n        key = diffs[:size]\n        if (key * len(code))[:len(code)] == diffs:\n            return int(key)", "entry_point": "find_the_key", "task_id": "TACO_lite/1768", "input_output_examples": [[[5], [10], [15], [20], [0], [-1]], [["    1    \n   121   \n  12321  \n 1234321 \n123454321"], ["         1         \n        121        \n       12321       \n      1234321      \n     123454321     \n    12345654321    \n   1234567654321   \n  123456787654321  \n 12345678987654321 \n1234567890987654321"], ["              1              \n             121             \n            12321            \n           1234321           \n          123454321          \n         12345654321         \n        1234567654321        \n       123456787654321       \n      12345678987654321      \n     1234567890987654321     \n    123456789010987654321    \n   12345678901210987654321   \n  1234567890123210987654321  \n 123456789012343210987654321 \n12345678901234543210987654321"], ["                   1                   \n                  121                  \n                 12321                 \n                1234321                \n               123454321               \n              12345654321              \n             1234567654321             \n            123456787654321            \n           12345678987654321           \n          1234567890987654321          \n         123456789010987654321         \n        12345678901210987654321        \n       1234567890123210987654321       \n      123456789012343210987654321      \n     12345678901234543210987654321     \n    1234567890123456543210987654321    \n   123456789012345676543210987654321   \n  12345678901234567876543210987654321  \n 1234567890123456789876543210987654321 \n123456789012345678909876543210987654321"], [""], [""]]]}
{"requirement": "def pattern(n):\"\"\"\n###Task:\n\nYou have to write a function `pattern` which creates the following pattern (see examples) up to the desired number of rows.\n\n* If the Argument is 0 or a Negative Integer then it should return \"\" i.e. empty string.\n\n* If any even number is passed as argument then the pattern should last upto the largest odd number which is smaller than the passed even number.\n\n```Note: There are no spaces in the pattern```\n\n```Hint: Use \\n in string to jump to next line```\n\"\"\"", "inputs": [[4], [1], [5], [0], [-25]], "outputs": [["1\n333"], ["1"], ["1\n333\n55555"], [""], [""]], "starter_code": "def pattern(n):", "canonical_solution": "def pattern(n):\n    return '\\n'.join((str(i) * i for i in range(1, n + 1, 2)))", "entry_point": "pattern", "task_id": "TACO_lite/1769", "input_output_examples": [[[1], [10], [11], [47]], [[[1]], [[2, 8]], [[2, 8, 1]], [[2, 8, 18, 19]]]]}
{"requirement": "def century(year):\"\"\"# Introduction\n\nThe first century spans from the **year 1** *up to* and **including the year 100**, **The second** - *from the year 101 up to and including the year 200*, etc.\n\n# Task : \nGiven a year, return the century it is in.\n\"\"\"", "inputs": [[1705], [1900], [1601], [2000], [356], [89]], "outputs": [[18], [19], [17], [20], [4], [1]], "starter_code": "def century(year):", "canonical_solution": "def century(year):\n    return (year + 99) // 100", "entry_point": "century", "task_id": "TACO_lite/1772", "input_output_examples": [[[3, 5.0]], [[5.0, 10.0, 15.0]]]}
{"requirement": "def solve(a, b):\"\"\"Alice and Bob have participated to a Rock Off with their bands. A jury of true metalheads rates the two challenges, awarding points to the bands on a scale from 1 to 50 for three categories: Song Heaviness, Originality, and Members' outfits.\n\nFor each one of these 3 categories they are going to be awarded one point, should they get a better judgement from the jury. No point is awarded in case of an equal vote.\n\nYou are going to receive two arrays, containing first the score of Alice's band and then those of Bob's. Your task is to find their total score by comparing them in a single line. \n\nThe total score should be followed by a colon ```:``` and by one of the following quotes:\nif Alice's band wins: ```Alice made \"Kurt\" proud!```\nif Bob's band wins: ```Bob made \"Jeff\" proud!```\nif they end up with a draw: ```that looks like a \"draw\"! Rock on!```\n\"\"\"", "inputs": [[[47, 7, 2], [47, 7, 2]], [[47, 50, 22], [26, 47, 12]], [[25, 50, 22], [34, 49, 50]], [[8, 8, 11], [3, 8, 10]], [[20, 32, 18], [48, 25, 40]], [[5, 6, 7], [3, 6, 10]], [[21, 39, 15], [50, 1, 12]], [[0, 1, 2], [1, 2, 0]]], "outputs": [["0, 0: that looks like a \"draw\"! Rock on!"], ["3, 0: Alice made \"Kurt\" proud!"], ["1, 2: Bob made \"Jeff\" proud!"], ["2, 0: Alice made \"Kurt\" proud!"], ["1, 2: Bob made \"Jeff\" proud!"], ["1, 1: that looks like a \"draw\"! Rock on!"], ["2, 1: Alice made \"Kurt\" proud!"], ["1, 2: Bob made \"Jeff\" proud!"]], "starter_code": "def solve(a, b):", "canonical_solution": "def solve(a, b):\n    alice = sum((i > j for i, j in zip(a, b)))\n    bob = sum((j > i for i, j in zip(a, b)))\n    if alice == bob:\n        words = 'that looks like a \"draw\"! Rock on!'\n    elif alice > bob:\n        words = 'Alice made \"Kurt\" proud!'\n    else:\n        words = 'Bob made \"Jeff\" proud!'\n    return '{}, {}: {}'.format(alice, bob, words)", "entry_point": "solve", "task_id": "TACO_lite/1784", "input_output_examples": [[[[1, 3, 4, 5, 8], 3], [[1, 5, 2, 4, 3], 1], [[1, 10, 100, 1000], 1]], [[2], [3], [4]]]}
{"requirement": "def original_number(s):\"\"\"# Task\n\nJohn has an important number, and he doesn't want others to see it.\n\nHe decided to encrypt the number, using the following steps:\n```\nHis number is always a non strict increasing sequence\n\nHe converted each digit into English words.\n\nAnd then, rearrange the letters randomly.\n```\n\nJohn felt that his number were safe in doing so. In fact, such encryption can be easily decrypted :(\n\nGiven the encrypted string `s`, your task is to decrypt it, return the original number in string format.\n\nNote, You can assume that the input string `s` is always valid; It contains only uppercase Letters; The decrypted numbers are arranged in ascending order; The leading zeros are allowed.\n\"\"\"", "inputs": [["ONE"], ["OEN"], ["ONETWO"], ["OONETW"], ["TTONWOHREEE"]], "outputs": [["1"], ["1"], ["12"], ["12"], ["123"]], "starter_code": "def original_number(s):", "canonical_solution": "from collections import Counter\nEXECUTIONS_ORDER = [('Z', Counter('ZERO'), '0'), ('W', Counter('TWO'), '2'), ('U', Counter('FOUR'), '4'), ('X', Counter('SIX'), '6'), ('G', Counter('EIGHT'), '8'), ('O', Counter('ONE'), '1'), ('H', Counter('THREE'), '3'), ('F', Counter('FIVE'), '5'), ('V', Counter('SEVEN'), '7'), ('I', Counter('NINE'), '9')]\n\ndef original_number(s):\n    ans, count, executions = ([], Counter(s), iter(EXECUTIONS_ORDER))\n    while count:\n        c, wordCount, value = next(executions)\n        ans.extend([value] * count[c])\n        for _ in range(count[c]):\n            count -= wordCount\n    return ''.join(sorted(ans))", "entry_point": "original_number", "task_id": "TACO_lite/1789", "input_output_examples": [[["AB"], ["ABC"], ["ABA"], ["ABBb"], ["AbcD"]], [[2], [6], [3], [4], [24]]]}
{"requirement": "def textin(txt):\"\"\"\nWrite a function that replaces 'two', 'too' and 'to' with the number '2'. Even if the sound is found mid word (like in octopus) or not in lowercase grandma still thinks that should be replaced with a 2. Bless her.\n\nNote that 'too' should become '2', not '2o'\n\"\"\"", "inputs": [["I love to text"], ["see you tomorrow"], ["look at that octopus"], ["BECAUSE I WANT TO"]], "outputs": [["I love 2 text"], ["see you 2morrow"], ["look at that oc2pus"], ["BECAUSE I WANT 2"]], "starter_code": "def textin(txt):", "canonical_solution": "import re\n\ndef textin(txt):\n    return re.sub('(two|too|to)', '2', txt, flags=re.I)", "entry_point": "textin", "task_id": "TACO_lite/1795", "input_output_examples": [[["bitcoin take over the world maybe who knows perhaps"]], [[3]]]}
{"requirement": "def greatest_distance(arr):\"\"\"\nThe goal of this Kata is to return the greatest distance of index positions between matching number values in an array or 0 if there are no matching values.\n\nThis is based on a Kata I had completed only to realize I has misread the instructions.  I enjoyed solving the problem I thought it was asking me to complete so I thought I'd add a new Kata for others to enjoy.  There are no tricks in this one, good luck!\n\"\"\"", "inputs": [[[9, 7, 1, 2, 3, 7, 0, -1, -2]], [[0, 7, 0, 2, 3, 7, 0, -1, -2]], [[1, 2, 3, 4]]], "outputs": [[4], [6], [0]], "starter_code": "def greatest_distance(arr):", "canonical_solution": "def greatest_distance(arr):\n    return max((i - arr.index(x) for i, x in enumerate(arr)))", "entry_point": "greatest_distance", "task_id": "TACO_lite/1797", "input_output_examples": [[[[1, 2, 3, 4, 5], [1, 2, 2, 4, 3]], [[1, 2, 3], [1, 2, 3]]], [[0.6], [1.0]]]}
{"requirement": "def execute(code):\"\"\"\n# RoboScript #2 - Implement the RS1 Specification\n\n## Disclaimer\n\nThe story presented in this Kata Series is purely fictional; any resemblance to actual programming languages, products, organisations or people should be treated as purely coincidental.\n\n## About this Kata Series\n\nThis Kata Series is based on a fictional story about a computer scientist and engineer who owns a firm that sells a toy robot called MyRobot which can interpret its own (esoteric) programming language called RoboScript.  Naturally, this Kata Series deals with the software side of things (I'm afraid Codewars cannot test your ability to build a physical robot!).\n\n## Story\n\nNow that you've built your own code editor for RoboScript with appropriate syntax highlighting to make it look like serious code, it's time to properly implement RoboScript so that our MyRobots can execute any RoboScript provided and move according to the will of our customers.  Since this is the first version of RoboScript, let's call our specification RS1 (like how the newest specification for JavaScript is called ES6 :p)\n\n## Task\n\nWrite an interpreter for RS1 called `execute()` which accepts 1 required argument `code`, the RS1 program to be executed.  The interpreter should return a string representation of the smallest 2D grid containing the full path that the MyRobot has walked on (explained in more detail later).\n\nInitially, the robot starts at the middle of a 1x1 grid.  Everywhere the robot walks it will leave a path `\"*\"`.  If the robot has not been at a particular point on the grid then that point will be represented by a whitespace character `\" \"`.\n\nThe robot understands 3 major commands:\n\n- `F` - Move forward by 1 step in the direction that it is currently pointing.  Initially, the robot faces to the right.\n- `L` - Turn \"left\" (i.e. **rotate** 90 degrees **anticlockwise**)\n- `R` - Turn \"right\" (i.e. **rotate** 90 degrees **clockwise**)\n\nAs the robot moves forward, if there is not enough space in the grid, the grid should expand accordingly.\n\nEach row in your grid must be separated from the next by a CRLF (`\\r\\n`). \n\nSince you've realised that it is probably quite inefficient to repeat certain commands over and over again by repeating the characters (especially the `F` command - what if you want to move forwards 20 steps?), you decide to allow a shorthand notation in the RS1 specification which allows your customers to postfix a non-negative integer onto a command to specify how many times an instruction is to be executed:\n\n- `Fn` - Execute the `F` command `n` times (NOTE: `n` *may* be more than 1 digit long!)\n- `Ln` - Execute `L` n times\n- `Rn` - Execute `R` n times\n\n## Kata in this Series\n\n1. [RoboScript #1 - Implement Syntax Highlighting](https://www.codewars.com/kata/roboscript-number-1-implement-syntax-highlighting)\n2. **RoboScript #2 - Implement the RS1 Specification**\n3. [RoboScript #3 - Implement the RS2 Specification](https://www.codewars.com/kata/58738d518ec3b4bf95000192)\n4. [RoboScript #4 - RS3 Patterns to the Rescue](https://www.codewars.com/kata/594b898169c1d644f900002e)\n5. [RoboScript #5 - The Final Obstacle (Implement RSU)](https://www.codewars.com/kata/5a12755832b8b956a9000133)\n\"\"\"", "inputs": [[""], ["FFFFF"], ["FFFFFLFFFFFLFFFFFLFFFFFL"], ["LFFFFFRFFFRFFFRFFFFFFF"], ["LF5RF3RF3RF7"], ["FFFLLFFFFFFRRFFFLFFFRRFFFFFFFF"], ["F3L2F6R2F3LF3R2F8"], ["F2FLLF3F3R2FFFLF2FRRF3F2F2F"], ["FFLFFFLFFFFLFFFFFLFFFFFFLFFFFFFFLFFFFFFFFLFFFFFFFFFLFFFFFFFFFF"], ["F2LF3LF4LF5LF6LF7LF8LF9LF10"], ["FFFFLFFFFRFFFFRFFFFLFFFFLFFFFRFFFFRFFFFLFFFFLFFFFRFFFFRFFFF"], ["F4LF4RF4RF4LF4LF4RF4RF4LF4LF4RF4RF4"]], "outputs": [["*"], ["******"], ["******\r\n*    *\r\n*    *\r\n*    *\r\n*    *\r\n******"], ["    ****\r\n    *  *\r\n    *  *\r\n********\r\n    *   \r\n    *   "], ["    ****\r\n    *  *\r\n    *  *\r\n********\r\n    *   \r\n    *   "], ["   *   \r\n   *   \r\n   *   \r\n*******\r\n   *   \r\n   *   \r\n   *   \r\n   *   \r\n   *   "], ["   *   \r\n   *   \r\n   *   \r\n*******\r\n   *   \r\n   *   \r\n   *   \r\n   *   \r\n   *   "], ["   *   \r\n   *   \r\n   *   \r\n*******\r\n   *   \r\n   *   \r\n   *   \r\n   *   \r\n   *   "], ["*********  \r\n*       *  \r\n* ***** *  \r\n* *   * *  \r\n* *   * *  \r\n* * *** *  \r\n* *     *  \r\n* *******  \r\n*          \r\n***********"], ["*********  \r\n*       *  \r\n* ***** *  \r\n* *   * *  \r\n* *   * *  \r\n* * *** *  \r\n* *     *  \r\n* *******  \r\n*          \r\n***********"], ["    *****   *****   *****\r\n    *   *   *   *   *   *\r\n    *   *   *   *   *   *\r\n    *   *   *   *   *   *\r\n*****   *****   *****   *"], ["    *****   *****   *****\r\n    *   *   *   *   *   *\r\n    *   *   *   *   *   *\r\n    *   *   *   *   *   *\r\n*****   *****   *****   *"]], "starter_code": "def execute(code):", "canonical_solution": "from collections import deque\nimport re\nTOKENIZER = re.compile('(R+|F+|L+)(\\\\d*)')\n\ndef execute(code):\n    pos, dirs = ((0, 0), deque([(0, 1), (1, 0), (0, -1), (-1, 0)]))\n    seens = {pos}\n    for act, n in TOKENIZER.findall(code):\n        s, r = (act[0], int(n or '1') + len(act) - 1)\n        if s == 'F':\n            for _ in range(r):\n                pos = tuple((z + dz for z, dz in zip(pos, dirs[0])))\n                seens.add(pos)\n        else:\n            dirs.rotate(r % 4 * (-1) ** (s == 'R'))\n    miX, maX = (min((x for x, y in seens)), max((x for x, y in seens)))\n    miY, maY = (min((y for x, y in seens)), max((y for x, y in seens)))\n    return '\\r\\n'.join((''.join(('*' if (x, y) in seens else ' ' for y in range(miY, maY + 1))) for x in range(miX, maX + 1)))", "entry_point": "execute", "task_id": "TACO_lite/1799", "input_output_examples": [[["hello world", "-"]], [["1-1-3-3-2-1-1-2-1-3-1"]]]}
{"requirement": "def knight_rescue(N, x, y):\"\"\"# Task\n You are the manager of the famous rescue team: The Knights. Your task is to assign your knights to a rescue missions on an infinite 2D-plane.\n\n Your knights can move only by `n-knight` jumps. \n \n You are given an array containing the `n`s of all of your knights `n-knight` jumps, and the coordinates (`x`, `y`) of a civilian who need your squad's help.\n\n Your head quarter is located at (0, 0). Your must determine if `at least one` of your knight can reach that point `(x, y)`.\n\n# Input/Output\n\n\n - `[input]` integer array `N`\n\n  The ways your knights move. \n  \n  `1 <= N.length <=20`\n\n\n - `[input]` integer `x`\n\n  The x-coordinate of the civilian\n\n\n - `[input]` integer `y`\n\n  The y-coordinate of the civilian\n\n\n - `[output]` a boolean value\n\n `true` if one of your knights can reach point (x, y), `false` otherwise.\n\"\"\"", "inputs": [[[2], 2, 1], [[1], 10, 10], [[1], 1, 0], [[1, 2], 1, 0], [[1, 2, 3], 456546, 23532], [[1, 5, 3, 7, 9], 7, 8], [[1, 1, 1, 1, 1, 1, 1, 1, 1], 0, 1]], "outputs": [[true], [true], [false], [true], [true], [false], [false]], "starter_code": "def knight_rescue(N, x, y):", "canonical_solution": "def knight_rescue(N, x, y):\n    return (y - x) % 2 == 0 or any((n % 2 == 0 for n in N))", "entry_point": "knight_rescue", "task_id": "TACO_lite/1801", "input_output_examples": [[[5]], [[3]]]}
{"requirement": "def evil_code_medal(user_time, gold, silver, bronze):\"\"\"\n# Task\n`EvilCode` is a game similar to `Codewars`. You have to solve programming tasks as quickly as possible. However, unlike `Codewars`, `EvilCode` awards you with a medal, depending on the time you took to solve the task.\n\nTo get a medal, your time must be (strictly) inferior to the time corresponding to the medal. You can be awarded `\"Gold\", \"Silver\" or \"Bronze\"` medal, or `\"None\"` medal at all. Only one medal (the best achieved) is awarded.\n\nYou are given the time achieved for the task and the time corresponding to each medal. Your task is to return the awarded medal.\n\nEach time is given in the format `HH:MM:SS`.\n\n\n# Input/Output\n\n`[input]` string `userTime`\n\nThe time the user achieved.\n\n`[input]` string `gold`\n\nThe time corresponding to the gold medal.\n\n`[input]` string `silver`\n\nThe time corresponding to the silver medal.\n\n`[input]` string `bronze`\n\nThe time corresponding to the bronze medal.\n\nIt is guaranteed that `gold < silver < bronze`.\n\n`[output]` a string\n\nThe medal awarded, one of for options: `\"Gold\", \"Silver\", \"Bronze\" or \"None\"`.\n\n# For Haskell version\n```\nIn Haskell, the result is a Maybe, returning Just String indicating \nthe medal if they won or Nothing if they don't.\n```\n\"\"\"", "inputs": [["00:30:00", "00:15:00", "00:45:00", "01:15:00"], ["01:15:00", "00:15:00", "00:45:00", "01:15:00"], ["00:00:01", "00:00:10", "00:01:40", "01:00:00"], ["00:10:01", "00:00:10", "00:01:40", "01:00:00"], ["00:00:01", "00:00:02", "00:00:03", "00:00:04"], ["90:00:01", "60:00:02", "70:00:03", "80:00:04"], ["03:15:00", "03:15:00", "03:15:01", "03:15:02"], ["99:59:58", "99:59:57", "99:59:58", "99:59:59"], ["14:49:03", "77:39:08", "92:11:36", "94:07:41"], ["61:01:40", "64:19:53", "79:30:02", "95:24:48"]], "outputs": [["Silver"], ["None"], ["Gold"], ["Bronze"], ["Gold"], ["None"], ["Silver"], ["Bronze"], ["Gold"], ["Gold"]], "starter_code": "def evil_code_medal(user_time, gold, silver, bronze):", "canonical_solution": "def evil_code_medal(user_time, gold, silver, bronze):\n    for medal, time in [['Gold', gold], ['Silver', silver], ['Bronze', bronze]]:\n        if user_time < time:\n            return medal\n    return 'None'", "entry_point": "evil_code_medal", "task_id": "TACO_lite/1803", "input_output_examples": [[[[2, 0, 6, 3, 1, 6, 3, 1, 6, 3, 1]], [[2, 3, 4, 2, 3, 4]]], [[2, 3], [0, 3]]]}
{"requirement": "def sursurungal(txt):\"\"\"\nOnce upon a time, a CodeWarrior, after reading a [discussion on what can be the plural](http://www.codewars.com/kata/plural/discuss/javascript), took a look at [this page](http://en.wikipedia.org/wiki/Grammatical_number#Types_of_number\n) and discovered that **more than 1** \"kind of plural\" may exist. \n\nIn this kata, you'll have to handle only four types of numbers:\n\n- **singular**: 0 or 1 thing\n- **dual**: 2 things\n- **paucal**: 3 to 9 things\n- **plural**: more than 9 things\n\nTo add some flavor the **number-marker** will not be added in same places:\n\n- **singular**, no marker : `1 cat`\n- **dual**, prefixed \"`bu`\" : `2 cats -> 2 bucat`\n- **paucal**, suffixed \"`zo`\" : `4 cats -> 4 catzo`\n- **plural**, \"circumfixed `ga`\" : `100 cats -> 100 gacatga`\n\nAs you all (\"hawk eyes\") have seen, the final `s` of english plural **disappears**.\n\n( btw these markers, of course, have absolutely nothing to do with true sursurunga language, we're just talking about \"**pig**-sursurunga\" with **pig** as **pig** in \"**pig latin**\" )\n\n## Your Job . . .\n. . . if you accept it, will be to write a `sursurungal` function which get a `string` as argument and returns this string with words in it eventually converted to their \"pig-sursurunga number type\".\n\nIf a `number` ( *ie* 1 or more digit ) + a `space` + a `word` ( letters ) are found then the word should be converted.\n\n**Each** group of `number+space+word` found in the string should be evaluated.\n\nYou may assume at least 1 `number+space+word` group will be provided.\n\n**Beware** `s` of english plural should be removed, not ending `s` of some singular words ( *eg* \"kiss\" )\n\nGood luck!\n\"\"\"", "inputs": [["1 tomato"], ["0 tomato"], ["1 ananas"], ["2 bananas"], ["3 bananas"], ["10 bananas"], ["111 bananas"], ["6 birds with 2 wings each = 12 legs"], ["\n3 pigs\nmet 1 wolf\n2 days ago"]], "outputs": [["1 tomato"], ["0 tomato"], ["1 ananas"], ["2 bubanana"], ["3 bananazo"], ["10 gabananaga"], ["111 gabananaga"], ["6 birdzo with 2 buwing each = 12 galegga"], ["\n3 pigzo\nmet 1 wolf\n2 buday ago"]], "starter_code": "def sursurungal(txt):", "canonical_solution": "import re\n\ndef sursurungal(txt):\n    txt = re.sub('\\\\b2\\\\s(\\\\S+)s', '2 bu\\\\1', txt)\n    txt = re.sub('\\\\b([3-9])\\\\s(\\\\S+)s', '\\\\1 \\\\2zo', txt)\n    return re.sub('(\\\\d+\\\\d)\\\\s(\\\\S+)s', '\\\\1 ga\\\\2ga', txt)", "entry_point": "sursurungal", "task_id": "TACO_lite/1804", "input_output_examples": [[["2 + 3 - 4 * 1 ^ 3"]], [[1]]]}
{"requirement": "def group(arr):\n\t\"\"\"\nSam is an avid collector of numbers. Every time he finds a new number he throws it on the top of his number-pile. Help Sam organise his collection so he can take it to the International Number Collectors Conference in Cologne. \n\nGiven an array of numbers, your function should return an array of arrays, where each subarray contains all the duplicates of a particular number. Subarrays should be in the same order as the first occurence of the number they contain:\nAssume the input is always going to be an array of numbers. If the input is an empty array, an empty array should be returned.\n\"\"\"", "inputs": [[[3, 2, 6, 2, 1, 3]], [[3, 2, 6, 2]], [[]], [[1, 100, 4, 2, 4]], [[-1, 1, -1]]], "outputs": [[[[3, 3], [2, 2], [6], [1]]], [[[3], [2, 2], [6]]], [[]], [[[1], [100], [4, 4], [2]]], [[[-1, -1], [1]]]], "starter_code": "def group(arr):\n\t", "canonical_solution": "group = lambda arr: [[n] * arr.count(n) for n in sorted(set(arr), key=arr.index)]", "entry_point": "group", "task_id": "TACO_lite/1806", "input_output_examples": [[["!(f)"], ["|(f,t)"], ["&(t,f)"], ["|(&(t,f,t),!(t))"]], [[true], [true], [false], [false]]]}
{"requirement": "def checksquares(N):\"\"\"\nGiven an integer N, check if it is possible to represent it as a function(a, b) such that : a^{2} + b^{2} = N where \"a\" and \"b\" are whole numbers. Print 1 if it's possible, else Print 0.\n\nYour Task:\nYou don't need to read input or print anything. Your task is to complete the function checksquares() which takes an Integer N as input and returns the answer.\n\nExpected Time Complexity: O(N)\nExpected Auxiliary Space: O(1)\n\nConstraints:\n1 <= N <= 10^{6}\n\"\"\"", "inputs": [[1], [2], [7]], "outputs": [[1], [1], [0]], "starter_code": "def checksquares(N):", "canonical_solution": "import math\n\ndef checksquares(N):\n    flag = 0\n    for a in range(int(math.sqrt(N)) + 1):\n        for b in range(int(math.sqrt(N)) + 1):\n            if a * a + b * b == N:\n                flag = 1\n                break\n        if flag == 1:\n            break\n    return flag", "entry_point": "checksquares", "task_id": "TACO_lite/1812", "input_output_examples": [[[1, 100], [1000, 1100], [10000, 9950], [0, 200]], [[[["M: 37", "B: 5", "C: 4"], ["M: 100", "B: 14", "C: 11"]]], [[["M: 1045", "B: 149", "C: 116"]]], [[["M: 9991", "B: 1427", "C: 1110"]]], [[["M: 37", "B: 5", "C: 4"], ["M: 100", "B: 14", "C: 11"], ["M: 163", "B: 23", "C: 18"]]]]]}
{"requirement": "def dig_pow(n, p):\"\"\"\nGiven a positive integer n written as abcd... (a, b, c, d... being digits) and a positive integer p \n- we want to find a positive integer k, if it exists, such as the sum of the digits of n taken to the successive powers of p is equal to k * n. \n\nIn other words:\n\nIs there an integer k such as : (a ^ p + b ^ (p+1) + c ^(p+2) + d ^ (p+3) + ...) = n * k\n\nIf it is the case we will return k, if not return -1.\n\n**Note**: n and p will always be given as strictly positive integers.\n\"\"\"", "inputs": [[89, 1], [92, 1], [46288, 3], [114, 3], [46288, 5], [135, 1], [175, 1], [518, 1], [598, 1], [1306, 1], [2427, 1], [2646798, 1], [3456789, 1], [3456789, 5], [198, 1], [249, 1], [1377, 1], [1676, 1], [695, 2], [1878, 2], [7388, 2], [47016, 2], [542186, 2], [261, 3], [1385, 3], [2697, 3], [6376, 3], [6714, 3], [63760, 3], [63761, 3], [132921, 3], [10383, 6]], "outputs": [[1], [-1], [51], [9], [-1], [1], [1], [1], [1], [1], [1], [1], [-1], [-1], [3], [3], [2], [1], [2], [19], [5], [1], [1], [5], [35], [66], [10], [1], [1], [1], [4], [12933]], "starter_code": "def dig_pow(n, p):", "canonical_solution": "def dig_pow(n, p):\n    s = 0\n    for i, c in enumerate(str(n)):\n        s += pow(int(c), p + i)\n    return s / n if s % n == 0 else -1", "entry_point": "dig_pow", "task_id": "TACO_lite/1813", "input_output_examples": [[[[1, 1, 1]], [[1, 2, 1]], [[4, 1, 1]]], [[1], [2], [2]]]}
{"requirement": "def deep_count(a):\"\"\"\n```if:javascript\n`Array.prototype.length` will give you the number of top-level elements in an array.\n```\n```if:ruby\n`Array#length` will give you the number of top-level elements in an array.\n```\n```if:csharp\nThe `Length` property of an array will give you the number of top-level elements in an array.\n```\n```if:php\n`count()` will give you the number of top-level elements in an array if exactly one argument `$a` is passed in which is the array.\n```\n```if:python\n`len(a)` will give you the number of top-level elements in the list/array named `a`.\n```\n\nYour task is to create a function ```deepCount``` that returns the number of ALL elements within an array, including any within inner-level arrays.\n\nThe input will always be an array.\n\n```if:php\nIn PHP you may *not* assume that the array passed in will be non-associative.\n\nPlease note that `count()`, `eval()` and `COUNT_RECURSIVE` are disallowed - you should be able to implement the logic for `deep_c()` yourself ;)\n```\n\"\"\"", "inputs": [[[]], [[1, 2, 3]], [["x", "y", ["z"]]], [[1, 2, [3, 4, [5]]]], [[[[[[[[[[]]]]]]]]]], [["a"]], [[["a"]]], [[["a"], []]], [["[a]"]], [[[[[[[[[["Everybody!"]]]]]]]]]], [["cat", [["dog"]], ["[bird]"]]]], "outputs": [[0], [3], [4], [7], [8], [1], [2], [3], [1], [9], [6]], "starter_code": "def deep_count(a):", "canonical_solution": "def deep_count(a):\n    result = 0\n    for i in range(len(a)):\n        if type(a[i]) is list:\n            result += deep_count(a[i])\n        result += 1\n    return result", "entry_point": "deep_count", "task_id": "TACO_lite/1819", "input_output_examples": [[[4], [8]], [[true], [true]]]}
{"requirement": "def solution(number):\"\"\"\nWrite a function that takes an integer and returns an array `[A, B, C]`, where `A` is the number of multiples of 3 (but not 5) below the given integer, `B` is the number of multiples of 5 (but not 3) below the given integer and `C` is the number of multiples of 3 and 5 below the given integer.\n\"\"\"", "inputs": [[20], [2020], [4], [2], [30], [300], [14], [141], [1415], [91415]], "outputs": [[[5, 2, 1]], [[539, 269, 134]], [[1, 0, 0]], [[0, 0, 0]], [[8, 4, 1]], [[80, 40, 19]], [[4, 2, 0]], [[37, 19, 9]], [[377, 188, 94]], [[24377, 12188, 6094]]], "starter_code": "def solution(number):", "canonical_solution": "def solution(number):\n    A = (number - 1) // 3\n    B = (number - 1) // 5\n    C = (number - 1) // 15\n    return [A - C, B - C, C]", "entry_point": "solution", "task_id": "TACO_lite/1820", "input_output_examples": [[[["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]], [["1", "2", "3", "4", "5", "6", "10", "11", "12", "13"]]], [[10], [7]]]}
{"requirement": "def array_conversion(arr):\"\"\"# Task\n Given an array of 2^(k) integers (for some integer `k`), perform the following operations until the array contains only one element:\n```\nOn the 1st, 3rd, 5th, etc. \niterations (1-based) replace each pair of consecutive elements with their sum;\nOn the 2nd, 4th, 6th, etc. \niterations replace each pair of consecutive elements with their product.\n```\nAfter the algorithm has finished, there will be a single element left in the array. Return that element.\n\n# Input/Output\n\n - `[input]` integer array `arr`\n\n   Constraints: 2^(1) ≤ arr.length ≤ 2^(5), -9 ≤ arr[i] ≤ 99.\n\n - `[output]` an integer\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5, 6, 7, 8]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[3, 3, 5, 5]]], "outputs": [[186], [64], [60]], "starter_code": "def array_conversion(arr):", "canonical_solution": "def array_conversion(arr):\n    sign = 0\n    while len(arr) > 1:\n        sign = 1 ^ sign\n        arr = list(map(lambda x, y: x + y, arr[0::2], arr[1::2]) if sign else map(lambda x, y: x * y, arr[0::2], arr[1::2]))\n    return arr[0]", "entry_point": "array_conversion", "task_id": "TACO_lite/1823", "input_output_examples": [[[[1, 2], [1]]], [[2, 2]]]}
{"requirement": "def unlock(message):\"\"\"Introduction \n\nMr. Safety loves numeric locks and his Nokia 3310. He locked almost everything in his house. He is so smart and he doesn't need to remember the combinations. He has an algorithm to generate new passcodes on his Nokia cell phone. \n\n\n Task \n\nCan you crack his numeric locks? Mr. Safety's treasures wait for you. Write an algorithm to open his numeric locks. Can you do it without his Nokia 3310? \n\nInput \n\nThe `str` or `message` (Python) input string consists of lowercase and upercase characters. It's a real object that you want to unlock.\n\nOutput \nReturn a string that only consists of digits.\n\"\"\"", "inputs": [["Nokia"], ["Valut"], ["toilet"], ["waterheater"], ["birdhouse"]], "outputs": [["66542"], ["82588"], ["864538"], ["92837432837"], ["247346873"]], "starter_code": "def unlock(message):", "canonical_solution": "def unlock(message):\n    return message.lower().translate(message.maketrans('abcdefghijklmnopqrstuvwxyz', '22233344455566677778889999'))", "entry_point": "unlock", "task_id": "TACO_lite/1824", "input_output_examples": [[[100], [180], [18000]], [["Last chunk 354224848179261915075; Max is 3 for digit 1"], ["Last chunk 8521399707760; Max is 7 for digit 7"], ["Last chunk 140258776000; Max is 409 for digit 1"]]]}
{"requirement": "def scramble_words(words):\"\"\"\nBackground\nThere is a message that is circulating via public media that claims a reader can easily read a message where the inner letters of each word is scrambled, as long as the first and last letters remain the same and the word contains all the letters.\n\nIn this kata we will make a generator that generates text in a similar pattern, but instead of scrambled or reversed, ours will be sorted alphabetically\n\nRequirement\nreturn a string where:\n1) the first and last characters remain in original place for each word\n2) characters between the first and last characters must be sorted alphabetically\n3) punctuation should remain at the same place as it started\nAssumptions\n1) words are seperated by single spaces\n2) only spaces separate words, special characters do not\n3) special characters do not take the position of the non special characters\n4) for this kata puctuation is limited to 4 characters: hyphen(-), apostrophe('), comma(,) and period(.) \n5) ignore capitalisation\n\n\nfor reference: http://en.wikipedia.org/wiki/Typoglycemia\n\"\"\"", "inputs": [["professionals"], ["i"], [""], ["me"], ["you"], ["card-carrying"], ["shan't"], ["-dcba"], ["dcba."], ["you've gotta dance like there's nobody watching, love like you'll never be hurt, sing like there's nobody listening, and live like it's heaven on earth."]], "outputs": [["paefilnoorsss"], ["i"], [""], ["me"], ["you"], ["caac-dinrrryg"], ["sahn't"], ["-dbca"], ["dbca."], ["you've gotta dacne like teehr's nbdooy wachintg, love like ylo'ul neevr be hrut, sing like teehr's nbdooy leiinnstg, and live like it's haeevn on earth."]], "starter_code": "def scramble_words(words):", "canonical_solution": "import re\n\ndef scramble_words(words):\n\n    def sort_letters(match):\n        s = match.group()\n        letters = iter(sorted(filter(str.isalpha, s[1:-1])))\n        return s[0] + ''.join((next(letters) if c.isalpha() else c for c in s[1:-1])) + s[-1]\n    return re.sub('[a-z][^\\\\s]*[a-z]', sort_letters, words)", "entry_point": "scramble_words", "task_id": "TACO_lite/1825", "input_output_examples": [[[23, 2, 3, 4, 5]], [[2, 3, 4, 23, 5]]]}
{"requirement": "def pattern(n):\n\t\"\"\"\nYou have to write a function **pattern** which creates the following pattern upto n number of rows. *If the Argument is 0 or a Negative Integer then it should return \"\" i.e. empty string.*\n\n```Note: There are no blank spaces```\n\n```Hint: Use \\n in string to jump to next line```\n\"\"\"", "inputs": [[1], [2], [5], [0], [-25]], "outputs": [["1"], ["12\n2"], ["12345\n2345\n345\n45\n5"], [""], [""]], "starter_code": "def pattern(n):\n\t", "canonical_solution": "pattern = lambda n: '\\n'.join([''.join([str(y) for y in range(x + 1, n + 1)]) for x in range(n)])", "entry_point": "pattern", "task_id": "TACO_lite/1827", "input_output_examples": [[["abab", "truck car truck car"], ["aaaa", "dog dog dog dog"], ["abab", "apple banana banana apple"], ["aaaa", "cat cat dog cat"]], [[true], [true], [false], [false]]]}
{"requirement": "def count_by(x, n):\"\"\"\nCreate a function with two arguments that will return an array of the first (n) multiples of (x). \n\nAssume both the given number and the number of times to count will be positive numbers greater than 0. \n\nReturn the results as an array (or list in Python, Haskell or Elixir).\n\"\"\"", "inputs": [[1, 5], [2, 5], [3, 5], [50, 5], [100, 5]], "outputs": [[[1, 2, 3, 4, 5]], [[2, 4, 6, 8, 10]], [[3, 6, 9, 12, 15]], [[50, 100, 150, 200, 250]], [[100, 200, 300, 400, 500]]], "starter_code": "def count_by(x, n):", "canonical_solution": "def count_by(x, n):\n    return [i * x for i in range(1, n + 1)]", "entry_point": "count_by", "task_id": "TACO_lite/1828", "input_output_examples": [[[[1, 3, 4, 7, 6], 9], [[1, 2, 3, 4, 5], 10], [[8, 5, 3, 9], 7], [[8, 5, 3], 7]], [[true], [true], [true], [false]]]}
{"requirement": "def count_smileys(arr):\"\"\"\nGiven an array (arr) as an argument complete the function `countSmileys` that should return the total number of smiling faces.  \n\nRules for a smiling face:\n- Each smiley face must contain a valid pair of eyes. Eyes can be marked as `:` or `;`\n- A smiley face can have a nose but it does not have to. Valid characters for a nose are `-` or `~`\n- Every smiling face must have a smiling mouth that should be marked with either `)` or `D`\n\nNo additional characters are allowed except for those mentioned.  \n\n## Note\n\nIn case of an empty array return 0. You will not be tested with invalid input (input will always be an array). Order of the face (eyes, nose, mouth) elements will always be the same.\n\"\"\"", "inputs": [[[]], [[":D", ":~)", ";~D", ":)"]], [[":)", ":(", ":D", ":O", ":;"]], [[";]", ":[", ";*", ":$", ";-D"]]], "outputs": [[0], [4], [2], [1]], "starter_code": "def count_smileys(arr):", "canonical_solution": "from re import findall\n\ndef count_smileys(arr):\n    return len(list(findall('[:;][-~]?[)D]', ' '.join(arr))))", "entry_point": "count_smileys", "task_id": "TACO_lite/1831", "input_output_examples": [[[100, 15]], [[[960, 480, 60]]]]}
{"requirement": "def sum_mul(n, m):\"\"\"\n## Your Job\n\n  Find the sum of all multiples of `n` below `m` \n  \n  \n## Keep in Mind\n\n  * `n` and `m` are natural numbers (positive integers)\n  * `m` is **excluded** from the multiples\n\"\"\"", "inputs": [[4, 123], [123, 4567], [2, 10], [2, 2], [7, 7], [7, 2], [21, 3], [0, 2], [2, 0], [4, -7], [-7, 4]], "outputs": [[1860], [86469], [20], [0], [0], [0], [0], ["INVALID"], ["INVALID"], ["INVALID"], ["INVALID"]], "starter_code": "def sum_mul(n, m):", "canonical_solution": "def sum_mul(n, m):\n    if m > 0 and n > 0:\n        return sum(range(n, m, n))\n    else:\n        return 'INVALID'", "entry_point": "sum_mul", "task_id": "TACO_lite/1833", "input_output_examples": [[[9], [66], [128685], [5]], [[1], [2], [6], [1]]]}
{"requirement": "def to_alternating_case(string):\"\"\"\nDefine `String.prototype.toAlternatingCase` (or a similar function/method *such as* `to_alternating_case`/`toAlternatingCase`/`ToAlternatingCase` in your selected language; **see the initial solution for details**) such that each lowercase letter becomes uppercase and each uppercase letter becomes lowercase. \n\nAs usual, your function/method should be pure, i.e. it should **not** mutate the original string.\n\"\"\"", "inputs": [["hello world"], ["HELLO WORLD"], ["hello WORLD"], ["HeLLo WoRLD"], ["12345"], ["1a2b3c4d5e"], ["String.prototype.toAlternatingCase"]], "outputs": [["HELLO WORLD"], ["hello world"], ["HELLO world"], ["hEllO wOrld"], ["12345"], ["1A2B3C4D5E"], ["sTRING.PROTOTYPE.TOaLTERNATINGcASE"]], "starter_code": "def to_alternating_case(string):", "canonical_solution": "def to_alternating_case(string):\n    return string.swapcase()", "entry_point": "to_alternating_case", "task_id": "TACO_lite/1835", "input_output_examples": [[[["O", "X", " ", " ", "X", " ", "X", "O", " "], 3], [["O", "X", " ", " ", "X", " ", "X", "O", " ", "O"], 5]], [[" O | X |   \n-----------\n   | X |   \n-----------\n X | O |   "], [" O | X |   |   | X \n-------------------\n   | X | O |   | O "]]]}
{"requirement": "def solomons_quest(arr):\"\"\"Background\n----------\nIn another dimension, there exist two immortal brothers: Solomon and Goromon. As sworn loyal subjects to the time elemental, Chronixus, both Solomon and Goromon were granted the power to create temporal folds. By sliding through these temporal folds, one can gain entry to parallel dimensions where time moves relatively faster or slower.\n\nGoromon grew dissatisfied and one day betrayed Chronixus by stealing the Temporal Crystal, an artifact used to maintain the time continuum. Chronixus summoned Solomon and gave him the task of tracking down Goromon and retrieving the Temporal Crystal.\n\nUsing a map given to Solomon by Chronixus, you must find Goromon's precise location.\n\nMission Details\n---------------\nThe map is represented as a 2D array. \nHere are what the values of each subarray represent:\n- **Time Dilation:** With each additional layer of time dilation entered, time slows by a factor of `2`. At layer `0`, time passes normally. At layer `1`, time passes at half the rate of layer `0`. At layer `2`, time passes at half the rate of layer `1`, and therefore one quarter the rate of layer `0`.\n- **Directions** are as follow: `0 = North, 1 = East, 2 = South, 3 = West`\n- **Distance Traveled:** This represents the distance traveled relative to the current time dilation layer.\n\nYour function should return Goromon's `[x,y]` coordinates.\n\nAdditional Technical Details\n----------------------------\n- Inputs are always valid.\n- Solomon begins his quest at time dilation level `0`, at `[x,y]` coordinates `[0,0]`.\n- Time dilation level at any point will always be `0` or greater.\n- Standard Distance is the distance at time dilation level `0`.\n- For given distance `d` for each value in the array: `d >= 0`.\n- Do not mutate the input\n\n**Note from the author:** I made up this story for the purpose of this kata. Any similarities to any fictitious persons or events are purely coincidental.\n\nIf you enjoyed this kata, be sure to check out [my other katas](https://www.codewars.com/users/docgunthrop/authored).\n\"\"\"", "inputs": [[[[1, 3, 5], [2, 0, 10], [-3, 1, 4], [4, 2, 4], [1, 1, 5], [-3, 0, 12], [2, 1, 12], [-2, 2, 6]]], [[[4, 0, 8], [2, 1, 2], [1, 0, 5], [-3, 3, 16], [2, 2, 2], [-1, 1, 7], [0, 0, 5], [-4, 3, 14]]], [[[1, 1, 20], [1, 2, 30], [1, 3, 8], [1, 0, 2], [1, 1, 6], [1, 2, 4], [1, 3, 6], [-7, 0, 100]]], [[[2, 2, 100], [3, 1, 25], [4, 0, 8], [-6, 3, 25], [-1, 2, 80], [8, 0, 12], [-10, 3, 220], [0, 1, 150]]], [[[3, 2, 80], [1, 1, 25], [6, 0, 8], [-5, 3, 50], [1, 2, 100], [4, 0, 9], [-8, 3, 260], [0, 1, 90]]]], "outputs": [[[346, 40]], [[68, 800]], [[-600, -244]], [[530, 15664]], [[-1880, 10368]]], "starter_code": "def solomons_quest(arr):", "canonical_solution": "def solomons_quest(arr):\n    pos, lvl = ([0, 0], 0)\n    for dilat, dir, dist in arr:\n        lvl += dilat\n        pos[dir in [0, 2]] += dist * 2 ** lvl * (-1) ** (dir in [2, 3])\n    return pos", "entry_point": "solomons_quest", "task_id": "TACO_lite/1840", "input_output_examples": [[["The quick brown fox jumps over the lazy dog."], ["The end of the institution, maintenance, and administration of government, is to secure the existence of the body politic, to protect it, and to furnish the individuals who compose it with the power of enjoying in safety and tranquillity their natural rights, and the blessings of life: and whenever these great objects are not obtained, the people have a right to alter the government, and to take measures necessary for their safety, prosperity and happiness."], ["aAaaaaAaaaAAaAa"], [""]], [["The quick brown fox jumps over the lZY DOG."], ["The end of the institution, mINTENnce, ND dministrTION OF GOVERNMENT, IS TO SECURE THE EXISTENCE OF THE BODY POLITIC, TO PROTECT IT, nd to furnish the individuLS WHO COMPOSE IT WITH THE POWER OF ENJOYING IN Sfety ND TRnquillity their nTURl rights, ND THE BLESSINGS OF LIFE: nd whenever these greT OBJECTS re not obtINED, THE PEOPLE Hve  RIGHT TO lter the government, ND TO Tke meSURES NECESSry for their sFETY, PROSPERITY nd hPPINESS."], [""], [""]]]}
{"requirement": "def expanded_form(num):\"\"\"\n# Write Number in Expanded Form - Part 2\n\nThis is version 2 of my ['Write Number in Expanded Form' Kata](https://www.codewars.com/kata/write-number-in-expanded-form).\n\nYou will be given a number and you will need to return it as a string in [Expanded Form](https://www.mathplacementreview.com/arithmetic/decimals.php#writing-a-decimal-in-expanded-form).\n\"\"\"", "inputs": [[1.24], [7.304], [0.04], [1.04], [7.3004], [0.004], [693.230459]], "outputs": [["1 + 2/10 + 4/100"], ["7 + 3/10 + 4/1000"], ["4/100"], ["1 + 4/100"], ["7 + 3/10 + 4/10000"], ["4/1000"], ["600 + 90 + 3 + 2/10 + 3/100 + 4/10000 + 5/100000 + 9/1000000"]], "starter_code": "def expanded_form(num):", "canonical_solution": "def expanded_form(num):\n    integer_part, fractional_part = str(num).split('.')\n    result = [str(int(num) * 10 ** i) for i, num in enumerate(integer_part[::-1]) if num != '0'][::-1]\n    result += [str(num) + '/' + str(10 ** (i + 1)) for i, num in enumerate(fractional_part) if num != '0']\n    return ' + '.join(result)", "entry_point": "expanded_form", "task_id": "TACO_lite/1841", "input_output_examples": [[[7], [10], [-7], [-10]], [[true, false, false], [false, true, true], [false, false, false], [false, true, true]]]}
{"requirement": "def pillow(s):\n\t\"\"\"\nApparently \"Put A Pillow On Your Fridge Day is celebrated on the 29th of May each year, in Europe and the U.S. The day is all about prosperity, good fortune, and having bit of fun along the way.\"\n\nAll seems very weird to me.\n\nNevertheless, you will be given an array of two strings (s). First find out if the first string contains a fridge... (i've deemed this as being 'n', as it looks like it could hold something).\n\nThen check that the second string has a pillow - deemed 'B' (struggled to get the obvious pillow-esque character).\n\nIf the pillow is on top of the fridge - it must be May 29th! Or a weird house... Return true; For clarity, on top means right on top, ie in the same index position.\n\nIf the pillow is anywhere else in the 'house', return false;\n\nThere may be multiple fridges, and multiple pillows. But you need at least 1 pillow ON TOP of a fridge to return true. Multiple pillows on fridges should return true also.\n\n100 random tests\n\"\"\"", "inputs": [[["EvH/KNikBiyxfeyK/miCMj", "I/HwjnHlFLlahMOKNadps"]], [["\\DjQ\\[zv]SpG]Z/[Qm\\eLL", "amwZArsaGRmibriXBgTRZp"]], [["n", "B"]], [["yF[CeAAiNihWEmKxJc/NRMVn", "rMeIa\\KAfbjuLiTnAQxNw[XB"]], [["inECnBMAA/u", "ABAaIUOUx/M"]]], "outputs": [[false], [false], [true], [true], [true]], "starter_code": "def pillow(s):\n\t", "canonical_solution": "pillow = lambda s: ('n', 'B') in zip(*s)", "entry_point": "pillow", "task_id": "TACO_lite/1843", "input_output_examples": [[[0]], [[1]]]}
{"requirement": "def list_squared(m, n):\n\t\"\"\"\nDivisors of 42 are : 1, 2, 3, 6, 7, 14, 21, 42.\nThese divisors squared are: 1, 4, 9, 36, 49, 196, 441, 1764.\nThe sum of the squared divisors is 2500 which is 50 * 50, a square!\n\nGiven two integers m, n (1 <= m <= n) we want to find all integers \nbetween m and n whose sum of squared divisors is itself a square.\n42 is such a number.\n\nThe result will be an array of arrays or of tuples (in C an array of Pair) or a string, each subarray having two elements,\nfirst the number whose squared divisors is a square and then the sum\nof the squared divisors.\n\n**Note**\n\nIn Fortran - as in any other language - the returned string is not permitted to contain any redundant trailing whitespace: you can use dynamically allocated character strings.\n\"\"\"", "inputs": [[1, 250], [42, 250], [250, 500], [300, 600], [600, 1500], [1500, 1800], [1800, 2000], [2000, 2200], [2200, 5000], [5000, 10000]], "outputs": [[[[1, 1], [42, 2500], [246, 84100]]], [[[42, 2500], [246, 84100]]], [[[287, 84100]]], [[]], [[[728, 722500], [1434, 2856100]]], [[[1673, 2856100]]], [[[1880, 4884100]]], [[]], [[[4264, 24304900]]], [[[6237, 45024100], [9799, 96079204], [9855, 113635600]]]], "starter_code": "def list_squared(m, n):\n\t", "canonical_solution": "WOAH = [1, 42, 246, 287, 728, 1434, 1673, 1880, 4264, 6237, 9799, 9855, 18330, 21352, 21385, 24856, 36531, 39990, 46655, 57270, 66815, 92664, 125255, 156570, 182665, 208182, 212949, 242879, 273265, 380511, 391345, 411558, 539560, 627215, 693160, 730145, 741096]\nlist_squared = lambda HUH, YEAH: [[YES, DUH(YES)] for YES in WOAH if YES >= HUH and YES <= YEAH]\nDUH = lambda YEP: sum((WOW ** 2 for WOW in range(1, YEP + 1) if YEP % WOW == 0))", "entry_point": "list_squared", "task_id": "TACO_lite/1846", "input_output_examples": [[[4, 3, 2], [10, 2], [25]], [["1     1     1     1\n 2   2 2   2 2   2 \n  3 3   3 3   3 3  \n   4     4     4   \n  3 3   3 3   3 3  \n 2   2 2   2 2   2 \n1     1     1     1\n 2   2 2   2 2   2 \n  3 3   3 3   3 3  \n   4     4     4   \n  3 3   3 3   3 3  \n 2   2 2   2 2   2 \n1     1     1     1"], ["1                 1                 1\n 2               2 2               2 \n  3             3   3             3  \n   4           4     4           4   \n    5         5       5         5    \n     6       6         6       6     \n      7     7           7     7      \n       8   8             8   8       \n        9 9               9 9        \n         0                 0         \n        9 9               9 9        \n       8   8             8   8       \n      7     7           7     7      \n     6       6         6       6     \n    5         5       5         5    \n   4           4     4           4   \n  3             3   3             3  \n 2               2 2               2 \n1                 1                 1"], ["1                                               1\n 2                                             2 \n  3                                           3  \n   4                                         4   \n    5                                       5    \n     6                                     6     \n      7                                   7      \n       8                                 8       \n        9                               9        \n         0                             0         \n          1                           1          \n           2                         2           \n            3                       3            \n             4                     4             \n              5                   5              \n               6                 6               \n                7               7                \n                 8             8                 \n                  9           9                  \n                   0         0                   \n                    1       1                    \n                     2     2                     \n                      3   3                      \n                       4 4                       \n                        5                        \n                       4 4                       \n                      3   3                      \n                     2     2                     \n                    1       1                    \n                   0         0                   \n                  9           9                  \n                 8             8                 \n                7               7                \n               6                 6               \n              5                   5              \n             4                     4             \n            3                       3            \n           2                         2           \n          1                           1          \n         0                             0         \n        9                               9        \n       8                                 8       \n      7                                   7      \n     6                                     6     \n    5                                       5    \n   4                                         4   \n  3                                           3  \n 2                                             2 \n1                                               1"]]]}
{"requirement": "def isomorph(a, b):\"\"\"\nTwo strings ```a``` and b are called isomorphic if there is a one to one mapping possible for every character of ```a``` to every character of ```b```. And all occurrences of every character in ```a``` map to same character in ```b```.\n\n## Task\n\nIn this kata you will create a function that return ```True``` if two given strings are isomorphic to each other, and ```False``` otherwise. Remember that order is important.\n\nYour solution must be able to handle words with more than 10 characters.\n\"\"\"", "inputs": [["ESTATE", "DUELED"], ["XXX", "YYY"], ["CBAABC", "DEFFED"], ["RAMBUNCTIOUSLY", "THERMODYNAMICS"], ["DISCRIMINATIVE", "SIMPLIFICATION"], ["SEE", "SAW"], ["BANANA", "SENSE"], ["AB", "CC"], ["XXY", "XYY"], ["ABCBACCBA", "ABCBACCAB"], ["AA", "BBB"], ["abcdefghijk", "abcdefghijba"]], "outputs": [[true], [true], [true], [true], [true], [false], [false], [false], [false], [false], [false], [false]], "starter_code": "def isomorph(a, b):", "canonical_solution": "def isomorph(a, b):\n    return [a.index(x) for x in a] == [b.index(y) for y in b]", "entry_point": "isomorph", "task_id": "TACO_lite/1852", "input_output_examples": [[["ababaa"], ["abc"]], [[11], [3]]]}
{"requirement": "def whosemove(lastPlayer, win):\"\"\"# Task\nTwo players - `\"black\"` and `\"white\"` are playing a game. The game consists of several rounds. If a player wins in a round, he is to move again during the next round. If a player loses a round, it's the other player who moves on the next round. Given whose turn it was on the previous round and whether he won, determine whose turn it is on the next round.\n\n\n\n# Input/Output\n\n\n`[input]` string `lastPlayer`/`$last_player`\n\n`\"black\"` or `\"white\"` - whose move it was during the previous round.\n\n`[input]` boolean `win`/`$win`\n\n`true` if the player who made a move during the previous round won, `false` otherwise.\n\n`[output]` a string\n\nReturn `\"white\"` if white is to move on the next round, and `\"black\"` otherwise.\n\"\"\"", "inputs": [["black", false], ["white", false], ["black", true], ["white", true]], "outputs": [["white"], ["black"], ["black"], ["white"]], "starter_code": "def whosemove(lastPlayer, win):", "canonical_solution": "def whosemove(lastPlayer, win):\n    return lastPlayer if win else 'white' if lastPlayer == 'black' else 'black'", "entry_point": "whosemove", "task_id": "TACO_lite/1854", "input_output_examples": [[[[1, 2, 3]]], [[9]]]}
{"requirement": "def men_from_boys(arr):\"\"\"# Scenario \n\n*Now that the competition gets tough it will* **_Sort out the men from the boys_** . \n\n**_Men_** are the **_Even numbers_** and **_Boys_** are the **_odd_**   ![!alt](https://i.imgur.com/mdX8dJP.png) ![!alt](https://i.imgur.com/mdX8dJP.png) \n\n___\n# Task\n\n**_Given_** an *array/list [] of n integers* , **_Separate_** *The even numbers from the odds* , or **_Separate_**  **_the men from the boys_**  ![!alt](https://i.imgur.com/mdX8dJP.png) ![!alt](https://i.imgur.com/mdX8dJP.png)  \n___\n# Notes\n\n* **_Return_** *an array/list where* **_Even numbers_** **_come first then odds_** \n\n* Since , **_Men are stronger than Boys_** , *Then* **_Even numbers_** in **_ascending order_** While **_odds in descending_** .\n\n* **_Array/list_** size is *at least **_4_*** .\n\n* **_Array/list_** numbers could be a *mixture of positives , negatives* .\n\n* **_Have no fear_** , *It is guaranteed that no Zeroes will exists* . ![!alt](https://i.imgur.com/mdX8dJP.png)  \n\n* **_Repetition_** of numbers in *the array/list could occur* , So **_(duplications are not included when separating)_**.\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [Bizarre Sorting-katas](https://www.codewars.com/collections/bizarre-sorting-katas)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[[7, 3, 14, 17]], [[2, 43, 95, 90, 37]], [[20, 33, 50, 34, 43, 46]], [[82, 91, 72, 76, 76, 100, 85]], [[2, 15, 17, 15, 2, 10, 10, 17, 1, 1]], [[-32, -39, -35, -41]], [[-64, -71, -63, -66, -65]], [[-94, -99, -100, -99, -96, -99]], [[-53, -26, -53, -27, -49, -51, -14]], [[-17, -45, -15, -33, -85, -56, -86, -30]], [[12, 89, -38, -78]], [[2, -43, 95, -90, 37]], [[82, -61, -87, -12, 21, 1]], [[63, -57, 76, -85, 88, 2, -28]], [[49, 818, -282, 900, 928, 281, -282, -1]]], "outputs": [[[14, 17, 7, 3]], [[2, 90, 95, 43, 37]], [[20, 34, 46, 50, 43, 33]], [[72, 76, 82, 100, 91, 85]], [[2, 10, 17, 15, 1]], [[-32, -35, -39, -41]], [[-66, -64, -63, -65, -71]], [[-100, -96, -94, -99]], [[-26, -14, -27, -49, -51, -53]], [[-86, -56, -30, -15, -17, -33, -45, -85]], [[-78, -38, 12, 89]], [[-90, 2, 95, 37, -43]], [[-12, 82, 21, 1, -61, -87]], [[-28, 2, 76, 88, 63, -57, -85]], [[-282, 818, 900, 928, 281, 49, -1]]], "starter_code": "def men_from_boys(arr):", "canonical_solution": "def men_from_boys(arr):\n    men = []\n    boys = []\n    for i in sorted(set(arr)):\n        if i % 2 == 0:\n            men.append(i)\n        else:\n            boys.append(i)\n    return men + boys[::-1]", "entry_point": "men_from_boys", "task_id": "TACO_lite/1855", "input_output_examples": [[[[1, -4, 7, 12]], [[]]], [[20], [0]]]}
{"requirement": "def amicable_numbers(n1, n2):\"\"\"Amicable numbers are two different numbers so related that the sum of the proper divisors of each is equal to the other number. (A proper divisor of a number is a positive factor of that number other than the number itself.)\n\nDerive function ```amicableNumbers(num1, num2)``` which returns ```true/True``` if pair ```num1 num2``` are amicable, ```false/False``` if not.\n\nSee more at https://en.wikipedia.org/wiki/Amicable_numbers\n\"\"\"", "inputs": [[220, 284], [220, 280], [1184, 1210], [220221, 282224], [10744, 10856], [299920, 9284], [999220, 2849], [122265, 139815]], "outputs": [[true], [false], [true], [false], [true], [false], [false], [true]], "starter_code": "def amicable_numbers(n1, n2):", "canonical_solution": "def getDivs(n):\n    return {1} | {y for x in range(2, int(n ** 0.5) + 1) for y in [n // x, x] if not n % x}\n\ndef amicable_numbers(n1, n2):\n    return sum(getDivs(n1)) == n2 and sum(getDivs(n2)) == n1", "entry_point": "amicable_numbers", "task_id": "TACO_lite/1856", "input_output_examples": [[["add"], ["Dad"], ["aeiou"], ["sillystring"], ["abcdefghijklmnopqrstuvwxyz"], ["Count my unique consonants!!"]], [[1], [1], [0], [7], [21], [7]]]}
{"requirement": "def string_letter_count(s):\"\"\"\nTake an input string and return a string that is made up of the number of occurences of each english letter in the input followed by that letter, sorted alphabetically. The output string shouldn't contain chars missing from input (chars with 0 occurence); leave them out.\n\nAn empty string, or one with no letters, should return an empty string.\n\nNotes:\n\n* the input will always be valid;\n* treat letters as **case-insensitive**\n\"\"\"", "inputs": [["The quick brown fox jumps over the lazy dog."], ["The time you enjoy wasting is not wasted time."], ["./4592#{}()"], ["This%Sentence\"is$$being^tested."], ["abccdefgdhijklmno_pqrsTuvwxYz"], [""], ["."], ["y"]], "outputs": [["1a1b1c1d3e1f1g2h1i1j1k1l1m1n4o1p1q2r1s2t2u1v1w1x1y1z"], ["2a1d5e1g1h4i1j2m3n3o3s6t1u2w2y"], [""], ["1b1c1d6e1g1h3i3n4s4t"], ["1a1b2c2d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z"], [""], [""], ["1y"]], "starter_code": "def string_letter_count(s):", "canonical_solution": "from collections import Counter\n\ndef string_letter_count(s):\n    cnt = Counter((c for c in s.lower() if c.isalpha()))\n    return ''.join((str(n) + c for c, n in sorted(cnt.items())))", "entry_point": "string_letter_count", "task_id": "TACO_lite/1858", "input_output_examples": [[["Sarah Connor"]], [["S600 C560"]]]}
{"requirement": "def number_of_carries(a, b):\"\"\"# Task\n Two integer numbers are added using the column addition method. When using this method, some additions of digits produce non-zero carries to the next positions. Your task is to calculate the number of non-zero carries that will occur while adding the given numbers.\n\n The numbers are added in base 10.\n\n# Input/Output\n\n\n - `[input]` integer `a`\n\n  A positive integer.\n\n  Constraints: `1 ≤ a ≤ 10^7`\n\n\n - `[input]` integer `b`\n\n  A positive integer.\n\n  Constraints: `1 ≤ b ≤ 10^7`\n\n \n - `[output]` an integer\n\"\"\"", "inputs": [[543, 3456], [1927, 6426], [9999, 1], [1234, 5678]], "outputs": [[0], [2], [4], [2]], "starter_code": "def number_of_carries(a, b):", "canonical_solution": "def number_of_carries(a, b):\n    ans, carrie = (0, 0)\n    while a > 0 or b > 0:\n        carrie = (a % 10 + b % 10 + carrie) // 10\n        ans += [0, 1][carrie > 0]\n        a //= 10\n        b //= 10\n    return ans", "entry_point": "number_of_carries", "task_id": "TACO_lite/1862", "input_output_examples": [[[10, 15, 15, 10], [15, 10, 15, 10], [15, 10, 15, 9]], [[true], [true], [false]]]}
{"requirement": "def compare(s1, s2):\"\"\"\nA section of a certain level may appear directly inside a section several levels higher without the levels between. Sections with trailing \".0\" are considered to be the same as the section with the trailing \".0\" truncated. Thus, section numbers are strings of dot-separated integers. The highest level sections (chapters) are numbered 1, 2, 3, etc. Second level sections are numbered 1.1, 1.2, 1.3, 2.1, 2.2, 2.3, etc. Next level sections are numbered 1.1.1, 1.1.2, 1.1.2, 1.2.1, 1.2.2, etc. There is no bound on the number of sections a document may have, nor is there any bound on the number of levels. \n\n```if:python\nWrite a function `compare(section1, section2)` that returns `-1`, `0`, or `1` depending on whether `section1` is before, same as, or after `section2` respectively.\n```\n```if:javascript\nWrite a function `cmp(section1, section2)` that returns `-1`, `0`, or `1` depending on whether `section1` is before, same as, or after `section2` respectively.\n```\n```if:haskell\nWrite a function `cmp section1 section2` that returns `LT`, `EQ` or `GT` depending on whether `section1` is before, same as, or after `section2` respectively.\n```\n\"\"\"", "inputs": [["1", "2"], ["1.1", "1.2"], ["1.1", "1"], ["1.2.3.4", "1.2.3.4"], ["3", "3.0"], ["3", "3.0.0.0"], ["1.2.1", "1.2.0"], ["3.0.0", "3.1.1"], ["3.0.1", "3.1"], ["1.2.3", "1.02.003"], ["1.20", "1.5"]], "outputs": [[-1], [-1], [1], [0], [0], [0], [1], [-1], [-1], [0], [1]], "starter_code": "def compare(s1, s2):", "canonical_solution": "def compare(s1, s2):\n    v1, v2 = (version(s1), version(s2))\n    return -1 if v1 < v2 else 1 if v1 > v2 else 0\n\ndef version(s):\n    v = [int(n) for n in s.split('.')]\n    while v[-1] == 0:\n        v = v[0:-1]\n    return v", "entry_point": "compare", "task_id": "TACO_lite/1863", "input_output_examples": [[["assault"], ["typhoid"]], [["asslt"], ["typhd"]]]}
{"requirement": "def is_pronic(n):\"\"\"\n## Task:\nYou have to create a function `isPronic` to check whether the argument passed is a Pronic Number and return true if it is & false otherwise.\n\n### Description:\n\n`Pronic Number` -A pronic number, oblong number, rectangular number or heteromecic number, is a number which is the product of two consecutive integers, that is, n(n + 1).\n\n### Explanation:\n    \nA Pronic Number is defined as a number that can be expressed as the product of two consecutive integers.\n\"\"\"", "inputs": [[2], [3], [4], [5], [6], [-3], [-27]], "outputs": [[true], [false], [false], [false], [true], [false], [false]], "starter_code": "def is_pronic(n):", "canonical_solution": "import math\n\ndef is_pronic(n):\n    return n >= 0 and math.sqrt(1 + 4 * n) % 1 == 0", "entry_point": "is_pronic", "task_id": "TACO_lite/1864", "input_output_examples": [[["a", 1], ["", 1]], [["b"], [""]]]}
{"requirement": "def palindrome(num, s):\"\"\"\nA palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward. \n\nYou'll be given 2 numbers as arguments: ```(num,s)```.  Write a function which returns an array of ```s``` number of numerical palindromes that come after ```num```. If ```num``` is a palindrome itself, it should be included in the count. \n\nReturn \"Not valid\" instead if any one of the inputs is not an integer or is less than 0.\n\nFor this kata, single digit numbers will NOT be considered numerical palindromes. \n\nIn Haskell, the return type is a Maybe which returns Nothing if either of the inputs is negative.\"\n\nOther Kata in this Series:\nNumerical Palindrome #1\nNumerical Palindrome #1.5 \nNumerical Palindrome #2\nNumerical Palindrome #3\nNumerical Palindrome #3.5\nNumerical Palindrome #4\nNumerical Palindrome #5\n\"\"\"", "inputs": [[6, 4], [75, 1], [19, 3], [101, 2], ["ACCDDCCA", 3], [773, "1551"], [-4505, 15]], "outputs": [[[11, 22, 33, 44]], [[77]], [[22, 33, 44]], [[101, 111]], ["Not valid"], ["Not valid"], ["Not valid"]], "starter_code": "def palindrome(num, s):", "canonical_solution": "def palindrome(num, s):\n    if not type(num) == type(s) == int or num < 0 or s < 0:\n        return 'Not valid'\n    ans, num = ([], max(num, 11))\n    while len(ans) != s:\n        if num == int(str(num)[::-1]):\n            ans.append(num)\n        num += 1\n    return ans", "entry_point": "palindrome", "task_id": "TACO_lite/1865", "input_output_examples": [[["K", 200, 10]], [["Invalid gender"]]]}
{"requirement": "def pattern(n):\"\"\"< PREVIOUS KATA\nNEXT KATA >\n \n###Task:\n\nYou have to write a function `pattern` which returns the following Pattern(See Examples) upto (3n-2) rows, where n is parameter.\n\n* Note:`Returning` the pattern is not the same as `Printing` the pattern.\n\n####Rules/Note:\n* The pattern should be created using only unit digits.\n* If `n < 1` then it should return \"\" i.e. empty string.\n* `The length of each line is same`, and is equal to the length of longest line in the pattern i.e. `length = (3n-2)`.\n* Range of Parameters (for the sake of CW Compiler) :\n  + `n ∈ (-∞,50]`\n\n>>>LIST OF ALL MY KATAS<<<\n\"\"\"", "inputs": [[3], [5], [-3], [-11], [-25], [0]], "outputs": [["  111  \n  222  \n1233321\n1233321\n1233321\n  222  \n  111  "], ["    11111    \n    22222    \n    33333    \n    44444    \n1234555554321\n1234555554321\n1234555554321\n1234555554321\n1234555554321\n    44444    \n    33333    \n    22222    \n    11111    "], [""], [""], [""], [""]], "starter_code": "def pattern(n):", "canonical_solution": "def pattern(n):\n    top = [(str(i % 10) * n).center(n * 3 - 2) for i in range(1, n)]\n    left = ''.join((str(i % 10) for i in range(1, n)))\n    middle = left + str(n % 10) * n + left[::-1]\n    return '\\n'.join(top + [middle] * n + top[::-1])", "entry_point": "pattern", "task_id": "TACO_lite/1866", "input_output_examples": [[[263], [236]], [[true], [false]]]}
{"requirement": "def calculate_time(battery,charger):\n\t\"\"\"\n## Task\nTo charge your mobile phone battery, do you know how much time it takes from 0% to 100%? It depends on your cell phone battery capacity and the power of the charger. A rough calculation method is:\n\n```\n0% --> 85%  (fast charge)\n(battery capacity(mAh) * 85%) / power of the charger(mA)\n\n85% --> 95% (decreasing charge)\n(battery capacity(mAh) * 10%) / (power of the charger(mA) * 50%)\n\n95% --> 100% (trickle charge)\n(battery capacity(mAh) * 5%) / (power of the charger(mA) * 20%)\n```\n\n Complete function `calculateTime` that accepts two arguments `battery` and `charger`, return how many hours can charge the battery from 0% to 100%. The result should be a number, round to 2 decimal places (In Haskell, no need to round it).\n\"\"\"", "inputs": [[1000, 500], [1500, 500], [2000, 1000], [5000, 1000], [1000, 5000], [3050, 2600]], "outputs": [[2.6], [3.9], [2.6], [6.5], [0.26], [1.53]], "starter_code": "def calculate_time(battery,charger):\n\t", "canonical_solution": "calculate_time = lambda b, c: round(b / float(c) * 1.3 + 0.0001, 2)", "entry_point": "calculate_time", "task_id": "TACO_lite/1868", "input_output_examples": [[["80661111841"]], [["MTS"]]]}
{"requirement": "def simplify(n):\"\"\"\n### What is simplifying a square root?\n\nIf you have a number, you would start by finding the greatest perfect square divisible by that number. Find the square root of this perfect square, and multiply it by the original number divided by the perfect square. \n\n### Task:\n\nYour job is to write two functions, `simplify`, and `desimplify`, that simplify and desimplify square roots, respectively. (Desimplify isn't a word, but I couldn't come up with a better way to put it.) `simplify` will take an integer and return a string like \"x sqrt y\", and `desimplify` will take a string like \"x sqrt y\" and return an integer. For `simplify`, if a square root cannot be simplified, return \"sqrt y\". \n\n_Do not modify the input._\n\nAlso check out my other creations — [Square Roots: Approximation](https://www.codewars.com/kata/square-roots-approximation), [Square and Cubic Factors](https://www.codewars.com/kata/square-and-cubic-factors), [Keep the Order](https://www.codewars.com/kata/keep-the-order), [Naming Files](https://www.codewars.com/kata/naming-files), [Elections: Weighted Average](https://www.codewars.com/kata/elections-weighted-average), [Identify Case](https://www.codewars.com/kata/identify-case), [Split Without Loss](https://www.codewars.com/kata/split-without-loss), [Adding Fractions](https://www.codewars.com/kata/adding-fractions),\n[Random Integers](https://www.codewars.com/kata/random-integers), [Implement String#transpose](https://www.codewars.com/kata/implement-string-number-transpose), [Implement Array#transpose!](https://www.codewars.com/kata/implement-array-number-transpose), [Arrays and Procs #1](https://www.codewars.com/kata/arrays-and-procs-number-1), and [Arrays and Procs #2](https://www.codewars.com/kata/arrays-and-procs-number-2).\n\"\"\"", "inputs": [[1], [2], [3], [8], [15], [16], [18], [20], [24], [32], [4], [7], [9], [10], [12], [13], [14], [50], [80], [200]], "outputs": [["1"], ["sqrt 2"], ["sqrt 3"], ["2 sqrt 2"], ["sqrt 15"], ["4"], ["3 sqrt 2"], ["2 sqrt 5"], ["2 sqrt 6"], ["4 sqrt 2"], ["2"], ["sqrt 7"], ["3"], ["sqrt 10"], ["2 sqrt 3"], ["sqrt 13"], ["sqrt 14"], ["5 sqrt 2"], ["4 sqrt 5"], ["10 sqrt 2"]], "starter_code": "def simplify(n):", "canonical_solution": "def simplify(n):\n    for d in range(int(n ** 0.5), 0, -1):\n        if not n % d ** 2:\n            break\n    if d * d == n:\n        return '%d' % d\n    elif d == 1:\n        return 'sqrt %d' % n\n    else:\n        return '%d sqrt %d' % (d, n // d ** 2)\n\ndef desimplify(s):\n    x, _, y = s.partition('sqrt')\n    return int(x or '1') ** 2 * int(y or '1')", "entry_point": "simplify", "task_id": "TACO_lite/1869", "input_output_examples": [[[["c3"]], [["d4", "d5", "f3", "c6", "f4"]], [["d4", "d5", "f3", "c6", "f4", "c5", "dxc5"]], [["e6"]], [["e4", "d5", "exf5"]]], [[[".", ".", ".", ".", ".", ".", ".", "."], ["p", "p", "p", "p", "p", "p", "p", "p"], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", "P", ".", ".", ".", ".", "."], ["P", "P", ".", "P", "P", "P", "P", "P"], [".", ".", ".", ".", ".", ".", ".", "."]], [[".", ".", ".", ".", ".", ".", ".", "."], ["p", "p", ".", ".", "p", "p", "p", "p"], [".", ".", "p", ".", ".", ".", ".", "."], [".", ".", ".", "p", ".", ".", ".", "."], [".", ".", ".", "P", ".", "P", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], ["P", "P", "P", ".", "P", ".", "P", "P"], [".", ".", ".", ".", ".", ".", ".", "."]], [[".", ".", ".", ".", ".", ".", ".", "."], ["p", "p", ".", ".", "p", "p", "p", "p"], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", "P", "p", ".", ".", ".", "."], [".", ".", ".", ".", ".", "P", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], ["P", "P", "P", ".", "P", ".", "P", "P"], [".", ".", ".", ".", ".", ".", ".", "."]], ["e6 is invalid"], ["exf5 is invalid"]]]}
{"requirement": "def productsum(n):\"\"\"\nA product-sum number is a natural number N which can be expressed as both the product and the sum of the same set of numbers.\n\nN = a1 × a2 × ... × ak = a1 + a2 + ... + ak\n\nFor a given set of size, k, we shall call the smallest N with this property a minimal product-sum number.\n\nHence for 2 ≤ k ≤ n, the sum of all the minimal product-sum numbers is computed; note that any repeated minimal product-sum number is only counted once in the sum.\n\nYour task is to write an algorithm to compute the sum of all minimal product-sum numbers where 2 ≤ k ≤ n.\n\nCourtesy of ProjectEuler.net\n\"\"\"", "inputs": [[3], [6], [12], [2]], "outputs": [[10], [30], [61], [4]], "starter_code": "def productsum(n):", "canonical_solution": "def productsum(n):\n    pass\n\ndef productsum(kmax):\n\n    def prodsum2(p, s, c, start):\n        k = p - s + c\n        if k < kmax:\n            if p < n[k]:\n                n[k] = p\n            for i in range(start, kmax // p * 2 + 1):\n                prodsum2(p * i, s + i, c + 1, i)\n    kmax += 1\n    n = [2 * kmax] * kmax\n    prodsum2(1, 1, 1, 2)\n    return sum(set(n[2:]))", "entry_point": "productsum", "task_id": "TACO_lite/1872", "input_output_examples": [[[30], [8]], [[3], [0]]]}
{"requirement": "def dpc_sequence(s):\"\"\"# Task\n You are given a string consisting of `\"D\", \"P\" and \"C\"`. A positive integer N is called DPC of this string if it satisfies the following properties: \n \n ```\n For each i = 1, 2, ... , size of the string:\n\n If i-th character is \"D\", then N can be divided by i\n If i-th character is \"P\", then N and i should be relatively prime\n If i-th character is \"C\", then N should neither be divided by i \n                           nor be relatively prime with i```\n\nYour task is to find the smallest DPC of a given string, or return `-1` if there is no such. The result is guaranteed to be `<= 10^9`.\n\n# Input/Output\n\n\n - `[input]` string `s`\n\n  The given string\n\n\n - `[output]` an integer\n\n  The smallest DPC of `s` or `-1` if it doesn't exist.\n\"\"\"", "inputs": [["DDPDD"], ["DDDDPDDCCCDDPDCCPCDCDDPCPCCDDCD"], ["DPCPDPPPDCPDPDPC"], ["DDDDDDCD"], ["CDDDPDDD"], ["DDDDDDPCCDPDPP"]], "outputs": [[20], [15782844], [-1], [-1], [-1], [-1]], "starter_code": "def dpc_sequence(s):", "canonical_solution": "from math import gcd\nfrom functools import reduce\n\ndef dpc_sequence(s):\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    d, p, c = ([], [], [])\n    for i in range(len(s)):\n        if s[i] == 'D':\n            d.append(i + 1)\n        elif s[i] == 'P':\n            p.append(i + 1)\n        else:\n            c.append(i + 1)\n    if not d:\n        return -1\n    lcm_d = reduce(lambda i, j: lcm(i, j), d)\n    for i in p:\n        if gcd(lcm_d, i) != 1:\n            return -1\n    for i in c:\n        if lcm_d % i == 0 or gcd(lcm_d, i) == 1:\n            return -1\n    return lcm_d", "entry_point": "dpc_sequence", "task_id": "TACO_lite/1873", "input_output_examples": [[[12], [32], [1024], [13579], [2335]], [[true], [false], [false], [true], [true]]]}
{"requirement": "def find_f1_eq_f2(n, k):\"\"\"\nWe define the function `f1(n,k)`, as the least multiple of `n` that has all its digits less than `k`. \n\nWe define the function `f2(n,k)`, as the least multiple of `n` that has all the digits that are less than `k`.\n\nEach digit may occur more than once in both values of `f1(n,k)` and `f2(n,k)`.\n\nThe possible values for `n` and `k` according to these ranges for both functions `f1` and `f2` in this kata:\n``` \n1 <= n <= 1.000.000.000.000\n3 <= k <= 9\n``` \n\nThe integer `76` is the first integer that has the same values of `f1` and `f2` for `k = 4`. Let's call these kind of numbers, **forgiving numbers**. (Let's continue with the fashion of attributing personality traits to numbers and, of course, an unknown one)\nSo, `76` is the smallest forgiving number of order `4`.\nIn the same way, `485` is the smallest forgiving number of order `5`.\n\nCreate a function that given an integer `n` and the order `k`, will output the higher and closest forgiving number to `n` of order `k`.\n\nIf the number `n` is a forgiving itself for a certain order `k`, the function will never output the same value, remember, closest and **higher** than `n`.\n\n**Features of the tests:**\n\n* `n` and `k` will be always valid and positive integers.\n\n* A total of 8 fixed tests.\n\n* A total of 150 random tests in the ranges for `n` and `k` given above.\n\nI'll be waiting your awesome solution. :)\n\"\"\"", "inputs": [[542, 5], [1750, 6], [14990, 7], [3456, 4], [30500, 3], [62550, 5], [568525, 7], [9567100, 8]], "outputs": [[547], [1799], [14996], [3462], [30501], [62557], [568531], [9567115]], "starter_code": "def find_f1_eq_f2(n, k):", "canonical_solution": "def find_f1_eq_f2(n, k):\n    s = set(range(k))\n    while True:\n        n += 1\n        testn = n\n        while True:\n            f = set(map(int, str(testn)))\n            if f <= s:\n                if f == s:\n                    return n\n                break\n            testn += n", "entry_point": "find_f1_eq_f2", "task_id": "TACO_lite/1874", "input_output_examples": [[["red", "bumpy"]], [["0.57"]]]}
{"requirement": "def solve(s):\"\"\"\nIf we alternate the vowels and consonants in the string, we get a list arranged alphabetically. These are the only possibilities in which vowels and consonants are alternated. The first element is alphabetically lowest. \n\nGiven a string:\n* alternate the vowels and consonants and return the lexicographically lowest element in the list\n* If any two or more vowels or consonants must follow each other, return `\"failed\"`\n* if the number of vowels and consonants are equal, the first letter of the result must be a vowel.\n\n```if c:\nIn C, return an allocated string even if the response is \"failed\".\n```\n\nVowels will be any of \"aeiou\". Input will be a lowercase string, no spaces. See test cases for more examples. \n\nGood luck!\n\nIf you like this Kata, please try: \n\n[Consonant value](https://www.codewars.com/kata/59c633e7dcc4053512000073)\n\n[Alternate capitalization](https://www.codewars.com/kata/59cfc000aeb2844d16000075)\n\"\"\"", "inputs": [["java"], ["oruder"], ["zodiac"], ["apple"], ["acidity"], ["codewars"], ["orudere"]], "outputs": [["ajav"], ["edorur"], ["acidoz"], ["lapep"], ["caditiy"], ["failed"], ["ederoru"]], "starter_code": "def solve(s):", "canonical_solution": "def solve(s):\n    vowels = sorted((c for c in s if c in 'aeiou'))\n    consonants = sorted((c for c in s if c not in 'aeiou'))\n    part1, part2 = sorted((vowels, consonants), key=len, reverse=True)\n    part2.append('')\n    if len(part1) > len(part2):\n        return 'failed'\n    return ''.join((a + b for a, b in zip(part1, part2)))", "entry_point": "solve", "task_id": "TACO_lite/1877", "input_output_examples": [[[1.08]], [[30]]]}
{"requirement": "def max_number(n):\"\"\"# Task \n\n**_Given_**   *a number* , **_Return_**  **_The Maximum number _**  *could be formed from the digits of the number given* . \n___\n# Notes\n\n* **_Only Natural numbers_** *passed to the function , numbers Contain digits [0:9] inclusive*\n\n* **_Digit Duplications_** *could occur* , So also **_consider it when forming the Largest_**\n\n___\n\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[213], [7389], [63792], [566797], [1000000]], "outputs": [[321], [9873], [97632], [977665], [1000000]], "starter_code": "def max_number(n):", "canonical_solution": "def max_number(n):\n    return int(''.join(sorted(str(n), reverse=True)))", "entry_point": "max_number", "task_id": "TACO_lite/1881", "input_output_examples": [[[26], [100], [7]], [["3+23", "7+19", "13+13"], ["3+97", "11+89", "17+83", "29+71", "41+59", "47+53"], []]]}
{"requirement": "def find_even_index(arr):\"\"\"\nYou are going to be given an array of integers. Your job is to take that array and find an index N where the sum of the integers to the left of N is equal to the sum of the integers to the right of N. If there is no index that would make this happen, return `-1`.\n\nNote: Please remember that in most programming/scripting languages the index of an array starts at 0.\n\n__Input:__  \nAn integer array of length `0 < arr < 1000`. The numbers in the array can be any integer positive or negative.\n\n__Output:__  \nThe lowest index `N` where the side to the left of `N` is equal to the side to the right of `N`. If you do not find an index that fits these rules, then you will return `-1`.\n\n__Note:__  \nIf you are given an array with multiple answers, return the lowest correct index.\n\"\"\"", "inputs": [[[1, 2, 3, 4, 3, 2, 1]], [[1, 100, 50, -51, 1, 1]], [[1, 2, 3, 4, 5, 6]], [[20, 10, 30, 10, 10, 15, 35]], [[20, 10, -80, 10, 10, 15, 35]], [[10, -80, 10, 10, 15, 35, 20]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]], [[0, 0, 0, 0, 0]], [[-1, -2, -3, -4, -3, -2, -1]], [[-100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2]], [[8, 8]], [[8, 0]], [[0, 8]], [[7, 3, -3]], [[8]], [[10, -10]], [[-3, 2, 1, 0]], [[-15, 5, 11, 17, 19, -17, 20, -6, 17, -17, 19, 16, -15, -6, 20, 17]]], "outputs": [[3], [1], [-1], [3], [0], [6], [-1], [0], [3], [-1], [-1], [0], [1], [0], [0], [-1], [3], [8]], "starter_code": "def find_even_index(arr):", "canonical_solution": "def find_even_index(arr):\n    for i in range(len(arr)):\n        if sum(arr[:i]) == sum(arr[i + 1:]):\n            return i\n    return -1", "entry_point": "find_even_index", "task_id": "TACO_lite/1882", "input_output_examples": [[[384000000]], [[42]]]}
{"requirement": "def six_column_encryption(msg):\"\"\"# Task\n A common way for prisoners to communicate secret messages with each other is to encrypt them. One such encryption algorithm goes as follows.\n\n You take the message and place it inside an `nx6` matrix (adjust the number of rows depending on the message length) going from top left to bottom right (one row at a time) while replacing spaces with dots (.) and adding dots at the end of the last row (if necessary) to complete the matrix.\n \n Once the message is in the matrix you read again from top left to bottom right but this time going one column at a time and treating each column as one word.\n\n# Input/Output\n\n\n - `[input]` string `msg`\n\n  a regular english sentance representing the original message\n\n\n - `[output]` a string\n\n  encrypted message\n\"\"\"", "inputs": [["Attack at noon or we are done for"], ["Let's kill them all"], ["Meet me behind the kitchen tomorrow at seven in the evening"]], "outputs": [["A.ow.f tanedo tt..or a.oan. cnrre. ko.e.."], ["Lkhl eie. tlm. 'l.. s.a. .tl."], ["Men.eoaete e.dknrtnhn eb.i.r..ei tetttosi.n .hhcoweneg miehm.v.v."]], "starter_code": "def six_column_encryption(msg):", "canonical_solution": "def six_column_encryption(msg):\n    msg = msg.replace(' ', '.') + '.' * ((6 - len(msg) % 6) % 6)\n    return ' '.join((msg[n::6] for n in range(6)))", "entry_point": "six_column_encryption", "task_id": "TACO_lite/1887", "input_output_examples": [[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]]], [[10, -65]]]}
{"requirement": "def two_count(n):\"\"\"\nWrite a function that returns the number of '2's in the factorization of a number.  \n\nThe number passed to two_count (twoCount)  will always be a positive integer greater than or equal to 1.\n\"\"\"", "inputs": [[24], [17280], [222222222222], [256], [1], [2], [482848428248882482], [7], [7777777777777777], [84934656]], "outputs": [[3], [7], [1], [8], [0], [1], [1], [0], [0], [20]], "starter_code": "def two_count(n):", "canonical_solution": "def two_count(n):\n    res = 0\n    while not n & 1:\n        res += 1\n        n >>= 1\n    return res", "entry_point": "two_count", "task_id": "TACO_lite/1889", "input_output_examples": [[[[3, 4]], [[7, 11]]], [[5], [59]]]}
{"requirement": "def is_valid_hk_phone_number(number):\"\"\"# Valid HK Phone Number\n\n## Overview\n\nIn Hong Kong, a valid phone number has the format ```xxxx xxxx``` where ```x``` is a decimal digit (0-9).  \n\n## Task\n\nDefine two functions, ```isValidHKPhoneNumber``` and ```hasValidHKPhoneNumber```, that ```return```s whether a given string is a valid HK phone number and contains a valid HK phone number respectively (i.e. ```true/false``` values).\n\nIf in doubt please refer to the example tests.\n\"\"\"", "inputs": [["1234 5678"], ["2359 1478"], ["85748475"], ["3857  4756"], ["sklfjsdklfjsf"], ["     1234 5678   "], ["abcd efgh"], ["9684 2396"], ["836g 2986"], ["0000 0000"], ["123456789"], [" 987 634 "], ["    6    "], ["8A65 2986"], ["8368 2aE6"], ["8c65 2i86"]], "outputs": [[true], [true], [false], [false], [false], [false], [false], [true], [false], [true], [false], [false], [false], [false], [false], [false]], "starter_code": "def is_valid_hk_phone_number(number):", "canonical_solution": "import re\nHK_PHONE_NUMBER = '\\\\d{4} \\\\d{4}'\n\ndef is_valid_hk_phone_number(number):\n    return bool(re.match(HK_PHONE_NUMBER + '\\\\Z', number))\n\ndef has_valid_HK_phone_number(number):\n    return bool(re.search(HK_PHONE_NUMBER, number))", "entry_point": "is_valid_hk_phone_number", "task_id": "TACO_lite/1892", "input_output_examples": [[[[12, 20]], [[1, 5, 2]], [[10, 3, 5, 6, 2]]], [[[20, 12]], [[10, 2, 5]], [[180, 600, 360, 300, 900]]]]}
{"requirement": "def even_or_odd(number):\"\"\"\nCreate a function (or write a script in Shell) that takes an integer as an argument and returns \"Even\" for even numbers or \"Odd\" for odd numbers.\n\n## SQL Notes:\nYou will be given a table, `numbers`, with one column `number`.\n\nReturn a table with a column `is_even` containing \"Even\" or \"Odd\" depending on `number` column values.\n\n### numbers table schema\n* number INT\n\n### output table schema\n* is_even STRING\n\"\"\"", "inputs": [[2], [1], [0], [1545452], [7], [78], [17], [74156741], [100000], [-123], [-456]], "outputs": [["Even"], ["Odd"], ["Even"], ["Even"], ["Odd"], ["Even"], ["Odd"], ["Odd"], ["Even"], ["Odd"], ["Even"]], "starter_code": "def even_or_odd(number):", "canonical_solution": "def even_or_odd(number):\n    return 'Odd' if number % 2 else 'Even'", "entry_point": "even_or_odd", "task_id": "TACO_lite/1893", "input_output_examples": [[[[["|", "J", "|", "|"], ["|", "|", "|", "J"], ["...", "...", "...", "..."]]]], [[[["|", "|", "|", "|"], ["|", "|", "|", "|"], ["...", "...", "...", "..."]]]]]}
{"requirement": "def odd_row(n):\n\t\"\"\"\nGiven a triangle of consecutive odd numbers:\n\nfind the triangle's row knowing its index (the rows are 1-indexed).\n\n**Note**: your code should be optimized to handle big inputs.\n\n___\n\nThe idea for this kata was taken from this kata: [Sum of odd numbers](https://www.codewars.com/kata/sum-of-odd-numbers)\n\"\"\"", "inputs": [[1], [2], [13], [19], [41], [93]], "outputs": [[[1]], [[3, 5]], [[157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181]], [[343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379]], [[1641, 1643, 1645, 1647, 1649, 1651, 1653, 1655, 1657, 1659, 1661, 1663, 1665, 1667, 1669, 1671, 1673, 1675, 1677, 1679, 1681, 1683, 1685, 1687, 1689, 1691, 1693, 1695, 1697, 1699, 1701, 1703, 1705, 1707, 1709, 1711, 1713, 1715, 1717, 1719, 1721]], [[8557, 8559, 8561, 8563, 8565, 8567, 8569, 8571, 8573, 8575, 8577, 8579, 8581, 8583, 8585, 8587, 8589, 8591, 8593, 8595, 8597, 8599, 8601, 8603, 8605, 8607, 8609, 8611, 8613, 8615, 8617, 8619, 8621, 8623, 8625, 8627, 8629, 8631, 8633, 8635, 8637, 8639, 8641, 8643, 8645, 8647, 8649, 8651, 8653, 8655, 8657, 8659, 8661, 8663, 8665, 8667, 8669, 8671, 8673, 8675, 8677, 8679, 8681, 8683, 8685, 8687, 8689, 8691, 8693, 8695, 8697, 8699, 8701, 8703, 8705, 8707, 8709, 8711, 8713, 8715, 8717, 8719, 8721, 8723, 8725, 8727, 8729, 8731, 8733, 8735, 8737, 8739, 8741]]], "starter_code": "def odd_row(n):\n\t", "canonical_solution": "odd_row = lambda n: list(range(n * (n - 1) + 1, n * (n + 1), 2))", "entry_point": "odd_row", "task_id": "TACO_lite/1896", "input_output_examples": [[[[4, 4, 4, 3, 3], 12], [[4, 4, 4, 3, 3], 11]], [[3], [2]]]}
{"requirement": "def nth_smallest(arr, pos):\"\"\"# Introduction and Warm-up (Highly recommended)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n___\n\n# Task\n\n**_Given_** an *array/list [] of integers* , **_Find_**  *the Nth smallest element in this array of integers*\n___\n\n# Notes \n\n* **_Array/list_** size is *at least 3* .\n\n* **_Array/list's numbers_** *could be a **_mixture_** of positives , negatives and zeros* .\n\n* **_Repetition_** *in array/list's numbers could occur* , so **_don't Remove Duplications_** .\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[[3, 1, 2], 2], [[15, 20, 7, 10, 4, 3], 3], [[-5, -1, -6, -18], 4], [[-102, -16, -1, -2, -367, -9], 5], [[2, 169, 13, -5, 0, -1], 4]], "outputs": [[2], [7], [-1], [-2], [2]], "starter_code": "def nth_smallest(arr, pos):", "canonical_solution": "def nth_smallest(arr, pos):\n    return sorted(arr)[pos - 1]", "entry_point": "nth_smallest", "task_id": "TACO_lite/1898", "input_output_examples": [[[[[2, -2], [5, 3]], [[-1, 4], [7, -6]]]], [[[[-16, 20], [16, 2]]]]]}
